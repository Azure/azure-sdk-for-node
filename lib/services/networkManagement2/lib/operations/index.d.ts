/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback, HttpOperationResponse } from 'ms-rest';
import * as models from '../models';


/**
 * @class
 * ApplicationGateways
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the NetworkManagementClient.
 */
export interface ApplicationGateways {


    /**
     * Deletes the specified application gateway.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} applicationGatewayName The name of the application gateway.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, applicationGatewayName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the specified application gateway.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} applicationGatewayName The name of the application gateway.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, applicationGatewayName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, applicationGatewayName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, applicationGatewayName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets the specified application gateway.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} applicationGatewayName The name of the application gateway.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApplicationGateway>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, applicationGatewayName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApplicationGateway>>;

    /**
     * Gets the specified application gateway.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} applicationGatewayName The name of the application gateway.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApplicationGateway} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApplicationGateway} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApplicationGateway} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, applicationGatewayName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ApplicationGateway>;
    get(resourceGroupName: string, applicationGatewayName: string, callback: ServiceCallback<models.ApplicationGateway>): void;
    get(resourceGroupName: string, applicationGatewayName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplicationGateway>): void;


    /**
     * Creates or updates the specified application gateway.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} applicationGatewayName The name of the application gateway.
     *
     * @param {object} parameters Parameters supplied to the create or update
     * application gateway operation.
     *
     * @param {object} [parameters.sku] SKU of the application gateway resource.
     *
     * @param {string} [parameters.sku.name] Name of an application gateway SKU.
     * Possible values include: 'Standard_Small', 'Standard_Medium',
     * 'Standard_Large', 'WAF_Medium', 'WAF_Large'
     *
     * @param {string} [parameters.sku.tier] Tier of an application gateway.
     * Possible values include: 'Standard', 'WAF'
     *
     * @param {number} [parameters.sku.capacity] Capacity (instance count) of an
     * application gateway.
     *
     * @param {object} [parameters.sslPolicy] SSL policy of the application gateway
     * resource.
     *
     * @param {array} [parameters.sslPolicy.disabledSslProtocols] Ssl protocols to
     * be disabled on application gateway.
     *
     * @param {string} [parameters.sslPolicy.policyType] Type of Ssl Policy.
     * Possible values include: 'Predefined', 'Custom'
     *
     * @param {string} [parameters.sslPolicy.policyName] Name of Ssl predefined
     * policy. Possible values include: 'AppGwSslPolicy20150501',
     * 'AppGwSslPolicy20170401', 'AppGwSslPolicy20170401S'
     *
     * @param {array} [parameters.sslPolicy.cipherSuites] Ssl cipher suites to be
     * enabled in the specified order to application gateway.
     *
     * @param {string} [parameters.sslPolicy.minProtocolVersion] Minimum version of
     * Ssl protocol to be supported on application gateway. Possible values
     * include: 'TLSv1_0', 'TLSv1_1', 'TLSv1_2'
     *
     * @param {array} [parameters.gatewayIPConfigurations] Subnets of application
     * the gateway resource.
     *
     * @param {array} [parameters.authenticationCertificates] Authentication
     * certificates of the application gateway resource.
     *
     * @param {array} [parameters.sslCertificates] SSL certificates of the
     * application gateway resource.
     *
     * @param {array} [parameters.frontendIPConfigurations] Frontend IP addresses
     * of the application gateway resource.
     *
     * @param {array} [parameters.frontendPorts] Frontend ports of the application
     * gateway resource.
     *
     * @param {array} [parameters.probes] Probes of the application gateway
     * resource.
     *
     * @param {array} [parameters.backendAddressPools] Backend address pool of the
     * application gateway resource.
     *
     * @param {array} [parameters.backendHttpSettingsCollection] Backend http
     * settings of the application gateway resource.
     *
     * @param {array} [parameters.httpListeners] Http listeners of the application
     * gateway resource.
     *
     * @param {array} [parameters.urlPathMaps] URL path map of the application
     * gateway resource.
     *
     * @param {array} [parameters.requestRoutingRules] Request routing rules of the
     * application gateway resource.
     *
     * @param {array} [parameters.redirectConfigurations] Redirect configurations
     * of the application gateway resource.
     *
     * @param {object} [parameters.webApplicationFirewallConfiguration] Web
     * application firewall configuration.
     *
     * @param {boolean} parameters.webApplicationFirewallConfiguration.enabled
     * Whether the web application firewall is enabled or not.
     *
     * @param {string} parameters.webApplicationFirewallConfiguration.firewallMode
     * Web application firewall mode. Possible values include: 'Detection',
     * 'Prevention'
     *
     * @param {string} parameters.webApplicationFirewallConfiguration.ruleSetType
     * The type of the web application firewall rule set. Possible values are:
     * 'OWASP'.
     *
     * @param {string}
     * parameters.webApplicationFirewallConfiguration.ruleSetVersion The version of
     * the rule set type.
     *
     * @param {array}
     * [parameters.webApplicationFirewallConfiguration.disabledRuleGroups] The
     * disabled rule groups.
     *
     * @param {boolean}
     * [parameters.webApplicationFirewallConfiguration.requestBodyCheck] Whether
     * allow WAF to check request Body.
     *
     * @param {number}
     * [parameters.webApplicationFirewallConfiguration.maxRequestBodySize] Maxium
     * request body size for WAF.
     *
     * @param {boolean} [parameters.enableHttp2] Whether HTTP2 is enabled on the
     * application gateway resource.
     *
     * @param {string} [parameters.resourceGuid] Resource GUID property of the
     * application gateway resource.
     *
     * @param {string} [parameters.provisioningState] Provisioning state of the
     * application gateway resource. Possible values are: 'Updating', 'Deleting',
     * and 'Failed'.
     *
     * @param {string} [parameters.etag] A unique read-only string that changes
     * whenever the resource is updated.
     *
     * @param {string} [parameters.id] Resource ID.
     *
     * @param {string} [parameters.location] Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApplicationGateway>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, applicationGatewayName: string, parameters: models.ApplicationGateway, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApplicationGateway>>;

    /**
     * Creates or updates the specified application gateway.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} applicationGatewayName The name of the application gateway.
     *
     * @param {object} parameters Parameters supplied to the create or update
     * application gateway operation.
     *
     * @param {object} [parameters.sku] SKU of the application gateway resource.
     *
     * @param {string} [parameters.sku.name] Name of an application gateway SKU.
     * Possible values include: 'Standard_Small', 'Standard_Medium',
     * 'Standard_Large', 'WAF_Medium', 'WAF_Large'
     *
     * @param {string} [parameters.sku.tier] Tier of an application gateway.
     * Possible values include: 'Standard', 'WAF'
     *
     * @param {number} [parameters.sku.capacity] Capacity (instance count) of an
     * application gateway.
     *
     * @param {object} [parameters.sslPolicy] SSL policy of the application gateway
     * resource.
     *
     * @param {array} [parameters.sslPolicy.disabledSslProtocols] Ssl protocols to
     * be disabled on application gateway.
     *
     * @param {string} [parameters.sslPolicy.policyType] Type of Ssl Policy.
     * Possible values include: 'Predefined', 'Custom'
     *
     * @param {string} [parameters.sslPolicy.policyName] Name of Ssl predefined
     * policy. Possible values include: 'AppGwSslPolicy20150501',
     * 'AppGwSslPolicy20170401', 'AppGwSslPolicy20170401S'
     *
     * @param {array} [parameters.sslPolicy.cipherSuites] Ssl cipher suites to be
     * enabled in the specified order to application gateway.
     *
     * @param {string} [parameters.sslPolicy.minProtocolVersion] Minimum version of
     * Ssl protocol to be supported on application gateway. Possible values
     * include: 'TLSv1_0', 'TLSv1_1', 'TLSv1_2'
     *
     * @param {array} [parameters.gatewayIPConfigurations] Subnets of application
     * the gateway resource.
     *
     * @param {array} [parameters.authenticationCertificates] Authentication
     * certificates of the application gateway resource.
     *
     * @param {array} [parameters.sslCertificates] SSL certificates of the
     * application gateway resource.
     *
     * @param {array} [parameters.frontendIPConfigurations] Frontend IP addresses
     * of the application gateway resource.
     *
     * @param {array} [parameters.frontendPorts] Frontend ports of the application
     * gateway resource.
     *
     * @param {array} [parameters.probes] Probes of the application gateway
     * resource.
     *
     * @param {array} [parameters.backendAddressPools] Backend address pool of the
     * application gateway resource.
     *
     * @param {array} [parameters.backendHttpSettingsCollection] Backend http
     * settings of the application gateway resource.
     *
     * @param {array} [parameters.httpListeners] Http listeners of the application
     * gateway resource.
     *
     * @param {array} [parameters.urlPathMaps] URL path map of the application
     * gateway resource.
     *
     * @param {array} [parameters.requestRoutingRules] Request routing rules of the
     * application gateway resource.
     *
     * @param {array} [parameters.redirectConfigurations] Redirect configurations
     * of the application gateway resource.
     *
     * @param {object} [parameters.webApplicationFirewallConfiguration] Web
     * application firewall configuration.
     *
     * @param {boolean} parameters.webApplicationFirewallConfiguration.enabled
     * Whether the web application firewall is enabled or not.
     *
     * @param {string} parameters.webApplicationFirewallConfiguration.firewallMode
     * Web application firewall mode. Possible values include: 'Detection',
     * 'Prevention'
     *
     * @param {string} parameters.webApplicationFirewallConfiguration.ruleSetType
     * The type of the web application firewall rule set. Possible values are:
     * 'OWASP'.
     *
     * @param {string}
     * parameters.webApplicationFirewallConfiguration.ruleSetVersion The version of
     * the rule set type.
     *
     * @param {array}
     * [parameters.webApplicationFirewallConfiguration.disabledRuleGroups] The
     * disabled rule groups.
     *
     * @param {boolean}
     * [parameters.webApplicationFirewallConfiguration.requestBodyCheck] Whether
     * allow WAF to check request Body.
     *
     * @param {number}
     * [parameters.webApplicationFirewallConfiguration.maxRequestBodySize] Maxium
     * request body size for WAF.
     *
     * @param {boolean} [parameters.enableHttp2] Whether HTTP2 is enabled on the
     * application gateway resource.
     *
     * @param {string} [parameters.resourceGuid] Resource GUID property of the
     * application gateway resource.
     *
     * @param {string} [parameters.provisioningState] Provisioning state of the
     * application gateway resource. Possible values are: 'Updating', 'Deleting',
     * and 'Failed'.
     *
     * @param {string} [parameters.etag] A unique read-only string that changes
     * whenever the resource is updated.
     *
     * @param {string} [parameters.id] Resource ID.
     *
     * @param {string} [parameters.location] Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApplicationGateway} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApplicationGateway} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApplicationGateway} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, applicationGatewayName: string, parameters: models.ApplicationGateway, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ApplicationGateway>;
    createOrUpdate(resourceGroupName: string, applicationGatewayName: string, parameters: models.ApplicationGateway, callback: ServiceCallback<models.ApplicationGateway>): void;
    createOrUpdate(resourceGroupName: string, applicationGatewayName: string, parameters: models.ApplicationGateway, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplicationGateway>): void;


    /**
     * Updates the specified application gateway tags.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} applicationGatewayName The name of the application gateway.
     *
     * @param {object} parameters Parameters supplied to update application gateway
     * tags.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApplicationGateway>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateTagsWithHttpOperationResponse(resourceGroupName: string, applicationGatewayName: string, parameters: models.TagsObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApplicationGateway>>;

    /**
     * Updates the specified application gateway tags.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} applicationGatewayName The name of the application gateway.
     *
     * @param {object} parameters Parameters supplied to update application gateway
     * tags.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApplicationGateway} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApplicationGateway} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApplicationGateway} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updateTags(resourceGroupName: string, applicationGatewayName: string, parameters: models.TagsObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ApplicationGateway>;
    updateTags(resourceGroupName: string, applicationGatewayName: string, parameters: models.TagsObject, callback: ServiceCallback<models.ApplicationGateway>): void;
    updateTags(resourceGroupName: string, applicationGatewayName: string, parameters: models.TagsObject, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplicationGateway>): void;


    /**
     * Lists all application gateways in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApplicationGatewayListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApplicationGatewayListResult>>;

    /**
     * Lists all application gateways in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApplicationGatewayListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApplicationGatewayListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApplicationGatewayListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ApplicationGatewayListResult>;
    list(resourceGroupName: string, callback: ServiceCallback<models.ApplicationGatewayListResult>): void;
    list(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplicationGatewayListResult>): void;


    /**
     * Gets all the application gateways in a subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApplicationGatewayListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listAllWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApplicationGatewayListResult>>;

    /**
     * Gets all the application gateways in a subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApplicationGatewayListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApplicationGatewayListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApplicationGatewayListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listAll(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ApplicationGatewayListResult>;
    listAll(callback: ServiceCallback<models.ApplicationGatewayListResult>): void;
    listAll(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplicationGatewayListResult>): void;


    /**
     * Starts the specified application gateway.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} applicationGatewayName The name of the application gateway.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    startWithHttpOperationResponse(resourceGroupName: string, applicationGatewayName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Starts the specified application gateway.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} applicationGatewayName The name of the application gateway.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    start(resourceGroupName: string, applicationGatewayName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    start(resourceGroupName: string, applicationGatewayName: string, callback: ServiceCallback<void>): void;
    start(resourceGroupName: string, applicationGatewayName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Stops the specified application gateway in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} applicationGatewayName The name of the application gateway.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    stopWithHttpOperationResponse(resourceGroupName: string, applicationGatewayName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Stops the specified application gateway in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} applicationGatewayName The name of the application gateway.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    stop(resourceGroupName: string, applicationGatewayName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    stop(resourceGroupName: string, applicationGatewayName: string, callback: ServiceCallback<void>): void;
    stop(resourceGroupName: string, applicationGatewayName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets the backend health of the specified application gateway in a resource
     * group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} applicationGatewayName The name of the application gateway.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Expands BackendAddressPool and
     * BackendHttpSettings referenced in backend health.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApplicationGatewayBackendHealth>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    backendHealthWithHttpOperationResponse(resourceGroupName: string, applicationGatewayName: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApplicationGatewayBackendHealth>>;

    /**
     * Gets the backend health of the specified application gateway in a resource
     * group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} applicationGatewayName The name of the application gateway.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Expands BackendAddressPool and
     * BackendHttpSettings referenced in backend health.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApplicationGatewayBackendHealth} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApplicationGatewayBackendHealth} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApplicationGatewayBackendHealth} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    backendHealth(resourceGroupName: string, applicationGatewayName: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.ApplicationGatewayBackendHealth>;
    backendHealth(resourceGroupName: string, applicationGatewayName: string, callback: ServiceCallback<models.ApplicationGatewayBackendHealth>): void;
    backendHealth(resourceGroupName: string, applicationGatewayName: string, options: { expand? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplicationGatewayBackendHealth>): void;


    /**
     * Lists all available web application firewall rule sets.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApplicationGatewayAvailableWafRuleSetsResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listAvailableWafRuleSetsWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApplicationGatewayAvailableWafRuleSetsResult>>;

    /**
     * Lists all available web application firewall rule sets.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApplicationGatewayAvailableWafRuleSetsResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApplicationGatewayAvailableWafRuleSetsResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link
     *                      ApplicationGatewayAvailableWafRuleSetsResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listAvailableWafRuleSets(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ApplicationGatewayAvailableWafRuleSetsResult>;
    listAvailableWafRuleSets(callback: ServiceCallback<models.ApplicationGatewayAvailableWafRuleSetsResult>): void;
    listAvailableWafRuleSets(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplicationGatewayAvailableWafRuleSetsResult>): void;


    /**
     * Lists available Ssl options for configuring Ssl policy.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApplicationGatewayAvailableSslOptions>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listAvailableSslOptionsWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApplicationGatewayAvailableSslOptions>>;

    /**
     * Lists available Ssl options for configuring Ssl policy.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApplicationGatewayAvailableSslOptions} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApplicationGatewayAvailableSslOptions} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApplicationGatewayAvailableSslOptions} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listAvailableSslOptions(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ApplicationGatewayAvailableSslOptions>;
    listAvailableSslOptions(callback: ServiceCallback<models.ApplicationGatewayAvailableSslOptions>): void;
    listAvailableSslOptions(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplicationGatewayAvailableSslOptions>): void;


    /**
     * Lists all SSL predefined policies for configuring Ssl policy.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApplicationGatewayAvailableSslPredefinedPolicies>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listAvailableSslPredefinedPoliciesWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApplicationGatewayAvailableSslPredefinedPolicies>>;

    /**
     * Lists all SSL predefined policies for configuring Ssl policy.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApplicationGatewayAvailableSslPredefinedPolicies} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApplicationGatewayAvailableSslPredefinedPolicies} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link
     *                      ApplicationGatewayAvailableSslPredefinedPolicies} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listAvailableSslPredefinedPolicies(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ApplicationGatewayAvailableSslPredefinedPolicies>;
    listAvailableSslPredefinedPolicies(callback: ServiceCallback<models.ApplicationGatewayAvailableSslPredefinedPolicies>): void;
    listAvailableSslPredefinedPolicies(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplicationGatewayAvailableSslPredefinedPolicies>): void;


    /**
     * Gets Ssl predefined policy with the specified policy name.
     *
     * @param {string} predefinedPolicyName Name of Ssl predefined policy.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApplicationGatewaySslPredefinedPolicy>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getSslPredefinedPolicyWithHttpOperationResponse(predefinedPolicyName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApplicationGatewaySslPredefinedPolicy>>;

    /**
     * Gets Ssl predefined policy with the specified policy name.
     *
     * @param {string} predefinedPolicyName Name of Ssl predefined policy.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApplicationGatewaySslPredefinedPolicy} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApplicationGatewaySslPredefinedPolicy} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApplicationGatewaySslPredefinedPolicy} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getSslPredefinedPolicy(predefinedPolicyName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ApplicationGatewaySslPredefinedPolicy>;
    getSslPredefinedPolicy(predefinedPolicyName: string, callback: ServiceCallback<models.ApplicationGatewaySslPredefinedPolicy>): void;
    getSslPredefinedPolicy(predefinedPolicyName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplicationGatewaySslPredefinedPolicy>): void;


    /**
     * Deletes the specified application gateway.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} applicationGatewayName The name of the application gateway.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, applicationGatewayName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the specified application gateway.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} applicationGatewayName The name of the application gateway.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(resourceGroupName: string, applicationGatewayName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(resourceGroupName: string, applicationGatewayName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, applicationGatewayName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Creates or updates the specified application gateway.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} applicationGatewayName The name of the application gateway.
     *
     * @param {object} parameters Parameters supplied to the create or update
     * application gateway operation.
     *
     * @param {object} [parameters.sku] SKU of the application gateway resource.
     *
     * @param {string} [parameters.sku.name] Name of an application gateway SKU.
     * Possible values include: 'Standard_Small', 'Standard_Medium',
     * 'Standard_Large', 'WAF_Medium', 'WAF_Large'
     *
     * @param {string} [parameters.sku.tier] Tier of an application gateway.
     * Possible values include: 'Standard', 'WAF'
     *
     * @param {number} [parameters.sku.capacity] Capacity (instance count) of an
     * application gateway.
     *
     * @param {object} [parameters.sslPolicy] SSL policy of the application gateway
     * resource.
     *
     * @param {array} [parameters.sslPolicy.disabledSslProtocols] Ssl protocols to
     * be disabled on application gateway.
     *
     * @param {string} [parameters.sslPolicy.policyType] Type of Ssl Policy.
     * Possible values include: 'Predefined', 'Custom'
     *
     * @param {string} [parameters.sslPolicy.policyName] Name of Ssl predefined
     * policy. Possible values include: 'AppGwSslPolicy20150501',
     * 'AppGwSslPolicy20170401', 'AppGwSslPolicy20170401S'
     *
     * @param {array} [parameters.sslPolicy.cipherSuites] Ssl cipher suites to be
     * enabled in the specified order to application gateway.
     *
     * @param {string} [parameters.sslPolicy.minProtocolVersion] Minimum version of
     * Ssl protocol to be supported on application gateway. Possible values
     * include: 'TLSv1_0', 'TLSv1_1', 'TLSv1_2'
     *
     * @param {array} [parameters.gatewayIPConfigurations] Subnets of application
     * the gateway resource.
     *
     * @param {array} [parameters.authenticationCertificates] Authentication
     * certificates of the application gateway resource.
     *
     * @param {array} [parameters.sslCertificates] SSL certificates of the
     * application gateway resource.
     *
     * @param {array} [parameters.frontendIPConfigurations] Frontend IP addresses
     * of the application gateway resource.
     *
     * @param {array} [parameters.frontendPorts] Frontend ports of the application
     * gateway resource.
     *
     * @param {array} [parameters.probes] Probes of the application gateway
     * resource.
     *
     * @param {array} [parameters.backendAddressPools] Backend address pool of the
     * application gateway resource.
     *
     * @param {array} [parameters.backendHttpSettingsCollection] Backend http
     * settings of the application gateway resource.
     *
     * @param {array} [parameters.httpListeners] Http listeners of the application
     * gateway resource.
     *
     * @param {array} [parameters.urlPathMaps] URL path map of the application
     * gateway resource.
     *
     * @param {array} [parameters.requestRoutingRules] Request routing rules of the
     * application gateway resource.
     *
     * @param {array} [parameters.redirectConfigurations] Redirect configurations
     * of the application gateway resource.
     *
     * @param {object} [parameters.webApplicationFirewallConfiguration] Web
     * application firewall configuration.
     *
     * @param {boolean} parameters.webApplicationFirewallConfiguration.enabled
     * Whether the web application firewall is enabled or not.
     *
     * @param {string} parameters.webApplicationFirewallConfiguration.firewallMode
     * Web application firewall mode. Possible values include: 'Detection',
     * 'Prevention'
     *
     * @param {string} parameters.webApplicationFirewallConfiguration.ruleSetType
     * The type of the web application firewall rule set. Possible values are:
     * 'OWASP'.
     *
     * @param {string}
     * parameters.webApplicationFirewallConfiguration.ruleSetVersion The version of
     * the rule set type.
     *
     * @param {array}
     * [parameters.webApplicationFirewallConfiguration.disabledRuleGroups] The
     * disabled rule groups.
     *
     * @param {boolean}
     * [parameters.webApplicationFirewallConfiguration.requestBodyCheck] Whether
     * allow WAF to check request Body.
     *
     * @param {number}
     * [parameters.webApplicationFirewallConfiguration.maxRequestBodySize] Maxium
     * request body size for WAF.
     *
     * @param {boolean} [parameters.enableHttp2] Whether HTTP2 is enabled on the
     * application gateway resource.
     *
     * @param {string} [parameters.resourceGuid] Resource GUID property of the
     * application gateway resource.
     *
     * @param {string} [parameters.provisioningState] Provisioning state of the
     * application gateway resource. Possible values are: 'Updating', 'Deleting',
     * and 'Failed'.
     *
     * @param {string} [parameters.etag] A unique read-only string that changes
     * whenever the resource is updated.
     *
     * @param {string} [parameters.id] Resource ID.
     *
     * @param {string} [parameters.location] Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApplicationGateway>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, applicationGatewayName: string, parameters: models.ApplicationGateway, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApplicationGateway>>;

    /**
     * Creates or updates the specified application gateway.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} applicationGatewayName The name of the application gateway.
     *
     * @param {object} parameters Parameters supplied to the create or update
     * application gateway operation.
     *
     * @param {object} [parameters.sku] SKU of the application gateway resource.
     *
     * @param {string} [parameters.sku.name] Name of an application gateway SKU.
     * Possible values include: 'Standard_Small', 'Standard_Medium',
     * 'Standard_Large', 'WAF_Medium', 'WAF_Large'
     *
     * @param {string} [parameters.sku.tier] Tier of an application gateway.
     * Possible values include: 'Standard', 'WAF'
     *
     * @param {number} [parameters.sku.capacity] Capacity (instance count) of an
     * application gateway.
     *
     * @param {object} [parameters.sslPolicy] SSL policy of the application gateway
     * resource.
     *
     * @param {array} [parameters.sslPolicy.disabledSslProtocols] Ssl protocols to
     * be disabled on application gateway.
     *
     * @param {string} [parameters.sslPolicy.policyType] Type of Ssl Policy.
     * Possible values include: 'Predefined', 'Custom'
     *
     * @param {string} [parameters.sslPolicy.policyName] Name of Ssl predefined
     * policy. Possible values include: 'AppGwSslPolicy20150501',
     * 'AppGwSslPolicy20170401', 'AppGwSslPolicy20170401S'
     *
     * @param {array} [parameters.sslPolicy.cipherSuites] Ssl cipher suites to be
     * enabled in the specified order to application gateway.
     *
     * @param {string} [parameters.sslPolicy.minProtocolVersion] Minimum version of
     * Ssl protocol to be supported on application gateway. Possible values
     * include: 'TLSv1_0', 'TLSv1_1', 'TLSv1_2'
     *
     * @param {array} [parameters.gatewayIPConfigurations] Subnets of application
     * the gateway resource.
     *
     * @param {array} [parameters.authenticationCertificates] Authentication
     * certificates of the application gateway resource.
     *
     * @param {array} [parameters.sslCertificates] SSL certificates of the
     * application gateway resource.
     *
     * @param {array} [parameters.frontendIPConfigurations] Frontend IP addresses
     * of the application gateway resource.
     *
     * @param {array} [parameters.frontendPorts] Frontend ports of the application
     * gateway resource.
     *
     * @param {array} [parameters.probes] Probes of the application gateway
     * resource.
     *
     * @param {array} [parameters.backendAddressPools] Backend address pool of the
     * application gateway resource.
     *
     * @param {array} [parameters.backendHttpSettingsCollection] Backend http
     * settings of the application gateway resource.
     *
     * @param {array} [parameters.httpListeners] Http listeners of the application
     * gateway resource.
     *
     * @param {array} [parameters.urlPathMaps] URL path map of the application
     * gateway resource.
     *
     * @param {array} [parameters.requestRoutingRules] Request routing rules of the
     * application gateway resource.
     *
     * @param {array} [parameters.redirectConfigurations] Redirect configurations
     * of the application gateway resource.
     *
     * @param {object} [parameters.webApplicationFirewallConfiguration] Web
     * application firewall configuration.
     *
     * @param {boolean} parameters.webApplicationFirewallConfiguration.enabled
     * Whether the web application firewall is enabled or not.
     *
     * @param {string} parameters.webApplicationFirewallConfiguration.firewallMode
     * Web application firewall mode. Possible values include: 'Detection',
     * 'Prevention'
     *
     * @param {string} parameters.webApplicationFirewallConfiguration.ruleSetType
     * The type of the web application firewall rule set. Possible values are:
     * 'OWASP'.
     *
     * @param {string}
     * parameters.webApplicationFirewallConfiguration.ruleSetVersion The version of
     * the rule set type.
     *
     * @param {array}
     * [parameters.webApplicationFirewallConfiguration.disabledRuleGroups] The
     * disabled rule groups.
     *
     * @param {boolean}
     * [parameters.webApplicationFirewallConfiguration.requestBodyCheck] Whether
     * allow WAF to check request Body.
     *
     * @param {number}
     * [parameters.webApplicationFirewallConfiguration.maxRequestBodySize] Maxium
     * request body size for WAF.
     *
     * @param {boolean} [parameters.enableHttp2] Whether HTTP2 is enabled on the
     * application gateway resource.
     *
     * @param {string} [parameters.resourceGuid] Resource GUID property of the
     * application gateway resource.
     *
     * @param {string} [parameters.provisioningState] Provisioning state of the
     * application gateway resource. Possible values are: 'Updating', 'Deleting',
     * and 'Failed'.
     *
     * @param {string} [parameters.etag] A unique read-only string that changes
     * whenever the resource is updated.
     *
     * @param {string} [parameters.id] Resource ID.
     *
     * @param {string} [parameters.location] Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApplicationGateway} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApplicationGateway} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApplicationGateway} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(resourceGroupName: string, applicationGatewayName: string, parameters: models.ApplicationGateway, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ApplicationGateway>;
    beginCreateOrUpdate(resourceGroupName: string, applicationGatewayName: string, parameters: models.ApplicationGateway, callback: ServiceCallback<models.ApplicationGateway>): void;
    beginCreateOrUpdate(resourceGroupName: string, applicationGatewayName: string, parameters: models.ApplicationGateway, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplicationGateway>): void;


    /**
     * Updates the specified application gateway tags.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} applicationGatewayName The name of the application gateway.
     *
     * @param {object} parameters Parameters supplied to update application gateway
     * tags.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApplicationGateway>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginUpdateTagsWithHttpOperationResponse(resourceGroupName: string, applicationGatewayName: string, parameters: models.TagsObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApplicationGateway>>;

    /**
     * Updates the specified application gateway tags.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} applicationGatewayName The name of the application gateway.
     *
     * @param {object} parameters Parameters supplied to update application gateway
     * tags.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApplicationGateway} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApplicationGateway} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApplicationGateway} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginUpdateTags(resourceGroupName: string, applicationGatewayName: string, parameters: models.TagsObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ApplicationGateway>;
    beginUpdateTags(resourceGroupName: string, applicationGatewayName: string, parameters: models.TagsObject, callback: ServiceCallback<models.ApplicationGateway>): void;
    beginUpdateTags(resourceGroupName: string, applicationGatewayName: string, parameters: models.TagsObject, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplicationGateway>): void;


    /**
     * Starts the specified application gateway.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} applicationGatewayName The name of the application gateway.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginStartWithHttpOperationResponse(resourceGroupName: string, applicationGatewayName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Starts the specified application gateway.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} applicationGatewayName The name of the application gateway.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginStart(resourceGroupName: string, applicationGatewayName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginStart(resourceGroupName: string, applicationGatewayName: string, callback: ServiceCallback<void>): void;
    beginStart(resourceGroupName: string, applicationGatewayName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Stops the specified application gateway in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} applicationGatewayName The name of the application gateway.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginStopWithHttpOperationResponse(resourceGroupName: string, applicationGatewayName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Stops the specified application gateway in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} applicationGatewayName The name of the application gateway.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginStop(resourceGroupName: string, applicationGatewayName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginStop(resourceGroupName: string, applicationGatewayName: string, callback: ServiceCallback<void>): void;
    beginStop(resourceGroupName: string, applicationGatewayName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets the backend health of the specified application gateway in a resource
     * group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} applicationGatewayName The name of the application gateway.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Expands BackendAddressPool and
     * BackendHttpSettings referenced in backend health.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApplicationGatewayBackendHealth>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginBackendHealthWithHttpOperationResponse(resourceGroupName: string, applicationGatewayName: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApplicationGatewayBackendHealth>>;

    /**
     * Gets the backend health of the specified application gateway in a resource
     * group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} applicationGatewayName The name of the application gateway.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Expands BackendAddressPool and
     * BackendHttpSettings referenced in backend health.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApplicationGatewayBackendHealth} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApplicationGatewayBackendHealth} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApplicationGatewayBackendHealth} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginBackendHealth(resourceGroupName: string, applicationGatewayName: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.ApplicationGatewayBackendHealth>;
    beginBackendHealth(resourceGroupName: string, applicationGatewayName: string, callback: ServiceCallback<models.ApplicationGatewayBackendHealth>): void;
    beginBackendHealth(resourceGroupName: string, applicationGatewayName: string, options: { expand? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplicationGatewayBackendHealth>): void;


    /**
     * Lists all application gateways in a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApplicationGatewayListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApplicationGatewayListResult>>;

    /**
     * Lists all application gateways in a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApplicationGatewayListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApplicationGatewayListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApplicationGatewayListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ApplicationGatewayListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.ApplicationGatewayListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplicationGatewayListResult>): void;


    /**
     * Gets all the application gateways in a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApplicationGatewayListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listAllNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApplicationGatewayListResult>>;

    /**
     * Gets all the application gateways in a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApplicationGatewayListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApplicationGatewayListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApplicationGatewayListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listAllNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ApplicationGatewayListResult>;
    listAllNext(nextPageLink: string, callback: ServiceCallback<models.ApplicationGatewayListResult>): void;
    listAllNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplicationGatewayListResult>): void;


    /**
     * Lists all SSL predefined policies for configuring Ssl policy.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApplicationGatewayAvailableSslPredefinedPolicies>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listAvailableSslPredefinedPoliciesNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApplicationGatewayAvailableSslPredefinedPolicies>>;

    /**
     * Lists all SSL predefined policies for configuring Ssl policy.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApplicationGatewayAvailableSslPredefinedPolicies} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApplicationGatewayAvailableSslPredefinedPolicies} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link
     *                      ApplicationGatewayAvailableSslPredefinedPolicies} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listAvailableSslPredefinedPoliciesNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ApplicationGatewayAvailableSslPredefinedPolicies>;
    listAvailableSslPredefinedPoliciesNext(nextPageLink: string, callback: ServiceCallback<models.ApplicationGatewayAvailableSslPredefinedPolicies>): void;
    listAvailableSslPredefinedPoliciesNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplicationGatewayAvailableSslPredefinedPolicies>): void;
}

/**
 * @class
 * ApplicationSecurityGroups
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the NetworkManagementClient.
 */
export interface ApplicationSecurityGroups {


    /**
     * Deletes the specified application security group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} applicationSecurityGroupName The name of the application
     * security group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, applicationSecurityGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the specified application security group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} applicationSecurityGroupName The name of the application
     * security group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, applicationSecurityGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, applicationSecurityGroupName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, applicationSecurityGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets information about the specified application security group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} applicationSecurityGroupName The name of the application
     * security group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApplicationSecurityGroup>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, applicationSecurityGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApplicationSecurityGroup>>;

    /**
     * Gets information about the specified application security group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} applicationSecurityGroupName The name of the application
     * security group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApplicationSecurityGroup} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApplicationSecurityGroup} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApplicationSecurityGroup} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, applicationSecurityGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ApplicationSecurityGroup>;
    get(resourceGroupName: string, applicationSecurityGroupName: string, callback: ServiceCallback<models.ApplicationSecurityGroup>): void;
    get(resourceGroupName: string, applicationSecurityGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplicationSecurityGroup>): void;


    /**
     * Creates or updates an application security group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} applicationSecurityGroupName The name of the application
     * security group.
     *
     * @param {object} parameters Parameters supplied to the create or update
     * ApplicationSecurityGroup operation.
     *
     * @param {string} [parameters.id] Resource ID.
     *
     * @param {string} [parameters.location] Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApplicationSecurityGroup>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, applicationSecurityGroupName: string, parameters: models.ApplicationSecurityGroup, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApplicationSecurityGroup>>;

    /**
     * Creates or updates an application security group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} applicationSecurityGroupName The name of the application
     * security group.
     *
     * @param {object} parameters Parameters supplied to the create or update
     * ApplicationSecurityGroup operation.
     *
     * @param {string} [parameters.id] Resource ID.
     *
     * @param {string} [parameters.location] Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApplicationSecurityGroup} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApplicationSecurityGroup} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApplicationSecurityGroup} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, applicationSecurityGroupName: string, parameters: models.ApplicationSecurityGroup, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ApplicationSecurityGroup>;
    createOrUpdate(resourceGroupName: string, applicationSecurityGroupName: string, parameters: models.ApplicationSecurityGroup, callback: ServiceCallback<models.ApplicationSecurityGroup>): void;
    createOrUpdate(resourceGroupName: string, applicationSecurityGroupName: string, parameters: models.ApplicationSecurityGroup, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplicationSecurityGroup>): void;


    /**
     * Gets all application security groups in a subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApplicationSecurityGroupListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listAllWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApplicationSecurityGroupListResult>>;

    /**
     * Gets all application security groups in a subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApplicationSecurityGroupListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApplicationSecurityGroupListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApplicationSecurityGroupListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listAll(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ApplicationSecurityGroupListResult>;
    listAll(callback: ServiceCallback<models.ApplicationSecurityGroupListResult>): void;
    listAll(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplicationSecurityGroupListResult>): void;


    /**
     * Gets all the application security groups in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApplicationSecurityGroupListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApplicationSecurityGroupListResult>>;

    /**
     * Gets all the application security groups in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApplicationSecurityGroupListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApplicationSecurityGroupListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApplicationSecurityGroupListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ApplicationSecurityGroupListResult>;
    list(resourceGroupName: string, callback: ServiceCallback<models.ApplicationSecurityGroupListResult>): void;
    list(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplicationSecurityGroupListResult>): void;


    /**
     * Deletes the specified application security group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} applicationSecurityGroupName The name of the application
     * security group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, applicationSecurityGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the specified application security group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} applicationSecurityGroupName The name of the application
     * security group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(resourceGroupName: string, applicationSecurityGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(resourceGroupName: string, applicationSecurityGroupName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, applicationSecurityGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Creates or updates an application security group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} applicationSecurityGroupName The name of the application
     * security group.
     *
     * @param {object} parameters Parameters supplied to the create or update
     * ApplicationSecurityGroup operation.
     *
     * @param {string} [parameters.id] Resource ID.
     *
     * @param {string} [parameters.location] Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApplicationSecurityGroup>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, applicationSecurityGroupName: string, parameters: models.ApplicationSecurityGroup, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApplicationSecurityGroup>>;

    /**
     * Creates or updates an application security group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} applicationSecurityGroupName The name of the application
     * security group.
     *
     * @param {object} parameters Parameters supplied to the create or update
     * ApplicationSecurityGroup operation.
     *
     * @param {string} [parameters.id] Resource ID.
     *
     * @param {string} [parameters.location] Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApplicationSecurityGroup} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApplicationSecurityGroup} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApplicationSecurityGroup} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(resourceGroupName: string, applicationSecurityGroupName: string, parameters: models.ApplicationSecurityGroup, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ApplicationSecurityGroup>;
    beginCreateOrUpdate(resourceGroupName: string, applicationSecurityGroupName: string, parameters: models.ApplicationSecurityGroup, callback: ServiceCallback<models.ApplicationSecurityGroup>): void;
    beginCreateOrUpdate(resourceGroupName: string, applicationSecurityGroupName: string, parameters: models.ApplicationSecurityGroup, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplicationSecurityGroup>): void;


    /**
     * Gets all application security groups in a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApplicationSecurityGroupListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listAllNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApplicationSecurityGroupListResult>>;

    /**
     * Gets all application security groups in a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApplicationSecurityGroupListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApplicationSecurityGroupListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApplicationSecurityGroupListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listAllNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ApplicationSecurityGroupListResult>;
    listAllNext(nextPageLink: string, callback: ServiceCallback<models.ApplicationSecurityGroupListResult>): void;
    listAllNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplicationSecurityGroupListResult>): void;


    /**
     * Gets all the application security groups in a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApplicationSecurityGroupListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApplicationSecurityGroupListResult>>;

    /**
     * Gets all the application security groups in a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApplicationSecurityGroupListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApplicationSecurityGroupListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApplicationSecurityGroupListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ApplicationSecurityGroupListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.ApplicationSecurityGroupListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplicationSecurityGroupListResult>): void;
}

/**
 * @class
 * DdosProtectionPlans
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the NetworkManagementClient.
 */
export interface DdosProtectionPlans {


    /**
     * Deletes the specified DDoS protection plan.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} ddosProtectionPlanName The name of the DDoS protection plan.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, ddosProtectionPlanName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the specified DDoS protection plan.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} ddosProtectionPlanName The name of the DDoS protection plan.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, ddosProtectionPlanName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, ddosProtectionPlanName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, ddosProtectionPlanName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets information about the specified DDoS protection plan.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} ddosProtectionPlanName The name of the DDoS protection plan.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DdosProtectionPlan>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, ddosProtectionPlanName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DdosProtectionPlan>>;

    /**
     * Gets information about the specified DDoS protection plan.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} ddosProtectionPlanName The name of the DDoS protection plan.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DdosProtectionPlan} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DdosProtectionPlan} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DdosProtectionPlan} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, ddosProtectionPlanName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DdosProtectionPlan>;
    get(resourceGroupName: string, ddosProtectionPlanName: string, callback: ServiceCallback<models.DdosProtectionPlan>): void;
    get(resourceGroupName: string, ddosProtectionPlanName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DdosProtectionPlan>): void;


    /**
     * Creates or updates a DDoS protection plan.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} ddosProtectionPlanName The name of the DDoS protection plan.
     *
     * @param {object} parameters Parameters supplied to the create or update
     * operation.
     *
     * @param {string} [parameters.location] Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DdosProtectionPlan>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, ddosProtectionPlanName: string, parameters: models.DdosProtectionPlan, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DdosProtectionPlan>>;

    /**
     * Creates or updates a DDoS protection plan.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} ddosProtectionPlanName The name of the DDoS protection plan.
     *
     * @param {object} parameters Parameters supplied to the create or update
     * operation.
     *
     * @param {string} [parameters.location] Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DdosProtectionPlan} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DdosProtectionPlan} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DdosProtectionPlan} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, ddosProtectionPlanName: string, parameters: models.DdosProtectionPlan, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DdosProtectionPlan>;
    createOrUpdate(resourceGroupName: string, ddosProtectionPlanName: string, parameters: models.DdosProtectionPlan, callback: ServiceCallback<models.DdosProtectionPlan>): void;
    createOrUpdate(resourceGroupName: string, ddosProtectionPlanName: string, parameters: models.DdosProtectionPlan, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DdosProtectionPlan>): void;


    /**
     * Gets all DDoS protection plans in a subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DdosProtectionPlanListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DdosProtectionPlanListResult>>;

    /**
     * Gets all DDoS protection plans in a subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DdosProtectionPlanListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DdosProtectionPlanListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DdosProtectionPlanListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DdosProtectionPlanListResult>;
    list(callback: ServiceCallback<models.DdosProtectionPlanListResult>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DdosProtectionPlanListResult>): void;


    /**
     * Gets all the DDoS protection plans in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DdosProtectionPlanListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupWithHttpOperationResponse(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DdosProtectionPlanListResult>>;

    /**
     * Gets all the DDoS protection plans in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DdosProtectionPlanListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DdosProtectionPlanListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DdosProtectionPlanListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroup(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DdosProtectionPlanListResult>;
    listByResourceGroup(resourceGroupName: string, callback: ServiceCallback<models.DdosProtectionPlanListResult>): void;
    listByResourceGroup(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DdosProtectionPlanListResult>): void;


    /**
     * Deletes the specified DDoS protection plan.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} ddosProtectionPlanName The name of the DDoS protection plan.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, ddosProtectionPlanName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the specified DDoS protection plan.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} ddosProtectionPlanName The name of the DDoS protection plan.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(resourceGroupName: string, ddosProtectionPlanName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(resourceGroupName: string, ddosProtectionPlanName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, ddosProtectionPlanName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Creates or updates a DDoS protection plan.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} ddosProtectionPlanName The name of the DDoS protection plan.
     *
     * @param {object} parameters Parameters supplied to the create or update
     * operation.
     *
     * @param {string} [parameters.location] Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DdosProtectionPlan>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, ddosProtectionPlanName: string, parameters: models.DdosProtectionPlan, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DdosProtectionPlan>>;

    /**
     * Creates or updates a DDoS protection plan.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} ddosProtectionPlanName The name of the DDoS protection plan.
     *
     * @param {object} parameters Parameters supplied to the create or update
     * operation.
     *
     * @param {string} [parameters.location] Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DdosProtectionPlan} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DdosProtectionPlan} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DdosProtectionPlan} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(resourceGroupName: string, ddosProtectionPlanName: string, parameters: models.DdosProtectionPlan, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DdosProtectionPlan>;
    beginCreateOrUpdate(resourceGroupName: string, ddosProtectionPlanName: string, parameters: models.DdosProtectionPlan, callback: ServiceCallback<models.DdosProtectionPlan>): void;
    beginCreateOrUpdate(resourceGroupName: string, ddosProtectionPlanName: string, parameters: models.DdosProtectionPlan, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DdosProtectionPlan>): void;


    /**
     * Gets all DDoS protection plans in a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DdosProtectionPlanListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DdosProtectionPlanListResult>>;

    /**
     * Gets all DDoS protection plans in a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DdosProtectionPlanListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DdosProtectionPlanListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DdosProtectionPlanListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DdosProtectionPlanListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.DdosProtectionPlanListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DdosProtectionPlanListResult>): void;


    /**
     * Gets all the DDoS protection plans in a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DdosProtectionPlanListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DdosProtectionPlanListResult>>;

    /**
     * Gets all the DDoS protection plans in a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DdosProtectionPlanListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DdosProtectionPlanListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DdosProtectionPlanListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroupNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DdosProtectionPlanListResult>;
    listByResourceGroupNext(nextPageLink: string, callback: ServiceCallback<models.DdosProtectionPlanListResult>): void;
    listByResourceGroupNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DdosProtectionPlanListResult>): void;
}

/**
 * @class
 * AvailableEndpointServices
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the NetworkManagementClient.
 */
export interface AvailableEndpointServices {


    /**
     * List what values of endpoint services are available for use.
     *
     * @param {string} location The location to check available endpoint services.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<EndpointServicesListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(location: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.EndpointServicesListResult>>;

    /**
     * List what values of endpoint services are available for use.
     *
     * @param {string} location The location to check available endpoint services.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {EndpointServicesListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {EndpointServicesListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link EndpointServicesListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(location: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.EndpointServicesListResult>;
    list(location: string, callback: ServiceCallback<models.EndpointServicesListResult>): void;
    list(location: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EndpointServicesListResult>): void;


    /**
     * List what values of endpoint services are available for use.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<EndpointServicesListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.EndpointServicesListResult>>;

    /**
     * List what values of endpoint services are available for use.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {EndpointServicesListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {EndpointServicesListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link EndpointServicesListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.EndpointServicesListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.EndpointServicesListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EndpointServicesListResult>): void;
}

/**
 * @class
 * ExpressRouteCircuitAuthorizations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the NetworkManagementClient.
 */
export interface ExpressRouteCircuitAuthorizations {


    /**
     * Deletes the specified authorization from the specified express route
     * circuit.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the express route circuit.
     *
     * @param {string} authorizationName The name of the authorization.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, circuitName: string, authorizationName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the specified authorization from the specified express route
     * circuit.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the express route circuit.
     *
     * @param {string} authorizationName The name of the authorization.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, circuitName: string, authorizationName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, circuitName: string, authorizationName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, circuitName: string, authorizationName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets the specified authorization from the specified express route circuit.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the express route circuit.
     *
     * @param {string} authorizationName The name of the authorization.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ExpressRouteCircuitAuthorization>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, circuitName: string, authorizationName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ExpressRouteCircuitAuthorization>>;

    /**
     * Gets the specified authorization from the specified express route circuit.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the express route circuit.
     *
     * @param {string} authorizationName The name of the authorization.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ExpressRouteCircuitAuthorization} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ExpressRouteCircuitAuthorization} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ExpressRouteCircuitAuthorization} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, circuitName: string, authorizationName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ExpressRouteCircuitAuthorization>;
    get(resourceGroupName: string, circuitName: string, authorizationName: string, callback: ServiceCallback<models.ExpressRouteCircuitAuthorization>): void;
    get(resourceGroupName: string, circuitName: string, authorizationName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExpressRouteCircuitAuthorization>): void;


    /**
     * Creates or updates an authorization in the specified express route circuit.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the express route circuit.
     *
     * @param {string} authorizationName The name of the authorization.
     *
     * @param {object} authorizationParameters Parameters supplied to the create or
     * update express route circuit authorization operation.
     *
     * @param {string} [authorizationParameters.authorizationKey] The authorization
     * key.
     *
     * @param {string} [authorizationParameters.authorizationUseStatus]
     * AuthorizationUseStatus. Possible values are: 'Available' and 'InUse'.
     * Possible values include: 'Available', 'InUse'
     *
     * @param {string} [authorizationParameters.provisioningState] Gets the
     * provisioning state of the public IP resource. Possible values are:
     * 'Updating', 'Deleting', and 'Failed'.
     *
     * @param {string} [authorizationParameters.name] Gets name of the resource
     * that is unique within a resource group. This name can be used to access the
     * resource.
     *
     * @param {string} [authorizationParameters.id] Resource ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ExpressRouteCircuitAuthorization>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, circuitName: string, authorizationName: string, authorizationParameters: models.ExpressRouteCircuitAuthorization, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ExpressRouteCircuitAuthorization>>;

    /**
     * Creates or updates an authorization in the specified express route circuit.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the express route circuit.
     *
     * @param {string} authorizationName The name of the authorization.
     *
     * @param {object} authorizationParameters Parameters supplied to the create or
     * update express route circuit authorization operation.
     *
     * @param {string} [authorizationParameters.authorizationKey] The authorization
     * key.
     *
     * @param {string} [authorizationParameters.authorizationUseStatus]
     * AuthorizationUseStatus. Possible values are: 'Available' and 'InUse'.
     * Possible values include: 'Available', 'InUse'
     *
     * @param {string} [authorizationParameters.provisioningState] Gets the
     * provisioning state of the public IP resource. Possible values are:
     * 'Updating', 'Deleting', and 'Failed'.
     *
     * @param {string} [authorizationParameters.name] Gets name of the resource
     * that is unique within a resource group. This name can be used to access the
     * resource.
     *
     * @param {string} [authorizationParameters.id] Resource ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ExpressRouteCircuitAuthorization} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ExpressRouteCircuitAuthorization} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ExpressRouteCircuitAuthorization} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, circuitName: string, authorizationName: string, authorizationParameters: models.ExpressRouteCircuitAuthorization, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ExpressRouteCircuitAuthorization>;
    createOrUpdate(resourceGroupName: string, circuitName: string, authorizationName: string, authorizationParameters: models.ExpressRouteCircuitAuthorization, callback: ServiceCallback<models.ExpressRouteCircuitAuthorization>): void;
    createOrUpdate(resourceGroupName: string, circuitName: string, authorizationName: string, authorizationParameters: models.ExpressRouteCircuitAuthorization, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExpressRouteCircuitAuthorization>): void;


    /**
     * Gets all authorizations in an express route circuit.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the circuit.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AuthorizationListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(resourceGroupName: string, circuitName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AuthorizationListResult>>;

    /**
     * Gets all authorizations in an express route circuit.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the circuit.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AuthorizationListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AuthorizationListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AuthorizationListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(resourceGroupName: string, circuitName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AuthorizationListResult>;
    list(resourceGroupName: string, circuitName: string, callback: ServiceCallback<models.AuthorizationListResult>): void;
    list(resourceGroupName: string, circuitName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AuthorizationListResult>): void;


    /**
     * Deletes the specified authorization from the specified express route
     * circuit.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the express route circuit.
     *
     * @param {string} authorizationName The name of the authorization.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, circuitName: string, authorizationName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the specified authorization from the specified express route
     * circuit.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the express route circuit.
     *
     * @param {string} authorizationName The name of the authorization.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(resourceGroupName: string, circuitName: string, authorizationName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(resourceGroupName: string, circuitName: string, authorizationName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, circuitName: string, authorizationName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Creates or updates an authorization in the specified express route circuit.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the express route circuit.
     *
     * @param {string} authorizationName The name of the authorization.
     *
     * @param {object} authorizationParameters Parameters supplied to the create or
     * update express route circuit authorization operation.
     *
     * @param {string} [authorizationParameters.authorizationKey] The authorization
     * key.
     *
     * @param {string} [authorizationParameters.authorizationUseStatus]
     * AuthorizationUseStatus. Possible values are: 'Available' and 'InUse'.
     * Possible values include: 'Available', 'InUse'
     *
     * @param {string} [authorizationParameters.provisioningState] Gets the
     * provisioning state of the public IP resource. Possible values are:
     * 'Updating', 'Deleting', and 'Failed'.
     *
     * @param {string} [authorizationParameters.name] Gets name of the resource
     * that is unique within a resource group. This name can be used to access the
     * resource.
     *
     * @param {string} [authorizationParameters.id] Resource ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ExpressRouteCircuitAuthorization>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, circuitName: string, authorizationName: string, authorizationParameters: models.ExpressRouteCircuitAuthorization, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ExpressRouteCircuitAuthorization>>;

    /**
     * Creates or updates an authorization in the specified express route circuit.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the express route circuit.
     *
     * @param {string} authorizationName The name of the authorization.
     *
     * @param {object} authorizationParameters Parameters supplied to the create or
     * update express route circuit authorization operation.
     *
     * @param {string} [authorizationParameters.authorizationKey] The authorization
     * key.
     *
     * @param {string} [authorizationParameters.authorizationUseStatus]
     * AuthorizationUseStatus. Possible values are: 'Available' and 'InUse'.
     * Possible values include: 'Available', 'InUse'
     *
     * @param {string} [authorizationParameters.provisioningState] Gets the
     * provisioning state of the public IP resource. Possible values are:
     * 'Updating', 'Deleting', and 'Failed'.
     *
     * @param {string} [authorizationParameters.name] Gets name of the resource
     * that is unique within a resource group. This name can be used to access the
     * resource.
     *
     * @param {string} [authorizationParameters.id] Resource ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ExpressRouteCircuitAuthorization} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ExpressRouteCircuitAuthorization} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ExpressRouteCircuitAuthorization} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(resourceGroupName: string, circuitName: string, authorizationName: string, authorizationParameters: models.ExpressRouteCircuitAuthorization, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ExpressRouteCircuitAuthorization>;
    beginCreateOrUpdate(resourceGroupName: string, circuitName: string, authorizationName: string, authorizationParameters: models.ExpressRouteCircuitAuthorization, callback: ServiceCallback<models.ExpressRouteCircuitAuthorization>): void;
    beginCreateOrUpdate(resourceGroupName: string, circuitName: string, authorizationName: string, authorizationParameters: models.ExpressRouteCircuitAuthorization, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExpressRouteCircuitAuthorization>): void;


    /**
     * Gets all authorizations in an express route circuit.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AuthorizationListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AuthorizationListResult>>;

    /**
     * Gets all authorizations in an express route circuit.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AuthorizationListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AuthorizationListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AuthorizationListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AuthorizationListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.AuthorizationListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AuthorizationListResult>): void;
}

/**
 * @class
 * ExpressRouteCircuitPeerings
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the NetworkManagementClient.
 */
export interface ExpressRouteCircuitPeerings {


    /**
     * Deletes the specified peering from the specified express route circuit.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the express route circuit.
     *
     * @param {string} peeringName The name of the peering.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, circuitName: string, peeringName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the specified peering from the specified express route circuit.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the express route circuit.
     *
     * @param {string} peeringName The name of the peering.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, circuitName: string, peeringName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, circuitName: string, peeringName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, circuitName: string, peeringName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets the specified authorization from the specified express route circuit.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the express route circuit.
     *
     * @param {string} peeringName The name of the peering.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ExpressRouteCircuitPeering>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, circuitName: string, peeringName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ExpressRouteCircuitPeering>>;

    /**
     * Gets the specified authorization from the specified express route circuit.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the express route circuit.
     *
     * @param {string} peeringName The name of the peering.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ExpressRouteCircuitPeering} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ExpressRouteCircuitPeering} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ExpressRouteCircuitPeering} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, circuitName: string, peeringName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ExpressRouteCircuitPeering>;
    get(resourceGroupName: string, circuitName: string, peeringName: string, callback: ServiceCallback<models.ExpressRouteCircuitPeering>): void;
    get(resourceGroupName: string, circuitName: string, peeringName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExpressRouteCircuitPeering>): void;


    /**
     * Creates or updates a peering in the specified express route circuits.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the express route circuit.
     *
     * @param {string} peeringName The name of the peering.
     *
     * @param {object} peeringParameters Parameters supplied to the create or
     * update express route circuit peering operation.
     *
     * @param {string} [peeringParameters.peeringType] The peering type. Possible
     * values include: 'AzurePublicPeering', 'AzurePrivatePeering',
     * 'MicrosoftPeering'
     *
     * @param {string} [peeringParameters.state] The peering state. Possible values
     * include: 'Disabled', 'Enabled'
     *
     * @param {number} [peeringParameters.azureASN] The Azure ASN.
     *
     * @param {number} [peeringParameters.peerASN] The peer ASN.
     *
     * @param {string} [peeringParameters.primaryPeerAddressPrefix] The primary
     * address prefix.
     *
     * @param {string} [peeringParameters.secondaryPeerAddressPrefix] The secondary
     * address prefix.
     *
     * @param {string} [peeringParameters.primaryAzurePort] The primary port.
     *
     * @param {string} [peeringParameters.secondaryAzurePort] The secondary port.
     *
     * @param {string} [peeringParameters.sharedKey] The shared key.
     *
     * @param {number} [peeringParameters.vlanId] The VLAN ID.
     *
     * @param {object} [peeringParameters.microsoftPeeringConfig] The Microsoft
     * peering configuration.
     *
     * @param {object} [peeringParameters.stats] Gets peering stats.
     *
     * @param {number} [peeringParameters.stats.primarybytesIn] Gets BytesIn of the
     * peering.
     *
     * @param {number} [peeringParameters.stats.primarybytesOut] Gets BytesOut of
     * the peering.
     *
     * @param {number} [peeringParameters.stats.secondarybytesIn] Gets BytesIn of
     * the peering.
     *
     * @param {number} [peeringParameters.stats.secondarybytesOut] Gets BytesOut of
     * the peering.
     *
     * @param {string} [peeringParameters.provisioningState] Gets the provisioning
     * state of the public IP resource. Possible values are: 'Updating',
     * 'Deleting', and 'Failed'.
     *
     * @param {string} [peeringParameters.gatewayManagerEtag] The GatewayManager
     * Etag.
     *
     * @param {string} [peeringParameters.lastModifiedBy] Gets whether the provider
     * or the customer last modified the peering.
     *
     * @param {object} [peeringParameters.routeFilter] The reference of the
     * RouteFilter resource.
     *
     * @param {object} [peeringParameters.ipv6PeeringConfig] The IPv6 peering
     * configuration.
     *
     * @param {string}
     * [peeringParameters.ipv6PeeringConfig.primaryPeerAddressPrefix] The primary
     * address prefix.
     *
     * @param {string}
     * [peeringParameters.ipv6PeeringConfig.secondaryPeerAddressPrefix] The
     * secondary address prefix.
     *
     * @param {object} [peeringParameters.ipv6PeeringConfig.microsoftPeeringConfig]
     * The Microsoft peering configuration.
     *
     * @param {array}
     * [peeringParameters.ipv6PeeringConfig.microsoftPeeringConfig.advertisedPublicPrefixes]
     * The reference of AdvertisedPublicPrefixes.
     *
     * @param {array}
     * [peeringParameters.ipv6PeeringConfig.microsoftPeeringConfig.advertisedCommunities]
     * The communities of bgp peering. Spepcified for microsoft peering
     *
     * @param {string}
     * [peeringParameters.ipv6PeeringConfig.microsoftPeeringConfig.advertisedPublicPrefixesState]
     * AdvertisedPublicPrefixState of the Peering resource. Possible values are
     * 'NotConfigured', 'Configuring', 'Configured', and 'ValidationNeeded'.
     * Possible values include: 'NotConfigured', 'Configuring', 'Configured',
     * 'ValidationNeeded'
     *
     * @param {number}
     * [peeringParameters.ipv6PeeringConfig.microsoftPeeringConfig.legacyMode] The
     * legacy mode of the peering.
     *
     * @param {number}
     * [peeringParameters.ipv6PeeringConfig.microsoftPeeringConfig.customerASN] The
     * CustomerASN of the peering.
     *
     * @param {string}
     * [peeringParameters.ipv6PeeringConfig.microsoftPeeringConfig.routingRegistryName]
     * The RoutingRegistryName of the configuration.
     *
     * @param {object} [peeringParameters.ipv6PeeringConfig.routeFilter] The
     * reference of the RouteFilter resource.
     *
     * @param {array} [peeringParameters.ipv6PeeringConfig.routeFilter.rules]
     * Collection of RouteFilterRules contained within a route filter.
     *
     * @param {array} [peeringParameters.ipv6PeeringConfig.routeFilter.peerings] A
     * collection of references to express route circuit peerings.
     *
     * @param {string} [peeringParameters.ipv6PeeringConfig.routeFilter.id]
     * Resource ID.
     *
     * @param {string} [peeringParameters.ipv6PeeringConfig.routeFilter.location]
     * Resource location.
     *
     * @param {object} [peeringParameters.ipv6PeeringConfig.routeFilter.tags]
     * Resource tags.
     *
     * @param {string} [peeringParameters.ipv6PeeringConfig.state] The state of
     * peering. Possible values are: 'Disabled' and 'Enabled'. Possible values
     * include: 'Disabled', 'Enabled'
     *
     * @param {array} [peeringParameters.connections] The list of circuit
     * connections associated with Azure Private Peering for this circuit.
     *
     * @param {string} [peeringParameters.name] Gets name of the resource that is
     * unique within a resource group. This name can be used to access the
     * resource.
     *
     * @param {string} [peeringParameters.id] Resource ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ExpressRouteCircuitPeering>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, circuitName: string, peeringName: string, peeringParameters: models.ExpressRouteCircuitPeering, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ExpressRouteCircuitPeering>>;

    /**
     * Creates or updates a peering in the specified express route circuits.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the express route circuit.
     *
     * @param {string} peeringName The name of the peering.
     *
     * @param {object} peeringParameters Parameters supplied to the create or
     * update express route circuit peering operation.
     *
     * @param {string} [peeringParameters.peeringType] The peering type. Possible
     * values include: 'AzurePublicPeering', 'AzurePrivatePeering',
     * 'MicrosoftPeering'
     *
     * @param {string} [peeringParameters.state] The peering state. Possible values
     * include: 'Disabled', 'Enabled'
     *
     * @param {number} [peeringParameters.azureASN] The Azure ASN.
     *
     * @param {number} [peeringParameters.peerASN] The peer ASN.
     *
     * @param {string} [peeringParameters.primaryPeerAddressPrefix] The primary
     * address prefix.
     *
     * @param {string} [peeringParameters.secondaryPeerAddressPrefix] The secondary
     * address prefix.
     *
     * @param {string} [peeringParameters.primaryAzurePort] The primary port.
     *
     * @param {string} [peeringParameters.secondaryAzurePort] The secondary port.
     *
     * @param {string} [peeringParameters.sharedKey] The shared key.
     *
     * @param {number} [peeringParameters.vlanId] The VLAN ID.
     *
     * @param {object} [peeringParameters.microsoftPeeringConfig] The Microsoft
     * peering configuration.
     *
     * @param {object} [peeringParameters.stats] Gets peering stats.
     *
     * @param {number} [peeringParameters.stats.primarybytesIn] Gets BytesIn of the
     * peering.
     *
     * @param {number} [peeringParameters.stats.primarybytesOut] Gets BytesOut of
     * the peering.
     *
     * @param {number} [peeringParameters.stats.secondarybytesIn] Gets BytesIn of
     * the peering.
     *
     * @param {number} [peeringParameters.stats.secondarybytesOut] Gets BytesOut of
     * the peering.
     *
     * @param {string} [peeringParameters.provisioningState] Gets the provisioning
     * state of the public IP resource. Possible values are: 'Updating',
     * 'Deleting', and 'Failed'.
     *
     * @param {string} [peeringParameters.gatewayManagerEtag] The GatewayManager
     * Etag.
     *
     * @param {string} [peeringParameters.lastModifiedBy] Gets whether the provider
     * or the customer last modified the peering.
     *
     * @param {object} [peeringParameters.routeFilter] The reference of the
     * RouteFilter resource.
     *
     * @param {object} [peeringParameters.ipv6PeeringConfig] The IPv6 peering
     * configuration.
     *
     * @param {string}
     * [peeringParameters.ipv6PeeringConfig.primaryPeerAddressPrefix] The primary
     * address prefix.
     *
     * @param {string}
     * [peeringParameters.ipv6PeeringConfig.secondaryPeerAddressPrefix] The
     * secondary address prefix.
     *
     * @param {object} [peeringParameters.ipv6PeeringConfig.microsoftPeeringConfig]
     * The Microsoft peering configuration.
     *
     * @param {array}
     * [peeringParameters.ipv6PeeringConfig.microsoftPeeringConfig.advertisedPublicPrefixes]
     * The reference of AdvertisedPublicPrefixes.
     *
     * @param {array}
     * [peeringParameters.ipv6PeeringConfig.microsoftPeeringConfig.advertisedCommunities]
     * The communities of bgp peering. Spepcified for microsoft peering
     *
     * @param {string}
     * [peeringParameters.ipv6PeeringConfig.microsoftPeeringConfig.advertisedPublicPrefixesState]
     * AdvertisedPublicPrefixState of the Peering resource. Possible values are
     * 'NotConfigured', 'Configuring', 'Configured', and 'ValidationNeeded'.
     * Possible values include: 'NotConfigured', 'Configuring', 'Configured',
     * 'ValidationNeeded'
     *
     * @param {number}
     * [peeringParameters.ipv6PeeringConfig.microsoftPeeringConfig.legacyMode] The
     * legacy mode of the peering.
     *
     * @param {number}
     * [peeringParameters.ipv6PeeringConfig.microsoftPeeringConfig.customerASN] The
     * CustomerASN of the peering.
     *
     * @param {string}
     * [peeringParameters.ipv6PeeringConfig.microsoftPeeringConfig.routingRegistryName]
     * The RoutingRegistryName of the configuration.
     *
     * @param {object} [peeringParameters.ipv6PeeringConfig.routeFilter] The
     * reference of the RouteFilter resource.
     *
     * @param {array} [peeringParameters.ipv6PeeringConfig.routeFilter.rules]
     * Collection of RouteFilterRules contained within a route filter.
     *
     * @param {array} [peeringParameters.ipv6PeeringConfig.routeFilter.peerings] A
     * collection of references to express route circuit peerings.
     *
     * @param {string} [peeringParameters.ipv6PeeringConfig.routeFilter.id]
     * Resource ID.
     *
     * @param {string} [peeringParameters.ipv6PeeringConfig.routeFilter.location]
     * Resource location.
     *
     * @param {object} [peeringParameters.ipv6PeeringConfig.routeFilter.tags]
     * Resource tags.
     *
     * @param {string} [peeringParameters.ipv6PeeringConfig.state] The state of
     * peering. Possible values are: 'Disabled' and 'Enabled'. Possible values
     * include: 'Disabled', 'Enabled'
     *
     * @param {array} [peeringParameters.connections] The list of circuit
     * connections associated with Azure Private Peering for this circuit.
     *
     * @param {string} [peeringParameters.name] Gets name of the resource that is
     * unique within a resource group. This name can be used to access the
     * resource.
     *
     * @param {string} [peeringParameters.id] Resource ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ExpressRouteCircuitPeering} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ExpressRouteCircuitPeering} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ExpressRouteCircuitPeering} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, circuitName: string, peeringName: string, peeringParameters: models.ExpressRouteCircuitPeering, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ExpressRouteCircuitPeering>;
    createOrUpdate(resourceGroupName: string, circuitName: string, peeringName: string, peeringParameters: models.ExpressRouteCircuitPeering, callback: ServiceCallback<models.ExpressRouteCircuitPeering>): void;
    createOrUpdate(resourceGroupName: string, circuitName: string, peeringName: string, peeringParameters: models.ExpressRouteCircuitPeering, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExpressRouteCircuitPeering>): void;


    /**
     * Gets all peerings in a specified express route circuit.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the express route circuit.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ExpressRouteCircuitPeeringListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(resourceGroupName: string, circuitName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ExpressRouteCircuitPeeringListResult>>;

    /**
     * Gets all peerings in a specified express route circuit.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the express route circuit.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ExpressRouteCircuitPeeringListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ExpressRouteCircuitPeeringListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ExpressRouteCircuitPeeringListResult} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(resourceGroupName: string, circuitName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ExpressRouteCircuitPeeringListResult>;
    list(resourceGroupName: string, circuitName: string, callback: ServiceCallback<models.ExpressRouteCircuitPeeringListResult>): void;
    list(resourceGroupName: string, circuitName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExpressRouteCircuitPeeringListResult>): void;


    /**
     * Deletes the specified peering from the specified express route circuit.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the express route circuit.
     *
     * @param {string} peeringName The name of the peering.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, circuitName: string, peeringName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the specified peering from the specified express route circuit.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the express route circuit.
     *
     * @param {string} peeringName The name of the peering.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(resourceGroupName: string, circuitName: string, peeringName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(resourceGroupName: string, circuitName: string, peeringName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, circuitName: string, peeringName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Creates or updates a peering in the specified express route circuits.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the express route circuit.
     *
     * @param {string} peeringName The name of the peering.
     *
     * @param {object} peeringParameters Parameters supplied to the create or
     * update express route circuit peering operation.
     *
     * @param {string} [peeringParameters.peeringType] The peering type. Possible
     * values include: 'AzurePublicPeering', 'AzurePrivatePeering',
     * 'MicrosoftPeering'
     *
     * @param {string} [peeringParameters.state] The peering state. Possible values
     * include: 'Disabled', 'Enabled'
     *
     * @param {number} [peeringParameters.azureASN] The Azure ASN.
     *
     * @param {number} [peeringParameters.peerASN] The peer ASN.
     *
     * @param {string} [peeringParameters.primaryPeerAddressPrefix] The primary
     * address prefix.
     *
     * @param {string} [peeringParameters.secondaryPeerAddressPrefix] The secondary
     * address prefix.
     *
     * @param {string} [peeringParameters.primaryAzurePort] The primary port.
     *
     * @param {string} [peeringParameters.secondaryAzurePort] The secondary port.
     *
     * @param {string} [peeringParameters.sharedKey] The shared key.
     *
     * @param {number} [peeringParameters.vlanId] The VLAN ID.
     *
     * @param {object} [peeringParameters.microsoftPeeringConfig] The Microsoft
     * peering configuration.
     *
     * @param {object} [peeringParameters.stats] Gets peering stats.
     *
     * @param {number} [peeringParameters.stats.primarybytesIn] Gets BytesIn of the
     * peering.
     *
     * @param {number} [peeringParameters.stats.primarybytesOut] Gets BytesOut of
     * the peering.
     *
     * @param {number} [peeringParameters.stats.secondarybytesIn] Gets BytesIn of
     * the peering.
     *
     * @param {number} [peeringParameters.stats.secondarybytesOut] Gets BytesOut of
     * the peering.
     *
     * @param {string} [peeringParameters.provisioningState] Gets the provisioning
     * state of the public IP resource. Possible values are: 'Updating',
     * 'Deleting', and 'Failed'.
     *
     * @param {string} [peeringParameters.gatewayManagerEtag] The GatewayManager
     * Etag.
     *
     * @param {string} [peeringParameters.lastModifiedBy] Gets whether the provider
     * or the customer last modified the peering.
     *
     * @param {object} [peeringParameters.routeFilter] The reference of the
     * RouteFilter resource.
     *
     * @param {object} [peeringParameters.ipv6PeeringConfig] The IPv6 peering
     * configuration.
     *
     * @param {string}
     * [peeringParameters.ipv6PeeringConfig.primaryPeerAddressPrefix] The primary
     * address prefix.
     *
     * @param {string}
     * [peeringParameters.ipv6PeeringConfig.secondaryPeerAddressPrefix] The
     * secondary address prefix.
     *
     * @param {object} [peeringParameters.ipv6PeeringConfig.microsoftPeeringConfig]
     * The Microsoft peering configuration.
     *
     * @param {array}
     * [peeringParameters.ipv6PeeringConfig.microsoftPeeringConfig.advertisedPublicPrefixes]
     * The reference of AdvertisedPublicPrefixes.
     *
     * @param {array}
     * [peeringParameters.ipv6PeeringConfig.microsoftPeeringConfig.advertisedCommunities]
     * The communities of bgp peering. Spepcified for microsoft peering
     *
     * @param {string}
     * [peeringParameters.ipv6PeeringConfig.microsoftPeeringConfig.advertisedPublicPrefixesState]
     * AdvertisedPublicPrefixState of the Peering resource. Possible values are
     * 'NotConfigured', 'Configuring', 'Configured', and 'ValidationNeeded'.
     * Possible values include: 'NotConfigured', 'Configuring', 'Configured',
     * 'ValidationNeeded'
     *
     * @param {number}
     * [peeringParameters.ipv6PeeringConfig.microsoftPeeringConfig.legacyMode] The
     * legacy mode of the peering.
     *
     * @param {number}
     * [peeringParameters.ipv6PeeringConfig.microsoftPeeringConfig.customerASN] The
     * CustomerASN of the peering.
     *
     * @param {string}
     * [peeringParameters.ipv6PeeringConfig.microsoftPeeringConfig.routingRegistryName]
     * The RoutingRegistryName of the configuration.
     *
     * @param {object} [peeringParameters.ipv6PeeringConfig.routeFilter] The
     * reference of the RouteFilter resource.
     *
     * @param {array} [peeringParameters.ipv6PeeringConfig.routeFilter.rules]
     * Collection of RouteFilterRules contained within a route filter.
     *
     * @param {array} [peeringParameters.ipv6PeeringConfig.routeFilter.peerings] A
     * collection of references to express route circuit peerings.
     *
     * @param {string} [peeringParameters.ipv6PeeringConfig.routeFilter.id]
     * Resource ID.
     *
     * @param {string} [peeringParameters.ipv6PeeringConfig.routeFilter.location]
     * Resource location.
     *
     * @param {object} [peeringParameters.ipv6PeeringConfig.routeFilter.tags]
     * Resource tags.
     *
     * @param {string} [peeringParameters.ipv6PeeringConfig.state] The state of
     * peering. Possible values are: 'Disabled' and 'Enabled'. Possible values
     * include: 'Disabled', 'Enabled'
     *
     * @param {array} [peeringParameters.connections] The list of circuit
     * connections associated with Azure Private Peering for this circuit.
     *
     * @param {string} [peeringParameters.name] Gets name of the resource that is
     * unique within a resource group. This name can be used to access the
     * resource.
     *
     * @param {string} [peeringParameters.id] Resource ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ExpressRouteCircuitPeering>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, circuitName: string, peeringName: string, peeringParameters: models.ExpressRouteCircuitPeering, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ExpressRouteCircuitPeering>>;

    /**
     * Creates or updates a peering in the specified express route circuits.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the express route circuit.
     *
     * @param {string} peeringName The name of the peering.
     *
     * @param {object} peeringParameters Parameters supplied to the create or
     * update express route circuit peering operation.
     *
     * @param {string} [peeringParameters.peeringType] The peering type. Possible
     * values include: 'AzurePublicPeering', 'AzurePrivatePeering',
     * 'MicrosoftPeering'
     *
     * @param {string} [peeringParameters.state] The peering state. Possible values
     * include: 'Disabled', 'Enabled'
     *
     * @param {number} [peeringParameters.azureASN] The Azure ASN.
     *
     * @param {number} [peeringParameters.peerASN] The peer ASN.
     *
     * @param {string} [peeringParameters.primaryPeerAddressPrefix] The primary
     * address prefix.
     *
     * @param {string} [peeringParameters.secondaryPeerAddressPrefix] The secondary
     * address prefix.
     *
     * @param {string} [peeringParameters.primaryAzurePort] The primary port.
     *
     * @param {string} [peeringParameters.secondaryAzurePort] The secondary port.
     *
     * @param {string} [peeringParameters.sharedKey] The shared key.
     *
     * @param {number} [peeringParameters.vlanId] The VLAN ID.
     *
     * @param {object} [peeringParameters.microsoftPeeringConfig] The Microsoft
     * peering configuration.
     *
     * @param {object} [peeringParameters.stats] Gets peering stats.
     *
     * @param {number} [peeringParameters.stats.primarybytesIn] Gets BytesIn of the
     * peering.
     *
     * @param {number} [peeringParameters.stats.primarybytesOut] Gets BytesOut of
     * the peering.
     *
     * @param {number} [peeringParameters.stats.secondarybytesIn] Gets BytesIn of
     * the peering.
     *
     * @param {number} [peeringParameters.stats.secondarybytesOut] Gets BytesOut of
     * the peering.
     *
     * @param {string} [peeringParameters.provisioningState] Gets the provisioning
     * state of the public IP resource. Possible values are: 'Updating',
     * 'Deleting', and 'Failed'.
     *
     * @param {string} [peeringParameters.gatewayManagerEtag] The GatewayManager
     * Etag.
     *
     * @param {string} [peeringParameters.lastModifiedBy] Gets whether the provider
     * or the customer last modified the peering.
     *
     * @param {object} [peeringParameters.routeFilter] The reference of the
     * RouteFilter resource.
     *
     * @param {object} [peeringParameters.ipv6PeeringConfig] The IPv6 peering
     * configuration.
     *
     * @param {string}
     * [peeringParameters.ipv6PeeringConfig.primaryPeerAddressPrefix] The primary
     * address prefix.
     *
     * @param {string}
     * [peeringParameters.ipv6PeeringConfig.secondaryPeerAddressPrefix] The
     * secondary address prefix.
     *
     * @param {object} [peeringParameters.ipv6PeeringConfig.microsoftPeeringConfig]
     * The Microsoft peering configuration.
     *
     * @param {array}
     * [peeringParameters.ipv6PeeringConfig.microsoftPeeringConfig.advertisedPublicPrefixes]
     * The reference of AdvertisedPublicPrefixes.
     *
     * @param {array}
     * [peeringParameters.ipv6PeeringConfig.microsoftPeeringConfig.advertisedCommunities]
     * The communities of bgp peering. Spepcified for microsoft peering
     *
     * @param {string}
     * [peeringParameters.ipv6PeeringConfig.microsoftPeeringConfig.advertisedPublicPrefixesState]
     * AdvertisedPublicPrefixState of the Peering resource. Possible values are
     * 'NotConfigured', 'Configuring', 'Configured', and 'ValidationNeeded'.
     * Possible values include: 'NotConfigured', 'Configuring', 'Configured',
     * 'ValidationNeeded'
     *
     * @param {number}
     * [peeringParameters.ipv6PeeringConfig.microsoftPeeringConfig.legacyMode] The
     * legacy mode of the peering.
     *
     * @param {number}
     * [peeringParameters.ipv6PeeringConfig.microsoftPeeringConfig.customerASN] The
     * CustomerASN of the peering.
     *
     * @param {string}
     * [peeringParameters.ipv6PeeringConfig.microsoftPeeringConfig.routingRegistryName]
     * The RoutingRegistryName of the configuration.
     *
     * @param {object} [peeringParameters.ipv6PeeringConfig.routeFilter] The
     * reference of the RouteFilter resource.
     *
     * @param {array} [peeringParameters.ipv6PeeringConfig.routeFilter.rules]
     * Collection of RouteFilterRules contained within a route filter.
     *
     * @param {array} [peeringParameters.ipv6PeeringConfig.routeFilter.peerings] A
     * collection of references to express route circuit peerings.
     *
     * @param {string} [peeringParameters.ipv6PeeringConfig.routeFilter.id]
     * Resource ID.
     *
     * @param {string} [peeringParameters.ipv6PeeringConfig.routeFilter.location]
     * Resource location.
     *
     * @param {object} [peeringParameters.ipv6PeeringConfig.routeFilter.tags]
     * Resource tags.
     *
     * @param {string} [peeringParameters.ipv6PeeringConfig.state] The state of
     * peering. Possible values are: 'Disabled' and 'Enabled'. Possible values
     * include: 'Disabled', 'Enabled'
     *
     * @param {array} [peeringParameters.connections] The list of circuit
     * connections associated with Azure Private Peering for this circuit.
     *
     * @param {string} [peeringParameters.name] Gets name of the resource that is
     * unique within a resource group. This name can be used to access the
     * resource.
     *
     * @param {string} [peeringParameters.id] Resource ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ExpressRouteCircuitPeering} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ExpressRouteCircuitPeering} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ExpressRouteCircuitPeering} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(resourceGroupName: string, circuitName: string, peeringName: string, peeringParameters: models.ExpressRouteCircuitPeering, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ExpressRouteCircuitPeering>;
    beginCreateOrUpdate(resourceGroupName: string, circuitName: string, peeringName: string, peeringParameters: models.ExpressRouteCircuitPeering, callback: ServiceCallback<models.ExpressRouteCircuitPeering>): void;
    beginCreateOrUpdate(resourceGroupName: string, circuitName: string, peeringName: string, peeringParameters: models.ExpressRouteCircuitPeering, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExpressRouteCircuitPeering>): void;


    /**
     * Gets all peerings in a specified express route circuit.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ExpressRouteCircuitPeeringListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ExpressRouteCircuitPeeringListResult>>;

    /**
     * Gets all peerings in a specified express route circuit.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ExpressRouteCircuitPeeringListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ExpressRouteCircuitPeeringListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ExpressRouteCircuitPeeringListResult} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ExpressRouteCircuitPeeringListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.ExpressRouteCircuitPeeringListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExpressRouteCircuitPeeringListResult>): void;
}

/**
 * @class
 * ExpressRouteCircuitConnections
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the NetworkManagementClient.
 */
export interface ExpressRouteCircuitConnections {


    /**
     * Deletes the specified Express Route Circuit Connection from the specified
     * express route circuit.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the express route circuit.
     *
     * @param {string} peeringName The name of the peering.
     *
     * @param {string} connectionName The name of the express route circuit
     * connection.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, circuitName: string, peeringName: string, connectionName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the specified Express Route Circuit Connection from the specified
     * express route circuit.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the express route circuit.
     *
     * @param {string} peeringName The name of the peering.
     *
     * @param {string} connectionName The name of the express route circuit
     * connection.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, circuitName: string, peeringName: string, connectionName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, circuitName: string, peeringName: string, connectionName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, circuitName: string, peeringName: string, connectionName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets the specified Express Route Circuit Connection from the specified
     * express route circuit.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the express route circuit.
     *
     * @param {string} peeringName The name of the peering.
     *
     * @param {string} connectionName The name of the express route circuit
     * connection.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ExpressRouteCircuitConnection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, circuitName: string, peeringName: string, connectionName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ExpressRouteCircuitConnection>>;

    /**
     * Gets the specified Express Route Circuit Connection from the specified
     * express route circuit.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the express route circuit.
     *
     * @param {string} peeringName The name of the peering.
     *
     * @param {string} connectionName The name of the express route circuit
     * connection.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ExpressRouteCircuitConnection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ExpressRouteCircuitConnection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ExpressRouteCircuitConnection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, circuitName: string, peeringName: string, connectionName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ExpressRouteCircuitConnection>;
    get(resourceGroupName: string, circuitName: string, peeringName: string, connectionName: string, callback: ServiceCallback<models.ExpressRouteCircuitConnection>): void;
    get(resourceGroupName: string, circuitName: string, peeringName: string, connectionName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExpressRouteCircuitConnection>): void;


    /**
     * Creates or updates a Express Route Circuit Connection in the specified
     * express route circuits.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the express route circuit.
     *
     * @param {string} peeringName The name of the peering.
     *
     * @param {string} connectionName The name of the express route circuit
     * connection.
     *
     * @param {object} expressRouteCircuitConnectionParameters Parameters supplied
     * to the create or update express route circuit circuit connection operation.
     *
     * @param {object}
     * [expressRouteCircuitConnectionParameters.expressRouteCircuitPeering]
     * Reference to Express Route Circuit Private Peering Resource of the circuit
     * initiating connection.
     *
     * @param {object}
     * [expressRouteCircuitConnectionParameters.peerExpressRouteCircuitPeering]
     * Reference to Express Route Circuit Private Peering Resource of the peered
     * circuit.
     *
     * @param {string}
     * [expressRouteCircuitConnectionParameters.peerExpressRouteCircuitPeering.id]
     * Resource ID.
     *
     * @param {string} [expressRouteCircuitConnectionParameters.addressPrefix] /29
     * IP address space to carve out Customer addresses for tunnels.
     *
     * @param {string} [expressRouteCircuitConnectionParameters.authorizationKey]
     * The authorization key.
     *
     * @param {string} [expressRouteCircuitConnectionParameters.name] Gets name of
     * the resource that is unique within a resource group. This name can be used
     * to access the resource.
     *
     * @param {string} [expressRouteCircuitConnectionParameters.id] Resource ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ExpressRouteCircuitConnection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, circuitName: string, peeringName: string, connectionName: string, expressRouteCircuitConnectionParameters: models.ExpressRouteCircuitConnection, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ExpressRouteCircuitConnection>>;

    /**
     * Creates or updates a Express Route Circuit Connection in the specified
     * express route circuits.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the express route circuit.
     *
     * @param {string} peeringName The name of the peering.
     *
     * @param {string} connectionName The name of the express route circuit
     * connection.
     *
     * @param {object} expressRouteCircuitConnectionParameters Parameters supplied
     * to the create or update express route circuit circuit connection operation.
     *
     * @param {object}
     * [expressRouteCircuitConnectionParameters.expressRouteCircuitPeering]
     * Reference to Express Route Circuit Private Peering Resource of the circuit
     * initiating connection.
     *
     * @param {object}
     * [expressRouteCircuitConnectionParameters.peerExpressRouteCircuitPeering]
     * Reference to Express Route Circuit Private Peering Resource of the peered
     * circuit.
     *
     * @param {string}
     * [expressRouteCircuitConnectionParameters.peerExpressRouteCircuitPeering.id]
     * Resource ID.
     *
     * @param {string} [expressRouteCircuitConnectionParameters.addressPrefix] /29
     * IP address space to carve out Customer addresses for tunnels.
     *
     * @param {string} [expressRouteCircuitConnectionParameters.authorizationKey]
     * The authorization key.
     *
     * @param {string} [expressRouteCircuitConnectionParameters.name] Gets name of
     * the resource that is unique within a resource group. This name can be used
     * to access the resource.
     *
     * @param {string} [expressRouteCircuitConnectionParameters.id] Resource ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ExpressRouteCircuitConnection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ExpressRouteCircuitConnection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ExpressRouteCircuitConnection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, circuitName: string, peeringName: string, connectionName: string, expressRouteCircuitConnectionParameters: models.ExpressRouteCircuitConnection, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ExpressRouteCircuitConnection>;
    createOrUpdate(resourceGroupName: string, circuitName: string, peeringName: string, connectionName: string, expressRouteCircuitConnectionParameters: models.ExpressRouteCircuitConnection, callback: ServiceCallback<models.ExpressRouteCircuitConnection>): void;
    createOrUpdate(resourceGroupName: string, circuitName: string, peeringName: string, connectionName: string, expressRouteCircuitConnectionParameters: models.ExpressRouteCircuitConnection, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExpressRouteCircuitConnection>): void;


    /**
     * Deletes the specified Express Route Circuit Connection from the specified
     * express route circuit.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the express route circuit.
     *
     * @param {string} peeringName The name of the peering.
     *
     * @param {string} connectionName The name of the express route circuit
     * connection.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, circuitName: string, peeringName: string, connectionName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the specified Express Route Circuit Connection from the specified
     * express route circuit.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the express route circuit.
     *
     * @param {string} peeringName The name of the peering.
     *
     * @param {string} connectionName The name of the express route circuit
     * connection.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(resourceGroupName: string, circuitName: string, peeringName: string, connectionName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(resourceGroupName: string, circuitName: string, peeringName: string, connectionName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, circuitName: string, peeringName: string, connectionName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Creates or updates a Express Route Circuit Connection in the specified
     * express route circuits.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the express route circuit.
     *
     * @param {string} peeringName The name of the peering.
     *
     * @param {string} connectionName The name of the express route circuit
     * connection.
     *
     * @param {object} expressRouteCircuitConnectionParameters Parameters supplied
     * to the create or update express route circuit circuit connection operation.
     *
     * @param {object}
     * [expressRouteCircuitConnectionParameters.expressRouteCircuitPeering]
     * Reference to Express Route Circuit Private Peering Resource of the circuit
     * initiating connection.
     *
     * @param {object}
     * [expressRouteCircuitConnectionParameters.peerExpressRouteCircuitPeering]
     * Reference to Express Route Circuit Private Peering Resource of the peered
     * circuit.
     *
     * @param {string}
     * [expressRouteCircuitConnectionParameters.peerExpressRouteCircuitPeering.id]
     * Resource ID.
     *
     * @param {string} [expressRouteCircuitConnectionParameters.addressPrefix] /29
     * IP address space to carve out Customer addresses for tunnels.
     *
     * @param {string} [expressRouteCircuitConnectionParameters.authorizationKey]
     * The authorization key.
     *
     * @param {string} [expressRouteCircuitConnectionParameters.name] Gets name of
     * the resource that is unique within a resource group. This name can be used
     * to access the resource.
     *
     * @param {string} [expressRouteCircuitConnectionParameters.id] Resource ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ExpressRouteCircuitConnection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, circuitName: string, peeringName: string, connectionName: string, expressRouteCircuitConnectionParameters: models.ExpressRouteCircuitConnection, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ExpressRouteCircuitConnection>>;

    /**
     * Creates or updates a Express Route Circuit Connection in the specified
     * express route circuits.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the express route circuit.
     *
     * @param {string} peeringName The name of the peering.
     *
     * @param {string} connectionName The name of the express route circuit
     * connection.
     *
     * @param {object} expressRouteCircuitConnectionParameters Parameters supplied
     * to the create or update express route circuit circuit connection operation.
     *
     * @param {object}
     * [expressRouteCircuitConnectionParameters.expressRouteCircuitPeering]
     * Reference to Express Route Circuit Private Peering Resource of the circuit
     * initiating connection.
     *
     * @param {object}
     * [expressRouteCircuitConnectionParameters.peerExpressRouteCircuitPeering]
     * Reference to Express Route Circuit Private Peering Resource of the peered
     * circuit.
     *
     * @param {string}
     * [expressRouteCircuitConnectionParameters.peerExpressRouteCircuitPeering.id]
     * Resource ID.
     *
     * @param {string} [expressRouteCircuitConnectionParameters.addressPrefix] /29
     * IP address space to carve out Customer addresses for tunnels.
     *
     * @param {string} [expressRouteCircuitConnectionParameters.authorizationKey]
     * The authorization key.
     *
     * @param {string} [expressRouteCircuitConnectionParameters.name] Gets name of
     * the resource that is unique within a resource group. This name can be used
     * to access the resource.
     *
     * @param {string} [expressRouteCircuitConnectionParameters.id] Resource ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ExpressRouteCircuitConnection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ExpressRouteCircuitConnection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ExpressRouteCircuitConnection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(resourceGroupName: string, circuitName: string, peeringName: string, connectionName: string, expressRouteCircuitConnectionParameters: models.ExpressRouteCircuitConnection, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ExpressRouteCircuitConnection>;
    beginCreateOrUpdate(resourceGroupName: string, circuitName: string, peeringName: string, connectionName: string, expressRouteCircuitConnectionParameters: models.ExpressRouteCircuitConnection, callback: ServiceCallback<models.ExpressRouteCircuitConnection>): void;
    beginCreateOrUpdate(resourceGroupName: string, circuitName: string, peeringName: string, connectionName: string, expressRouteCircuitConnectionParameters: models.ExpressRouteCircuitConnection, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExpressRouteCircuitConnection>): void;
}

/**
 * @class
 * ExpressRouteCircuits
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the NetworkManagementClient.
 */
export interface ExpressRouteCircuits {


    /**
     * Deletes the specified express route circuit.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the express route circuit.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, circuitName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the specified express route circuit.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the express route circuit.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, circuitName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, circuitName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, circuitName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets information about the specified express route circuit.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of express route circuit.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ExpressRouteCircuit>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, circuitName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ExpressRouteCircuit>>;

    /**
     * Gets information about the specified express route circuit.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of express route circuit.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ExpressRouteCircuit} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ExpressRouteCircuit} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ExpressRouteCircuit} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, circuitName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ExpressRouteCircuit>;
    get(resourceGroupName: string, circuitName: string, callback: ServiceCallback<models.ExpressRouteCircuit>): void;
    get(resourceGroupName: string, circuitName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExpressRouteCircuit>): void;


    /**
     * Creates or updates an express route circuit.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the circuit.
     *
     * @param {object} parameters Parameters supplied to the create or update
     * express route circuit operation.
     *
     * @param {object} [parameters.sku] The SKU.
     *
     * @param {string} [parameters.sku.name] The name of the SKU.
     *
     * @param {string} [parameters.sku.tier] The tier of the SKU. Possible values
     * are 'Standard' and 'Premium'. Possible values include: 'Standard', 'Premium'
     *
     * @param {string} [parameters.sku.family] The family of the SKU. Possible
     * values are: 'UnlimitedData' and 'MeteredData'. Possible values include:
     * 'UnlimitedData', 'MeteredData'
     *
     * @param {boolean} [parameters.allowClassicOperations] Allow classic
     * operations
     *
     * @param {string} [parameters.circuitProvisioningState] The
     * CircuitProvisioningState state of the resource.
     *
     * @param {string} [parameters.serviceProviderProvisioningState] The
     * ServiceProviderProvisioningState state of the resource. Possible values are
     * 'NotProvisioned', 'Provisioning', 'Provisioned', and 'Deprovisioning'.
     * Possible values include: 'NotProvisioned', 'Provisioning', 'Provisioned',
     * 'Deprovisioning'
     *
     * @param {array} [parameters.authorizations] The list of authorizations.
     *
     * @param {array} [parameters.peerings] The list of peerings.
     *
     * @param {string} [parameters.serviceKey] The ServiceKey.
     *
     * @param {string} [parameters.serviceProviderNotes] The ServiceProviderNotes.
     *
     * @param {object} [parameters.serviceProviderProperties] The
     * ServiceProviderProperties.
     *
     * @param {string} [parameters.serviceProviderProperties.serviceProviderName]
     * The serviceProviderName.
     *
     * @param {string} [parameters.serviceProviderProperties.peeringLocation] The
     * peering location.
     *
     * @param {number} [parameters.serviceProviderProperties.bandwidthInMbps] The
     * BandwidthInMbps.
     *
     * @param {string} [parameters.provisioningState] Gets the provisioning state
     * of the public IP resource. Possible values are: 'Updating', 'Deleting', and
     * 'Failed'.
     *
     * @param {string} [parameters.gatewayManagerEtag] The GatewayManager Etag.
     *
     * @param {string} [parameters.id] Resource ID.
     *
     * @param {string} [parameters.location] Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ExpressRouteCircuit>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, circuitName: string, parameters: models.ExpressRouteCircuit, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ExpressRouteCircuit>>;

    /**
     * Creates or updates an express route circuit.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the circuit.
     *
     * @param {object} parameters Parameters supplied to the create or update
     * express route circuit operation.
     *
     * @param {object} [parameters.sku] The SKU.
     *
     * @param {string} [parameters.sku.name] The name of the SKU.
     *
     * @param {string} [parameters.sku.tier] The tier of the SKU. Possible values
     * are 'Standard' and 'Premium'. Possible values include: 'Standard', 'Premium'
     *
     * @param {string} [parameters.sku.family] The family of the SKU. Possible
     * values are: 'UnlimitedData' and 'MeteredData'. Possible values include:
     * 'UnlimitedData', 'MeteredData'
     *
     * @param {boolean} [parameters.allowClassicOperations] Allow classic
     * operations
     *
     * @param {string} [parameters.circuitProvisioningState] The
     * CircuitProvisioningState state of the resource.
     *
     * @param {string} [parameters.serviceProviderProvisioningState] The
     * ServiceProviderProvisioningState state of the resource. Possible values are
     * 'NotProvisioned', 'Provisioning', 'Provisioned', and 'Deprovisioning'.
     * Possible values include: 'NotProvisioned', 'Provisioning', 'Provisioned',
     * 'Deprovisioning'
     *
     * @param {array} [parameters.authorizations] The list of authorizations.
     *
     * @param {array} [parameters.peerings] The list of peerings.
     *
     * @param {string} [parameters.serviceKey] The ServiceKey.
     *
     * @param {string} [parameters.serviceProviderNotes] The ServiceProviderNotes.
     *
     * @param {object} [parameters.serviceProviderProperties] The
     * ServiceProviderProperties.
     *
     * @param {string} [parameters.serviceProviderProperties.serviceProviderName]
     * The serviceProviderName.
     *
     * @param {string} [parameters.serviceProviderProperties.peeringLocation] The
     * peering location.
     *
     * @param {number} [parameters.serviceProviderProperties.bandwidthInMbps] The
     * BandwidthInMbps.
     *
     * @param {string} [parameters.provisioningState] Gets the provisioning state
     * of the public IP resource. Possible values are: 'Updating', 'Deleting', and
     * 'Failed'.
     *
     * @param {string} [parameters.gatewayManagerEtag] The GatewayManager Etag.
     *
     * @param {string} [parameters.id] Resource ID.
     *
     * @param {string} [parameters.location] Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ExpressRouteCircuit} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ExpressRouteCircuit} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ExpressRouteCircuit} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, circuitName: string, parameters: models.ExpressRouteCircuit, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ExpressRouteCircuit>;
    createOrUpdate(resourceGroupName: string, circuitName: string, parameters: models.ExpressRouteCircuit, callback: ServiceCallback<models.ExpressRouteCircuit>): void;
    createOrUpdate(resourceGroupName: string, circuitName: string, parameters: models.ExpressRouteCircuit, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExpressRouteCircuit>): void;


    /**
     * Updates an express route circuit tags.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the circuit.
     *
     * @param {object} parameters Parameters supplied to update express route
     * circuit tags.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ExpressRouteCircuit>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateTagsWithHttpOperationResponse(resourceGroupName: string, circuitName: string, parameters: models.TagsObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ExpressRouteCircuit>>;

    /**
     * Updates an express route circuit tags.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the circuit.
     *
     * @param {object} parameters Parameters supplied to update express route
     * circuit tags.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ExpressRouteCircuit} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ExpressRouteCircuit} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ExpressRouteCircuit} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updateTags(resourceGroupName: string, circuitName: string, parameters: models.TagsObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ExpressRouteCircuit>;
    updateTags(resourceGroupName: string, circuitName: string, parameters: models.TagsObject, callback: ServiceCallback<models.ExpressRouteCircuit>): void;
    updateTags(resourceGroupName: string, circuitName: string, parameters: models.TagsObject, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExpressRouteCircuit>): void;


    /**
     * Gets the currently advertised ARP table associated with the express route
     * circuit in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the express route circuit.
     *
     * @param {string} peeringName The name of the peering.
     *
     * @param {string} devicePath The path of the device.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ExpressRouteCircuitsArpTableListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listArpTableWithHttpOperationResponse(resourceGroupName: string, circuitName: string, peeringName: string, devicePath: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ExpressRouteCircuitsArpTableListResult>>;

    /**
     * Gets the currently advertised ARP table associated with the express route
     * circuit in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the express route circuit.
     *
     * @param {string} peeringName The name of the peering.
     *
     * @param {string} devicePath The path of the device.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ExpressRouteCircuitsArpTableListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ExpressRouteCircuitsArpTableListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ExpressRouteCircuitsArpTableListResult} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listArpTable(resourceGroupName: string, circuitName: string, peeringName: string, devicePath: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ExpressRouteCircuitsArpTableListResult>;
    listArpTable(resourceGroupName: string, circuitName: string, peeringName: string, devicePath: string, callback: ServiceCallback<models.ExpressRouteCircuitsArpTableListResult>): void;
    listArpTable(resourceGroupName: string, circuitName: string, peeringName: string, devicePath: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExpressRouteCircuitsArpTableListResult>): void;


    /**
     * Gets the currently advertised routes table associated with the express route
     * circuit in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the express route circuit.
     *
     * @param {string} peeringName The name of the peering.
     *
     * @param {string} devicePath The path of the device.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ExpressRouteCircuitsRoutesTableListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listRoutesTableWithHttpOperationResponse(resourceGroupName: string, circuitName: string, peeringName: string, devicePath: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ExpressRouteCircuitsRoutesTableListResult>>;

    /**
     * Gets the currently advertised routes table associated with the express route
     * circuit in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the express route circuit.
     *
     * @param {string} peeringName The name of the peering.
     *
     * @param {string} devicePath The path of the device.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ExpressRouteCircuitsRoutesTableListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ExpressRouteCircuitsRoutesTableListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ExpressRouteCircuitsRoutesTableListResult}
     *                      for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listRoutesTable(resourceGroupName: string, circuitName: string, peeringName: string, devicePath: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ExpressRouteCircuitsRoutesTableListResult>;
    listRoutesTable(resourceGroupName: string, circuitName: string, peeringName: string, devicePath: string, callback: ServiceCallback<models.ExpressRouteCircuitsRoutesTableListResult>): void;
    listRoutesTable(resourceGroupName: string, circuitName: string, peeringName: string, devicePath: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExpressRouteCircuitsRoutesTableListResult>): void;


    /**
     * Gets the currently advertised routes table summary associated with the
     * express route circuit in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the express route circuit.
     *
     * @param {string} peeringName The name of the peering.
     *
     * @param {string} devicePath The path of the device.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ExpressRouteCircuitsRoutesTableSummaryListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listRoutesTableSummaryWithHttpOperationResponse(resourceGroupName: string, circuitName: string, peeringName: string, devicePath: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ExpressRouteCircuitsRoutesTableSummaryListResult>>;

    /**
     * Gets the currently advertised routes table summary associated with the
     * express route circuit in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the express route circuit.
     *
     * @param {string} peeringName The name of the peering.
     *
     * @param {string} devicePath The path of the device.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ExpressRouteCircuitsRoutesTableSummaryListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ExpressRouteCircuitsRoutesTableSummaryListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link
     *                      ExpressRouteCircuitsRoutesTableSummaryListResult} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listRoutesTableSummary(resourceGroupName: string, circuitName: string, peeringName: string, devicePath: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ExpressRouteCircuitsRoutesTableSummaryListResult>;
    listRoutesTableSummary(resourceGroupName: string, circuitName: string, peeringName: string, devicePath: string, callback: ServiceCallback<models.ExpressRouteCircuitsRoutesTableSummaryListResult>): void;
    listRoutesTableSummary(resourceGroupName: string, circuitName: string, peeringName: string, devicePath: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExpressRouteCircuitsRoutesTableSummaryListResult>): void;


    /**
     * Gets all the stats from an express route circuit in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the express route circuit.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ExpressRouteCircuitStats>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getStatsWithHttpOperationResponse(resourceGroupName: string, circuitName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ExpressRouteCircuitStats>>;

    /**
     * Gets all the stats from an express route circuit in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the express route circuit.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ExpressRouteCircuitStats} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ExpressRouteCircuitStats} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ExpressRouteCircuitStats} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getStats(resourceGroupName: string, circuitName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ExpressRouteCircuitStats>;
    getStats(resourceGroupName: string, circuitName: string, callback: ServiceCallback<models.ExpressRouteCircuitStats>): void;
    getStats(resourceGroupName: string, circuitName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExpressRouteCircuitStats>): void;


    /**
     * Gets all stats from an express route circuit in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the express route circuit.
     *
     * @param {string} peeringName The name of the peering.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ExpressRouteCircuitStats>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getPeeringStatsWithHttpOperationResponse(resourceGroupName: string, circuitName: string, peeringName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ExpressRouteCircuitStats>>;

    /**
     * Gets all stats from an express route circuit in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the express route circuit.
     *
     * @param {string} peeringName The name of the peering.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ExpressRouteCircuitStats} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ExpressRouteCircuitStats} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ExpressRouteCircuitStats} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getPeeringStats(resourceGroupName: string, circuitName: string, peeringName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ExpressRouteCircuitStats>;
    getPeeringStats(resourceGroupName: string, circuitName: string, peeringName: string, callback: ServiceCallback<models.ExpressRouteCircuitStats>): void;
    getPeeringStats(resourceGroupName: string, circuitName: string, peeringName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExpressRouteCircuitStats>): void;


    /**
     * Gets all the express route circuits in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ExpressRouteCircuitListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ExpressRouteCircuitListResult>>;

    /**
     * Gets all the express route circuits in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ExpressRouteCircuitListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ExpressRouteCircuitListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ExpressRouteCircuitListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ExpressRouteCircuitListResult>;
    list(resourceGroupName: string, callback: ServiceCallback<models.ExpressRouteCircuitListResult>): void;
    list(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExpressRouteCircuitListResult>): void;


    /**
     * Gets all the express route circuits in a subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ExpressRouteCircuitListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listAllWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ExpressRouteCircuitListResult>>;

    /**
     * Gets all the express route circuits in a subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ExpressRouteCircuitListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ExpressRouteCircuitListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ExpressRouteCircuitListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listAll(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ExpressRouteCircuitListResult>;
    listAll(callback: ServiceCallback<models.ExpressRouteCircuitListResult>): void;
    listAll(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExpressRouteCircuitListResult>): void;


    /**
     * Deletes the specified express route circuit.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the express route circuit.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, circuitName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the specified express route circuit.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the express route circuit.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(resourceGroupName: string, circuitName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(resourceGroupName: string, circuitName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, circuitName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Creates or updates an express route circuit.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the circuit.
     *
     * @param {object} parameters Parameters supplied to the create or update
     * express route circuit operation.
     *
     * @param {object} [parameters.sku] The SKU.
     *
     * @param {string} [parameters.sku.name] The name of the SKU.
     *
     * @param {string} [parameters.sku.tier] The tier of the SKU. Possible values
     * are 'Standard' and 'Premium'. Possible values include: 'Standard', 'Premium'
     *
     * @param {string} [parameters.sku.family] The family of the SKU. Possible
     * values are: 'UnlimitedData' and 'MeteredData'. Possible values include:
     * 'UnlimitedData', 'MeteredData'
     *
     * @param {boolean} [parameters.allowClassicOperations] Allow classic
     * operations
     *
     * @param {string} [parameters.circuitProvisioningState] The
     * CircuitProvisioningState state of the resource.
     *
     * @param {string} [parameters.serviceProviderProvisioningState] The
     * ServiceProviderProvisioningState state of the resource. Possible values are
     * 'NotProvisioned', 'Provisioning', 'Provisioned', and 'Deprovisioning'.
     * Possible values include: 'NotProvisioned', 'Provisioning', 'Provisioned',
     * 'Deprovisioning'
     *
     * @param {array} [parameters.authorizations] The list of authorizations.
     *
     * @param {array} [parameters.peerings] The list of peerings.
     *
     * @param {string} [parameters.serviceKey] The ServiceKey.
     *
     * @param {string} [parameters.serviceProviderNotes] The ServiceProviderNotes.
     *
     * @param {object} [parameters.serviceProviderProperties] The
     * ServiceProviderProperties.
     *
     * @param {string} [parameters.serviceProviderProperties.serviceProviderName]
     * The serviceProviderName.
     *
     * @param {string} [parameters.serviceProviderProperties.peeringLocation] The
     * peering location.
     *
     * @param {number} [parameters.serviceProviderProperties.bandwidthInMbps] The
     * BandwidthInMbps.
     *
     * @param {string} [parameters.provisioningState] Gets the provisioning state
     * of the public IP resource. Possible values are: 'Updating', 'Deleting', and
     * 'Failed'.
     *
     * @param {string} [parameters.gatewayManagerEtag] The GatewayManager Etag.
     *
     * @param {string} [parameters.id] Resource ID.
     *
     * @param {string} [parameters.location] Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ExpressRouteCircuit>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, circuitName: string, parameters: models.ExpressRouteCircuit, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ExpressRouteCircuit>>;

    /**
     * Creates or updates an express route circuit.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the circuit.
     *
     * @param {object} parameters Parameters supplied to the create or update
     * express route circuit operation.
     *
     * @param {object} [parameters.sku] The SKU.
     *
     * @param {string} [parameters.sku.name] The name of the SKU.
     *
     * @param {string} [parameters.sku.tier] The tier of the SKU. Possible values
     * are 'Standard' and 'Premium'. Possible values include: 'Standard', 'Premium'
     *
     * @param {string} [parameters.sku.family] The family of the SKU. Possible
     * values are: 'UnlimitedData' and 'MeteredData'. Possible values include:
     * 'UnlimitedData', 'MeteredData'
     *
     * @param {boolean} [parameters.allowClassicOperations] Allow classic
     * operations
     *
     * @param {string} [parameters.circuitProvisioningState] The
     * CircuitProvisioningState state of the resource.
     *
     * @param {string} [parameters.serviceProviderProvisioningState] The
     * ServiceProviderProvisioningState state of the resource. Possible values are
     * 'NotProvisioned', 'Provisioning', 'Provisioned', and 'Deprovisioning'.
     * Possible values include: 'NotProvisioned', 'Provisioning', 'Provisioned',
     * 'Deprovisioning'
     *
     * @param {array} [parameters.authorizations] The list of authorizations.
     *
     * @param {array} [parameters.peerings] The list of peerings.
     *
     * @param {string} [parameters.serviceKey] The ServiceKey.
     *
     * @param {string} [parameters.serviceProviderNotes] The ServiceProviderNotes.
     *
     * @param {object} [parameters.serviceProviderProperties] The
     * ServiceProviderProperties.
     *
     * @param {string} [parameters.serviceProviderProperties.serviceProviderName]
     * The serviceProviderName.
     *
     * @param {string} [parameters.serviceProviderProperties.peeringLocation] The
     * peering location.
     *
     * @param {number} [parameters.serviceProviderProperties.bandwidthInMbps] The
     * BandwidthInMbps.
     *
     * @param {string} [parameters.provisioningState] Gets the provisioning state
     * of the public IP resource. Possible values are: 'Updating', 'Deleting', and
     * 'Failed'.
     *
     * @param {string} [parameters.gatewayManagerEtag] The GatewayManager Etag.
     *
     * @param {string} [parameters.id] Resource ID.
     *
     * @param {string} [parameters.location] Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ExpressRouteCircuit} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ExpressRouteCircuit} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ExpressRouteCircuit} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(resourceGroupName: string, circuitName: string, parameters: models.ExpressRouteCircuit, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ExpressRouteCircuit>;
    beginCreateOrUpdate(resourceGroupName: string, circuitName: string, parameters: models.ExpressRouteCircuit, callback: ServiceCallback<models.ExpressRouteCircuit>): void;
    beginCreateOrUpdate(resourceGroupName: string, circuitName: string, parameters: models.ExpressRouteCircuit, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExpressRouteCircuit>): void;


    /**
     * Updates an express route circuit tags.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the circuit.
     *
     * @param {object} parameters Parameters supplied to update express route
     * circuit tags.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ExpressRouteCircuit>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginUpdateTagsWithHttpOperationResponse(resourceGroupName: string, circuitName: string, parameters: models.TagsObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ExpressRouteCircuit>>;

    /**
     * Updates an express route circuit tags.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the circuit.
     *
     * @param {object} parameters Parameters supplied to update express route
     * circuit tags.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ExpressRouteCircuit} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ExpressRouteCircuit} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ExpressRouteCircuit} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginUpdateTags(resourceGroupName: string, circuitName: string, parameters: models.TagsObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ExpressRouteCircuit>;
    beginUpdateTags(resourceGroupName: string, circuitName: string, parameters: models.TagsObject, callback: ServiceCallback<models.ExpressRouteCircuit>): void;
    beginUpdateTags(resourceGroupName: string, circuitName: string, parameters: models.TagsObject, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExpressRouteCircuit>): void;


    /**
     * Gets the currently advertised ARP table associated with the express route
     * circuit in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the express route circuit.
     *
     * @param {string} peeringName The name of the peering.
     *
     * @param {string} devicePath The path of the device.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ExpressRouteCircuitsArpTableListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginListArpTableWithHttpOperationResponse(resourceGroupName: string, circuitName: string, peeringName: string, devicePath: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ExpressRouteCircuitsArpTableListResult>>;

    /**
     * Gets the currently advertised ARP table associated with the express route
     * circuit in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the express route circuit.
     *
     * @param {string} peeringName The name of the peering.
     *
     * @param {string} devicePath The path of the device.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ExpressRouteCircuitsArpTableListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ExpressRouteCircuitsArpTableListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ExpressRouteCircuitsArpTableListResult} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginListArpTable(resourceGroupName: string, circuitName: string, peeringName: string, devicePath: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ExpressRouteCircuitsArpTableListResult>;
    beginListArpTable(resourceGroupName: string, circuitName: string, peeringName: string, devicePath: string, callback: ServiceCallback<models.ExpressRouteCircuitsArpTableListResult>): void;
    beginListArpTable(resourceGroupName: string, circuitName: string, peeringName: string, devicePath: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExpressRouteCircuitsArpTableListResult>): void;


    /**
     * Gets the currently advertised routes table associated with the express route
     * circuit in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the express route circuit.
     *
     * @param {string} peeringName The name of the peering.
     *
     * @param {string} devicePath The path of the device.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ExpressRouteCircuitsRoutesTableListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginListRoutesTableWithHttpOperationResponse(resourceGroupName: string, circuitName: string, peeringName: string, devicePath: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ExpressRouteCircuitsRoutesTableListResult>>;

    /**
     * Gets the currently advertised routes table associated with the express route
     * circuit in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the express route circuit.
     *
     * @param {string} peeringName The name of the peering.
     *
     * @param {string} devicePath The path of the device.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ExpressRouteCircuitsRoutesTableListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ExpressRouteCircuitsRoutesTableListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ExpressRouteCircuitsRoutesTableListResult}
     *                      for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginListRoutesTable(resourceGroupName: string, circuitName: string, peeringName: string, devicePath: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ExpressRouteCircuitsRoutesTableListResult>;
    beginListRoutesTable(resourceGroupName: string, circuitName: string, peeringName: string, devicePath: string, callback: ServiceCallback<models.ExpressRouteCircuitsRoutesTableListResult>): void;
    beginListRoutesTable(resourceGroupName: string, circuitName: string, peeringName: string, devicePath: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExpressRouteCircuitsRoutesTableListResult>): void;


    /**
     * Gets the currently advertised routes table summary associated with the
     * express route circuit in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the express route circuit.
     *
     * @param {string} peeringName The name of the peering.
     *
     * @param {string} devicePath The path of the device.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ExpressRouteCircuitsRoutesTableSummaryListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginListRoutesTableSummaryWithHttpOperationResponse(resourceGroupName: string, circuitName: string, peeringName: string, devicePath: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ExpressRouteCircuitsRoutesTableSummaryListResult>>;

    /**
     * Gets the currently advertised routes table summary associated with the
     * express route circuit in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the express route circuit.
     *
     * @param {string} peeringName The name of the peering.
     *
     * @param {string} devicePath The path of the device.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ExpressRouteCircuitsRoutesTableSummaryListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ExpressRouteCircuitsRoutesTableSummaryListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link
     *                      ExpressRouteCircuitsRoutesTableSummaryListResult} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginListRoutesTableSummary(resourceGroupName: string, circuitName: string, peeringName: string, devicePath: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ExpressRouteCircuitsRoutesTableSummaryListResult>;
    beginListRoutesTableSummary(resourceGroupName: string, circuitName: string, peeringName: string, devicePath: string, callback: ServiceCallback<models.ExpressRouteCircuitsRoutesTableSummaryListResult>): void;
    beginListRoutesTableSummary(resourceGroupName: string, circuitName: string, peeringName: string, devicePath: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExpressRouteCircuitsRoutesTableSummaryListResult>): void;


    /**
     * Gets all the express route circuits in a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ExpressRouteCircuitListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ExpressRouteCircuitListResult>>;

    /**
     * Gets all the express route circuits in a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ExpressRouteCircuitListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ExpressRouteCircuitListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ExpressRouteCircuitListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ExpressRouteCircuitListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.ExpressRouteCircuitListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExpressRouteCircuitListResult>): void;


    /**
     * Gets all the express route circuits in a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ExpressRouteCircuitListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listAllNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ExpressRouteCircuitListResult>>;

    /**
     * Gets all the express route circuits in a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ExpressRouteCircuitListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ExpressRouteCircuitListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ExpressRouteCircuitListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listAllNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ExpressRouteCircuitListResult>;
    listAllNext(nextPageLink: string, callback: ServiceCallback<models.ExpressRouteCircuitListResult>): void;
    listAllNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExpressRouteCircuitListResult>): void;
}

/**
 * @class
 * ExpressRouteServiceProviders
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the NetworkManagementClient.
 */
export interface ExpressRouteServiceProviders {


    /**
     * Gets all the available express route service providers.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ExpressRouteServiceProviderListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ExpressRouteServiceProviderListResult>>;

    /**
     * Gets all the available express route service providers.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ExpressRouteServiceProviderListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ExpressRouteServiceProviderListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ExpressRouteServiceProviderListResult} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ExpressRouteServiceProviderListResult>;
    list(callback: ServiceCallback<models.ExpressRouteServiceProviderListResult>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExpressRouteServiceProviderListResult>): void;


    /**
     * Gets all the available express route service providers.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ExpressRouteServiceProviderListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ExpressRouteServiceProviderListResult>>;

    /**
     * Gets all the available express route service providers.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ExpressRouteServiceProviderListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ExpressRouteServiceProviderListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ExpressRouteServiceProviderListResult} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ExpressRouteServiceProviderListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.ExpressRouteServiceProviderListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExpressRouteServiceProviderListResult>): void;
}

/**
 * @class
 * ExpressRouteCrossConnections
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the NetworkManagementClient.
 */
export interface ExpressRouteCrossConnections {


    /**
     * Retrieves all the ExpressRouteCrossConnections in a subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ExpressRouteCrossConnectionListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ExpressRouteCrossConnectionListResult>>;

    /**
     * Retrieves all the ExpressRouteCrossConnections in a subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ExpressRouteCrossConnectionListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ExpressRouteCrossConnectionListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ExpressRouteCrossConnectionListResult} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ExpressRouteCrossConnectionListResult>;
    list(callback: ServiceCallback<models.ExpressRouteCrossConnectionListResult>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExpressRouteCrossConnectionListResult>): void;


    /**
     * Retrieves all the ExpressRouteCrossConnections in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ExpressRouteCrossConnectionListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupWithHttpOperationResponse(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ExpressRouteCrossConnectionListResult>>;

    /**
     * Retrieves all the ExpressRouteCrossConnections in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ExpressRouteCrossConnectionListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ExpressRouteCrossConnectionListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ExpressRouteCrossConnectionListResult} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroup(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ExpressRouteCrossConnectionListResult>;
    listByResourceGroup(resourceGroupName: string, callback: ServiceCallback<models.ExpressRouteCrossConnectionListResult>): void;
    listByResourceGroup(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExpressRouteCrossConnectionListResult>): void;


    /**
     * Gets details about the specified ExpressRouteCrossConnection.
     *
     * @param {string} resourceGroupName The name of the resource group (peering
     * location of the circuit).
     *
     * @param {string} crossConnectionName The name of the
     * ExpressRouteCrossConnection (service key of the circuit).
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ExpressRouteCrossConnection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, crossConnectionName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ExpressRouteCrossConnection>>;

    /**
     * Gets details about the specified ExpressRouteCrossConnection.
     *
     * @param {string} resourceGroupName The name of the resource group (peering
     * location of the circuit).
     *
     * @param {string} crossConnectionName The name of the
     * ExpressRouteCrossConnection (service key of the circuit).
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ExpressRouteCrossConnection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ExpressRouteCrossConnection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ExpressRouteCrossConnection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, crossConnectionName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ExpressRouteCrossConnection>;
    get(resourceGroupName: string, crossConnectionName: string, callback: ServiceCallback<models.ExpressRouteCrossConnection>): void;
    get(resourceGroupName: string, crossConnectionName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExpressRouteCrossConnection>): void;


    /**
     * Update the specified ExpressRouteCrossConnection.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} crossConnectionName The name of the
     * ExpressRouteCrossConnection.
     *
     * @param {object} parameters Parameters supplied to the update express route
     * crossConnection operation.
     *
     * @param {string} [parameters.peeringLocation] The peering location of the
     * ExpressRoute circuit.
     *
     * @param {number} [parameters.bandwidthInMbps] The circuit bandwidth In Mbps.
     *
     * @param {object} [parameters.expressRouteCircuit] The ExpressRouteCircuit
     *
     * @param {string} [parameters.expressRouteCircuit.id] Corresponding Express
     * Route Circuit Id.
     *
     * @param {string} [parameters.serviceProviderProvisioningState] The
     * provisioning state of the circuit in the connectivity provider system.
     * Possible values are 'NotProvisioned', 'Provisioning', 'Provisioned'.
     * Possible values include: 'NotProvisioned', 'Provisioning', 'Provisioned',
     * 'Deprovisioning'
     *
     * @param {string} [parameters.serviceProviderNotes] Additional read only notes
     * set by the connectivity provider.
     *
     * @param {array} [parameters.peerings] The list of peerings.
     *
     * @param {string} [parameters.id] Resource ID.
     *
     * @param {string} [parameters.location] Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ExpressRouteCrossConnection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, crossConnectionName: string, parameters: models.ExpressRouteCrossConnection, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ExpressRouteCrossConnection>>;

    /**
     * Update the specified ExpressRouteCrossConnection.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} crossConnectionName The name of the
     * ExpressRouteCrossConnection.
     *
     * @param {object} parameters Parameters supplied to the update express route
     * crossConnection operation.
     *
     * @param {string} [parameters.peeringLocation] The peering location of the
     * ExpressRoute circuit.
     *
     * @param {number} [parameters.bandwidthInMbps] The circuit bandwidth In Mbps.
     *
     * @param {object} [parameters.expressRouteCircuit] The ExpressRouteCircuit
     *
     * @param {string} [parameters.expressRouteCircuit.id] Corresponding Express
     * Route Circuit Id.
     *
     * @param {string} [parameters.serviceProviderProvisioningState] The
     * provisioning state of the circuit in the connectivity provider system.
     * Possible values are 'NotProvisioned', 'Provisioning', 'Provisioned'.
     * Possible values include: 'NotProvisioned', 'Provisioning', 'Provisioned',
     * 'Deprovisioning'
     *
     * @param {string} [parameters.serviceProviderNotes] Additional read only notes
     * set by the connectivity provider.
     *
     * @param {array} [parameters.peerings] The list of peerings.
     *
     * @param {string} [parameters.id] Resource ID.
     *
     * @param {string} [parameters.location] Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ExpressRouteCrossConnection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ExpressRouteCrossConnection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ExpressRouteCrossConnection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, crossConnectionName: string, parameters: models.ExpressRouteCrossConnection, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ExpressRouteCrossConnection>;
    createOrUpdate(resourceGroupName: string, crossConnectionName: string, parameters: models.ExpressRouteCrossConnection, callback: ServiceCallback<models.ExpressRouteCrossConnection>): void;
    createOrUpdate(resourceGroupName: string, crossConnectionName: string, parameters: models.ExpressRouteCrossConnection, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExpressRouteCrossConnection>): void;


    /**
     * Updates an express route cross connection tags.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} crossConnectionName The name of the cross connection.
     *
     * @param {object} crossConnectionParameters Parameters supplied to update
     * express route cross connection tags.
     *
     * @param {object} [crossConnectionParameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ExpressRouteCrossConnection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateTagsWithHttpOperationResponse(resourceGroupName: string, crossConnectionName: string, crossConnectionParameters: models.TagsObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ExpressRouteCrossConnection>>;

    /**
     * Updates an express route cross connection tags.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} crossConnectionName The name of the cross connection.
     *
     * @param {object} crossConnectionParameters Parameters supplied to update
     * express route cross connection tags.
     *
     * @param {object} [crossConnectionParameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ExpressRouteCrossConnection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ExpressRouteCrossConnection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ExpressRouteCrossConnection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updateTags(resourceGroupName: string, crossConnectionName: string, crossConnectionParameters: models.TagsObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ExpressRouteCrossConnection>;
    updateTags(resourceGroupName: string, crossConnectionName: string, crossConnectionParameters: models.TagsObject, callback: ServiceCallback<models.ExpressRouteCrossConnection>): void;
    updateTags(resourceGroupName: string, crossConnectionName: string, crossConnectionParameters: models.TagsObject, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExpressRouteCrossConnection>): void;


    /**
     * Gets the currently advertised ARP table associated with the express route
     * cross connection in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} crossConnectionName The name of the
     * ExpressRouteCrossConnection.
     *
     * @param {string} peeringName The name of the peering.
     *
     * @param {string} devicePath The path of the device
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ExpressRouteCircuitsArpTableListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listArpTableWithHttpOperationResponse(resourceGroupName: string, crossConnectionName: string, peeringName: string, devicePath: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ExpressRouteCircuitsArpTableListResult>>;

    /**
     * Gets the currently advertised ARP table associated with the express route
     * cross connection in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} crossConnectionName The name of the
     * ExpressRouteCrossConnection.
     *
     * @param {string} peeringName The name of the peering.
     *
     * @param {string} devicePath The path of the device
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ExpressRouteCircuitsArpTableListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ExpressRouteCircuitsArpTableListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ExpressRouteCircuitsArpTableListResult} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listArpTable(resourceGroupName: string, crossConnectionName: string, peeringName: string, devicePath: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ExpressRouteCircuitsArpTableListResult>;
    listArpTable(resourceGroupName: string, crossConnectionName: string, peeringName: string, devicePath: string, callback: ServiceCallback<models.ExpressRouteCircuitsArpTableListResult>): void;
    listArpTable(resourceGroupName: string, crossConnectionName: string, peeringName: string, devicePath: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExpressRouteCircuitsArpTableListResult>): void;


    /**
     * Gets the route table summary associated with the express route cross
     * connection in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} crossConnectionName The name of the
     * ExpressRouteCrossConnection.
     *
     * @param {string} peeringName The name of the peering.
     *
     * @param {string} devicePath The path of the device.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ExpressRouteCrossConnectionsRoutesTableSummaryListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listRoutesTableSummaryWithHttpOperationResponse(resourceGroupName: string, crossConnectionName: string, peeringName: string, devicePath: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ExpressRouteCrossConnectionsRoutesTableSummaryListResult>>;

    /**
     * Gets the route table summary associated with the express route cross
     * connection in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} crossConnectionName The name of the
     * ExpressRouteCrossConnection.
     *
     * @param {string} peeringName The name of the peering.
     *
     * @param {string} devicePath The path of the device.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ExpressRouteCrossConnectionsRoutesTableSummaryListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ExpressRouteCrossConnectionsRoutesTableSummaryListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link
     *                      ExpressRouteCrossConnectionsRoutesTableSummaryListResult}
     *                      for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listRoutesTableSummary(resourceGroupName: string, crossConnectionName: string, peeringName: string, devicePath: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ExpressRouteCrossConnectionsRoutesTableSummaryListResult>;
    listRoutesTableSummary(resourceGroupName: string, crossConnectionName: string, peeringName: string, devicePath: string, callback: ServiceCallback<models.ExpressRouteCrossConnectionsRoutesTableSummaryListResult>): void;
    listRoutesTableSummary(resourceGroupName: string, crossConnectionName: string, peeringName: string, devicePath: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExpressRouteCrossConnectionsRoutesTableSummaryListResult>): void;


    /**
     * Gets the currently advertised routes table associated with the express route
     * cross connection in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} crossConnectionName The name of the
     * ExpressRouteCrossConnection.
     *
     * @param {string} peeringName The name of the peering.
     *
     * @param {string} devicePath The path of the device.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ExpressRouteCircuitsRoutesTableListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listRoutesTableWithHttpOperationResponse(resourceGroupName: string, crossConnectionName: string, peeringName: string, devicePath: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ExpressRouteCircuitsRoutesTableListResult>>;

    /**
     * Gets the currently advertised routes table associated with the express route
     * cross connection in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} crossConnectionName The name of the
     * ExpressRouteCrossConnection.
     *
     * @param {string} peeringName The name of the peering.
     *
     * @param {string} devicePath The path of the device.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ExpressRouteCircuitsRoutesTableListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ExpressRouteCircuitsRoutesTableListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ExpressRouteCircuitsRoutesTableListResult}
     *                      for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listRoutesTable(resourceGroupName: string, crossConnectionName: string, peeringName: string, devicePath: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ExpressRouteCircuitsRoutesTableListResult>;
    listRoutesTable(resourceGroupName: string, crossConnectionName: string, peeringName: string, devicePath: string, callback: ServiceCallback<models.ExpressRouteCircuitsRoutesTableListResult>): void;
    listRoutesTable(resourceGroupName: string, crossConnectionName: string, peeringName: string, devicePath: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExpressRouteCircuitsRoutesTableListResult>): void;


    /**
     * Update the specified ExpressRouteCrossConnection.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} crossConnectionName The name of the
     * ExpressRouteCrossConnection.
     *
     * @param {object} parameters Parameters supplied to the update express route
     * crossConnection operation.
     *
     * @param {string} [parameters.peeringLocation] The peering location of the
     * ExpressRoute circuit.
     *
     * @param {number} [parameters.bandwidthInMbps] The circuit bandwidth In Mbps.
     *
     * @param {object} [parameters.expressRouteCircuit] The ExpressRouteCircuit
     *
     * @param {string} [parameters.expressRouteCircuit.id] Corresponding Express
     * Route Circuit Id.
     *
     * @param {string} [parameters.serviceProviderProvisioningState] The
     * provisioning state of the circuit in the connectivity provider system.
     * Possible values are 'NotProvisioned', 'Provisioning', 'Provisioned'.
     * Possible values include: 'NotProvisioned', 'Provisioning', 'Provisioned',
     * 'Deprovisioning'
     *
     * @param {string} [parameters.serviceProviderNotes] Additional read only notes
     * set by the connectivity provider.
     *
     * @param {array} [parameters.peerings] The list of peerings.
     *
     * @param {string} [parameters.id] Resource ID.
     *
     * @param {string} [parameters.location] Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ExpressRouteCrossConnection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, crossConnectionName: string, parameters: models.ExpressRouteCrossConnection, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ExpressRouteCrossConnection>>;

    /**
     * Update the specified ExpressRouteCrossConnection.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} crossConnectionName The name of the
     * ExpressRouteCrossConnection.
     *
     * @param {object} parameters Parameters supplied to the update express route
     * crossConnection operation.
     *
     * @param {string} [parameters.peeringLocation] The peering location of the
     * ExpressRoute circuit.
     *
     * @param {number} [parameters.bandwidthInMbps] The circuit bandwidth In Mbps.
     *
     * @param {object} [parameters.expressRouteCircuit] The ExpressRouteCircuit
     *
     * @param {string} [parameters.expressRouteCircuit.id] Corresponding Express
     * Route Circuit Id.
     *
     * @param {string} [parameters.serviceProviderProvisioningState] The
     * provisioning state of the circuit in the connectivity provider system.
     * Possible values are 'NotProvisioned', 'Provisioning', 'Provisioned'.
     * Possible values include: 'NotProvisioned', 'Provisioning', 'Provisioned',
     * 'Deprovisioning'
     *
     * @param {string} [parameters.serviceProviderNotes] Additional read only notes
     * set by the connectivity provider.
     *
     * @param {array} [parameters.peerings] The list of peerings.
     *
     * @param {string} [parameters.id] Resource ID.
     *
     * @param {string} [parameters.location] Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ExpressRouteCrossConnection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ExpressRouteCrossConnection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ExpressRouteCrossConnection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(resourceGroupName: string, crossConnectionName: string, parameters: models.ExpressRouteCrossConnection, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ExpressRouteCrossConnection>;
    beginCreateOrUpdate(resourceGroupName: string, crossConnectionName: string, parameters: models.ExpressRouteCrossConnection, callback: ServiceCallback<models.ExpressRouteCrossConnection>): void;
    beginCreateOrUpdate(resourceGroupName: string, crossConnectionName: string, parameters: models.ExpressRouteCrossConnection, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExpressRouteCrossConnection>): void;


    /**
     * Updates an express route cross connection tags.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} crossConnectionName The name of the cross connection.
     *
     * @param {object} crossConnectionParameters Parameters supplied to update
     * express route cross connection tags.
     *
     * @param {object} [crossConnectionParameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ExpressRouteCrossConnection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginUpdateTagsWithHttpOperationResponse(resourceGroupName: string, crossConnectionName: string, crossConnectionParameters: models.TagsObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ExpressRouteCrossConnection>>;

    /**
     * Updates an express route cross connection tags.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} crossConnectionName The name of the cross connection.
     *
     * @param {object} crossConnectionParameters Parameters supplied to update
     * express route cross connection tags.
     *
     * @param {object} [crossConnectionParameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ExpressRouteCrossConnection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ExpressRouteCrossConnection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ExpressRouteCrossConnection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginUpdateTags(resourceGroupName: string, crossConnectionName: string, crossConnectionParameters: models.TagsObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ExpressRouteCrossConnection>;
    beginUpdateTags(resourceGroupName: string, crossConnectionName: string, crossConnectionParameters: models.TagsObject, callback: ServiceCallback<models.ExpressRouteCrossConnection>): void;
    beginUpdateTags(resourceGroupName: string, crossConnectionName: string, crossConnectionParameters: models.TagsObject, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExpressRouteCrossConnection>): void;


    /**
     * Gets the currently advertised ARP table associated with the express route
     * cross connection in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} crossConnectionName The name of the
     * ExpressRouteCrossConnection.
     *
     * @param {string} peeringName The name of the peering.
     *
     * @param {string} devicePath The path of the device
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ExpressRouteCircuitsArpTableListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginListArpTableWithHttpOperationResponse(resourceGroupName: string, crossConnectionName: string, peeringName: string, devicePath: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ExpressRouteCircuitsArpTableListResult>>;

    /**
     * Gets the currently advertised ARP table associated with the express route
     * cross connection in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} crossConnectionName The name of the
     * ExpressRouteCrossConnection.
     *
     * @param {string} peeringName The name of the peering.
     *
     * @param {string} devicePath The path of the device
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ExpressRouteCircuitsArpTableListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ExpressRouteCircuitsArpTableListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ExpressRouteCircuitsArpTableListResult} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginListArpTable(resourceGroupName: string, crossConnectionName: string, peeringName: string, devicePath: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ExpressRouteCircuitsArpTableListResult>;
    beginListArpTable(resourceGroupName: string, crossConnectionName: string, peeringName: string, devicePath: string, callback: ServiceCallback<models.ExpressRouteCircuitsArpTableListResult>): void;
    beginListArpTable(resourceGroupName: string, crossConnectionName: string, peeringName: string, devicePath: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExpressRouteCircuitsArpTableListResult>): void;


    /**
     * Gets the route table summary associated with the express route cross
     * connection in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} crossConnectionName The name of the
     * ExpressRouteCrossConnection.
     *
     * @param {string} peeringName The name of the peering.
     *
     * @param {string} devicePath The path of the device.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ExpressRouteCrossConnectionsRoutesTableSummaryListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginListRoutesTableSummaryWithHttpOperationResponse(resourceGroupName: string, crossConnectionName: string, peeringName: string, devicePath: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ExpressRouteCrossConnectionsRoutesTableSummaryListResult>>;

    /**
     * Gets the route table summary associated with the express route cross
     * connection in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} crossConnectionName The name of the
     * ExpressRouteCrossConnection.
     *
     * @param {string} peeringName The name of the peering.
     *
     * @param {string} devicePath The path of the device.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ExpressRouteCrossConnectionsRoutesTableSummaryListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ExpressRouteCrossConnectionsRoutesTableSummaryListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link
     *                      ExpressRouteCrossConnectionsRoutesTableSummaryListResult}
     *                      for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginListRoutesTableSummary(resourceGroupName: string, crossConnectionName: string, peeringName: string, devicePath: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ExpressRouteCrossConnectionsRoutesTableSummaryListResult>;
    beginListRoutesTableSummary(resourceGroupName: string, crossConnectionName: string, peeringName: string, devicePath: string, callback: ServiceCallback<models.ExpressRouteCrossConnectionsRoutesTableSummaryListResult>): void;
    beginListRoutesTableSummary(resourceGroupName: string, crossConnectionName: string, peeringName: string, devicePath: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExpressRouteCrossConnectionsRoutesTableSummaryListResult>): void;


    /**
     * Gets the currently advertised routes table associated with the express route
     * cross connection in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} crossConnectionName The name of the
     * ExpressRouteCrossConnection.
     *
     * @param {string} peeringName The name of the peering.
     *
     * @param {string} devicePath The path of the device.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ExpressRouteCircuitsRoutesTableListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginListRoutesTableWithHttpOperationResponse(resourceGroupName: string, crossConnectionName: string, peeringName: string, devicePath: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ExpressRouteCircuitsRoutesTableListResult>>;

    /**
     * Gets the currently advertised routes table associated with the express route
     * cross connection in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} crossConnectionName The name of the
     * ExpressRouteCrossConnection.
     *
     * @param {string} peeringName The name of the peering.
     *
     * @param {string} devicePath The path of the device.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ExpressRouteCircuitsRoutesTableListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ExpressRouteCircuitsRoutesTableListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ExpressRouteCircuitsRoutesTableListResult}
     *                      for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginListRoutesTable(resourceGroupName: string, crossConnectionName: string, peeringName: string, devicePath: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ExpressRouteCircuitsRoutesTableListResult>;
    beginListRoutesTable(resourceGroupName: string, crossConnectionName: string, peeringName: string, devicePath: string, callback: ServiceCallback<models.ExpressRouteCircuitsRoutesTableListResult>): void;
    beginListRoutesTable(resourceGroupName: string, crossConnectionName: string, peeringName: string, devicePath: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExpressRouteCircuitsRoutesTableListResult>): void;


    /**
     * Retrieves all the ExpressRouteCrossConnections in a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ExpressRouteCrossConnectionListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ExpressRouteCrossConnectionListResult>>;

    /**
     * Retrieves all the ExpressRouteCrossConnections in a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ExpressRouteCrossConnectionListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ExpressRouteCrossConnectionListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ExpressRouteCrossConnectionListResult} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ExpressRouteCrossConnectionListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.ExpressRouteCrossConnectionListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExpressRouteCrossConnectionListResult>): void;


    /**
     * Retrieves all the ExpressRouteCrossConnections in a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ExpressRouteCrossConnectionListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ExpressRouteCrossConnectionListResult>>;

    /**
     * Retrieves all the ExpressRouteCrossConnections in a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ExpressRouteCrossConnectionListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ExpressRouteCrossConnectionListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ExpressRouteCrossConnectionListResult} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroupNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ExpressRouteCrossConnectionListResult>;
    listByResourceGroupNext(nextPageLink: string, callback: ServiceCallback<models.ExpressRouteCrossConnectionListResult>): void;
    listByResourceGroupNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExpressRouteCrossConnectionListResult>): void;
}

/**
 * @class
 * ExpressRouteCrossConnectionPeerings
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the NetworkManagementClient.
 */
export interface ExpressRouteCrossConnectionPeerings {


    /**
     * Gets all peerings in a specified ExpressRouteCrossConnection.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} crossConnectionName The name of the
     * ExpressRouteCrossConnection.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ExpressRouteCrossConnectionPeeringList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(resourceGroupName: string, crossConnectionName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ExpressRouteCrossConnectionPeeringList>>;

    /**
     * Gets all peerings in a specified ExpressRouteCrossConnection.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} crossConnectionName The name of the
     * ExpressRouteCrossConnection.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ExpressRouteCrossConnectionPeeringList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ExpressRouteCrossConnectionPeeringList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ExpressRouteCrossConnectionPeeringList} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(resourceGroupName: string, crossConnectionName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ExpressRouteCrossConnectionPeeringList>;
    list(resourceGroupName: string, crossConnectionName: string, callback: ServiceCallback<models.ExpressRouteCrossConnectionPeeringList>): void;
    list(resourceGroupName: string, crossConnectionName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExpressRouteCrossConnectionPeeringList>): void;


    /**
     * Deletes the specified peering from the ExpressRouteCrossConnection.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} crossConnectionName The name of the
     * ExpressRouteCrossConnection.
     *
     * @param {string} peeringName The name of the peering.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, crossConnectionName: string, peeringName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the specified peering from the ExpressRouteCrossConnection.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} crossConnectionName The name of the
     * ExpressRouteCrossConnection.
     *
     * @param {string} peeringName The name of the peering.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, crossConnectionName: string, peeringName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, crossConnectionName: string, peeringName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, crossConnectionName: string, peeringName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets the specified peering for the ExpressRouteCrossConnection.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} crossConnectionName The name of the
     * ExpressRouteCrossConnection.
     *
     * @param {string} peeringName The name of the peering.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ExpressRouteCrossConnectionPeering>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, crossConnectionName: string, peeringName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ExpressRouteCrossConnectionPeering>>;

    /**
     * Gets the specified peering for the ExpressRouteCrossConnection.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} crossConnectionName The name of the
     * ExpressRouteCrossConnection.
     *
     * @param {string} peeringName The name of the peering.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ExpressRouteCrossConnectionPeering} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ExpressRouteCrossConnectionPeering} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ExpressRouteCrossConnectionPeering} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, crossConnectionName: string, peeringName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ExpressRouteCrossConnectionPeering>;
    get(resourceGroupName: string, crossConnectionName: string, peeringName: string, callback: ServiceCallback<models.ExpressRouteCrossConnectionPeering>): void;
    get(resourceGroupName: string, crossConnectionName: string, peeringName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExpressRouteCrossConnectionPeering>): void;


    /**
     * Creates or updates a peering in the specified ExpressRouteCrossConnection.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} crossConnectionName The name of the
     * ExpressRouteCrossConnection.
     *
     * @param {string} peeringName The name of the peering.
     *
     * @param {object} peeringParameters Parameters supplied to the create or
     * update ExpressRouteCrossConnection peering operation.
     *
     * @param {string} [peeringParameters.peeringType] The peering type. Possible
     * values include: 'AzurePublicPeering', 'AzurePrivatePeering',
     * 'MicrosoftPeering'
     *
     * @param {string} [peeringParameters.state] The peering state. Possible values
     * include: 'Disabled', 'Enabled'
     *
     * @param {number} [peeringParameters.peerASN] The peer ASN.
     *
     * @param {string} [peeringParameters.primaryPeerAddressPrefix] The primary
     * address prefix.
     *
     * @param {string} [peeringParameters.secondaryPeerAddressPrefix] The secondary
     * address prefix.
     *
     * @param {string} [peeringParameters.sharedKey] The shared key.
     *
     * @param {number} [peeringParameters.vlanId] The VLAN ID.
     *
     * @param {object} [peeringParameters.microsoftPeeringConfig] The Microsoft
     * peering configuration.
     *
     * @param {string} [peeringParameters.gatewayManagerEtag] The GatewayManager
     * Etag.
     *
     * @param {string} [peeringParameters.lastModifiedBy] Gets whether the provider
     * or the customer last modified the peering.
     *
     * @param {object} [peeringParameters.ipv6PeeringConfig] The IPv6 peering
     * configuration.
     *
     * @param {string}
     * [peeringParameters.ipv6PeeringConfig.primaryPeerAddressPrefix] The primary
     * address prefix.
     *
     * @param {string}
     * [peeringParameters.ipv6PeeringConfig.secondaryPeerAddressPrefix] The
     * secondary address prefix.
     *
     * @param {object} [peeringParameters.ipv6PeeringConfig.microsoftPeeringConfig]
     * The Microsoft peering configuration.
     *
     * @param {array}
     * [peeringParameters.ipv6PeeringConfig.microsoftPeeringConfig.advertisedPublicPrefixes]
     * The reference of AdvertisedPublicPrefixes.
     *
     * @param {array}
     * [peeringParameters.ipv6PeeringConfig.microsoftPeeringConfig.advertisedCommunities]
     * The communities of bgp peering. Spepcified for microsoft peering
     *
     * @param {string}
     * [peeringParameters.ipv6PeeringConfig.microsoftPeeringConfig.advertisedPublicPrefixesState]
     * AdvertisedPublicPrefixState of the Peering resource. Possible values are
     * 'NotConfigured', 'Configuring', 'Configured', and 'ValidationNeeded'.
     * Possible values include: 'NotConfigured', 'Configuring', 'Configured',
     * 'ValidationNeeded'
     *
     * @param {number}
     * [peeringParameters.ipv6PeeringConfig.microsoftPeeringConfig.legacyMode] The
     * legacy mode of the peering.
     *
     * @param {number}
     * [peeringParameters.ipv6PeeringConfig.microsoftPeeringConfig.customerASN] The
     * CustomerASN of the peering.
     *
     * @param {string}
     * [peeringParameters.ipv6PeeringConfig.microsoftPeeringConfig.routingRegistryName]
     * The RoutingRegistryName of the configuration.
     *
     * @param {object} [peeringParameters.ipv6PeeringConfig.routeFilter] The
     * reference of the RouteFilter resource.
     *
     * @param {array} [peeringParameters.ipv6PeeringConfig.routeFilter.rules]
     * Collection of RouteFilterRules contained within a route filter.
     *
     * @param {array} [peeringParameters.ipv6PeeringConfig.routeFilter.peerings] A
     * collection of references to express route circuit peerings.
     *
     * @param {string} [peeringParameters.ipv6PeeringConfig.routeFilter.id]
     * Resource ID.
     *
     * @param {string} [peeringParameters.ipv6PeeringConfig.routeFilter.location]
     * Resource location.
     *
     * @param {object} [peeringParameters.ipv6PeeringConfig.routeFilter.tags]
     * Resource tags.
     *
     * @param {string} [peeringParameters.ipv6PeeringConfig.state] The state of
     * peering. Possible values are: 'Disabled' and 'Enabled'. Possible values
     * include: 'Disabled', 'Enabled'
     *
     * @param {string} [peeringParameters.name] Gets name of the resource that is
     * unique within a resource group. This name can be used to access the
     * resource.
     *
     * @param {string} [peeringParameters.id] Resource ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ExpressRouteCrossConnectionPeering>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, crossConnectionName: string, peeringName: string, peeringParameters: models.ExpressRouteCrossConnectionPeering, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ExpressRouteCrossConnectionPeering>>;

    /**
     * Creates or updates a peering in the specified ExpressRouteCrossConnection.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} crossConnectionName The name of the
     * ExpressRouteCrossConnection.
     *
     * @param {string} peeringName The name of the peering.
     *
     * @param {object} peeringParameters Parameters supplied to the create or
     * update ExpressRouteCrossConnection peering operation.
     *
     * @param {string} [peeringParameters.peeringType] The peering type. Possible
     * values include: 'AzurePublicPeering', 'AzurePrivatePeering',
     * 'MicrosoftPeering'
     *
     * @param {string} [peeringParameters.state] The peering state. Possible values
     * include: 'Disabled', 'Enabled'
     *
     * @param {number} [peeringParameters.peerASN] The peer ASN.
     *
     * @param {string} [peeringParameters.primaryPeerAddressPrefix] The primary
     * address prefix.
     *
     * @param {string} [peeringParameters.secondaryPeerAddressPrefix] The secondary
     * address prefix.
     *
     * @param {string} [peeringParameters.sharedKey] The shared key.
     *
     * @param {number} [peeringParameters.vlanId] The VLAN ID.
     *
     * @param {object} [peeringParameters.microsoftPeeringConfig] The Microsoft
     * peering configuration.
     *
     * @param {string} [peeringParameters.gatewayManagerEtag] The GatewayManager
     * Etag.
     *
     * @param {string} [peeringParameters.lastModifiedBy] Gets whether the provider
     * or the customer last modified the peering.
     *
     * @param {object} [peeringParameters.ipv6PeeringConfig] The IPv6 peering
     * configuration.
     *
     * @param {string}
     * [peeringParameters.ipv6PeeringConfig.primaryPeerAddressPrefix] The primary
     * address prefix.
     *
     * @param {string}
     * [peeringParameters.ipv6PeeringConfig.secondaryPeerAddressPrefix] The
     * secondary address prefix.
     *
     * @param {object} [peeringParameters.ipv6PeeringConfig.microsoftPeeringConfig]
     * The Microsoft peering configuration.
     *
     * @param {array}
     * [peeringParameters.ipv6PeeringConfig.microsoftPeeringConfig.advertisedPublicPrefixes]
     * The reference of AdvertisedPublicPrefixes.
     *
     * @param {array}
     * [peeringParameters.ipv6PeeringConfig.microsoftPeeringConfig.advertisedCommunities]
     * The communities of bgp peering. Spepcified for microsoft peering
     *
     * @param {string}
     * [peeringParameters.ipv6PeeringConfig.microsoftPeeringConfig.advertisedPublicPrefixesState]
     * AdvertisedPublicPrefixState of the Peering resource. Possible values are
     * 'NotConfigured', 'Configuring', 'Configured', and 'ValidationNeeded'.
     * Possible values include: 'NotConfigured', 'Configuring', 'Configured',
     * 'ValidationNeeded'
     *
     * @param {number}
     * [peeringParameters.ipv6PeeringConfig.microsoftPeeringConfig.legacyMode] The
     * legacy mode of the peering.
     *
     * @param {number}
     * [peeringParameters.ipv6PeeringConfig.microsoftPeeringConfig.customerASN] The
     * CustomerASN of the peering.
     *
     * @param {string}
     * [peeringParameters.ipv6PeeringConfig.microsoftPeeringConfig.routingRegistryName]
     * The RoutingRegistryName of the configuration.
     *
     * @param {object} [peeringParameters.ipv6PeeringConfig.routeFilter] The
     * reference of the RouteFilter resource.
     *
     * @param {array} [peeringParameters.ipv6PeeringConfig.routeFilter.rules]
     * Collection of RouteFilterRules contained within a route filter.
     *
     * @param {array} [peeringParameters.ipv6PeeringConfig.routeFilter.peerings] A
     * collection of references to express route circuit peerings.
     *
     * @param {string} [peeringParameters.ipv6PeeringConfig.routeFilter.id]
     * Resource ID.
     *
     * @param {string} [peeringParameters.ipv6PeeringConfig.routeFilter.location]
     * Resource location.
     *
     * @param {object} [peeringParameters.ipv6PeeringConfig.routeFilter.tags]
     * Resource tags.
     *
     * @param {string} [peeringParameters.ipv6PeeringConfig.state] The state of
     * peering. Possible values are: 'Disabled' and 'Enabled'. Possible values
     * include: 'Disabled', 'Enabled'
     *
     * @param {string} [peeringParameters.name] Gets name of the resource that is
     * unique within a resource group. This name can be used to access the
     * resource.
     *
     * @param {string} [peeringParameters.id] Resource ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ExpressRouteCrossConnectionPeering} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ExpressRouteCrossConnectionPeering} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ExpressRouteCrossConnectionPeering} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, crossConnectionName: string, peeringName: string, peeringParameters: models.ExpressRouteCrossConnectionPeering, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ExpressRouteCrossConnectionPeering>;
    createOrUpdate(resourceGroupName: string, crossConnectionName: string, peeringName: string, peeringParameters: models.ExpressRouteCrossConnectionPeering, callback: ServiceCallback<models.ExpressRouteCrossConnectionPeering>): void;
    createOrUpdate(resourceGroupName: string, crossConnectionName: string, peeringName: string, peeringParameters: models.ExpressRouteCrossConnectionPeering, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExpressRouteCrossConnectionPeering>): void;


    /**
     * Deletes the specified peering from the ExpressRouteCrossConnection.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} crossConnectionName The name of the
     * ExpressRouteCrossConnection.
     *
     * @param {string} peeringName The name of the peering.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, crossConnectionName: string, peeringName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the specified peering from the ExpressRouteCrossConnection.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} crossConnectionName The name of the
     * ExpressRouteCrossConnection.
     *
     * @param {string} peeringName The name of the peering.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(resourceGroupName: string, crossConnectionName: string, peeringName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(resourceGroupName: string, crossConnectionName: string, peeringName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, crossConnectionName: string, peeringName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Creates or updates a peering in the specified ExpressRouteCrossConnection.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} crossConnectionName The name of the
     * ExpressRouteCrossConnection.
     *
     * @param {string} peeringName The name of the peering.
     *
     * @param {object} peeringParameters Parameters supplied to the create or
     * update ExpressRouteCrossConnection peering operation.
     *
     * @param {string} [peeringParameters.peeringType] The peering type. Possible
     * values include: 'AzurePublicPeering', 'AzurePrivatePeering',
     * 'MicrosoftPeering'
     *
     * @param {string} [peeringParameters.state] The peering state. Possible values
     * include: 'Disabled', 'Enabled'
     *
     * @param {number} [peeringParameters.peerASN] The peer ASN.
     *
     * @param {string} [peeringParameters.primaryPeerAddressPrefix] The primary
     * address prefix.
     *
     * @param {string} [peeringParameters.secondaryPeerAddressPrefix] The secondary
     * address prefix.
     *
     * @param {string} [peeringParameters.sharedKey] The shared key.
     *
     * @param {number} [peeringParameters.vlanId] The VLAN ID.
     *
     * @param {object} [peeringParameters.microsoftPeeringConfig] The Microsoft
     * peering configuration.
     *
     * @param {string} [peeringParameters.gatewayManagerEtag] The GatewayManager
     * Etag.
     *
     * @param {string} [peeringParameters.lastModifiedBy] Gets whether the provider
     * or the customer last modified the peering.
     *
     * @param {object} [peeringParameters.ipv6PeeringConfig] The IPv6 peering
     * configuration.
     *
     * @param {string}
     * [peeringParameters.ipv6PeeringConfig.primaryPeerAddressPrefix] The primary
     * address prefix.
     *
     * @param {string}
     * [peeringParameters.ipv6PeeringConfig.secondaryPeerAddressPrefix] The
     * secondary address prefix.
     *
     * @param {object} [peeringParameters.ipv6PeeringConfig.microsoftPeeringConfig]
     * The Microsoft peering configuration.
     *
     * @param {array}
     * [peeringParameters.ipv6PeeringConfig.microsoftPeeringConfig.advertisedPublicPrefixes]
     * The reference of AdvertisedPublicPrefixes.
     *
     * @param {array}
     * [peeringParameters.ipv6PeeringConfig.microsoftPeeringConfig.advertisedCommunities]
     * The communities of bgp peering. Spepcified for microsoft peering
     *
     * @param {string}
     * [peeringParameters.ipv6PeeringConfig.microsoftPeeringConfig.advertisedPublicPrefixesState]
     * AdvertisedPublicPrefixState of the Peering resource. Possible values are
     * 'NotConfigured', 'Configuring', 'Configured', and 'ValidationNeeded'.
     * Possible values include: 'NotConfigured', 'Configuring', 'Configured',
     * 'ValidationNeeded'
     *
     * @param {number}
     * [peeringParameters.ipv6PeeringConfig.microsoftPeeringConfig.legacyMode] The
     * legacy mode of the peering.
     *
     * @param {number}
     * [peeringParameters.ipv6PeeringConfig.microsoftPeeringConfig.customerASN] The
     * CustomerASN of the peering.
     *
     * @param {string}
     * [peeringParameters.ipv6PeeringConfig.microsoftPeeringConfig.routingRegistryName]
     * The RoutingRegistryName of the configuration.
     *
     * @param {object} [peeringParameters.ipv6PeeringConfig.routeFilter] The
     * reference of the RouteFilter resource.
     *
     * @param {array} [peeringParameters.ipv6PeeringConfig.routeFilter.rules]
     * Collection of RouteFilterRules contained within a route filter.
     *
     * @param {array} [peeringParameters.ipv6PeeringConfig.routeFilter.peerings] A
     * collection of references to express route circuit peerings.
     *
     * @param {string} [peeringParameters.ipv6PeeringConfig.routeFilter.id]
     * Resource ID.
     *
     * @param {string} [peeringParameters.ipv6PeeringConfig.routeFilter.location]
     * Resource location.
     *
     * @param {object} [peeringParameters.ipv6PeeringConfig.routeFilter.tags]
     * Resource tags.
     *
     * @param {string} [peeringParameters.ipv6PeeringConfig.state] The state of
     * peering. Possible values are: 'Disabled' and 'Enabled'. Possible values
     * include: 'Disabled', 'Enabled'
     *
     * @param {string} [peeringParameters.name] Gets name of the resource that is
     * unique within a resource group. This name can be used to access the
     * resource.
     *
     * @param {string} [peeringParameters.id] Resource ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ExpressRouteCrossConnectionPeering>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, crossConnectionName: string, peeringName: string, peeringParameters: models.ExpressRouteCrossConnectionPeering, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ExpressRouteCrossConnectionPeering>>;

    /**
     * Creates or updates a peering in the specified ExpressRouteCrossConnection.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} crossConnectionName The name of the
     * ExpressRouteCrossConnection.
     *
     * @param {string} peeringName The name of the peering.
     *
     * @param {object} peeringParameters Parameters supplied to the create or
     * update ExpressRouteCrossConnection peering operation.
     *
     * @param {string} [peeringParameters.peeringType] The peering type. Possible
     * values include: 'AzurePublicPeering', 'AzurePrivatePeering',
     * 'MicrosoftPeering'
     *
     * @param {string} [peeringParameters.state] The peering state. Possible values
     * include: 'Disabled', 'Enabled'
     *
     * @param {number} [peeringParameters.peerASN] The peer ASN.
     *
     * @param {string} [peeringParameters.primaryPeerAddressPrefix] The primary
     * address prefix.
     *
     * @param {string} [peeringParameters.secondaryPeerAddressPrefix] The secondary
     * address prefix.
     *
     * @param {string} [peeringParameters.sharedKey] The shared key.
     *
     * @param {number} [peeringParameters.vlanId] The VLAN ID.
     *
     * @param {object} [peeringParameters.microsoftPeeringConfig] The Microsoft
     * peering configuration.
     *
     * @param {string} [peeringParameters.gatewayManagerEtag] The GatewayManager
     * Etag.
     *
     * @param {string} [peeringParameters.lastModifiedBy] Gets whether the provider
     * or the customer last modified the peering.
     *
     * @param {object} [peeringParameters.ipv6PeeringConfig] The IPv6 peering
     * configuration.
     *
     * @param {string}
     * [peeringParameters.ipv6PeeringConfig.primaryPeerAddressPrefix] The primary
     * address prefix.
     *
     * @param {string}
     * [peeringParameters.ipv6PeeringConfig.secondaryPeerAddressPrefix] The
     * secondary address prefix.
     *
     * @param {object} [peeringParameters.ipv6PeeringConfig.microsoftPeeringConfig]
     * The Microsoft peering configuration.
     *
     * @param {array}
     * [peeringParameters.ipv6PeeringConfig.microsoftPeeringConfig.advertisedPublicPrefixes]
     * The reference of AdvertisedPublicPrefixes.
     *
     * @param {array}
     * [peeringParameters.ipv6PeeringConfig.microsoftPeeringConfig.advertisedCommunities]
     * The communities of bgp peering. Spepcified for microsoft peering
     *
     * @param {string}
     * [peeringParameters.ipv6PeeringConfig.microsoftPeeringConfig.advertisedPublicPrefixesState]
     * AdvertisedPublicPrefixState of the Peering resource. Possible values are
     * 'NotConfigured', 'Configuring', 'Configured', and 'ValidationNeeded'.
     * Possible values include: 'NotConfigured', 'Configuring', 'Configured',
     * 'ValidationNeeded'
     *
     * @param {number}
     * [peeringParameters.ipv6PeeringConfig.microsoftPeeringConfig.legacyMode] The
     * legacy mode of the peering.
     *
     * @param {number}
     * [peeringParameters.ipv6PeeringConfig.microsoftPeeringConfig.customerASN] The
     * CustomerASN of the peering.
     *
     * @param {string}
     * [peeringParameters.ipv6PeeringConfig.microsoftPeeringConfig.routingRegistryName]
     * The RoutingRegistryName of the configuration.
     *
     * @param {object} [peeringParameters.ipv6PeeringConfig.routeFilter] The
     * reference of the RouteFilter resource.
     *
     * @param {array} [peeringParameters.ipv6PeeringConfig.routeFilter.rules]
     * Collection of RouteFilterRules contained within a route filter.
     *
     * @param {array} [peeringParameters.ipv6PeeringConfig.routeFilter.peerings] A
     * collection of references to express route circuit peerings.
     *
     * @param {string} [peeringParameters.ipv6PeeringConfig.routeFilter.id]
     * Resource ID.
     *
     * @param {string} [peeringParameters.ipv6PeeringConfig.routeFilter.location]
     * Resource location.
     *
     * @param {object} [peeringParameters.ipv6PeeringConfig.routeFilter.tags]
     * Resource tags.
     *
     * @param {string} [peeringParameters.ipv6PeeringConfig.state] The state of
     * peering. Possible values are: 'Disabled' and 'Enabled'. Possible values
     * include: 'Disabled', 'Enabled'
     *
     * @param {string} [peeringParameters.name] Gets name of the resource that is
     * unique within a resource group. This name can be used to access the
     * resource.
     *
     * @param {string} [peeringParameters.id] Resource ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ExpressRouteCrossConnectionPeering} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ExpressRouteCrossConnectionPeering} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ExpressRouteCrossConnectionPeering} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(resourceGroupName: string, crossConnectionName: string, peeringName: string, peeringParameters: models.ExpressRouteCrossConnectionPeering, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ExpressRouteCrossConnectionPeering>;
    beginCreateOrUpdate(resourceGroupName: string, crossConnectionName: string, peeringName: string, peeringParameters: models.ExpressRouteCrossConnectionPeering, callback: ServiceCallback<models.ExpressRouteCrossConnectionPeering>): void;
    beginCreateOrUpdate(resourceGroupName: string, crossConnectionName: string, peeringName: string, peeringParameters: models.ExpressRouteCrossConnectionPeering, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExpressRouteCrossConnectionPeering>): void;


    /**
     * Gets all peerings in a specified ExpressRouteCrossConnection.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ExpressRouteCrossConnectionPeeringList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ExpressRouteCrossConnectionPeeringList>>;

    /**
     * Gets all peerings in a specified ExpressRouteCrossConnection.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ExpressRouteCrossConnectionPeeringList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ExpressRouteCrossConnectionPeeringList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ExpressRouteCrossConnectionPeeringList} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ExpressRouteCrossConnectionPeeringList>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.ExpressRouteCrossConnectionPeeringList>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExpressRouteCrossConnectionPeeringList>): void;
}

/**
 * @class
 * LoadBalancers
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the NetworkManagementClient.
 */
export interface LoadBalancers {


    /**
     * Deletes the specified load balancer.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} loadBalancerName The name of the load balancer.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, loadBalancerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the specified load balancer.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} loadBalancerName The name of the load balancer.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, loadBalancerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, loadBalancerName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, loadBalancerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets the specified load balancer.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} loadBalancerName The name of the load balancer.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Expands referenced resources.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<LoadBalancer>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, loadBalancerName: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.LoadBalancer>>;

    /**
     * Gets the specified load balancer.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} loadBalancerName The name of the load balancer.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Expands referenced resources.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {LoadBalancer} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {LoadBalancer} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link LoadBalancer} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, loadBalancerName: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.LoadBalancer>;
    get(resourceGroupName: string, loadBalancerName: string, callback: ServiceCallback<models.LoadBalancer>): void;
    get(resourceGroupName: string, loadBalancerName: string, options: { expand? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.LoadBalancer>): void;


    /**
     * Creates or updates a load balancer.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} loadBalancerName The name of the load balancer.
     *
     * @param {object} parameters Parameters supplied to the create or update load
     * balancer operation.
     *
     * @param {object} [parameters.sku] The load balancer SKU.
     *
     * @param {string} [parameters.sku.name] Name of a load balancer SKU. Possible
     * values include: 'Basic', 'Standard'
     *
     * @param {array} [parameters.frontendIPConfigurations] Object representing the
     * frontend IPs to be used for the load balancer
     *
     * @param {array} [parameters.backendAddressPools] Collection of backend
     * address pools used by a load balancer
     *
     * @param {array} [parameters.loadBalancingRules] Object collection
     * representing the load balancing rules Gets the provisioning
     *
     * @param {array} [parameters.probes] Collection of probe objects used in the
     * load balancer
     *
     * @param {array} [parameters.inboundNatRules] Collection of inbound NAT Rules
     * used by a load balancer. Defining inbound NAT rules on your load balancer is
     * mutually exclusive with defining an inbound NAT pool. Inbound NAT pools are
     * referenced from virtual machine scale sets. NICs that are associated with
     * individual virtual machines cannot reference an Inbound NAT pool. They have
     * to reference individual inbound NAT rules.
     *
     * @param {array} [parameters.inboundNatPools] Defines an external port range
     * for inbound NAT to a single backend port on NICs associated with a load
     * balancer. Inbound NAT rules are created automatically for each NIC
     * associated with the Load Balancer using an external port from this range.
     * Defining an Inbound NAT pool on your Load Balancer is mutually exclusive
     * with defining inbound Nat rules. Inbound NAT pools are referenced from
     * virtual machine scale sets. NICs that are associated with individual virtual
     * machines cannot reference an inbound NAT pool. They have to reference
     * individual inbound NAT rules.
     *
     * @param {array} [parameters.outboundNatRules] The outbound NAT rules.
     *
     * @param {string} [parameters.resourceGuid] The resource GUID property of the
     * load balancer resource.
     *
     * @param {string} [parameters.provisioningState] Gets the provisioning state
     * of the PublicIP resource. Possible values are: 'Updating', 'Deleting', and
     * 'Failed'.
     *
     * @param {string} [parameters.etag] A unique read-only string that changes
     * whenever the resource is updated.
     *
     * @param {string} [parameters.id] Resource ID.
     *
     * @param {string} [parameters.location] Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<LoadBalancer>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, loadBalancerName: string, parameters: models.LoadBalancer, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.LoadBalancer>>;

    /**
     * Creates or updates a load balancer.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} loadBalancerName The name of the load balancer.
     *
     * @param {object} parameters Parameters supplied to the create or update load
     * balancer operation.
     *
     * @param {object} [parameters.sku] The load balancer SKU.
     *
     * @param {string} [parameters.sku.name] Name of a load balancer SKU. Possible
     * values include: 'Basic', 'Standard'
     *
     * @param {array} [parameters.frontendIPConfigurations] Object representing the
     * frontend IPs to be used for the load balancer
     *
     * @param {array} [parameters.backendAddressPools] Collection of backend
     * address pools used by a load balancer
     *
     * @param {array} [parameters.loadBalancingRules] Object collection
     * representing the load balancing rules Gets the provisioning
     *
     * @param {array} [parameters.probes] Collection of probe objects used in the
     * load balancer
     *
     * @param {array} [parameters.inboundNatRules] Collection of inbound NAT Rules
     * used by a load balancer. Defining inbound NAT rules on your load balancer is
     * mutually exclusive with defining an inbound NAT pool. Inbound NAT pools are
     * referenced from virtual machine scale sets. NICs that are associated with
     * individual virtual machines cannot reference an Inbound NAT pool. They have
     * to reference individual inbound NAT rules.
     *
     * @param {array} [parameters.inboundNatPools] Defines an external port range
     * for inbound NAT to a single backend port on NICs associated with a load
     * balancer. Inbound NAT rules are created automatically for each NIC
     * associated with the Load Balancer using an external port from this range.
     * Defining an Inbound NAT pool on your Load Balancer is mutually exclusive
     * with defining inbound Nat rules. Inbound NAT pools are referenced from
     * virtual machine scale sets. NICs that are associated with individual virtual
     * machines cannot reference an inbound NAT pool. They have to reference
     * individual inbound NAT rules.
     *
     * @param {array} [parameters.outboundNatRules] The outbound NAT rules.
     *
     * @param {string} [parameters.resourceGuid] The resource GUID property of the
     * load balancer resource.
     *
     * @param {string} [parameters.provisioningState] Gets the provisioning state
     * of the PublicIP resource. Possible values are: 'Updating', 'Deleting', and
     * 'Failed'.
     *
     * @param {string} [parameters.etag] A unique read-only string that changes
     * whenever the resource is updated.
     *
     * @param {string} [parameters.id] Resource ID.
     *
     * @param {string} [parameters.location] Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {LoadBalancer} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {LoadBalancer} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link LoadBalancer} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, loadBalancerName: string, parameters: models.LoadBalancer, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.LoadBalancer>;
    createOrUpdate(resourceGroupName: string, loadBalancerName: string, parameters: models.LoadBalancer, callback: ServiceCallback<models.LoadBalancer>): void;
    createOrUpdate(resourceGroupName: string, loadBalancerName: string, parameters: models.LoadBalancer, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.LoadBalancer>): void;


    /**
     * Updates a load balancer tags.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} loadBalancerName The name of the load balancer.
     *
     * @param {object} parameters Parameters supplied to update load balancer tags.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<LoadBalancer>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateTagsWithHttpOperationResponse(resourceGroupName: string, loadBalancerName: string, parameters: models.TagsObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.LoadBalancer>>;

    /**
     * Updates a load balancer tags.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} loadBalancerName The name of the load balancer.
     *
     * @param {object} parameters Parameters supplied to update load balancer tags.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {LoadBalancer} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {LoadBalancer} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link LoadBalancer} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updateTags(resourceGroupName: string, loadBalancerName: string, parameters: models.TagsObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.LoadBalancer>;
    updateTags(resourceGroupName: string, loadBalancerName: string, parameters: models.TagsObject, callback: ServiceCallback<models.LoadBalancer>): void;
    updateTags(resourceGroupName: string, loadBalancerName: string, parameters: models.TagsObject, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.LoadBalancer>): void;


    /**
     * Gets all the load balancers in a subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<LoadBalancerListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listAllWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.LoadBalancerListResult>>;

    /**
     * Gets all the load balancers in a subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {LoadBalancerListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {LoadBalancerListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link LoadBalancerListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listAll(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.LoadBalancerListResult>;
    listAll(callback: ServiceCallback<models.LoadBalancerListResult>): void;
    listAll(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.LoadBalancerListResult>): void;


    /**
     * Gets all the load balancers in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<LoadBalancerListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.LoadBalancerListResult>>;

    /**
     * Gets all the load balancers in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {LoadBalancerListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {LoadBalancerListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link LoadBalancerListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.LoadBalancerListResult>;
    list(resourceGroupName: string, callback: ServiceCallback<models.LoadBalancerListResult>): void;
    list(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.LoadBalancerListResult>): void;


    /**
     * Deletes the specified load balancer.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} loadBalancerName The name of the load balancer.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, loadBalancerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the specified load balancer.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} loadBalancerName The name of the load balancer.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(resourceGroupName: string, loadBalancerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(resourceGroupName: string, loadBalancerName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, loadBalancerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Creates or updates a load balancer.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} loadBalancerName The name of the load balancer.
     *
     * @param {object} parameters Parameters supplied to the create or update load
     * balancer operation.
     *
     * @param {object} [parameters.sku] The load balancer SKU.
     *
     * @param {string} [parameters.sku.name] Name of a load balancer SKU. Possible
     * values include: 'Basic', 'Standard'
     *
     * @param {array} [parameters.frontendIPConfigurations] Object representing the
     * frontend IPs to be used for the load balancer
     *
     * @param {array} [parameters.backendAddressPools] Collection of backend
     * address pools used by a load balancer
     *
     * @param {array} [parameters.loadBalancingRules] Object collection
     * representing the load balancing rules Gets the provisioning
     *
     * @param {array} [parameters.probes] Collection of probe objects used in the
     * load balancer
     *
     * @param {array} [parameters.inboundNatRules] Collection of inbound NAT Rules
     * used by a load balancer. Defining inbound NAT rules on your load balancer is
     * mutually exclusive with defining an inbound NAT pool. Inbound NAT pools are
     * referenced from virtual machine scale sets. NICs that are associated with
     * individual virtual machines cannot reference an Inbound NAT pool. They have
     * to reference individual inbound NAT rules.
     *
     * @param {array} [parameters.inboundNatPools] Defines an external port range
     * for inbound NAT to a single backend port on NICs associated with a load
     * balancer. Inbound NAT rules are created automatically for each NIC
     * associated with the Load Balancer using an external port from this range.
     * Defining an Inbound NAT pool on your Load Balancer is mutually exclusive
     * with defining inbound Nat rules. Inbound NAT pools are referenced from
     * virtual machine scale sets. NICs that are associated with individual virtual
     * machines cannot reference an inbound NAT pool. They have to reference
     * individual inbound NAT rules.
     *
     * @param {array} [parameters.outboundNatRules] The outbound NAT rules.
     *
     * @param {string} [parameters.resourceGuid] The resource GUID property of the
     * load balancer resource.
     *
     * @param {string} [parameters.provisioningState] Gets the provisioning state
     * of the PublicIP resource. Possible values are: 'Updating', 'Deleting', and
     * 'Failed'.
     *
     * @param {string} [parameters.etag] A unique read-only string that changes
     * whenever the resource is updated.
     *
     * @param {string} [parameters.id] Resource ID.
     *
     * @param {string} [parameters.location] Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<LoadBalancer>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, loadBalancerName: string, parameters: models.LoadBalancer, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.LoadBalancer>>;

    /**
     * Creates or updates a load balancer.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} loadBalancerName The name of the load balancer.
     *
     * @param {object} parameters Parameters supplied to the create or update load
     * balancer operation.
     *
     * @param {object} [parameters.sku] The load balancer SKU.
     *
     * @param {string} [parameters.sku.name] Name of a load balancer SKU. Possible
     * values include: 'Basic', 'Standard'
     *
     * @param {array} [parameters.frontendIPConfigurations] Object representing the
     * frontend IPs to be used for the load balancer
     *
     * @param {array} [parameters.backendAddressPools] Collection of backend
     * address pools used by a load balancer
     *
     * @param {array} [parameters.loadBalancingRules] Object collection
     * representing the load balancing rules Gets the provisioning
     *
     * @param {array} [parameters.probes] Collection of probe objects used in the
     * load balancer
     *
     * @param {array} [parameters.inboundNatRules] Collection of inbound NAT Rules
     * used by a load balancer. Defining inbound NAT rules on your load balancer is
     * mutually exclusive with defining an inbound NAT pool. Inbound NAT pools are
     * referenced from virtual machine scale sets. NICs that are associated with
     * individual virtual machines cannot reference an Inbound NAT pool. They have
     * to reference individual inbound NAT rules.
     *
     * @param {array} [parameters.inboundNatPools] Defines an external port range
     * for inbound NAT to a single backend port on NICs associated with a load
     * balancer. Inbound NAT rules are created automatically for each NIC
     * associated with the Load Balancer using an external port from this range.
     * Defining an Inbound NAT pool on your Load Balancer is mutually exclusive
     * with defining inbound Nat rules. Inbound NAT pools are referenced from
     * virtual machine scale sets. NICs that are associated with individual virtual
     * machines cannot reference an inbound NAT pool. They have to reference
     * individual inbound NAT rules.
     *
     * @param {array} [parameters.outboundNatRules] The outbound NAT rules.
     *
     * @param {string} [parameters.resourceGuid] The resource GUID property of the
     * load balancer resource.
     *
     * @param {string} [parameters.provisioningState] Gets the provisioning state
     * of the PublicIP resource. Possible values are: 'Updating', 'Deleting', and
     * 'Failed'.
     *
     * @param {string} [parameters.etag] A unique read-only string that changes
     * whenever the resource is updated.
     *
     * @param {string} [parameters.id] Resource ID.
     *
     * @param {string} [parameters.location] Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {LoadBalancer} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {LoadBalancer} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link LoadBalancer} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(resourceGroupName: string, loadBalancerName: string, parameters: models.LoadBalancer, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.LoadBalancer>;
    beginCreateOrUpdate(resourceGroupName: string, loadBalancerName: string, parameters: models.LoadBalancer, callback: ServiceCallback<models.LoadBalancer>): void;
    beginCreateOrUpdate(resourceGroupName: string, loadBalancerName: string, parameters: models.LoadBalancer, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.LoadBalancer>): void;


    /**
     * Updates a load balancer tags.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} loadBalancerName The name of the load balancer.
     *
     * @param {object} parameters Parameters supplied to update load balancer tags.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<LoadBalancer>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginUpdateTagsWithHttpOperationResponse(resourceGroupName: string, loadBalancerName: string, parameters: models.TagsObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.LoadBalancer>>;

    /**
     * Updates a load balancer tags.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} loadBalancerName The name of the load balancer.
     *
     * @param {object} parameters Parameters supplied to update load balancer tags.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {LoadBalancer} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {LoadBalancer} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link LoadBalancer} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginUpdateTags(resourceGroupName: string, loadBalancerName: string, parameters: models.TagsObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.LoadBalancer>;
    beginUpdateTags(resourceGroupName: string, loadBalancerName: string, parameters: models.TagsObject, callback: ServiceCallback<models.LoadBalancer>): void;
    beginUpdateTags(resourceGroupName: string, loadBalancerName: string, parameters: models.TagsObject, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.LoadBalancer>): void;


    /**
     * Gets all the load balancers in a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<LoadBalancerListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listAllNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.LoadBalancerListResult>>;

    /**
     * Gets all the load balancers in a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {LoadBalancerListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {LoadBalancerListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link LoadBalancerListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listAllNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.LoadBalancerListResult>;
    listAllNext(nextPageLink: string, callback: ServiceCallback<models.LoadBalancerListResult>): void;
    listAllNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.LoadBalancerListResult>): void;


    /**
     * Gets all the load balancers in a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<LoadBalancerListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.LoadBalancerListResult>>;

    /**
     * Gets all the load balancers in a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {LoadBalancerListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {LoadBalancerListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link LoadBalancerListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.LoadBalancerListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.LoadBalancerListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.LoadBalancerListResult>): void;
}

/**
 * @class
 * LoadBalancerBackendAddressPools
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the NetworkManagementClient.
 */
export interface LoadBalancerBackendAddressPools {


    /**
     * Gets all the load balancer backed address pools.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} loadBalancerName The name of the load balancer.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<LoadBalancerBackendAddressPoolListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(resourceGroupName: string, loadBalancerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.LoadBalancerBackendAddressPoolListResult>>;

    /**
     * Gets all the load balancer backed address pools.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} loadBalancerName The name of the load balancer.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {LoadBalancerBackendAddressPoolListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {LoadBalancerBackendAddressPoolListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link LoadBalancerBackendAddressPoolListResult}
     *                      for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(resourceGroupName: string, loadBalancerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.LoadBalancerBackendAddressPoolListResult>;
    list(resourceGroupName: string, loadBalancerName: string, callback: ServiceCallback<models.LoadBalancerBackendAddressPoolListResult>): void;
    list(resourceGroupName: string, loadBalancerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.LoadBalancerBackendAddressPoolListResult>): void;


    /**
     * Gets load balancer backend address pool.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} loadBalancerName The name of the load balancer.
     *
     * @param {string} backendAddressPoolName The name of the backend address pool.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<BackendAddressPool>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, loadBalancerName: string, backendAddressPoolName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BackendAddressPool>>;

    /**
     * Gets load balancer backend address pool.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} loadBalancerName The name of the load balancer.
     *
     * @param {string} backendAddressPoolName The name of the backend address pool.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {BackendAddressPool} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {BackendAddressPool} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link BackendAddressPool} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, loadBalancerName: string, backendAddressPoolName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.BackendAddressPool>;
    get(resourceGroupName: string, loadBalancerName: string, backendAddressPoolName: string, callback: ServiceCallback<models.BackendAddressPool>): void;
    get(resourceGroupName: string, loadBalancerName: string, backendAddressPoolName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BackendAddressPool>): void;


    /**
     * Gets all the load balancer backed address pools.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<LoadBalancerBackendAddressPoolListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.LoadBalancerBackendAddressPoolListResult>>;

    /**
     * Gets all the load balancer backed address pools.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {LoadBalancerBackendAddressPoolListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {LoadBalancerBackendAddressPoolListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link LoadBalancerBackendAddressPoolListResult}
     *                      for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.LoadBalancerBackendAddressPoolListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.LoadBalancerBackendAddressPoolListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.LoadBalancerBackendAddressPoolListResult>): void;
}

/**
 * @class
 * LoadBalancerFrontendIPConfigurations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the NetworkManagementClient.
 */
export interface LoadBalancerFrontendIPConfigurations {


    /**
     * Gets all the load balancer frontend IP configurations.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} loadBalancerName The name of the load balancer.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<LoadBalancerFrontendIPConfigurationListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(resourceGroupName: string, loadBalancerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.LoadBalancerFrontendIPConfigurationListResult>>;

    /**
     * Gets all the load balancer frontend IP configurations.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} loadBalancerName The name of the load balancer.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {LoadBalancerFrontendIPConfigurationListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {LoadBalancerFrontendIPConfigurationListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link
     *                      LoadBalancerFrontendIPConfigurationListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(resourceGroupName: string, loadBalancerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.LoadBalancerFrontendIPConfigurationListResult>;
    list(resourceGroupName: string, loadBalancerName: string, callback: ServiceCallback<models.LoadBalancerFrontendIPConfigurationListResult>): void;
    list(resourceGroupName: string, loadBalancerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.LoadBalancerFrontendIPConfigurationListResult>): void;


    /**
     * Gets load balancer frontend IP configuration.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} loadBalancerName The name of the load balancer.
     *
     * @param {string} frontendIPConfigurationName The name of the frontend IP
     * configuration.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<FrontendIPConfiguration>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, loadBalancerName: string, frontendIPConfigurationName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.FrontendIPConfiguration>>;

    /**
     * Gets load balancer frontend IP configuration.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} loadBalancerName The name of the load balancer.
     *
     * @param {string} frontendIPConfigurationName The name of the frontend IP
     * configuration.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {FrontendIPConfiguration} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {FrontendIPConfiguration} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link FrontendIPConfiguration} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, loadBalancerName: string, frontendIPConfigurationName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.FrontendIPConfiguration>;
    get(resourceGroupName: string, loadBalancerName: string, frontendIPConfigurationName: string, callback: ServiceCallback<models.FrontendIPConfiguration>): void;
    get(resourceGroupName: string, loadBalancerName: string, frontendIPConfigurationName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FrontendIPConfiguration>): void;


    /**
     * Gets all the load balancer frontend IP configurations.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<LoadBalancerFrontendIPConfigurationListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.LoadBalancerFrontendIPConfigurationListResult>>;

    /**
     * Gets all the load balancer frontend IP configurations.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {LoadBalancerFrontendIPConfigurationListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {LoadBalancerFrontendIPConfigurationListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link
     *                      LoadBalancerFrontendIPConfigurationListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.LoadBalancerFrontendIPConfigurationListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.LoadBalancerFrontendIPConfigurationListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.LoadBalancerFrontendIPConfigurationListResult>): void;
}

/**
 * @class
 * InboundNatRules
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the NetworkManagementClient.
 */
export interface InboundNatRules {


    /**
     * Gets all the inbound nat rules in a load balancer.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} loadBalancerName The name of the load balancer.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<InboundNatRuleListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(resourceGroupName: string, loadBalancerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.InboundNatRuleListResult>>;

    /**
     * Gets all the inbound nat rules in a load balancer.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} loadBalancerName The name of the load balancer.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {InboundNatRuleListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {InboundNatRuleListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link InboundNatRuleListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(resourceGroupName: string, loadBalancerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.InboundNatRuleListResult>;
    list(resourceGroupName: string, loadBalancerName: string, callback: ServiceCallback<models.InboundNatRuleListResult>): void;
    list(resourceGroupName: string, loadBalancerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.InboundNatRuleListResult>): void;


    /**
     * Deletes the specified load balancer inbound nat rule.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} loadBalancerName The name of the load balancer.
     *
     * @param {string} inboundNatRuleName The name of the inbound nat rule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, loadBalancerName: string, inboundNatRuleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the specified load balancer inbound nat rule.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} loadBalancerName The name of the load balancer.
     *
     * @param {string} inboundNatRuleName The name of the inbound nat rule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, loadBalancerName: string, inboundNatRuleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, loadBalancerName: string, inboundNatRuleName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, loadBalancerName: string, inboundNatRuleName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets the specified load balancer inbound nat rule.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} loadBalancerName The name of the load balancer.
     *
     * @param {string} inboundNatRuleName The name of the inbound nat rule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Expands referenced resources.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<InboundNatRule>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, loadBalancerName: string, inboundNatRuleName: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.InboundNatRule>>;

    /**
     * Gets the specified load balancer inbound nat rule.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} loadBalancerName The name of the load balancer.
     *
     * @param {string} inboundNatRuleName The name of the inbound nat rule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Expands referenced resources.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {InboundNatRule} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {InboundNatRule} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link InboundNatRule} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, loadBalancerName: string, inboundNatRuleName: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.InboundNatRule>;
    get(resourceGroupName: string, loadBalancerName: string, inboundNatRuleName: string, callback: ServiceCallback<models.InboundNatRule>): void;
    get(resourceGroupName: string, loadBalancerName: string, inboundNatRuleName: string, options: { expand? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.InboundNatRule>): void;


    /**
     * Creates or updates a load balancer inbound nat rule.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} loadBalancerName The name of the load balancer.
     *
     * @param {string} inboundNatRuleName The name of the inbound nat rule.
     *
     * @param {object} inboundNatRuleParameters Parameters supplied to the create
     * or update inbound nat rule operation.
     *
     * @param {object} [inboundNatRuleParameters.frontendIPConfiguration] A
     * reference to frontend IP addresses.
     *
     * @param {string} [inboundNatRuleParameters.frontendIPConfiguration.id]
     * Resource ID.
     *
     * @param {string} [inboundNatRuleParameters.protocol] Possible values include:
     * 'Udp', 'Tcp', 'All'
     *
     * @param {number} [inboundNatRuleParameters.frontendPort] The port for the
     * external endpoint. Port numbers for each rule must be unique within the Load
     * Balancer. Acceptable values range from 1 to 65534.
     *
     * @param {number} [inboundNatRuleParameters.backendPort] The port used for the
     * internal endpoint. Acceptable values range from 1 to 65535.
     *
     * @param {number} [inboundNatRuleParameters.idleTimeoutInMinutes] The timeout
     * for the TCP idle connection. The value can be set between 4 and 30 minutes.
     * The default value is 4 minutes. This element is only used when the protocol
     * is set to TCP.
     *
     * @param {boolean} [inboundNatRuleParameters.enableFloatingIP] Configures a
     * virtual machine's endpoint for the floating IP capability required to
     * configure a SQL AlwaysOn Availability Group. This setting is required when
     * using the SQL AlwaysOn Availability Groups in SQL server. This setting can't
     * be changed after you create the endpoint.
     *
     * @param {string} [inboundNatRuleParameters.provisioningState] Gets the
     * provisioning state of the public IP resource. Possible values are:
     * 'Updating', 'Deleting', and 'Failed'.
     *
     * @param {string} [inboundNatRuleParameters.name] Gets name of the resource
     * that is unique within a resource group. This name can be used to access the
     * resource.
     *
     * @param {string} [inboundNatRuleParameters.etag] A unique read-only string
     * that changes whenever the resource is updated.
     *
     * @param {string} [inboundNatRuleParameters.id] Resource ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<InboundNatRule>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, loadBalancerName: string, inboundNatRuleName: string, inboundNatRuleParameters: models.InboundNatRule, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.InboundNatRule>>;

    /**
     * Creates or updates a load balancer inbound nat rule.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} loadBalancerName The name of the load balancer.
     *
     * @param {string} inboundNatRuleName The name of the inbound nat rule.
     *
     * @param {object} inboundNatRuleParameters Parameters supplied to the create
     * or update inbound nat rule operation.
     *
     * @param {object} [inboundNatRuleParameters.frontendIPConfiguration] A
     * reference to frontend IP addresses.
     *
     * @param {string} [inboundNatRuleParameters.frontendIPConfiguration.id]
     * Resource ID.
     *
     * @param {string} [inboundNatRuleParameters.protocol] Possible values include:
     * 'Udp', 'Tcp', 'All'
     *
     * @param {number} [inboundNatRuleParameters.frontendPort] The port for the
     * external endpoint. Port numbers for each rule must be unique within the Load
     * Balancer. Acceptable values range from 1 to 65534.
     *
     * @param {number} [inboundNatRuleParameters.backendPort] The port used for the
     * internal endpoint. Acceptable values range from 1 to 65535.
     *
     * @param {number} [inboundNatRuleParameters.idleTimeoutInMinutes] The timeout
     * for the TCP idle connection. The value can be set between 4 and 30 minutes.
     * The default value is 4 minutes. This element is only used when the protocol
     * is set to TCP.
     *
     * @param {boolean} [inboundNatRuleParameters.enableFloatingIP] Configures a
     * virtual machine's endpoint for the floating IP capability required to
     * configure a SQL AlwaysOn Availability Group. This setting is required when
     * using the SQL AlwaysOn Availability Groups in SQL server. This setting can't
     * be changed after you create the endpoint.
     *
     * @param {string} [inboundNatRuleParameters.provisioningState] Gets the
     * provisioning state of the public IP resource. Possible values are:
     * 'Updating', 'Deleting', and 'Failed'.
     *
     * @param {string} [inboundNatRuleParameters.name] Gets name of the resource
     * that is unique within a resource group. This name can be used to access the
     * resource.
     *
     * @param {string} [inboundNatRuleParameters.etag] A unique read-only string
     * that changes whenever the resource is updated.
     *
     * @param {string} [inboundNatRuleParameters.id] Resource ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {InboundNatRule} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {InboundNatRule} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link InboundNatRule} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, loadBalancerName: string, inboundNatRuleName: string, inboundNatRuleParameters: models.InboundNatRule, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.InboundNatRule>;
    createOrUpdate(resourceGroupName: string, loadBalancerName: string, inboundNatRuleName: string, inboundNatRuleParameters: models.InboundNatRule, callback: ServiceCallback<models.InboundNatRule>): void;
    createOrUpdate(resourceGroupName: string, loadBalancerName: string, inboundNatRuleName: string, inboundNatRuleParameters: models.InboundNatRule, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.InboundNatRule>): void;


    /**
     * Deletes the specified load balancer inbound nat rule.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} loadBalancerName The name of the load balancer.
     *
     * @param {string} inboundNatRuleName The name of the inbound nat rule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, loadBalancerName: string, inboundNatRuleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the specified load balancer inbound nat rule.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} loadBalancerName The name of the load balancer.
     *
     * @param {string} inboundNatRuleName The name of the inbound nat rule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(resourceGroupName: string, loadBalancerName: string, inboundNatRuleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(resourceGroupName: string, loadBalancerName: string, inboundNatRuleName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, loadBalancerName: string, inboundNatRuleName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Creates or updates a load balancer inbound nat rule.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} loadBalancerName The name of the load balancer.
     *
     * @param {string} inboundNatRuleName The name of the inbound nat rule.
     *
     * @param {object} inboundNatRuleParameters Parameters supplied to the create
     * or update inbound nat rule operation.
     *
     * @param {object} [inboundNatRuleParameters.frontendIPConfiguration] A
     * reference to frontend IP addresses.
     *
     * @param {string} [inboundNatRuleParameters.frontendIPConfiguration.id]
     * Resource ID.
     *
     * @param {string} [inboundNatRuleParameters.protocol] Possible values include:
     * 'Udp', 'Tcp', 'All'
     *
     * @param {number} [inboundNatRuleParameters.frontendPort] The port for the
     * external endpoint. Port numbers for each rule must be unique within the Load
     * Balancer. Acceptable values range from 1 to 65534.
     *
     * @param {number} [inboundNatRuleParameters.backendPort] The port used for the
     * internal endpoint. Acceptable values range from 1 to 65535.
     *
     * @param {number} [inboundNatRuleParameters.idleTimeoutInMinutes] The timeout
     * for the TCP idle connection. The value can be set between 4 and 30 minutes.
     * The default value is 4 minutes. This element is only used when the protocol
     * is set to TCP.
     *
     * @param {boolean} [inboundNatRuleParameters.enableFloatingIP] Configures a
     * virtual machine's endpoint for the floating IP capability required to
     * configure a SQL AlwaysOn Availability Group. This setting is required when
     * using the SQL AlwaysOn Availability Groups in SQL server. This setting can't
     * be changed after you create the endpoint.
     *
     * @param {string} [inboundNatRuleParameters.provisioningState] Gets the
     * provisioning state of the public IP resource. Possible values are:
     * 'Updating', 'Deleting', and 'Failed'.
     *
     * @param {string} [inboundNatRuleParameters.name] Gets name of the resource
     * that is unique within a resource group. This name can be used to access the
     * resource.
     *
     * @param {string} [inboundNatRuleParameters.etag] A unique read-only string
     * that changes whenever the resource is updated.
     *
     * @param {string} [inboundNatRuleParameters.id] Resource ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<InboundNatRule>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, loadBalancerName: string, inboundNatRuleName: string, inboundNatRuleParameters: models.InboundNatRule, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.InboundNatRule>>;

    /**
     * Creates or updates a load balancer inbound nat rule.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} loadBalancerName The name of the load balancer.
     *
     * @param {string} inboundNatRuleName The name of the inbound nat rule.
     *
     * @param {object} inboundNatRuleParameters Parameters supplied to the create
     * or update inbound nat rule operation.
     *
     * @param {object} [inboundNatRuleParameters.frontendIPConfiguration] A
     * reference to frontend IP addresses.
     *
     * @param {string} [inboundNatRuleParameters.frontendIPConfiguration.id]
     * Resource ID.
     *
     * @param {string} [inboundNatRuleParameters.protocol] Possible values include:
     * 'Udp', 'Tcp', 'All'
     *
     * @param {number} [inboundNatRuleParameters.frontendPort] The port for the
     * external endpoint. Port numbers for each rule must be unique within the Load
     * Balancer. Acceptable values range from 1 to 65534.
     *
     * @param {number} [inboundNatRuleParameters.backendPort] The port used for the
     * internal endpoint. Acceptable values range from 1 to 65535.
     *
     * @param {number} [inboundNatRuleParameters.idleTimeoutInMinutes] The timeout
     * for the TCP idle connection. The value can be set between 4 and 30 minutes.
     * The default value is 4 minutes. This element is only used when the protocol
     * is set to TCP.
     *
     * @param {boolean} [inboundNatRuleParameters.enableFloatingIP] Configures a
     * virtual machine's endpoint for the floating IP capability required to
     * configure a SQL AlwaysOn Availability Group. This setting is required when
     * using the SQL AlwaysOn Availability Groups in SQL server. This setting can't
     * be changed after you create the endpoint.
     *
     * @param {string} [inboundNatRuleParameters.provisioningState] Gets the
     * provisioning state of the public IP resource. Possible values are:
     * 'Updating', 'Deleting', and 'Failed'.
     *
     * @param {string} [inboundNatRuleParameters.name] Gets name of the resource
     * that is unique within a resource group. This name can be used to access the
     * resource.
     *
     * @param {string} [inboundNatRuleParameters.etag] A unique read-only string
     * that changes whenever the resource is updated.
     *
     * @param {string} [inboundNatRuleParameters.id] Resource ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {InboundNatRule} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {InboundNatRule} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link InboundNatRule} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(resourceGroupName: string, loadBalancerName: string, inboundNatRuleName: string, inboundNatRuleParameters: models.InboundNatRule, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.InboundNatRule>;
    beginCreateOrUpdate(resourceGroupName: string, loadBalancerName: string, inboundNatRuleName: string, inboundNatRuleParameters: models.InboundNatRule, callback: ServiceCallback<models.InboundNatRule>): void;
    beginCreateOrUpdate(resourceGroupName: string, loadBalancerName: string, inboundNatRuleName: string, inboundNatRuleParameters: models.InboundNatRule, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.InboundNatRule>): void;


    /**
     * Gets all the inbound nat rules in a load balancer.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<InboundNatRuleListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.InboundNatRuleListResult>>;

    /**
     * Gets all the inbound nat rules in a load balancer.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {InboundNatRuleListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {InboundNatRuleListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link InboundNatRuleListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.InboundNatRuleListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.InboundNatRuleListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.InboundNatRuleListResult>): void;
}

/**
 * @class
 * LoadBalancerLoadBalancingRules
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the NetworkManagementClient.
 */
export interface LoadBalancerLoadBalancingRules {


    /**
     * Gets all the load balancing rules in a load balancer.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} loadBalancerName The name of the load balancer.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<LoadBalancerLoadBalancingRuleListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(resourceGroupName: string, loadBalancerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.LoadBalancerLoadBalancingRuleListResult>>;

    /**
     * Gets all the load balancing rules in a load balancer.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} loadBalancerName The name of the load balancer.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {LoadBalancerLoadBalancingRuleListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {LoadBalancerLoadBalancingRuleListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link LoadBalancerLoadBalancingRuleListResult} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(resourceGroupName: string, loadBalancerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.LoadBalancerLoadBalancingRuleListResult>;
    list(resourceGroupName: string, loadBalancerName: string, callback: ServiceCallback<models.LoadBalancerLoadBalancingRuleListResult>): void;
    list(resourceGroupName: string, loadBalancerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.LoadBalancerLoadBalancingRuleListResult>): void;


    /**
     * Gets the specified load balancer load balancing rule.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} loadBalancerName The name of the load balancer.
     *
     * @param {string} loadBalancingRuleName The name of the load balancing rule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<LoadBalancingRule>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, loadBalancerName: string, loadBalancingRuleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.LoadBalancingRule>>;

    /**
     * Gets the specified load balancer load balancing rule.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} loadBalancerName The name of the load balancer.
     *
     * @param {string} loadBalancingRuleName The name of the load balancing rule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {LoadBalancingRule} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {LoadBalancingRule} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link LoadBalancingRule} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, loadBalancerName: string, loadBalancingRuleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.LoadBalancingRule>;
    get(resourceGroupName: string, loadBalancerName: string, loadBalancingRuleName: string, callback: ServiceCallback<models.LoadBalancingRule>): void;
    get(resourceGroupName: string, loadBalancerName: string, loadBalancingRuleName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.LoadBalancingRule>): void;


    /**
     * Gets all the load balancing rules in a load balancer.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<LoadBalancerLoadBalancingRuleListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.LoadBalancerLoadBalancingRuleListResult>>;

    /**
     * Gets all the load balancing rules in a load balancer.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {LoadBalancerLoadBalancingRuleListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {LoadBalancerLoadBalancingRuleListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link LoadBalancerLoadBalancingRuleListResult} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.LoadBalancerLoadBalancingRuleListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.LoadBalancerLoadBalancingRuleListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.LoadBalancerLoadBalancingRuleListResult>): void;
}

/**
 * @class
 * LoadBalancerNetworkInterfaces
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the NetworkManagementClient.
 */
export interface LoadBalancerNetworkInterfaces {


    /**
     * Gets associated load balancer network interfaces.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} loadBalancerName The name of the load balancer.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<NetworkInterfaceListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(resourceGroupName: string, loadBalancerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NetworkInterfaceListResult>>;

    /**
     * Gets associated load balancer network interfaces.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} loadBalancerName The name of the load balancer.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {NetworkInterfaceListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {NetworkInterfaceListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link NetworkInterfaceListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(resourceGroupName: string, loadBalancerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.NetworkInterfaceListResult>;
    list(resourceGroupName: string, loadBalancerName: string, callback: ServiceCallback<models.NetworkInterfaceListResult>): void;
    list(resourceGroupName: string, loadBalancerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NetworkInterfaceListResult>): void;


    /**
     * Gets associated load balancer network interfaces.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<NetworkInterfaceListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NetworkInterfaceListResult>>;

    /**
     * Gets associated load balancer network interfaces.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {NetworkInterfaceListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {NetworkInterfaceListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link NetworkInterfaceListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.NetworkInterfaceListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.NetworkInterfaceListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NetworkInterfaceListResult>): void;
}

/**
 * @class
 * LoadBalancerProbes
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the NetworkManagementClient.
 */
export interface LoadBalancerProbes {


    /**
     * Gets all the load balancer probes.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} loadBalancerName The name of the load balancer.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<LoadBalancerProbeListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(resourceGroupName: string, loadBalancerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.LoadBalancerProbeListResult>>;

    /**
     * Gets all the load balancer probes.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} loadBalancerName The name of the load balancer.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {LoadBalancerProbeListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {LoadBalancerProbeListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link LoadBalancerProbeListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(resourceGroupName: string, loadBalancerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.LoadBalancerProbeListResult>;
    list(resourceGroupName: string, loadBalancerName: string, callback: ServiceCallback<models.LoadBalancerProbeListResult>): void;
    list(resourceGroupName: string, loadBalancerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.LoadBalancerProbeListResult>): void;


    /**
     * Gets load balancer probe.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} loadBalancerName The name of the load balancer.
     *
     * @param {string} probeName The name of the probe.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Probe>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, loadBalancerName: string, probeName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Probe>>;

    /**
     * Gets load balancer probe.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} loadBalancerName The name of the load balancer.
     *
     * @param {string} probeName The name of the probe.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Probe} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Probe} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Probe} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, loadBalancerName: string, probeName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Probe>;
    get(resourceGroupName: string, loadBalancerName: string, probeName: string, callback: ServiceCallback<models.Probe>): void;
    get(resourceGroupName: string, loadBalancerName: string, probeName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Probe>): void;


    /**
     * Gets all the load balancer probes.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<LoadBalancerProbeListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.LoadBalancerProbeListResult>>;

    /**
     * Gets all the load balancer probes.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {LoadBalancerProbeListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {LoadBalancerProbeListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link LoadBalancerProbeListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.LoadBalancerProbeListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.LoadBalancerProbeListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.LoadBalancerProbeListResult>): void;
}

/**
 * @class
 * NetworkInterfaces
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the NetworkManagementClient.
 */
export interface NetworkInterfaces {


    /**
     * Deletes the specified network interface.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkInterfaceName The name of the network interface.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, networkInterfaceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the specified network interface.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkInterfaceName The name of the network interface.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, networkInterfaceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, networkInterfaceName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, networkInterfaceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets information about the specified network interface.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkInterfaceName The name of the network interface.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Expands referenced resources.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<NetworkInterface>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, networkInterfaceName: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NetworkInterface>>;

    /**
     * Gets information about the specified network interface.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkInterfaceName The name of the network interface.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Expands referenced resources.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {NetworkInterface} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {NetworkInterface} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link NetworkInterface} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, networkInterfaceName: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.NetworkInterface>;
    get(resourceGroupName: string, networkInterfaceName: string, callback: ServiceCallback<models.NetworkInterface>): void;
    get(resourceGroupName: string, networkInterfaceName: string, options: { expand? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NetworkInterface>): void;


    /**
     * Creates or updates a network interface.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkInterfaceName The name of the network interface.
     *
     * @param {object} parameters Parameters supplied to the create or update
     * network interface operation.
     *
     * @param {object} [parameters.virtualMachine] The reference of a virtual
     * machine.
     *
     * @param {string} [parameters.virtualMachine.id] Resource ID.
     *
     * @param {object} [parameters.networkSecurityGroup] The reference of the
     * NetworkSecurityGroup resource.
     *
     * @param {array} [parameters.networkSecurityGroup.securityRules] A collection
     * of security rules of the network security group.
     *
     * @param {array} [parameters.networkSecurityGroup.defaultSecurityRules] The
     * default security rules of network security group.
     *
     * @param {string} [parameters.networkSecurityGroup.resourceGuid] The resource
     * GUID property of the network security group resource.
     *
     * @param {string} [parameters.networkSecurityGroup.provisioningState] The
     * provisioning state of the public IP resource. Possible values are:
     * 'Updating', 'Deleting', and 'Failed'.
     *
     * @param {string} [parameters.networkSecurityGroup.etag] A unique read-only
     * string that changes whenever the resource is updated.
     *
     * @param {string} [parameters.networkSecurityGroup.id] Resource ID.
     *
     * @param {string} [parameters.networkSecurityGroup.location] Resource
     * location.
     *
     * @param {object} [parameters.networkSecurityGroup.tags] Resource tags.
     *
     * @param {array} [parameters.ipConfigurations] A list of IPConfigurations of
     * the network interface.
     *
     * @param {object} [parameters.dnsSettings] The DNS settings in network
     * interface.
     *
     * @param {array} [parameters.dnsSettings.dnsServers] List of DNS servers IP
     * addresses. Use 'AzureProvidedDNS' to switch to azure provided DNS
     * resolution. 'AzureProvidedDNS' value cannot be combined with other IPs, it
     * must be the only value in dnsServers collection.
     *
     * @param {array} [parameters.dnsSettings.appliedDnsServers] If the VM that
     * uses this NIC is part of an Availability Set, then this list will have the
     * union of all DNS servers from all NICs that are part of the Availability
     * Set. This property is what is configured on each of those VMs.
     *
     * @param {string} [parameters.dnsSettings.internalDnsNameLabel] Relative DNS
     * name for this NIC used for internal communications between VMs in the same
     * virtual network.
     *
     * @param {string} [parameters.dnsSettings.internalFqdn] Fully qualified DNS
     * name supporting internal communications between VMs in the same virtual
     * network.
     *
     * @param {string} [parameters.dnsSettings.internalDomainNameSuffix] Even if
     * internalDnsNameLabel is not specified, a DNS entry is created for the
     * primary NIC of the VM. This DNS name can be constructed by concatenating the
     * VM name with the value of internalDomainNameSuffix.
     *
     * @param {string} [parameters.macAddress] The MAC address of the network
     * interface.
     *
     * @param {boolean} [parameters.primary] Gets whether this is a primary network
     * interface on a virtual machine.
     *
     * @param {boolean} [parameters.enableAcceleratedNetworking] If the network
     * interface is accelerated networking enabled.
     *
     * @param {boolean} [parameters.enableIPForwarding] Indicates whether IP
     * forwarding is enabled on this network interface.
     *
     * @param {string} [parameters.resourceGuid] The resource GUID property of the
     * network interface resource.
     *
     * @param {string} [parameters.provisioningState] The provisioning state of the
     * public IP resource. Possible values are: 'Updating', 'Deleting', and
     * 'Failed'.
     *
     * @param {string} [parameters.etag] A unique read-only string that changes
     * whenever the resource is updated.
     *
     * @param {string} [parameters.id] Resource ID.
     *
     * @param {string} [parameters.location] Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<NetworkInterface>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, networkInterfaceName: string, parameters: models.NetworkInterface, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NetworkInterface>>;

    /**
     * Creates or updates a network interface.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkInterfaceName The name of the network interface.
     *
     * @param {object} parameters Parameters supplied to the create or update
     * network interface operation.
     *
     * @param {object} [parameters.virtualMachine] The reference of a virtual
     * machine.
     *
     * @param {string} [parameters.virtualMachine.id] Resource ID.
     *
     * @param {object} [parameters.networkSecurityGroup] The reference of the
     * NetworkSecurityGroup resource.
     *
     * @param {array} [parameters.networkSecurityGroup.securityRules] A collection
     * of security rules of the network security group.
     *
     * @param {array} [parameters.networkSecurityGroup.defaultSecurityRules] The
     * default security rules of network security group.
     *
     * @param {string} [parameters.networkSecurityGroup.resourceGuid] The resource
     * GUID property of the network security group resource.
     *
     * @param {string} [parameters.networkSecurityGroup.provisioningState] The
     * provisioning state of the public IP resource. Possible values are:
     * 'Updating', 'Deleting', and 'Failed'.
     *
     * @param {string} [parameters.networkSecurityGroup.etag] A unique read-only
     * string that changes whenever the resource is updated.
     *
     * @param {string} [parameters.networkSecurityGroup.id] Resource ID.
     *
     * @param {string} [parameters.networkSecurityGroup.location] Resource
     * location.
     *
     * @param {object} [parameters.networkSecurityGroup.tags] Resource tags.
     *
     * @param {array} [parameters.ipConfigurations] A list of IPConfigurations of
     * the network interface.
     *
     * @param {object} [parameters.dnsSettings] The DNS settings in network
     * interface.
     *
     * @param {array} [parameters.dnsSettings.dnsServers] List of DNS servers IP
     * addresses. Use 'AzureProvidedDNS' to switch to azure provided DNS
     * resolution. 'AzureProvidedDNS' value cannot be combined with other IPs, it
     * must be the only value in dnsServers collection.
     *
     * @param {array} [parameters.dnsSettings.appliedDnsServers] If the VM that
     * uses this NIC is part of an Availability Set, then this list will have the
     * union of all DNS servers from all NICs that are part of the Availability
     * Set. This property is what is configured on each of those VMs.
     *
     * @param {string} [parameters.dnsSettings.internalDnsNameLabel] Relative DNS
     * name for this NIC used for internal communications between VMs in the same
     * virtual network.
     *
     * @param {string} [parameters.dnsSettings.internalFqdn] Fully qualified DNS
     * name supporting internal communications between VMs in the same virtual
     * network.
     *
     * @param {string} [parameters.dnsSettings.internalDomainNameSuffix] Even if
     * internalDnsNameLabel is not specified, a DNS entry is created for the
     * primary NIC of the VM. This DNS name can be constructed by concatenating the
     * VM name with the value of internalDomainNameSuffix.
     *
     * @param {string} [parameters.macAddress] The MAC address of the network
     * interface.
     *
     * @param {boolean} [parameters.primary] Gets whether this is a primary network
     * interface on a virtual machine.
     *
     * @param {boolean} [parameters.enableAcceleratedNetworking] If the network
     * interface is accelerated networking enabled.
     *
     * @param {boolean} [parameters.enableIPForwarding] Indicates whether IP
     * forwarding is enabled on this network interface.
     *
     * @param {string} [parameters.resourceGuid] The resource GUID property of the
     * network interface resource.
     *
     * @param {string} [parameters.provisioningState] The provisioning state of the
     * public IP resource. Possible values are: 'Updating', 'Deleting', and
     * 'Failed'.
     *
     * @param {string} [parameters.etag] A unique read-only string that changes
     * whenever the resource is updated.
     *
     * @param {string} [parameters.id] Resource ID.
     *
     * @param {string} [parameters.location] Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {NetworkInterface} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {NetworkInterface} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link NetworkInterface} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, networkInterfaceName: string, parameters: models.NetworkInterface, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.NetworkInterface>;
    createOrUpdate(resourceGroupName: string, networkInterfaceName: string, parameters: models.NetworkInterface, callback: ServiceCallback<models.NetworkInterface>): void;
    createOrUpdate(resourceGroupName: string, networkInterfaceName: string, parameters: models.NetworkInterface, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NetworkInterface>): void;


    /**
     * Updates a network interface tags.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkInterfaceName The name of the network interface.
     *
     * @param {object} parameters Parameters supplied to update network interface
     * tags.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<NetworkInterface>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateTagsWithHttpOperationResponse(resourceGroupName: string, networkInterfaceName: string, parameters: models.TagsObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NetworkInterface>>;

    /**
     * Updates a network interface tags.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkInterfaceName The name of the network interface.
     *
     * @param {object} parameters Parameters supplied to update network interface
     * tags.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {NetworkInterface} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {NetworkInterface} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link NetworkInterface} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updateTags(resourceGroupName: string, networkInterfaceName: string, parameters: models.TagsObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.NetworkInterface>;
    updateTags(resourceGroupName: string, networkInterfaceName: string, parameters: models.TagsObject, callback: ServiceCallback<models.NetworkInterface>): void;
    updateTags(resourceGroupName: string, networkInterfaceName: string, parameters: models.TagsObject, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NetworkInterface>): void;


    /**
     * Gets all network interfaces in a subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<NetworkInterfaceListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listAllWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NetworkInterfaceListResult>>;

    /**
     * Gets all network interfaces in a subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {NetworkInterfaceListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {NetworkInterfaceListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link NetworkInterfaceListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listAll(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.NetworkInterfaceListResult>;
    listAll(callback: ServiceCallback<models.NetworkInterfaceListResult>): void;
    listAll(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NetworkInterfaceListResult>): void;


    /**
     * Gets all network interfaces in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<NetworkInterfaceListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NetworkInterfaceListResult>>;

    /**
     * Gets all network interfaces in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {NetworkInterfaceListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {NetworkInterfaceListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link NetworkInterfaceListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.NetworkInterfaceListResult>;
    list(resourceGroupName: string, callback: ServiceCallback<models.NetworkInterfaceListResult>): void;
    list(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NetworkInterfaceListResult>): void;


    /**
     * Gets all route tables applied to a network interface.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkInterfaceName The name of the network interface.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<EffectiveRouteListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getEffectiveRouteTableWithHttpOperationResponse(resourceGroupName: string, networkInterfaceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.EffectiveRouteListResult>>;

    /**
     * Gets all route tables applied to a network interface.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkInterfaceName The name of the network interface.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {EffectiveRouteListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {EffectiveRouteListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link EffectiveRouteListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getEffectiveRouteTable(resourceGroupName: string, networkInterfaceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.EffectiveRouteListResult>;
    getEffectiveRouteTable(resourceGroupName: string, networkInterfaceName: string, callback: ServiceCallback<models.EffectiveRouteListResult>): void;
    getEffectiveRouteTable(resourceGroupName: string, networkInterfaceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EffectiveRouteListResult>): void;


    /**
     * Gets all network security groups applied to a network interface.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkInterfaceName The name of the network interface.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<EffectiveNetworkSecurityGroupListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listEffectiveNetworkSecurityGroupsWithHttpOperationResponse(resourceGroupName: string, networkInterfaceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.EffectiveNetworkSecurityGroupListResult>>;

    /**
     * Gets all network security groups applied to a network interface.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkInterfaceName The name of the network interface.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {EffectiveNetworkSecurityGroupListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {EffectiveNetworkSecurityGroupListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link EffectiveNetworkSecurityGroupListResult} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listEffectiveNetworkSecurityGroups(resourceGroupName: string, networkInterfaceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.EffectiveNetworkSecurityGroupListResult>;
    listEffectiveNetworkSecurityGroups(resourceGroupName: string, networkInterfaceName: string, callback: ServiceCallback<models.EffectiveNetworkSecurityGroupListResult>): void;
    listEffectiveNetworkSecurityGroups(resourceGroupName: string, networkInterfaceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EffectiveNetworkSecurityGroupListResult>): void;


    /**
     * Gets information about all network interfaces in a virtual machine in a
     * virtual machine scale set.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualMachineScaleSetName The name of the virtual machine
     * scale set.
     *
     * @param {string} virtualmachineIndex The virtual machine index.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<NetworkInterfaceListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listVirtualMachineScaleSetVMNetworkInterfacesWithHttpOperationResponse(resourceGroupName: string, virtualMachineScaleSetName: string, virtualmachineIndex: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NetworkInterfaceListResult>>;

    /**
     * Gets information about all network interfaces in a virtual machine in a
     * virtual machine scale set.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualMachineScaleSetName The name of the virtual machine
     * scale set.
     *
     * @param {string} virtualmachineIndex The virtual machine index.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {NetworkInterfaceListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {NetworkInterfaceListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link NetworkInterfaceListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listVirtualMachineScaleSetVMNetworkInterfaces(resourceGroupName: string, virtualMachineScaleSetName: string, virtualmachineIndex: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.NetworkInterfaceListResult>;
    listVirtualMachineScaleSetVMNetworkInterfaces(resourceGroupName: string, virtualMachineScaleSetName: string, virtualmachineIndex: string, callback: ServiceCallback<models.NetworkInterfaceListResult>): void;
    listVirtualMachineScaleSetVMNetworkInterfaces(resourceGroupName: string, virtualMachineScaleSetName: string, virtualmachineIndex: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NetworkInterfaceListResult>): void;


    /**
     * Gets all network interfaces in a virtual machine scale set.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualMachineScaleSetName The name of the virtual machine
     * scale set.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<NetworkInterfaceListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listVirtualMachineScaleSetNetworkInterfacesWithHttpOperationResponse(resourceGroupName: string, virtualMachineScaleSetName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NetworkInterfaceListResult>>;

    /**
     * Gets all network interfaces in a virtual machine scale set.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualMachineScaleSetName The name of the virtual machine
     * scale set.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {NetworkInterfaceListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {NetworkInterfaceListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link NetworkInterfaceListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listVirtualMachineScaleSetNetworkInterfaces(resourceGroupName: string, virtualMachineScaleSetName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.NetworkInterfaceListResult>;
    listVirtualMachineScaleSetNetworkInterfaces(resourceGroupName: string, virtualMachineScaleSetName: string, callback: ServiceCallback<models.NetworkInterfaceListResult>): void;
    listVirtualMachineScaleSetNetworkInterfaces(resourceGroupName: string, virtualMachineScaleSetName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NetworkInterfaceListResult>): void;


    /**
     * Get the specified network interface in a virtual machine scale set.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualMachineScaleSetName The name of the virtual machine
     * scale set.
     *
     * @param {string} virtualmachineIndex The virtual machine index.
     *
     * @param {string} networkInterfaceName The name of the network interface.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Expands referenced resources.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<NetworkInterface>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getVirtualMachineScaleSetNetworkInterfaceWithHttpOperationResponse(resourceGroupName: string, virtualMachineScaleSetName: string, virtualmachineIndex: string, networkInterfaceName: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NetworkInterface>>;

    /**
     * Get the specified network interface in a virtual machine scale set.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualMachineScaleSetName The name of the virtual machine
     * scale set.
     *
     * @param {string} virtualmachineIndex The virtual machine index.
     *
     * @param {string} networkInterfaceName The name of the network interface.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Expands referenced resources.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {NetworkInterface} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {NetworkInterface} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link NetworkInterface} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getVirtualMachineScaleSetNetworkInterface(resourceGroupName: string, virtualMachineScaleSetName: string, virtualmachineIndex: string, networkInterfaceName: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.NetworkInterface>;
    getVirtualMachineScaleSetNetworkInterface(resourceGroupName: string, virtualMachineScaleSetName: string, virtualmachineIndex: string, networkInterfaceName: string, callback: ServiceCallback<models.NetworkInterface>): void;
    getVirtualMachineScaleSetNetworkInterface(resourceGroupName: string, virtualMachineScaleSetName: string, virtualmachineIndex: string, networkInterfaceName: string, options: { expand? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NetworkInterface>): void;


    /**
     * Get the specified network interface ip configuration in a virtual machine
     * scale set.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualMachineScaleSetName The name of the virtual machine
     * scale set.
     *
     * @param {string} virtualmachineIndex The virtual machine index.
     *
     * @param {string} networkInterfaceName The name of the network interface.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Expands referenced resources.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<NetworkInterfaceIPConfigurationListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listVirtualMachineScaleSetIpConfigurationsWithHttpOperationResponse(resourceGroupName: string, virtualMachineScaleSetName: string, virtualmachineIndex: string, networkInterfaceName: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NetworkInterfaceIPConfigurationListResult>>;

    /**
     * Get the specified network interface ip configuration in a virtual machine
     * scale set.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualMachineScaleSetName The name of the virtual machine
     * scale set.
     *
     * @param {string} virtualmachineIndex The virtual machine index.
     *
     * @param {string} networkInterfaceName The name of the network interface.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Expands referenced resources.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {NetworkInterfaceIPConfigurationListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {NetworkInterfaceIPConfigurationListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link NetworkInterfaceIPConfigurationListResult}
     *                      for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listVirtualMachineScaleSetIpConfigurations(resourceGroupName: string, virtualMachineScaleSetName: string, virtualmachineIndex: string, networkInterfaceName: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.NetworkInterfaceIPConfigurationListResult>;
    listVirtualMachineScaleSetIpConfigurations(resourceGroupName: string, virtualMachineScaleSetName: string, virtualmachineIndex: string, networkInterfaceName: string, callback: ServiceCallback<models.NetworkInterfaceIPConfigurationListResult>): void;
    listVirtualMachineScaleSetIpConfigurations(resourceGroupName: string, virtualMachineScaleSetName: string, virtualmachineIndex: string, networkInterfaceName: string, options: { expand? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NetworkInterfaceIPConfigurationListResult>): void;


    /**
     * Get the specified network interface ip configuration in a virtual machine
     * scale set.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualMachineScaleSetName The name of the virtual machine
     * scale set.
     *
     * @param {string} virtualmachineIndex The virtual machine index.
     *
     * @param {string} networkInterfaceName The name of the network interface.
     *
     * @param {string} ipConfigurationName The name of the ip configuration.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Expands referenced resources.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<NetworkInterfaceIPConfiguration>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getVirtualMachineScaleSetIpConfigurationWithHttpOperationResponse(resourceGroupName: string, virtualMachineScaleSetName: string, virtualmachineIndex: string, networkInterfaceName: string, ipConfigurationName: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NetworkInterfaceIPConfiguration>>;

    /**
     * Get the specified network interface ip configuration in a virtual machine
     * scale set.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualMachineScaleSetName The name of the virtual machine
     * scale set.
     *
     * @param {string} virtualmachineIndex The virtual machine index.
     *
     * @param {string} networkInterfaceName The name of the network interface.
     *
     * @param {string} ipConfigurationName The name of the ip configuration.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Expands referenced resources.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {NetworkInterfaceIPConfiguration} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {NetworkInterfaceIPConfiguration} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link NetworkInterfaceIPConfiguration} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getVirtualMachineScaleSetIpConfiguration(resourceGroupName: string, virtualMachineScaleSetName: string, virtualmachineIndex: string, networkInterfaceName: string, ipConfigurationName: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.NetworkInterfaceIPConfiguration>;
    getVirtualMachineScaleSetIpConfiguration(resourceGroupName: string, virtualMachineScaleSetName: string, virtualmachineIndex: string, networkInterfaceName: string, ipConfigurationName: string, callback: ServiceCallback<models.NetworkInterfaceIPConfiguration>): void;
    getVirtualMachineScaleSetIpConfiguration(resourceGroupName: string, virtualMachineScaleSetName: string, virtualmachineIndex: string, networkInterfaceName: string, ipConfigurationName: string, options: { expand? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NetworkInterfaceIPConfiguration>): void;


    /**
     * Deletes the specified network interface.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkInterfaceName The name of the network interface.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, networkInterfaceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the specified network interface.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkInterfaceName The name of the network interface.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(resourceGroupName: string, networkInterfaceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(resourceGroupName: string, networkInterfaceName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, networkInterfaceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Creates or updates a network interface.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkInterfaceName The name of the network interface.
     *
     * @param {object} parameters Parameters supplied to the create or update
     * network interface operation.
     *
     * @param {object} [parameters.virtualMachine] The reference of a virtual
     * machine.
     *
     * @param {string} [parameters.virtualMachine.id] Resource ID.
     *
     * @param {object} [parameters.networkSecurityGroup] The reference of the
     * NetworkSecurityGroup resource.
     *
     * @param {array} [parameters.networkSecurityGroup.securityRules] A collection
     * of security rules of the network security group.
     *
     * @param {array} [parameters.networkSecurityGroup.defaultSecurityRules] The
     * default security rules of network security group.
     *
     * @param {string} [parameters.networkSecurityGroup.resourceGuid] The resource
     * GUID property of the network security group resource.
     *
     * @param {string} [parameters.networkSecurityGroup.provisioningState] The
     * provisioning state of the public IP resource. Possible values are:
     * 'Updating', 'Deleting', and 'Failed'.
     *
     * @param {string} [parameters.networkSecurityGroup.etag] A unique read-only
     * string that changes whenever the resource is updated.
     *
     * @param {string} [parameters.networkSecurityGroup.id] Resource ID.
     *
     * @param {string} [parameters.networkSecurityGroup.location] Resource
     * location.
     *
     * @param {object} [parameters.networkSecurityGroup.tags] Resource tags.
     *
     * @param {array} [parameters.ipConfigurations] A list of IPConfigurations of
     * the network interface.
     *
     * @param {object} [parameters.dnsSettings] The DNS settings in network
     * interface.
     *
     * @param {array} [parameters.dnsSettings.dnsServers] List of DNS servers IP
     * addresses. Use 'AzureProvidedDNS' to switch to azure provided DNS
     * resolution. 'AzureProvidedDNS' value cannot be combined with other IPs, it
     * must be the only value in dnsServers collection.
     *
     * @param {array} [parameters.dnsSettings.appliedDnsServers] If the VM that
     * uses this NIC is part of an Availability Set, then this list will have the
     * union of all DNS servers from all NICs that are part of the Availability
     * Set. This property is what is configured on each of those VMs.
     *
     * @param {string} [parameters.dnsSettings.internalDnsNameLabel] Relative DNS
     * name for this NIC used for internal communications between VMs in the same
     * virtual network.
     *
     * @param {string} [parameters.dnsSettings.internalFqdn] Fully qualified DNS
     * name supporting internal communications between VMs in the same virtual
     * network.
     *
     * @param {string} [parameters.dnsSettings.internalDomainNameSuffix] Even if
     * internalDnsNameLabel is not specified, a DNS entry is created for the
     * primary NIC of the VM. This DNS name can be constructed by concatenating the
     * VM name with the value of internalDomainNameSuffix.
     *
     * @param {string} [parameters.macAddress] The MAC address of the network
     * interface.
     *
     * @param {boolean} [parameters.primary] Gets whether this is a primary network
     * interface on a virtual machine.
     *
     * @param {boolean} [parameters.enableAcceleratedNetworking] If the network
     * interface is accelerated networking enabled.
     *
     * @param {boolean} [parameters.enableIPForwarding] Indicates whether IP
     * forwarding is enabled on this network interface.
     *
     * @param {string} [parameters.resourceGuid] The resource GUID property of the
     * network interface resource.
     *
     * @param {string} [parameters.provisioningState] The provisioning state of the
     * public IP resource. Possible values are: 'Updating', 'Deleting', and
     * 'Failed'.
     *
     * @param {string} [parameters.etag] A unique read-only string that changes
     * whenever the resource is updated.
     *
     * @param {string} [parameters.id] Resource ID.
     *
     * @param {string} [parameters.location] Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<NetworkInterface>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, networkInterfaceName: string, parameters: models.NetworkInterface, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NetworkInterface>>;

    /**
     * Creates or updates a network interface.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkInterfaceName The name of the network interface.
     *
     * @param {object} parameters Parameters supplied to the create or update
     * network interface operation.
     *
     * @param {object} [parameters.virtualMachine] The reference of a virtual
     * machine.
     *
     * @param {string} [parameters.virtualMachine.id] Resource ID.
     *
     * @param {object} [parameters.networkSecurityGroup] The reference of the
     * NetworkSecurityGroup resource.
     *
     * @param {array} [parameters.networkSecurityGroup.securityRules] A collection
     * of security rules of the network security group.
     *
     * @param {array} [parameters.networkSecurityGroup.defaultSecurityRules] The
     * default security rules of network security group.
     *
     * @param {string} [parameters.networkSecurityGroup.resourceGuid] The resource
     * GUID property of the network security group resource.
     *
     * @param {string} [parameters.networkSecurityGroup.provisioningState] The
     * provisioning state of the public IP resource. Possible values are:
     * 'Updating', 'Deleting', and 'Failed'.
     *
     * @param {string} [parameters.networkSecurityGroup.etag] A unique read-only
     * string that changes whenever the resource is updated.
     *
     * @param {string} [parameters.networkSecurityGroup.id] Resource ID.
     *
     * @param {string} [parameters.networkSecurityGroup.location] Resource
     * location.
     *
     * @param {object} [parameters.networkSecurityGroup.tags] Resource tags.
     *
     * @param {array} [parameters.ipConfigurations] A list of IPConfigurations of
     * the network interface.
     *
     * @param {object} [parameters.dnsSettings] The DNS settings in network
     * interface.
     *
     * @param {array} [parameters.dnsSettings.dnsServers] List of DNS servers IP
     * addresses. Use 'AzureProvidedDNS' to switch to azure provided DNS
     * resolution. 'AzureProvidedDNS' value cannot be combined with other IPs, it
     * must be the only value in dnsServers collection.
     *
     * @param {array} [parameters.dnsSettings.appliedDnsServers] If the VM that
     * uses this NIC is part of an Availability Set, then this list will have the
     * union of all DNS servers from all NICs that are part of the Availability
     * Set. This property is what is configured on each of those VMs.
     *
     * @param {string} [parameters.dnsSettings.internalDnsNameLabel] Relative DNS
     * name for this NIC used for internal communications between VMs in the same
     * virtual network.
     *
     * @param {string} [parameters.dnsSettings.internalFqdn] Fully qualified DNS
     * name supporting internal communications between VMs in the same virtual
     * network.
     *
     * @param {string} [parameters.dnsSettings.internalDomainNameSuffix] Even if
     * internalDnsNameLabel is not specified, a DNS entry is created for the
     * primary NIC of the VM. This DNS name can be constructed by concatenating the
     * VM name with the value of internalDomainNameSuffix.
     *
     * @param {string} [parameters.macAddress] The MAC address of the network
     * interface.
     *
     * @param {boolean} [parameters.primary] Gets whether this is a primary network
     * interface on a virtual machine.
     *
     * @param {boolean} [parameters.enableAcceleratedNetworking] If the network
     * interface is accelerated networking enabled.
     *
     * @param {boolean} [parameters.enableIPForwarding] Indicates whether IP
     * forwarding is enabled on this network interface.
     *
     * @param {string} [parameters.resourceGuid] The resource GUID property of the
     * network interface resource.
     *
     * @param {string} [parameters.provisioningState] The provisioning state of the
     * public IP resource. Possible values are: 'Updating', 'Deleting', and
     * 'Failed'.
     *
     * @param {string} [parameters.etag] A unique read-only string that changes
     * whenever the resource is updated.
     *
     * @param {string} [parameters.id] Resource ID.
     *
     * @param {string} [parameters.location] Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {NetworkInterface} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {NetworkInterface} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link NetworkInterface} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(resourceGroupName: string, networkInterfaceName: string, parameters: models.NetworkInterface, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.NetworkInterface>;
    beginCreateOrUpdate(resourceGroupName: string, networkInterfaceName: string, parameters: models.NetworkInterface, callback: ServiceCallback<models.NetworkInterface>): void;
    beginCreateOrUpdate(resourceGroupName: string, networkInterfaceName: string, parameters: models.NetworkInterface, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NetworkInterface>): void;


    /**
     * Updates a network interface tags.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkInterfaceName The name of the network interface.
     *
     * @param {object} parameters Parameters supplied to update network interface
     * tags.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<NetworkInterface>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginUpdateTagsWithHttpOperationResponse(resourceGroupName: string, networkInterfaceName: string, parameters: models.TagsObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NetworkInterface>>;

    /**
     * Updates a network interface tags.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkInterfaceName The name of the network interface.
     *
     * @param {object} parameters Parameters supplied to update network interface
     * tags.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {NetworkInterface} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {NetworkInterface} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link NetworkInterface} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginUpdateTags(resourceGroupName: string, networkInterfaceName: string, parameters: models.TagsObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.NetworkInterface>;
    beginUpdateTags(resourceGroupName: string, networkInterfaceName: string, parameters: models.TagsObject, callback: ServiceCallback<models.NetworkInterface>): void;
    beginUpdateTags(resourceGroupName: string, networkInterfaceName: string, parameters: models.TagsObject, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NetworkInterface>): void;


    /**
     * Gets all route tables applied to a network interface.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkInterfaceName The name of the network interface.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<EffectiveRouteListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginGetEffectiveRouteTableWithHttpOperationResponse(resourceGroupName: string, networkInterfaceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.EffectiveRouteListResult>>;

    /**
     * Gets all route tables applied to a network interface.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkInterfaceName The name of the network interface.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {EffectiveRouteListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {EffectiveRouteListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link EffectiveRouteListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginGetEffectiveRouteTable(resourceGroupName: string, networkInterfaceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.EffectiveRouteListResult>;
    beginGetEffectiveRouteTable(resourceGroupName: string, networkInterfaceName: string, callback: ServiceCallback<models.EffectiveRouteListResult>): void;
    beginGetEffectiveRouteTable(resourceGroupName: string, networkInterfaceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EffectiveRouteListResult>): void;


    /**
     * Gets all network security groups applied to a network interface.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkInterfaceName The name of the network interface.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<EffectiveNetworkSecurityGroupListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginListEffectiveNetworkSecurityGroupsWithHttpOperationResponse(resourceGroupName: string, networkInterfaceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.EffectiveNetworkSecurityGroupListResult>>;

    /**
     * Gets all network security groups applied to a network interface.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkInterfaceName The name of the network interface.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {EffectiveNetworkSecurityGroupListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {EffectiveNetworkSecurityGroupListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link EffectiveNetworkSecurityGroupListResult} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginListEffectiveNetworkSecurityGroups(resourceGroupName: string, networkInterfaceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.EffectiveNetworkSecurityGroupListResult>;
    beginListEffectiveNetworkSecurityGroups(resourceGroupName: string, networkInterfaceName: string, callback: ServiceCallback<models.EffectiveNetworkSecurityGroupListResult>): void;
    beginListEffectiveNetworkSecurityGroups(resourceGroupName: string, networkInterfaceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EffectiveNetworkSecurityGroupListResult>): void;


    /**
     * Gets all network interfaces in a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<NetworkInterfaceListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listAllNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NetworkInterfaceListResult>>;

    /**
     * Gets all network interfaces in a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {NetworkInterfaceListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {NetworkInterfaceListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link NetworkInterfaceListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listAllNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.NetworkInterfaceListResult>;
    listAllNext(nextPageLink: string, callback: ServiceCallback<models.NetworkInterfaceListResult>): void;
    listAllNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NetworkInterfaceListResult>): void;


    /**
     * Gets all network interfaces in a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<NetworkInterfaceListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NetworkInterfaceListResult>>;

    /**
     * Gets all network interfaces in a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {NetworkInterfaceListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {NetworkInterfaceListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link NetworkInterfaceListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.NetworkInterfaceListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.NetworkInterfaceListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NetworkInterfaceListResult>): void;


    /**
     * Gets information about all network interfaces in a virtual machine in a
     * virtual machine scale set.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<NetworkInterfaceListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listVirtualMachineScaleSetVMNetworkInterfacesNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NetworkInterfaceListResult>>;

    /**
     * Gets information about all network interfaces in a virtual machine in a
     * virtual machine scale set.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {NetworkInterfaceListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {NetworkInterfaceListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link NetworkInterfaceListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listVirtualMachineScaleSetVMNetworkInterfacesNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.NetworkInterfaceListResult>;
    listVirtualMachineScaleSetVMNetworkInterfacesNext(nextPageLink: string, callback: ServiceCallback<models.NetworkInterfaceListResult>): void;
    listVirtualMachineScaleSetVMNetworkInterfacesNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NetworkInterfaceListResult>): void;


    /**
     * Gets all network interfaces in a virtual machine scale set.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<NetworkInterfaceListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listVirtualMachineScaleSetNetworkInterfacesNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NetworkInterfaceListResult>>;

    /**
     * Gets all network interfaces in a virtual machine scale set.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {NetworkInterfaceListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {NetworkInterfaceListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link NetworkInterfaceListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listVirtualMachineScaleSetNetworkInterfacesNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.NetworkInterfaceListResult>;
    listVirtualMachineScaleSetNetworkInterfacesNext(nextPageLink: string, callback: ServiceCallback<models.NetworkInterfaceListResult>): void;
    listVirtualMachineScaleSetNetworkInterfacesNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NetworkInterfaceListResult>): void;


    /**
     * Get the specified network interface ip configuration in a virtual machine
     * scale set.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<NetworkInterfaceIPConfigurationListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listVirtualMachineScaleSetIpConfigurationsNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NetworkInterfaceIPConfigurationListResult>>;

    /**
     * Get the specified network interface ip configuration in a virtual machine
     * scale set.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {NetworkInterfaceIPConfigurationListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {NetworkInterfaceIPConfigurationListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link NetworkInterfaceIPConfigurationListResult}
     *                      for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listVirtualMachineScaleSetIpConfigurationsNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.NetworkInterfaceIPConfigurationListResult>;
    listVirtualMachineScaleSetIpConfigurationsNext(nextPageLink: string, callback: ServiceCallback<models.NetworkInterfaceIPConfigurationListResult>): void;
    listVirtualMachineScaleSetIpConfigurationsNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NetworkInterfaceIPConfigurationListResult>): void;
}

/**
 * @class
 * NetworkInterfaceIPConfigurations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the NetworkManagementClient.
 */
export interface NetworkInterfaceIPConfigurations {


    /**
     * Get all ip configurations in a network interface
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkInterfaceName The name of the network interface.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<NetworkInterfaceIPConfigurationListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(resourceGroupName: string, networkInterfaceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NetworkInterfaceIPConfigurationListResult>>;

    /**
     * Get all ip configurations in a network interface
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkInterfaceName The name of the network interface.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {NetworkInterfaceIPConfigurationListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {NetworkInterfaceIPConfigurationListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link NetworkInterfaceIPConfigurationListResult}
     *                      for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(resourceGroupName: string, networkInterfaceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.NetworkInterfaceIPConfigurationListResult>;
    list(resourceGroupName: string, networkInterfaceName: string, callback: ServiceCallback<models.NetworkInterfaceIPConfigurationListResult>): void;
    list(resourceGroupName: string, networkInterfaceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NetworkInterfaceIPConfigurationListResult>): void;


    /**
     * Gets the specified network interface ip configuration.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkInterfaceName The name of the network interface.
     *
     * @param {string} ipConfigurationName The name of the ip configuration name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<NetworkInterfaceIPConfiguration>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, networkInterfaceName: string, ipConfigurationName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NetworkInterfaceIPConfiguration>>;

    /**
     * Gets the specified network interface ip configuration.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkInterfaceName The name of the network interface.
     *
     * @param {string} ipConfigurationName The name of the ip configuration name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {NetworkInterfaceIPConfiguration} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {NetworkInterfaceIPConfiguration} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link NetworkInterfaceIPConfiguration} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, networkInterfaceName: string, ipConfigurationName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.NetworkInterfaceIPConfiguration>;
    get(resourceGroupName: string, networkInterfaceName: string, ipConfigurationName: string, callback: ServiceCallback<models.NetworkInterfaceIPConfiguration>): void;
    get(resourceGroupName: string, networkInterfaceName: string, ipConfigurationName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NetworkInterfaceIPConfiguration>): void;


    /**
     * Get all ip configurations in a network interface
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<NetworkInterfaceIPConfigurationListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NetworkInterfaceIPConfigurationListResult>>;

    /**
     * Get all ip configurations in a network interface
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {NetworkInterfaceIPConfigurationListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {NetworkInterfaceIPConfigurationListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link NetworkInterfaceIPConfigurationListResult}
     *                      for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.NetworkInterfaceIPConfigurationListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.NetworkInterfaceIPConfigurationListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NetworkInterfaceIPConfigurationListResult>): void;
}

/**
 * @class
 * NetworkInterfaceLoadBalancers
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the NetworkManagementClient.
 */
export interface NetworkInterfaceLoadBalancers {


    /**
     * List all load balancers in a network interface.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkInterfaceName The name of the network interface.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<NetworkInterfaceLoadBalancerListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(resourceGroupName: string, networkInterfaceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NetworkInterfaceLoadBalancerListResult>>;

    /**
     * List all load balancers in a network interface.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkInterfaceName The name of the network interface.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {NetworkInterfaceLoadBalancerListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {NetworkInterfaceLoadBalancerListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link NetworkInterfaceLoadBalancerListResult} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(resourceGroupName: string, networkInterfaceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.NetworkInterfaceLoadBalancerListResult>;
    list(resourceGroupName: string, networkInterfaceName: string, callback: ServiceCallback<models.NetworkInterfaceLoadBalancerListResult>): void;
    list(resourceGroupName: string, networkInterfaceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NetworkInterfaceLoadBalancerListResult>): void;


    /**
     * List all load balancers in a network interface.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<NetworkInterfaceLoadBalancerListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NetworkInterfaceLoadBalancerListResult>>;

    /**
     * List all load balancers in a network interface.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {NetworkInterfaceLoadBalancerListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {NetworkInterfaceLoadBalancerListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link NetworkInterfaceLoadBalancerListResult} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.NetworkInterfaceLoadBalancerListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.NetworkInterfaceLoadBalancerListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NetworkInterfaceLoadBalancerListResult>): void;
}

/**
 * @class
 * NetworkSecurityGroups
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the NetworkManagementClient.
 */
export interface NetworkSecurityGroups {


    /**
     * Deletes the specified network security group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkSecurityGroupName The name of the network security
     * group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, networkSecurityGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the specified network security group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkSecurityGroupName The name of the network security
     * group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, networkSecurityGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, networkSecurityGroupName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, networkSecurityGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets the specified network security group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkSecurityGroupName The name of the network security
     * group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Expands referenced resources.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<NetworkSecurityGroup>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, networkSecurityGroupName: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NetworkSecurityGroup>>;

    /**
     * Gets the specified network security group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkSecurityGroupName The name of the network security
     * group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Expands referenced resources.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {NetworkSecurityGroup} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {NetworkSecurityGroup} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link NetworkSecurityGroup} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, networkSecurityGroupName: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.NetworkSecurityGroup>;
    get(resourceGroupName: string, networkSecurityGroupName: string, callback: ServiceCallback<models.NetworkSecurityGroup>): void;
    get(resourceGroupName: string, networkSecurityGroupName: string, options: { expand? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NetworkSecurityGroup>): void;


    /**
     * Creates or updates a network security group in the specified resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkSecurityGroupName The name of the network security
     * group.
     *
     * @param {object} parameters Parameters supplied to the create or update
     * network security group operation.
     *
     * @param {array} [parameters.securityRules] A collection of security rules of
     * the network security group.
     *
     * @param {array} [parameters.defaultSecurityRules] The default security rules
     * of network security group.
     *
     * @param {string} [parameters.resourceGuid] The resource GUID property of the
     * network security group resource.
     *
     * @param {string} [parameters.provisioningState] The provisioning state of the
     * public IP resource. Possible values are: 'Updating', 'Deleting', and
     * 'Failed'.
     *
     * @param {string} [parameters.etag] A unique read-only string that changes
     * whenever the resource is updated.
     *
     * @param {string} [parameters.id] Resource ID.
     *
     * @param {string} [parameters.location] Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<NetworkSecurityGroup>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, networkSecurityGroupName: string, parameters: models.NetworkSecurityGroup, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NetworkSecurityGroup>>;

    /**
     * Creates or updates a network security group in the specified resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkSecurityGroupName The name of the network security
     * group.
     *
     * @param {object} parameters Parameters supplied to the create or update
     * network security group operation.
     *
     * @param {array} [parameters.securityRules] A collection of security rules of
     * the network security group.
     *
     * @param {array} [parameters.defaultSecurityRules] The default security rules
     * of network security group.
     *
     * @param {string} [parameters.resourceGuid] The resource GUID property of the
     * network security group resource.
     *
     * @param {string} [parameters.provisioningState] The provisioning state of the
     * public IP resource. Possible values are: 'Updating', 'Deleting', and
     * 'Failed'.
     *
     * @param {string} [parameters.etag] A unique read-only string that changes
     * whenever the resource is updated.
     *
     * @param {string} [parameters.id] Resource ID.
     *
     * @param {string} [parameters.location] Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {NetworkSecurityGroup} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {NetworkSecurityGroup} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link NetworkSecurityGroup} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, networkSecurityGroupName: string, parameters: models.NetworkSecurityGroup, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.NetworkSecurityGroup>;
    createOrUpdate(resourceGroupName: string, networkSecurityGroupName: string, parameters: models.NetworkSecurityGroup, callback: ServiceCallback<models.NetworkSecurityGroup>): void;
    createOrUpdate(resourceGroupName: string, networkSecurityGroupName: string, parameters: models.NetworkSecurityGroup, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NetworkSecurityGroup>): void;


    /**
     * Updates a network security group tags.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkSecurityGroupName The name of the network security
     * group.
     *
     * @param {object} parameters Parameters supplied to update network security
     * group tags.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<NetworkSecurityGroup>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateTagsWithHttpOperationResponse(resourceGroupName: string, networkSecurityGroupName: string, parameters: models.TagsObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NetworkSecurityGroup>>;

    /**
     * Updates a network security group tags.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkSecurityGroupName The name of the network security
     * group.
     *
     * @param {object} parameters Parameters supplied to update network security
     * group tags.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {NetworkSecurityGroup} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {NetworkSecurityGroup} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link NetworkSecurityGroup} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updateTags(resourceGroupName: string, networkSecurityGroupName: string, parameters: models.TagsObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.NetworkSecurityGroup>;
    updateTags(resourceGroupName: string, networkSecurityGroupName: string, parameters: models.TagsObject, callback: ServiceCallback<models.NetworkSecurityGroup>): void;
    updateTags(resourceGroupName: string, networkSecurityGroupName: string, parameters: models.TagsObject, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NetworkSecurityGroup>): void;


    /**
     * Gets all network security groups in a subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<NetworkSecurityGroupListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listAllWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NetworkSecurityGroupListResult>>;

    /**
     * Gets all network security groups in a subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {NetworkSecurityGroupListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {NetworkSecurityGroupListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link NetworkSecurityGroupListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listAll(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.NetworkSecurityGroupListResult>;
    listAll(callback: ServiceCallback<models.NetworkSecurityGroupListResult>): void;
    listAll(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NetworkSecurityGroupListResult>): void;


    /**
     * Gets all network security groups in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<NetworkSecurityGroupListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NetworkSecurityGroupListResult>>;

    /**
     * Gets all network security groups in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {NetworkSecurityGroupListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {NetworkSecurityGroupListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link NetworkSecurityGroupListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.NetworkSecurityGroupListResult>;
    list(resourceGroupName: string, callback: ServiceCallback<models.NetworkSecurityGroupListResult>): void;
    list(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NetworkSecurityGroupListResult>): void;


    /**
     * Deletes the specified network security group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkSecurityGroupName The name of the network security
     * group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, networkSecurityGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the specified network security group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkSecurityGroupName The name of the network security
     * group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(resourceGroupName: string, networkSecurityGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(resourceGroupName: string, networkSecurityGroupName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, networkSecurityGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Creates or updates a network security group in the specified resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkSecurityGroupName The name of the network security
     * group.
     *
     * @param {object} parameters Parameters supplied to the create or update
     * network security group operation.
     *
     * @param {array} [parameters.securityRules] A collection of security rules of
     * the network security group.
     *
     * @param {array} [parameters.defaultSecurityRules] The default security rules
     * of network security group.
     *
     * @param {string} [parameters.resourceGuid] The resource GUID property of the
     * network security group resource.
     *
     * @param {string} [parameters.provisioningState] The provisioning state of the
     * public IP resource. Possible values are: 'Updating', 'Deleting', and
     * 'Failed'.
     *
     * @param {string} [parameters.etag] A unique read-only string that changes
     * whenever the resource is updated.
     *
     * @param {string} [parameters.id] Resource ID.
     *
     * @param {string} [parameters.location] Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<NetworkSecurityGroup>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, networkSecurityGroupName: string, parameters: models.NetworkSecurityGroup, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NetworkSecurityGroup>>;

    /**
     * Creates or updates a network security group in the specified resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkSecurityGroupName The name of the network security
     * group.
     *
     * @param {object} parameters Parameters supplied to the create or update
     * network security group operation.
     *
     * @param {array} [parameters.securityRules] A collection of security rules of
     * the network security group.
     *
     * @param {array} [parameters.defaultSecurityRules] The default security rules
     * of network security group.
     *
     * @param {string} [parameters.resourceGuid] The resource GUID property of the
     * network security group resource.
     *
     * @param {string} [parameters.provisioningState] The provisioning state of the
     * public IP resource. Possible values are: 'Updating', 'Deleting', and
     * 'Failed'.
     *
     * @param {string} [parameters.etag] A unique read-only string that changes
     * whenever the resource is updated.
     *
     * @param {string} [parameters.id] Resource ID.
     *
     * @param {string} [parameters.location] Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {NetworkSecurityGroup} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {NetworkSecurityGroup} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link NetworkSecurityGroup} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(resourceGroupName: string, networkSecurityGroupName: string, parameters: models.NetworkSecurityGroup, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.NetworkSecurityGroup>;
    beginCreateOrUpdate(resourceGroupName: string, networkSecurityGroupName: string, parameters: models.NetworkSecurityGroup, callback: ServiceCallback<models.NetworkSecurityGroup>): void;
    beginCreateOrUpdate(resourceGroupName: string, networkSecurityGroupName: string, parameters: models.NetworkSecurityGroup, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NetworkSecurityGroup>): void;


    /**
     * Updates a network security group tags.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkSecurityGroupName The name of the network security
     * group.
     *
     * @param {object} parameters Parameters supplied to update network security
     * group tags.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<NetworkSecurityGroup>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginUpdateTagsWithHttpOperationResponse(resourceGroupName: string, networkSecurityGroupName: string, parameters: models.TagsObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NetworkSecurityGroup>>;

    /**
     * Updates a network security group tags.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkSecurityGroupName The name of the network security
     * group.
     *
     * @param {object} parameters Parameters supplied to update network security
     * group tags.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {NetworkSecurityGroup} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {NetworkSecurityGroup} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link NetworkSecurityGroup} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginUpdateTags(resourceGroupName: string, networkSecurityGroupName: string, parameters: models.TagsObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.NetworkSecurityGroup>;
    beginUpdateTags(resourceGroupName: string, networkSecurityGroupName: string, parameters: models.TagsObject, callback: ServiceCallback<models.NetworkSecurityGroup>): void;
    beginUpdateTags(resourceGroupName: string, networkSecurityGroupName: string, parameters: models.TagsObject, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NetworkSecurityGroup>): void;


    /**
     * Gets all network security groups in a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<NetworkSecurityGroupListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listAllNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NetworkSecurityGroupListResult>>;

    /**
     * Gets all network security groups in a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {NetworkSecurityGroupListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {NetworkSecurityGroupListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link NetworkSecurityGroupListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listAllNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.NetworkSecurityGroupListResult>;
    listAllNext(nextPageLink: string, callback: ServiceCallback<models.NetworkSecurityGroupListResult>): void;
    listAllNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NetworkSecurityGroupListResult>): void;


    /**
     * Gets all network security groups in a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<NetworkSecurityGroupListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NetworkSecurityGroupListResult>>;

    /**
     * Gets all network security groups in a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {NetworkSecurityGroupListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {NetworkSecurityGroupListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link NetworkSecurityGroupListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.NetworkSecurityGroupListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.NetworkSecurityGroupListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NetworkSecurityGroupListResult>): void;
}

/**
 * @class
 * SecurityRules
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the NetworkManagementClient.
 */
export interface SecurityRules {


    /**
     * Deletes the specified network security rule.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkSecurityGroupName The name of the network security
     * group.
     *
     * @param {string} securityRuleName The name of the security rule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, networkSecurityGroupName: string, securityRuleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the specified network security rule.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkSecurityGroupName The name of the network security
     * group.
     *
     * @param {string} securityRuleName The name of the security rule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, networkSecurityGroupName: string, securityRuleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, networkSecurityGroupName: string, securityRuleName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, networkSecurityGroupName: string, securityRuleName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Get the specified network security rule.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkSecurityGroupName The name of the network security
     * group.
     *
     * @param {string} securityRuleName The name of the security rule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SecurityRule>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, networkSecurityGroupName: string, securityRuleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SecurityRule>>;

    /**
     * Get the specified network security rule.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkSecurityGroupName The name of the network security
     * group.
     *
     * @param {string} securityRuleName The name of the security rule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SecurityRule} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SecurityRule} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SecurityRule} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, networkSecurityGroupName: string, securityRuleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SecurityRule>;
    get(resourceGroupName: string, networkSecurityGroupName: string, securityRuleName: string, callback: ServiceCallback<models.SecurityRule>): void;
    get(resourceGroupName: string, networkSecurityGroupName: string, securityRuleName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SecurityRule>): void;


    /**
     * Creates or updates a security rule in the specified network security group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkSecurityGroupName The name of the network security
     * group.
     *
     * @param {string} securityRuleName The name of the security rule.
     *
     * @param {object} securityRuleParameters Parameters supplied to the create or
     * update network security rule operation.
     *
     * @param {string} [securityRuleParameters.description] A description for this
     * rule. Restricted to 140 chars.
     *
     * @param {string} securityRuleParameters.protocol Network protocol this rule
     * applies to. Possible values are 'Tcp', 'Udp', and '*'. Possible values
     * include: 'Tcp', 'Udp', '*'
     *
     * @param {string} [securityRuleParameters.sourcePortRange] The source port or
     * range. Integer or range between 0 and 65535. Asterix '*' can also be used to
     * match all ports.
     *
     * @param {string} [securityRuleParameters.destinationPortRange] The
     * destination port or range. Integer or range between 0 and 65535. Asterix '*'
     * can also be used to match all ports.
     *
     * @param {string} [securityRuleParameters.sourceAddressPrefix] The CIDR or
     * source IP range. Asterix '*' can also be used to match all source IPs.
     * Default tags such as 'VirtualNetwork', 'AzureLoadBalancer' and 'Internet'
     * can also be used. If this is an ingress rule, specifies where network
     * traffic originates from.
     *
     * @param {array} [securityRuleParameters.sourceAddressPrefixes] The CIDR or
     * source IP ranges.
     *
     * @param {array} [securityRuleParameters.sourceApplicationSecurityGroups] The
     * application security group specified as source.
     *
     * @param {string} [securityRuleParameters.destinationAddressPrefix] The
     * destination address prefix. CIDR or destination IP range. Asterix '*' can
     * also be used to match all source IPs. Default tags such as 'VirtualNetwork',
     * 'AzureLoadBalancer' and 'Internet' can also be used.
     *
     * @param {array} [securityRuleParameters.destinationAddressPrefixes] The
     * destination address prefixes. CIDR or destination IP ranges.
     *
     * @param {array} [securityRuleParameters.destinationApplicationSecurityGroups]
     * The application security group specified as destination.
     *
     * @param {array} [securityRuleParameters.sourcePortRanges] The source port
     * ranges.
     *
     * @param {array} [securityRuleParameters.destinationPortRanges] The
     * destination port ranges.
     *
     * @param {string} securityRuleParameters.access The network traffic is allowed
     * or denied. Possible values are: 'Allow' and 'Deny'. Possible values include:
     * 'Allow', 'Deny'
     *
     * @param {number} [securityRuleParameters.priority] The priority of the rule.
     * The value can be between 100 and 4096. The priority number must be unique
     * for each rule in the collection. The lower the priority number, the higher
     * the priority of the rule.
     *
     * @param {string} securityRuleParameters.direction The direction of the rule.
     * The direction specifies if rule will be evaluated on incoming or outcoming
     * traffic. Possible values are: 'Inbound' and 'Outbound'. Possible values
     * include: 'Inbound', 'Outbound'
     *
     * @param {string} [securityRuleParameters.provisioningState] The provisioning
     * state of the public IP resource. Possible values are: 'Updating',
     * 'Deleting', and 'Failed'.
     *
     * @param {string} [securityRuleParameters.name] The name of the resource that
     * is unique within a resource group. This name can be used to access the
     * resource.
     *
     * @param {string} [securityRuleParameters.etag] A unique read-only string that
     * changes whenever the resource is updated.
     *
     * @param {string} [securityRuleParameters.id] Resource ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SecurityRule>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, networkSecurityGroupName: string, securityRuleName: string, securityRuleParameters: models.SecurityRule, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SecurityRule>>;

    /**
     * Creates or updates a security rule in the specified network security group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkSecurityGroupName The name of the network security
     * group.
     *
     * @param {string} securityRuleName The name of the security rule.
     *
     * @param {object} securityRuleParameters Parameters supplied to the create or
     * update network security rule operation.
     *
     * @param {string} [securityRuleParameters.description] A description for this
     * rule. Restricted to 140 chars.
     *
     * @param {string} securityRuleParameters.protocol Network protocol this rule
     * applies to. Possible values are 'Tcp', 'Udp', and '*'. Possible values
     * include: 'Tcp', 'Udp', '*'
     *
     * @param {string} [securityRuleParameters.sourcePortRange] The source port or
     * range. Integer or range between 0 and 65535. Asterix '*' can also be used to
     * match all ports.
     *
     * @param {string} [securityRuleParameters.destinationPortRange] The
     * destination port or range. Integer or range between 0 and 65535. Asterix '*'
     * can also be used to match all ports.
     *
     * @param {string} [securityRuleParameters.sourceAddressPrefix] The CIDR or
     * source IP range. Asterix '*' can also be used to match all source IPs.
     * Default tags such as 'VirtualNetwork', 'AzureLoadBalancer' and 'Internet'
     * can also be used. If this is an ingress rule, specifies where network
     * traffic originates from.
     *
     * @param {array} [securityRuleParameters.sourceAddressPrefixes] The CIDR or
     * source IP ranges.
     *
     * @param {array} [securityRuleParameters.sourceApplicationSecurityGroups] The
     * application security group specified as source.
     *
     * @param {string} [securityRuleParameters.destinationAddressPrefix] The
     * destination address prefix. CIDR or destination IP range. Asterix '*' can
     * also be used to match all source IPs. Default tags such as 'VirtualNetwork',
     * 'AzureLoadBalancer' and 'Internet' can also be used.
     *
     * @param {array} [securityRuleParameters.destinationAddressPrefixes] The
     * destination address prefixes. CIDR or destination IP ranges.
     *
     * @param {array} [securityRuleParameters.destinationApplicationSecurityGroups]
     * The application security group specified as destination.
     *
     * @param {array} [securityRuleParameters.sourcePortRanges] The source port
     * ranges.
     *
     * @param {array} [securityRuleParameters.destinationPortRanges] The
     * destination port ranges.
     *
     * @param {string} securityRuleParameters.access The network traffic is allowed
     * or denied. Possible values are: 'Allow' and 'Deny'. Possible values include:
     * 'Allow', 'Deny'
     *
     * @param {number} [securityRuleParameters.priority] The priority of the rule.
     * The value can be between 100 and 4096. The priority number must be unique
     * for each rule in the collection. The lower the priority number, the higher
     * the priority of the rule.
     *
     * @param {string} securityRuleParameters.direction The direction of the rule.
     * The direction specifies if rule will be evaluated on incoming or outcoming
     * traffic. Possible values are: 'Inbound' and 'Outbound'. Possible values
     * include: 'Inbound', 'Outbound'
     *
     * @param {string} [securityRuleParameters.provisioningState] The provisioning
     * state of the public IP resource. Possible values are: 'Updating',
     * 'Deleting', and 'Failed'.
     *
     * @param {string} [securityRuleParameters.name] The name of the resource that
     * is unique within a resource group. This name can be used to access the
     * resource.
     *
     * @param {string} [securityRuleParameters.etag] A unique read-only string that
     * changes whenever the resource is updated.
     *
     * @param {string} [securityRuleParameters.id] Resource ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SecurityRule} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SecurityRule} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SecurityRule} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, networkSecurityGroupName: string, securityRuleName: string, securityRuleParameters: models.SecurityRule, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SecurityRule>;
    createOrUpdate(resourceGroupName: string, networkSecurityGroupName: string, securityRuleName: string, securityRuleParameters: models.SecurityRule, callback: ServiceCallback<models.SecurityRule>): void;
    createOrUpdate(resourceGroupName: string, networkSecurityGroupName: string, securityRuleName: string, securityRuleParameters: models.SecurityRule, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SecurityRule>): void;


    /**
     * Gets all security rules in a network security group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkSecurityGroupName The name of the network security
     * group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SecurityRuleListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(resourceGroupName: string, networkSecurityGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SecurityRuleListResult>>;

    /**
     * Gets all security rules in a network security group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkSecurityGroupName The name of the network security
     * group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SecurityRuleListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SecurityRuleListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SecurityRuleListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(resourceGroupName: string, networkSecurityGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SecurityRuleListResult>;
    list(resourceGroupName: string, networkSecurityGroupName: string, callback: ServiceCallback<models.SecurityRuleListResult>): void;
    list(resourceGroupName: string, networkSecurityGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SecurityRuleListResult>): void;


    /**
     * Deletes the specified network security rule.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkSecurityGroupName The name of the network security
     * group.
     *
     * @param {string} securityRuleName The name of the security rule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, networkSecurityGroupName: string, securityRuleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the specified network security rule.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkSecurityGroupName The name of the network security
     * group.
     *
     * @param {string} securityRuleName The name of the security rule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(resourceGroupName: string, networkSecurityGroupName: string, securityRuleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(resourceGroupName: string, networkSecurityGroupName: string, securityRuleName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, networkSecurityGroupName: string, securityRuleName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Creates or updates a security rule in the specified network security group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkSecurityGroupName The name of the network security
     * group.
     *
     * @param {string} securityRuleName The name of the security rule.
     *
     * @param {object} securityRuleParameters Parameters supplied to the create or
     * update network security rule operation.
     *
     * @param {string} [securityRuleParameters.description] A description for this
     * rule. Restricted to 140 chars.
     *
     * @param {string} securityRuleParameters.protocol Network protocol this rule
     * applies to. Possible values are 'Tcp', 'Udp', and '*'. Possible values
     * include: 'Tcp', 'Udp', '*'
     *
     * @param {string} [securityRuleParameters.sourcePortRange] The source port or
     * range. Integer or range between 0 and 65535. Asterix '*' can also be used to
     * match all ports.
     *
     * @param {string} [securityRuleParameters.destinationPortRange] The
     * destination port or range. Integer or range between 0 and 65535. Asterix '*'
     * can also be used to match all ports.
     *
     * @param {string} [securityRuleParameters.sourceAddressPrefix] The CIDR or
     * source IP range. Asterix '*' can also be used to match all source IPs.
     * Default tags such as 'VirtualNetwork', 'AzureLoadBalancer' and 'Internet'
     * can also be used. If this is an ingress rule, specifies where network
     * traffic originates from.
     *
     * @param {array} [securityRuleParameters.sourceAddressPrefixes] The CIDR or
     * source IP ranges.
     *
     * @param {array} [securityRuleParameters.sourceApplicationSecurityGroups] The
     * application security group specified as source.
     *
     * @param {string} [securityRuleParameters.destinationAddressPrefix] The
     * destination address prefix. CIDR or destination IP range. Asterix '*' can
     * also be used to match all source IPs. Default tags such as 'VirtualNetwork',
     * 'AzureLoadBalancer' and 'Internet' can also be used.
     *
     * @param {array} [securityRuleParameters.destinationAddressPrefixes] The
     * destination address prefixes. CIDR or destination IP ranges.
     *
     * @param {array} [securityRuleParameters.destinationApplicationSecurityGroups]
     * The application security group specified as destination.
     *
     * @param {array} [securityRuleParameters.sourcePortRanges] The source port
     * ranges.
     *
     * @param {array} [securityRuleParameters.destinationPortRanges] The
     * destination port ranges.
     *
     * @param {string} securityRuleParameters.access The network traffic is allowed
     * or denied. Possible values are: 'Allow' and 'Deny'. Possible values include:
     * 'Allow', 'Deny'
     *
     * @param {number} [securityRuleParameters.priority] The priority of the rule.
     * The value can be between 100 and 4096. The priority number must be unique
     * for each rule in the collection. The lower the priority number, the higher
     * the priority of the rule.
     *
     * @param {string} securityRuleParameters.direction The direction of the rule.
     * The direction specifies if rule will be evaluated on incoming or outcoming
     * traffic. Possible values are: 'Inbound' and 'Outbound'. Possible values
     * include: 'Inbound', 'Outbound'
     *
     * @param {string} [securityRuleParameters.provisioningState] The provisioning
     * state of the public IP resource. Possible values are: 'Updating',
     * 'Deleting', and 'Failed'.
     *
     * @param {string} [securityRuleParameters.name] The name of the resource that
     * is unique within a resource group. This name can be used to access the
     * resource.
     *
     * @param {string} [securityRuleParameters.etag] A unique read-only string that
     * changes whenever the resource is updated.
     *
     * @param {string} [securityRuleParameters.id] Resource ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SecurityRule>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, networkSecurityGroupName: string, securityRuleName: string, securityRuleParameters: models.SecurityRule, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SecurityRule>>;

    /**
     * Creates or updates a security rule in the specified network security group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkSecurityGroupName The name of the network security
     * group.
     *
     * @param {string} securityRuleName The name of the security rule.
     *
     * @param {object} securityRuleParameters Parameters supplied to the create or
     * update network security rule operation.
     *
     * @param {string} [securityRuleParameters.description] A description for this
     * rule. Restricted to 140 chars.
     *
     * @param {string} securityRuleParameters.protocol Network protocol this rule
     * applies to. Possible values are 'Tcp', 'Udp', and '*'. Possible values
     * include: 'Tcp', 'Udp', '*'
     *
     * @param {string} [securityRuleParameters.sourcePortRange] The source port or
     * range. Integer or range between 0 and 65535. Asterix '*' can also be used to
     * match all ports.
     *
     * @param {string} [securityRuleParameters.destinationPortRange] The
     * destination port or range. Integer or range between 0 and 65535. Asterix '*'
     * can also be used to match all ports.
     *
     * @param {string} [securityRuleParameters.sourceAddressPrefix] The CIDR or
     * source IP range. Asterix '*' can also be used to match all source IPs.
     * Default tags such as 'VirtualNetwork', 'AzureLoadBalancer' and 'Internet'
     * can also be used. If this is an ingress rule, specifies where network
     * traffic originates from.
     *
     * @param {array} [securityRuleParameters.sourceAddressPrefixes] The CIDR or
     * source IP ranges.
     *
     * @param {array} [securityRuleParameters.sourceApplicationSecurityGroups] The
     * application security group specified as source.
     *
     * @param {string} [securityRuleParameters.destinationAddressPrefix] The
     * destination address prefix. CIDR or destination IP range. Asterix '*' can
     * also be used to match all source IPs. Default tags such as 'VirtualNetwork',
     * 'AzureLoadBalancer' and 'Internet' can also be used.
     *
     * @param {array} [securityRuleParameters.destinationAddressPrefixes] The
     * destination address prefixes. CIDR or destination IP ranges.
     *
     * @param {array} [securityRuleParameters.destinationApplicationSecurityGroups]
     * The application security group specified as destination.
     *
     * @param {array} [securityRuleParameters.sourcePortRanges] The source port
     * ranges.
     *
     * @param {array} [securityRuleParameters.destinationPortRanges] The
     * destination port ranges.
     *
     * @param {string} securityRuleParameters.access The network traffic is allowed
     * or denied. Possible values are: 'Allow' and 'Deny'. Possible values include:
     * 'Allow', 'Deny'
     *
     * @param {number} [securityRuleParameters.priority] The priority of the rule.
     * The value can be between 100 and 4096. The priority number must be unique
     * for each rule in the collection. The lower the priority number, the higher
     * the priority of the rule.
     *
     * @param {string} securityRuleParameters.direction The direction of the rule.
     * The direction specifies if rule will be evaluated on incoming or outcoming
     * traffic. Possible values are: 'Inbound' and 'Outbound'. Possible values
     * include: 'Inbound', 'Outbound'
     *
     * @param {string} [securityRuleParameters.provisioningState] The provisioning
     * state of the public IP resource. Possible values are: 'Updating',
     * 'Deleting', and 'Failed'.
     *
     * @param {string} [securityRuleParameters.name] The name of the resource that
     * is unique within a resource group. This name can be used to access the
     * resource.
     *
     * @param {string} [securityRuleParameters.etag] A unique read-only string that
     * changes whenever the resource is updated.
     *
     * @param {string} [securityRuleParameters.id] Resource ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SecurityRule} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SecurityRule} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SecurityRule} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(resourceGroupName: string, networkSecurityGroupName: string, securityRuleName: string, securityRuleParameters: models.SecurityRule, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SecurityRule>;
    beginCreateOrUpdate(resourceGroupName: string, networkSecurityGroupName: string, securityRuleName: string, securityRuleParameters: models.SecurityRule, callback: ServiceCallback<models.SecurityRule>): void;
    beginCreateOrUpdate(resourceGroupName: string, networkSecurityGroupName: string, securityRuleName: string, securityRuleParameters: models.SecurityRule, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SecurityRule>): void;


    /**
     * Gets all security rules in a network security group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SecurityRuleListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SecurityRuleListResult>>;

    /**
     * Gets all security rules in a network security group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SecurityRuleListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SecurityRuleListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SecurityRuleListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SecurityRuleListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.SecurityRuleListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SecurityRuleListResult>): void;
}

/**
 * @class
 * DefaultSecurityRules
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the NetworkManagementClient.
 */
export interface DefaultSecurityRules {


    /**
     * Gets all default security rules in a network security group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkSecurityGroupName The name of the network security
     * group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SecurityRuleListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(resourceGroupName: string, networkSecurityGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SecurityRuleListResult>>;

    /**
     * Gets all default security rules in a network security group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkSecurityGroupName The name of the network security
     * group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SecurityRuleListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SecurityRuleListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SecurityRuleListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(resourceGroupName: string, networkSecurityGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SecurityRuleListResult>;
    list(resourceGroupName: string, networkSecurityGroupName: string, callback: ServiceCallback<models.SecurityRuleListResult>): void;
    list(resourceGroupName: string, networkSecurityGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SecurityRuleListResult>): void;


    /**
     * Get the specified default network security rule.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkSecurityGroupName The name of the network security
     * group.
     *
     * @param {string} defaultSecurityRuleName The name of the default security
     * rule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SecurityRule>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, networkSecurityGroupName: string, defaultSecurityRuleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SecurityRule>>;

    /**
     * Get the specified default network security rule.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkSecurityGroupName The name of the network security
     * group.
     *
     * @param {string} defaultSecurityRuleName The name of the default security
     * rule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SecurityRule} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SecurityRule} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SecurityRule} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, networkSecurityGroupName: string, defaultSecurityRuleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SecurityRule>;
    get(resourceGroupName: string, networkSecurityGroupName: string, defaultSecurityRuleName: string, callback: ServiceCallback<models.SecurityRule>): void;
    get(resourceGroupName: string, networkSecurityGroupName: string, defaultSecurityRuleName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SecurityRule>): void;


    /**
     * Gets all default security rules in a network security group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SecurityRuleListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SecurityRuleListResult>>;

    /**
     * Gets all default security rules in a network security group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SecurityRuleListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SecurityRuleListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SecurityRuleListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SecurityRuleListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.SecurityRuleListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SecurityRuleListResult>): void;
}

/**
 * @class
 * NetworkWatchers
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the NetworkManagementClient.
 */
export interface NetworkWatchers {


    /**
     * Creates or updates a network watcher in the specified resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkWatcherName The name of the network watcher.
     *
     * @param {object} parameters Parameters that define the network watcher
     * resource.
     *
     * @param {string} [parameters.etag] A unique read-only string that changes
     * whenever the resource is updated.
     *
     * @param {string} [parameters.id] Resource ID.
     *
     * @param {string} [parameters.location] Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<NetworkWatcher>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, networkWatcherName: string, parameters: models.NetworkWatcher, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NetworkWatcher>>;

    /**
     * Creates or updates a network watcher in the specified resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkWatcherName The name of the network watcher.
     *
     * @param {object} parameters Parameters that define the network watcher
     * resource.
     *
     * @param {string} [parameters.etag] A unique read-only string that changes
     * whenever the resource is updated.
     *
     * @param {string} [parameters.id] Resource ID.
     *
     * @param {string} [parameters.location] Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {NetworkWatcher} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {NetworkWatcher} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link NetworkWatcher} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, networkWatcherName: string, parameters: models.NetworkWatcher, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.NetworkWatcher>;
    createOrUpdate(resourceGroupName: string, networkWatcherName: string, parameters: models.NetworkWatcher, callback: ServiceCallback<models.NetworkWatcher>): void;
    createOrUpdate(resourceGroupName: string, networkWatcherName: string, parameters: models.NetworkWatcher, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NetworkWatcher>): void;


    /**
     * Gets the specified network watcher by resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkWatcherName The name of the network watcher.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<NetworkWatcher>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, networkWatcherName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NetworkWatcher>>;

    /**
     * Gets the specified network watcher by resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkWatcherName The name of the network watcher.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {NetworkWatcher} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {NetworkWatcher} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link NetworkWatcher} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, networkWatcherName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.NetworkWatcher>;
    get(resourceGroupName: string, networkWatcherName: string, callback: ServiceCallback<models.NetworkWatcher>): void;
    get(resourceGroupName: string, networkWatcherName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NetworkWatcher>): void;


    /**
     * Deletes the specified network watcher resource.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkWatcherName The name of the network watcher.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, networkWatcherName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the specified network watcher resource.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkWatcherName The name of the network watcher.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, networkWatcherName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, networkWatcherName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, networkWatcherName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Updates a network watcher tags.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkWatcherName The name of the network watcher.
     *
     * @param {object} parameters Parameters supplied to update network watcher
     * tags.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<NetworkWatcher>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateTagsWithHttpOperationResponse(resourceGroupName: string, networkWatcherName: string, parameters: models.TagsObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NetworkWatcher>>;

    /**
     * Updates a network watcher tags.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkWatcherName The name of the network watcher.
     *
     * @param {object} parameters Parameters supplied to update network watcher
     * tags.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {NetworkWatcher} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {NetworkWatcher} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link NetworkWatcher} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updateTags(resourceGroupName: string, networkWatcherName: string, parameters: models.TagsObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.NetworkWatcher>;
    updateTags(resourceGroupName: string, networkWatcherName: string, parameters: models.TagsObject, callback: ServiceCallback<models.NetworkWatcher>): void;
    updateTags(resourceGroupName: string, networkWatcherName: string, parameters: models.TagsObject, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NetworkWatcher>): void;


    /**
     * Gets all network watchers by resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<NetworkWatcherListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NetworkWatcherListResult>>;

    /**
     * Gets all network watchers by resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {NetworkWatcherListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {NetworkWatcherListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link NetworkWatcherListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.NetworkWatcherListResult>;
    list(resourceGroupName: string, callback: ServiceCallback<models.NetworkWatcherListResult>): void;
    list(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NetworkWatcherListResult>): void;


    /**
     * Gets all network watchers by subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<NetworkWatcherListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listAllWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NetworkWatcherListResult>>;

    /**
     * Gets all network watchers by subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {NetworkWatcherListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {NetworkWatcherListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link NetworkWatcherListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listAll(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.NetworkWatcherListResult>;
    listAll(callback: ServiceCallback<models.NetworkWatcherListResult>): void;
    listAll(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NetworkWatcherListResult>): void;


    /**
     * Gets the current network topology by resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkWatcherName The name of the network watcher.
     *
     * @param {object} parameters Parameters that define the representation of
     * topology.
     *
     * @param {string} [parameters.targetResourceGroupName] The name of the target
     * resource group to perform topology on.
     *
     * @param {object} [parameters.targetVirtualNetwork] The reference of the
     * Virtual Network resource.
     *
     * @param {object} [parameters.targetSubnet] The reference of the Subnet
     * resource.
     *
     * @param {string} [parameters.targetSubnet.id] Resource ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Topology>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getTopologyWithHttpOperationResponse(resourceGroupName: string, networkWatcherName: string, parameters: models.TopologyParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Topology>>;

    /**
     * Gets the current network topology by resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkWatcherName The name of the network watcher.
     *
     * @param {object} parameters Parameters that define the representation of
     * topology.
     *
     * @param {string} [parameters.targetResourceGroupName] The name of the target
     * resource group to perform topology on.
     *
     * @param {object} [parameters.targetVirtualNetwork] The reference of the
     * Virtual Network resource.
     *
     * @param {object} [parameters.targetSubnet] The reference of the Subnet
     * resource.
     *
     * @param {string} [parameters.targetSubnet.id] Resource ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Topology} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Topology} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Topology} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getTopology(resourceGroupName: string, networkWatcherName: string, parameters: models.TopologyParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Topology>;
    getTopology(resourceGroupName: string, networkWatcherName: string, parameters: models.TopologyParameters, callback: ServiceCallback<models.Topology>): void;
    getTopology(resourceGroupName: string, networkWatcherName: string, parameters: models.TopologyParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Topology>): void;


    /**
     * Verify IP flow from the specified VM to a location given the currently
     * configured NSG rules.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkWatcherName The name of the network watcher.
     *
     * @param {object} parameters Parameters that define the IP flow to be
     * verified.
     *
     * @param {string} parameters.targetResourceId The ID of the target resource to
     * perform next-hop on.
     *
     * @param {string} parameters.direction The direction of the packet represented
     * as a 5-tuple. Possible values include: 'Inbound', 'Outbound'
     *
     * @param {string} parameters.protocol Protocol to be verified on. Possible
     * values include: 'TCP', 'UDP'
     *
     * @param {string} parameters.localPort The local port. Acceptable values are a
     * single integer in the range (0-65535). Support for * for the source port,
     * which depends on the direction.
     *
     * @param {string} parameters.remotePort The remote port. Acceptable values are
     * a single integer in the range (0-65535). Support for * for the source port,
     * which depends on the direction.
     *
     * @param {string} parameters.localIPAddress The local IP address. Acceptable
     * values are valid IPv4 addresses.
     *
     * @param {string} parameters.remoteIPAddress The remote IP address. Acceptable
     * values are valid IPv4 addresses.
     *
     * @param {string} [parameters.targetNicResourceId] The NIC ID. (If VM has
     * multiple NICs and IP forwarding is enabled on any of them, then this
     * parameter must be specified. Otherwise optional).
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<VerificationIPFlowResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    verifyIPFlowWithHttpOperationResponse(resourceGroupName: string, networkWatcherName: string, parameters: models.VerificationIPFlowParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.VerificationIPFlowResult>>;

    /**
     * Verify IP flow from the specified VM to a location given the currently
     * configured NSG rules.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkWatcherName The name of the network watcher.
     *
     * @param {object} parameters Parameters that define the IP flow to be
     * verified.
     *
     * @param {string} parameters.targetResourceId The ID of the target resource to
     * perform next-hop on.
     *
     * @param {string} parameters.direction The direction of the packet represented
     * as a 5-tuple. Possible values include: 'Inbound', 'Outbound'
     *
     * @param {string} parameters.protocol Protocol to be verified on. Possible
     * values include: 'TCP', 'UDP'
     *
     * @param {string} parameters.localPort The local port. Acceptable values are a
     * single integer in the range (0-65535). Support for * for the source port,
     * which depends on the direction.
     *
     * @param {string} parameters.remotePort The remote port. Acceptable values are
     * a single integer in the range (0-65535). Support for * for the source port,
     * which depends on the direction.
     *
     * @param {string} parameters.localIPAddress The local IP address. Acceptable
     * values are valid IPv4 addresses.
     *
     * @param {string} parameters.remoteIPAddress The remote IP address. Acceptable
     * values are valid IPv4 addresses.
     *
     * @param {string} [parameters.targetNicResourceId] The NIC ID. (If VM has
     * multiple NICs and IP forwarding is enabled on any of them, then this
     * parameter must be specified. Otherwise optional).
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {VerificationIPFlowResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {VerificationIPFlowResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link VerificationIPFlowResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    verifyIPFlow(resourceGroupName: string, networkWatcherName: string, parameters: models.VerificationIPFlowParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.VerificationIPFlowResult>;
    verifyIPFlow(resourceGroupName: string, networkWatcherName: string, parameters: models.VerificationIPFlowParameters, callback: ServiceCallback<models.VerificationIPFlowResult>): void;
    verifyIPFlow(resourceGroupName: string, networkWatcherName: string, parameters: models.VerificationIPFlowParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VerificationIPFlowResult>): void;


    /**
     * Gets the next hop from the specified VM.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkWatcherName The name of the network watcher.
     *
     * @param {object} parameters Parameters that define the source and destination
     * endpoint.
     *
     * @param {string} parameters.targetResourceId The resource identifier of the
     * target resource against which the action is to be performed.
     *
     * @param {string} parameters.sourceIPAddress The source IP address.
     *
     * @param {string} parameters.destinationIPAddress The destination IP address.
     *
     * @param {string} [parameters.targetNicResourceId] The NIC ID. (If VM has
     * multiple NICs and IP forwarding is enabled on any of the nics, then this
     * parameter must be specified. Otherwise optional).
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<NextHopResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getNextHopWithHttpOperationResponse(resourceGroupName: string, networkWatcherName: string, parameters: models.NextHopParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NextHopResult>>;

    /**
     * Gets the next hop from the specified VM.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkWatcherName The name of the network watcher.
     *
     * @param {object} parameters Parameters that define the source and destination
     * endpoint.
     *
     * @param {string} parameters.targetResourceId The resource identifier of the
     * target resource against which the action is to be performed.
     *
     * @param {string} parameters.sourceIPAddress The source IP address.
     *
     * @param {string} parameters.destinationIPAddress The destination IP address.
     *
     * @param {string} [parameters.targetNicResourceId] The NIC ID. (If VM has
     * multiple NICs and IP forwarding is enabled on any of the nics, then this
     * parameter must be specified. Otherwise optional).
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {NextHopResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {NextHopResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link NextHopResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getNextHop(resourceGroupName: string, networkWatcherName: string, parameters: models.NextHopParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.NextHopResult>;
    getNextHop(resourceGroupName: string, networkWatcherName: string, parameters: models.NextHopParameters, callback: ServiceCallback<models.NextHopResult>): void;
    getNextHop(resourceGroupName: string, networkWatcherName: string, parameters: models.NextHopParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NextHopResult>): void;


    /**
     * Gets the configured and effective security group rules on the specified VM.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkWatcherName The name of the network watcher.
     *
     * @param {object} parameters Parameters that define the VM to check security
     * groups for.
     *
     * @param {string} parameters.targetResourceId ID of the target VM.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SecurityGroupViewResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getVMSecurityRulesWithHttpOperationResponse(resourceGroupName: string, networkWatcherName: string, parameters: models.SecurityGroupViewParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SecurityGroupViewResult>>;

    /**
     * Gets the configured and effective security group rules on the specified VM.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkWatcherName The name of the network watcher.
     *
     * @param {object} parameters Parameters that define the VM to check security
     * groups for.
     *
     * @param {string} parameters.targetResourceId ID of the target VM.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SecurityGroupViewResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SecurityGroupViewResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SecurityGroupViewResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getVMSecurityRules(resourceGroupName: string, networkWatcherName: string, parameters: models.SecurityGroupViewParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SecurityGroupViewResult>;
    getVMSecurityRules(resourceGroupName: string, networkWatcherName: string, parameters: models.SecurityGroupViewParameters, callback: ServiceCallback<models.SecurityGroupViewResult>): void;
    getVMSecurityRules(resourceGroupName: string, networkWatcherName: string, parameters: models.SecurityGroupViewParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SecurityGroupViewResult>): void;


    /**
     * Initiate troubleshooting on a specified resource
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkWatcherName The name of the network watcher resource.
     *
     * @param {object} parameters Parameters that define the resource to
     * troubleshoot.
     *
     * @param {string} parameters.targetResourceId The target resource to
     * troubleshoot.
     *
     * @param {string} parameters.storageId The ID for the storage account to save
     * the troubleshoot result.
     *
     * @param {string} parameters.storagePath The path to the blob to save the
     * troubleshoot result in.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<TroubleshootingResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getTroubleshootingWithHttpOperationResponse(resourceGroupName: string, networkWatcherName: string, parameters: models.TroubleshootingParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TroubleshootingResult>>;

    /**
     * Initiate troubleshooting on a specified resource
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkWatcherName The name of the network watcher resource.
     *
     * @param {object} parameters Parameters that define the resource to
     * troubleshoot.
     *
     * @param {string} parameters.targetResourceId The target resource to
     * troubleshoot.
     *
     * @param {string} parameters.storageId The ID for the storage account to save
     * the troubleshoot result.
     *
     * @param {string} parameters.storagePath The path to the blob to save the
     * troubleshoot result in.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {TroubleshootingResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {TroubleshootingResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link TroubleshootingResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getTroubleshooting(resourceGroupName: string, networkWatcherName: string, parameters: models.TroubleshootingParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.TroubleshootingResult>;
    getTroubleshooting(resourceGroupName: string, networkWatcherName: string, parameters: models.TroubleshootingParameters, callback: ServiceCallback<models.TroubleshootingResult>): void;
    getTroubleshooting(resourceGroupName: string, networkWatcherName: string, parameters: models.TroubleshootingParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TroubleshootingResult>): void;


    /**
     * Get the last completed troubleshooting result on a specified resource
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkWatcherName The name of the network watcher resource.
     *
     * @param {object} parameters Parameters that define the resource to query the
     * troubleshooting result.
     *
     * @param {string} parameters.targetResourceId The target resource ID to query
     * the troubleshooting result.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<TroubleshootingResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getTroubleshootingResultWithHttpOperationResponse(resourceGroupName: string, networkWatcherName: string, parameters: models.QueryTroubleshootingParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TroubleshootingResult>>;

    /**
     * Get the last completed troubleshooting result on a specified resource
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkWatcherName The name of the network watcher resource.
     *
     * @param {object} parameters Parameters that define the resource to query the
     * troubleshooting result.
     *
     * @param {string} parameters.targetResourceId The target resource ID to query
     * the troubleshooting result.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {TroubleshootingResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {TroubleshootingResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link TroubleshootingResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getTroubleshootingResult(resourceGroupName: string, networkWatcherName: string, parameters: models.QueryTroubleshootingParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.TroubleshootingResult>;
    getTroubleshootingResult(resourceGroupName: string, networkWatcherName: string, parameters: models.QueryTroubleshootingParameters, callback: ServiceCallback<models.TroubleshootingResult>): void;
    getTroubleshootingResult(resourceGroupName: string, networkWatcherName: string, parameters: models.QueryTroubleshootingParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TroubleshootingResult>): void;


    /**
     * Configures flow log  and traffic analytics (optional) on a specified
     * resource.
     *
     * @param {string} resourceGroupName The name of the network watcher resource
     * group.
     *
     * @param {string} networkWatcherName The name of the network watcher resource.
     *
     * @param {object} parameters Parameters that define the configuration of flow
     * log.
     *
     * @param {string} parameters.targetResourceId The ID of the resource to
     * configure for flow log and traffic analytics (optional) .
     *
     * @param {string} parameters.storageId ID of the storage account which is used
     * to store the flow log.
     *
     * @param {boolean} parameters.enabled Flag to enable/disable flow logging.
     *
     * @param {object} [parameters.retentionPolicy]
     *
     * @param {number} [parameters.retentionPolicy.days] Number of days to retain
     * flow log records.
     *
     * @param {boolean} [parameters.retentionPolicy.enabled] Flag to enable/disable
     * retention.
     *
     * @param {object} [parameters.flowAnalyticsConfiguration]
     *
     * @param {object}
     * parameters.flowAnalyticsConfiguration.networkWatcherFlowAnalyticsConfiguration
     *
     * @param {boolean}
     * parameters.flowAnalyticsConfiguration.networkWatcherFlowAnalyticsConfiguration.enabled
     * Flag to enable/disable traffic analytics.
     *
     * @param {string}
     * parameters.flowAnalyticsConfiguration.networkWatcherFlowAnalyticsConfiguration.workspaceId
     * The resource guid of the attached workspace
     *
     * @param {string}
     * parameters.flowAnalyticsConfiguration.networkWatcherFlowAnalyticsConfiguration.workspaceRegion
     * The location of the attached workspace
     *
     * @param {string}
     * parameters.flowAnalyticsConfiguration.networkWatcherFlowAnalyticsConfiguration.workspaceResourceId
     * Resource Id of the attached workspace
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<FlowLogInformation>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    setFlowLogConfigurationWithHttpOperationResponse(resourceGroupName: string, networkWatcherName: string, parameters: models.FlowLogInformation, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.FlowLogInformation>>;

    /**
     * Configures flow log  and traffic analytics (optional) on a specified
     * resource.
     *
     * @param {string} resourceGroupName The name of the network watcher resource
     * group.
     *
     * @param {string} networkWatcherName The name of the network watcher resource.
     *
     * @param {object} parameters Parameters that define the configuration of flow
     * log.
     *
     * @param {string} parameters.targetResourceId The ID of the resource to
     * configure for flow log and traffic analytics (optional) .
     *
     * @param {string} parameters.storageId ID of the storage account which is used
     * to store the flow log.
     *
     * @param {boolean} parameters.enabled Flag to enable/disable flow logging.
     *
     * @param {object} [parameters.retentionPolicy]
     *
     * @param {number} [parameters.retentionPolicy.days] Number of days to retain
     * flow log records.
     *
     * @param {boolean} [parameters.retentionPolicy.enabled] Flag to enable/disable
     * retention.
     *
     * @param {object} [parameters.flowAnalyticsConfiguration]
     *
     * @param {object}
     * parameters.flowAnalyticsConfiguration.networkWatcherFlowAnalyticsConfiguration
     *
     * @param {boolean}
     * parameters.flowAnalyticsConfiguration.networkWatcherFlowAnalyticsConfiguration.enabled
     * Flag to enable/disable traffic analytics.
     *
     * @param {string}
     * parameters.flowAnalyticsConfiguration.networkWatcherFlowAnalyticsConfiguration.workspaceId
     * The resource guid of the attached workspace
     *
     * @param {string}
     * parameters.flowAnalyticsConfiguration.networkWatcherFlowAnalyticsConfiguration.workspaceRegion
     * The location of the attached workspace
     *
     * @param {string}
     * parameters.flowAnalyticsConfiguration.networkWatcherFlowAnalyticsConfiguration.workspaceResourceId
     * Resource Id of the attached workspace
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {FlowLogInformation} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {FlowLogInformation} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link FlowLogInformation} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    setFlowLogConfiguration(resourceGroupName: string, networkWatcherName: string, parameters: models.FlowLogInformation, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.FlowLogInformation>;
    setFlowLogConfiguration(resourceGroupName: string, networkWatcherName: string, parameters: models.FlowLogInformation, callback: ServiceCallback<models.FlowLogInformation>): void;
    setFlowLogConfiguration(resourceGroupName: string, networkWatcherName: string, parameters: models.FlowLogInformation, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FlowLogInformation>): void;


    /**
     * Queries status of flow log and traffic analytics (optional) on a specified
     * resource.
     *
     * @param {string} resourceGroupName The name of the network watcher resource
     * group.
     *
     * @param {string} networkWatcherName The name of the network watcher resource.
     *
     * @param {object} parameters Parameters that define a resource to query flow
     * log and traffic analytics (optional)  status.
     *
     * @param {string} parameters.targetResourceId The target resource where
     * getting the flow log and traffic analytics (optional) status.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<FlowLogInformation>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getFlowLogStatusWithHttpOperationResponse(resourceGroupName: string, networkWatcherName: string, parameters: models.FlowLogStatusParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.FlowLogInformation>>;

    /**
     * Queries status of flow log and traffic analytics (optional) on a specified
     * resource.
     *
     * @param {string} resourceGroupName The name of the network watcher resource
     * group.
     *
     * @param {string} networkWatcherName The name of the network watcher resource.
     *
     * @param {object} parameters Parameters that define a resource to query flow
     * log and traffic analytics (optional)  status.
     *
     * @param {string} parameters.targetResourceId The target resource where
     * getting the flow log and traffic analytics (optional) status.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {FlowLogInformation} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {FlowLogInformation} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link FlowLogInformation} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getFlowLogStatus(resourceGroupName: string, networkWatcherName: string, parameters: models.FlowLogStatusParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.FlowLogInformation>;
    getFlowLogStatus(resourceGroupName: string, networkWatcherName: string, parameters: models.FlowLogStatusParameters, callback: ServiceCallback<models.FlowLogInformation>): void;
    getFlowLogStatus(resourceGroupName: string, networkWatcherName: string, parameters: models.FlowLogStatusParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FlowLogInformation>): void;


    /**
     * Verifies the possibility of establishing a direct TCP connection from a
     * virtual machine to a given endpoint including another VM or an arbitrary
     * remote server.
     *
     * @param {string} resourceGroupName The name of the network watcher resource
     * group.
     *
     * @param {string} networkWatcherName The name of the network watcher resource.
     *
     * @param {object} parameters Parameters that determine how the connectivity
     * check will be performed.
     *
     * @param {object} parameters.source
     *
     * @param {string} parameters.source.resourceId The ID of the resource from
     * which a connectivity check will be initiated.
     *
     * @param {number} [parameters.source.port] The source port from which a
     * connectivity check will be performed.
     *
     * @param {object} parameters.destination
     *
     * @param {string} [parameters.destination.resourceId] The ID of the resource
     * to which a connection attempt will be made.
     *
     * @param {string} [parameters.destination.address] The IP address or URI the
     * resource to which a connection attempt will be made.
     *
     * @param {number} [parameters.destination.port] Port on which check
     * connectivity will be performed.
     *
     * @param {string} [parameters.protocol] Network protocol. Possible values
     * include: 'Tcp', 'Http', 'Https', 'Icmp'
     *
     * @param {object} [parameters.protocolConfiguration]
     *
     * @param {object} [parameters.protocolConfiguration.hTTPConfiguration]
     *
     * @param {string} [parameters.protocolConfiguration.hTTPConfiguration.method]
     * HTTP method. Possible values include: 'Get'
     *
     * @param {array} [parameters.protocolConfiguration.hTTPConfiguration.headers]
     * List of HTTP headers.
     *
     * @param {array}
     * [parameters.protocolConfiguration.hTTPConfiguration.validStatusCodes] Valid
     * status codes.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ConnectivityInformation>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    checkConnectivityWithHttpOperationResponse(resourceGroupName: string, networkWatcherName: string, parameters: models.ConnectivityParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ConnectivityInformation>>;

    /**
     * Verifies the possibility of establishing a direct TCP connection from a
     * virtual machine to a given endpoint including another VM or an arbitrary
     * remote server.
     *
     * @param {string} resourceGroupName The name of the network watcher resource
     * group.
     *
     * @param {string} networkWatcherName The name of the network watcher resource.
     *
     * @param {object} parameters Parameters that determine how the connectivity
     * check will be performed.
     *
     * @param {object} parameters.source
     *
     * @param {string} parameters.source.resourceId The ID of the resource from
     * which a connectivity check will be initiated.
     *
     * @param {number} [parameters.source.port] The source port from which a
     * connectivity check will be performed.
     *
     * @param {object} parameters.destination
     *
     * @param {string} [parameters.destination.resourceId] The ID of the resource
     * to which a connection attempt will be made.
     *
     * @param {string} [parameters.destination.address] The IP address or URI the
     * resource to which a connection attempt will be made.
     *
     * @param {number} [parameters.destination.port] Port on which check
     * connectivity will be performed.
     *
     * @param {string} [parameters.protocol] Network protocol. Possible values
     * include: 'Tcp', 'Http', 'Https', 'Icmp'
     *
     * @param {object} [parameters.protocolConfiguration]
     *
     * @param {object} [parameters.protocolConfiguration.hTTPConfiguration]
     *
     * @param {string} [parameters.protocolConfiguration.hTTPConfiguration.method]
     * HTTP method. Possible values include: 'Get'
     *
     * @param {array} [parameters.protocolConfiguration.hTTPConfiguration.headers]
     * List of HTTP headers.
     *
     * @param {array}
     * [parameters.protocolConfiguration.hTTPConfiguration.validStatusCodes] Valid
     * status codes.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ConnectivityInformation} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ConnectivityInformation} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ConnectivityInformation} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    checkConnectivity(resourceGroupName: string, networkWatcherName: string, parameters: models.ConnectivityParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ConnectivityInformation>;
    checkConnectivity(resourceGroupName: string, networkWatcherName: string, parameters: models.ConnectivityParameters, callback: ServiceCallback<models.ConnectivityInformation>): void;
    checkConnectivity(resourceGroupName: string, networkWatcherName: string, parameters: models.ConnectivityParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ConnectivityInformation>): void;


    /**
     * Gets the relative latency score for internet service providers from a
     * specified location to Azure regions.
     *
     * @param {string} resourceGroupName The name of the network watcher resource
     * group.
     *
     * @param {string} networkWatcherName The name of the network watcher resource.
     *
     * @param {object} parameters Parameters that determine Azure reachability
     * report configuration.
     *
     * @param {object} parameters.providerLocation
     *
     * @param {string} parameters.providerLocation.country The name of the country.
     *
     * @param {string} [parameters.providerLocation.state] The name of the state.
     *
     * @param {string} [parameters.providerLocation.city] The name of the city or
     * town.
     *
     * @param {array} [parameters.providers] List of Internet service providers.
     *
     * @param {array} [parameters.azureLocations] Optional Azure regions to scope
     * the query to.
     *
     * @param {date} parameters.startTime The start time for the Azure reachability
     * report.
     *
     * @param {date} parameters.endTime The end time for the Azure reachability
     * report.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AzureReachabilityReport>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getAzureReachabilityReportWithHttpOperationResponse(resourceGroupName: string, networkWatcherName: string, parameters: models.AzureReachabilityReportParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AzureReachabilityReport>>;

    /**
     * Gets the relative latency score for internet service providers from a
     * specified location to Azure regions.
     *
     * @param {string} resourceGroupName The name of the network watcher resource
     * group.
     *
     * @param {string} networkWatcherName The name of the network watcher resource.
     *
     * @param {object} parameters Parameters that determine Azure reachability
     * report configuration.
     *
     * @param {object} parameters.providerLocation
     *
     * @param {string} parameters.providerLocation.country The name of the country.
     *
     * @param {string} [parameters.providerLocation.state] The name of the state.
     *
     * @param {string} [parameters.providerLocation.city] The name of the city or
     * town.
     *
     * @param {array} [parameters.providers] List of Internet service providers.
     *
     * @param {array} [parameters.azureLocations] Optional Azure regions to scope
     * the query to.
     *
     * @param {date} parameters.startTime The start time for the Azure reachability
     * report.
     *
     * @param {date} parameters.endTime The end time for the Azure reachability
     * report.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AzureReachabilityReport} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AzureReachabilityReport} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AzureReachabilityReport} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getAzureReachabilityReport(resourceGroupName: string, networkWatcherName: string, parameters: models.AzureReachabilityReportParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AzureReachabilityReport>;
    getAzureReachabilityReport(resourceGroupName: string, networkWatcherName: string, parameters: models.AzureReachabilityReportParameters, callback: ServiceCallback<models.AzureReachabilityReport>): void;
    getAzureReachabilityReport(resourceGroupName: string, networkWatcherName: string, parameters: models.AzureReachabilityReportParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AzureReachabilityReport>): void;


    /**
     * Lists all available internet service providers for a specified Azure region.
     *
     * @param {string} resourceGroupName The name of the network watcher resource
     * group.
     *
     * @param {string} networkWatcherName The name of the network watcher resource.
     *
     * @param {object} parameters Parameters that scope the list of available
     * providers.
     *
     * @param {array} [parameters.azureLocations] A list of Azure regions.
     *
     * @param {string} [parameters.country] The country for available providers
     * list.
     *
     * @param {string} [parameters.state] The state for available providers list.
     *
     * @param {string} [parameters.city] The city or town for available providers
     * list.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AvailableProvidersList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listAvailableProvidersWithHttpOperationResponse(resourceGroupName: string, networkWatcherName: string, parameters: models.AvailableProvidersListParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AvailableProvidersList>>;

    /**
     * Lists all available internet service providers for a specified Azure region.
     *
     * @param {string} resourceGroupName The name of the network watcher resource
     * group.
     *
     * @param {string} networkWatcherName The name of the network watcher resource.
     *
     * @param {object} parameters Parameters that scope the list of available
     * providers.
     *
     * @param {array} [parameters.azureLocations] A list of Azure regions.
     *
     * @param {string} [parameters.country] The country for available providers
     * list.
     *
     * @param {string} [parameters.state] The state for available providers list.
     *
     * @param {string} [parameters.city] The city or town for available providers
     * list.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AvailableProvidersList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AvailableProvidersList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AvailableProvidersList} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listAvailableProviders(resourceGroupName: string, networkWatcherName: string, parameters: models.AvailableProvidersListParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AvailableProvidersList>;
    listAvailableProviders(resourceGroupName: string, networkWatcherName: string, parameters: models.AvailableProvidersListParameters, callback: ServiceCallback<models.AvailableProvidersList>): void;
    listAvailableProviders(resourceGroupName: string, networkWatcherName: string, parameters: models.AvailableProvidersListParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AvailableProvidersList>): void;


    /**
     * Deletes the specified network watcher resource.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkWatcherName The name of the network watcher.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, networkWatcherName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the specified network watcher resource.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkWatcherName The name of the network watcher.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(resourceGroupName: string, networkWatcherName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(resourceGroupName: string, networkWatcherName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, networkWatcherName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Verify IP flow from the specified VM to a location given the currently
     * configured NSG rules.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkWatcherName The name of the network watcher.
     *
     * @param {object} parameters Parameters that define the IP flow to be
     * verified.
     *
     * @param {string} parameters.targetResourceId The ID of the target resource to
     * perform next-hop on.
     *
     * @param {string} parameters.direction The direction of the packet represented
     * as a 5-tuple. Possible values include: 'Inbound', 'Outbound'
     *
     * @param {string} parameters.protocol Protocol to be verified on. Possible
     * values include: 'TCP', 'UDP'
     *
     * @param {string} parameters.localPort The local port. Acceptable values are a
     * single integer in the range (0-65535). Support for * for the source port,
     * which depends on the direction.
     *
     * @param {string} parameters.remotePort The remote port. Acceptable values are
     * a single integer in the range (0-65535). Support for * for the source port,
     * which depends on the direction.
     *
     * @param {string} parameters.localIPAddress The local IP address. Acceptable
     * values are valid IPv4 addresses.
     *
     * @param {string} parameters.remoteIPAddress The remote IP address. Acceptable
     * values are valid IPv4 addresses.
     *
     * @param {string} [parameters.targetNicResourceId] The NIC ID. (If VM has
     * multiple NICs and IP forwarding is enabled on any of them, then this
     * parameter must be specified. Otherwise optional).
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<VerificationIPFlowResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginVerifyIPFlowWithHttpOperationResponse(resourceGroupName: string, networkWatcherName: string, parameters: models.VerificationIPFlowParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.VerificationIPFlowResult>>;

    /**
     * Verify IP flow from the specified VM to a location given the currently
     * configured NSG rules.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkWatcherName The name of the network watcher.
     *
     * @param {object} parameters Parameters that define the IP flow to be
     * verified.
     *
     * @param {string} parameters.targetResourceId The ID of the target resource to
     * perform next-hop on.
     *
     * @param {string} parameters.direction The direction of the packet represented
     * as a 5-tuple. Possible values include: 'Inbound', 'Outbound'
     *
     * @param {string} parameters.protocol Protocol to be verified on. Possible
     * values include: 'TCP', 'UDP'
     *
     * @param {string} parameters.localPort The local port. Acceptable values are a
     * single integer in the range (0-65535). Support for * for the source port,
     * which depends on the direction.
     *
     * @param {string} parameters.remotePort The remote port. Acceptable values are
     * a single integer in the range (0-65535). Support for * for the source port,
     * which depends on the direction.
     *
     * @param {string} parameters.localIPAddress The local IP address. Acceptable
     * values are valid IPv4 addresses.
     *
     * @param {string} parameters.remoteIPAddress The remote IP address. Acceptable
     * values are valid IPv4 addresses.
     *
     * @param {string} [parameters.targetNicResourceId] The NIC ID. (If VM has
     * multiple NICs and IP forwarding is enabled on any of them, then this
     * parameter must be specified. Otherwise optional).
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {VerificationIPFlowResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {VerificationIPFlowResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link VerificationIPFlowResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginVerifyIPFlow(resourceGroupName: string, networkWatcherName: string, parameters: models.VerificationIPFlowParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.VerificationIPFlowResult>;
    beginVerifyIPFlow(resourceGroupName: string, networkWatcherName: string, parameters: models.VerificationIPFlowParameters, callback: ServiceCallback<models.VerificationIPFlowResult>): void;
    beginVerifyIPFlow(resourceGroupName: string, networkWatcherName: string, parameters: models.VerificationIPFlowParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VerificationIPFlowResult>): void;


    /**
     * Gets the next hop from the specified VM.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkWatcherName The name of the network watcher.
     *
     * @param {object} parameters Parameters that define the source and destination
     * endpoint.
     *
     * @param {string} parameters.targetResourceId The resource identifier of the
     * target resource against which the action is to be performed.
     *
     * @param {string} parameters.sourceIPAddress The source IP address.
     *
     * @param {string} parameters.destinationIPAddress The destination IP address.
     *
     * @param {string} [parameters.targetNicResourceId] The NIC ID. (If VM has
     * multiple NICs and IP forwarding is enabled on any of the nics, then this
     * parameter must be specified. Otherwise optional).
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<NextHopResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginGetNextHopWithHttpOperationResponse(resourceGroupName: string, networkWatcherName: string, parameters: models.NextHopParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NextHopResult>>;

    /**
     * Gets the next hop from the specified VM.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkWatcherName The name of the network watcher.
     *
     * @param {object} parameters Parameters that define the source and destination
     * endpoint.
     *
     * @param {string} parameters.targetResourceId The resource identifier of the
     * target resource against which the action is to be performed.
     *
     * @param {string} parameters.sourceIPAddress The source IP address.
     *
     * @param {string} parameters.destinationIPAddress The destination IP address.
     *
     * @param {string} [parameters.targetNicResourceId] The NIC ID. (If VM has
     * multiple NICs and IP forwarding is enabled on any of the nics, then this
     * parameter must be specified. Otherwise optional).
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {NextHopResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {NextHopResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link NextHopResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginGetNextHop(resourceGroupName: string, networkWatcherName: string, parameters: models.NextHopParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.NextHopResult>;
    beginGetNextHop(resourceGroupName: string, networkWatcherName: string, parameters: models.NextHopParameters, callback: ServiceCallback<models.NextHopResult>): void;
    beginGetNextHop(resourceGroupName: string, networkWatcherName: string, parameters: models.NextHopParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NextHopResult>): void;


    /**
     * Gets the configured and effective security group rules on the specified VM.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkWatcherName The name of the network watcher.
     *
     * @param {object} parameters Parameters that define the VM to check security
     * groups for.
     *
     * @param {string} parameters.targetResourceId ID of the target VM.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SecurityGroupViewResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginGetVMSecurityRulesWithHttpOperationResponse(resourceGroupName: string, networkWatcherName: string, parameters: models.SecurityGroupViewParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SecurityGroupViewResult>>;

    /**
     * Gets the configured and effective security group rules on the specified VM.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkWatcherName The name of the network watcher.
     *
     * @param {object} parameters Parameters that define the VM to check security
     * groups for.
     *
     * @param {string} parameters.targetResourceId ID of the target VM.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SecurityGroupViewResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SecurityGroupViewResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SecurityGroupViewResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginGetVMSecurityRules(resourceGroupName: string, networkWatcherName: string, parameters: models.SecurityGroupViewParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SecurityGroupViewResult>;
    beginGetVMSecurityRules(resourceGroupName: string, networkWatcherName: string, parameters: models.SecurityGroupViewParameters, callback: ServiceCallback<models.SecurityGroupViewResult>): void;
    beginGetVMSecurityRules(resourceGroupName: string, networkWatcherName: string, parameters: models.SecurityGroupViewParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SecurityGroupViewResult>): void;


    /**
     * Initiate troubleshooting on a specified resource
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkWatcherName The name of the network watcher resource.
     *
     * @param {object} parameters Parameters that define the resource to
     * troubleshoot.
     *
     * @param {string} parameters.targetResourceId The target resource to
     * troubleshoot.
     *
     * @param {string} parameters.storageId The ID for the storage account to save
     * the troubleshoot result.
     *
     * @param {string} parameters.storagePath The path to the blob to save the
     * troubleshoot result in.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<TroubleshootingResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginGetTroubleshootingWithHttpOperationResponse(resourceGroupName: string, networkWatcherName: string, parameters: models.TroubleshootingParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TroubleshootingResult>>;

    /**
     * Initiate troubleshooting on a specified resource
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkWatcherName The name of the network watcher resource.
     *
     * @param {object} parameters Parameters that define the resource to
     * troubleshoot.
     *
     * @param {string} parameters.targetResourceId The target resource to
     * troubleshoot.
     *
     * @param {string} parameters.storageId The ID for the storage account to save
     * the troubleshoot result.
     *
     * @param {string} parameters.storagePath The path to the blob to save the
     * troubleshoot result in.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {TroubleshootingResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {TroubleshootingResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link TroubleshootingResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginGetTroubleshooting(resourceGroupName: string, networkWatcherName: string, parameters: models.TroubleshootingParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.TroubleshootingResult>;
    beginGetTroubleshooting(resourceGroupName: string, networkWatcherName: string, parameters: models.TroubleshootingParameters, callback: ServiceCallback<models.TroubleshootingResult>): void;
    beginGetTroubleshooting(resourceGroupName: string, networkWatcherName: string, parameters: models.TroubleshootingParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TroubleshootingResult>): void;


    /**
     * Get the last completed troubleshooting result on a specified resource
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkWatcherName The name of the network watcher resource.
     *
     * @param {object} parameters Parameters that define the resource to query the
     * troubleshooting result.
     *
     * @param {string} parameters.targetResourceId The target resource ID to query
     * the troubleshooting result.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<TroubleshootingResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginGetTroubleshootingResultWithHttpOperationResponse(resourceGroupName: string, networkWatcherName: string, parameters: models.QueryTroubleshootingParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TroubleshootingResult>>;

    /**
     * Get the last completed troubleshooting result on a specified resource
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkWatcherName The name of the network watcher resource.
     *
     * @param {object} parameters Parameters that define the resource to query the
     * troubleshooting result.
     *
     * @param {string} parameters.targetResourceId The target resource ID to query
     * the troubleshooting result.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {TroubleshootingResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {TroubleshootingResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link TroubleshootingResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginGetTroubleshootingResult(resourceGroupName: string, networkWatcherName: string, parameters: models.QueryTroubleshootingParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.TroubleshootingResult>;
    beginGetTroubleshootingResult(resourceGroupName: string, networkWatcherName: string, parameters: models.QueryTroubleshootingParameters, callback: ServiceCallback<models.TroubleshootingResult>): void;
    beginGetTroubleshootingResult(resourceGroupName: string, networkWatcherName: string, parameters: models.QueryTroubleshootingParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TroubleshootingResult>): void;


    /**
     * Configures flow log  and traffic analytics (optional) on a specified
     * resource.
     *
     * @param {string} resourceGroupName The name of the network watcher resource
     * group.
     *
     * @param {string} networkWatcherName The name of the network watcher resource.
     *
     * @param {object} parameters Parameters that define the configuration of flow
     * log.
     *
     * @param {string} parameters.targetResourceId The ID of the resource to
     * configure for flow log and traffic analytics (optional) .
     *
     * @param {string} parameters.storageId ID of the storage account which is used
     * to store the flow log.
     *
     * @param {boolean} parameters.enabled Flag to enable/disable flow logging.
     *
     * @param {object} [parameters.retentionPolicy]
     *
     * @param {number} [parameters.retentionPolicy.days] Number of days to retain
     * flow log records.
     *
     * @param {boolean} [parameters.retentionPolicy.enabled] Flag to enable/disable
     * retention.
     *
     * @param {object} [parameters.flowAnalyticsConfiguration]
     *
     * @param {object}
     * parameters.flowAnalyticsConfiguration.networkWatcherFlowAnalyticsConfiguration
     *
     * @param {boolean}
     * parameters.flowAnalyticsConfiguration.networkWatcherFlowAnalyticsConfiguration.enabled
     * Flag to enable/disable traffic analytics.
     *
     * @param {string}
     * parameters.flowAnalyticsConfiguration.networkWatcherFlowAnalyticsConfiguration.workspaceId
     * The resource guid of the attached workspace
     *
     * @param {string}
     * parameters.flowAnalyticsConfiguration.networkWatcherFlowAnalyticsConfiguration.workspaceRegion
     * The location of the attached workspace
     *
     * @param {string}
     * parameters.flowAnalyticsConfiguration.networkWatcherFlowAnalyticsConfiguration.workspaceResourceId
     * Resource Id of the attached workspace
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<FlowLogInformation>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginSetFlowLogConfigurationWithHttpOperationResponse(resourceGroupName: string, networkWatcherName: string, parameters: models.FlowLogInformation, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.FlowLogInformation>>;

    /**
     * Configures flow log  and traffic analytics (optional) on a specified
     * resource.
     *
     * @param {string} resourceGroupName The name of the network watcher resource
     * group.
     *
     * @param {string} networkWatcherName The name of the network watcher resource.
     *
     * @param {object} parameters Parameters that define the configuration of flow
     * log.
     *
     * @param {string} parameters.targetResourceId The ID of the resource to
     * configure for flow log and traffic analytics (optional) .
     *
     * @param {string} parameters.storageId ID of the storage account which is used
     * to store the flow log.
     *
     * @param {boolean} parameters.enabled Flag to enable/disable flow logging.
     *
     * @param {object} [parameters.retentionPolicy]
     *
     * @param {number} [parameters.retentionPolicy.days] Number of days to retain
     * flow log records.
     *
     * @param {boolean} [parameters.retentionPolicy.enabled] Flag to enable/disable
     * retention.
     *
     * @param {object} [parameters.flowAnalyticsConfiguration]
     *
     * @param {object}
     * parameters.flowAnalyticsConfiguration.networkWatcherFlowAnalyticsConfiguration
     *
     * @param {boolean}
     * parameters.flowAnalyticsConfiguration.networkWatcherFlowAnalyticsConfiguration.enabled
     * Flag to enable/disable traffic analytics.
     *
     * @param {string}
     * parameters.flowAnalyticsConfiguration.networkWatcherFlowAnalyticsConfiguration.workspaceId
     * The resource guid of the attached workspace
     *
     * @param {string}
     * parameters.flowAnalyticsConfiguration.networkWatcherFlowAnalyticsConfiguration.workspaceRegion
     * The location of the attached workspace
     *
     * @param {string}
     * parameters.flowAnalyticsConfiguration.networkWatcherFlowAnalyticsConfiguration.workspaceResourceId
     * Resource Id of the attached workspace
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {FlowLogInformation} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {FlowLogInformation} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link FlowLogInformation} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginSetFlowLogConfiguration(resourceGroupName: string, networkWatcherName: string, parameters: models.FlowLogInformation, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.FlowLogInformation>;
    beginSetFlowLogConfiguration(resourceGroupName: string, networkWatcherName: string, parameters: models.FlowLogInformation, callback: ServiceCallback<models.FlowLogInformation>): void;
    beginSetFlowLogConfiguration(resourceGroupName: string, networkWatcherName: string, parameters: models.FlowLogInformation, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FlowLogInformation>): void;


    /**
     * Queries status of flow log and traffic analytics (optional) on a specified
     * resource.
     *
     * @param {string} resourceGroupName The name of the network watcher resource
     * group.
     *
     * @param {string} networkWatcherName The name of the network watcher resource.
     *
     * @param {object} parameters Parameters that define a resource to query flow
     * log and traffic analytics (optional)  status.
     *
     * @param {string} parameters.targetResourceId The target resource where
     * getting the flow log and traffic analytics (optional) status.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<FlowLogInformation>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginGetFlowLogStatusWithHttpOperationResponse(resourceGroupName: string, networkWatcherName: string, parameters: models.FlowLogStatusParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.FlowLogInformation>>;

    /**
     * Queries status of flow log and traffic analytics (optional) on a specified
     * resource.
     *
     * @param {string} resourceGroupName The name of the network watcher resource
     * group.
     *
     * @param {string} networkWatcherName The name of the network watcher resource.
     *
     * @param {object} parameters Parameters that define a resource to query flow
     * log and traffic analytics (optional)  status.
     *
     * @param {string} parameters.targetResourceId The target resource where
     * getting the flow log and traffic analytics (optional) status.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {FlowLogInformation} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {FlowLogInformation} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link FlowLogInformation} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginGetFlowLogStatus(resourceGroupName: string, networkWatcherName: string, parameters: models.FlowLogStatusParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.FlowLogInformation>;
    beginGetFlowLogStatus(resourceGroupName: string, networkWatcherName: string, parameters: models.FlowLogStatusParameters, callback: ServiceCallback<models.FlowLogInformation>): void;
    beginGetFlowLogStatus(resourceGroupName: string, networkWatcherName: string, parameters: models.FlowLogStatusParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FlowLogInformation>): void;


    /**
     * Verifies the possibility of establishing a direct TCP connection from a
     * virtual machine to a given endpoint including another VM or an arbitrary
     * remote server.
     *
     * @param {string} resourceGroupName The name of the network watcher resource
     * group.
     *
     * @param {string} networkWatcherName The name of the network watcher resource.
     *
     * @param {object} parameters Parameters that determine how the connectivity
     * check will be performed.
     *
     * @param {object} parameters.source
     *
     * @param {string} parameters.source.resourceId The ID of the resource from
     * which a connectivity check will be initiated.
     *
     * @param {number} [parameters.source.port] The source port from which a
     * connectivity check will be performed.
     *
     * @param {object} parameters.destination
     *
     * @param {string} [parameters.destination.resourceId] The ID of the resource
     * to which a connection attempt will be made.
     *
     * @param {string} [parameters.destination.address] The IP address or URI the
     * resource to which a connection attempt will be made.
     *
     * @param {number} [parameters.destination.port] Port on which check
     * connectivity will be performed.
     *
     * @param {string} [parameters.protocol] Network protocol. Possible values
     * include: 'Tcp', 'Http', 'Https', 'Icmp'
     *
     * @param {object} [parameters.protocolConfiguration]
     *
     * @param {object} [parameters.protocolConfiguration.hTTPConfiguration]
     *
     * @param {string} [parameters.protocolConfiguration.hTTPConfiguration.method]
     * HTTP method. Possible values include: 'Get'
     *
     * @param {array} [parameters.protocolConfiguration.hTTPConfiguration.headers]
     * List of HTTP headers.
     *
     * @param {array}
     * [parameters.protocolConfiguration.hTTPConfiguration.validStatusCodes] Valid
     * status codes.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ConnectivityInformation>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCheckConnectivityWithHttpOperationResponse(resourceGroupName: string, networkWatcherName: string, parameters: models.ConnectivityParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ConnectivityInformation>>;

    /**
     * Verifies the possibility of establishing a direct TCP connection from a
     * virtual machine to a given endpoint including another VM or an arbitrary
     * remote server.
     *
     * @param {string} resourceGroupName The name of the network watcher resource
     * group.
     *
     * @param {string} networkWatcherName The name of the network watcher resource.
     *
     * @param {object} parameters Parameters that determine how the connectivity
     * check will be performed.
     *
     * @param {object} parameters.source
     *
     * @param {string} parameters.source.resourceId The ID of the resource from
     * which a connectivity check will be initiated.
     *
     * @param {number} [parameters.source.port] The source port from which a
     * connectivity check will be performed.
     *
     * @param {object} parameters.destination
     *
     * @param {string} [parameters.destination.resourceId] The ID of the resource
     * to which a connection attempt will be made.
     *
     * @param {string} [parameters.destination.address] The IP address or URI the
     * resource to which a connection attempt will be made.
     *
     * @param {number} [parameters.destination.port] Port on which check
     * connectivity will be performed.
     *
     * @param {string} [parameters.protocol] Network protocol. Possible values
     * include: 'Tcp', 'Http', 'Https', 'Icmp'
     *
     * @param {object} [parameters.protocolConfiguration]
     *
     * @param {object} [parameters.protocolConfiguration.hTTPConfiguration]
     *
     * @param {string} [parameters.protocolConfiguration.hTTPConfiguration.method]
     * HTTP method. Possible values include: 'Get'
     *
     * @param {array} [parameters.protocolConfiguration.hTTPConfiguration.headers]
     * List of HTTP headers.
     *
     * @param {array}
     * [parameters.protocolConfiguration.hTTPConfiguration.validStatusCodes] Valid
     * status codes.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ConnectivityInformation} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ConnectivityInformation} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ConnectivityInformation} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCheckConnectivity(resourceGroupName: string, networkWatcherName: string, parameters: models.ConnectivityParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ConnectivityInformation>;
    beginCheckConnectivity(resourceGroupName: string, networkWatcherName: string, parameters: models.ConnectivityParameters, callback: ServiceCallback<models.ConnectivityInformation>): void;
    beginCheckConnectivity(resourceGroupName: string, networkWatcherName: string, parameters: models.ConnectivityParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ConnectivityInformation>): void;


    /**
     * Gets the relative latency score for internet service providers from a
     * specified location to Azure regions.
     *
     * @param {string} resourceGroupName The name of the network watcher resource
     * group.
     *
     * @param {string} networkWatcherName The name of the network watcher resource.
     *
     * @param {object} parameters Parameters that determine Azure reachability
     * report configuration.
     *
     * @param {object} parameters.providerLocation
     *
     * @param {string} parameters.providerLocation.country The name of the country.
     *
     * @param {string} [parameters.providerLocation.state] The name of the state.
     *
     * @param {string} [parameters.providerLocation.city] The name of the city or
     * town.
     *
     * @param {array} [parameters.providers] List of Internet service providers.
     *
     * @param {array} [parameters.azureLocations] Optional Azure regions to scope
     * the query to.
     *
     * @param {date} parameters.startTime The start time for the Azure reachability
     * report.
     *
     * @param {date} parameters.endTime The end time for the Azure reachability
     * report.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AzureReachabilityReport>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginGetAzureReachabilityReportWithHttpOperationResponse(resourceGroupName: string, networkWatcherName: string, parameters: models.AzureReachabilityReportParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AzureReachabilityReport>>;

    /**
     * Gets the relative latency score for internet service providers from a
     * specified location to Azure regions.
     *
     * @param {string} resourceGroupName The name of the network watcher resource
     * group.
     *
     * @param {string} networkWatcherName The name of the network watcher resource.
     *
     * @param {object} parameters Parameters that determine Azure reachability
     * report configuration.
     *
     * @param {object} parameters.providerLocation
     *
     * @param {string} parameters.providerLocation.country The name of the country.
     *
     * @param {string} [parameters.providerLocation.state] The name of the state.
     *
     * @param {string} [parameters.providerLocation.city] The name of the city or
     * town.
     *
     * @param {array} [parameters.providers] List of Internet service providers.
     *
     * @param {array} [parameters.azureLocations] Optional Azure regions to scope
     * the query to.
     *
     * @param {date} parameters.startTime The start time for the Azure reachability
     * report.
     *
     * @param {date} parameters.endTime The end time for the Azure reachability
     * report.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AzureReachabilityReport} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AzureReachabilityReport} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AzureReachabilityReport} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginGetAzureReachabilityReport(resourceGroupName: string, networkWatcherName: string, parameters: models.AzureReachabilityReportParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AzureReachabilityReport>;
    beginGetAzureReachabilityReport(resourceGroupName: string, networkWatcherName: string, parameters: models.AzureReachabilityReportParameters, callback: ServiceCallback<models.AzureReachabilityReport>): void;
    beginGetAzureReachabilityReport(resourceGroupName: string, networkWatcherName: string, parameters: models.AzureReachabilityReportParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AzureReachabilityReport>): void;


    /**
     * Lists all available internet service providers for a specified Azure region.
     *
     * @param {string} resourceGroupName The name of the network watcher resource
     * group.
     *
     * @param {string} networkWatcherName The name of the network watcher resource.
     *
     * @param {object} parameters Parameters that scope the list of available
     * providers.
     *
     * @param {array} [parameters.azureLocations] A list of Azure regions.
     *
     * @param {string} [parameters.country] The country for available providers
     * list.
     *
     * @param {string} [parameters.state] The state for available providers list.
     *
     * @param {string} [parameters.city] The city or town for available providers
     * list.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AvailableProvidersList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginListAvailableProvidersWithHttpOperationResponse(resourceGroupName: string, networkWatcherName: string, parameters: models.AvailableProvidersListParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AvailableProvidersList>>;

    /**
     * Lists all available internet service providers for a specified Azure region.
     *
     * @param {string} resourceGroupName The name of the network watcher resource
     * group.
     *
     * @param {string} networkWatcherName The name of the network watcher resource.
     *
     * @param {object} parameters Parameters that scope the list of available
     * providers.
     *
     * @param {array} [parameters.azureLocations] A list of Azure regions.
     *
     * @param {string} [parameters.country] The country for available providers
     * list.
     *
     * @param {string} [parameters.state] The state for available providers list.
     *
     * @param {string} [parameters.city] The city or town for available providers
     * list.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AvailableProvidersList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AvailableProvidersList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AvailableProvidersList} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginListAvailableProviders(resourceGroupName: string, networkWatcherName: string, parameters: models.AvailableProvidersListParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AvailableProvidersList>;
    beginListAvailableProviders(resourceGroupName: string, networkWatcherName: string, parameters: models.AvailableProvidersListParameters, callback: ServiceCallback<models.AvailableProvidersList>): void;
    beginListAvailableProviders(resourceGroupName: string, networkWatcherName: string, parameters: models.AvailableProvidersListParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AvailableProvidersList>): void;
}

/**
 * @class
 * PacketCaptures
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the NetworkManagementClient.
 */
export interface PacketCaptures {


    /**
     * Create and start a packet capture on the specified VM.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkWatcherName The name of the network watcher.
     *
     * @param {string} packetCaptureName The name of the packet capture session.
     *
     * @param {object} parameters Parameters that define the create packet capture
     * operation.
     *
     * @param {string} parameters.target The ID of the targeted resource, only VM
     * is currently supported.
     *
     * @param {number} [parameters.bytesToCapturePerPacket] Number of bytes
     * captured per packet, the remaining bytes are truncated.
     *
     * @param {number} [parameters.totalBytesPerSession] Maximum size of the
     * capture output.
     *
     * @param {number} [parameters.timeLimitInSeconds] Maximum duration of the
     * capture session in seconds.
     *
     * @param {object} parameters.storageLocation
     *
     * @param {string} [parameters.storageLocation.storageId] The ID of the storage
     * account to save the packet capture session. Required if no local file path
     * is provided.
     *
     * @param {string} [parameters.storageLocation.storagePath] The URI of the
     * storage path to save the packet capture. Must be a well-formed URI
     * describing the location to save the packet capture.
     *
     * @param {string} [parameters.storageLocation.filePath] A valid local path on
     * the targeting VM. Must include the name of the capture file (*.cap). For
     * linux virtual machine it must start with /var/captures. Required if no
     * storage ID is provided, otherwise optional.
     *
     * @param {array} [parameters.filters]
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PacketCaptureResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createWithHttpOperationResponse(resourceGroupName: string, networkWatcherName: string, packetCaptureName: string, parameters: models.PacketCapture, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PacketCaptureResult>>;

    /**
     * Create and start a packet capture on the specified VM.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkWatcherName The name of the network watcher.
     *
     * @param {string} packetCaptureName The name of the packet capture session.
     *
     * @param {object} parameters Parameters that define the create packet capture
     * operation.
     *
     * @param {string} parameters.target The ID of the targeted resource, only VM
     * is currently supported.
     *
     * @param {number} [parameters.bytesToCapturePerPacket] Number of bytes
     * captured per packet, the remaining bytes are truncated.
     *
     * @param {number} [parameters.totalBytesPerSession] Maximum size of the
     * capture output.
     *
     * @param {number} [parameters.timeLimitInSeconds] Maximum duration of the
     * capture session in seconds.
     *
     * @param {object} parameters.storageLocation
     *
     * @param {string} [parameters.storageLocation.storageId] The ID of the storage
     * account to save the packet capture session. Required if no local file path
     * is provided.
     *
     * @param {string} [parameters.storageLocation.storagePath] The URI of the
     * storage path to save the packet capture. Must be a well-formed URI
     * describing the location to save the packet capture.
     *
     * @param {string} [parameters.storageLocation.filePath] A valid local path on
     * the targeting VM. Must include the name of the capture file (*.cap). For
     * linux virtual machine it must start with /var/captures. Required if no
     * storage ID is provided, otherwise optional.
     *
     * @param {array} [parameters.filters]
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PacketCaptureResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PacketCaptureResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PacketCaptureResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    create(resourceGroupName: string, networkWatcherName: string, packetCaptureName: string, parameters: models.PacketCapture, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PacketCaptureResult>;
    create(resourceGroupName: string, networkWatcherName: string, packetCaptureName: string, parameters: models.PacketCapture, callback: ServiceCallback<models.PacketCaptureResult>): void;
    create(resourceGroupName: string, networkWatcherName: string, packetCaptureName: string, parameters: models.PacketCapture, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PacketCaptureResult>): void;


    /**
     * Gets a packet capture session by name.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkWatcherName The name of the network watcher.
     *
     * @param {string} packetCaptureName The name of the packet capture session.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PacketCaptureResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, networkWatcherName: string, packetCaptureName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PacketCaptureResult>>;

    /**
     * Gets a packet capture session by name.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkWatcherName The name of the network watcher.
     *
     * @param {string} packetCaptureName The name of the packet capture session.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PacketCaptureResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PacketCaptureResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PacketCaptureResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, networkWatcherName: string, packetCaptureName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PacketCaptureResult>;
    get(resourceGroupName: string, networkWatcherName: string, packetCaptureName: string, callback: ServiceCallback<models.PacketCaptureResult>): void;
    get(resourceGroupName: string, networkWatcherName: string, packetCaptureName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PacketCaptureResult>): void;


    /**
     * Deletes the specified packet capture session.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkWatcherName The name of the network watcher.
     *
     * @param {string} packetCaptureName The name of the packet capture session.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, networkWatcherName: string, packetCaptureName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the specified packet capture session.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkWatcherName The name of the network watcher.
     *
     * @param {string} packetCaptureName The name of the packet capture session.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, networkWatcherName: string, packetCaptureName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, networkWatcherName: string, packetCaptureName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, networkWatcherName: string, packetCaptureName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Stops a specified packet capture session.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkWatcherName The name of the network watcher.
     *
     * @param {string} packetCaptureName The name of the packet capture session.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    stopWithHttpOperationResponse(resourceGroupName: string, networkWatcherName: string, packetCaptureName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Stops a specified packet capture session.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkWatcherName The name of the network watcher.
     *
     * @param {string} packetCaptureName The name of the packet capture session.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    stop(resourceGroupName: string, networkWatcherName: string, packetCaptureName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    stop(resourceGroupName: string, networkWatcherName: string, packetCaptureName: string, callback: ServiceCallback<void>): void;
    stop(resourceGroupName: string, networkWatcherName: string, packetCaptureName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Query the status of a running packet capture session.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkWatcherName The name of the Network Watcher resource.
     *
     * @param {string} packetCaptureName The name given to the packet capture
     * session.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PacketCaptureQueryStatusResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getStatusWithHttpOperationResponse(resourceGroupName: string, networkWatcherName: string, packetCaptureName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PacketCaptureQueryStatusResult>>;

    /**
     * Query the status of a running packet capture session.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkWatcherName The name of the Network Watcher resource.
     *
     * @param {string} packetCaptureName The name given to the packet capture
     * session.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PacketCaptureQueryStatusResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PacketCaptureQueryStatusResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PacketCaptureQueryStatusResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getStatus(resourceGroupName: string, networkWatcherName: string, packetCaptureName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PacketCaptureQueryStatusResult>;
    getStatus(resourceGroupName: string, networkWatcherName: string, packetCaptureName: string, callback: ServiceCallback<models.PacketCaptureQueryStatusResult>): void;
    getStatus(resourceGroupName: string, networkWatcherName: string, packetCaptureName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PacketCaptureQueryStatusResult>): void;


    /**
     * Lists all packet capture sessions within the specified resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkWatcherName The name of the Network Watcher resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PacketCaptureListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(resourceGroupName: string, networkWatcherName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PacketCaptureListResult>>;

    /**
     * Lists all packet capture sessions within the specified resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkWatcherName The name of the Network Watcher resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PacketCaptureListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PacketCaptureListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PacketCaptureListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(resourceGroupName: string, networkWatcherName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PacketCaptureListResult>;
    list(resourceGroupName: string, networkWatcherName: string, callback: ServiceCallback<models.PacketCaptureListResult>): void;
    list(resourceGroupName: string, networkWatcherName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PacketCaptureListResult>): void;


    /**
     * Create and start a packet capture on the specified VM.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkWatcherName The name of the network watcher.
     *
     * @param {string} packetCaptureName The name of the packet capture session.
     *
     * @param {object} parameters Parameters that define the create packet capture
     * operation.
     *
     * @param {string} parameters.target The ID of the targeted resource, only VM
     * is currently supported.
     *
     * @param {number} [parameters.bytesToCapturePerPacket] Number of bytes
     * captured per packet, the remaining bytes are truncated.
     *
     * @param {number} [parameters.totalBytesPerSession] Maximum size of the
     * capture output.
     *
     * @param {number} [parameters.timeLimitInSeconds] Maximum duration of the
     * capture session in seconds.
     *
     * @param {object} parameters.storageLocation
     *
     * @param {string} [parameters.storageLocation.storageId] The ID of the storage
     * account to save the packet capture session. Required if no local file path
     * is provided.
     *
     * @param {string} [parameters.storageLocation.storagePath] The URI of the
     * storage path to save the packet capture. Must be a well-formed URI
     * describing the location to save the packet capture.
     *
     * @param {string} [parameters.storageLocation.filePath] A valid local path on
     * the targeting VM. Must include the name of the capture file (*.cap). For
     * linux virtual machine it must start with /var/captures. Required if no
     * storage ID is provided, otherwise optional.
     *
     * @param {array} [parameters.filters]
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PacketCaptureResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateWithHttpOperationResponse(resourceGroupName: string, networkWatcherName: string, packetCaptureName: string, parameters: models.PacketCapture, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PacketCaptureResult>>;

    /**
     * Create and start a packet capture on the specified VM.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkWatcherName The name of the network watcher.
     *
     * @param {string} packetCaptureName The name of the packet capture session.
     *
     * @param {object} parameters Parameters that define the create packet capture
     * operation.
     *
     * @param {string} parameters.target The ID of the targeted resource, only VM
     * is currently supported.
     *
     * @param {number} [parameters.bytesToCapturePerPacket] Number of bytes
     * captured per packet, the remaining bytes are truncated.
     *
     * @param {number} [parameters.totalBytesPerSession] Maximum size of the
     * capture output.
     *
     * @param {number} [parameters.timeLimitInSeconds] Maximum duration of the
     * capture session in seconds.
     *
     * @param {object} parameters.storageLocation
     *
     * @param {string} [parameters.storageLocation.storageId] The ID of the storage
     * account to save the packet capture session. Required if no local file path
     * is provided.
     *
     * @param {string} [parameters.storageLocation.storagePath] The URI of the
     * storage path to save the packet capture. Must be a well-formed URI
     * describing the location to save the packet capture.
     *
     * @param {string} [parameters.storageLocation.filePath] A valid local path on
     * the targeting VM. Must include the name of the capture file (*.cap). For
     * linux virtual machine it must start with /var/captures. Required if no
     * storage ID is provided, otherwise optional.
     *
     * @param {array} [parameters.filters]
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PacketCaptureResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PacketCaptureResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PacketCaptureResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreate(resourceGroupName: string, networkWatcherName: string, packetCaptureName: string, parameters: models.PacketCapture, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PacketCaptureResult>;
    beginCreate(resourceGroupName: string, networkWatcherName: string, packetCaptureName: string, parameters: models.PacketCapture, callback: ServiceCallback<models.PacketCaptureResult>): void;
    beginCreate(resourceGroupName: string, networkWatcherName: string, packetCaptureName: string, parameters: models.PacketCapture, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PacketCaptureResult>): void;


    /**
     * Deletes the specified packet capture session.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkWatcherName The name of the network watcher.
     *
     * @param {string} packetCaptureName The name of the packet capture session.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, networkWatcherName: string, packetCaptureName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the specified packet capture session.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkWatcherName The name of the network watcher.
     *
     * @param {string} packetCaptureName The name of the packet capture session.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(resourceGroupName: string, networkWatcherName: string, packetCaptureName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(resourceGroupName: string, networkWatcherName: string, packetCaptureName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, networkWatcherName: string, packetCaptureName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Stops a specified packet capture session.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkWatcherName The name of the network watcher.
     *
     * @param {string} packetCaptureName The name of the packet capture session.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginStopWithHttpOperationResponse(resourceGroupName: string, networkWatcherName: string, packetCaptureName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Stops a specified packet capture session.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkWatcherName The name of the network watcher.
     *
     * @param {string} packetCaptureName The name of the packet capture session.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginStop(resourceGroupName: string, networkWatcherName: string, packetCaptureName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginStop(resourceGroupName: string, networkWatcherName: string, packetCaptureName: string, callback: ServiceCallback<void>): void;
    beginStop(resourceGroupName: string, networkWatcherName: string, packetCaptureName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Query the status of a running packet capture session.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkWatcherName The name of the Network Watcher resource.
     *
     * @param {string} packetCaptureName The name given to the packet capture
     * session.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PacketCaptureQueryStatusResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginGetStatusWithHttpOperationResponse(resourceGroupName: string, networkWatcherName: string, packetCaptureName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PacketCaptureQueryStatusResult>>;

    /**
     * Query the status of a running packet capture session.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkWatcherName The name of the Network Watcher resource.
     *
     * @param {string} packetCaptureName The name given to the packet capture
     * session.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PacketCaptureQueryStatusResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PacketCaptureQueryStatusResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PacketCaptureQueryStatusResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginGetStatus(resourceGroupName: string, networkWatcherName: string, packetCaptureName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PacketCaptureQueryStatusResult>;
    beginGetStatus(resourceGroupName: string, networkWatcherName: string, packetCaptureName: string, callback: ServiceCallback<models.PacketCaptureQueryStatusResult>): void;
    beginGetStatus(resourceGroupName: string, networkWatcherName: string, packetCaptureName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PacketCaptureQueryStatusResult>): void;
}

/**
 * @class
 * ConnectionMonitors
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the NetworkManagementClient.
 */
export interface ConnectionMonitors {


    /**
     * Create or update a connection monitor.
     *
     * @param {string} resourceGroupName The name of the resource group containing
     * Network Watcher.
     *
     * @param {string} networkWatcherName The name of the Network Watcher resource.
     *
     * @param {string} connectionMonitorName The name of the connection monitor.
     *
     * @param {object} parameters Parameters that define the operation to create a
     * connection monitor.
     *
     * @param {string} [parameters.location] Connection monitor location.
     *
     * @param {object} [parameters.tags] Connection monitor tags.
     *
     * @param {object} parameters.source
     *
     * @param {string} parameters.source.resourceId The ID of the resource used as
     * the source by connection monitor.
     *
     * @param {number} [parameters.source.port] The source port used by connection
     * monitor.
     *
     * @param {object} parameters.destination
     *
     * @param {string} [parameters.destination.resourceId] The ID of the resource
     * used as the destination by connection monitor.
     *
     * @param {string} [parameters.destination.address] Address of the connection
     * monitor destination (IP or domain name).
     *
     * @param {number} [parameters.destination.port] The destination port used by
     * connection monitor.
     *
     * @param {boolean} [parameters.autoStart] Determines if the connection monitor
     * will start automatically once created.
     *
     * @param {number} [parameters.monitoringIntervalInSeconds] Monitoring interval
     * in seconds.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ConnectionMonitorResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, networkWatcherName: string, connectionMonitorName: string, parameters: models.ConnectionMonitor, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ConnectionMonitorResult>>;

    /**
     * Create or update a connection monitor.
     *
     * @param {string} resourceGroupName The name of the resource group containing
     * Network Watcher.
     *
     * @param {string} networkWatcherName The name of the Network Watcher resource.
     *
     * @param {string} connectionMonitorName The name of the connection monitor.
     *
     * @param {object} parameters Parameters that define the operation to create a
     * connection monitor.
     *
     * @param {string} [parameters.location] Connection monitor location.
     *
     * @param {object} [parameters.tags] Connection monitor tags.
     *
     * @param {object} parameters.source
     *
     * @param {string} parameters.source.resourceId The ID of the resource used as
     * the source by connection monitor.
     *
     * @param {number} [parameters.source.port] The source port used by connection
     * monitor.
     *
     * @param {object} parameters.destination
     *
     * @param {string} [parameters.destination.resourceId] The ID of the resource
     * used as the destination by connection monitor.
     *
     * @param {string} [parameters.destination.address] Address of the connection
     * monitor destination (IP or domain name).
     *
     * @param {number} [parameters.destination.port] The destination port used by
     * connection monitor.
     *
     * @param {boolean} [parameters.autoStart] Determines if the connection monitor
     * will start automatically once created.
     *
     * @param {number} [parameters.monitoringIntervalInSeconds] Monitoring interval
     * in seconds.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ConnectionMonitorResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ConnectionMonitorResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ConnectionMonitorResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, networkWatcherName: string, connectionMonitorName: string, parameters: models.ConnectionMonitor, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ConnectionMonitorResult>;
    createOrUpdate(resourceGroupName: string, networkWatcherName: string, connectionMonitorName: string, parameters: models.ConnectionMonitor, callback: ServiceCallback<models.ConnectionMonitorResult>): void;
    createOrUpdate(resourceGroupName: string, networkWatcherName: string, connectionMonitorName: string, parameters: models.ConnectionMonitor, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ConnectionMonitorResult>): void;


    /**
     * Gets a connection monitor by name.
     *
     * @param {string} resourceGroupName The name of the resource group containing
     * Network Watcher.
     *
     * @param {string} networkWatcherName The name of the Network Watcher resource.
     *
     * @param {string} connectionMonitorName The name of the connection monitor.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ConnectionMonitorResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, networkWatcherName: string, connectionMonitorName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ConnectionMonitorResult>>;

    /**
     * Gets a connection monitor by name.
     *
     * @param {string} resourceGroupName The name of the resource group containing
     * Network Watcher.
     *
     * @param {string} networkWatcherName The name of the Network Watcher resource.
     *
     * @param {string} connectionMonitorName The name of the connection monitor.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ConnectionMonitorResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ConnectionMonitorResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ConnectionMonitorResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, networkWatcherName: string, connectionMonitorName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ConnectionMonitorResult>;
    get(resourceGroupName: string, networkWatcherName: string, connectionMonitorName: string, callback: ServiceCallback<models.ConnectionMonitorResult>): void;
    get(resourceGroupName: string, networkWatcherName: string, connectionMonitorName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ConnectionMonitorResult>): void;


    /**
     * Deletes the specified connection monitor.
     *
     * @param {string} resourceGroupName The name of the resource group containing
     * Network Watcher.
     *
     * @param {string} networkWatcherName The name of the Network Watcher resource.
     *
     * @param {string} connectionMonitorName The name of the connection monitor.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, networkWatcherName: string, connectionMonitorName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the specified connection monitor.
     *
     * @param {string} resourceGroupName The name of the resource group containing
     * Network Watcher.
     *
     * @param {string} networkWatcherName The name of the Network Watcher resource.
     *
     * @param {string} connectionMonitorName The name of the connection monitor.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, networkWatcherName: string, connectionMonitorName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, networkWatcherName: string, connectionMonitorName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, networkWatcherName: string, connectionMonitorName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Stops the specified connection monitor.
     *
     * @param {string} resourceGroupName The name of the resource group containing
     * Network Watcher.
     *
     * @param {string} networkWatcherName The name of the Network Watcher resource.
     *
     * @param {string} connectionMonitorName The name of the connection monitor.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    stopWithHttpOperationResponse(resourceGroupName: string, networkWatcherName: string, connectionMonitorName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Stops the specified connection monitor.
     *
     * @param {string} resourceGroupName The name of the resource group containing
     * Network Watcher.
     *
     * @param {string} networkWatcherName The name of the Network Watcher resource.
     *
     * @param {string} connectionMonitorName The name of the connection monitor.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    stop(resourceGroupName: string, networkWatcherName: string, connectionMonitorName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    stop(resourceGroupName: string, networkWatcherName: string, connectionMonitorName: string, callback: ServiceCallback<void>): void;
    stop(resourceGroupName: string, networkWatcherName: string, connectionMonitorName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Starts the specified connection monitor.
     *
     * @param {string} resourceGroupName The name of the resource group containing
     * Network Watcher.
     *
     * @param {string} networkWatcherName The name of the Network Watcher resource.
     *
     * @param {string} connectionMonitorName The name of the connection monitor.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    startWithHttpOperationResponse(resourceGroupName: string, networkWatcherName: string, connectionMonitorName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Starts the specified connection monitor.
     *
     * @param {string} resourceGroupName The name of the resource group containing
     * Network Watcher.
     *
     * @param {string} networkWatcherName The name of the Network Watcher resource.
     *
     * @param {string} connectionMonitorName The name of the connection monitor.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    start(resourceGroupName: string, networkWatcherName: string, connectionMonitorName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    start(resourceGroupName: string, networkWatcherName: string, connectionMonitorName: string, callback: ServiceCallback<void>): void;
    start(resourceGroupName: string, networkWatcherName: string, connectionMonitorName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Query a snapshot of the most recent connection states.
     *
     * @param {string} resourceGroupName The name of the resource group containing
     * Network Watcher.
     *
     * @param {string} networkWatcherName The name of the Network Watcher resource.
     *
     * @param {string} connectionMonitorName The name given to the connection
     * monitor.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ConnectionMonitorQueryResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    queryWithHttpOperationResponse(resourceGroupName: string, networkWatcherName: string, connectionMonitorName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ConnectionMonitorQueryResult>>;

    /**
     * Query a snapshot of the most recent connection states.
     *
     * @param {string} resourceGroupName The name of the resource group containing
     * Network Watcher.
     *
     * @param {string} networkWatcherName The name of the Network Watcher resource.
     *
     * @param {string} connectionMonitorName The name given to the connection
     * monitor.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ConnectionMonitorQueryResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ConnectionMonitorQueryResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ConnectionMonitorQueryResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    query(resourceGroupName: string, networkWatcherName: string, connectionMonitorName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ConnectionMonitorQueryResult>;
    query(resourceGroupName: string, networkWatcherName: string, connectionMonitorName: string, callback: ServiceCallback<models.ConnectionMonitorQueryResult>): void;
    query(resourceGroupName: string, networkWatcherName: string, connectionMonitorName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ConnectionMonitorQueryResult>): void;


    /**
     * Lists all connection monitors for the specified Network Watcher.
     *
     * @param {string} resourceGroupName The name of the resource group containing
     * Network Watcher.
     *
     * @param {string} networkWatcherName The name of the Network Watcher resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ConnectionMonitorListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(resourceGroupName: string, networkWatcherName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ConnectionMonitorListResult>>;

    /**
     * Lists all connection monitors for the specified Network Watcher.
     *
     * @param {string} resourceGroupName The name of the resource group containing
     * Network Watcher.
     *
     * @param {string} networkWatcherName The name of the Network Watcher resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ConnectionMonitorListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ConnectionMonitorListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ConnectionMonitorListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(resourceGroupName: string, networkWatcherName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ConnectionMonitorListResult>;
    list(resourceGroupName: string, networkWatcherName: string, callback: ServiceCallback<models.ConnectionMonitorListResult>): void;
    list(resourceGroupName: string, networkWatcherName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ConnectionMonitorListResult>): void;


    /**
     * Create or update a connection monitor.
     *
     * @param {string} resourceGroupName The name of the resource group containing
     * Network Watcher.
     *
     * @param {string} networkWatcherName The name of the Network Watcher resource.
     *
     * @param {string} connectionMonitorName The name of the connection monitor.
     *
     * @param {object} parameters Parameters that define the operation to create a
     * connection monitor.
     *
     * @param {string} [parameters.location] Connection monitor location.
     *
     * @param {object} [parameters.tags] Connection monitor tags.
     *
     * @param {object} parameters.source
     *
     * @param {string} parameters.source.resourceId The ID of the resource used as
     * the source by connection monitor.
     *
     * @param {number} [parameters.source.port] The source port used by connection
     * monitor.
     *
     * @param {object} parameters.destination
     *
     * @param {string} [parameters.destination.resourceId] The ID of the resource
     * used as the destination by connection monitor.
     *
     * @param {string} [parameters.destination.address] Address of the connection
     * monitor destination (IP or domain name).
     *
     * @param {number} [parameters.destination.port] The destination port used by
     * connection monitor.
     *
     * @param {boolean} [parameters.autoStart] Determines if the connection monitor
     * will start automatically once created.
     *
     * @param {number} [parameters.monitoringIntervalInSeconds] Monitoring interval
     * in seconds.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ConnectionMonitorResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, networkWatcherName: string, connectionMonitorName: string, parameters: models.ConnectionMonitor, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ConnectionMonitorResult>>;

    /**
     * Create or update a connection monitor.
     *
     * @param {string} resourceGroupName The name of the resource group containing
     * Network Watcher.
     *
     * @param {string} networkWatcherName The name of the Network Watcher resource.
     *
     * @param {string} connectionMonitorName The name of the connection monitor.
     *
     * @param {object} parameters Parameters that define the operation to create a
     * connection monitor.
     *
     * @param {string} [parameters.location] Connection monitor location.
     *
     * @param {object} [parameters.tags] Connection monitor tags.
     *
     * @param {object} parameters.source
     *
     * @param {string} parameters.source.resourceId The ID of the resource used as
     * the source by connection monitor.
     *
     * @param {number} [parameters.source.port] The source port used by connection
     * monitor.
     *
     * @param {object} parameters.destination
     *
     * @param {string} [parameters.destination.resourceId] The ID of the resource
     * used as the destination by connection monitor.
     *
     * @param {string} [parameters.destination.address] Address of the connection
     * monitor destination (IP or domain name).
     *
     * @param {number} [parameters.destination.port] The destination port used by
     * connection monitor.
     *
     * @param {boolean} [parameters.autoStart] Determines if the connection monitor
     * will start automatically once created.
     *
     * @param {number} [parameters.monitoringIntervalInSeconds] Monitoring interval
     * in seconds.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ConnectionMonitorResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ConnectionMonitorResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ConnectionMonitorResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(resourceGroupName: string, networkWatcherName: string, connectionMonitorName: string, parameters: models.ConnectionMonitor, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ConnectionMonitorResult>;
    beginCreateOrUpdate(resourceGroupName: string, networkWatcherName: string, connectionMonitorName: string, parameters: models.ConnectionMonitor, callback: ServiceCallback<models.ConnectionMonitorResult>): void;
    beginCreateOrUpdate(resourceGroupName: string, networkWatcherName: string, connectionMonitorName: string, parameters: models.ConnectionMonitor, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ConnectionMonitorResult>): void;


    /**
     * Deletes the specified connection monitor.
     *
     * @param {string} resourceGroupName The name of the resource group containing
     * Network Watcher.
     *
     * @param {string} networkWatcherName The name of the Network Watcher resource.
     *
     * @param {string} connectionMonitorName The name of the connection monitor.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, networkWatcherName: string, connectionMonitorName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the specified connection monitor.
     *
     * @param {string} resourceGroupName The name of the resource group containing
     * Network Watcher.
     *
     * @param {string} networkWatcherName The name of the Network Watcher resource.
     *
     * @param {string} connectionMonitorName The name of the connection monitor.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(resourceGroupName: string, networkWatcherName: string, connectionMonitorName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(resourceGroupName: string, networkWatcherName: string, connectionMonitorName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, networkWatcherName: string, connectionMonitorName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Stops the specified connection monitor.
     *
     * @param {string} resourceGroupName The name of the resource group containing
     * Network Watcher.
     *
     * @param {string} networkWatcherName The name of the Network Watcher resource.
     *
     * @param {string} connectionMonitorName The name of the connection monitor.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginStopWithHttpOperationResponse(resourceGroupName: string, networkWatcherName: string, connectionMonitorName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Stops the specified connection monitor.
     *
     * @param {string} resourceGroupName The name of the resource group containing
     * Network Watcher.
     *
     * @param {string} networkWatcherName The name of the Network Watcher resource.
     *
     * @param {string} connectionMonitorName The name of the connection monitor.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginStop(resourceGroupName: string, networkWatcherName: string, connectionMonitorName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginStop(resourceGroupName: string, networkWatcherName: string, connectionMonitorName: string, callback: ServiceCallback<void>): void;
    beginStop(resourceGroupName: string, networkWatcherName: string, connectionMonitorName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Starts the specified connection monitor.
     *
     * @param {string} resourceGroupName The name of the resource group containing
     * Network Watcher.
     *
     * @param {string} networkWatcherName The name of the Network Watcher resource.
     *
     * @param {string} connectionMonitorName The name of the connection monitor.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginStartWithHttpOperationResponse(resourceGroupName: string, networkWatcherName: string, connectionMonitorName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Starts the specified connection monitor.
     *
     * @param {string} resourceGroupName The name of the resource group containing
     * Network Watcher.
     *
     * @param {string} networkWatcherName The name of the Network Watcher resource.
     *
     * @param {string} connectionMonitorName The name of the connection monitor.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginStart(resourceGroupName: string, networkWatcherName: string, connectionMonitorName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginStart(resourceGroupName: string, networkWatcherName: string, connectionMonitorName: string, callback: ServiceCallback<void>): void;
    beginStart(resourceGroupName: string, networkWatcherName: string, connectionMonitorName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Query a snapshot of the most recent connection states.
     *
     * @param {string} resourceGroupName The name of the resource group containing
     * Network Watcher.
     *
     * @param {string} networkWatcherName The name of the Network Watcher resource.
     *
     * @param {string} connectionMonitorName The name given to the connection
     * monitor.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ConnectionMonitorQueryResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginQueryWithHttpOperationResponse(resourceGroupName: string, networkWatcherName: string, connectionMonitorName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ConnectionMonitorQueryResult>>;

    /**
     * Query a snapshot of the most recent connection states.
     *
     * @param {string} resourceGroupName The name of the resource group containing
     * Network Watcher.
     *
     * @param {string} networkWatcherName The name of the Network Watcher resource.
     *
     * @param {string} connectionMonitorName The name given to the connection
     * monitor.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ConnectionMonitorQueryResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ConnectionMonitorQueryResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ConnectionMonitorQueryResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginQuery(resourceGroupName: string, networkWatcherName: string, connectionMonitorName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ConnectionMonitorQueryResult>;
    beginQuery(resourceGroupName: string, networkWatcherName: string, connectionMonitorName: string, callback: ServiceCallback<models.ConnectionMonitorQueryResult>): void;
    beginQuery(resourceGroupName: string, networkWatcherName: string, connectionMonitorName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ConnectionMonitorQueryResult>): void;
}

/**
 * @class
 * Operations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the NetworkManagementClient.
 */
export interface Operations {


    /**
     * Lists all of the available Network Rest API operations.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OperationListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OperationListResult>>;

    /**
     * Lists all of the available Network Rest API operations.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OperationListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OperationListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OperationListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.OperationListResult>;
    list(callback: ServiceCallback<models.OperationListResult>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OperationListResult>): void;


    /**
     * Lists all of the available Network Rest API operations.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OperationListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OperationListResult>>;

    /**
     * Lists all of the available Network Rest API operations.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OperationListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OperationListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OperationListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.OperationListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.OperationListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OperationListResult>): void;
}

/**
 * @class
 * PublicIPAddresses
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the NetworkManagementClient.
 */
export interface PublicIPAddresses {


    /**
     * Deletes the specified public IP address.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} publicIpAddressName The name of the subnet.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, publicIpAddressName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the specified public IP address.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} publicIpAddressName The name of the subnet.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, publicIpAddressName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, publicIpAddressName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, publicIpAddressName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets the specified public IP address in a specified resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} publicIpAddressName The name of the subnet.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Expands referenced resources.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PublicIPAddress>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, publicIpAddressName: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PublicIPAddress>>;

    /**
     * Gets the specified public IP address in a specified resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} publicIpAddressName The name of the subnet.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Expands referenced resources.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PublicIPAddress} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PublicIPAddress} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PublicIPAddress} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, publicIpAddressName: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.PublicIPAddress>;
    get(resourceGroupName: string, publicIpAddressName: string, callback: ServiceCallback<models.PublicIPAddress>): void;
    get(resourceGroupName: string, publicIpAddressName: string, options: { expand? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PublicIPAddress>): void;


    /**
     * Creates or updates a static or dynamic public IP address.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} publicIpAddressName The name of the public IP address.
     *
     * @param {object} parameters Parameters supplied to the create or update
     * public IP address operation.
     *
     * @param {object} [parameters.sku] The public IP address SKU.
     *
     * @param {string} [parameters.sku.name] Name of a public IP address SKU.
     * Possible values include: 'Basic', 'Standard'
     *
     * @param {string} [parameters.publicIPAllocationMethod] The public IP
     * allocation method. Possible values are: 'Static' and 'Dynamic'. Possible
     * values include: 'Static', 'Dynamic'
     *
     * @param {string} [parameters.publicIPAddressVersion] The public IP address
     * version. Possible values are: 'IPv4' and 'IPv6'. Possible values include:
     * 'IPv4', 'IPv6'
     *
     * @param {object} [parameters.dnsSettings] The FQDN of the DNS record
     * associated with the public IP address.
     *
     * @param {string} [parameters.dnsSettings.domainNameLabel] Gets or sets the
     * Domain name label.The concatenation of the domain name label and the
     * regionalized DNS zone make up the fully qualified domain name associated
     * with the public IP address. If a domain name label is specified, an A DNS
     * record is created for the public IP in the Microsoft Azure DNS system.
     *
     * @param {string} [parameters.dnsSettings.fqdn] Gets the FQDN, Fully qualified
     * domain name of the A DNS record associated with the public IP. This is the
     * concatenation of the domainNameLabel and the regionalized DNS zone.
     *
     * @param {string} [parameters.dnsSettings.reverseFqdn] Gets or Sets the
     * Reverse FQDN. A user-visible, fully qualified domain name that resolves to
     * this public IP address. If the reverseFqdn is specified, then a PTR DNS
     * record is created pointing from the IP address in the in-addr.arpa domain to
     * the reverse FQDN.
     *
     * @param {array} [parameters.ipTags] The list of tags associated with the
     * public IP address.
     *
     * @param {string} [parameters.ipAddress] The IP address associated with the
     * public IP address resource.
     *
     * @param {number} [parameters.idleTimeoutInMinutes] The idle timeout of the
     * public IP address.
     *
     * @param {string} [parameters.resourceGuid] The resource GUID property of the
     * public IP resource.
     *
     * @param {string} [parameters.provisioningState] The provisioning state of the
     * PublicIP resource. Possible values are: 'Updating', 'Deleting', and
     * 'Failed'.
     *
     * @param {string} [parameters.etag] A unique read-only string that changes
     * whenever the resource is updated.
     *
     * @param {array} [parameters.zones] A list of availability zones denoting the
     * IP allocated for the resource needs to come from.
     *
     * @param {string} [parameters.id] Resource ID.
     *
     * @param {string} [parameters.location] Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PublicIPAddress>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, publicIpAddressName: string, parameters: models.PublicIPAddress, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PublicIPAddress>>;

    /**
     * Creates or updates a static or dynamic public IP address.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} publicIpAddressName The name of the public IP address.
     *
     * @param {object} parameters Parameters supplied to the create or update
     * public IP address operation.
     *
     * @param {object} [parameters.sku] The public IP address SKU.
     *
     * @param {string} [parameters.sku.name] Name of a public IP address SKU.
     * Possible values include: 'Basic', 'Standard'
     *
     * @param {string} [parameters.publicIPAllocationMethod] The public IP
     * allocation method. Possible values are: 'Static' and 'Dynamic'. Possible
     * values include: 'Static', 'Dynamic'
     *
     * @param {string} [parameters.publicIPAddressVersion] The public IP address
     * version. Possible values are: 'IPv4' and 'IPv6'. Possible values include:
     * 'IPv4', 'IPv6'
     *
     * @param {object} [parameters.dnsSettings] The FQDN of the DNS record
     * associated with the public IP address.
     *
     * @param {string} [parameters.dnsSettings.domainNameLabel] Gets or sets the
     * Domain name label.The concatenation of the domain name label and the
     * regionalized DNS zone make up the fully qualified domain name associated
     * with the public IP address. If a domain name label is specified, an A DNS
     * record is created for the public IP in the Microsoft Azure DNS system.
     *
     * @param {string} [parameters.dnsSettings.fqdn] Gets the FQDN, Fully qualified
     * domain name of the A DNS record associated with the public IP. This is the
     * concatenation of the domainNameLabel and the regionalized DNS zone.
     *
     * @param {string} [parameters.dnsSettings.reverseFqdn] Gets or Sets the
     * Reverse FQDN. A user-visible, fully qualified domain name that resolves to
     * this public IP address. If the reverseFqdn is specified, then a PTR DNS
     * record is created pointing from the IP address in the in-addr.arpa domain to
     * the reverse FQDN.
     *
     * @param {array} [parameters.ipTags] The list of tags associated with the
     * public IP address.
     *
     * @param {string} [parameters.ipAddress] The IP address associated with the
     * public IP address resource.
     *
     * @param {number} [parameters.idleTimeoutInMinutes] The idle timeout of the
     * public IP address.
     *
     * @param {string} [parameters.resourceGuid] The resource GUID property of the
     * public IP resource.
     *
     * @param {string} [parameters.provisioningState] The provisioning state of the
     * PublicIP resource. Possible values are: 'Updating', 'Deleting', and
     * 'Failed'.
     *
     * @param {string} [parameters.etag] A unique read-only string that changes
     * whenever the resource is updated.
     *
     * @param {array} [parameters.zones] A list of availability zones denoting the
     * IP allocated for the resource needs to come from.
     *
     * @param {string} [parameters.id] Resource ID.
     *
     * @param {string} [parameters.location] Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PublicIPAddress} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PublicIPAddress} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PublicIPAddress} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, publicIpAddressName: string, parameters: models.PublicIPAddress, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PublicIPAddress>;
    createOrUpdate(resourceGroupName: string, publicIpAddressName: string, parameters: models.PublicIPAddress, callback: ServiceCallback<models.PublicIPAddress>): void;
    createOrUpdate(resourceGroupName: string, publicIpAddressName: string, parameters: models.PublicIPAddress, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PublicIPAddress>): void;


    /**
     * Updates public IP address tags.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} publicIpAddressName The name of the public IP address.
     *
     * @param {object} parameters Parameters supplied to update public IP address
     * tags.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PublicIPAddress>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateTagsWithHttpOperationResponse(resourceGroupName: string, publicIpAddressName: string, parameters: models.TagsObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PublicIPAddress>>;

    /**
     * Updates public IP address tags.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} publicIpAddressName The name of the public IP address.
     *
     * @param {object} parameters Parameters supplied to update public IP address
     * tags.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PublicIPAddress} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PublicIPAddress} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PublicIPAddress} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updateTags(resourceGroupName: string, publicIpAddressName: string, parameters: models.TagsObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PublicIPAddress>;
    updateTags(resourceGroupName: string, publicIpAddressName: string, parameters: models.TagsObject, callback: ServiceCallback<models.PublicIPAddress>): void;
    updateTags(resourceGroupName: string, publicIpAddressName: string, parameters: models.TagsObject, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PublicIPAddress>): void;


    /**
     * Gets all the public IP addresses in a subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PublicIPAddressListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listAllWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PublicIPAddressListResult>>;

    /**
     * Gets all the public IP addresses in a subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PublicIPAddressListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PublicIPAddressListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PublicIPAddressListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listAll(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PublicIPAddressListResult>;
    listAll(callback: ServiceCallback<models.PublicIPAddressListResult>): void;
    listAll(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PublicIPAddressListResult>): void;


    /**
     * Gets all public IP addresses in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PublicIPAddressListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PublicIPAddressListResult>>;

    /**
     * Gets all public IP addresses in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PublicIPAddressListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PublicIPAddressListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PublicIPAddressListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PublicIPAddressListResult>;
    list(resourceGroupName: string, callback: ServiceCallback<models.PublicIPAddressListResult>): void;
    list(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PublicIPAddressListResult>): void;


    /**
     * Gets information about all public IP addresses on a virtual machine scale
     * set level.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualMachineScaleSetName The name of the virtual machine
     * scale set.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PublicIPAddressListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listVirtualMachineScaleSetPublicIPAddressesWithHttpOperationResponse(resourceGroupName: string, virtualMachineScaleSetName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PublicIPAddressListResult>>;

    /**
     * Gets information about all public IP addresses on a virtual machine scale
     * set level.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualMachineScaleSetName The name of the virtual machine
     * scale set.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PublicIPAddressListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PublicIPAddressListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PublicIPAddressListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listVirtualMachineScaleSetPublicIPAddresses(resourceGroupName: string, virtualMachineScaleSetName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PublicIPAddressListResult>;
    listVirtualMachineScaleSetPublicIPAddresses(resourceGroupName: string, virtualMachineScaleSetName: string, callback: ServiceCallback<models.PublicIPAddressListResult>): void;
    listVirtualMachineScaleSetPublicIPAddresses(resourceGroupName: string, virtualMachineScaleSetName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PublicIPAddressListResult>): void;


    /**
     * Gets information about all public IP addresses in a virtual machine IP
     * configuration in a virtual machine scale set.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualMachineScaleSetName The name of the virtual machine
     * scale set.
     *
     * @param {string} virtualmachineIndex The virtual machine index.
     *
     * @param {string} networkInterfaceName The network interface name.
     *
     * @param {string} ipConfigurationName The IP configuration name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PublicIPAddressListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listVirtualMachineScaleSetVMPublicIPAddressesWithHttpOperationResponse(resourceGroupName: string, virtualMachineScaleSetName: string, virtualmachineIndex: string, networkInterfaceName: string, ipConfigurationName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PublicIPAddressListResult>>;

    /**
     * Gets information about all public IP addresses in a virtual machine IP
     * configuration in a virtual machine scale set.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualMachineScaleSetName The name of the virtual machine
     * scale set.
     *
     * @param {string} virtualmachineIndex The virtual machine index.
     *
     * @param {string} networkInterfaceName The network interface name.
     *
     * @param {string} ipConfigurationName The IP configuration name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PublicIPAddressListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PublicIPAddressListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PublicIPAddressListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listVirtualMachineScaleSetVMPublicIPAddresses(resourceGroupName: string, virtualMachineScaleSetName: string, virtualmachineIndex: string, networkInterfaceName: string, ipConfigurationName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PublicIPAddressListResult>;
    listVirtualMachineScaleSetVMPublicIPAddresses(resourceGroupName: string, virtualMachineScaleSetName: string, virtualmachineIndex: string, networkInterfaceName: string, ipConfigurationName: string, callback: ServiceCallback<models.PublicIPAddressListResult>): void;
    listVirtualMachineScaleSetVMPublicIPAddresses(resourceGroupName: string, virtualMachineScaleSetName: string, virtualmachineIndex: string, networkInterfaceName: string, ipConfigurationName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PublicIPAddressListResult>): void;


    /**
     * Get the specified public IP address in a virtual machine scale set.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualMachineScaleSetName The name of the virtual machine
     * scale set.
     *
     * @param {string} virtualmachineIndex The virtual machine index.
     *
     * @param {string} networkInterfaceName The name of the network interface.
     *
     * @param {string} ipConfigurationName The name of the IP configuration.
     *
     * @param {string} publicIpAddressName The name of the public IP Address.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Expands referenced resources.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PublicIPAddress>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getVirtualMachineScaleSetPublicIPAddressWithHttpOperationResponse(resourceGroupName: string, virtualMachineScaleSetName: string, virtualmachineIndex: string, networkInterfaceName: string, ipConfigurationName: string, publicIpAddressName: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PublicIPAddress>>;

    /**
     * Get the specified public IP address in a virtual machine scale set.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualMachineScaleSetName The name of the virtual machine
     * scale set.
     *
     * @param {string} virtualmachineIndex The virtual machine index.
     *
     * @param {string} networkInterfaceName The name of the network interface.
     *
     * @param {string} ipConfigurationName The name of the IP configuration.
     *
     * @param {string} publicIpAddressName The name of the public IP Address.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Expands referenced resources.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PublicIPAddress} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PublicIPAddress} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PublicIPAddress} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getVirtualMachineScaleSetPublicIPAddress(resourceGroupName: string, virtualMachineScaleSetName: string, virtualmachineIndex: string, networkInterfaceName: string, ipConfigurationName: string, publicIpAddressName: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.PublicIPAddress>;
    getVirtualMachineScaleSetPublicIPAddress(resourceGroupName: string, virtualMachineScaleSetName: string, virtualmachineIndex: string, networkInterfaceName: string, ipConfigurationName: string, publicIpAddressName: string, callback: ServiceCallback<models.PublicIPAddress>): void;
    getVirtualMachineScaleSetPublicIPAddress(resourceGroupName: string, virtualMachineScaleSetName: string, virtualmachineIndex: string, networkInterfaceName: string, ipConfigurationName: string, publicIpAddressName: string, options: { expand? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PublicIPAddress>): void;


    /**
     * Deletes the specified public IP address.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} publicIpAddressName The name of the subnet.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, publicIpAddressName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the specified public IP address.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} publicIpAddressName The name of the subnet.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(resourceGroupName: string, publicIpAddressName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(resourceGroupName: string, publicIpAddressName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, publicIpAddressName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Creates or updates a static or dynamic public IP address.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} publicIpAddressName The name of the public IP address.
     *
     * @param {object} parameters Parameters supplied to the create or update
     * public IP address operation.
     *
     * @param {object} [parameters.sku] The public IP address SKU.
     *
     * @param {string} [parameters.sku.name] Name of a public IP address SKU.
     * Possible values include: 'Basic', 'Standard'
     *
     * @param {string} [parameters.publicIPAllocationMethod] The public IP
     * allocation method. Possible values are: 'Static' and 'Dynamic'. Possible
     * values include: 'Static', 'Dynamic'
     *
     * @param {string} [parameters.publicIPAddressVersion] The public IP address
     * version. Possible values are: 'IPv4' and 'IPv6'. Possible values include:
     * 'IPv4', 'IPv6'
     *
     * @param {object} [parameters.dnsSettings] The FQDN of the DNS record
     * associated with the public IP address.
     *
     * @param {string} [parameters.dnsSettings.domainNameLabel] Gets or sets the
     * Domain name label.The concatenation of the domain name label and the
     * regionalized DNS zone make up the fully qualified domain name associated
     * with the public IP address. If a domain name label is specified, an A DNS
     * record is created for the public IP in the Microsoft Azure DNS system.
     *
     * @param {string} [parameters.dnsSettings.fqdn] Gets the FQDN, Fully qualified
     * domain name of the A DNS record associated with the public IP. This is the
     * concatenation of the domainNameLabel and the regionalized DNS zone.
     *
     * @param {string} [parameters.dnsSettings.reverseFqdn] Gets or Sets the
     * Reverse FQDN. A user-visible, fully qualified domain name that resolves to
     * this public IP address. If the reverseFqdn is specified, then a PTR DNS
     * record is created pointing from the IP address in the in-addr.arpa domain to
     * the reverse FQDN.
     *
     * @param {array} [parameters.ipTags] The list of tags associated with the
     * public IP address.
     *
     * @param {string} [parameters.ipAddress] The IP address associated with the
     * public IP address resource.
     *
     * @param {number} [parameters.idleTimeoutInMinutes] The idle timeout of the
     * public IP address.
     *
     * @param {string} [parameters.resourceGuid] The resource GUID property of the
     * public IP resource.
     *
     * @param {string} [parameters.provisioningState] The provisioning state of the
     * PublicIP resource. Possible values are: 'Updating', 'Deleting', and
     * 'Failed'.
     *
     * @param {string} [parameters.etag] A unique read-only string that changes
     * whenever the resource is updated.
     *
     * @param {array} [parameters.zones] A list of availability zones denoting the
     * IP allocated for the resource needs to come from.
     *
     * @param {string} [parameters.id] Resource ID.
     *
     * @param {string} [parameters.location] Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PublicIPAddress>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, publicIpAddressName: string, parameters: models.PublicIPAddress, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PublicIPAddress>>;

    /**
     * Creates or updates a static or dynamic public IP address.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} publicIpAddressName The name of the public IP address.
     *
     * @param {object} parameters Parameters supplied to the create or update
     * public IP address operation.
     *
     * @param {object} [parameters.sku] The public IP address SKU.
     *
     * @param {string} [parameters.sku.name] Name of a public IP address SKU.
     * Possible values include: 'Basic', 'Standard'
     *
     * @param {string} [parameters.publicIPAllocationMethod] The public IP
     * allocation method. Possible values are: 'Static' and 'Dynamic'. Possible
     * values include: 'Static', 'Dynamic'
     *
     * @param {string} [parameters.publicIPAddressVersion] The public IP address
     * version. Possible values are: 'IPv4' and 'IPv6'. Possible values include:
     * 'IPv4', 'IPv6'
     *
     * @param {object} [parameters.dnsSettings] The FQDN of the DNS record
     * associated with the public IP address.
     *
     * @param {string} [parameters.dnsSettings.domainNameLabel] Gets or sets the
     * Domain name label.The concatenation of the domain name label and the
     * regionalized DNS zone make up the fully qualified domain name associated
     * with the public IP address. If a domain name label is specified, an A DNS
     * record is created for the public IP in the Microsoft Azure DNS system.
     *
     * @param {string} [parameters.dnsSettings.fqdn] Gets the FQDN, Fully qualified
     * domain name of the A DNS record associated with the public IP. This is the
     * concatenation of the domainNameLabel and the regionalized DNS zone.
     *
     * @param {string} [parameters.dnsSettings.reverseFqdn] Gets or Sets the
     * Reverse FQDN. A user-visible, fully qualified domain name that resolves to
     * this public IP address. If the reverseFqdn is specified, then a PTR DNS
     * record is created pointing from the IP address in the in-addr.arpa domain to
     * the reverse FQDN.
     *
     * @param {array} [parameters.ipTags] The list of tags associated with the
     * public IP address.
     *
     * @param {string} [parameters.ipAddress] The IP address associated with the
     * public IP address resource.
     *
     * @param {number} [parameters.idleTimeoutInMinutes] The idle timeout of the
     * public IP address.
     *
     * @param {string} [parameters.resourceGuid] The resource GUID property of the
     * public IP resource.
     *
     * @param {string} [parameters.provisioningState] The provisioning state of the
     * PublicIP resource. Possible values are: 'Updating', 'Deleting', and
     * 'Failed'.
     *
     * @param {string} [parameters.etag] A unique read-only string that changes
     * whenever the resource is updated.
     *
     * @param {array} [parameters.zones] A list of availability zones denoting the
     * IP allocated for the resource needs to come from.
     *
     * @param {string} [parameters.id] Resource ID.
     *
     * @param {string} [parameters.location] Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PublicIPAddress} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PublicIPAddress} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PublicIPAddress} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(resourceGroupName: string, publicIpAddressName: string, parameters: models.PublicIPAddress, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PublicIPAddress>;
    beginCreateOrUpdate(resourceGroupName: string, publicIpAddressName: string, parameters: models.PublicIPAddress, callback: ServiceCallback<models.PublicIPAddress>): void;
    beginCreateOrUpdate(resourceGroupName: string, publicIpAddressName: string, parameters: models.PublicIPAddress, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PublicIPAddress>): void;


    /**
     * Updates public IP address tags.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} publicIpAddressName The name of the public IP address.
     *
     * @param {object} parameters Parameters supplied to update public IP address
     * tags.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PublicIPAddress>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginUpdateTagsWithHttpOperationResponse(resourceGroupName: string, publicIpAddressName: string, parameters: models.TagsObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PublicIPAddress>>;

    /**
     * Updates public IP address tags.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} publicIpAddressName The name of the public IP address.
     *
     * @param {object} parameters Parameters supplied to update public IP address
     * tags.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PublicIPAddress} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PublicIPAddress} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PublicIPAddress} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginUpdateTags(resourceGroupName: string, publicIpAddressName: string, parameters: models.TagsObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PublicIPAddress>;
    beginUpdateTags(resourceGroupName: string, publicIpAddressName: string, parameters: models.TagsObject, callback: ServiceCallback<models.PublicIPAddress>): void;
    beginUpdateTags(resourceGroupName: string, publicIpAddressName: string, parameters: models.TagsObject, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PublicIPAddress>): void;


    /**
     * Gets all the public IP addresses in a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PublicIPAddressListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listAllNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PublicIPAddressListResult>>;

    /**
     * Gets all the public IP addresses in a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PublicIPAddressListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PublicIPAddressListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PublicIPAddressListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listAllNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PublicIPAddressListResult>;
    listAllNext(nextPageLink: string, callback: ServiceCallback<models.PublicIPAddressListResult>): void;
    listAllNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PublicIPAddressListResult>): void;


    /**
     * Gets all public IP addresses in a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PublicIPAddressListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PublicIPAddressListResult>>;

    /**
     * Gets all public IP addresses in a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PublicIPAddressListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PublicIPAddressListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PublicIPAddressListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PublicIPAddressListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.PublicIPAddressListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PublicIPAddressListResult>): void;


    /**
     * Gets information about all public IP addresses on a virtual machine scale
     * set level.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PublicIPAddressListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listVirtualMachineScaleSetPublicIPAddressesNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PublicIPAddressListResult>>;

    /**
     * Gets information about all public IP addresses on a virtual machine scale
     * set level.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PublicIPAddressListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PublicIPAddressListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PublicIPAddressListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listVirtualMachineScaleSetPublicIPAddressesNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PublicIPAddressListResult>;
    listVirtualMachineScaleSetPublicIPAddressesNext(nextPageLink: string, callback: ServiceCallback<models.PublicIPAddressListResult>): void;
    listVirtualMachineScaleSetPublicIPAddressesNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PublicIPAddressListResult>): void;


    /**
     * Gets information about all public IP addresses in a virtual machine IP
     * configuration in a virtual machine scale set.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PublicIPAddressListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listVirtualMachineScaleSetVMPublicIPAddressesNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PublicIPAddressListResult>>;

    /**
     * Gets information about all public IP addresses in a virtual machine IP
     * configuration in a virtual machine scale set.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PublicIPAddressListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PublicIPAddressListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PublicIPAddressListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listVirtualMachineScaleSetVMPublicIPAddressesNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PublicIPAddressListResult>;
    listVirtualMachineScaleSetVMPublicIPAddressesNext(nextPageLink: string, callback: ServiceCallback<models.PublicIPAddressListResult>): void;
    listVirtualMachineScaleSetVMPublicIPAddressesNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PublicIPAddressListResult>): void;
}

/**
 * @class
 * RouteFilters
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the NetworkManagementClient.
 */
export interface RouteFilters {


    /**
     * Deletes the specified route filter.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeFilterName The name of the route filter.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, routeFilterName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the specified route filter.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeFilterName The name of the route filter.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, routeFilterName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, routeFilterName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, routeFilterName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets the specified route filter.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeFilterName The name of the route filter.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Expands referenced express route bgp
     * peering resources.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RouteFilter>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, routeFilterName: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RouteFilter>>;

    /**
     * Gets the specified route filter.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeFilterName The name of the route filter.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Expands referenced express route bgp
     * peering resources.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RouteFilter} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RouteFilter} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RouteFilter} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, routeFilterName: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.RouteFilter>;
    get(resourceGroupName: string, routeFilterName: string, callback: ServiceCallback<models.RouteFilter>): void;
    get(resourceGroupName: string, routeFilterName: string, options: { expand? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RouteFilter>): void;


    /**
     * Creates or updates a route filter in a specified resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeFilterName The name of the route filter.
     *
     * @param {object} routeFilterParameters Parameters supplied to the create or
     * update route filter operation.
     *
     * @param {array} [routeFilterParameters.rules] Collection of RouteFilterRules
     * contained within a route filter.
     *
     * @param {array} [routeFilterParameters.peerings] A collection of references
     * to express route circuit peerings.
     *
     * @param {string} [routeFilterParameters.id] Resource ID.
     *
     * @param {string} [routeFilterParameters.location] Resource location.
     *
     * @param {object} [routeFilterParameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RouteFilter>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, routeFilterName: string, routeFilterParameters: models.RouteFilter, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RouteFilter>>;

    /**
     * Creates or updates a route filter in a specified resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeFilterName The name of the route filter.
     *
     * @param {object} routeFilterParameters Parameters supplied to the create or
     * update route filter operation.
     *
     * @param {array} [routeFilterParameters.rules] Collection of RouteFilterRules
     * contained within a route filter.
     *
     * @param {array} [routeFilterParameters.peerings] A collection of references
     * to express route circuit peerings.
     *
     * @param {string} [routeFilterParameters.id] Resource ID.
     *
     * @param {string} [routeFilterParameters.location] Resource location.
     *
     * @param {object} [routeFilterParameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RouteFilter} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RouteFilter} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RouteFilter} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, routeFilterName: string, routeFilterParameters: models.RouteFilter, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RouteFilter>;
    createOrUpdate(resourceGroupName: string, routeFilterName: string, routeFilterParameters: models.RouteFilter, callback: ServiceCallback<models.RouteFilter>): void;
    createOrUpdate(resourceGroupName: string, routeFilterName: string, routeFilterParameters: models.RouteFilter, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RouteFilter>): void;


    /**
     * Updates a route filter in a specified resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeFilterName The name of the route filter.
     *
     * @param {object} routeFilterParameters Parameters supplied to the update
     * route filter operation.
     *
     * @param {array} [routeFilterParameters.rules] Collection of RouteFilterRules
     * contained within a route filter.
     *
     * @param {array} [routeFilterParameters.peerings] A collection of references
     * to express route circuit peerings.
     *
     * @param {object} [routeFilterParameters.tags] Resource tags.
     *
     * @param {string} [routeFilterParameters.id] Resource ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RouteFilter>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, routeFilterName: string, routeFilterParameters: models.PatchRouteFilter, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RouteFilter>>;

    /**
     * Updates a route filter in a specified resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeFilterName The name of the route filter.
     *
     * @param {object} routeFilterParameters Parameters supplied to the update
     * route filter operation.
     *
     * @param {array} [routeFilterParameters.rules] Collection of RouteFilterRules
     * contained within a route filter.
     *
     * @param {array} [routeFilterParameters.peerings] A collection of references
     * to express route circuit peerings.
     *
     * @param {object} [routeFilterParameters.tags] Resource tags.
     *
     * @param {string} [routeFilterParameters.id] Resource ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RouteFilter} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RouteFilter} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RouteFilter} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, routeFilterName: string, routeFilterParameters: models.PatchRouteFilter, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RouteFilter>;
    update(resourceGroupName: string, routeFilterName: string, routeFilterParameters: models.PatchRouteFilter, callback: ServiceCallback<models.RouteFilter>): void;
    update(resourceGroupName: string, routeFilterName: string, routeFilterParameters: models.PatchRouteFilter, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RouteFilter>): void;


    /**
     * Gets all route filters in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RouteFilterListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupWithHttpOperationResponse(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RouteFilterListResult>>;

    /**
     * Gets all route filters in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RouteFilterListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RouteFilterListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RouteFilterListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroup(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RouteFilterListResult>;
    listByResourceGroup(resourceGroupName: string, callback: ServiceCallback<models.RouteFilterListResult>): void;
    listByResourceGroup(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RouteFilterListResult>): void;


    /**
     * Gets all route filters in a subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RouteFilterListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RouteFilterListResult>>;

    /**
     * Gets all route filters in a subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RouteFilterListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RouteFilterListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RouteFilterListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RouteFilterListResult>;
    list(callback: ServiceCallback<models.RouteFilterListResult>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RouteFilterListResult>): void;


    /**
     * Deletes the specified route filter.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeFilterName The name of the route filter.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, routeFilterName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the specified route filter.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeFilterName The name of the route filter.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(resourceGroupName: string, routeFilterName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(resourceGroupName: string, routeFilterName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, routeFilterName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Creates or updates a route filter in a specified resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeFilterName The name of the route filter.
     *
     * @param {object} routeFilterParameters Parameters supplied to the create or
     * update route filter operation.
     *
     * @param {array} [routeFilterParameters.rules] Collection of RouteFilterRules
     * contained within a route filter.
     *
     * @param {array} [routeFilterParameters.peerings] A collection of references
     * to express route circuit peerings.
     *
     * @param {string} [routeFilterParameters.id] Resource ID.
     *
     * @param {string} [routeFilterParameters.location] Resource location.
     *
     * @param {object} [routeFilterParameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RouteFilter>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, routeFilterName: string, routeFilterParameters: models.RouteFilter, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RouteFilter>>;

    /**
     * Creates or updates a route filter in a specified resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeFilterName The name of the route filter.
     *
     * @param {object} routeFilterParameters Parameters supplied to the create or
     * update route filter operation.
     *
     * @param {array} [routeFilterParameters.rules] Collection of RouteFilterRules
     * contained within a route filter.
     *
     * @param {array} [routeFilterParameters.peerings] A collection of references
     * to express route circuit peerings.
     *
     * @param {string} [routeFilterParameters.id] Resource ID.
     *
     * @param {string} [routeFilterParameters.location] Resource location.
     *
     * @param {object} [routeFilterParameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RouteFilter} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RouteFilter} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RouteFilter} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(resourceGroupName: string, routeFilterName: string, routeFilterParameters: models.RouteFilter, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RouteFilter>;
    beginCreateOrUpdate(resourceGroupName: string, routeFilterName: string, routeFilterParameters: models.RouteFilter, callback: ServiceCallback<models.RouteFilter>): void;
    beginCreateOrUpdate(resourceGroupName: string, routeFilterName: string, routeFilterParameters: models.RouteFilter, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RouteFilter>): void;


    /**
     * Updates a route filter in a specified resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeFilterName The name of the route filter.
     *
     * @param {object} routeFilterParameters Parameters supplied to the update
     * route filter operation.
     *
     * @param {array} [routeFilterParameters.rules] Collection of RouteFilterRules
     * contained within a route filter.
     *
     * @param {array} [routeFilterParameters.peerings] A collection of references
     * to express route circuit peerings.
     *
     * @param {object} [routeFilterParameters.tags] Resource tags.
     *
     * @param {string} [routeFilterParameters.id] Resource ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RouteFilter>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginUpdateWithHttpOperationResponse(resourceGroupName: string, routeFilterName: string, routeFilterParameters: models.PatchRouteFilter, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RouteFilter>>;

    /**
     * Updates a route filter in a specified resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeFilterName The name of the route filter.
     *
     * @param {object} routeFilterParameters Parameters supplied to the update
     * route filter operation.
     *
     * @param {array} [routeFilterParameters.rules] Collection of RouteFilterRules
     * contained within a route filter.
     *
     * @param {array} [routeFilterParameters.peerings] A collection of references
     * to express route circuit peerings.
     *
     * @param {object} [routeFilterParameters.tags] Resource tags.
     *
     * @param {string} [routeFilterParameters.id] Resource ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RouteFilter} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RouteFilter} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RouteFilter} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginUpdate(resourceGroupName: string, routeFilterName: string, routeFilterParameters: models.PatchRouteFilter, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RouteFilter>;
    beginUpdate(resourceGroupName: string, routeFilterName: string, routeFilterParameters: models.PatchRouteFilter, callback: ServiceCallback<models.RouteFilter>): void;
    beginUpdate(resourceGroupName: string, routeFilterName: string, routeFilterParameters: models.PatchRouteFilter, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RouteFilter>): void;


    /**
     * Gets all route filters in a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RouteFilterListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RouteFilterListResult>>;

    /**
     * Gets all route filters in a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RouteFilterListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RouteFilterListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RouteFilterListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroupNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RouteFilterListResult>;
    listByResourceGroupNext(nextPageLink: string, callback: ServiceCallback<models.RouteFilterListResult>): void;
    listByResourceGroupNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RouteFilterListResult>): void;


    /**
     * Gets all route filters in a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RouteFilterListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RouteFilterListResult>>;

    /**
     * Gets all route filters in a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RouteFilterListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RouteFilterListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RouteFilterListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RouteFilterListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.RouteFilterListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RouteFilterListResult>): void;
}

/**
 * @class
 * RouteFilterRules
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the NetworkManagementClient.
 */
export interface RouteFilterRules {


    /**
     * Deletes the specified rule from a route filter.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeFilterName The name of the route filter.
     *
     * @param {string} ruleName The name of the rule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, routeFilterName: string, ruleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the specified rule from a route filter.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeFilterName The name of the route filter.
     *
     * @param {string} ruleName The name of the rule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, routeFilterName: string, ruleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, routeFilterName: string, ruleName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, routeFilterName: string, ruleName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets the specified rule from a route filter.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeFilterName The name of the route filter.
     *
     * @param {string} ruleName The name of the rule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RouteFilterRule>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, routeFilterName: string, ruleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RouteFilterRule>>;

    /**
     * Gets the specified rule from a route filter.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeFilterName The name of the route filter.
     *
     * @param {string} ruleName The name of the rule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RouteFilterRule} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RouteFilterRule} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RouteFilterRule} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, routeFilterName: string, ruleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RouteFilterRule>;
    get(resourceGroupName: string, routeFilterName: string, ruleName: string, callback: ServiceCallback<models.RouteFilterRule>): void;
    get(resourceGroupName: string, routeFilterName: string, ruleName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RouteFilterRule>): void;


    /**
     * Creates or updates a route in the specified route filter.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeFilterName The name of the route filter.
     *
     * @param {string} ruleName The name of the route filter rule.
     *
     * @param {object} routeFilterRuleParameters Parameters supplied to the create
     * or update route filter rule operation.
     *
     * @param {string} routeFilterRuleParameters.access The access type of the
     * rule. Valid values are: 'Allow', 'Deny'. Possible values include: 'Allow',
     * 'Deny'
     *
     * @param {array} routeFilterRuleParameters.communities The collection for bgp
     * community values to filter on. e.g. ['12076:5010','12076:5020']
     *
     * @param {string} [routeFilterRuleParameters.name] The name of the resource
     * that is unique within a resource group. This name can be used to access the
     * resource.
     *
     * @param {string} [routeFilterRuleParameters.location] Resource location.
     *
     * @param {string} [routeFilterRuleParameters.id] Resource ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RouteFilterRule>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, routeFilterName: string, ruleName: string, routeFilterRuleParameters: models.RouteFilterRule, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RouteFilterRule>>;

    /**
     * Creates or updates a route in the specified route filter.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeFilterName The name of the route filter.
     *
     * @param {string} ruleName The name of the route filter rule.
     *
     * @param {object} routeFilterRuleParameters Parameters supplied to the create
     * or update route filter rule operation.
     *
     * @param {string} routeFilterRuleParameters.access The access type of the
     * rule. Valid values are: 'Allow', 'Deny'. Possible values include: 'Allow',
     * 'Deny'
     *
     * @param {array} routeFilterRuleParameters.communities The collection for bgp
     * community values to filter on. e.g. ['12076:5010','12076:5020']
     *
     * @param {string} [routeFilterRuleParameters.name] The name of the resource
     * that is unique within a resource group. This name can be used to access the
     * resource.
     *
     * @param {string} [routeFilterRuleParameters.location] Resource location.
     *
     * @param {string} [routeFilterRuleParameters.id] Resource ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RouteFilterRule} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RouteFilterRule} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RouteFilterRule} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, routeFilterName: string, ruleName: string, routeFilterRuleParameters: models.RouteFilterRule, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RouteFilterRule>;
    createOrUpdate(resourceGroupName: string, routeFilterName: string, ruleName: string, routeFilterRuleParameters: models.RouteFilterRule, callback: ServiceCallback<models.RouteFilterRule>): void;
    createOrUpdate(resourceGroupName: string, routeFilterName: string, ruleName: string, routeFilterRuleParameters: models.RouteFilterRule, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RouteFilterRule>): void;


    /**
     * Updates a route in the specified route filter.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeFilterName The name of the route filter.
     *
     * @param {string} ruleName The name of the route filter rule.
     *
     * @param {object} routeFilterRuleParameters Parameters supplied to the update
     * route filter rule operation.
     *
     * @param {string} routeFilterRuleParameters.access The access type of the
     * rule. Valid values are: 'Allow', 'Deny'. Possible values include: 'Allow',
     * 'Deny'
     *
     * @param {array} routeFilterRuleParameters.communities The collection for bgp
     * community values to filter on. e.g. ['12076:5010','12076:5020']
     *
     * @param {string} [routeFilterRuleParameters.id] Resource ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RouteFilterRule>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, routeFilterName: string, ruleName: string, routeFilterRuleParameters: models.PatchRouteFilterRule, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RouteFilterRule>>;

    /**
     * Updates a route in the specified route filter.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeFilterName The name of the route filter.
     *
     * @param {string} ruleName The name of the route filter rule.
     *
     * @param {object} routeFilterRuleParameters Parameters supplied to the update
     * route filter rule operation.
     *
     * @param {string} routeFilterRuleParameters.access The access type of the
     * rule. Valid values are: 'Allow', 'Deny'. Possible values include: 'Allow',
     * 'Deny'
     *
     * @param {array} routeFilterRuleParameters.communities The collection for bgp
     * community values to filter on. e.g. ['12076:5010','12076:5020']
     *
     * @param {string} [routeFilterRuleParameters.id] Resource ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RouteFilterRule} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RouteFilterRule} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RouteFilterRule} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, routeFilterName: string, ruleName: string, routeFilterRuleParameters: models.PatchRouteFilterRule, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RouteFilterRule>;
    update(resourceGroupName: string, routeFilterName: string, ruleName: string, routeFilterRuleParameters: models.PatchRouteFilterRule, callback: ServiceCallback<models.RouteFilterRule>): void;
    update(resourceGroupName: string, routeFilterName: string, ruleName: string, routeFilterRuleParameters: models.PatchRouteFilterRule, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RouteFilterRule>): void;


    /**
     * Gets all RouteFilterRules in a route filter.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeFilterName The name of the route filter.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RouteFilterRuleListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByRouteFilterWithHttpOperationResponse(resourceGroupName: string, routeFilterName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RouteFilterRuleListResult>>;

    /**
     * Gets all RouteFilterRules in a route filter.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeFilterName The name of the route filter.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RouteFilterRuleListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RouteFilterRuleListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RouteFilterRuleListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByRouteFilter(resourceGroupName: string, routeFilterName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RouteFilterRuleListResult>;
    listByRouteFilter(resourceGroupName: string, routeFilterName: string, callback: ServiceCallback<models.RouteFilterRuleListResult>): void;
    listByRouteFilter(resourceGroupName: string, routeFilterName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RouteFilterRuleListResult>): void;


    /**
     * Deletes the specified rule from a route filter.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeFilterName The name of the route filter.
     *
     * @param {string} ruleName The name of the rule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, routeFilterName: string, ruleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the specified rule from a route filter.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeFilterName The name of the route filter.
     *
     * @param {string} ruleName The name of the rule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(resourceGroupName: string, routeFilterName: string, ruleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(resourceGroupName: string, routeFilterName: string, ruleName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, routeFilterName: string, ruleName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Creates or updates a route in the specified route filter.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeFilterName The name of the route filter.
     *
     * @param {string} ruleName The name of the route filter rule.
     *
     * @param {object} routeFilterRuleParameters Parameters supplied to the create
     * or update route filter rule operation.
     *
     * @param {string} routeFilterRuleParameters.access The access type of the
     * rule. Valid values are: 'Allow', 'Deny'. Possible values include: 'Allow',
     * 'Deny'
     *
     * @param {array} routeFilterRuleParameters.communities The collection for bgp
     * community values to filter on. e.g. ['12076:5010','12076:5020']
     *
     * @param {string} [routeFilterRuleParameters.name] The name of the resource
     * that is unique within a resource group. This name can be used to access the
     * resource.
     *
     * @param {string} [routeFilterRuleParameters.location] Resource location.
     *
     * @param {string} [routeFilterRuleParameters.id] Resource ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RouteFilterRule>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, routeFilterName: string, ruleName: string, routeFilterRuleParameters: models.RouteFilterRule, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RouteFilterRule>>;

    /**
     * Creates or updates a route in the specified route filter.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeFilterName The name of the route filter.
     *
     * @param {string} ruleName The name of the route filter rule.
     *
     * @param {object} routeFilterRuleParameters Parameters supplied to the create
     * or update route filter rule operation.
     *
     * @param {string} routeFilterRuleParameters.access The access type of the
     * rule. Valid values are: 'Allow', 'Deny'. Possible values include: 'Allow',
     * 'Deny'
     *
     * @param {array} routeFilterRuleParameters.communities The collection for bgp
     * community values to filter on. e.g. ['12076:5010','12076:5020']
     *
     * @param {string} [routeFilterRuleParameters.name] The name of the resource
     * that is unique within a resource group. This name can be used to access the
     * resource.
     *
     * @param {string} [routeFilterRuleParameters.location] Resource location.
     *
     * @param {string} [routeFilterRuleParameters.id] Resource ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RouteFilterRule} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RouteFilterRule} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RouteFilterRule} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(resourceGroupName: string, routeFilterName: string, ruleName: string, routeFilterRuleParameters: models.RouteFilterRule, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RouteFilterRule>;
    beginCreateOrUpdate(resourceGroupName: string, routeFilterName: string, ruleName: string, routeFilterRuleParameters: models.RouteFilterRule, callback: ServiceCallback<models.RouteFilterRule>): void;
    beginCreateOrUpdate(resourceGroupName: string, routeFilterName: string, ruleName: string, routeFilterRuleParameters: models.RouteFilterRule, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RouteFilterRule>): void;


    /**
     * Updates a route in the specified route filter.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeFilterName The name of the route filter.
     *
     * @param {string} ruleName The name of the route filter rule.
     *
     * @param {object} routeFilterRuleParameters Parameters supplied to the update
     * route filter rule operation.
     *
     * @param {string} routeFilterRuleParameters.access The access type of the
     * rule. Valid values are: 'Allow', 'Deny'. Possible values include: 'Allow',
     * 'Deny'
     *
     * @param {array} routeFilterRuleParameters.communities The collection for bgp
     * community values to filter on. e.g. ['12076:5010','12076:5020']
     *
     * @param {string} [routeFilterRuleParameters.id] Resource ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RouteFilterRule>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginUpdateWithHttpOperationResponse(resourceGroupName: string, routeFilterName: string, ruleName: string, routeFilterRuleParameters: models.PatchRouteFilterRule, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RouteFilterRule>>;

    /**
     * Updates a route in the specified route filter.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeFilterName The name of the route filter.
     *
     * @param {string} ruleName The name of the route filter rule.
     *
     * @param {object} routeFilterRuleParameters Parameters supplied to the update
     * route filter rule operation.
     *
     * @param {string} routeFilterRuleParameters.access The access type of the
     * rule. Valid values are: 'Allow', 'Deny'. Possible values include: 'Allow',
     * 'Deny'
     *
     * @param {array} routeFilterRuleParameters.communities The collection for bgp
     * community values to filter on. e.g. ['12076:5010','12076:5020']
     *
     * @param {string} [routeFilterRuleParameters.id] Resource ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RouteFilterRule} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RouteFilterRule} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RouteFilterRule} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginUpdate(resourceGroupName: string, routeFilterName: string, ruleName: string, routeFilterRuleParameters: models.PatchRouteFilterRule, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RouteFilterRule>;
    beginUpdate(resourceGroupName: string, routeFilterName: string, ruleName: string, routeFilterRuleParameters: models.PatchRouteFilterRule, callback: ServiceCallback<models.RouteFilterRule>): void;
    beginUpdate(resourceGroupName: string, routeFilterName: string, ruleName: string, routeFilterRuleParameters: models.PatchRouteFilterRule, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RouteFilterRule>): void;


    /**
     * Gets all RouteFilterRules in a route filter.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RouteFilterRuleListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByRouteFilterNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RouteFilterRuleListResult>>;

    /**
     * Gets all RouteFilterRules in a route filter.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RouteFilterRuleListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RouteFilterRuleListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RouteFilterRuleListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByRouteFilterNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RouteFilterRuleListResult>;
    listByRouteFilterNext(nextPageLink: string, callback: ServiceCallback<models.RouteFilterRuleListResult>): void;
    listByRouteFilterNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RouteFilterRuleListResult>): void;
}

/**
 * @class
 * RouteTables
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the NetworkManagementClient.
 */
export interface RouteTables {


    /**
     * Deletes the specified route table.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeTableName The name of the route table.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, routeTableName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the specified route table.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeTableName The name of the route table.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, routeTableName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, routeTableName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, routeTableName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets the specified route table.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeTableName The name of the route table.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Expands referenced resources.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RouteTable>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, routeTableName: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RouteTable>>;

    /**
     * Gets the specified route table.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeTableName The name of the route table.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Expands referenced resources.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RouteTable} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RouteTable} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RouteTable} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, routeTableName: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.RouteTable>;
    get(resourceGroupName: string, routeTableName: string, callback: ServiceCallback<models.RouteTable>): void;
    get(resourceGroupName: string, routeTableName: string, options: { expand? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RouteTable>): void;


    /**
     * Create or updates a route table in a specified resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeTableName The name of the route table.
     *
     * @param {object} parameters Parameters supplied to the create or update route
     * table operation.
     *
     * @param {array} [parameters.routes] Collection of routes contained within a
     * route table.
     *
     * @param {boolean} [parameters.disableBgpRoutePropagation] Gets or sets
     * whether to disable the routes learned by BGP on that route table. True means
     * disable.
     *
     * @param {string} [parameters.provisioningState] The provisioning state of the
     * resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
     *
     * @param {string} [parameters.etag] Gets a unique read-only string that
     * changes whenever the resource is updated.
     *
     * @param {string} [parameters.id] Resource ID.
     *
     * @param {string} [parameters.location] Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RouteTable>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, routeTableName: string, parameters: models.RouteTable, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RouteTable>>;

    /**
     * Create or updates a route table in a specified resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeTableName The name of the route table.
     *
     * @param {object} parameters Parameters supplied to the create or update route
     * table operation.
     *
     * @param {array} [parameters.routes] Collection of routes contained within a
     * route table.
     *
     * @param {boolean} [parameters.disableBgpRoutePropagation] Gets or sets
     * whether to disable the routes learned by BGP on that route table. True means
     * disable.
     *
     * @param {string} [parameters.provisioningState] The provisioning state of the
     * resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
     *
     * @param {string} [parameters.etag] Gets a unique read-only string that
     * changes whenever the resource is updated.
     *
     * @param {string} [parameters.id] Resource ID.
     *
     * @param {string} [parameters.location] Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RouteTable} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RouteTable} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RouteTable} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, routeTableName: string, parameters: models.RouteTable, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RouteTable>;
    createOrUpdate(resourceGroupName: string, routeTableName: string, parameters: models.RouteTable, callback: ServiceCallback<models.RouteTable>): void;
    createOrUpdate(resourceGroupName: string, routeTableName: string, parameters: models.RouteTable, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RouteTable>): void;


    /**
     * Updates a route table tags.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeTableName The name of the route table.
     *
     * @param {object} parameters Parameters supplied to update route table tags.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RouteTable>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateTagsWithHttpOperationResponse(resourceGroupName: string, routeTableName: string, parameters: models.TagsObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RouteTable>>;

    /**
     * Updates a route table tags.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeTableName The name of the route table.
     *
     * @param {object} parameters Parameters supplied to update route table tags.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RouteTable} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RouteTable} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RouteTable} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updateTags(resourceGroupName: string, routeTableName: string, parameters: models.TagsObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RouteTable>;
    updateTags(resourceGroupName: string, routeTableName: string, parameters: models.TagsObject, callback: ServiceCallback<models.RouteTable>): void;
    updateTags(resourceGroupName: string, routeTableName: string, parameters: models.TagsObject, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RouteTable>): void;


    /**
     * Gets all route tables in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RouteTableListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RouteTableListResult>>;

    /**
     * Gets all route tables in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RouteTableListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RouteTableListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RouteTableListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RouteTableListResult>;
    list(resourceGroupName: string, callback: ServiceCallback<models.RouteTableListResult>): void;
    list(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RouteTableListResult>): void;


    /**
     * Gets all route tables in a subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RouteTableListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listAllWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RouteTableListResult>>;

    /**
     * Gets all route tables in a subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RouteTableListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RouteTableListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RouteTableListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listAll(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RouteTableListResult>;
    listAll(callback: ServiceCallback<models.RouteTableListResult>): void;
    listAll(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RouteTableListResult>): void;


    /**
     * Deletes the specified route table.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeTableName The name of the route table.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, routeTableName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the specified route table.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeTableName The name of the route table.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(resourceGroupName: string, routeTableName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(resourceGroupName: string, routeTableName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, routeTableName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Create or updates a route table in a specified resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeTableName The name of the route table.
     *
     * @param {object} parameters Parameters supplied to the create or update route
     * table operation.
     *
     * @param {array} [parameters.routes] Collection of routes contained within a
     * route table.
     *
     * @param {boolean} [parameters.disableBgpRoutePropagation] Gets or sets
     * whether to disable the routes learned by BGP on that route table. True means
     * disable.
     *
     * @param {string} [parameters.provisioningState] The provisioning state of the
     * resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
     *
     * @param {string} [parameters.etag] Gets a unique read-only string that
     * changes whenever the resource is updated.
     *
     * @param {string} [parameters.id] Resource ID.
     *
     * @param {string} [parameters.location] Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RouteTable>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, routeTableName: string, parameters: models.RouteTable, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RouteTable>>;

    /**
     * Create or updates a route table in a specified resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeTableName The name of the route table.
     *
     * @param {object} parameters Parameters supplied to the create or update route
     * table operation.
     *
     * @param {array} [parameters.routes] Collection of routes contained within a
     * route table.
     *
     * @param {boolean} [parameters.disableBgpRoutePropagation] Gets or sets
     * whether to disable the routes learned by BGP on that route table. True means
     * disable.
     *
     * @param {string} [parameters.provisioningState] The provisioning state of the
     * resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
     *
     * @param {string} [parameters.etag] Gets a unique read-only string that
     * changes whenever the resource is updated.
     *
     * @param {string} [parameters.id] Resource ID.
     *
     * @param {string} [parameters.location] Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RouteTable} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RouteTable} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RouteTable} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(resourceGroupName: string, routeTableName: string, parameters: models.RouteTable, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RouteTable>;
    beginCreateOrUpdate(resourceGroupName: string, routeTableName: string, parameters: models.RouteTable, callback: ServiceCallback<models.RouteTable>): void;
    beginCreateOrUpdate(resourceGroupName: string, routeTableName: string, parameters: models.RouteTable, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RouteTable>): void;


    /**
     * Updates a route table tags.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeTableName The name of the route table.
     *
     * @param {object} parameters Parameters supplied to update route table tags.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RouteTable>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginUpdateTagsWithHttpOperationResponse(resourceGroupName: string, routeTableName: string, parameters: models.TagsObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RouteTable>>;

    /**
     * Updates a route table tags.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeTableName The name of the route table.
     *
     * @param {object} parameters Parameters supplied to update route table tags.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RouteTable} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RouteTable} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RouteTable} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginUpdateTags(resourceGroupName: string, routeTableName: string, parameters: models.TagsObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RouteTable>;
    beginUpdateTags(resourceGroupName: string, routeTableName: string, parameters: models.TagsObject, callback: ServiceCallback<models.RouteTable>): void;
    beginUpdateTags(resourceGroupName: string, routeTableName: string, parameters: models.TagsObject, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RouteTable>): void;


    /**
     * Gets all route tables in a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RouteTableListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RouteTableListResult>>;

    /**
     * Gets all route tables in a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RouteTableListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RouteTableListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RouteTableListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RouteTableListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.RouteTableListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RouteTableListResult>): void;


    /**
     * Gets all route tables in a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RouteTableListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listAllNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RouteTableListResult>>;

    /**
     * Gets all route tables in a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RouteTableListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RouteTableListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RouteTableListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listAllNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RouteTableListResult>;
    listAllNext(nextPageLink: string, callback: ServiceCallback<models.RouteTableListResult>): void;
    listAllNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RouteTableListResult>): void;
}

/**
 * @class
 * Routes
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the NetworkManagementClient.
 */
export interface Routes {


    /**
     * Deletes the specified route from a route table.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeTableName The name of the route table.
     *
     * @param {string} routeName The name of the route.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, routeTableName: string, routeName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the specified route from a route table.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeTableName The name of the route table.
     *
     * @param {string} routeName The name of the route.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, routeTableName: string, routeName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, routeTableName: string, routeName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, routeTableName: string, routeName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets the specified route from a route table.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeTableName The name of the route table.
     *
     * @param {string} routeName The name of the route.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Route>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, routeTableName: string, routeName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Route>>;

    /**
     * Gets the specified route from a route table.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeTableName The name of the route table.
     *
     * @param {string} routeName The name of the route.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Route} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Route} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Route} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, routeTableName: string, routeName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Route>;
    get(resourceGroupName: string, routeTableName: string, routeName: string, callback: ServiceCallback<models.Route>): void;
    get(resourceGroupName: string, routeTableName: string, routeName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Route>): void;


    /**
     * Creates or updates a route in the specified route table.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeTableName The name of the route table.
     *
     * @param {string} routeName The name of the route.
     *
     * @param {object} routeParameters Parameters supplied to the create or update
     * route operation.
     *
     * @param {string} [routeParameters.addressPrefix] The destination CIDR to
     * which the route applies.
     *
     * @param {string} routeParameters.nextHopType The type of Azure hop the packet
     * should be sent to. Possible values are: 'VirtualNetworkGateway',
     * 'VnetLocal', 'Internet', 'VirtualAppliance', and 'None'. Possible values
     * include: 'VirtualNetworkGateway', 'VnetLocal', 'Internet',
     * 'VirtualAppliance', 'None'
     *
     * @param {string} [routeParameters.nextHopIpAddress] The IP address packets
     * should be forwarded to. Next hop values are only allowed in routes where the
     * next hop type is VirtualAppliance.
     *
     * @param {string} [routeParameters.provisioningState] The provisioning state
     * of the resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
     *
     * @param {string} [routeParameters.name] The name of the resource that is
     * unique within a resource group. This name can be used to access the
     * resource.
     *
     * @param {string} [routeParameters.etag] A unique read-only string that
     * changes whenever the resource is updated.
     *
     * @param {string} [routeParameters.id] Resource ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Route>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, routeTableName: string, routeName: string, routeParameters: models.Route, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Route>>;

    /**
     * Creates or updates a route in the specified route table.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeTableName The name of the route table.
     *
     * @param {string} routeName The name of the route.
     *
     * @param {object} routeParameters Parameters supplied to the create or update
     * route operation.
     *
     * @param {string} [routeParameters.addressPrefix] The destination CIDR to
     * which the route applies.
     *
     * @param {string} routeParameters.nextHopType The type of Azure hop the packet
     * should be sent to. Possible values are: 'VirtualNetworkGateway',
     * 'VnetLocal', 'Internet', 'VirtualAppliance', and 'None'. Possible values
     * include: 'VirtualNetworkGateway', 'VnetLocal', 'Internet',
     * 'VirtualAppliance', 'None'
     *
     * @param {string} [routeParameters.nextHopIpAddress] The IP address packets
     * should be forwarded to. Next hop values are only allowed in routes where the
     * next hop type is VirtualAppliance.
     *
     * @param {string} [routeParameters.provisioningState] The provisioning state
     * of the resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
     *
     * @param {string} [routeParameters.name] The name of the resource that is
     * unique within a resource group. This name can be used to access the
     * resource.
     *
     * @param {string} [routeParameters.etag] A unique read-only string that
     * changes whenever the resource is updated.
     *
     * @param {string} [routeParameters.id] Resource ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Route} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Route} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Route} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, routeTableName: string, routeName: string, routeParameters: models.Route, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Route>;
    createOrUpdate(resourceGroupName: string, routeTableName: string, routeName: string, routeParameters: models.Route, callback: ServiceCallback<models.Route>): void;
    createOrUpdate(resourceGroupName: string, routeTableName: string, routeName: string, routeParameters: models.Route, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Route>): void;


    /**
     * Gets all routes in a route table.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeTableName The name of the route table.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RouteListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(resourceGroupName: string, routeTableName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RouteListResult>>;

    /**
     * Gets all routes in a route table.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeTableName The name of the route table.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RouteListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RouteListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RouteListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(resourceGroupName: string, routeTableName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RouteListResult>;
    list(resourceGroupName: string, routeTableName: string, callback: ServiceCallback<models.RouteListResult>): void;
    list(resourceGroupName: string, routeTableName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RouteListResult>): void;


    /**
     * Deletes the specified route from a route table.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeTableName The name of the route table.
     *
     * @param {string} routeName The name of the route.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, routeTableName: string, routeName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the specified route from a route table.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeTableName The name of the route table.
     *
     * @param {string} routeName The name of the route.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(resourceGroupName: string, routeTableName: string, routeName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(resourceGroupName: string, routeTableName: string, routeName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, routeTableName: string, routeName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Creates or updates a route in the specified route table.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeTableName The name of the route table.
     *
     * @param {string} routeName The name of the route.
     *
     * @param {object} routeParameters Parameters supplied to the create or update
     * route operation.
     *
     * @param {string} [routeParameters.addressPrefix] The destination CIDR to
     * which the route applies.
     *
     * @param {string} routeParameters.nextHopType The type of Azure hop the packet
     * should be sent to. Possible values are: 'VirtualNetworkGateway',
     * 'VnetLocal', 'Internet', 'VirtualAppliance', and 'None'. Possible values
     * include: 'VirtualNetworkGateway', 'VnetLocal', 'Internet',
     * 'VirtualAppliance', 'None'
     *
     * @param {string} [routeParameters.nextHopIpAddress] The IP address packets
     * should be forwarded to. Next hop values are only allowed in routes where the
     * next hop type is VirtualAppliance.
     *
     * @param {string} [routeParameters.provisioningState] The provisioning state
     * of the resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
     *
     * @param {string} [routeParameters.name] The name of the resource that is
     * unique within a resource group. This name can be used to access the
     * resource.
     *
     * @param {string} [routeParameters.etag] A unique read-only string that
     * changes whenever the resource is updated.
     *
     * @param {string} [routeParameters.id] Resource ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Route>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, routeTableName: string, routeName: string, routeParameters: models.Route, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Route>>;

    /**
     * Creates or updates a route in the specified route table.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeTableName The name of the route table.
     *
     * @param {string} routeName The name of the route.
     *
     * @param {object} routeParameters Parameters supplied to the create or update
     * route operation.
     *
     * @param {string} [routeParameters.addressPrefix] The destination CIDR to
     * which the route applies.
     *
     * @param {string} routeParameters.nextHopType The type of Azure hop the packet
     * should be sent to. Possible values are: 'VirtualNetworkGateway',
     * 'VnetLocal', 'Internet', 'VirtualAppliance', and 'None'. Possible values
     * include: 'VirtualNetworkGateway', 'VnetLocal', 'Internet',
     * 'VirtualAppliance', 'None'
     *
     * @param {string} [routeParameters.nextHopIpAddress] The IP address packets
     * should be forwarded to. Next hop values are only allowed in routes where the
     * next hop type is VirtualAppliance.
     *
     * @param {string} [routeParameters.provisioningState] The provisioning state
     * of the resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
     *
     * @param {string} [routeParameters.name] The name of the resource that is
     * unique within a resource group. This name can be used to access the
     * resource.
     *
     * @param {string} [routeParameters.etag] A unique read-only string that
     * changes whenever the resource is updated.
     *
     * @param {string} [routeParameters.id] Resource ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Route} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Route} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Route} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(resourceGroupName: string, routeTableName: string, routeName: string, routeParameters: models.Route, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Route>;
    beginCreateOrUpdate(resourceGroupName: string, routeTableName: string, routeName: string, routeParameters: models.Route, callback: ServiceCallback<models.Route>): void;
    beginCreateOrUpdate(resourceGroupName: string, routeTableName: string, routeName: string, routeParameters: models.Route, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Route>): void;


    /**
     * Gets all routes in a route table.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RouteListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RouteListResult>>;

    /**
     * Gets all routes in a route table.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RouteListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RouteListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RouteListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RouteListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.RouteListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RouteListResult>): void;
}

/**
 * @class
 * BgpServiceCommunities
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the NetworkManagementClient.
 */
export interface BgpServiceCommunities {


    /**
     * Gets all the available bgp service communities.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<BgpServiceCommunityListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BgpServiceCommunityListResult>>;

    /**
     * Gets all the available bgp service communities.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {BgpServiceCommunityListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {BgpServiceCommunityListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link BgpServiceCommunityListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.BgpServiceCommunityListResult>;
    list(callback: ServiceCallback<models.BgpServiceCommunityListResult>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BgpServiceCommunityListResult>): void;


    /**
     * Gets all the available bgp service communities.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<BgpServiceCommunityListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BgpServiceCommunityListResult>>;

    /**
     * Gets all the available bgp service communities.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {BgpServiceCommunityListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {BgpServiceCommunityListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link BgpServiceCommunityListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.BgpServiceCommunityListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.BgpServiceCommunityListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BgpServiceCommunityListResult>): void;
}

/**
 * @class
 * Usages
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the NetworkManagementClient.
 */
export interface Usages {


    /**
     * List network usages for a subscription.
     *
     * @param {string} location The location where resource usage is queried.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<UsagesListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(location: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.UsagesListResult>>;

    /**
     * List network usages for a subscription.
     *
     * @param {string} location The location where resource usage is queried.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {UsagesListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {UsagesListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link UsagesListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(location: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.UsagesListResult>;
    list(location: string, callback: ServiceCallback<models.UsagesListResult>): void;
    list(location: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.UsagesListResult>): void;


    /**
     * List network usages for a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<UsagesListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.UsagesListResult>>;

    /**
     * List network usages for a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {UsagesListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {UsagesListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link UsagesListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.UsagesListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.UsagesListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.UsagesListResult>): void;
}

/**
 * @class
 * VirtualNetworks
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the NetworkManagementClient.
 */
export interface VirtualNetworks {


    /**
     * Deletes the specified virtual network.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkName The name of the virtual network.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, virtualNetworkName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the specified virtual network.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkName The name of the virtual network.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, virtualNetworkName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, virtualNetworkName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, virtualNetworkName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets the specified virtual network by resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkName The name of the virtual network.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Expands referenced resources.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<VirtualNetwork>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, virtualNetworkName: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.VirtualNetwork>>;

    /**
     * Gets the specified virtual network by resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkName The name of the virtual network.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Expands referenced resources.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {VirtualNetwork} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {VirtualNetwork} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link VirtualNetwork} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, virtualNetworkName: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.VirtualNetwork>;
    get(resourceGroupName: string, virtualNetworkName: string, callback: ServiceCallback<models.VirtualNetwork>): void;
    get(resourceGroupName: string, virtualNetworkName: string, options: { expand? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VirtualNetwork>): void;


    /**
     * Creates or updates a virtual network in the specified resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkName The name of the virtual network.
     *
     * @param {object} parameters Parameters supplied to the create or update
     * virtual network operation
     *
     * @param {object} [parameters.addressSpace] The AddressSpace that contains an
     * array of IP address ranges that can be used by subnets.
     *
     * @param {array} [parameters.addressSpace.addressPrefixes] A list of address
     * blocks reserved for this virtual network in CIDR notation.
     *
     * @param {object} [parameters.dhcpOptions] The dhcpOptions that contains an
     * array of DNS servers available to VMs deployed in the virtual network.
     *
     * @param {array} [parameters.dhcpOptions.dnsServers] The list of DNS servers
     * IP addresses.
     *
     * @param {array} [parameters.subnets] A list of subnets in a Virtual Network.
     *
     * @param {array} [parameters.virtualNetworkPeerings] A list of peerings in a
     * Virtual Network.
     *
     * @param {string} [parameters.resourceGuid] The resourceGuid property of the
     * Virtual Network resource.
     *
     * @param {string} [parameters.provisioningState] The provisioning state of the
     * PublicIP resource. Possible values are: 'Updating', 'Deleting', and
     * 'Failed'.
     *
     * @param {boolean} [parameters.enableDdosProtection] Indicates if DDoS
     * protection is enabled for all the protected resources in the virtual
     * network. It requires a DDoS protection plan associated with the resource.
     *
     * @param {boolean} [parameters.enableVmProtection] Indicates if VM protection
     * is enabled for all the subnets in the virtual network.
     *
     * @param {object} [parameters.ddosProtectionPlan] The DDoS protection plan
     * associated with the virtual network.
     *
     * @param {string} [parameters.ddosProtectionPlan.id] Resource ID.
     *
     * @param {string} [parameters.etag] Gets a unique read-only string that
     * changes whenever the resource is updated.
     *
     * @param {string} [parameters.id] Resource ID.
     *
     * @param {string} [parameters.location] Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<VirtualNetwork>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, virtualNetworkName: string, parameters: models.VirtualNetwork, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.VirtualNetwork>>;

    /**
     * Creates or updates a virtual network in the specified resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkName The name of the virtual network.
     *
     * @param {object} parameters Parameters supplied to the create or update
     * virtual network operation
     *
     * @param {object} [parameters.addressSpace] The AddressSpace that contains an
     * array of IP address ranges that can be used by subnets.
     *
     * @param {array} [parameters.addressSpace.addressPrefixes] A list of address
     * blocks reserved for this virtual network in CIDR notation.
     *
     * @param {object} [parameters.dhcpOptions] The dhcpOptions that contains an
     * array of DNS servers available to VMs deployed in the virtual network.
     *
     * @param {array} [parameters.dhcpOptions.dnsServers] The list of DNS servers
     * IP addresses.
     *
     * @param {array} [parameters.subnets] A list of subnets in a Virtual Network.
     *
     * @param {array} [parameters.virtualNetworkPeerings] A list of peerings in a
     * Virtual Network.
     *
     * @param {string} [parameters.resourceGuid] The resourceGuid property of the
     * Virtual Network resource.
     *
     * @param {string} [parameters.provisioningState] The provisioning state of the
     * PublicIP resource. Possible values are: 'Updating', 'Deleting', and
     * 'Failed'.
     *
     * @param {boolean} [parameters.enableDdosProtection] Indicates if DDoS
     * protection is enabled for all the protected resources in the virtual
     * network. It requires a DDoS protection plan associated with the resource.
     *
     * @param {boolean} [parameters.enableVmProtection] Indicates if VM protection
     * is enabled for all the subnets in the virtual network.
     *
     * @param {object} [parameters.ddosProtectionPlan] The DDoS protection plan
     * associated with the virtual network.
     *
     * @param {string} [parameters.ddosProtectionPlan.id] Resource ID.
     *
     * @param {string} [parameters.etag] Gets a unique read-only string that
     * changes whenever the resource is updated.
     *
     * @param {string} [parameters.id] Resource ID.
     *
     * @param {string} [parameters.location] Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {VirtualNetwork} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {VirtualNetwork} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link VirtualNetwork} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, virtualNetworkName: string, parameters: models.VirtualNetwork, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.VirtualNetwork>;
    createOrUpdate(resourceGroupName: string, virtualNetworkName: string, parameters: models.VirtualNetwork, callback: ServiceCallback<models.VirtualNetwork>): void;
    createOrUpdate(resourceGroupName: string, virtualNetworkName: string, parameters: models.VirtualNetwork, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VirtualNetwork>): void;


    /**
     * Updates a virtual network tags.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkName The name of the virtual network.
     *
     * @param {object} parameters Parameters supplied to update virtual network
     * tags.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<VirtualNetwork>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateTagsWithHttpOperationResponse(resourceGroupName: string, virtualNetworkName: string, parameters: models.TagsObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.VirtualNetwork>>;

    /**
     * Updates a virtual network tags.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkName The name of the virtual network.
     *
     * @param {object} parameters Parameters supplied to update virtual network
     * tags.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {VirtualNetwork} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {VirtualNetwork} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link VirtualNetwork} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updateTags(resourceGroupName: string, virtualNetworkName: string, parameters: models.TagsObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.VirtualNetwork>;
    updateTags(resourceGroupName: string, virtualNetworkName: string, parameters: models.TagsObject, callback: ServiceCallback<models.VirtualNetwork>): void;
    updateTags(resourceGroupName: string, virtualNetworkName: string, parameters: models.TagsObject, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VirtualNetwork>): void;


    /**
     * Gets all virtual networks in a subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<VirtualNetworkListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listAllWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.VirtualNetworkListResult>>;

    /**
     * Gets all virtual networks in a subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {VirtualNetworkListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {VirtualNetworkListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link VirtualNetworkListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listAll(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.VirtualNetworkListResult>;
    listAll(callback: ServiceCallback<models.VirtualNetworkListResult>): void;
    listAll(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VirtualNetworkListResult>): void;


    /**
     * Gets all virtual networks in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<VirtualNetworkListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.VirtualNetworkListResult>>;

    /**
     * Gets all virtual networks in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {VirtualNetworkListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {VirtualNetworkListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link VirtualNetworkListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.VirtualNetworkListResult>;
    list(resourceGroupName: string, callback: ServiceCallback<models.VirtualNetworkListResult>): void;
    list(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VirtualNetworkListResult>): void;


    /**
     * Checks whether a private IP address is available for use.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkName The name of the virtual network.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.ipAddress] The private IP address to be verified.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<IPAddressAvailabilityResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    checkIPAddressAvailabilityWithHttpOperationResponse(resourceGroupName: string, virtualNetworkName: string, options?: { ipAddress? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.IPAddressAvailabilityResult>>;

    /**
     * Checks whether a private IP address is available for use.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkName The name of the virtual network.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.ipAddress] The private IP address to be verified.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {IPAddressAvailabilityResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {IPAddressAvailabilityResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link IPAddressAvailabilityResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    checkIPAddressAvailability(resourceGroupName: string, virtualNetworkName: string, options?: { ipAddress? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.IPAddressAvailabilityResult>;
    checkIPAddressAvailability(resourceGroupName: string, virtualNetworkName: string, callback: ServiceCallback<models.IPAddressAvailabilityResult>): void;
    checkIPAddressAvailability(resourceGroupName: string, virtualNetworkName: string, options: { ipAddress? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.IPAddressAvailabilityResult>): void;


    /**
     * Lists usage stats.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkName The name of the virtual network.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<VirtualNetworkListUsageResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listUsageWithHttpOperationResponse(resourceGroupName: string, virtualNetworkName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.VirtualNetworkListUsageResult>>;

    /**
     * Lists usage stats.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkName The name of the virtual network.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {VirtualNetworkListUsageResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {VirtualNetworkListUsageResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link VirtualNetworkListUsageResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listUsage(resourceGroupName: string, virtualNetworkName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.VirtualNetworkListUsageResult>;
    listUsage(resourceGroupName: string, virtualNetworkName: string, callback: ServiceCallback<models.VirtualNetworkListUsageResult>): void;
    listUsage(resourceGroupName: string, virtualNetworkName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VirtualNetworkListUsageResult>): void;


    /**
     * Deletes the specified virtual network.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkName The name of the virtual network.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, virtualNetworkName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the specified virtual network.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkName The name of the virtual network.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(resourceGroupName: string, virtualNetworkName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(resourceGroupName: string, virtualNetworkName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, virtualNetworkName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Creates or updates a virtual network in the specified resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkName The name of the virtual network.
     *
     * @param {object} parameters Parameters supplied to the create or update
     * virtual network operation
     *
     * @param {object} [parameters.addressSpace] The AddressSpace that contains an
     * array of IP address ranges that can be used by subnets.
     *
     * @param {array} [parameters.addressSpace.addressPrefixes] A list of address
     * blocks reserved for this virtual network in CIDR notation.
     *
     * @param {object} [parameters.dhcpOptions] The dhcpOptions that contains an
     * array of DNS servers available to VMs deployed in the virtual network.
     *
     * @param {array} [parameters.dhcpOptions.dnsServers] The list of DNS servers
     * IP addresses.
     *
     * @param {array} [parameters.subnets] A list of subnets in a Virtual Network.
     *
     * @param {array} [parameters.virtualNetworkPeerings] A list of peerings in a
     * Virtual Network.
     *
     * @param {string} [parameters.resourceGuid] The resourceGuid property of the
     * Virtual Network resource.
     *
     * @param {string} [parameters.provisioningState] The provisioning state of the
     * PublicIP resource. Possible values are: 'Updating', 'Deleting', and
     * 'Failed'.
     *
     * @param {boolean} [parameters.enableDdosProtection] Indicates if DDoS
     * protection is enabled for all the protected resources in the virtual
     * network. It requires a DDoS protection plan associated with the resource.
     *
     * @param {boolean} [parameters.enableVmProtection] Indicates if VM protection
     * is enabled for all the subnets in the virtual network.
     *
     * @param {object} [parameters.ddosProtectionPlan] The DDoS protection plan
     * associated with the virtual network.
     *
     * @param {string} [parameters.ddosProtectionPlan.id] Resource ID.
     *
     * @param {string} [parameters.etag] Gets a unique read-only string that
     * changes whenever the resource is updated.
     *
     * @param {string} [parameters.id] Resource ID.
     *
     * @param {string} [parameters.location] Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<VirtualNetwork>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, virtualNetworkName: string, parameters: models.VirtualNetwork, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.VirtualNetwork>>;

    /**
     * Creates or updates a virtual network in the specified resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkName The name of the virtual network.
     *
     * @param {object} parameters Parameters supplied to the create or update
     * virtual network operation
     *
     * @param {object} [parameters.addressSpace] The AddressSpace that contains an
     * array of IP address ranges that can be used by subnets.
     *
     * @param {array} [parameters.addressSpace.addressPrefixes] A list of address
     * blocks reserved for this virtual network in CIDR notation.
     *
     * @param {object} [parameters.dhcpOptions] The dhcpOptions that contains an
     * array of DNS servers available to VMs deployed in the virtual network.
     *
     * @param {array} [parameters.dhcpOptions.dnsServers] The list of DNS servers
     * IP addresses.
     *
     * @param {array} [parameters.subnets] A list of subnets in a Virtual Network.
     *
     * @param {array} [parameters.virtualNetworkPeerings] A list of peerings in a
     * Virtual Network.
     *
     * @param {string} [parameters.resourceGuid] The resourceGuid property of the
     * Virtual Network resource.
     *
     * @param {string} [parameters.provisioningState] The provisioning state of the
     * PublicIP resource. Possible values are: 'Updating', 'Deleting', and
     * 'Failed'.
     *
     * @param {boolean} [parameters.enableDdosProtection] Indicates if DDoS
     * protection is enabled for all the protected resources in the virtual
     * network. It requires a DDoS protection plan associated with the resource.
     *
     * @param {boolean} [parameters.enableVmProtection] Indicates if VM protection
     * is enabled for all the subnets in the virtual network.
     *
     * @param {object} [parameters.ddosProtectionPlan] The DDoS protection plan
     * associated with the virtual network.
     *
     * @param {string} [parameters.ddosProtectionPlan.id] Resource ID.
     *
     * @param {string} [parameters.etag] Gets a unique read-only string that
     * changes whenever the resource is updated.
     *
     * @param {string} [parameters.id] Resource ID.
     *
     * @param {string} [parameters.location] Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {VirtualNetwork} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {VirtualNetwork} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link VirtualNetwork} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(resourceGroupName: string, virtualNetworkName: string, parameters: models.VirtualNetwork, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.VirtualNetwork>;
    beginCreateOrUpdate(resourceGroupName: string, virtualNetworkName: string, parameters: models.VirtualNetwork, callback: ServiceCallback<models.VirtualNetwork>): void;
    beginCreateOrUpdate(resourceGroupName: string, virtualNetworkName: string, parameters: models.VirtualNetwork, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VirtualNetwork>): void;


    /**
     * Updates a virtual network tags.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkName The name of the virtual network.
     *
     * @param {object} parameters Parameters supplied to update virtual network
     * tags.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<VirtualNetwork>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginUpdateTagsWithHttpOperationResponse(resourceGroupName: string, virtualNetworkName: string, parameters: models.TagsObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.VirtualNetwork>>;

    /**
     * Updates a virtual network tags.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkName The name of the virtual network.
     *
     * @param {object} parameters Parameters supplied to update virtual network
     * tags.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {VirtualNetwork} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {VirtualNetwork} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link VirtualNetwork} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginUpdateTags(resourceGroupName: string, virtualNetworkName: string, parameters: models.TagsObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.VirtualNetwork>;
    beginUpdateTags(resourceGroupName: string, virtualNetworkName: string, parameters: models.TagsObject, callback: ServiceCallback<models.VirtualNetwork>): void;
    beginUpdateTags(resourceGroupName: string, virtualNetworkName: string, parameters: models.TagsObject, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VirtualNetwork>): void;


    /**
     * Gets all virtual networks in a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<VirtualNetworkListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listAllNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.VirtualNetworkListResult>>;

    /**
     * Gets all virtual networks in a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {VirtualNetworkListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {VirtualNetworkListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link VirtualNetworkListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listAllNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.VirtualNetworkListResult>;
    listAllNext(nextPageLink: string, callback: ServiceCallback<models.VirtualNetworkListResult>): void;
    listAllNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VirtualNetworkListResult>): void;


    /**
     * Gets all virtual networks in a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<VirtualNetworkListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.VirtualNetworkListResult>>;

    /**
     * Gets all virtual networks in a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {VirtualNetworkListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {VirtualNetworkListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link VirtualNetworkListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.VirtualNetworkListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.VirtualNetworkListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VirtualNetworkListResult>): void;


    /**
     * Lists usage stats.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<VirtualNetworkListUsageResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listUsageNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.VirtualNetworkListUsageResult>>;

    /**
     * Lists usage stats.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {VirtualNetworkListUsageResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {VirtualNetworkListUsageResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link VirtualNetworkListUsageResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listUsageNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.VirtualNetworkListUsageResult>;
    listUsageNext(nextPageLink: string, callback: ServiceCallback<models.VirtualNetworkListUsageResult>): void;
    listUsageNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VirtualNetworkListUsageResult>): void;
}

/**
 * @class
 * Subnets
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the NetworkManagementClient.
 */
export interface Subnets {


    /**
     * Deletes the specified subnet.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkName The name of the virtual network.
     *
     * @param {string} subnetName The name of the subnet.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, virtualNetworkName: string, subnetName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the specified subnet.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkName The name of the virtual network.
     *
     * @param {string} subnetName The name of the subnet.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, virtualNetworkName: string, subnetName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, virtualNetworkName: string, subnetName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, virtualNetworkName: string, subnetName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets the specified subnet by virtual network and resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkName The name of the virtual network.
     *
     * @param {string} subnetName The name of the subnet.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Expands referenced resources.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Subnet>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, virtualNetworkName: string, subnetName: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Subnet>>;

    /**
     * Gets the specified subnet by virtual network and resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkName The name of the virtual network.
     *
     * @param {string} subnetName The name of the subnet.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Expands referenced resources.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Subnet} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Subnet} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Subnet} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, virtualNetworkName: string, subnetName: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.Subnet>;
    get(resourceGroupName: string, virtualNetworkName: string, subnetName: string, callback: ServiceCallback<models.Subnet>): void;
    get(resourceGroupName: string, virtualNetworkName: string, subnetName: string, options: { expand? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Subnet>): void;


    /**
     * Creates or updates a subnet in the specified virtual network.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkName The name of the virtual network.
     *
     * @param {string} subnetName The name of the subnet.
     *
     * @param {object} subnetParameters Parameters supplied to the create or update
     * subnet operation.
     *
     * @param {string} [subnetParameters.addressPrefix] The address prefix for the
     * subnet.
     *
     * @param {object} [subnetParameters.networkSecurityGroup] The reference of the
     * NetworkSecurityGroup resource.
     *
     * @param {array} [subnetParameters.networkSecurityGroup.securityRules] A
     * collection of security rules of the network security group.
     *
     * @param {array} [subnetParameters.networkSecurityGroup.defaultSecurityRules]
     * The default security rules of network security group.
     *
     * @param {string} [subnetParameters.networkSecurityGroup.resourceGuid] The
     * resource GUID property of the network security group resource.
     *
     * @param {string} [subnetParameters.networkSecurityGroup.provisioningState]
     * The provisioning state of the public IP resource. Possible values are:
     * 'Updating', 'Deleting', and 'Failed'.
     *
     * @param {string} [subnetParameters.networkSecurityGroup.etag] A unique
     * read-only string that changes whenever the resource is updated.
     *
     * @param {string} [subnetParameters.networkSecurityGroup.id] Resource ID.
     *
     * @param {string} [subnetParameters.networkSecurityGroup.location] Resource
     * location.
     *
     * @param {object} [subnetParameters.networkSecurityGroup.tags] Resource tags.
     *
     * @param {object} [subnetParameters.routeTable] The reference of the
     * RouteTable resource.
     *
     * @param {array} [subnetParameters.routeTable.routes] Collection of routes
     * contained within a route table.
     *
     * @param {boolean} [subnetParameters.routeTable.disableBgpRoutePropagation]
     * Gets or sets whether to disable the routes learned by BGP on that route
     * table. True means disable.
     *
     * @param {string} [subnetParameters.routeTable.provisioningState] The
     * provisioning state of the resource. Possible values are: 'Updating',
     * 'Deleting', and 'Failed'.
     *
     * @param {string} [subnetParameters.routeTable.etag] Gets a unique read-only
     * string that changes whenever the resource is updated.
     *
     * @param {string} [subnetParameters.routeTable.id] Resource ID.
     *
     * @param {string} [subnetParameters.routeTable.location] Resource location.
     *
     * @param {object} [subnetParameters.routeTable.tags] Resource tags.
     *
     * @param {array} [subnetParameters.serviceEndpoints] An array of service
     * endpoints.
     *
     * @param {array} [subnetParameters.resourceNavigationLinks] Gets an array of
     * references to the external resources using subnet.
     *
     * @param {string} [subnetParameters.provisioningState] The provisioning state
     * of the resource.
     *
     * @param {string} [subnetParameters.name] The name of the resource that is
     * unique within a resource group. This name can be used to access the
     * resource.
     *
     * @param {string} [subnetParameters.etag] A unique read-only string that
     * changes whenever the resource is updated.
     *
     * @param {string} [subnetParameters.id] Resource ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Subnet>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, virtualNetworkName: string, subnetName: string, subnetParameters: models.Subnet, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Subnet>>;

    /**
     * Creates or updates a subnet in the specified virtual network.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkName The name of the virtual network.
     *
     * @param {string} subnetName The name of the subnet.
     *
     * @param {object} subnetParameters Parameters supplied to the create or update
     * subnet operation.
     *
     * @param {string} [subnetParameters.addressPrefix] The address prefix for the
     * subnet.
     *
     * @param {object} [subnetParameters.networkSecurityGroup] The reference of the
     * NetworkSecurityGroup resource.
     *
     * @param {array} [subnetParameters.networkSecurityGroup.securityRules] A
     * collection of security rules of the network security group.
     *
     * @param {array} [subnetParameters.networkSecurityGroup.defaultSecurityRules]
     * The default security rules of network security group.
     *
     * @param {string} [subnetParameters.networkSecurityGroup.resourceGuid] The
     * resource GUID property of the network security group resource.
     *
     * @param {string} [subnetParameters.networkSecurityGroup.provisioningState]
     * The provisioning state of the public IP resource. Possible values are:
     * 'Updating', 'Deleting', and 'Failed'.
     *
     * @param {string} [subnetParameters.networkSecurityGroup.etag] A unique
     * read-only string that changes whenever the resource is updated.
     *
     * @param {string} [subnetParameters.networkSecurityGroup.id] Resource ID.
     *
     * @param {string} [subnetParameters.networkSecurityGroup.location] Resource
     * location.
     *
     * @param {object} [subnetParameters.networkSecurityGroup.tags] Resource tags.
     *
     * @param {object} [subnetParameters.routeTable] The reference of the
     * RouteTable resource.
     *
     * @param {array} [subnetParameters.routeTable.routes] Collection of routes
     * contained within a route table.
     *
     * @param {boolean} [subnetParameters.routeTable.disableBgpRoutePropagation]
     * Gets or sets whether to disable the routes learned by BGP on that route
     * table. True means disable.
     *
     * @param {string} [subnetParameters.routeTable.provisioningState] The
     * provisioning state of the resource. Possible values are: 'Updating',
     * 'Deleting', and 'Failed'.
     *
     * @param {string} [subnetParameters.routeTable.etag] Gets a unique read-only
     * string that changes whenever the resource is updated.
     *
     * @param {string} [subnetParameters.routeTable.id] Resource ID.
     *
     * @param {string} [subnetParameters.routeTable.location] Resource location.
     *
     * @param {object} [subnetParameters.routeTable.tags] Resource tags.
     *
     * @param {array} [subnetParameters.serviceEndpoints] An array of service
     * endpoints.
     *
     * @param {array} [subnetParameters.resourceNavigationLinks] Gets an array of
     * references to the external resources using subnet.
     *
     * @param {string} [subnetParameters.provisioningState] The provisioning state
     * of the resource.
     *
     * @param {string} [subnetParameters.name] The name of the resource that is
     * unique within a resource group. This name can be used to access the
     * resource.
     *
     * @param {string} [subnetParameters.etag] A unique read-only string that
     * changes whenever the resource is updated.
     *
     * @param {string} [subnetParameters.id] Resource ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Subnet} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Subnet} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Subnet} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, virtualNetworkName: string, subnetName: string, subnetParameters: models.Subnet, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Subnet>;
    createOrUpdate(resourceGroupName: string, virtualNetworkName: string, subnetName: string, subnetParameters: models.Subnet, callback: ServiceCallback<models.Subnet>): void;
    createOrUpdate(resourceGroupName: string, virtualNetworkName: string, subnetName: string, subnetParameters: models.Subnet, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Subnet>): void;


    /**
     * Gets all subnets in a virtual network.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkName The name of the virtual network.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SubnetListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(resourceGroupName: string, virtualNetworkName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SubnetListResult>>;

    /**
     * Gets all subnets in a virtual network.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkName The name of the virtual network.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SubnetListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SubnetListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SubnetListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(resourceGroupName: string, virtualNetworkName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SubnetListResult>;
    list(resourceGroupName: string, virtualNetworkName: string, callback: ServiceCallback<models.SubnetListResult>): void;
    list(resourceGroupName: string, virtualNetworkName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SubnetListResult>): void;


    /**
     * Deletes the specified subnet.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkName The name of the virtual network.
     *
     * @param {string} subnetName The name of the subnet.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, virtualNetworkName: string, subnetName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the specified subnet.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkName The name of the virtual network.
     *
     * @param {string} subnetName The name of the subnet.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(resourceGroupName: string, virtualNetworkName: string, subnetName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(resourceGroupName: string, virtualNetworkName: string, subnetName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, virtualNetworkName: string, subnetName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Creates or updates a subnet in the specified virtual network.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkName The name of the virtual network.
     *
     * @param {string} subnetName The name of the subnet.
     *
     * @param {object} subnetParameters Parameters supplied to the create or update
     * subnet operation.
     *
     * @param {string} [subnetParameters.addressPrefix] The address prefix for the
     * subnet.
     *
     * @param {object} [subnetParameters.networkSecurityGroup] The reference of the
     * NetworkSecurityGroup resource.
     *
     * @param {array} [subnetParameters.networkSecurityGroup.securityRules] A
     * collection of security rules of the network security group.
     *
     * @param {array} [subnetParameters.networkSecurityGroup.defaultSecurityRules]
     * The default security rules of network security group.
     *
     * @param {string} [subnetParameters.networkSecurityGroup.resourceGuid] The
     * resource GUID property of the network security group resource.
     *
     * @param {string} [subnetParameters.networkSecurityGroup.provisioningState]
     * The provisioning state of the public IP resource. Possible values are:
     * 'Updating', 'Deleting', and 'Failed'.
     *
     * @param {string} [subnetParameters.networkSecurityGroup.etag] A unique
     * read-only string that changes whenever the resource is updated.
     *
     * @param {string} [subnetParameters.networkSecurityGroup.id] Resource ID.
     *
     * @param {string} [subnetParameters.networkSecurityGroup.location] Resource
     * location.
     *
     * @param {object} [subnetParameters.networkSecurityGroup.tags] Resource tags.
     *
     * @param {object} [subnetParameters.routeTable] The reference of the
     * RouteTable resource.
     *
     * @param {array} [subnetParameters.routeTable.routes] Collection of routes
     * contained within a route table.
     *
     * @param {boolean} [subnetParameters.routeTable.disableBgpRoutePropagation]
     * Gets or sets whether to disable the routes learned by BGP on that route
     * table. True means disable.
     *
     * @param {string} [subnetParameters.routeTable.provisioningState] The
     * provisioning state of the resource. Possible values are: 'Updating',
     * 'Deleting', and 'Failed'.
     *
     * @param {string} [subnetParameters.routeTable.etag] Gets a unique read-only
     * string that changes whenever the resource is updated.
     *
     * @param {string} [subnetParameters.routeTable.id] Resource ID.
     *
     * @param {string} [subnetParameters.routeTable.location] Resource location.
     *
     * @param {object} [subnetParameters.routeTable.tags] Resource tags.
     *
     * @param {array} [subnetParameters.serviceEndpoints] An array of service
     * endpoints.
     *
     * @param {array} [subnetParameters.resourceNavigationLinks] Gets an array of
     * references to the external resources using subnet.
     *
     * @param {string} [subnetParameters.provisioningState] The provisioning state
     * of the resource.
     *
     * @param {string} [subnetParameters.name] The name of the resource that is
     * unique within a resource group. This name can be used to access the
     * resource.
     *
     * @param {string} [subnetParameters.etag] A unique read-only string that
     * changes whenever the resource is updated.
     *
     * @param {string} [subnetParameters.id] Resource ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Subnet>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, virtualNetworkName: string, subnetName: string, subnetParameters: models.Subnet, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Subnet>>;

    /**
     * Creates or updates a subnet in the specified virtual network.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkName The name of the virtual network.
     *
     * @param {string} subnetName The name of the subnet.
     *
     * @param {object} subnetParameters Parameters supplied to the create or update
     * subnet operation.
     *
     * @param {string} [subnetParameters.addressPrefix] The address prefix for the
     * subnet.
     *
     * @param {object} [subnetParameters.networkSecurityGroup] The reference of the
     * NetworkSecurityGroup resource.
     *
     * @param {array} [subnetParameters.networkSecurityGroup.securityRules] A
     * collection of security rules of the network security group.
     *
     * @param {array} [subnetParameters.networkSecurityGroup.defaultSecurityRules]
     * The default security rules of network security group.
     *
     * @param {string} [subnetParameters.networkSecurityGroup.resourceGuid] The
     * resource GUID property of the network security group resource.
     *
     * @param {string} [subnetParameters.networkSecurityGroup.provisioningState]
     * The provisioning state of the public IP resource. Possible values are:
     * 'Updating', 'Deleting', and 'Failed'.
     *
     * @param {string} [subnetParameters.networkSecurityGroup.etag] A unique
     * read-only string that changes whenever the resource is updated.
     *
     * @param {string} [subnetParameters.networkSecurityGroup.id] Resource ID.
     *
     * @param {string} [subnetParameters.networkSecurityGroup.location] Resource
     * location.
     *
     * @param {object} [subnetParameters.networkSecurityGroup.tags] Resource tags.
     *
     * @param {object} [subnetParameters.routeTable] The reference of the
     * RouteTable resource.
     *
     * @param {array} [subnetParameters.routeTable.routes] Collection of routes
     * contained within a route table.
     *
     * @param {boolean} [subnetParameters.routeTable.disableBgpRoutePropagation]
     * Gets or sets whether to disable the routes learned by BGP on that route
     * table. True means disable.
     *
     * @param {string} [subnetParameters.routeTable.provisioningState] The
     * provisioning state of the resource. Possible values are: 'Updating',
     * 'Deleting', and 'Failed'.
     *
     * @param {string} [subnetParameters.routeTable.etag] Gets a unique read-only
     * string that changes whenever the resource is updated.
     *
     * @param {string} [subnetParameters.routeTable.id] Resource ID.
     *
     * @param {string} [subnetParameters.routeTable.location] Resource location.
     *
     * @param {object} [subnetParameters.routeTable.tags] Resource tags.
     *
     * @param {array} [subnetParameters.serviceEndpoints] An array of service
     * endpoints.
     *
     * @param {array} [subnetParameters.resourceNavigationLinks] Gets an array of
     * references to the external resources using subnet.
     *
     * @param {string} [subnetParameters.provisioningState] The provisioning state
     * of the resource.
     *
     * @param {string} [subnetParameters.name] The name of the resource that is
     * unique within a resource group. This name can be used to access the
     * resource.
     *
     * @param {string} [subnetParameters.etag] A unique read-only string that
     * changes whenever the resource is updated.
     *
     * @param {string} [subnetParameters.id] Resource ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Subnet} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Subnet} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Subnet} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(resourceGroupName: string, virtualNetworkName: string, subnetName: string, subnetParameters: models.Subnet, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Subnet>;
    beginCreateOrUpdate(resourceGroupName: string, virtualNetworkName: string, subnetName: string, subnetParameters: models.Subnet, callback: ServiceCallback<models.Subnet>): void;
    beginCreateOrUpdate(resourceGroupName: string, virtualNetworkName: string, subnetName: string, subnetParameters: models.Subnet, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Subnet>): void;


    /**
     * Gets all subnets in a virtual network.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SubnetListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SubnetListResult>>;

    /**
     * Gets all subnets in a virtual network.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SubnetListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SubnetListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SubnetListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SubnetListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.SubnetListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SubnetListResult>): void;
}

/**
 * @class
 * VirtualNetworkPeerings
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the NetworkManagementClient.
 */
export interface VirtualNetworkPeerings {


    /**
     * Deletes the specified virtual network peering.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkName The name of the virtual network.
     *
     * @param {string} virtualNetworkPeeringName The name of the virtual network
     * peering.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, virtualNetworkName: string, virtualNetworkPeeringName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the specified virtual network peering.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkName The name of the virtual network.
     *
     * @param {string} virtualNetworkPeeringName The name of the virtual network
     * peering.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, virtualNetworkName: string, virtualNetworkPeeringName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, virtualNetworkName: string, virtualNetworkPeeringName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, virtualNetworkName: string, virtualNetworkPeeringName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets the specified virtual network peering.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkName The name of the virtual network.
     *
     * @param {string} virtualNetworkPeeringName The name of the virtual network
     * peering.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<VirtualNetworkPeering>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, virtualNetworkName: string, virtualNetworkPeeringName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.VirtualNetworkPeering>>;

    /**
     * Gets the specified virtual network peering.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkName The name of the virtual network.
     *
     * @param {string} virtualNetworkPeeringName The name of the virtual network
     * peering.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {VirtualNetworkPeering} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {VirtualNetworkPeering} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link VirtualNetworkPeering} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, virtualNetworkName: string, virtualNetworkPeeringName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.VirtualNetworkPeering>;
    get(resourceGroupName: string, virtualNetworkName: string, virtualNetworkPeeringName: string, callback: ServiceCallback<models.VirtualNetworkPeering>): void;
    get(resourceGroupName: string, virtualNetworkName: string, virtualNetworkPeeringName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VirtualNetworkPeering>): void;


    /**
     * Creates or updates a peering in the specified virtual network.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkName The name of the virtual network.
     *
     * @param {string} virtualNetworkPeeringName The name of the peering.
     *
     * @param {object} virtualNetworkPeeringParameters Parameters supplied to the
     * create or update virtual network peering operation.
     *
     * @param {boolean} [virtualNetworkPeeringParameters.allowVirtualNetworkAccess]
     * Whether the VMs in the linked virtual network space would be able to access
     * all the VMs in local Virtual network space.
     *
     * @param {boolean} [virtualNetworkPeeringParameters.allowForwardedTraffic]
     * Whether the forwarded traffic from the VMs in the remote virtual network
     * will be allowed/disallowed.
     *
     * @param {boolean} [virtualNetworkPeeringParameters.allowGatewayTransit] If
     * gateway links can be used in remote virtual networking to link to this
     * virtual network.
     *
     * @param {boolean} [virtualNetworkPeeringParameters.useRemoteGateways] If
     * remote gateways can be used on this virtual network. If the flag is set to
     * true, and allowGatewayTransit on remote peering is also true, virtual
     * network will use gateways of remote virtual network for transit. Only one
     * peering can have this flag set to true. This flag cannot be set if virtual
     * network already has a gateway.
     *
     * @param {object} [virtualNetworkPeeringParameters.remoteVirtualNetwork] The
     * reference of the remote virtual network. The remote virtual network can be
     * in the same or different region (preview). See here to register for the
     * preview and learn more
     * (https://docs.microsoft.com/en-us/azure/virtual-network/virtual-network-create-peering).
     *
     * @param {string} [virtualNetworkPeeringParameters.remoteVirtualNetwork.id]
     * Resource ID.
     *
     * @param {object} [virtualNetworkPeeringParameters.remoteAddressSpace] The
     * reference of the remote virtual network address space.
     *
     * @param {array}
     * [virtualNetworkPeeringParameters.remoteAddressSpace.addressPrefixes] A list
     * of address blocks reserved for this virtual network in CIDR notation.
     *
     * @param {string} [virtualNetworkPeeringParameters.peeringState] The status of
     * the virtual network peering. Possible values are 'Initiated', 'Connected',
     * and 'Disconnected'. Possible values include: 'Initiated', 'Connected',
     * 'Disconnected'
     *
     * @param {string} [virtualNetworkPeeringParameters.provisioningState] The
     * provisioning state of the resource.
     *
     * @param {string} [virtualNetworkPeeringParameters.name] The name of the
     * resource that is unique within a resource group. This name can be used to
     * access the resource.
     *
     * @param {string} [virtualNetworkPeeringParameters.etag] A unique read-only
     * string that changes whenever the resource is updated.
     *
     * @param {string} [virtualNetworkPeeringParameters.id] Resource ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<VirtualNetworkPeering>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, virtualNetworkName: string, virtualNetworkPeeringName: string, virtualNetworkPeeringParameters: models.VirtualNetworkPeering, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.VirtualNetworkPeering>>;

    /**
     * Creates or updates a peering in the specified virtual network.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkName The name of the virtual network.
     *
     * @param {string} virtualNetworkPeeringName The name of the peering.
     *
     * @param {object} virtualNetworkPeeringParameters Parameters supplied to the
     * create or update virtual network peering operation.
     *
     * @param {boolean} [virtualNetworkPeeringParameters.allowVirtualNetworkAccess]
     * Whether the VMs in the linked virtual network space would be able to access
     * all the VMs in local Virtual network space.
     *
     * @param {boolean} [virtualNetworkPeeringParameters.allowForwardedTraffic]
     * Whether the forwarded traffic from the VMs in the remote virtual network
     * will be allowed/disallowed.
     *
     * @param {boolean} [virtualNetworkPeeringParameters.allowGatewayTransit] If
     * gateway links can be used in remote virtual networking to link to this
     * virtual network.
     *
     * @param {boolean} [virtualNetworkPeeringParameters.useRemoteGateways] If
     * remote gateways can be used on this virtual network. If the flag is set to
     * true, and allowGatewayTransit on remote peering is also true, virtual
     * network will use gateways of remote virtual network for transit. Only one
     * peering can have this flag set to true. This flag cannot be set if virtual
     * network already has a gateway.
     *
     * @param {object} [virtualNetworkPeeringParameters.remoteVirtualNetwork] The
     * reference of the remote virtual network. The remote virtual network can be
     * in the same or different region (preview). See here to register for the
     * preview and learn more
     * (https://docs.microsoft.com/en-us/azure/virtual-network/virtual-network-create-peering).
     *
     * @param {string} [virtualNetworkPeeringParameters.remoteVirtualNetwork.id]
     * Resource ID.
     *
     * @param {object} [virtualNetworkPeeringParameters.remoteAddressSpace] The
     * reference of the remote virtual network address space.
     *
     * @param {array}
     * [virtualNetworkPeeringParameters.remoteAddressSpace.addressPrefixes] A list
     * of address blocks reserved for this virtual network in CIDR notation.
     *
     * @param {string} [virtualNetworkPeeringParameters.peeringState] The status of
     * the virtual network peering. Possible values are 'Initiated', 'Connected',
     * and 'Disconnected'. Possible values include: 'Initiated', 'Connected',
     * 'Disconnected'
     *
     * @param {string} [virtualNetworkPeeringParameters.provisioningState] The
     * provisioning state of the resource.
     *
     * @param {string} [virtualNetworkPeeringParameters.name] The name of the
     * resource that is unique within a resource group. This name can be used to
     * access the resource.
     *
     * @param {string} [virtualNetworkPeeringParameters.etag] A unique read-only
     * string that changes whenever the resource is updated.
     *
     * @param {string} [virtualNetworkPeeringParameters.id] Resource ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {VirtualNetworkPeering} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {VirtualNetworkPeering} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link VirtualNetworkPeering} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, virtualNetworkName: string, virtualNetworkPeeringName: string, virtualNetworkPeeringParameters: models.VirtualNetworkPeering, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.VirtualNetworkPeering>;
    createOrUpdate(resourceGroupName: string, virtualNetworkName: string, virtualNetworkPeeringName: string, virtualNetworkPeeringParameters: models.VirtualNetworkPeering, callback: ServiceCallback<models.VirtualNetworkPeering>): void;
    createOrUpdate(resourceGroupName: string, virtualNetworkName: string, virtualNetworkPeeringName: string, virtualNetworkPeeringParameters: models.VirtualNetworkPeering, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VirtualNetworkPeering>): void;


    /**
     * Gets all virtual network peerings in a virtual network.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkName The name of the virtual network.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<VirtualNetworkPeeringListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(resourceGroupName: string, virtualNetworkName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.VirtualNetworkPeeringListResult>>;

    /**
     * Gets all virtual network peerings in a virtual network.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkName The name of the virtual network.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {VirtualNetworkPeeringListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {VirtualNetworkPeeringListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link VirtualNetworkPeeringListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(resourceGroupName: string, virtualNetworkName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.VirtualNetworkPeeringListResult>;
    list(resourceGroupName: string, virtualNetworkName: string, callback: ServiceCallback<models.VirtualNetworkPeeringListResult>): void;
    list(resourceGroupName: string, virtualNetworkName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VirtualNetworkPeeringListResult>): void;


    /**
     * Deletes the specified virtual network peering.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkName The name of the virtual network.
     *
     * @param {string} virtualNetworkPeeringName The name of the virtual network
     * peering.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, virtualNetworkName: string, virtualNetworkPeeringName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the specified virtual network peering.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkName The name of the virtual network.
     *
     * @param {string} virtualNetworkPeeringName The name of the virtual network
     * peering.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(resourceGroupName: string, virtualNetworkName: string, virtualNetworkPeeringName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(resourceGroupName: string, virtualNetworkName: string, virtualNetworkPeeringName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, virtualNetworkName: string, virtualNetworkPeeringName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Creates or updates a peering in the specified virtual network.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkName The name of the virtual network.
     *
     * @param {string} virtualNetworkPeeringName The name of the peering.
     *
     * @param {object} virtualNetworkPeeringParameters Parameters supplied to the
     * create or update virtual network peering operation.
     *
     * @param {boolean} [virtualNetworkPeeringParameters.allowVirtualNetworkAccess]
     * Whether the VMs in the linked virtual network space would be able to access
     * all the VMs in local Virtual network space.
     *
     * @param {boolean} [virtualNetworkPeeringParameters.allowForwardedTraffic]
     * Whether the forwarded traffic from the VMs in the remote virtual network
     * will be allowed/disallowed.
     *
     * @param {boolean} [virtualNetworkPeeringParameters.allowGatewayTransit] If
     * gateway links can be used in remote virtual networking to link to this
     * virtual network.
     *
     * @param {boolean} [virtualNetworkPeeringParameters.useRemoteGateways] If
     * remote gateways can be used on this virtual network. If the flag is set to
     * true, and allowGatewayTransit on remote peering is also true, virtual
     * network will use gateways of remote virtual network for transit. Only one
     * peering can have this flag set to true. This flag cannot be set if virtual
     * network already has a gateway.
     *
     * @param {object} [virtualNetworkPeeringParameters.remoteVirtualNetwork] The
     * reference of the remote virtual network. The remote virtual network can be
     * in the same or different region (preview). See here to register for the
     * preview and learn more
     * (https://docs.microsoft.com/en-us/azure/virtual-network/virtual-network-create-peering).
     *
     * @param {string} [virtualNetworkPeeringParameters.remoteVirtualNetwork.id]
     * Resource ID.
     *
     * @param {object} [virtualNetworkPeeringParameters.remoteAddressSpace] The
     * reference of the remote virtual network address space.
     *
     * @param {array}
     * [virtualNetworkPeeringParameters.remoteAddressSpace.addressPrefixes] A list
     * of address blocks reserved for this virtual network in CIDR notation.
     *
     * @param {string} [virtualNetworkPeeringParameters.peeringState] The status of
     * the virtual network peering. Possible values are 'Initiated', 'Connected',
     * and 'Disconnected'. Possible values include: 'Initiated', 'Connected',
     * 'Disconnected'
     *
     * @param {string} [virtualNetworkPeeringParameters.provisioningState] The
     * provisioning state of the resource.
     *
     * @param {string} [virtualNetworkPeeringParameters.name] The name of the
     * resource that is unique within a resource group. This name can be used to
     * access the resource.
     *
     * @param {string} [virtualNetworkPeeringParameters.etag] A unique read-only
     * string that changes whenever the resource is updated.
     *
     * @param {string} [virtualNetworkPeeringParameters.id] Resource ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<VirtualNetworkPeering>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, virtualNetworkName: string, virtualNetworkPeeringName: string, virtualNetworkPeeringParameters: models.VirtualNetworkPeering, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.VirtualNetworkPeering>>;

    /**
     * Creates or updates a peering in the specified virtual network.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkName The name of the virtual network.
     *
     * @param {string} virtualNetworkPeeringName The name of the peering.
     *
     * @param {object} virtualNetworkPeeringParameters Parameters supplied to the
     * create or update virtual network peering operation.
     *
     * @param {boolean} [virtualNetworkPeeringParameters.allowVirtualNetworkAccess]
     * Whether the VMs in the linked virtual network space would be able to access
     * all the VMs in local Virtual network space.
     *
     * @param {boolean} [virtualNetworkPeeringParameters.allowForwardedTraffic]
     * Whether the forwarded traffic from the VMs in the remote virtual network
     * will be allowed/disallowed.
     *
     * @param {boolean} [virtualNetworkPeeringParameters.allowGatewayTransit] If
     * gateway links can be used in remote virtual networking to link to this
     * virtual network.
     *
     * @param {boolean} [virtualNetworkPeeringParameters.useRemoteGateways] If
     * remote gateways can be used on this virtual network. If the flag is set to
     * true, and allowGatewayTransit on remote peering is also true, virtual
     * network will use gateways of remote virtual network for transit. Only one
     * peering can have this flag set to true. This flag cannot be set if virtual
     * network already has a gateway.
     *
     * @param {object} [virtualNetworkPeeringParameters.remoteVirtualNetwork] The
     * reference of the remote virtual network. The remote virtual network can be
     * in the same or different region (preview). See here to register for the
     * preview and learn more
     * (https://docs.microsoft.com/en-us/azure/virtual-network/virtual-network-create-peering).
     *
     * @param {string} [virtualNetworkPeeringParameters.remoteVirtualNetwork.id]
     * Resource ID.
     *
     * @param {object} [virtualNetworkPeeringParameters.remoteAddressSpace] The
     * reference of the remote virtual network address space.
     *
     * @param {array}
     * [virtualNetworkPeeringParameters.remoteAddressSpace.addressPrefixes] A list
     * of address blocks reserved for this virtual network in CIDR notation.
     *
     * @param {string} [virtualNetworkPeeringParameters.peeringState] The status of
     * the virtual network peering. Possible values are 'Initiated', 'Connected',
     * and 'Disconnected'. Possible values include: 'Initiated', 'Connected',
     * 'Disconnected'
     *
     * @param {string} [virtualNetworkPeeringParameters.provisioningState] The
     * provisioning state of the resource.
     *
     * @param {string} [virtualNetworkPeeringParameters.name] The name of the
     * resource that is unique within a resource group. This name can be used to
     * access the resource.
     *
     * @param {string} [virtualNetworkPeeringParameters.etag] A unique read-only
     * string that changes whenever the resource is updated.
     *
     * @param {string} [virtualNetworkPeeringParameters.id] Resource ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {VirtualNetworkPeering} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {VirtualNetworkPeering} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link VirtualNetworkPeering} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(resourceGroupName: string, virtualNetworkName: string, virtualNetworkPeeringName: string, virtualNetworkPeeringParameters: models.VirtualNetworkPeering, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.VirtualNetworkPeering>;
    beginCreateOrUpdate(resourceGroupName: string, virtualNetworkName: string, virtualNetworkPeeringName: string, virtualNetworkPeeringParameters: models.VirtualNetworkPeering, callback: ServiceCallback<models.VirtualNetworkPeering>): void;
    beginCreateOrUpdate(resourceGroupName: string, virtualNetworkName: string, virtualNetworkPeeringName: string, virtualNetworkPeeringParameters: models.VirtualNetworkPeering, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VirtualNetworkPeering>): void;


    /**
     * Gets all virtual network peerings in a virtual network.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<VirtualNetworkPeeringListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.VirtualNetworkPeeringListResult>>;

    /**
     * Gets all virtual network peerings in a virtual network.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {VirtualNetworkPeeringListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {VirtualNetworkPeeringListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link VirtualNetworkPeeringListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.VirtualNetworkPeeringListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.VirtualNetworkPeeringListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VirtualNetworkPeeringListResult>): void;
}

/**
 * @class
 * VirtualNetworkGateways
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the NetworkManagementClient.
 */
export interface VirtualNetworkGateways {


    /**
     * Creates or updates a virtual network gateway in the specified resource
     * group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayName The name of the virtual network
     * gateway.
     *
     * @param {object} parameters Parameters supplied to create or update virtual
     * network gateway operation.
     *
     * @param {array} [parameters.ipConfigurations] IP configurations for virtual
     * network gateway.
     *
     * @param {string} [parameters.gatewayType] The type of this virtual network
     * gateway. Possible values are: 'Vpn' and 'ExpressRoute'. Possible values
     * include: 'Vpn', 'ExpressRoute'
     *
     * @param {string} [parameters.vpnType] The type of this virtual network
     * gateway. Possible values are: 'PolicyBased' and 'RouteBased'. Possible
     * values include: 'PolicyBased', 'RouteBased'
     *
     * @param {boolean} [parameters.enableBgp] Whether BGP is enabled for this
     * virtual network gateway or not.
     *
     * @param {boolean} [parameters.activeActive] ActiveActive flag
     *
     * @param {object} [parameters.gatewayDefaultSite] The reference of the
     * LocalNetworkGateway resource which represents local network site having
     * default routes. Assign Null value in case of removing existing default site
     * setting.
     *
     * @param {string} [parameters.gatewayDefaultSite.id] Resource ID.
     *
     * @param {object} [parameters.sku] The reference of the
     * VirtualNetworkGatewaySku resource which represents the SKU selected for
     * Virtual network gateway.
     *
     * @param {string} [parameters.sku.name] Gateway SKU name. Possible values
     * include: 'Basic', 'HighPerformance', 'Standard', 'UltraPerformance',
     * 'VpnGw1', 'VpnGw2', 'VpnGw3', 'VpnGw1AZ', 'VpnGw2AZ', 'VpnGw3AZ', 'ErGw1AZ',
     * 'ErGw2AZ', 'ErGw3AZ'
     *
     * @param {string} [parameters.sku.tier] Gateway SKU tier. Possible values
     * include: 'Basic', 'HighPerformance', 'Standard', 'UltraPerformance',
     * 'VpnGw1', 'VpnGw2', 'VpnGw3', 'VpnGw1AZ', 'VpnGw2AZ', 'VpnGw3AZ', 'ErGw1AZ',
     * 'ErGw2AZ', 'ErGw3AZ'
     *
     * @param {number} [parameters.sku.capacity] The capacity.
     *
     * @param {object} [parameters.vpnClientConfiguration] The reference of the
     * VpnClientConfiguration resource which represents the P2S VpnClient
     * configurations.
     *
     * @param {object} [parameters.vpnClientConfiguration.vpnClientAddressPool] The
     * reference of the address space resource which represents Address space for
     * P2S VpnClient.
     *
     * @param {array}
     * [parameters.vpnClientConfiguration.vpnClientAddressPool.addressPrefixes] A
     * list of address blocks reserved for this virtual network in CIDR notation.
     *
     * @param {array} [parameters.vpnClientConfiguration.vpnClientRootCertificates]
     * VpnClientRootCertificate for virtual network gateway.
     *
     * @param {array}
     * [parameters.vpnClientConfiguration.vpnClientRevokedCertificates]
     * VpnClientRevokedCertificate for Virtual network gateway.
     *
     * @param {array} [parameters.vpnClientConfiguration.vpnClientProtocols]
     * VpnClientProtocols for Virtual network gateway.
     *
     * @param {array} [parameters.vpnClientConfiguration.vpnClientIpsecPolicies]
     * VpnClientIpsecPolicies for virtual network gateway P2S client.
     *
     * @param {string} [parameters.vpnClientConfiguration.radiusServerAddress] The
     * radius server address property of the VirtualNetworkGateway resource for vpn
     * client connection.
     *
     * @param {string} [parameters.vpnClientConfiguration.radiusServerSecret] The
     * radius secret property of the VirtualNetworkGateway resource for vpn client
     * connection.
     *
     * @param {object} [parameters.bgpSettings] Virtual network gateway's BGP
     * speaker settings.
     *
     * @param {number} [parameters.bgpSettings.asn] The BGP speaker's ASN.
     *
     * @param {string} [parameters.bgpSettings.bgpPeeringAddress] The BGP peering
     * address and BGP identifier of this BGP speaker.
     *
     * @param {number} [parameters.bgpSettings.peerWeight] The weight added to
     * routes learned from this BGP speaker.
     *
     * @param {string} [parameters.resourceGuid] The resource GUID property of the
     * VirtualNetworkGateway resource.
     *
     * @param {string} [parameters.etag] Gets a unique read-only string that
     * changes whenever the resource is updated.
     *
     * @param {string} [parameters.id] Resource ID.
     *
     * @param {string} [parameters.location] Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<VirtualNetworkGateway>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, virtualNetworkGatewayName: string, parameters: models.VirtualNetworkGateway, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.VirtualNetworkGateway>>;

    /**
     * Creates or updates a virtual network gateway in the specified resource
     * group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayName The name of the virtual network
     * gateway.
     *
     * @param {object} parameters Parameters supplied to create or update virtual
     * network gateway operation.
     *
     * @param {array} [parameters.ipConfigurations] IP configurations for virtual
     * network gateway.
     *
     * @param {string} [parameters.gatewayType] The type of this virtual network
     * gateway. Possible values are: 'Vpn' and 'ExpressRoute'. Possible values
     * include: 'Vpn', 'ExpressRoute'
     *
     * @param {string} [parameters.vpnType] The type of this virtual network
     * gateway. Possible values are: 'PolicyBased' and 'RouteBased'. Possible
     * values include: 'PolicyBased', 'RouteBased'
     *
     * @param {boolean} [parameters.enableBgp] Whether BGP is enabled for this
     * virtual network gateway or not.
     *
     * @param {boolean} [parameters.activeActive] ActiveActive flag
     *
     * @param {object} [parameters.gatewayDefaultSite] The reference of the
     * LocalNetworkGateway resource which represents local network site having
     * default routes. Assign Null value in case of removing existing default site
     * setting.
     *
     * @param {string} [parameters.gatewayDefaultSite.id] Resource ID.
     *
     * @param {object} [parameters.sku] The reference of the
     * VirtualNetworkGatewaySku resource which represents the SKU selected for
     * Virtual network gateway.
     *
     * @param {string} [parameters.sku.name] Gateway SKU name. Possible values
     * include: 'Basic', 'HighPerformance', 'Standard', 'UltraPerformance',
     * 'VpnGw1', 'VpnGw2', 'VpnGw3', 'VpnGw1AZ', 'VpnGw2AZ', 'VpnGw3AZ', 'ErGw1AZ',
     * 'ErGw2AZ', 'ErGw3AZ'
     *
     * @param {string} [parameters.sku.tier] Gateway SKU tier. Possible values
     * include: 'Basic', 'HighPerformance', 'Standard', 'UltraPerformance',
     * 'VpnGw1', 'VpnGw2', 'VpnGw3', 'VpnGw1AZ', 'VpnGw2AZ', 'VpnGw3AZ', 'ErGw1AZ',
     * 'ErGw2AZ', 'ErGw3AZ'
     *
     * @param {number} [parameters.sku.capacity] The capacity.
     *
     * @param {object} [parameters.vpnClientConfiguration] The reference of the
     * VpnClientConfiguration resource which represents the P2S VpnClient
     * configurations.
     *
     * @param {object} [parameters.vpnClientConfiguration.vpnClientAddressPool] The
     * reference of the address space resource which represents Address space for
     * P2S VpnClient.
     *
     * @param {array}
     * [parameters.vpnClientConfiguration.vpnClientAddressPool.addressPrefixes] A
     * list of address blocks reserved for this virtual network in CIDR notation.
     *
     * @param {array} [parameters.vpnClientConfiguration.vpnClientRootCertificates]
     * VpnClientRootCertificate for virtual network gateway.
     *
     * @param {array}
     * [parameters.vpnClientConfiguration.vpnClientRevokedCertificates]
     * VpnClientRevokedCertificate for Virtual network gateway.
     *
     * @param {array} [parameters.vpnClientConfiguration.vpnClientProtocols]
     * VpnClientProtocols for Virtual network gateway.
     *
     * @param {array} [parameters.vpnClientConfiguration.vpnClientIpsecPolicies]
     * VpnClientIpsecPolicies for virtual network gateway P2S client.
     *
     * @param {string} [parameters.vpnClientConfiguration.radiusServerAddress] The
     * radius server address property of the VirtualNetworkGateway resource for vpn
     * client connection.
     *
     * @param {string} [parameters.vpnClientConfiguration.radiusServerSecret] The
     * radius secret property of the VirtualNetworkGateway resource for vpn client
     * connection.
     *
     * @param {object} [parameters.bgpSettings] Virtual network gateway's BGP
     * speaker settings.
     *
     * @param {number} [parameters.bgpSettings.asn] The BGP speaker's ASN.
     *
     * @param {string} [parameters.bgpSettings.bgpPeeringAddress] The BGP peering
     * address and BGP identifier of this BGP speaker.
     *
     * @param {number} [parameters.bgpSettings.peerWeight] The weight added to
     * routes learned from this BGP speaker.
     *
     * @param {string} [parameters.resourceGuid] The resource GUID property of the
     * VirtualNetworkGateway resource.
     *
     * @param {string} [parameters.etag] Gets a unique read-only string that
     * changes whenever the resource is updated.
     *
     * @param {string} [parameters.id] Resource ID.
     *
     * @param {string} [parameters.location] Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {VirtualNetworkGateway} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {VirtualNetworkGateway} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link VirtualNetworkGateway} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, virtualNetworkGatewayName: string, parameters: models.VirtualNetworkGateway, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.VirtualNetworkGateway>;
    createOrUpdate(resourceGroupName: string, virtualNetworkGatewayName: string, parameters: models.VirtualNetworkGateway, callback: ServiceCallback<models.VirtualNetworkGateway>): void;
    createOrUpdate(resourceGroupName: string, virtualNetworkGatewayName: string, parameters: models.VirtualNetworkGateway, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VirtualNetworkGateway>): void;


    /**
     * Gets the specified virtual network gateway by resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayName The name of the virtual network
     * gateway.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<VirtualNetworkGateway>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, virtualNetworkGatewayName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.VirtualNetworkGateway>>;

    /**
     * Gets the specified virtual network gateway by resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayName The name of the virtual network
     * gateway.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {VirtualNetworkGateway} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {VirtualNetworkGateway} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link VirtualNetworkGateway} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, virtualNetworkGatewayName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.VirtualNetworkGateway>;
    get(resourceGroupName: string, virtualNetworkGatewayName: string, callback: ServiceCallback<models.VirtualNetworkGateway>): void;
    get(resourceGroupName: string, virtualNetworkGatewayName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VirtualNetworkGateway>): void;


    /**
     * Deletes the specified virtual network gateway.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayName The name of the virtual network
     * gateway.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, virtualNetworkGatewayName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the specified virtual network gateway.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayName The name of the virtual network
     * gateway.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, virtualNetworkGatewayName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, virtualNetworkGatewayName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, virtualNetworkGatewayName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Updates a virtual network gateway tags.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayName The name of the virtual network
     * gateway.
     *
     * @param {object} parameters Parameters supplied to update virtual network
     * gateway tags.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<VirtualNetworkGateway>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateTagsWithHttpOperationResponse(resourceGroupName: string, virtualNetworkGatewayName: string, parameters: models.TagsObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.VirtualNetworkGateway>>;

    /**
     * Updates a virtual network gateway tags.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayName The name of the virtual network
     * gateway.
     *
     * @param {object} parameters Parameters supplied to update virtual network
     * gateway tags.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {VirtualNetworkGateway} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {VirtualNetworkGateway} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link VirtualNetworkGateway} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updateTags(resourceGroupName: string, virtualNetworkGatewayName: string, parameters: models.TagsObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.VirtualNetworkGateway>;
    updateTags(resourceGroupName: string, virtualNetworkGatewayName: string, parameters: models.TagsObject, callback: ServiceCallback<models.VirtualNetworkGateway>): void;
    updateTags(resourceGroupName: string, virtualNetworkGatewayName: string, parameters: models.TagsObject, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VirtualNetworkGateway>): void;


    /**
     * Gets all virtual network gateways by resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<VirtualNetworkGatewayListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.VirtualNetworkGatewayListResult>>;

    /**
     * Gets all virtual network gateways by resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {VirtualNetworkGatewayListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {VirtualNetworkGatewayListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link VirtualNetworkGatewayListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.VirtualNetworkGatewayListResult>;
    list(resourceGroupName: string, callback: ServiceCallback<models.VirtualNetworkGatewayListResult>): void;
    list(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VirtualNetworkGatewayListResult>): void;


    /**
     * Gets all the connections in a virtual network gateway.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayName The name of the virtual network
     * gateway.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<VirtualNetworkGatewayListConnectionsResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listConnectionsWithHttpOperationResponse(resourceGroupName: string, virtualNetworkGatewayName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.VirtualNetworkGatewayListConnectionsResult>>;

    /**
     * Gets all the connections in a virtual network gateway.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayName The name of the virtual network
     * gateway.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {VirtualNetworkGatewayListConnectionsResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {VirtualNetworkGatewayListConnectionsResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link VirtualNetworkGatewayListConnectionsResult}
     *                      for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listConnections(resourceGroupName: string, virtualNetworkGatewayName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.VirtualNetworkGatewayListConnectionsResult>;
    listConnections(resourceGroupName: string, virtualNetworkGatewayName: string, callback: ServiceCallback<models.VirtualNetworkGatewayListConnectionsResult>): void;
    listConnections(resourceGroupName: string, virtualNetworkGatewayName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VirtualNetworkGatewayListConnectionsResult>): void;


    /**
     * Resets the primary of the virtual network gateway in the specified resource
     * group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayName The name of the virtual network
     * gateway.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.gatewayVip] Virtual network gateway vip address
     * supplied to the begin reset of the active-active feature enabled gateway.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<VirtualNetworkGateway>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    resetWithHttpOperationResponse(resourceGroupName: string, virtualNetworkGatewayName: string, options?: { gatewayVip? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.VirtualNetworkGateway>>;

    /**
     * Resets the primary of the virtual network gateway in the specified resource
     * group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayName The name of the virtual network
     * gateway.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.gatewayVip] Virtual network gateway vip address
     * supplied to the begin reset of the active-active feature enabled gateway.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {VirtualNetworkGateway} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {VirtualNetworkGateway} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link VirtualNetworkGateway} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    reset(resourceGroupName: string, virtualNetworkGatewayName: string, options?: { gatewayVip? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.VirtualNetworkGateway>;
    reset(resourceGroupName: string, virtualNetworkGatewayName: string, callback: ServiceCallback<models.VirtualNetworkGateway>): void;
    reset(resourceGroupName: string, virtualNetworkGatewayName: string, options: { gatewayVip? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VirtualNetworkGateway>): void;


    /**
     * Generates VPN client package for P2S client of the virtual network gateway
     * in the specified resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayName The name of the virtual network
     * gateway.
     *
     * @param {object} parameters Parameters supplied to the generate virtual
     * network gateway VPN client package operation.
     *
     * @param {string} [parameters.processorArchitecture] VPN client Processor
     * Architecture. Possible values are: 'AMD64' and 'X86'. Possible values
     * include: 'Amd64', 'X86'
     *
     * @param {string} [parameters.authenticationMethod] VPN client Authentication
     * Method. Possible values are: 'EAPTLS' and 'EAPMSCHAPv2'. Possible values
     * include: 'EAPTLS', 'EAPMSCHAPv2'
     *
     * @param {string} [parameters.radiusServerAuthCertificate] The public
     * certificate data for the radius server authentication certificate as a
     * Base-64 encoded string. Required only if external radius authentication has
     * been configured with EAPTLS authentication.
     *
     * @param {array} [parameters.clientRootCertificates] A list of client root
     * certificates public certificate data encoded as Base-64 strings. Optional
     * parameter for external radius based authentication with EAPTLS.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<String>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    generatevpnclientpackageWithHttpOperationResponse(resourceGroupName: string, virtualNetworkGatewayName: string, parameters: models.VpnClientParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<string>>;

    /**
     * Generates VPN client package for P2S client of the virtual network gateway
     * in the specified resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayName The name of the virtual network
     * gateway.
     *
     * @param {object} parameters Parameters supplied to the generate virtual
     * network gateway VPN client package operation.
     *
     * @param {string} [parameters.processorArchitecture] VPN client Processor
     * Architecture. Possible values are: 'AMD64' and 'X86'. Possible values
     * include: 'Amd64', 'X86'
     *
     * @param {string} [parameters.authenticationMethod] VPN client Authentication
     * Method. Possible values are: 'EAPTLS' and 'EAPMSCHAPv2'. Possible values
     * include: 'EAPTLS', 'EAPMSCHAPv2'
     *
     * @param {string} [parameters.radiusServerAuthCertificate] The public
     * certificate data for the radius server authentication certificate as a
     * Base-64 encoded string. Required only if external radius authentication has
     * been configured with EAPTLS authentication.
     *
     * @param {array} [parameters.clientRootCertificates] A list of client root
     * certificates public certificate data encoded as Base-64 strings. Optional
     * parameter for external radius based authentication with EAPTLS.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {String} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {String} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    generatevpnclientpackage(resourceGroupName: string, virtualNetworkGatewayName: string, parameters: models.VpnClientParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<string>;
    generatevpnclientpackage(resourceGroupName: string, virtualNetworkGatewayName: string, parameters: models.VpnClientParameters, callback: ServiceCallback<string>): void;
    generatevpnclientpackage(resourceGroupName: string, virtualNetworkGatewayName: string, parameters: models.VpnClientParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;


    /**
     * Generates VPN profile for P2S client of the virtual network gateway in the
     * specified resource group. Used for IKEV2 and radius based authentication.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayName The name of the virtual network
     * gateway.
     *
     * @param {object} parameters Parameters supplied to the generate virtual
     * network gateway VPN client package operation.
     *
     * @param {string} [parameters.processorArchitecture] VPN client Processor
     * Architecture. Possible values are: 'AMD64' and 'X86'. Possible values
     * include: 'Amd64', 'X86'
     *
     * @param {string} [parameters.authenticationMethod] VPN client Authentication
     * Method. Possible values are: 'EAPTLS' and 'EAPMSCHAPv2'. Possible values
     * include: 'EAPTLS', 'EAPMSCHAPv2'
     *
     * @param {string} [parameters.radiusServerAuthCertificate] The public
     * certificate data for the radius server authentication certificate as a
     * Base-64 encoded string. Required only if external radius authentication has
     * been configured with EAPTLS authentication.
     *
     * @param {array} [parameters.clientRootCertificates] A list of client root
     * certificates public certificate data encoded as Base-64 strings. Optional
     * parameter for external radius based authentication with EAPTLS.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<String>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    generateVpnProfileWithHttpOperationResponse(resourceGroupName: string, virtualNetworkGatewayName: string, parameters: models.VpnClientParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<string>>;

    /**
     * Generates VPN profile for P2S client of the virtual network gateway in the
     * specified resource group. Used for IKEV2 and radius based authentication.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayName The name of the virtual network
     * gateway.
     *
     * @param {object} parameters Parameters supplied to the generate virtual
     * network gateway VPN client package operation.
     *
     * @param {string} [parameters.processorArchitecture] VPN client Processor
     * Architecture. Possible values are: 'AMD64' and 'X86'. Possible values
     * include: 'Amd64', 'X86'
     *
     * @param {string} [parameters.authenticationMethod] VPN client Authentication
     * Method. Possible values are: 'EAPTLS' and 'EAPMSCHAPv2'. Possible values
     * include: 'EAPTLS', 'EAPMSCHAPv2'
     *
     * @param {string} [parameters.radiusServerAuthCertificate] The public
     * certificate data for the radius server authentication certificate as a
     * Base-64 encoded string. Required only if external radius authentication has
     * been configured with EAPTLS authentication.
     *
     * @param {array} [parameters.clientRootCertificates] A list of client root
     * certificates public certificate data encoded as Base-64 strings. Optional
     * parameter for external radius based authentication with EAPTLS.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {String} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {String} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    generateVpnProfile(resourceGroupName: string, virtualNetworkGatewayName: string, parameters: models.VpnClientParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<string>;
    generateVpnProfile(resourceGroupName: string, virtualNetworkGatewayName: string, parameters: models.VpnClientParameters, callback: ServiceCallback<string>): void;
    generateVpnProfile(resourceGroupName: string, virtualNetworkGatewayName: string, parameters: models.VpnClientParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;


    /**
     * Gets pre-generated VPN profile for P2S client of the virtual network gateway
     * in the specified resource group. The profile needs to be generated first
     * using generateVpnProfile.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayName The name of the virtual network
     * gateway.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<String>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getVpnProfilePackageUrlWithHttpOperationResponse(resourceGroupName: string, virtualNetworkGatewayName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<string>>;

    /**
     * Gets pre-generated VPN profile for P2S client of the virtual network gateway
     * in the specified resource group. The profile needs to be generated first
     * using generateVpnProfile.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayName The name of the virtual network
     * gateway.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {String} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {String} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getVpnProfilePackageUrl(resourceGroupName: string, virtualNetworkGatewayName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<string>;
    getVpnProfilePackageUrl(resourceGroupName: string, virtualNetworkGatewayName: string, callback: ServiceCallback<string>): void;
    getVpnProfilePackageUrl(resourceGroupName: string, virtualNetworkGatewayName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;


    /**
     * The GetBgpPeerStatus operation retrieves the status of all BGP peers.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayName The name of the virtual network
     * gateway.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.peer] The IP address of the peer to retrieve the
     * status of.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<BgpPeerStatusListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getBgpPeerStatusWithHttpOperationResponse(resourceGroupName: string, virtualNetworkGatewayName: string, options?: { peer? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BgpPeerStatusListResult>>;

    /**
     * The GetBgpPeerStatus operation retrieves the status of all BGP peers.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayName The name of the virtual network
     * gateway.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.peer] The IP address of the peer to retrieve the
     * status of.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {BgpPeerStatusListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {BgpPeerStatusListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link BgpPeerStatusListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getBgpPeerStatus(resourceGroupName: string, virtualNetworkGatewayName: string, options?: { peer? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.BgpPeerStatusListResult>;
    getBgpPeerStatus(resourceGroupName: string, virtualNetworkGatewayName: string, callback: ServiceCallback<models.BgpPeerStatusListResult>): void;
    getBgpPeerStatus(resourceGroupName: string, virtualNetworkGatewayName: string, options: { peer? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BgpPeerStatusListResult>): void;


    /**
     * Gets a xml format representation for supported vpn devices.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayName The name of the virtual network
     * gateway.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<String>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    supportedVpnDevicesWithHttpOperationResponse(resourceGroupName: string, virtualNetworkGatewayName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<string>>;

    /**
     * Gets a xml format representation for supported vpn devices.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayName The name of the virtual network
     * gateway.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {String} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {String} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    supportedVpnDevices(resourceGroupName: string, virtualNetworkGatewayName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<string>;
    supportedVpnDevices(resourceGroupName: string, virtualNetworkGatewayName: string, callback: ServiceCallback<string>): void;
    supportedVpnDevices(resourceGroupName: string, virtualNetworkGatewayName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;


    /**
     * This operation retrieves a list of routes the virtual network gateway has
     * learned, including routes learned from BGP peers.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayName The name of the virtual network
     * gateway.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GatewayRouteListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getLearnedRoutesWithHttpOperationResponse(resourceGroupName: string, virtualNetworkGatewayName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GatewayRouteListResult>>;

    /**
     * This operation retrieves a list of routes the virtual network gateway has
     * learned, including routes learned from BGP peers.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayName The name of the virtual network
     * gateway.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GatewayRouteListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GatewayRouteListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GatewayRouteListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getLearnedRoutes(resourceGroupName: string, virtualNetworkGatewayName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GatewayRouteListResult>;
    getLearnedRoutes(resourceGroupName: string, virtualNetworkGatewayName: string, callback: ServiceCallback<models.GatewayRouteListResult>): void;
    getLearnedRoutes(resourceGroupName: string, virtualNetworkGatewayName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GatewayRouteListResult>): void;


    /**
     * This operation retrieves a list of routes the virtual network gateway is
     * advertising to the specified peer.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayName The name of the virtual network
     * gateway.
     *
     * @param {string} peer The IP address of the peer
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GatewayRouteListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getAdvertisedRoutesWithHttpOperationResponse(resourceGroupName: string, virtualNetworkGatewayName: string, peer: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GatewayRouteListResult>>;

    /**
     * This operation retrieves a list of routes the virtual network gateway is
     * advertising to the specified peer.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayName The name of the virtual network
     * gateway.
     *
     * @param {string} peer The IP address of the peer
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GatewayRouteListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GatewayRouteListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GatewayRouteListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getAdvertisedRoutes(resourceGroupName: string, virtualNetworkGatewayName: string, peer: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GatewayRouteListResult>;
    getAdvertisedRoutes(resourceGroupName: string, virtualNetworkGatewayName: string, peer: string, callback: ServiceCallback<models.GatewayRouteListResult>): void;
    getAdvertisedRoutes(resourceGroupName: string, virtualNetworkGatewayName: string, peer: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GatewayRouteListResult>): void;


    /**
     * Gets a xml format representation for vpn device configuration script.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayConnectionName The name of the virtual
     * network gateway connection for which the configuration script is generated.
     *
     * @param {object} parameters Parameters supplied to the generate vpn device
     * script operation.
     *
     * @param {string} [parameters.vendor] The vendor for the vpn device.
     *
     * @param {string} [parameters.deviceFamily] The device family for the vpn
     * device.
     *
     * @param {string} [parameters.firmwareVersion] The firmware version for the
     * vpn device.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<String>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    vpnDeviceConfigurationScriptWithHttpOperationResponse(resourceGroupName: string, virtualNetworkGatewayConnectionName: string, parameters: models.VpnDeviceScriptParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<string>>;

    /**
     * Gets a xml format representation for vpn device configuration script.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayConnectionName The name of the virtual
     * network gateway connection for which the configuration script is generated.
     *
     * @param {object} parameters Parameters supplied to the generate vpn device
     * script operation.
     *
     * @param {string} [parameters.vendor] The vendor for the vpn device.
     *
     * @param {string} [parameters.deviceFamily] The device family for the vpn
     * device.
     *
     * @param {string} [parameters.firmwareVersion] The firmware version for the
     * vpn device.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {String} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {String} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    vpnDeviceConfigurationScript(resourceGroupName: string, virtualNetworkGatewayConnectionName: string, parameters: models.VpnDeviceScriptParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<string>;
    vpnDeviceConfigurationScript(resourceGroupName: string, virtualNetworkGatewayConnectionName: string, parameters: models.VpnDeviceScriptParameters, callback: ServiceCallback<string>): void;
    vpnDeviceConfigurationScript(resourceGroupName: string, virtualNetworkGatewayConnectionName: string, parameters: models.VpnDeviceScriptParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;


    /**
     * Creates or updates a virtual network gateway in the specified resource
     * group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayName The name of the virtual network
     * gateway.
     *
     * @param {object} parameters Parameters supplied to create or update virtual
     * network gateway operation.
     *
     * @param {array} [parameters.ipConfigurations] IP configurations for virtual
     * network gateway.
     *
     * @param {string} [parameters.gatewayType] The type of this virtual network
     * gateway. Possible values are: 'Vpn' and 'ExpressRoute'. Possible values
     * include: 'Vpn', 'ExpressRoute'
     *
     * @param {string} [parameters.vpnType] The type of this virtual network
     * gateway. Possible values are: 'PolicyBased' and 'RouteBased'. Possible
     * values include: 'PolicyBased', 'RouteBased'
     *
     * @param {boolean} [parameters.enableBgp] Whether BGP is enabled for this
     * virtual network gateway or not.
     *
     * @param {boolean} [parameters.activeActive] ActiveActive flag
     *
     * @param {object} [parameters.gatewayDefaultSite] The reference of the
     * LocalNetworkGateway resource which represents local network site having
     * default routes. Assign Null value in case of removing existing default site
     * setting.
     *
     * @param {string} [parameters.gatewayDefaultSite.id] Resource ID.
     *
     * @param {object} [parameters.sku] The reference of the
     * VirtualNetworkGatewaySku resource which represents the SKU selected for
     * Virtual network gateway.
     *
     * @param {string} [parameters.sku.name] Gateway SKU name. Possible values
     * include: 'Basic', 'HighPerformance', 'Standard', 'UltraPerformance',
     * 'VpnGw1', 'VpnGw2', 'VpnGw3', 'VpnGw1AZ', 'VpnGw2AZ', 'VpnGw3AZ', 'ErGw1AZ',
     * 'ErGw2AZ', 'ErGw3AZ'
     *
     * @param {string} [parameters.sku.tier] Gateway SKU tier. Possible values
     * include: 'Basic', 'HighPerformance', 'Standard', 'UltraPerformance',
     * 'VpnGw1', 'VpnGw2', 'VpnGw3', 'VpnGw1AZ', 'VpnGw2AZ', 'VpnGw3AZ', 'ErGw1AZ',
     * 'ErGw2AZ', 'ErGw3AZ'
     *
     * @param {number} [parameters.sku.capacity] The capacity.
     *
     * @param {object} [parameters.vpnClientConfiguration] The reference of the
     * VpnClientConfiguration resource which represents the P2S VpnClient
     * configurations.
     *
     * @param {object} [parameters.vpnClientConfiguration.vpnClientAddressPool] The
     * reference of the address space resource which represents Address space for
     * P2S VpnClient.
     *
     * @param {array}
     * [parameters.vpnClientConfiguration.vpnClientAddressPool.addressPrefixes] A
     * list of address blocks reserved for this virtual network in CIDR notation.
     *
     * @param {array} [parameters.vpnClientConfiguration.vpnClientRootCertificates]
     * VpnClientRootCertificate for virtual network gateway.
     *
     * @param {array}
     * [parameters.vpnClientConfiguration.vpnClientRevokedCertificates]
     * VpnClientRevokedCertificate for Virtual network gateway.
     *
     * @param {array} [parameters.vpnClientConfiguration.vpnClientProtocols]
     * VpnClientProtocols for Virtual network gateway.
     *
     * @param {array} [parameters.vpnClientConfiguration.vpnClientIpsecPolicies]
     * VpnClientIpsecPolicies for virtual network gateway P2S client.
     *
     * @param {string} [parameters.vpnClientConfiguration.radiusServerAddress] The
     * radius server address property of the VirtualNetworkGateway resource for vpn
     * client connection.
     *
     * @param {string} [parameters.vpnClientConfiguration.radiusServerSecret] The
     * radius secret property of the VirtualNetworkGateway resource for vpn client
     * connection.
     *
     * @param {object} [parameters.bgpSettings] Virtual network gateway's BGP
     * speaker settings.
     *
     * @param {number} [parameters.bgpSettings.asn] The BGP speaker's ASN.
     *
     * @param {string} [parameters.bgpSettings.bgpPeeringAddress] The BGP peering
     * address and BGP identifier of this BGP speaker.
     *
     * @param {number} [parameters.bgpSettings.peerWeight] The weight added to
     * routes learned from this BGP speaker.
     *
     * @param {string} [parameters.resourceGuid] The resource GUID property of the
     * VirtualNetworkGateway resource.
     *
     * @param {string} [parameters.etag] Gets a unique read-only string that
     * changes whenever the resource is updated.
     *
     * @param {string} [parameters.id] Resource ID.
     *
     * @param {string} [parameters.location] Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<VirtualNetworkGateway>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, virtualNetworkGatewayName: string, parameters: models.VirtualNetworkGateway, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.VirtualNetworkGateway>>;

    /**
     * Creates or updates a virtual network gateway in the specified resource
     * group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayName The name of the virtual network
     * gateway.
     *
     * @param {object} parameters Parameters supplied to create or update virtual
     * network gateway operation.
     *
     * @param {array} [parameters.ipConfigurations] IP configurations for virtual
     * network gateway.
     *
     * @param {string} [parameters.gatewayType] The type of this virtual network
     * gateway. Possible values are: 'Vpn' and 'ExpressRoute'. Possible values
     * include: 'Vpn', 'ExpressRoute'
     *
     * @param {string} [parameters.vpnType] The type of this virtual network
     * gateway. Possible values are: 'PolicyBased' and 'RouteBased'. Possible
     * values include: 'PolicyBased', 'RouteBased'
     *
     * @param {boolean} [parameters.enableBgp] Whether BGP is enabled for this
     * virtual network gateway or not.
     *
     * @param {boolean} [parameters.activeActive] ActiveActive flag
     *
     * @param {object} [parameters.gatewayDefaultSite] The reference of the
     * LocalNetworkGateway resource which represents local network site having
     * default routes. Assign Null value in case of removing existing default site
     * setting.
     *
     * @param {string} [parameters.gatewayDefaultSite.id] Resource ID.
     *
     * @param {object} [parameters.sku] The reference of the
     * VirtualNetworkGatewaySku resource which represents the SKU selected for
     * Virtual network gateway.
     *
     * @param {string} [parameters.sku.name] Gateway SKU name. Possible values
     * include: 'Basic', 'HighPerformance', 'Standard', 'UltraPerformance',
     * 'VpnGw1', 'VpnGw2', 'VpnGw3', 'VpnGw1AZ', 'VpnGw2AZ', 'VpnGw3AZ', 'ErGw1AZ',
     * 'ErGw2AZ', 'ErGw3AZ'
     *
     * @param {string} [parameters.sku.tier] Gateway SKU tier. Possible values
     * include: 'Basic', 'HighPerformance', 'Standard', 'UltraPerformance',
     * 'VpnGw1', 'VpnGw2', 'VpnGw3', 'VpnGw1AZ', 'VpnGw2AZ', 'VpnGw3AZ', 'ErGw1AZ',
     * 'ErGw2AZ', 'ErGw3AZ'
     *
     * @param {number} [parameters.sku.capacity] The capacity.
     *
     * @param {object} [parameters.vpnClientConfiguration] The reference of the
     * VpnClientConfiguration resource which represents the P2S VpnClient
     * configurations.
     *
     * @param {object} [parameters.vpnClientConfiguration.vpnClientAddressPool] The
     * reference of the address space resource which represents Address space for
     * P2S VpnClient.
     *
     * @param {array}
     * [parameters.vpnClientConfiguration.vpnClientAddressPool.addressPrefixes] A
     * list of address blocks reserved for this virtual network in CIDR notation.
     *
     * @param {array} [parameters.vpnClientConfiguration.vpnClientRootCertificates]
     * VpnClientRootCertificate for virtual network gateway.
     *
     * @param {array}
     * [parameters.vpnClientConfiguration.vpnClientRevokedCertificates]
     * VpnClientRevokedCertificate for Virtual network gateway.
     *
     * @param {array} [parameters.vpnClientConfiguration.vpnClientProtocols]
     * VpnClientProtocols for Virtual network gateway.
     *
     * @param {array} [parameters.vpnClientConfiguration.vpnClientIpsecPolicies]
     * VpnClientIpsecPolicies for virtual network gateway P2S client.
     *
     * @param {string} [parameters.vpnClientConfiguration.radiusServerAddress] The
     * radius server address property of the VirtualNetworkGateway resource for vpn
     * client connection.
     *
     * @param {string} [parameters.vpnClientConfiguration.radiusServerSecret] The
     * radius secret property of the VirtualNetworkGateway resource for vpn client
     * connection.
     *
     * @param {object} [parameters.bgpSettings] Virtual network gateway's BGP
     * speaker settings.
     *
     * @param {number} [parameters.bgpSettings.asn] The BGP speaker's ASN.
     *
     * @param {string} [parameters.bgpSettings.bgpPeeringAddress] The BGP peering
     * address and BGP identifier of this BGP speaker.
     *
     * @param {number} [parameters.bgpSettings.peerWeight] The weight added to
     * routes learned from this BGP speaker.
     *
     * @param {string} [parameters.resourceGuid] The resource GUID property of the
     * VirtualNetworkGateway resource.
     *
     * @param {string} [parameters.etag] Gets a unique read-only string that
     * changes whenever the resource is updated.
     *
     * @param {string} [parameters.id] Resource ID.
     *
     * @param {string} [parameters.location] Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {VirtualNetworkGateway} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {VirtualNetworkGateway} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link VirtualNetworkGateway} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(resourceGroupName: string, virtualNetworkGatewayName: string, parameters: models.VirtualNetworkGateway, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.VirtualNetworkGateway>;
    beginCreateOrUpdate(resourceGroupName: string, virtualNetworkGatewayName: string, parameters: models.VirtualNetworkGateway, callback: ServiceCallback<models.VirtualNetworkGateway>): void;
    beginCreateOrUpdate(resourceGroupName: string, virtualNetworkGatewayName: string, parameters: models.VirtualNetworkGateway, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VirtualNetworkGateway>): void;


    /**
     * Deletes the specified virtual network gateway.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayName The name of the virtual network
     * gateway.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, virtualNetworkGatewayName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the specified virtual network gateway.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayName The name of the virtual network
     * gateway.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(resourceGroupName: string, virtualNetworkGatewayName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(resourceGroupName: string, virtualNetworkGatewayName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, virtualNetworkGatewayName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Updates a virtual network gateway tags.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayName The name of the virtual network
     * gateway.
     *
     * @param {object} parameters Parameters supplied to update virtual network
     * gateway tags.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<VirtualNetworkGateway>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginUpdateTagsWithHttpOperationResponse(resourceGroupName: string, virtualNetworkGatewayName: string, parameters: models.TagsObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.VirtualNetworkGateway>>;

    /**
     * Updates a virtual network gateway tags.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayName The name of the virtual network
     * gateway.
     *
     * @param {object} parameters Parameters supplied to update virtual network
     * gateway tags.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {VirtualNetworkGateway} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {VirtualNetworkGateway} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link VirtualNetworkGateway} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginUpdateTags(resourceGroupName: string, virtualNetworkGatewayName: string, parameters: models.TagsObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.VirtualNetworkGateway>;
    beginUpdateTags(resourceGroupName: string, virtualNetworkGatewayName: string, parameters: models.TagsObject, callback: ServiceCallback<models.VirtualNetworkGateway>): void;
    beginUpdateTags(resourceGroupName: string, virtualNetworkGatewayName: string, parameters: models.TagsObject, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VirtualNetworkGateway>): void;


    /**
     * Resets the primary of the virtual network gateway in the specified resource
     * group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayName The name of the virtual network
     * gateway.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.gatewayVip] Virtual network gateway vip address
     * supplied to the begin reset of the active-active feature enabled gateway.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<VirtualNetworkGateway>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginResetWithHttpOperationResponse(resourceGroupName: string, virtualNetworkGatewayName: string, options?: { gatewayVip? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.VirtualNetworkGateway>>;

    /**
     * Resets the primary of the virtual network gateway in the specified resource
     * group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayName The name of the virtual network
     * gateway.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.gatewayVip] Virtual network gateway vip address
     * supplied to the begin reset of the active-active feature enabled gateway.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {VirtualNetworkGateway} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {VirtualNetworkGateway} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link VirtualNetworkGateway} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginReset(resourceGroupName: string, virtualNetworkGatewayName: string, options?: { gatewayVip? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.VirtualNetworkGateway>;
    beginReset(resourceGroupName: string, virtualNetworkGatewayName: string, callback: ServiceCallback<models.VirtualNetworkGateway>): void;
    beginReset(resourceGroupName: string, virtualNetworkGatewayName: string, options: { gatewayVip? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VirtualNetworkGateway>): void;


    /**
     * Generates VPN client package for P2S client of the virtual network gateway
     * in the specified resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayName The name of the virtual network
     * gateway.
     *
     * @param {object} parameters Parameters supplied to the generate virtual
     * network gateway VPN client package operation.
     *
     * @param {string} [parameters.processorArchitecture] VPN client Processor
     * Architecture. Possible values are: 'AMD64' and 'X86'. Possible values
     * include: 'Amd64', 'X86'
     *
     * @param {string} [parameters.authenticationMethod] VPN client Authentication
     * Method. Possible values are: 'EAPTLS' and 'EAPMSCHAPv2'. Possible values
     * include: 'EAPTLS', 'EAPMSCHAPv2'
     *
     * @param {string} [parameters.radiusServerAuthCertificate] The public
     * certificate data for the radius server authentication certificate as a
     * Base-64 encoded string. Required only if external radius authentication has
     * been configured with EAPTLS authentication.
     *
     * @param {array} [parameters.clientRootCertificates] A list of client root
     * certificates public certificate data encoded as Base-64 strings. Optional
     * parameter for external radius based authentication with EAPTLS.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<String>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginGeneratevpnclientpackageWithHttpOperationResponse(resourceGroupName: string, virtualNetworkGatewayName: string, parameters: models.VpnClientParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<string>>;

    /**
     * Generates VPN client package for P2S client of the virtual network gateway
     * in the specified resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayName The name of the virtual network
     * gateway.
     *
     * @param {object} parameters Parameters supplied to the generate virtual
     * network gateway VPN client package operation.
     *
     * @param {string} [parameters.processorArchitecture] VPN client Processor
     * Architecture. Possible values are: 'AMD64' and 'X86'. Possible values
     * include: 'Amd64', 'X86'
     *
     * @param {string} [parameters.authenticationMethod] VPN client Authentication
     * Method. Possible values are: 'EAPTLS' and 'EAPMSCHAPv2'. Possible values
     * include: 'EAPTLS', 'EAPMSCHAPv2'
     *
     * @param {string} [parameters.radiusServerAuthCertificate] The public
     * certificate data for the radius server authentication certificate as a
     * Base-64 encoded string. Required only if external radius authentication has
     * been configured with EAPTLS authentication.
     *
     * @param {array} [parameters.clientRootCertificates] A list of client root
     * certificates public certificate data encoded as Base-64 strings. Optional
     * parameter for external radius based authentication with EAPTLS.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {String} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {String} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginGeneratevpnclientpackage(resourceGroupName: string, virtualNetworkGatewayName: string, parameters: models.VpnClientParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<string>;
    beginGeneratevpnclientpackage(resourceGroupName: string, virtualNetworkGatewayName: string, parameters: models.VpnClientParameters, callback: ServiceCallback<string>): void;
    beginGeneratevpnclientpackage(resourceGroupName: string, virtualNetworkGatewayName: string, parameters: models.VpnClientParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;


    /**
     * Generates VPN profile for P2S client of the virtual network gateway in the
     * specified resource group. Used for IKEV2 and radius based authentication.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayName The name of the virtual network
     * gateway.
     *
     * @param {object} parameters Parameters supplied to the generate virtual
     * network gateway VPN client package operation.
     *
     * @param {string} [parameters.processorArchitecture] VPN client Processor
     * Architecture. Possible values are: 'AMD64' and 'X86'. Possible values
     * include: 'Amd64', 'X86'
     *
     * @param {string} [parameters.authenticationMethod] VPN client Authentication
     * Method. Possible values are: 'EAPTLS' and 'EAPMSCHAPv2'. Possible values
     * include: 'EAPTLS', 'EAPMSCHAPv2'
     *
     * @param {string} [parameters.radiusServerAuthCertificate] The public
     * certificate data for the radius server authentication certificate as a
     * Base-64 encoded string. Required only if external radius authentication has
     * been configured with EAPTLS authentication.
     *
     * @param {array} [parameters.clientRootCertificates] A list of client root
     * certificates public certificate data encoded as Base-64 strings. Optional
     * parameter for external radius based authentication with EAPTLS.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<String>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginGenerateVpnProfileWithHttpOperationResponse(resourceGroupName: string, virtualNetworkGatewayName: string, parameters: models.VpnClientParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<string>>;

    /**
     * Generates VPN profile for P2S client of the virtual network gateway in the
     * specified resource group. Used for IKEV2 and radius based authentication.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayName The name of the virtual network
     * gateway.
     *
     * @param {object} parameters Parameters supplied to the generate virtual
     * network gateway VPN client package operation.
     *
     * @param {string} [parameters.processorArchitecture] VPN client Processor
     * Architecture. Possible values are: 'AMD64' and 'X86'. Possible values
     * include: 'Amd64', 'X86'
     *
     * @param {string} [parameters.authenticationMethod] VPN client Authentication
     * Method. Possible values are: 'EAPTLS' and 'EAPMSCHAPv2'. Possible values
     * include: 'EAPTLS', 'EAPMSCHAPv2'
     *
     * @param {string} [parameters.radiusServerAuthCertificate] The public
     * certificate data for the radius server authentication certificate as a
     * Base-64 encoded string. Required only if external radius authentication has
     * been configured with EAPTLS authentication.
     *
     * @param {array} [parameters.clientRootCertificates] A list of client root
     * certificates public certificate data encoded as Base-64 strings. Optional
     * parameter for external radius based authentication with EAPTLS.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {String} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {String} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginGenerateVpnProfile(resourceGroupName: string, virtualNetworkGatewayName: string, parameters: models.VpnClientParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<string>;
    beginGenerateVpnProfile(resourceGroupName: string, virtualNetworkGatewayName: string, parameters: models.VpnClientParameters, callback: ServiceCallback<string>): void;
    beginGenerateVpnProfile(resourceGroupName: string, virtualNetworkGatewayName: string, parameters: models.VpnClientParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;


    /**
     * Gets pre-generated VPN profile for P2S client of the virtual network gateway
     * in the specified resource group. The profile needs to be generated first
     * using generateVpnProfile.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayName The name of the virtual network
     * gateway.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<String>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginGetVpnProfilePackageUrlWithHttpOperationResponse(resourceGroupName: string, virtualNetworkGatewayName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<string>>;

    /**
     * Gets pre-generated VPN profile for P2S client of the virtual network gateway
     * in the specified resource group. The profile needs to be generated first
     * using generateVpnProfile.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayName The name of the virtual network
     * gateway.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {String} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {String} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginGetVpnProfilePackageUrl(resourceGroupName: string, virtualNetworkGatewayName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<string>;
    beginGetVpnProfilePackageUrl(resourceGroupName: string, virtualNetworkGatewayName: string, callback: ServiceCallback<string>): void;
    beginGetVpnProfilePackageUrl(resourceGroupName: string, virtualNetworkGatewayName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;


    /**
     * The GetBgpPeerStatus operation retrieves the status of all BGP peers.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayName The name of the virtual network
     * gateway.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.peer] The IP address of the peer to retrieve the
     * status of.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<BgpPeerStatusListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginGetBgpPeerStatusWithHttpOperationResponse(resourceGroupName: string, virtualNetworkGatewayName: string, options?: { peer? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BgpPeerStatusListResult>>;

    /**
     * The GetBgpPeerStatus operation retrieves the status of all BGP peers.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayName The name of the virtual network
     * gateway.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.peer] The IP address of the peer to retrieve the
     * status of.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {BgpPeerStatusListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {BgpPeerStatusListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link BgpPeerStatusListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginGetBgpPeerStatus(resourceGroupName: string, virtualNetworkGatewayName: string, options?: { peer? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.BgpPeerStatusListResult>;
    beginGetBgpPeerStatus(resourceGroupName: string, virtualNetworkGatewayName: string, callback: ServiceCallback<models.BgpPeerStatusListResult>): void;
    beginGetBgpPeerStatus(resourceGroupName: string, virtualNetworkGatewayName: string, options: { peer? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BgpPeerStatusListResult>): void;


    /**
     * This operation retrieves a list of routes the virtual network gateway has
     * learned, including routes learned from BGP peers.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayName The name of the virtual network
     * gateway.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GatewayRouteListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginGetLearnedRoutesWithHttpOperationResponse(resourceGroupName: string, virtualNetworkGatewayName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GatewayRouteListResult>>;

    /**
     * This operation retrieves a list of routes the virtual network gateway has
     * learned, including routes learned from BGP peers.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayName The name of the virtual network
     * gateway.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GatewayRouteListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GatewayRouteListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GatewayRouteListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginGetLearnedRoutes(resourceGroupName: string, virtualNetworkGatewayName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GatewayRouteListResult>;
    beginGetLearnedRoutes(resourceGroupName: string, virtualNetworkGatewayName: string, callback: ServiceCallback<models.GatewayRouteListResult>): void;
    beginGetLearnedRoutes(resourceGroupName: string, virtualNetworkGatewayName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GatewayRouteListResult>): void;


    /**
     * This operation retrieves a list of routes the virtual network gateway is
     * advertising to the specified peer.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayName The name of the virtual network
     * gateway.
     *
     * @param {string} peer The IP address of the peer
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GatewayRouteListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginGetAdvertisedRoutesWithHttpOperationResponse(resourceGroupName: string, virtualNetworkGatewayName: string, peer: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GatewayRouteListResult>>;

    /**
     * This operation retrieves a list of routes the virtual network gateway is
     * advertising to the specified peer.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayName The name of the virtual network
     * gateway.
     *
     * @param {string} peer The IP address of the peer
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GatewayRouteListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GatewayRouteListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GatewayRouteListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginGetAdvertisedRoutes(resourceGroupName: string, virtualNetworkGatewayName: string, peer: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GatewayRouteListResult>;
    beginGetAdvertisedRoutes(resourceGroupName: string, virtualNetworkGatewayName: string, peer: string, callback: ServiceCallback<models.GatewayRouteListResult>): void;
    beginGetAdvertisedRoutes(resourceGroupName: string, virtualNetworkGatewayName: string, peer: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GatewayRouteListResult>): void;


    /**
     * Gets all virtual network gateways by resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<VirtualNetworkGatewayListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.VirtualNetworkGatewayListResult>>;

    /**
     * Gets all virtual network gateways by resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {VirtualNetworkGatewayListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {VirtualNetworkGatewayListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link VirtualNetworkGatewayListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.VirtualNetworkGatewayListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.VirtualNetworkGatewayListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VirtualNetworkGatewayListResult>): void;


    /**
     * Gets all the connections in a virtual network gateway.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<VirtualNetworkGatewayListConnectionsResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listConnectionsNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.VirtualNetworkGatewayListConnectionsResult>>;

    /**
     * Gets all the connections in a virtual network gateway.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {VirtualNetworkGatewayListConnectionsResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {VirtualNetworkGatewayListConnectionsResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link VirtualNetworkGatewayListConnectionsResult}
     *                      for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listConnectionsNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.VirtualNetworkGatewayListConnectionsResult>;
    listConnectionsNext(nextPageLink: string, callback: ServiceCallback<models.VirtualNetworkGatewayListConnectionsResult>): void;
    listConnectionsNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VirtualNetworkGatewayListConnectionsResult>): void;
}

/**
 * @class
 * VirtualNetworkGatewayConnections
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the NetworkManagementClient.
 */
export interface VirtualNetworkGatewayConnections {


    /**
     * Creates or updates a virtual network gateway connection in the specified
     * resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayConnectionName The name of the virtual
     * network gateway connection.
     *
     * @param {object} parameters Parameters supplied to the create or update
     * virtual network gateway connection operation.
     *
     * @param {string} [parameters.authorizationKey] The authorizationKey.
     *
     * @param {object} parameters.virtualNetworkGateway1 The reference to virtual
     * network gateway resource.
     *
     * @param {object} [parameters.virtualNetworkGateway2] The reference to virtual
     * network gateway resource.
     *
     * @param {array} [parameters.virtualNetworkGateway2.ipConfigurations] IP
     * configurations for virtual network gateway.
     *
     * @param {string} [parameters.virtualNetworkGateway2.gatewayType] The type of
     * this virtual network gateway. Possible values are: 'Vpn' and 'ExpressRoute'.
     * Possible values include: 'Vpn', 'ExpressRoute'
     *
     * @param {string} [parameters.virtualNetworkGateway2.vpnType] The type of this
     * virtual network gateway. Possible values are: 'PolicyBased' and
     * 'RouteBased'. Possible values include: 'PolicyBased', 'RouteBased'
     *
     * @param {boolean} [parameters.virtualNetworkGateway2.enableBgp] Whether BGP
     * is enabled for this virtual network gateway or not.
     *
     * @param {boolean} [parameters.virtualNetworkGateway2.activeActive]
     * ActiveActive flag
     *
     * @param {object} [parameters.virtualNetworkGateway2.gatewayDefaultSite] The
     * reference of the LocalNetworkGateway resource which represents local network
     * site having default routes. Assign Null value in case of removing existing
     * default site setting.
     *
     * @param {object} [parameters.virtualNetworkGateway2.sku] The reference of the
     * VirtualNetworkGatewaySku resource which represents the SKU selected for
     * Virtual network gateway.
     *
     * @param {string} [parameters.virtualNetworkGateway2.sku.name] Gateway SKU
     * name. Possible values include: 'Basic', 'HighPerformance', 'Standard',
     * 'UltraPerformance', 'VpnGw1', 'VpnGw2', 'VpnGw3', 'VpnGw1AZ', 'VpnGw2AZ',
     * 'VpnGw3AZ', 'ErGw1AZ', 'ErGw2AZ', 'ErGw3AZ'
     *
     * @param {string} [parameters.virtualNetworkGateway2.sku.tier] Gateway SKU
     * tier. Possible values include: 'Basic', 'HighPerformance', 'Standard',
     * 'UltraPerformance', 'VpnGw1', 'VpnGw2', 'VpnGw3', 'VpnGw1AZ', 'VpnGw2AZ',
     * 'VpnGw3AZ', 'ErGw1AZ', 'ErGw2AZ', 'ErGw3AZ'
     *
     * @param {number} [parameters.virtualNetworkGateway2.sku.capacity] The
     * capacity.
     *
     * @param {object} [parameters.virtualNetworkGateway2.vpnClientConfiguration]
     * The reference of the VpnClientConfiguration resource which represents the
     * P2S VpnClient configurations.
     *
     * @param {object}
     * [parameters.virtualNetworkGateway2.vpnClientConfiguration.vpnClientAddressPool]
     * The reference of the address space resource which represents Address space
     * for P2S VpnClient.
     *
     * @param {array}
     * [parameters.virtualNetworkGateway2.vpnClientConfiguration.vpnClientRootCertificates]
     * VpnClientRootCertificate for virtual network gateway.
     *
     * @param {array}
     * [parameters.virtualNetworkGateway2.vpnClientConfiguration.vpnClientRevokedCertificates]
     * VpnClientRevokedCertificate for Virtual network gateway.
     *
     * @param {array}
     * [parameters.virtualNetworkGateway2.vpnClientConfiguration.vpnClientProtocols]
     * VpnClientProtocols for Virtual network gateway.
     *
     * @param {array}
     * [parameters.virtualNetworkGateway2.vpnClientConfiguration.vpnClientIpsecPolicies]
     * VpnClientIpsecPolicies for virtual network gateway P2S client.
     *
     * @param {string}
     * [parameters.virtualNetworkGateway2.vpnClientConfiguration.radiusServerAddress]
     * The radius server address property of the VirtualNetworkGateway resource for
     * vpn client connection.
     *
     * @param {string}
     * [parameters.virtualNetworkGateway2.vpnClientConfiguration.radiusServerSecret]
     * The radius secret property of the VirtualNetworkGateway resource for vpn
     * client connection.
     *
     * @param {object} [parameters.virtualNetworkGateway2.bgpSettings] Virtual
     * network gateway's BGP speaker settings.
     *
     * @param {string} [parameters.virtualNetworkGateway2.resourceGuid] The
     * resource GUID property of the VirtualNetworkGateway resource.
     *
     * @param {string} [parameters.virtualNetworkGateway2.etag] Gets a unique
     * read-only string that changes whenever the resource is updated.
     *
     * @param {string} [parameters.virtualNetworkGateway2.id] Resource ID.
     *
     * @param {string} [parameters.virtualNetworkGateway2.location] Resource
     * location.
     *
     * @param {object} [parameters.virtualNetworkGateway2.tags] Resource tags.
     *
     * @param {object} [parameters.localNetworkGateway2] The reference to local
     * network gateway resource.
     *
     * @param {object} [parameters.localNetworkGateway2.localNetworkAddressSpace]
     * Local network site address space.
     *
     * @param {array}
     * [parameters.localNetworkGateway2.localNetworkAddressSpace.addressPrefixes] A
     * list of address blocks reserved for this virtual network in CIDR notation.
     *
     * @param {string} [parameters.localNetworkGateway2.gatewayIpAddress] IP
     * address of local network gateway.
     *
     * @param {object} [parameters.localNetworkGateway2.bgpSettings] Local network
     * gateway's BGP speaker settings.
     *
     * @param {number} [parameters.localNetworkGateway2.bgpSettings.asn] The BGP
     * speaker's ASN.
     *
     * @param {string}
     * [parameters.localNetworkGateway2.bgpSettings.bgpPeeringAddress] The BGP
     * peering address and BGP identifier of this BGP speaker.
     *
     * @param {number} [parameters.localNetworkGateway2.bgpSettings.peerWeight] The
     * weight added to routes learned from this BGP speaker.
     *
     * @param {string} [parameters.localNetworkGateway2.resourceGuid] The resource
     * GUID property of the LocalNetworkGateway resource.
     *
     * @param {string} [parameters.localNetworkGateway2.etag] A unique read-only
     * string that changes whenever the resource is updated.
     *
     * @param {string} [parameters.localNetworkGateway2.id] Resource ID.
     *
     * @param {string} [parameters.localNetworkGateway2.location] Resource
     * location.
     *
     * @param {object} [parameters.localNetworkGateway2.tags] Resource tags.
     *
     * @param {string} parameters.connectionType Gateway connection type. Possible
     * values are: 'Ipsec','Vnet2Vnet','ExpressRoute', and 'VPNClient. Possible
     * values include: 'IPsec', 'Vnet2Vnet', 'ExpressRoute', 'VPNClient'
     *
     * @param {number} [parameters.routingWeight] The routing weight.
     *
     * @param {string} [parameters.sharedKey] The IPSec shared key.
     *
     * @param {object} [parameters.peer] The reference to peerings resource.
     *
     * @param {string} [parameters.peer.id] Resource ID.
     *
     * @param {boolean} [parameters.enableBgp] EnableBgp flag
     *
     * @param {boolean} [parameters.usePolicyBasedTrafficSelectors] Enable
     * policy-based traffic selectors.
     *
     * @param {array} [parameters.ipsecPolicies] The IPSec Policies to be
     * considered by this connection.
     *
     * @param {string} [parameters.resourceGuid] The resource GUID property of the
     * VirtualNetworkGatewayConnection resource.
     *
     * @param {string} [parameters.etag] Gets a unique read-only string that
     * changes whenever the resource is updated.
     *
     * @param {string} [parameters.id] Resource ID.
     *
     * @param {string} [parameters.location] Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<VirtualNetworkGatewayConnection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, virtualNetworkGatewayConnectionName: string, parameters: models.VirtualNetworkGatewayConnection, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.VirtualNetworkGatewayConnection>>;

    /**
     * Creates or updates a virtual network gateway connection in the specified
     * resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayConnectionName The name of the virtual
     * network gateway connection.
     *
     * @param {object} parameters Parameters supplied to the create or update
     * virtual network gateway connection operation.
     *
     * @param {string} [parameters.authorizationKey] The authorizationKey.
     *
     * @param {object} parameters.virtualNetworkGateway1 The reference to virtual
     * network gateway resource.
     *
     * @param {object} [parameters.virtualNetworkGateway2] The reference to virtual
     * network gateway resource.
     *
     * @param {array} [parameters.virtualNetworkGateway2.ipConfigurations] IP
     * configurations for virtual network gateway.
     *
     * @param {string} [parameters.virtualNetworkGateway2.gatewayType] The type of
     * this virtual network gateway. Possible values are: 'Vpn' and 'ExpressRoute'.
     * Possible values include: 'Vpn', 'ExpressRoute'
     *
     * @param {string} [parameters.virtualNetworkGateway2.vpnType] The type of this
     * virtual network gateway. Possible values are: 'PolicyBased' and
     * 'RouteBased'. Possible values include: 'PolicyBased', 'RouteBased'
     *
     * @param {boolean} [parameters.virtualNetworkGateway2.enableBgp] Whether BGP
     * is enabled for this virtual network gateway or not.
     *
     * @param {boolean} [parameters.virtualNetworkGateway2.activeActive]
     * ActiveActive flag
     *
     * @param {object} [parameters.virtualNetworkGateway2.gatewayDefaultSite] The
     * reference of the LocalNetworkGateway resource which represents local network
     * site having default routes. Assign Null value in case of removing existing
     * default site setting.
     *
     * @param {object} [parameters.virtualNetworkGateway2.sku] The reference of the
     * VirtualNetworkGatewaySku resource which represents the SKU selected for
     * Virtual network gateway.
     *
     * @param {string} [parameters.virtualNetworkGateway2.sku.name] Gateway SKU
     * name. Possible values include: 'Basic', 'HighPerformance', 'Standard',
     * 'UltraPerformance', 'VpnGw1', 'VpnGw2', 'VpnGw3', 'VpnGw1AZ', 'VpnGw2AZ',
     * 'VpnGw3AZ', 'ErGw1AZ', 'ErGw2AZ', 'ErGw3AZ'
     *
     * @param {string} [parameters.virtualNetworkGateway2.sku.tier] Gateway SKU
     * tier. Possible values include: 'Basic', 'HighPerformance', 'Standard',
     * 'UltraPerformance', 'VpnGw1', 'VpnGw2', 'VpnGw3', 'VpnGw1AZ', 'VpnGw2AZ',
     * 'VpnGw3AZ', 'ErGw1AZ', 'ErGw2AZ', 'ErGw3AZ'
     *
     * @param {number} [parameters.virtualNetworkGateway2.sku.capacity] The
     * capacity.
     *
     * @param {object} [parameters.virtualNetworkGateway2.vpnClientConfiguration]
     * The reference of the VpnClientConfiguration resource which represents the
     * P2S VpnClient configurations.
     *
     * @param {object}
     * [parameters.virtualNetworkGateway2.vpnClientConfiguration.vpnClientAddressPool]
     * The reference of the address space resource which represents Address space
     * for P2S VpnClient.
     *
     * @param {array}
     * [parameters.virtualNetworkGateway2.vpnClientConfiguration.vpnClientRootCertificates]
     * VpnClientRootCertificate for virtual network gateway.
     *
     * @param {array}
     * [parameters.virtualNetworkGateway2.vpnClientConfiguration.vpnClientRevokedCertificates]
     * VpnClientRevokedCertificate for Virtual network gateway.
     *
     * @param {array}
     * [parameters.virtualNetworkGateway2.vpnClientConfiguration.vpnClientProtocols]
     * VpnClientProtocols for Virtual network gateway.
     *
     * @param {array}
     * [parameters.virtualNetworkGateway2.vpnClientConfiguration.vpnClientIpsecPolicies]
     * VpnClientIpsecPolicies for virtual network gateway P2S client.
     *
     * @param {string}
     * [parameters.virtualNetworkGateway2.vpnClientConfiguration.radiusServerAddress]
     * The radius server address property of the VirtualNetworkGateway resource for
     * vpn client connection.
     *
     * @param {string}
     * [parameters.virtualNetworkGateway2.vpnClientConfiguration.radiusServerSecret]
     * The radius secret property of the VirtualNetworkGateway resource for vpn
     * client connection.
     *
     * @param {object} [parameters.virtualNetworkGateway2.bgpSettings] Virtual
     * network gateway's BGP speaker settings.
     *
     * @param {string} [parameters.virtualNetworkGateway2.resourceGuid] The
     * resource GUID property of the VirtualNetworkGateway resource.
     *
     * @param {string} [parameters.virtualNetworkGateway2.etag] Gets a unique
     * read-only string that changes whenever the resource is updated.
     *
     * @param {string} [parameters.virtualNetworkGateway2.id] Resource ID.
     *
     * @param {string} [parameters.virtualNetworkGateway2.location] Resource
     * location.
     *
     * @param {object} [parameters.virtualNetworkGateway2.tags] Resource tags.
     *
     * @param {object} [parameters.localNetworkGateway2] The reference to local
     * network gateway resource.
     *
     * @param {object} [parameters.localNetworkGateway2.localNetworkAddressSpace]
     * Local network site address space.
     *
     * @param {array}
     * [parameters.localNetworkGateway2.localNetworkAddressSpace.addressPrefixes] A
     * list of address blocks reserved for this virtual network in CIDR notation.
     *
     * @param {string} [parameters.localNetworkGateway2.gatewayIpAddress] IP
     * address of local network gateway.
     *
     * @param {object} [parameters.localNetworkGateway2.bgpSettings] Local network
     * gateway's BGP speaker settings.
     *
     * @param {number} [parameters.localNetworkGateway2.bgpSettings.asn] The BGP
     * speaker's ASN.
     *
     * @param {string}
     * [parameters.localNetworkGateway2.bgpSettings.bgpPeeringAddress] The BGP
     * peering address and BGP identifier of this BGP speaker.
     *
     * @param {number} [parameters.localNetworkGateway2.bgpSettings.peerWeight] The
     * weight added to routes learned from this BGP speaker.
     *
     * @param {string} [parameters.localNetworkGateway2.resourceGuid] The resource
     * GUID property of the LocalNetworkGateway resource.
     *
     * @param {string} [parameters.localNetworkGateway2.etag] A unique read-only
     * string that changes whenever the resource is updated.
     *
     * @param {string} [parameters.localNetworkGateway2.id] Resource ID.
     *
     * @param {string} [parameters.localNetworkGateway2.location] Resource
     * location.
     *
     * @param {object} [parameters.localNetworkGateway2.tags] Resource tags.
     *
     * @param {string} parameters.connectionType Gateway connection type. Possible
     * values are: 'Ipsec','Vnet2Vnet','ExpressRoute', and 'VPNClient. Possible
     * values include: 'IPsec', 'Vnet2Vnet', 'ExpressRoute', 'VPNClient'
     *
     * @param {number} [parameters.routingWeight] The routing weight.
     *
     * @param {string} [parameters.sharedKey] The IPSec shared key.
     *
     * @param {object} [parameters.peer] The reference to peerings resource.
     *
     * @param {string} [parameters.peer.id] Resource ID.
     *
     * @param {boolean} [parameters.enableBgp] EnableBgp flag
     *
     * @param {boolean} [parameters.usePolicyBasedTrafficSelectors] Enable
     * policy-based traffic selectors.
     *
     * @param {array} [parameters.ipsecPolicies] The IPSec Policies to be
     * considered by this connection.
     *
     * @param {string} [parameters.resourceGuid] The resource GUID property of the
     * VirtualNetworkGatewayConnection resource.
     *
     * @param {string} [parameters.etag] Gets a unique read-only string that
     * changes whenever the resource is updated.
     *
     * @param {string} [parameters.id] Resource ID.
     *
     * @param {string} [parameters.location] Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {VirtualNetworkGatewayConnection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {VirtualNetworkGatewayConnection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link VirtualNetworkGatewayConnection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, virtualNetworkGatewayConnectionName: string, parameters: models.VirtualNetworkGatewayConnection, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.VirtualNetworkGatewayConnection>;
    createOrUpdate(resourceGroupName: string, virtualNetworkGatewayConnectionName: string, parameters: models.VirtualNetworkGatewayConnection, callback: ServiceCallback<models.VirtualNetworkGatewayConnection>): void;
    createOrUpdate(resourceGroupName: string, virtualNetworkGatewayConnectionName: string, parameters: models.VirtualNetworkGatewayConnection, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VirtualNetworkGatewayConnection>): void;


    /**
     * Gets the specified virtual network gateway connection by resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayConnectionName The name of the virtual
     * network gateway connection.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<VirtualNetworkGatewayConnection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, virtualNetworkGatewayConnectionName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.VirtualNetworkGatewayConnection>>;

    /**
     * Gets the specified virtual network gateway connection by resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayConnectionName The name of the virtual
     * network gateway connection.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {VirtualNetworkGatewayConnection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {VirtualNetworkGatewayConnection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link VirtualNetworkGatewayConnection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, virtualNetworkGatewayConnectionName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.VirtualNetworkGatewayConnection>;
    get(resourceGroupName: string, virtualNetworkGatewayConnectionName: string, callback: ServiceCallback<models.VirtualNetworkGatewayConnection>): void;
    get(resourceGroupName: string, virtualNetworkGatewayConnectionName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VirtualNetworkGatewayConnection>): void;


    /**
     * Deletes the specified virtual network Gateway connection.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayConnectionName The name of the virtual
     * network gateway connection.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, virtualNetworkGatewayConnectionName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the specified virtual network Gateway connection.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayConnectionName The name of the virtual
     * network gateway connection.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, virtualNetworkGatewayConnectionName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, virtualNetworkGatewayConnectionName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, virtualNetworkGatewayConnectionName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Updates a virtual network gateway connection tags.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayConnectionName The name of the virtual
     * network gateway connection.
     *
     * @param {object} parameters Parameters supplied to update virtual network
     * gateway connection tags.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<VirtualNetworkGatewayConnection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateTagsWithHttpOperationResponse(resourceGroupName: string, virtualNetworkGatewayConnectionName: string, parameters: models.TagsObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.VirtualNetworkGatewayConnection>>;

    /**
     * Updates a virtual network gateway connection tags.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayConnectionName The name of the virtual
     * network gateway connection.
     *
     * @param {object} parameters Parameters supplied to update virtual network
     * gateway connection tags.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {VirtualNetworkGatewayConnection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {VirtualNetworkGatewayConnection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link VirtualNetworkGatewayConnection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updateTags(resourceGroupName: string, virtualNetworkGatewayConnectionName: string, parameters: models.TagsObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.VirtualNetworkGatewayConnection>;
    updateTags(resourceGroupName: string, virtualNetworkGatewayConnectionName: string, parameters: models.TagsObject, callback: ServiceCallback<models.VirtualNetworkGatewayConnection>): void;
    updateTags(resourceGroupName: string, virtualNetworkGatewayConnectionName: string, parameters: models.TagsObject, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VirtualNetworkGatewayConnection>): void;


    /**
     * The Put VirtualNetworkGatewayConnectionSharedKey operation sets the virtual
     * network gateway connection shared key for passed virtual network gateway
     * connection in the specified resource group through Network resource
     * provider.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayConnectionName The virtual network
     * gateway connection name.
     *
     * @param {object} parameters Parameters supplied to the Begin Set Virtual
     * Network Gateway connection Shared key operation throughNetwork resource
     * provider.
     *
     * @param {string} parameters.value The virtual network connection shared key
     * value.
     *
     * @param {string} [parameters.id] Resource ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ConnectionSharedKey>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    setSharedKeyWithHttpOperationResponse(resourceGroupName: string, virtualNetworkGatewayConnectionName: string, parameters: models.ConnectionSharedKey, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ConnectionSharedKey>>;

    /**
     * The Put VirtualNetworkGatewayConnectionSharedKey operation sets the virtual
     * network gateway connection shared key for passed virtual network gateway
     * connection in the specified resource group through Network resource
     * provider.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayConnectionName The virtual network
     * gateway connection name.
     *
     * @param {object} parameters Parameters supplied to the Begin Set Virtual
     * Network Gateway connection Shared key operation throughNetwork resource
     * provider.
     *
     * @param {string} parameters.value The virtual network connection shared key
     * value.
     *
     * @param {string} [parameters.id] Resource ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ConnectionSharedKey} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ConnectionSharedKey} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ConnectionSharedKey} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    setSharedKey(resourceGroupName: string, virtualNetworkGatewayConnectionName: string, parameters: models.ConnectionSharedKey, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ConnectionSharedKey>;
    setSharedKey(resourceGroupName: string, virtualNetworkGatewayConnectionName: string, parameters: models.ConnectionSharedKey, callback: ServiceCallback<models.ConnectionSharedKey>): void;
    setSharedKey(resourceGroupName: string, virtualNetworkGatewayConnectionName: string, parameters: models.ConnectionSharedKey, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ConnectionSharedKey>): void;


    /**
     * The Get VirtualNetworkGatewayConnectionSharedKey operation retrieves
     * information about the specified virtual network gateway connection shared
     * key through Network resource provider.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayConnectionName The virtual network
     * gateway connection shared key name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ConnectionSharedKey>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getSharedKeyWithHttpOperationResponse(resourceGroupName: string, virtualNetworkGatewayConnectionName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ConnectionSharedKey>>;

    /**
     * The Get VirtualNetworkGatewayConnectionSharedKey operation retrieves
     * information about the specified virtual network gateway connection shared
     * key through Network resource provider.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayConnectionName The virtual network
     * gateway connection shared key name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ConnectionSharedKey} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ConnectionSharedKey} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ConnectionSharedKey} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getSharedKey(resourceGroupName: string, virtualNetworkGatewayConnectionName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ConnectionSharedKey>;
    getSharedKey(resourceGroupName: string, virtualNetworkGatewayConnectionName: string, callback: ServiceCallback<models.ConnectionSharedKey>): void;
    getSharedKey(resourceGroupName: string, virtualNetworkGatewayConnectionName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ConnectionSharedKey>): void;


    /**
     * The List VirtualNetworkGatewayConnections operation retrieves all the
     * virtual network gateways connections created.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<VirtualNetworkGatewayConnectionListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.VirtualNetworkGatewayConnectionListResult>>;

    /**
     * The List VirtualNetworkGatewayConnections operation retrieves all the
     * virtual network gateways connections created.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {VirtualNetworkGatewayConnectionListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {VirtualNetworkGatewayConnectionListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link VirtualNetworkGatewayConnectionListResult}
     *                      for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.VirtualNetworkGatewayConnectionListResult>;
    list(resourceGroupName: string, callback: ServiceCallback<models.VirtualNetworkGatewayConnectionListResult>): void;
    list(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VirtualNetworkGatewayConnectionListResult>): void;


    /**
     * The VirtualNetworkGatewayConnectionResetSharedKey operation resets the
     * virtual network gateway connection shared key for passed virtual network
     * gateway connection in the specified resource group through Network resource
     * provider.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayConnectionName The virtual network
     * gateway connection reset shared key Name.
     *
     * @param {object} parameters Parameters supplied to the begin reset virtual
     * network gateway connection shared key operation through network resource
     * provider.
     *
     * @param {number} parameters.keyLength The virtual network connection reset
     * shared key length, should between 1 and 128.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ConnectionResetSharedKey>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    resetSharedKeyWithHttpOperationResponse(resourceGroupName: string, virtualNetworkGatewayConnectionName: string, parameters: models.ConnectionResetSharedKey, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ConnectionResetSharedKey>>;

    /**
     * The VirtualNetworkGatewayConnectionResetSharedKey operation resets the
     * virtual network gateway connection shared key for passed virtual network
     * gateway connection in the specified resource group through Network resource
     * provider.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayConnectionName The virtual network
     * gateway connection reset shared key Name.
     *
     * @param {object} parameters Parameters supplied to the begin reset virtual
     * network gateway connection shared key operation through network resource
     * provider.
     *
     * @param {number} parameters.keyLength The virtual network connection reset
     * shared key length, should between 1 and 128.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ConnectionResetSharedKey} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ConnectionResetSharedKey} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ConnectionResetSharedKey} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    resetSharedKey(resourceGroupName: string, virtualNetworkGatewayConnectionName: string, parameters: models.ConnectionResetSharedKey, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ConnectionResetSharedKey>;
    resetSharedKey(resourceGroupName: string, virtualNetworkGatewayConnectionName: string, parameters: models.ConnectionResetSharedKey, callback: ServiceCallback<models.ConnectionResetSharedKey>): void;
    resetSharedKey(resourceGroupName: string, virtualNetworkGatewayConnectionName: string, parameters: models.ConnectionResetSharedKey, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ConnectionResetSharedKey>): void;


    /**
     * Creates or updates a virtual network gateway connection in the specified
     * resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayConnectionName The name of the virtual
     * network gateway connection.
     *
     * @param {object} parameters Parameters supplied to the create or update
     * virtual network gateway connection operation.
     *
     * @param {string} [parameters.authorizationKey] The authorizationKey.
     *
     * @param {object} parameters.virtualNetworkGateway1 The reference to virtual
     * network gateway resource.
     *
     * @param {object} [parameters.virtualNetworkGateway2] The reference to virtual
     * network gateway resource.
     *
     * @param {array} [parameters.virtualNetworkGateway2.ipConfigurations] IP
     * configurations for virtual network gateway.
     *
     * @param {string} [parameters.virtualNetworkGateway2.gatewayType] The type of
     * this virtual network gateway. Possible values are: 'Vpn' and 'ExpressRoute'.
     * Possible values include: 'Vpn', 'ExpressRoute'
     *
     * @param {string} [parameters.virtualNetworkGateway2.vpnType] The type of this
     * virtual network gateway. Possible values are: 'PolicyBased' and
     * 'RouteBased'. Possible values include: 'PolicyBased', 'RouteBased'
     *
     * @param {boolean} [parameters.virtualNetworkGateway2.enableBgp] Whether BGP
     * is enabled for this virtual network gateway or not.
     *
     * @param {boolean} [parameters.virtualNetworkGateway2.activeActive]
     * ActiveActive flag
     *
     * @param {object} [parameters.virtualNetworkGateway2.gatewayDefaultSite] The
     * reference of the LocalNetworkGateway resource which represents local network
     * site having default routes. Assign Null value in case of removing existing
     * default site setting.
     *
     * @param {object} [parameters.virtualNetworkGateway2.sku] The reference of the
     * VirtualNetworkGatewaySku resource which represents the SKU selected for
     * Virtual network gateway.
     *
     * @param {string} [parameters.virtualNetworkGateway2.sku.name] Gateway SKU
     * name. Possible values include: 'Basic', 'HighPerformance', 'Standard',
     * 'UltraPerformance', 'VpnGw1', 'VpnGw2', 'VpnGw3', 'VpnGw1AZ', 'VpnGw2AZ',
     * 'VpnGw3AZ', 'ErGw1AZ', 'ErGw2AZ', 'ErGw3AZ'
     *
     * @param {string} [parameters.virtualNetworkGateway2.sku.tier] Gateway SKU
     * tier. Possible values include: 'Basic', 'HighPerformance', 'Standard',
     * 'UltraPerformance', 'VpnGw1', 'VpnGw2', 'VpnGw3', 'VpnGw1AZ', 'VpnGw2AZ',
     * 'VpnGw3AZ', 'ErGw1AZ', 'ErGw2AZ', 'ErGw3AZ'
     *
     * @param {number} [parameters.virtualNetworkGateway2.sku.capacity] The
     * capacity.
     *
     * @param {object} [parameters.virtualNetworkGateway2.vpnClientConfiguration]
     * The reference of the VpnClientConfiguration resource which represents the
     * P2S VpnClient configurations.
     *
     * @param {object}
     * [parameters.virtualNetworkGateway2.vpnClientConfiguration.vpnClientAddressPool]
     * The reference of the address space resource which represents Address space
     * for P2S VpnClient.
     *
     * @param {array}
     * [parameters.virtualNetworkGateway2.vpnClientConfiguration.vpnClientRootCertificates]
     * VpnClientRootCertificate for virtual network gateway.
     *
     * @param {array}
     * [parameters.virtualNetworkGateway2.vpnClientConfiguration.vpnClientRevokedCertificates]
     * VpnClientRevokedCertificate for Virtual network gateway.
     *
     * @param {array}
     * [parameters.virtualNetworkGateway2.vpnClientConfiguration.vpnClientProtocols]
     * VpnClientProtocols for Virtual network gateway.
     *
     * @param {array}
     * [parameters.virtualNetworkGateway2.vpnClientConfiguration.vpnClientIpsecPolicies]
     * VpnClientIpsecPolicies for virtual network gateway P2S client.
     *
     * @param {string}
     * [parameters.virtualNetworkGateway2.vpnClientConfiguration.radiusServerAddress]
     * The radius server address property of the VirtualNetworkGateway resource for
     * vpn client connection.
     *
     * @param {string}
     * [parameters.virtualNetworkGateway2.vpnClientConfiguration.radiusServerSecret]
     * The radius secret property of the VirtualNetworkGateway resource for vpn
     * client connection.
     *
     * @param {object} [parameters.virtualNetworkGateway2.bgpSettings] Virtual
     * network gateway's BGP speaker settings.
     *
     * @param {string} [parameters.virtualNetworkGateway2.resourceGuid] The
     * resource GUID property of the VirtualNetworkGateway resource.
     *
     * @param {string} [parameters.virtualNetworkGateway2.etag] Gets a unique
     * read-only string that changes whenever the resource is updated.
     *
     * @param {string} [parameters.virtualNetworkGateway2.id] Resource ID.
     *
     * @param {string} [parameters.virtualNetworkGateway2.location] Resource
     * location.
     *
     * @param {object} [parameters.virtualNetworkGateway2.tags] Resource tags.
     *
     * @param {object} [parameters.localNetworkGateway2] The reference to local
     * network gateway resource.
     *
     * @param {object} [parameters.localNetworkGateway2.localNetworkAddressSpace]
     * Local network site address space.
     *
     * @param {array}
     * [parameters.localNetworkGateway2.localNetworkAddressSpace.addressPrefixes] A
     * list of address blocks reserved for this virtual network in CIDR notation.
     *
     * @param {string} [parameters.localNetworkGateway2.gatewayIpAddress] IP
     * address of local network gateway.
     *
     * @param {object} [parameters.localNetworkGateway2.bgpSettings] Local network
     * gateway's BGP speaker settings.
     *
     * @param {number} [parameters.localNetworkGateway2.bgpSettings.asn] The BGP
     * speaker's ASN.
     *
     * @param {string}
     * [parameters.localNetworkGateway2.bgpSettings.bgpPeeringAddress] The BGP
     * peering address and BGP identifier of this BGP speaker.
     *
     * @param {number} [parameters.localNetworkGateway2.bgpSettings.peerWeight] The
     * weight added to routes learned from this BGP speaker.
     *
     * @param {string} [parameters.localNetworkGateway2.resourceGuid] The resource
     * GUID property of the LocalNetworkGateway resource.
     *
     * @param {string} [parameters.localNetworkGateway2.etag] A unique read-only
     * string that changes whenever the resource is updated.
     *
     * @param {string} [parameters.localNetworkGateway2.id] Resource ID.
     *
     * @param {string} [parameters.localNetworkGateway2.location] Resource
     * location.
     *
     * @param {object} [parameters.localNetworkGateway2.tags] Resource tags.
     *
     * @param {string} parameters.connectionType Gateway connection type. Possible
     * values are: 'Ipsec','Vnet2Vnet','ExpressRoute', and 'VPNClient. Possible
     * values include: 'IPsec', 'Vnet2Vnet', 'ExpressRoute', 'VPNClient'
     *
     * @param {number} [parameters.routingWeight] The routing weight.
     *
     * @param {string} [parameters.sharedKey] The IPSec shared key.
     *
     * @param {object} [parameters.peer] The reference to peerings resource.
     *
     * @param {string} [parameters.peer.id] Resource ID.
     *
     * @param {boolean} [parameters.enableBgp] EnableBgp flag
     *
     * @param {boolean} [parameters.usePolicyBasedTrafficSelectors] Enable
     * policy-based traffic selectors.
     *
     * @param {array} [parameters.ipsecPolicies] The IPSec Policies to be
     * considered by this connection.
     *
     * @param {string} [parameters.resourceGuid] The resource GUID property of the
     * VirtualNetworkGatewayConnection resource.
     *
     * @param {string} [parameters.etag] Gets a unique read-only string that
     * changes whenever the resource is updated.
     *
     * @param {string} [parameters.id] Resource ID.
     *
     * @param {string} [parameters.location] Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<VirtualNetworkGatewayConnection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, virtualNetworkGatewayConnectionName: string, parameters: models.VirtualNetworkGatewayConnection, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.VirtualNetworkGatewayConnection>>;

    /**
     * Creates or updates a virtual network gateway connection in the specified
     * resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayConnectionName The name of the virtual
     * network gateway connection.
     *
     * @param {object} parameters Parameters supplied to the create or update
     * virtual network gateway connection operation.
     *
     * @param {string} [parameters.authorizationKey] The authorizationKey.
     *
     * @param {object} parameters.virtualNetworkGateway1 The reference to virtual
     * network gateway resource.
     *
     * @param {object} [parameters.virtualNetworkGateway2] The reference to virtual
     * network gateway resource.
     *
     * @param {array} [parameters.virtualNetworkGateway2.ipConfigurations] IP
     * configurations for virtual network gateway.
     *
     * @param {string} [parameters.virtualNetworkGateway2.gatewayType] The type of
     * this virtual network gateway. Possible values are: 'Vpn' and 'ExpressRoute'.
     * Possible values include: 'Vpn', 'ExpressRoute'
     *
     * @param {string} [parameters.virtualNetworkGateway2.vpnType] The type of this
     * virtual network gateway. Possible values are: 'PolicyBased' and
     * 'RouteBased'. Possible values include: 'PolicyBased', 'RouteBased'
     *
     * @param {boolean} [parameters.virtualNetworkGateway2.enableBgp] Whether BGP
     * is enabled for this virtual network gateway or not.
     *
     * @param {boolean} [parameters.virtualNetworkGateway2.activeActive]
     * ActiveActive flag
     *
     * @param {object} [parameters.virtualNetworkGateway2.gatewayDefaultSite] The
     * reference of the LocalNetworkGateway resource which represents local network
     * site having default routes. Assign Null value in case of removing existing
     * default site setting.
     *
     * @param {object} [parameters.virtualNetworkGateway2.sku] The reference of the
     * VirtualNetworkGatewaySku resource which represents the SKU selected for
     * Virtual network gateway.
     *
     * @param {string} [parameters.virtualNetworkGateway2.sku.name] Gateway SKU
     * name. Possible values include: 'Basic', 'HighPerformance', 'Standard',
     * 'UltraPerformance', 'VpnGw1', 'VpnGw2', 'VpnGw3', 'VpnGw1AZ', 'VpnGw2AZ',
     * 'VpnGw3AZ', 'ErGw1AZ', 'ErGw2AZ', 'ErGw3AZ'
     *
     * @param {string} [parameters.virtualNetworkGateway2.sku.tier] Gateway SKU
     * tier. Possible values include: 'Basic', 'HighPerformance', 'Standard',
     * 'UltraPerformance', 'VpnGw1', 'VpnGw2', 'VpnGw3', 'VpnGw1AZ', 'VpnGw2AZ',
     * 'VpnGw3AZ', 'ErGw1AZ', 'ErGw2AZ', 'ErGw3AZ'
     *
     * @param {number} [parameters.virtualNetworkGateway2.sku.capacity] The
     * capacity.
     *
     * @param {object} [parameters.virtualNetworkGateway2.vpnClientConfiguration]
     * The reference of the VpnClientConfiguration resource which represents the
     * P2S VpnClient configurations.
     *
     * @param {object}
     * [parameters.virtualNetworkGateway2.vpnClientConfiguration.vpnClientAddressPool]
     * The reference of the address space resource which represents Address space
     * for P2S VpnClient.
     *
     * @param {array}
     * [parameters.virtualNetworkGateway2.vpnClientConfiguration.vpnClientRootCertificates]
     * VpnClientRootCertificate for virtual network gateway.
     *
     * @param {array}
     * [parameters.virtualNetworkGateway2.vpnClientConfiguration.vpnClientRevokedCertificates]
     * VpnClientRevokedCertificate for Virtual network gateway.
     *
     * @param {array}
     * [parameters.virtualNetworkGateway2.vpnClientConfiguration.vpnClientProtocols]
     * VpnClientProtocols for Virtual network gateway.
     *
     * @param {array}
     * [parameters.virtualNetworkGateway2.vpnClientConfiguration.vpnClientIpsecPolicies]
     * VpnClientIpsecPolicies for virtual network gateway P2S client.
     *
     * @param {string}
     * [parameters.virtualNetworkGateway2.vpnClientConfiguration.radiusServerAddress]
     * The radius server address property of the VirtualNetworkGateway resource for
     * vpn client connection.
     *
     * @param {string}
     * [parameters.virtualNetworkGateway2.vpnClientConfiguration.radiusServerSecret]
     * The radius secret property of the VirtualNetworkGateway resource for vpn
     * client connection.
     *
     * @param {object} [parameters.virtualNetworkGateway2.bgpSettings] Virtual
     * network gateway's BGP speaker settings.
     *
     * @param {string} [parameters.virtualNetworkGateway2.resourceGuid] The
     * resource GUID property of the VirtualNetworkGateway resource.
     *
     * @param {string} [parameters.virtualNetworkGateway2.etag] Gets a unique
     * read-only string that changes whenever the resource is updated.
     *
     * @param {string} [parameters.virtualNetworkGateway2.id] Resource ID.
     *
     * @param {string} [parameters.virtualNetworkGateway2.location] Resource
     * location.
     *
     * @param {object} [parameters.virtualNetworkGateway2.tags] Resource tags.
     *
     * @param {object} [parameters.localNetworkGateway2] The reference to local
     * network gateway resource.
     *
     * @param {object} [parameters.localNetworkGateway2.localNetworkAddressSpace]
     * Local network site address space.
     *
     * @param {array}
     * [parameters.localNetworkGateway2.localNetworkAddressSpace.addressPrefixes] A
     * list of address blocks reserved for this virtual network in CIDR notation.
     *
     * @param {string} [parameters.localNetworkGateway2.gatewayIpAddress] IP
     * address of local network gateway.
     *
     * @param {object} [parameters.localNetworkGateway2.bgpSettings] Local network
     * gateway's BGP speaker settings.
     *
     * @param {number} [parameters.localNetworkGateway2.bgpSettings.asn] The BGP
     * speaker's ASN.
     *
     * @param {string}
     * [parameters.localNetworkGateway2.bgpSettings.bgpPeeringAddress] The BGP
     * peering address and BGP identifier of this BGP speaker.
     *
     * @param {number} [parameters.localNetworkGateway2.bgpSettings.peerWeight] The
     * weight added to routes learned from this BGP speaker.
     *
     * @param {string} [parameters.localNetworkGateway2.resourceGuid] The resource
     * GUID property of the LocalNetworkGateway resource.
     *
     * @param {string} [parameters.localNetworkGateway2.etag] A unique read-only
     * string that changes whenever the resource is updated.
     *
     * @param {string} [parameters.localNetworkGateway2.id] Resource ID.
     *
     * @param {string} [parameters.localNetworkGateway2.location] Resource
     * location.
     *
     * @param {object} [parameters.localNetworkGateway2.tags] Resource tags.
     *
     * @param {string} parameters.connectionType Gateway connection type. Possible
     * values are: 'Ipsec','Vnet2Vnet','ExpressRoute', and 'VPNClient. Possible
     * values include: 'IPsec', 'Vnet2Vnet', 'ExpressRoute', 'VPNClient'
     *
     * @param {number} [parameters.routingWeight] The routing weight.
     *
     * @param {string} [parameters.sharedKey] The IPSec shared key.
     *
     * @param {object} [parameters.peer] The reference to peerings resource.
     *
     * @param {string} [parameters.peer.id] Resource ID.
     *
     * @param {boolean} [parameters.enableBgp] EnableBgp flag
     *
     * @param {boolean} [parameters.usePolicyBasedTrafficSelectors] Enable
     * policy-based traffic selectors.
     *
     * @param {array} [parameters.ipsecPolicies] The IPSec Policies to be
     * considered by this connection.
     *
     * @param {string} [parameters.resourceGuid] The resource GUID property of the
     * VirtualNetworkGatewayConnection resource.
     *
     * @param {string} [parameters.etag] Gets a unique read-only string that
     * changes whenever the resource is updated.
     *
     * @param {string} [parameters.id] Resource ID.
     *
     * @param {string} [parameters.location] Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {VirtualNetworkGatewayConnection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {VirtualNetworkGatewayConnection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link VirtualNetworkGatewayConnection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(resourceGroupName: string, virtualNetworkGatewayConnectionName: string, parameters: models.VirtualNetworkGatewayConnection, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.VirtualNetworkGatewayConnection>;
    beginCreateOrUpdate(resourceGroupName: string, virtualNetworkGatewayConnectionName: string, parameters: models.VirtualNetworkGatewayConnection, callback: ServiceCallback<models.VirtualNetworkGatewayConnection>): void;
    beginCreateOrUpdate(resourceGroupName: string, virtualNetworkGatewayConnectionName: string, parameters: models.VirtualNetworkGatewayConnection, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VirtualNetworkGatewayConnection>): void;


    /**
     * Deletes the specified virtual network Gateway connection.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayConnectionName The name of the virtual
     * network gateway connection.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, virtualNetworkGatewayConnectionName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the specified virtual network Gateway connection.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayConnectionName The name of the virtual
     * network gateway connection.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(resourceGroupName: string, virtualNetworkGatewayConnectionName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(resourceGroupName: string, virtualNetworkGatewayConnectionName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, virtualNetworkGatewayConnectionName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Updates a virtual network gateway connection tags.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayConnectionName The name of the virtual
     * network gateway connection.
     *
     * @param {object} parameters Parameters supplied to update virtual network
     * gateway connection tags.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<VirtualNetworkGatewayConnection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginUpdateTagsWithHttpOperationResponse(resourceGroupName: string, virtualNetworkGatewayConnectionName: string, parameters: models.TagsObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.VirtualNetworkGatewayConnection>>;

    /**
     * Updates a virtual network gateway connection tags.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayConnectionName The name of the virtual
     * network gateway connection.
     *
     * @param {object} parameters Parameters supplied to update virtual network
     * gateway connection tags.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {VirtualNetworkGatewayConnection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {VirtualNetworkGatewayConnection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link VirtualNetworkGatewayConnection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginUpdateTags(resourceGroupName: string, virtualNetworkGatewayConnectionName: string, parameters: models.TagsObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.VirtualNetworkGatewayConnection>;
    beginUpdateTags(resourceGroupName: string, virtualNetworkGatewayConnectionName: string, parameters: models.TagsObject, callback: ServiceCallback<models.VirtualNetworkGatewayConnection>): void;
    beginUpdateTags(resourceGroupName: string, virtualNetworkGatewayConnectionName: string, parameters: models.TagsObject, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VirtualNetworkGatewayConnection>): void;


    /**
     * The Put VirtualNetworkGatewayConnectionSharedKey operation sets the virtual
     * network gateway connection shared key for passed virtual network gateway
     * connection in the specified resource group through Network resource
     * provider.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayConnectionName The virtual network
     * gateway connection name.
     *
     * @param {object} parameters Parameters supplied to the Begin Set Virtual
     * Network Gateway connection Shared key operation throughNetwork resource
     * provider.
     *
     * @param {string} parameters.value The virtual network connection shared key
     * value.
     *
     * @param {string} [parameters.id] Resource ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ConnectionSharedKey>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginSetSharedKeyWithHttpOperationResponse(resourceGroupName: string, virtualNetworkGatewayConnectionName: string, parameters: models.ConnectionSharedKey, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ConnectionSharedKey>>;

    /**
     * The Put VirtualNetworkGatewayConnectionSharedKey operation sets the virtual
     * network gateway connection shared key for passed virtual network gateway
     * connection in the specified resource group through Network resource
     * provider.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayConnectionName The virtual network
     * gateway connection name.
     *
     * @param {object} parameters Parameters supplied to the Begin Set Virtual
     * Network Gateway connection Shared key operation throughNetwork resource
     * provider.
     *
     * @param {string} parameters.value The virtual network connection shared key
     * value.
     *
     * @param {string} [parameters.id] Resource ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ConnectionSharedKey} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ConnectionSharedKey} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ConnectionSharedKey} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginSetSharedKey(resourceGroupName: string, virtualNetworkGatewayConnectionName: string, parameters: models.ConnectionSharedKey, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ConnectionSharedKey>;
    beginSetSharedKey(resourceGroupName: string, virtualNetworkGatewayConnectionName: string, parameters: models.ConnectionSharedKey, callback: ServiceCallback<models.ConnectionSharedKey>): void;
    beginSetSharedKey(resourceGroupName: string, virtualNetworkGatewayConnectionName: string, parameters: models.ConnectionSharedKey, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ConnectionSharedKey>): void;


    /**
     * The VirtualNetworkGatewayConnectionResetSharedKey operation resets the
     * virtual network gateway connection shared key for passed virtual network
     * gateway connection in the specified resource group through Network resource
     * provider.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayConnectionName The virtual network
     * gateway connection reset shared key Name.
     *
     * @param {object} parameters Parameters supplied to the begin reset virtual
     * network gateway connection shared key operation through network resource
     * provider.
     *
     * @param {number} parameters.keyLength The virtual network connection reset
     * shared key length, should between 1 and 128.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ConnectionResetSharedKey>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginResetSharedKeyWithHttpOperationResponse(resourceGroupName: string, virtualNetworkGatewayConnectionName: string, parameters: models.ConnectionResetSharedKey, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ConnectionResetSharedKey>>;

    /**
     * The VirtualNetworkGatewayConnectionResetSharedKey operation resets the
     * virtual network gateway connection shared key for passed virtual network
     * gateway connection in the specified resource group through Network resource
     * provider.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayConnectionName The virtual network
     * gateway connection reset shared key Name.
     *
     * @param {object} parameters Parameters supplied to the begin reset virtual
     * network gateway connection shared key operation through network resource
     * provider.
     *
     * @param {number} parameters.keyLength The virtual network connection reset
     * shared key length, should between 1 and 128.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ConnectionResetSharedKey} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ConnectionResetSharedKey} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ConnectionResetSharedKey} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginResetSharedKey(resourceGroupName: string, virtualNetworkGatewayConnectionName: string, parameters: models.ConnectionResetSharedKey, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ConnectionResetSharedKey>;
    beginResetSharedKey(resourceGroupName: string, virtualNetworkGatewayConnectionName: string, parameters: models.ConnectionResetSharedKey, callback: ServiceCallback<models.ConnectionResetSharedKey>): void;
    beginResetSharedKey(resourceGroupName: string, virtualNetworkGatewayConnectionName: string, parameters: models.ConnectionResetSharedKey, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ConnectionResetSharedKey>): void;


    /**
     * The List VirtualNetworkGatewayConnections operation retrieves all the
     * virtual network gateways connections created.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<VirtualNetworkGatewayConnectionListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.VirtualNetworkGatewayConnectionListResult>>;

    /**
     * The List VirtualNetworkGatewayConnections operation retrieves all the
     * virtual network gateways connections created.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {VirtualNetworkGatewayConnectionListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {VirtualNetworkGatewayConnectionListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link VirtualNetworkGatewayConnectionListResult}
     *                      for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.VirtualNetworkGatewayConnectionListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.VirtualNetworkGatewayConnectionListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VirtualNetworkGatewayConnectionListResult>): void;
}

/**
 * @class
 * LocalNetworkGateways
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the NetworkManagementClient.
 */
export interface LocalNetworkGateways {


    /**
     * Creates or updates a local network gateway in the specified resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} localNetworkGatewayName The name of the local network
     * gateway.
     *
     * @param {object} parameters Parameters supplied to the create or update local
     * network gateway operation.
     *
     * @param {object} [parameters.localNetworkAddressSpace] Local network site
     * address space.
     *
     * @param {array} [parameters.localNetworkAddressSpace.addressPrefixes] A list
     * of address blocks reserved for this virtual network in CIDR notation.
     *
     * @param {string} [parameters.gatewayIpAddress] IP address of local network
     * gateway.
     *
     * @param {object} [parameters.bgpSettings] Local network gateway's BGP speaker
     * settings.
     *
     * @param {number} [parameters.bgpSettings.asn] The BGP speaker's ASN.
     *
     * @param {string} [parameters.bgpSettings.bgpPeeringAddress] The BGP peering
     * address and BGP identifier of this BGP speaker.
     *
     * @param {number} [parameters.bgpSettings.peerWeight] The weight added to
     * routes learned from this BGP speaker.
     *
     * @param {string} [parameters.resourceGuid] The resource GUID property of the
     * LocalNetworkGateway resource.
     *
     * @param {string} [parameters.etag] A unique read-only string that changes
     * whenever the resource is updated.
     *
     * @param {string} [parameters.id] Resource ID.
     *
     * @param {string} [parameters.location] Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<LocalNetworkGateway>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, localNetworkGatewayName: string, parameters: models.LocalNetworkGateway, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.LocalNetworkGateway>>;

    /**
     * Creates or updates a local network gateway in the specified resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} localNetworkGatewayName The name of the local network
     * gateway.
     *
     * @param {object} parameters Parameters supplied to the create or update local
     * network gateway operation.
     *
     * @param {object} [parameters.localNetworkAddressSpace] Local network site
     * address space.
     *
     * @param {array} [parameters.localNetworkAddressSpace.addressPrefixes] A list
     * of address blocks reserved for this virtual network in CIDR notation.
     *
     * @param {string} [parameters.gatewayIpAddress] IP address of local network
     * gateway.
     *
     * @param {object} [parameters.bgpSettings] Local network gateway's BGP speaker
     * settings.
     *
     * @param {number} [parameters.bgpSettings.asn] The BGP speaker's ASN.
     *
     * @param {string} [parameters.bgpSettings.bgpPeeringAddress] The BGP peering
     * address and BGP identifier of this BGP speaker.
     *
     * @param {number} [parameters.bgpSettings.peerWeight] The weight added to
     * routes learned from this BGP speaker.
     *
     * @param {string} [parameters.resourceGuid] The resource GUID property of the
     * LocalNetworkGateway resource.
     *
     * @param {string} [parameters.etag] A unique read-only string that changes
     * whenever the resource is updated.
     *
     * @param {string} [parameters.id] Resource ID.
     *
     * @param {string} [parameters.location] Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {LocalNetworkGateway} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {LocalNetworkGateway} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link LocalNetworkGateway} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, localNetworkGatewayName: string, parameters: models.LocalNetworkGateway, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.LocalNetworkGateway>;
    createOrUpdate(resourceGroupName: string, localNetworkGatewayName: string, parameters: models.LocalNetworkGateway, callback: ServiceCallback<models.LocalNetworkGateway>): void;
    createOrUpdate(resourceGroupName: string, localNetworkGatewayName: string, parameters: models.LocalNetworkGateway, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.LocalNetworkGateway>): void;


    /**
     * Gets the specified local network gateway in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} localNetworkGatewayName The name of the local network
     * gateway.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<LocalNetworkGateway>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, localNetworkGatewayName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.LocalNetworkGateway>>;

    /**
     * Gets the specified local network gateway in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} localNetworkGatewayName The name of the local network
     * gateway.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {LocalNetworkGateway} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {LocalNetworkGateway} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link LocalNetworkGateway} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, localNetworkGatewayName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.LocalNetworkGateway>;
    get(resourceGroupName: string, localNetworkGatewayName: string, callback: ServiceCallback<models.LocalNetworkGateway>): void;
    get(resourceGroupName: string, localNetworkGatewayName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.LocalNetworkGateway>): void;


    /**
     * Deletes the specified local network gateway.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} localNetworkGatewayName The name of the local network
     * gateway.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, localNetworkGatewayName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the specified local network gateway.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} localNetworkGatewayName The name of the local network
     * gateway.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, localNetworkGatewayName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, localNetworkGatewayName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, localNetworkGatewayName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Updates a local network gateway tags.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} localNetworkGatewayName The name of the local network
     * gateway.
     *
     * @param {object} parameters Parameters supplied to update local network
     * gateway tags.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<LocalNetworkGateway>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateTagsWithHttpOperationResponse(resourceGroupName: string, localNetworkGatewayName: string, parameters: models.TagsObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.LocalNetworkGateway>>;

    /**
     * Updates a local network gateway tags.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} localNetworkGatewayName The name of the local network
     * gateway.
     *
     * @param {object} parameters Parameters supplied to update local network
     * gateway tags.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {LocalNetworkGateway} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {LocalNetworkGateway} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link LocalNetworkGateway} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updateTags(resourceGroupName: string, localNetworkGatewayName: string, parameters: models.TagsObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.LocalNetworkGateway>;
    updateTags(resourceGroupName: string, localNetworkGatewayName: string, parameters: models.TagsObject, callback: ServiceCallback<models.LocalNetworkGateway>): void;
    updateTags(resourceGroupName: string, localNetworkGatewayName: string, parameters: models.TagsObject, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.LocalNetworkGateway>): void;


    /**
     * Gets all the local network gateways in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<LocalNetworkGatewayListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.LocalNetworkGatewayListResult>>;

    /**
     * Gets all the local network gateways in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {LocalNetworkGatewayListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {LocalNetworkGatewayListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link LocalNetworkGatewayListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.LocalNetworkGatewayListResult>;
    list(resourceGroupName: string, callback: ServiceCallback<models.LocalNetworkGatewayListResult>): void;
    list(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.LocalNetworkGatewayListResult>): void;


    /**
     * Creates or updates a local network gateway in the specified resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} localNetworkGatewayName The name of the local network
     * gateway.
     *
     * @param {object} parameters Parameters supplied to the create or update local
     * network gateway operation.
     *
     * @param {object} [parameters.localNetworkAddressSpace] Local network site
     * address space.
     *
     * @param {array} [parameters.localNetworkAddressSpace.addressPrefixes] A list
     * of address blocks reserved for this virtual network in CIDR notation.
     *
     * @param {string} [parameters.gatewayIpAddress] IP address of local network
     * gateway.
     *
     * @param {object} [parameters.bgpSettings] Local network gateway's BGP speaker
     * settings.
     *
     * @param {number} [parameters.bgpSettings.asn] The BGP speaker's ASN.
     *
     * @param {string} [parameters.bgpSettings.bgpPeeringAddress] The BGP peering
     * address and BGP identifier of this BGP speaker.
     *
     * @param {number} [parameters.bgpSettings.peerWeight] The weight added to
     * routes learned from this BGP speaker.
     *
     * @param {string} [parameters.resourceGuid] The resource GUID property of the
     * LocalNetworkGateway resource.
     *
     * @param {string} [parameters.etag] A unique read-only string that changes
     * whenever the resource is updated.
     *
     * @param {string} [parameters.id] Resource ID.
     *
     * @param {string} [parameters.location] Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<LocalNetworkGateway>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, localNetworkGatewayName: string, parameters: models.LocalNetworkGateway, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.LocalNetworkGateway>>;

    /**
     * Creates or updates a local network gateway in the specified resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} localNetworkGatewayName The name of the local network
     * gateway.
     *
     * @param {object} parameters Parameters supplied to the create or update local
     * network gateway operation.
     *
     * @param {object} [parameters.localNetworkAddressSpace] Local network site
     * address space.
     *
     * @param {array} [parameters.localNetworkAddressSpace.addressPrefixes] A list
     * of address blocks reserved for this virtual network in CIDR notation.
     *
     * @param {string} [parameters.gatewayIpAddress] IP address of local network
     * gateway.
     *
     * @param {object} [parameters.bgpSettings] Local network gateway's BGP speaker
     * settings.
     *
     * @param {number} [parameters.bgpSettings.asn] The BGP speaker's ASN.
     *
     * @param {string} [parameters.bgpSettings.bgpPeeringAddress] The BGP peering
     * address and BGP identifier of this BGP speaker.
     *
     * @param {number} [parameters.bgpSettings.peerWeight] The weight added to
     * routes learned from this BGP speaker.
     *
     * @param {string} [parameters.resourceGuid] The resource GUID property of the
     * LocalNetworkGateway resource.
     *
     * @param {string} [parameters.etag] A unique read-only string that changes
     * whenever the resource is updated.
     *
     * @param {string} [parameters.id] Resource ID.
     *
     * @param {string} [parameters.location] Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {LocalNetworkGateway} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {LocalNetworkGateway} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link LocalNetworkGateway} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(resourceGroupName: string, localNetworkGatewayName: string, parameters: models.LocalNetworkGateway, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.LocalNetworkGateway>;
    beginCreateOrUpdate(resourceGroupName: string, localNetworkGatewayName: string, parameters: models.LocalNetworkGateway, callback: ServiceCallback<models.LocalNetworkGateway>): void;
    beginCreateOrUpdate(resourceGroupName: string, localNetworkGatewayName: string, parameters: models.LocalNetworkGateway, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.LocalNetworkGateway>): void;


    /**
     * Deletes the specified local network gateway.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} localNetworkGatewayName The name of the local network
     * gateway.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, localNetworkGatewayName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the specified local network gateway.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} localNetworkGatewayName The name of the local network
     * gateway.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(resourceGroupName: string, localNetworkGatewayName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(resourceGroupName: string, localNetworkGatewayName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, localNetworkGatewayName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Updates a local network gateway tags.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} localNetworkGatewayName The name of the local network
     * gateway.
     *
     * @param {object} parameters Parameters supplied to update local network
     * gateway tags.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<LocalNetworkGateway>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginUpdateTagsWithHttpOperationResponse(resourceGroupName: string, localNetworkGatewayName: string, parameters: models.TagsObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.LocalNetworkGateway>>;

    /**
     * Updates a local network gateway tags.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} localNetworkGatewayName The name of the local network
     * gateway.
     *
     * @param {object} parameters Parameters supplied to update local network
     * gateway tags.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {LocalNetworkGateway} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {LocalNetworkGateway} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link LocalNetworkGateway} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginUpdateTags(resourceGroupName: string, localNetworkGatewayName: string, parameters: models.TagsObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.LocalNetworkGateway>;
    beginUpdateTags(resourceGroupName: string, localNetworkGatewayName: string, parameters: models.TagsObject, callback: ServiceCallback<models.LocalNetworkGateway>): void;
    beginUpdateTags(resourceGroupName: string, localNetworkGatewayName: string, parameters: models.TagsObject, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.LocalNetworkGateway>): void;


    /**
     * Gets all the local network gateways in a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<LocalNetworkGatewayListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.LocalNetworkGatewayListResult>>;

    /**
     * Gets all the local network gateways in a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {LocalNetworkGatewayListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {LocalNetworkGatewayListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link LocalNetworkGatewayListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.LocalNetworkGatewayListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.LocalNetworkGatewayListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.LocalNetworkGatewayListResult>): void;
}
