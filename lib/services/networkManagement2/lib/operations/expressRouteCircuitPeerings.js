/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const msRest = require('ms-rest');
const msRestAzure = require('ms-rest-azure');
const WebResource = msRest.WebResource;


/**
 * Deletes the specified peering from the specified express route circuit.
 *
 * @param {string} resourceGroupName The name of the resource group.
 *
 * @param {string} circuitName The name of the express route circuit.
 *
 * @param {string} peeringName The name of the peering.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _deleteMethod(resourceGroupName, circuitName, peeringName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }

  if (!callback) {
    throw new Error('callback cannot be null.');
  }

  // Send request
  this.beginDeleteMethod(resourceGroupName, circuitName, peeringName, options, (err, parsedResult, httpRequest, response) => {
    if (err) return callback(err);

    let initialResult = new msRest.HttpOperationResponse();
    initialResult.request = httpRequest;
    initialResult.response = response;
    initialResult.body = response.body;
    client.getLongRunningOperationResult(initialResult, options, (err, pollingResult) => {
      if (err) return callback(err);

      // Create Result
      let result = null;

      httpRequest = pollingResult.request;
      response = pollingResult.response;
      let responseBody = pollingResult.body;
      if (responseBody === '') responseBody = null;

      // Deserialize Response

      return callback(null, result, httpRequest, response);
    });
  });
}

/**
 * Gets the specified authorization from the specified express route circuit.
 *
 * @param {string} resourceGroupName The name of the resource group.
 *
 * @param {string} circuitName The name of the express route circuit.
 *
 * @param {string} peeringName The name of the peering.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link ExpressRouteCircuitPeering} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _get(resourceGroupName, circuitName, peeringName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (circuitName === null || circuitName === undefined || typeof circuitName.valueOf() !== 'string') {
      throw new Error('circuitName cannot be null or undefined and it must be of type string.');
    }
    if (peeringName === null || peeringName === undefined || typeof peeringName.valueOf() !== 'string') {
      throw new Error('peeringName cannot be null or undefined and it must be of type string.');
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}/peerings/{peeringName}';
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{circuitName}', encodeURIComponent(circuitName));
  requestUrl = requestUrl.replace('{peeringName}', encodeURIComponent(peeringName));
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ExpressRouteCircuitPeering']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}


/**
 * Creates or updates a peering in the specified express route circuits.
 *
 * @param {string} resourceGroupName The name of the resource group.
 *
 * @param {string} circuitName The name of the express route circuit.
 *
 * @param {string} peeringName The name of the peering.
 *
 * @param {object} peeringParameters Parameters supplied to the create or
 * update express route circuit peering operation.
 *
 * @param {string} [peeringParameters.peeringType] The peering type. Possible
 * values include: 'AzurePublicPeering', 'AzurePrivatePeering',
 * 'MicrosoftPeering'
 *
 * @param {string} [peeringParameters.state] The peering state. Possible values
 * include: 'Disabled', 'Enabled'
 *
 * @param {number} [peeringParameters.azureASN] The Azure ASN.
 *
 * @param {number} [peeringParameters.peerASN] The peer ASN.
 *
 * @param {string} [peeringParameters.primaryPeerAddressPrefix] The primary
 * address prefix.
 *
 * @param {string} [peeringParameters.secondaryPeerAddressPrefix] The secondary
 * address prefix.
 *
 * @param {string} [peeringParameters.primaryAzurePort] The primary port.
 *
 * @param {string} [peeringParameters.secondaryAzurePort] The secondary port.
 *
 * @param {string} [peeringParameters.sharedKey] The shared key.
 *
 * @param {number} [peeringParameters.vlanId] The VLAN ID.
 *
 * @param {object} [peeringParameters.microsoftPeeringConfig] The Microsoft
 * peering configuration.
 *
 * @param {object} [peeringParameters.stats] Gets peering stats.
 *
 * @param {number} [peeringParameters.stats.primarybytesIn] Gets BytesIn of the
 * peering.
 *
 * @param {number} [peeringParameters.stats.primarybytesOut] Gets BytesOut of
 * the peering.
 *
 * @param {number} [peeringParameters.stats.secondarybytesIn] Gets BytesIn of
 * the peering.
 *
 * @param {number} [peeringParameters.stats.secondarybytesOut] Gets BytesOut of
 * the peering.
 *
 * @param {string} [peeringParameters.provisioningState] Gets the provisioning
 * state of the public IP resource. Possible values are: 'Updating',
 * 'Deleting', and 'Failed'.
 *
 * @param {string} [peeringParameters.gatewayManagerEtag] The GatewayManager
 * Etag.
 *
 * @param {string} [peeringParameters.lastModifiedBy] Gets whether the provider
 * or the customer last modified the peering.
 *
 * @param {object} [peeringParameters.routeFilter] The reference of the
 * RouteFilter resource.
 *
 * @param {object} [peeringParameters.ipv6PeeringConfig] The IPv6 peering
 * configuration.
 *
 * @param {string}
 * [peeringParameters.ipv6PeeringConfig.primaryPeerAddressPrefix] The primary
 * address prefix.
 *
 * @param {string}
 * [peeringParameters.ipv6PeeringConfig.secondaryPeerAddressPrefix] The
 * secondary address prefix.
 *
 * @param {object} [peeringParameters.ipv6PeeringConfig.microsoftPeeringConfig]
 * The Microsoft peering configuration.
 *
 * @param {array}
 * [peeringParameters.ipv6PeeringConfig.microsoftPeeringConfig.advertisedPublicPrefixes]
 * The reference of AdvertisedPublicPrefixes.
 *
 * @param {array}
 * [peeringParameters.ipv6PeeringConfig.microsoftPeeringConfig.advertisedCommunities]
 * The communities of bgp peering. Spepcified for microsoft peering
 *
 * @param {string}
 * [peeringParameters.ipv6PeeringConfig.microsoftPeeringConfig.advertisedPublicPrefixesState]
 * AdvertisedPublicPrefixState of the Peering resource. Possible values are
 * 'NotConfigured', 'Configuring', 'Configured', and 'ValidationNeeded'.
 * Possible values include: 'NotConfigured', 'Configuring', 'Configured',
 * 'ValidationNeeded'
 *
 * @param {number}
 * [peeringParameters.ipv6PeeringConfig.microsoftPeeringConfig.legacyMode] The
 * legacy mode of the peering.
 *
 * @param {number}
 * [peeringParameters.ipv6PeeringConfig.microsoftPeeringConfig.customerASN] The
 * CustomerASN of the peering.
 *
 * @param {string}
 * [peeringParameters.ipv6PeeringConfig.microsoftPeeringConfig.routingRegistryName]
 * The RoutingRegistryName of the configuration.
 *
 * @param {object} [peeringParameters.ipv6PeeringConfig.routeFilter] The
 * reference of the RouteFilter resource.
 *
 * @param {array} [peeringParameters.ipv6PeeringConfig.routeFilter.rules]
 * Collection of RouteFilterRules contained within a route filter.
 *
 * @param {array} [peeringParameters.ipv6PeeringConfig.routeFilter.peerings] A
 * collection of references to express route circuit peerings.
 *
 * @param {string} [peeringParameters.ipv6PeeringConfig.routeFilter.id]
 * Resource ID.
 *
 * @param {string} [peeringParameters.ipv6PeeringConfig.routeFilter.location]
 * Resource location.
 *
 * @param {object} [peeringParameters.ipv6PeeringConfig.routeFilter.tags]
 * Resource tags.
 *
 * @param {string} [peeringParameters.ipv6PeeringConfig.state] The state of
 * peering. Possible values are: 'Disabled' and 'Enabled'. Possible values
 * include: 'Disabled', 'Enabled'
 *
 * @param {array} [peeringParameters.connections] The list of circuit
 * connections associated with Azure Private Peering for this circuit.
 *
 * @param {string} [peeringParameters.name] Gets name of the resource that is
 * unique within a resource group. This name can be used to access the
 * resource.
 *
 * @param {string} [peeringParameters.id] Resource ID.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link ExpressRouteCircuitPeering} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _createOrUpdate(resourceGroupName, circuitName, peeringName, peeringParameters, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }

  if (!callback) {
    throw new Error('callback cannot be null.');
  }

  // Send request
  this.beginCreateOrUpdate(resourceGroupName, circuitName, peeringName, peeringParameters, options, (err, parsedResult, httpRequest, response) => {
    if (err) return callback(err);

    let initialResult = new msRest.HttpOperationResponse();
    initialResult.request = httpRequest;
    initialResult.response = response;
    initialResult.body = response.body;
    client.getLongRunningOperationResult(initialResult, options, (err, pollingResult) => {
      if (err) return callback(err);

      // Create Result
      let result = null;

      httpRequest = pollingResult.request;
      response = pollingResult.response;
      let responseBody = pollingResult.body;
      if (responseBody === '') responseBody = null;

      // Deserialize Response
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ExpressRouteCircuitPeering']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }

      return callback(null, result, httpRequest, response);
    });
  });
}

/**
 * Gets all peerings in a specified express route circuit.
 *
 * @param {string} resourceGroupName The name of the resource group.
 *
 * @param {string} circuitName The name of the express route circuit.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link ExpressRouteCircuitPeeringListResult} for
 *                      more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _list(resourceGroupName, circuitName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (circuitName === null || circuitName === undefined || typeof circuitName.valueOf() !== 'string') {
      throw new Error('circuitName cannot be null or undefined and it must be of type string.');
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}/peerings';
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{circuitName}', encodeURIComponent(circuitName));
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ExpressRouteCircuitPeeringListResult']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Deletes the specified peering from the specified express route circuit.
 *
 * @param {string} resourceGroupName The name of the resource group.
 *
 * @param {string} circuitName The name of the express route circuit.
 *
 * @param {string} peeringName The name of the peering.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _beginDeleteMethod(resourceGroupName, circuitName, peeringName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (circuitName === null || circuitName === undefined || typeof circuitName.valueOf() !== 'string') {
      throw new Error('circuitName cannot be null or undefined and it must be of type string.');
    }
    if (peeringName === null || peeringName === undefined || typeof peeringName.valueOf() !== 'string') {
      throw new Error('peeringName cannot be null or undefined and it must be of type string.');
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}/peerings/{peeringName}';
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{circuitName}', encodeURIComponent(circuitName));
  requestUrl = requestUrl.replace('{peeringName}', encodeURIComponent(peeringName));
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'DELETE';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200 && statusCode !== 202 && statusCode !== 204) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Creates or updates a peering in the specified express route circuits.
 *
 * @param {string} resourceGroupName The name of the resource group.
 *
 * @param {string} circuitName The name of the express route circuit.
 *
 * @param {string} peeringName The name of the peering.
 *
 * @param {object} peeringParameters Parameters supplied to the create or
 * update express route circuit peering operation.
 *
 * @param {string} [peeringParameters.peeringType] The peering type. Possible
 * values include: 'AzurePublicPeering', 'AzurePrivatePeering',
 * 'MicrosoftPeering'
 *
 * @param {string} [peeringParameters.state] The peering state. Possible values
 * include: 'Disabled', 'Enabled'
 *
 * @param {number} [peeringParameters.azureASN] The Azure ASN.
 *
 * @param {number} [peeringParameters.peerASN] The peer ASN.
 *
 * @param {string} [peeringParameters.primaryPeerAddressPrefix] The primary
 * address prefix.
 *
 * @param {string} [peeringParameters.secondaryPeerAddressPrefix] The secondary
 * address prefix.
 *
 * @param {string} [peeringParameters.primaryAzurePort] The primary port.
 *
 * @param {string} [peeringParameters.secondaryAzurePort] The secondary port.
 *
 * @param {string} [peeringParameters.sharedKey] The shared key.
 *
 * @param {number} [peeringParameters.vlanId] The VLAN ID.
 *
 * @param {object} [peeringParameters.microsoftPeeringConfig] The Microsoft
 * peering configuration.
 *
 * @param {object} [peeringParameters.stats] Gets peering stats.
 *
 * @param {number} [peeringParameters.stats.primarybytesIn] Gets BytesIn of the
 * peering.
 *
 * @param {number} [peeringParameters.stats.primarybytesOut] Gets BytesOut of
 * the peering.
 *
 * @param {number} [peeringParameters.stats.secondarybytesIn] Gets BytesIn of
 * the peering.
 *
 * @param {number} [peeringParameters.stats.secondarybytesOut] Gets BytesOut of
 * the peering.
 *
 * @param {string} [peeringParameters.provisioningState] Gets the provisioning
 * state of the public IP resource. Possible values are: 'Updating',
 * 'Deleting', and 'Failed'.
 *
 * @param {string} [peeringParameters.gatewayManagerEtag] The GatewayManager
 * Etag.
 *
 * @param {string} [peeringParameters.lastModifiedBy] Gets whether the provider
 * or the customer last modified the peering.
 *
 * @param {object} [peeringParameters.routeFilter] The reference of the
 * RouteFilter resource.
 *
 * @param {object} [peeringParameters.ipv6PeeringConfig] The IPv6 peering
 * configuration.
 *
 * @param {string}
 * [peeringParameters.ipv6PeeringConfig.primaryPeerAddressPrefix] The primary
 * address prefix.
 *
 * @param {string}
 * [peeringParameters.ipv6PeeringConfig.secondaryPeerAddressPrefix] The
 * secondary address prefix.
 *
 * @param {object} [peeringParameters.ipv6PeeringConfig.microsoftPeeringConfig]
 * The Microsoft peering configuration.
 *
 * @param {array}
 * [peeringParameters.ipv6PeeringConfig.microsoftPeeringConfig.advertisedPublicPrefixes]
 * The reference of AdvertisedPublicPrefixes.
 *
 * @param {array}
 * [peeringParameters.ipv6PeeringConfig.microsoftPeeringConfig.advertisedCommunities]
 * The communities of bgp peering. Spepcified for microsoft peering
 *
 * @param {string}
 * [peeringParameters.ipv6PeeringConfig.microsoftPeeringConfig.advertisedPublicPrefixesState]
 * AdvertisedPublicPrefixState of the Peering resource. Possible values are
 * 'NotConfigured', 'Configuring', 'Configured', and 'ValidationNeeded'.
 * Possible values include: 'NotConfigured', 'Configuring', 'Configured',
 * 'ValidationNeeded'
 *
 * @param {number}
 * [peeringParameters.ipv6PeeringConfig.microsoftPeeringConfig.legacyMode] The
 * legacy mode of the peering.
 *
 * @param {number}
 * [peeringParameters.ipv6PeeringConfig.microsoftPeeringConfig.customerASN] The
 * CustomerASN of the peering.
 *
 * @param {string}
 * [peeringParameters.ipv6PeeringConfig.microsoftPeeringConfig.routingRegistryName]
 * The RoutingRegistryName of the configuration.
 *
 * @param {object} [peeringParameters.ipv6PeeringConfig.routeFilter] The
 * reference of the RouteFilter resource.
 *
 * @param {array} [peeringParameters.ipv6PeeringConfig.routeFilter.rules]
 * Collection of RouteFilterRules contained within a route filter.
 *
 * @param {array} [peeringParameters.ipv6PeeringConfig.routeFilter.peerings] A
 * collection of references to express route circuit peerings.
 *
 * @param {string} [peeringParameters.ipv6PeeringConfig.routeFilter.id]
 * Resource ID.
 *
 * @param {string} [peeringParameters.ipv6PeeringConfig.routeFilter.location]
 * Resource location.
 *
 * @param {object} [peeringParameters.ipv6PeeringConfig.routeFilter.tags]
 * Resource tags.
 *
 * @param {string} [peeringParameters.ipv6PeeringConfig.state] The state of
 * peering. Possible values are: 'Disabled' and 'Enabled'. Possible values
 * include: 'Disabled', 'Enabled'
 *
 * @param {array} [peeringParameters.connections] The list of circuit
 * connections associated with Azure Private Peering for this circuit.
 *
 * @param {string} [peeringParameters.name] Gets name of the resource that is
 * unique within a resource group. This name can be used to access the
 * resource.
 *
 * @param {string} [peeringParameters.id] Resource ID.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link ExpressRouteCircuitPeering} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _beginCreateOrUpdate(resourceGroupName, circuitName, peeringName, peeringParameters, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (circuitName === null || circuitName === undefined || typeof circuitName.valueOf() !== 'string') {
      throw new Error('circuitName cannot be null or undefined and it must be of type string.');
    }
    if (peeringName === null || peeringName === undefined || typeof peeringName.valueOf() !== 'string') {
      throw new Error('peeringName cannot be null or undefined and it must be of type string.');
    }
    if (peeringParameters === null || peeringParameters === undefined) {
      throw new Error('peeringParameters cannot be null or undefined.');
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}/peerings/{peeringName}';
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{circuitName}', encodeURIComponent(circuitName));
  requestUrl = requestUrl.replace('{peeringName}', encodeURIComponent(peeringName));
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PUT';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (peeringParameters !== null && peeringParameters !== undefined) {
      let requestModelMapper = new client.models['ExpressRouteCircuitPeering']().mapper();
      requestModel = client.serialize(requestModelMapper, peeringParameters, 'peeringParameters');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(peeringParameters, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200 && statusCode !== 201) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ExpressRouteCircuitPeering']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }
    // Deserialize Response
    if (statusCode === 201) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ExpressRouteCircuitPeering']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError1 = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError1.request = msRest.stripRequest(httpRequest);
        deserializationError1.response = msRest.stripResponse(response);
        return callback(deserializationError1);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Gets all peerings in a specified express route circuit.
 *
 * @param {string} nextPageLink The NextLink from the previous successful call
 * to List operation.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link ExpressRouteCircuitPeeringListResult} for
 *                      more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _listNext(nextPageLink, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {
      throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let requestUrl = '{nextLink}';
  requestUrl = requestUrl.replace('{nextLink}', nextPageLink);

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ExpressRouteCircuitPeeringListResult']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/** Class representing a ExpressRouteCircuitPeerings. */
class ExpressRouteCircuitPeerings {
  /**
   * Create a ExpressRouteCircuitPeerings.
   * @param {NetworkManagementClient} client Reference to the service client.
   */
  constructor(client) {
    this.client = client;
    this._deleteMethod = _deleteMethod;
    this._get = _get;
    this._createOrUpdate = _createOrUpdate;
    this._list = _list;
    this._beginDeleteMethod = _beginDeleteMethod;
    this._beginCreateOrUpdate = _beginCreateOrUpdate;
    this._listNext = _listNext;
  }

  /**
   * Deletes the specified peering from the specified express route circuit.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} circuitName The name of the express route circuit.
   *
   * @param {string} peeringName The name of the peering.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  deleteMethodWithHttpOperationResponse(resourceGroupName, circuitName, peeringName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._deleteMethod(resourceGroupName, circuitName, peeringName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Deletes the specified peering from the specified express route circuit.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} circuitName The name of the express route circuit.
   *
   * @param {string} peeringName The name of the peering.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteMethod(resourceGroupName, circuitName, peeringName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._deleteMethod(resourceGroupName, circuitName, peeringName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._deleteMethod(resourceGroupName, circuitName, peeringName, options, optionalCallback);
    }
  }

  /**
   * Gets the specified authorization from the specified express route circuit.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} circuitName The name of the express route circuit.
   *
   * @param {string} peeringName The name of the peering.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ExpressRouteCircuitPeering>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getWithHttpOperationResponse(resourceGroupName, circuitName, peeringName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._get(resourceGroupName, circuitName, peeringName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Gets the specified authorization from the specified express route circuit.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} circuitName The name of the express route circuit.
   *
   * @param {string} peeringName The name of the peering.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {ExpressRouteCircuitPeering} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ExpressRouteCircuitPeering} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  get(resourceGroupName, circuitName, peeringName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._get(resourceGroupName, circuitName, peeringName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._get(resourceGroupName, circuitName, peeringName, options, optionalCallback);
    }
  }

  /**
   * Creates or updates a peering in the specified express route circuits.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} circuitName The name of the express route circuit.
   *
   * @param {string} peeringName The name of the peering.
   *
   * @param {object} peeringParameters Parameters supplied to the create or
   * update express route circuit peering operation.
   *
   * @param {string} [peeringParameters.peeringType] The peering type. Possible
   * values include: 'AzurePublicPeering', 'AzurePrivatePeering',
   * 'MicrosoftPeering'
   *
   * @param {string} [peeringParameters.state] The peering state. Possible values
   * include: 'Disabled', 'Enabled'
   *
   * @param {number} [peeringParameters.azureASN] The Azure ASN.
   *
   * @param {number} [peeringParameters.peerASN] The peer ASN.
   *
   * @param {string} [peeringParameters.primaryPeerAddressPrefix] The primary
   * address prefix.
   *
   * @param {string} [peeringParameters.secondaryPeerAddressPrefix] The secondary
   * address prefix.
   *
   * @param {string} [peeringParameters.primaryAzurePort] The primary port.
   *
   * @param {string} [peeringParameters.secondaryAzurePort] The secondary port.
   *
   * @param {string} [peeringParameters.sharedKey] The shared key.
   *
   * @param {number} [peeringParameters.vlanId] The VLAN ID.
   *
   * @param {object} [peeringParameters.microsoftPeeringConfig] The Microsoft
   * peering configuration.
   *
   * @param {object} [peeringParameters.stats] Gets peering stats.
   *
   * @param {number} [peeringParameters.stats.primarybytesIn] Gets BytesIn of the
   * peering.
   *
   * @param {number} [peeringParameters.stats.primarybytesOut] Gets BytesOut of
   * the peering.
   *
   * @param {number} [peeringParameters.stats.secondarybytesIn] Gets BytesIn of
   * the peering.
   *
   * @param {number} [peeringParameters.stats.secondarybytesOut] Gets BytesOut of
   * the peering.
   *
   * @param {string} [peeringParameters.provisioningState] Gets the provisioning
   * state of the public IP resource. Possible values are: 'Updating',
   * 'Deleting', and 'Failed'.
   *
   * @param {string} [peeringParameters.gatewayManagerEtag] The GatewayManager
   * Etag.
   *
   * @param {string} [peeringParameters.lastModifiedBy] Gets whether the provider
   * or the customer last modified the peering.
   *
   * @param {object} [peeringParameters.routeFilter] The reference of the
   * RouteFilter resource.
   *
   * @param {object} [peeringParameters.ipv6PeeringConfig] The IPv6 peering
   * configuration.
   *
   * @param {string}
   * [peeringParameters.ipv6PeeringConfig.primaryPeerAddressPrefix] The primary
   * address prefix.
   *
   * @param {string}
   * [peeringParameters.ipv6PeeringConfig.secondaryPeerAddressPrefix] The
   * secondary address prefix.
   *
   * @param {object} [peeringParameters.ipv6PeeringConfig.microsoftPeeringConfig]
   * The Microsoft peering configuration.
   *
   * @param {array}
   * [peeringParameters.ipv6PeeringConfig.microsoftPeeringConfig.advertisedPublicPrefixes]
   * The reference of AdvertisedPublicPrefixes.
   *
   * @param {array}
   * [peeringParameters.ipv6PeeringConfig.microsoftPeeringConfig.advertisedCommunities]
   * The communities of bgp peering. Spepcified for microsoft peering
   *
   * @param {string}
   * [peeringParameters.ipv6PeeringConfig.microsoftPeeringConfig.advertisedPublicPrefixesState]
   * AdvertisedPublicPrefixState of the Peering resource. Possible values are
   * 'NotConfigured', 'Configuring', 'Configured', and 'ValidationNeeded'.
   * Possible values include: 'NotConfigured', 'Configuring', 'Configured',
   * 'ValidationNeeded'
   *
   * @param {number}
   * [peeringParameters.ipv6PeeringConfig.microsoftPeeringConfig.legacyMode] The
   * legacy mode of the peering.
   *
   * @param {number}
   * [peeringParameters.ipv6PeeringConfig.microsoftPeeringConfig.customerASN] The
   * CustomerASN of the peering.
   *
   * @param {string}
   * [peeringParameters.ipv6PeeringConfig.microsoftPeeringConfig.routingRegistryName]
   * The RoutingRegistryName of the configuration.
   *
   * @param {object} [peeringParameters.ipv6PeeringConfig.routeFilter] The
   * reference of the RouteFilter resource.
   *
   * @param {array} [peeringParameters.ipv6PeeringConfig.routeFilter.rules]
   * Collection of RouteFilterRules contained within a route filter.
   *
   * @param {array} [peeringParameters.ipv6PeeringConfig.routeFilter.peerings] A
   * collection of references to express route circuit peerings.
   *
   * @param {string} [peeringParameters.ipv6PeeringConfig.routeFilter.id]
   * Resource ID.
   *
   * @param {string} [peeringParameters.ipv6PeeringConfig.routeFilter.location]
   * Resource location.
   *
   * @param {object} [peeringParameters.ipv6PeeringConfig.routeFilter.tags]
   * Resource tags.
   *
   * @param {string} [peeringParameters.ipv6PeeringConfig.state] The state of
   * peering. Possible values are: 'Disabled' and 'Enabled'. Possible values
   * include: 'Disabled', 'Enabled'
   *
   * @param {array} [peeringParameters.connections] The list of circuit
   * connections associated with Azure Private Peering for this circuit.
   *
   * @param {string} [peeringParameters.name] Gets name of the resource that is
   * unique within a resource group. This name can be used to access the
   * resource.
   *
   * @param {string} [peeringParameters.id] Resource ID.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ExpressRouteCircuitPeering>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  createOrUpdateWithHttpOperationResponse(resourceGroupName, circuitName, peeringName, peeringParameters, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._createOrUpdate(resourceGroupName, circuitName, peeringName, peeringParameters, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Creates or updates a peering in the specified express route circuits.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} circuitName The name of the express route circuit.
   *
   * @param {string} peeringName The name of the peering.
   *
   * @param {object} peeringParameters Parameters supplied to the create or
   * update express route circuit peering operation.
   *
   * @param {string} [peeringParameters.peeringType] The peering type. Possible
   * values include: 'AzurePublicPeering', 'AzurePrivatePeering',
   * 'MicrosoftPeering'
   *
   * @param {string} [peeringParameters.state] The peering state. Possible values
   * include: 'Disabled', 'Enabled'
   *
   * @param {number} [peeringParameters.azureASN] The Azure ASN.
   *
   * @param {number} [peeringParameters.peerASN] The peer ASN.
   *
   * @param {string} [peeringParameters.primaryPeerAddressPrefix] The primary
   * address prefix.
   *
   * @param {string} [peeringParameters.secondaryPeerAddressPrefix] The secondary
   * address prefix.
   *
   * @param {string} [peeringParameters.primaryAzurePort] The primary port.
   *
   * @param {string} [peeringParameters.secondaryAzurePort] The secondary port.
   *
   * @param {string} [peeringParameters.sharedKey] The shared key.
   *
   * @param {number} [peeringParameters.vlanId] The VLAN ID.
   *
   * @param {object} [peeringParameters.microsoftPeeringConfig] The Microsoft
   * peering configuration.
   *
   * @param {object} [peeringParameters.stats] Gets peering stats.
   *
   * @param {number} [peeringParameters.stats.primarybytesIn] Gets BytesIn of the
   * peering.
   *
   * @param {number} [peeringParameters.stats.primarybytesOut] Gets BytesOut of
   * the peering.
   *
   * @param {number} [peeringParameters.stats.secondarybytesIn] Gets BytesIn of
   * the peering.
   *
   * @param {number} [peeringParameters.stats.secondarybytesOut] Gets BytesOut of
   * the peering.
   *
   * @param {string} [peeringParameters.provisioningState] Gets the provisioning
   * state of the public IP resource. Possible values are: 'Updating',
   * 'Deleting', and 'Failed'.
   *
   * @param {string} [peeringParameters.gatewayManagerEtag] The GatewayManager
   * Etag.
   *
   * @param {string} [peeringParameters.lastModifiedBy] Gets whether the provider
   * or the customer last modified the peering.
   *
   * @param {object} [peeringParameters.routeFilter] The reference of the
   * RouteFilter resource.
   *
   * @param {object} [peeringParameters.ipv6PeeringConfig] The IPv6 peering
   * configuration.
   *
   * @param {string}
   * [peeringParameters.ipv6PeeringConfig.primaryPeerAddressPrefix] The primary
   * address prefix.
   *
   * @param {string}
   * [peeringParameters.ipv6PeeringConfig.secondaryPeerAddressPrefix] The
   * secondary address prefix.
   *
   * @param {object} [peeringParameters.ipv6PeeringConfig.microsoftPeeringConfig]
   * The Microsoft peering configuration.
   *
   * @param {array}
   * [peeringParameters.ipv6PeeringConfig.microsoftPeeringConfig.advertisedPublicPrefixes]
   * The reference of AdvertisedPublicPrefixes.
   *
   * @param {array}
   * [peeringParameters.ipv6PeeringConfig.microsoftPeeringConfig.advertisedCommunities]
   * The communities of bgp peering. Spepcified for microsoft peering
   *
   * @param {string}
   * [peeringParameters.ipv6PeeringConfig.microsoftPeeringConfig.advertisedPublicPrefixesState]
   * AdvertisedPublicPrefixState of the Peering resource. Possible values are
   * 'NotConfigured', 'Configuring', 'Configured', and 'ValidationNeeded'.
   * Possible values include: 'NotConfigured', 'Configuring', 'Configured',
   * 'ValidationNeeded'
   *
   * @param {number}
   * [peeringParameters.ipv6PeeringConfig.microsoftPeeringConfig.legacyMode] The
   * legacy mode of the peering.
   *
   * @param {number}
   * [peeringParameters.ipv6PeeringConfig.microsoftPeeringConfig.customerASN] The
   * CustomerASN of the peering.
   *
   * @param {string}
   * [peeringParameters.ipv6PeeringConfig.microsoftPeeringConfig.routingRegistryName]
   * The RoutingRegistryName of the configuration.
   *
   * @param {object} [peeringParameters.ipv6PeeringConfig.routeFilter] The
   * reference of the RouteFilter resource.
   *
   * @param {array} [peeringParameters.ipv6PeeringConfig.routeFilter.rules]
   * Collection of RouteFilterRules contained within a route filter.
   *
   * @param {array} [peeringParameters.ipv6PeeringConfig.routeFilter.peerings] A
   * collection of references to express route circuit peerings.
   *
   * @param {string} [peeringParameters.ipv6PeeringConfig.routeFilter.id]
   * Resource ID.
   *
   * @param {string} [peeringParameters.ipv6PeeringConfig.routeFilter.location]
   * Resource location.
   *
   * @param {object} [peeringParameters.ipv6PeeringConfig.routeFilter.tags]
   * Resource tags.
   *
   * @param {string} [peeringParameters.ipv6PeeringConfig.state] The state of
   * peering. Possible values are: 'Disabled' and 'Enabled'. Possible values
   * include: 'Disabled', 'Enabled'
   *
   * @param {array} [peeringParameters.connections] The list of circuit
   * connections associated with Azure Private Peering for this circuit.
   *
   * @param {string} [peeringParameters.name] Gets name of the resource that is
   * unique within a resource group. This name can be used to access the
   * resource.
   *
   * @param {string} [peeringParameters.id] Resource ID.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {ExpressRouteCircuitPeering} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ExpressRouteCircuitPeering} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  createOrUpdate(resourceGroupName, circuitName, peeringName, peeringParameters, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._createOrUpdate(resourceGroupName, circuitName, peeringName, peeringParameters, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._createOrUpdate(resourceGroupName, circuitName, peeringName, peeringParameters, options, optionalCallback);
    }
  }

  /**
   * Gets all peerings in a specified express route circuit.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} circuitName The name of the express route circuit.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ExpressRouteCircuitPeeringListResult>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  listWithHttpOperationResponse(resourceGroupName, circuitName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._list(resourceGroupName, circuitName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Gets all peerings in a specified express route circuit.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} circuitName The name of the express route circuit.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {ExpressRouteCircuitPeeringListResult} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ExpressRouteCircuitPeeringListResult} for
   *                      more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  list(resourceGroupName, circuitName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._list(resourceGroupName, circuitName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._list(resourceGroupName, circuitName, options, optionalCallback);
    }
  }

  /**
   * Deletes the specified peering from the specified express route circuit.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} circuitName The name of the express route circuit.
   *
   * @param {string} peeringName The name of the peering.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  beginDeleteMethodWithHttpOperationResponse(resourceGroupName, circuitName, peeringName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._beginDeleteMethod(resourceGroupName, circuitName, peeringName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Deletes the specified peering from the specified express route circuit.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} circuitName The name of the express route circuit.
   *
   * @param {string} peeringName The name of the peering.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  beginDeleteMethod(resourceGroupName, circuitName, peeringName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._beginDeleteMethod(resourceGroupName, circuitName, peeringName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._beginDeleteMethod(resourceGroupName, circuitName, peeringName, options, optionalCallback);
    }
  }

  /**
   * Creates or updates a peering in the specified express route circuits.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} circuitName The name of the express route circuit.
   *
   * @param {string} peeringName The name of the peering.
   *
   * @param {object} peeringParameters Parameters supplied to the create or
   * update express route circuit peering operation.
   *
   * @param {string} [peeringParameters.peeringType] The peering type. Possible
   * values include: 'AzurePublicPeering', 'AzurePrivatePeering',
   * 'MicrosoftPeering'
   *
   * @param {string} [peeringParameters.state] The peering state. Possible values
   * include: 'Disabled', 'Enabled'
   *
   * @param {number} [peeringParameters.azureASN] The Azure ASN.
   *
   * @param {number} [peeringParameters.peerASN] The peer ASN.
   *
   * @param {string} [peeringParameters.primaryPeerAddressPrefix] The primary
   * address prefix.
   *
   * @param {string} [peeringParameters.secondaryPeerAddressPrefix] The secondary
   * address prefix.
   *
   * @param {string} [peeringParameters.primaryAzurePort] The primary port.
   *
   * @param {string} [peeringParameters.secondaryAzurePort] The secondary port.
   *
   * @param {string} [peeringParameters.sharedKey] The shared key.
   *
   * @param {number} [peeringParameters.vlanId] The VLAN ID.
   *
   * @param {object} [peeringParameters.microsoftPeeringConfig] The Microsoft
   * peering configuration.
   *
   * @param {object} [peeringParameters.stats] Gets peering stats.
   *
   * @param {number} [peeringParameters.stats.primarybytesIn] Gets BytesIn of the
   * peering.
   *
   * @param {number} [peeringParameters.stats.primarybytesOut] Gets BytesOut of
   * the peering.
   *
   * @param {number} [peeringParameters.stats.secondarybytesIn] Gets BytesIn of
   * the peering.
   *
   * @param {number} [peeringParameters.stats.secondarybytesOut] Gets BytesOut of
   * the peering.
   *
   * @param {string} [peeringParameters.provisioningState] Gets the provisioning
   * state of the public IP resource. Possible values are: 'Updating',
   * 'Deleting', and 'Failed'.
   *
   * @param {string} [peeringParameters.gatewayManagerEtag] The GatewayManager
   * Etag.
   *
   * @param {string} [peeringParameters.lastModifiedBy] Gets whether the provider
   * or the customer last modified the peering.
   *
   * @param {object} [peeringParameters.routeFilter] The reference of the
   * RouteFilter resource.
   *
   * @param {object} [peeringParameters.ipv6PeeringConfig] The IPv6 peering
   * configuration.
   *
   * @param {string}
   * [peeringParameters.ipv6PeeringConfig.primaryPeerAddressPrefix] The primary
   * address prefix.
   *
   * @param {string}
   * [peeringParameters.ipv6PeeringConfig.secondaryPeerAddressPrefix] The
   * secondary address prefix.
   *
   * @param {object} [peeringParameters.ipv6PeeringConfig.microsoftPeeringConfig]
   * The Microsoft peering configuration.
   *
   * @param {array}
   * [peeringParameters.ipv6PeeringConfig.microsoftPeeringConfig.advertisedPublicPrefixes]
   * The reference of AdvertisedPublicPrefixes.
   *
   * @param {array}
   * [peeringParameters.ipv6PeeringConfig.microsoftPeeringConfig.advertisedCommunities]
   * The communities of bgp peering. Spepcified for microsoft peering
   *
   * @param {string}
   * [peeringParameters.ipv6PeeringConfig.microsoftPeeringConfig.advertisedPublicPrefixesState]
   * AdvertisedPublicPrefixState of the Peering resource. Possible values are
   * 'NotConfigured', 'Configuring', 'Configured', and 'ValidationNeeded'.
   * Possible values include: 'NotConfigured', 'Configuring', 'Configured',
   * 'ValidationNeeded'
   *
   * @param {number}
   * [peeringParameters.ipv6PeeringConfig.microsoftPeeringConfig.legacyMode] The
   * legacy mode of the peering.
   *
   * @param {number}
   * [peeringParameters.ipv6PeeringConfig.microsoftPeeringConfig.customerASN] The
   * CustomerASN of the peering.
   *
   * @param {string}
   * [peeringParameters.ipv6PeeringConfig.microsoftPeeringConfig.routingRegistryName]
   * The RoutingRegistryName of the configuration.
   *
   * @param {object} [peeringParameters.ipv6PeeringConfig.routeFilter] The
   * reference of the RouteFilter resource.
   *
   * @param {array} [peeringParameters.ipv6PeeringConfig.routeFilter.rules]
   * Collection of RouteFilterRules contained within a route filter.
   *
   * @param {array} [peeringParameters.ipv6PeeringConfig.routeFilter.peerings] A
   * collection of references to express route circuit peerings.
   *
   * @param {string} [peeringParameters.ipv6PeeringConfig.routeFilter.id]
   * Resource ID.
   *
   * @param {string} [peeringParameters.ipv6PeeringConfig.routeFilter.location]
   * Resource location.
   *
   * @param {object} [peeringParameters.ipv6PeeringConfig.routeFilter.tags]
   * Resource tags.
   *
   * @param {string} [peeringParameters.ipv6PeeringConfig.state] The state of
   * peering. Possible values are: 'Disabled' and 'Enabled'. Possible values
   * include: 'Disabled', 'Enabled'
   *
   * @param {array} [peeringParameters.connections] The list of circuit
   * connections associated with Azure Private Peering for this circuit.
   *
   * @param {string} [peeringParameters.name] Gets name of the resource that is
   * unique within a resource group. This name can be used to access the
   * resource.
   *
   * @param {string} [peeringParameters.id] Resource ID.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ExpressRouteCircuitPeering>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName, circuitName, peeringName, peeringParameters, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._beginCreateOrUpdate(resourceGroupName, circuitName, peeringName, peeringParameters, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Creates or updates a peering in the specified express route circuits.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} circuitName The name of the express route circuit.
   *
   * @param {string} peeringName The name of the peering.
   *
   * @param {object} peeringParameters Parameters supplied to the create or
   * update express route circuit peering operation.
   *
   * @param {string} [peeringParameters.peeringType] The peering type. Possible
   * values include: 'AzurePublicPeering', 'AzurePrivatePeering',
   * 'MicrosoftPeering'
   *
   * @param {string} [peeringParameters.state] The peering state. Possible values
   * include: 'Disabled', 'Enabled'
   *
   * @param {number} [peeringParameters.azureASN] The Azure ASN.
   *
   * @param {number} [peeringParameters.peerASN] The peer ASN.
   *
   * @param {string} [peeringParameters.primaryPeerAddressPrefix] The primary
   * address prefix.
   *
   * @param {string} [peeringParameters.secondaryPeerAddressPrefix] The secondary
   * address prefix.
   *
   * @param {string} [peeringParameters.primaryAzurePort] The primary port.
   *
   * @param {string} [peeringParameters.secondaryAzurePort] The secondary port.
   *
   * @param {string} [peeringParameters.sharedKey] The shared key.
   *
   * @param {number} [peeringParameters.vlanId] The VLAN ID.
   *
   * @param {object} [peeringParameters.microsoftPeeringConfig] The Microsoft
   * peering configuration.
   *
   * @param {object} [peeringParameters.stats] Gets peering stats.
   *
   * @param {number} [peeringParameters.stats.primarybytesIn] Gets BytesIn of the
   * peering.
   *
   * @param {number} [peeringParameters.stats.primarybytesOut] Gets BytesOut of
   * the peering.
   *
   * @param {number} [peeringParameters.stats.secondarybytesIn] Gets BytesIn of
   * the peering.
   *
   * @param {number} [peeringParameters.stats.secondarybytesOut] Gets BytesOut of
   * the peering.
   *
   * @param {string} [peeringParameters.provisioningState] Gets the provisioning
   * state of the public IP resource. Possible values are: 'Updating',
   * 'Deleting', and 'Failed'.
   *
   * @param {string} [peeringParameters.gatewayManagerEtag] The GatewayManager
   * Etag.
   *
   * @param {string} [peeringParameters.lastModifiedBy] Gets whether the provider
   * or the customer last modified the peering.
   *
   * @param {object} [peeringParameters.routeFilter] The reference of the
   * RouteFilter resource.
   *
   * @param {object} [peeringParameters.ipv6PeeringConfig] The IPv6 peering
   * configuration.
   *
   * @param {string}
   * [peeringParameters.ipv6PeeringConfig.primaryPeerAddressPrefix] The primary
   * address prefix.
   *
   * @param {string}
   * [peeringParameters.ipv6PeeringConfig.secondaryPeerAddressPrefix] The
   * secondary address prefix.
   *
   * @param {object} [peeringParameters.ipv6PeeringConfig.microsoftPeeringConfig]
   * The Microsoft peering configuration.
   *
   * @param {array}
   * [peeringParameters.ipv6PeeringConfig.microsoftPeeringConfig.advertisedPublicPrefixes]
   * The reference of AdvertisedPublicPrefixes.
   *
   * @param {array}
   * [peeringParameters.ipv6PeeringConfig.microsoftPeeringConfig.advertisedCommunities]
   * The communities of bgp peering. Spepcified for microsoft peering
   *
   * @param {string}
   * [peeringParameters.ipv6PeeringConfig.microsoftPeeringConfig.advertisedPublicPrefixesState]
   * AdvertisedPublicPrefixState of the Peering resource. Possible values are
   * 'NotConfigured', 'Configuring', 'Configured', and 'ValidationNeeded'.
   * Possible values include: 'NotConfigured', 'Configuring', 'Configured',
   * 'ValidationNeeded'
   *
   * @param {number}
   * [peeringParameters.ipv6PeeringConfig.microsoftPeeringConfig.legacyMode] The
   * legacy mode of the peering.
   *
   * @param {number}
   * [peeringParameters.ipv6PeeringConfig.microsoftPeeringConfig.customerASN] The
   * CustomerASN of the peering.
   *
   * @param {string}
   * [peeringParameters.ipv6PeeringConfig.microsoftPeeringConfig.routingRegistryName]
   * The RoutingRegistryName of the configuration.
   *
   * @param {object} [peeringParameters.ipv6PeeringConfig.routeFilter] The
   * reference of the RouteFilter resource.
   *
   * @param {array} [peeringParameters.ipv6PeeringConfig.routeFilter.rules]
   * Collection of RouteFilterRules contained within a route filter.
   *
   * @param {array} [peeringParameters.ipv6PeeringConfig.routeFilter.peerings] A
   * collection of references to express route circuit peerings.
   *
   * @param {string} [peeringParameters.ipv6PeeringConfig.routeFilter.id]
   * Resource ID.
   *
   * @param {string} [peeringParameters.ipv6PeeringConfig.routeFilter.location]
   * Resource location.
   *
   * @param {object} [peeringParameters.ipv6PeeringConfig.routeFilter.tags]
   * Resource tags.
   *
   * @param {string} [peeringParameters.ipv6PeeringConfig.state] The state of
   * peering. Possible values are: 'Disabled' and 'Enabled'. Possible values
   * include: 'Disabled', 'Enabled'
   *
   * @param {array} [peeringParameters.connections] The list of circuit
   * connections associated with Azure Private Peering for this circuit.
   *
   * @param {string} [peeringParameters.name] Gets name of the resource that is
   * unique within a resource group. This name can be used to access the
   * resource.
   *
   * @param {string} [peeringParameters.id] Resource ID.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {ExpressRouteCircuitPeering} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ExpressRouteCircuitPeering} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  beginCreateOrUpdate(resourceGroupName, circuitName, peeringName, peeringParameters, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._beginCreateOrUpdate(resourceGroupName, circuitName, peeringName, peeringParameters, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._beginCreateOrUpdate(resourceGroupName, circuitName, peeringName, peeringParameters, options, optionalCallback);
    }
  }

  /**
   * Gets all peerings in a specified express route circuit.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ExpressRouteCircuitPeeringListResult>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  listNextWithHttpOperationResponse(nextPageLink, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._listNext(nextPageLink, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Gets all peerings in a specified express route circuit.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {ExpressRouteCircuitPeeringListResult} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ExpressRouteCircuitPeeringListResult} for
   *                      more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  listNext(nextPageLink, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._listNext(nextPageLink, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._listNext(nextPageLink, options, optionalCallback);
    }
  }

}

module.exports = ExpressRouteCircuitPeerings;
