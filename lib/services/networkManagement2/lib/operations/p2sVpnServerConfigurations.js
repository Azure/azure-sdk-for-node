/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const msRest = require('ms-rest');
const msRestAzure = require('ms-rest-azure');
const WebResource = msRest.WebResource;

/**
 * Retrieves the details of a P2SVpnServerConfiguration.
 *
 * @param {string} resourceGroupName The resource group name of the
 * P2SVpnServerConfiguration.
 *
 * @param {string} virtualWanName The name of the VirtualWan.
 *
 * @param {string} p2SVpnServerConfigurationName The name of the
 * P2SVpnServerConfiguration.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link P2SVpnServerConfiguration} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _get(resourceGroupName, virtualWanName, p2SVpnServerConfigurationName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let apiVersion = '2018-10-01';
  // Validate
  try {
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (virtualWanName === null || virtualWanName === undefined || typeof virtualWanName.valueOf() !== 'string') {
      throw new Error('virtualWanName cannot be null or undefined and it must be of type string.');
    }
    if (p2SVpnServerConfigurationName === null || p2SVpnServerConfigurationName === undefined || typeof p2SVpnServerConfigurationName.valueOf() !== 'string') {
      throw new Error('p2SVpnServerConfigurationName cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualWans/{virtualWanName}/p2sVpnServerConfigurations/{p2SVpnServerConfigurationName}';
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{virtualWanName}', encodeURIComponent(virtualWanName));
  requestUrl = requestUrl.replace('{p2SVpnServerConfigurationName}', encodeURIComponent(p2SVpnServerConfigurationName));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorModel']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['P2SVpnServerConfiguration']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}


/**
 * Creates a P2SVpnServerConfiguration to associate with a VirtualWan if it
 * doesn't exist else updates the existing P2SVpnServerConfiguration.
 *
 * @param {string} resourceGroupName The resource group name of the VirtualWan.
 *
 * @param {string} virtualWanName The name of the VirtualWan.
 *
 * @param {string} p2SVpnServerConfigurationName The name of the
 * P2SVpnServerConfiguration.
 *
 * @param {object} p2SVpnServerConfigurationParameters Parameters supplied to
 * create or Update a P2SVpnServerConfiguration.
 *
 * @param {string}
 * [p2SVpnServerConfigurationParameters.p2SVpnServerConfigurationPropertiesName]
 * The name of the P2SVpnServerConfiguration that is unique within a VirtualWan
 * in a resource group. This name can be used to access the resource along with
 * Paren VirtualWan resource name.
 *
 * @param {array} [p2SVpnServerConfigurationParameters.vpnProtocols]
 * vpnProtocols for the P2SVpnServerConfiguration.
 *
 * @param {array}
 * [p2SVpnServerConfigurationParameters.p2SVpnServerConfigVpnClientRootCertificates]
 * VPN client root certificate of P2SVpnServerConfiguration.
 *
 * @param {array}
 * [p2SVpnServerConfigurationParameters.p2SVpnServerConfigVpnClientRevokedCertificates]
 * VPN client revoked certificate of P2SVpnServerConfiguration.
 *
 * @param {array}
 * [p2SVpnServerConfigurationParameters.p2SVpnServerConfigRadiusServerRootCertificates]
 * Radius Server root certificate of P2SVpnServerConfiguration.
 *
 * @param {array}
 * [p2SVpnServerConfigurationParameters.p2SVpnServerConfigRadiusClientRootCertificates]
 * Radius client root certificate of P2SVpnServerConfiguration.
 *
 * @param {array} [p2SVpnServerConfigurationParameters.vpnClientIpsecPolicies]
 * VpnClientIpsecPolicies for P2SVpnServerConfiguration.
 *
 * @param {string} [p2SVpnServerConfigurationParameters.radiusServerAddress]
 * The radius server address property of the P2SVpnServerConfiguration resource
 * for point to site client connection.
 *
 * @param {string} [p2SVpnServerConfigurationParameters.radiusServerSecret] The
 * radius secret property of the P2SVpnServerConfiguration resource for for
 * point to site client connection.
 *
 * @param {string}
 * [p2SVpnServerConfigurationParameters.p2SVpnServerConfigurationPropertiesEtag]
 * A unique read-only string that changes whenever the resource is updated.
 *
 * @param {string} [p2SVpnServerConfigurationParameters.name] The name of the
 * resource that is unique within a resource group. This name can be used to
 * access the resource.
 *
 * @param {string} [p2SVpnServerConfigurationParameters.id] Resource ID.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link P2SVpnServerConfiguration} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _createOrUpdate(resourceGroupName, virtualWanName, p2SVpnServerConfigurationName, p2SVpnServerConfigurationParameters, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }

  if (!callback) {
    throw new Error('callback cannot be null.');
  }

  // Send request
  this.beginCreateOrUpdate(resourceGroupName, virtualWanName, p2SVpnServerConfigurationName, p2SVpnServerConfigurationParameters, options, (err, parsedResult, httpRequest, response) => {
    if (err) return callback(err);

    let initialResult = new msRest.HttpOperationResponse();
    initialResult.request = httpRequest;
    initialResult.response = response;
    initialResult.body = response.body;
    client.getLongRunningOperationResult(initialResult, options, (err, pollingResult) => {
      if (err) return callback(err);

      // Create Result
      let result = null;

      httpRequest = pollingResult.request;
      response = pollingResult.response;
      let responseBody = pollingResult.body;
      if (responseBody === '') responseBody = null;

      // Deserialize Response
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['P2SVpnServerConfiguration']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }

      return callback(null, result, httpRequest, response);
    });
  });
}


/**
 * Deletes a P2SVpnServerConfiguration.
 *
 * @param {string} resourceGroupName The resource group name of the
 * P2SVpnServerConfiguration.
 *
 * @param {string} virtualWanName The name of the VirtualWan.
 *
 * @param {string} p2SVpnServerConfigurationName The name of the
 * P2SVpnServerConfiguration.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _deleteMethod(resourceGroupName, virtualWanName, p2SVpnServerConfigurationName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }

  if (!callback) {
    throw new Error('callback cannot be null.');
  }

  // Send request
  this.beginDeleteMethod(resourceGroupName, virtualWanName, p2SVpnServerConfigurationName, options, (err, parsedResult, httpRequest, response) => {
    if (err) return callback(err);

    let initialResult = new msRest.HttpOperationResponse();
    initialResult.request = httpRequest;
    initialResult.response = response;
    initialResult.body = response.body;
    client.getLongRunningOperationResult(initialResult, options, (err, pollingResult) => {
      if (err) return callback(err);

      // Create Result
      let result = null;

      httpRequest = pollingResult.request;
      response = pollingResult.response;
      let responseBody = pollingResult.body;
      if (responseBody === '') responseBody = null;

      // Deserialize Response

      return callback(null, result, httpRequest, response);
    });
  });
}

/**
 * Retrieves all P2SVpnServerConfigurations for a particular VirtualWan.
 *
 * @param {string} resourceGroupName The resource group name of the VirtualWan.
 *
 * @param {string} virtualWanName The name of the VirtualWan.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link ListP2SVpnServerConfigurationsResult} for
 *                      more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _listByVirtualWan(resourceGroupName, virtualWanName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let apiVersion = '2018-10-01';
  // Validate
  try {
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (virtualWanName === null || virtualWanName === undefined || typeof virtualWanName.valueOf() !== 'string') {
      throw new Error('virtualWanName cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualWans/{virtualWanName}/p2sVpnServerConfigurations';
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{virtualWanName}', encodeURIComponent(virtualWanName));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorModel']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ListP2SVpnServerConfigurationsResult']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Creates a P2SVpnServerConfiguration to associate with a VirtualWan if it
 * doesn't exist else updates the existing P2SVpnServerConfiguration.
 *
 * @param {string} resourceGroupName The resource group name of the VirtualWan.
 *
 * @param {string} virtualWanName The name of the VirtualWan.
 *
 * @param {string} p2SVpnServerConfigurationName The name of the
 * P2SVpnServerConfiguration.
 *
 * @param {object} p2SVpnServerConfigurationParameters Parameters supplied to
 * create or Update a P2SVpnServerConfiguration.
 *
 * @param {string}
 * [p2SVpnServerConfigurationParameters.p2SVpnServerConfigurationPropertiesName]
 * The name of the P2SVpnServerConfiguration that is unique within a VirtualWan
 * in a resource group. This name can be used to access the resource along with
 * Paren VirtualWan resource name.
 *
 * @param {array} [p2SVpnServerConfigurationParameters.vpnProtocols]
 * vpnProtocols for the P2SVpnServerConfiguration.
 *
 * @param {array}
 * [p2SVpnServerConfigurationParameters.p2SVpnServerConfigVpnClientRootCertificates]
 * VPN client root certificate of P2SVpnServerConfiguration.
 *
 * @param {array}
 * [p2SVpnServerConfigurationParameters.p2SVpnServerConfigVpnClientRevokedCertificates]
 * VPN client revoked certificate of P2SVpnServerConfiguration.
 *
 * @param {array}
 * [p2SVpnServerConfigurationParameters.p2SVpnServerConfigRadiusServerRootCertificates]
 * Radius Server root certificate of P2SVpnServerConfiguration.
 *
 * @param {array}
 * [p2SVpnServerConfigurationParameters.p2SVpnServerConfigRadiusClientRootCertificates]
 * Radius client root certificate of P2SVpnServerConfiguration.
 *
 * @param {array} [p2SVpnServerConfigurationParameters.vpnClientIpsecPolicies]
 * VpnClientIpsecPolicies for P2SVpnServerConfiguration.
 *
 * @param {string} [p2SVpnServerConfigurationParameters.radiusServerAddress]
 * The radius server address property of the P2SVpnServerConfiguration resource
 * for point to site client connection.
 *
 * @param {string} [p2SVpnServerConfigurationParameters.radiusServerSecret] The
 * radius secret property of the P2SVpnServerConfiguration resource for for
 * point to site client connection.
 *
 * @param {string}
 * [p2SVpnServerConfigurationParameters.p2SVpnServerConfigurationPropertiesEtag]
 * A unique read-only string that changes whenever the resource is updated.
 *
 * @param {string} [p2SVpnServerConfigurationParameters.name] The name of the
 * resource that is unique within a resource group. This name can be used to
 * access the resource.
 *
 * @param {string} [p2SVpnServerConfigurationParameters.id] Resource ID.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link P2SVpnServerConfiguration} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _beginCreateOrUpdate(resourceGroupName, virtualWanName, p2SVpnServerConfigurationName, p2SVpnServerConfigurationParameters, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let apiVersion = '2018-10-01';
  // Validate
  try {
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (virtualWanName === null || virtualWanName === undefined || typeof virtualWanName.valueOf() !== 'string') {
      throw new Error('virtualWanName cannot be null or undefined and it must be of type string.');
    }
    if (p2SVpnServerConfigurationName === null || p2SVpnServerConfigurationName === undefined || typeof p2SVpnServerConfigurationName.valueOf() !== 'string') {
      throw new Error('p2SVpnServerConfigurationName cannot be null or undefined and it must be of type string.');
    }
    if (p2SVpnServerConfigurationParameters === null || p2SVpnServerConfigurationParameters === undefined) {
      throw new Error('p2SVpnServerConfigurationParameters cannot be null or undefined.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualWans/{virtualWanName}/p2sVpnServerConfigurations/{p2SVpnServerConfigurationName}';
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{virtualWanName}', encodeURIComponent(virtualWanName));
  requestUrl = requestUrl.replace('{p2SVpnServerConfigurationName}', encodeURIComponent(p2SVpnServerConfigurationName));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PUT';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (p2SVpnServerConfigurationParameters !== null && p2SVpnServerConfigurationParameters !== undefined) {
      let requestModelMapper = new client.models['P2SVpnServerConfiguration']().mapper();
      requestModel = client.serialize(requestModelMapper, p2SVpnServerConfigurationParameters, 'p2SVpnServerConfigurationParameters');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(p2SVpnServerConfigurationParameters, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200 && statusCode !== 201) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorModel']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['P2SVpnServerConfiguration']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }
    // Deserialize Response
    if (statusCode === 201) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['P2SVpnServerConfiguration']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError1 = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError1.request = msRest.stripRequest(httpRequest);
        deserializationError1.response = msRest.stripResponse(response);
        return callback(deserializationError1);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Deletes a P2SVpnServerConfiguration.
 *
 * @param {string} resourceGroupName The resource group name of the
 * P2SVpnServerConfiguration.
 *
 * @param {string} virtualWanName The name of the VirtualWan.
 *
 * @param {string} p2SVpnServerConfigurationName The name of the
 * P2SVpnServerConfiguration.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _beginDeleteMethod(resourceGroupName, virtualWanName, p2SVpnServerConfigurationName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let apiVersion = '2018-10-01';
  // Validate
  try {
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (virtualWanName === null || virtualWanName === undefined || typeof virtualWanName.valueOf() !== 'string') {
      throw new Error('virtualWanName cannot be null or undefined and it must be of type string.');
    }
    if (p2SVpnServerConfigurationName === null || p2SVpnServerConfigurationName === undefined || typeof p2SVpnServerConfigurationName.valueOf() !== 'string') {
      throw new Error('p2SVpnServerConfigurationName cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualWans/{virtualWanName}/p2sVpnServerConfigurations/{p2SVpnServerConfigurationName}';
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{virtualWanName}', encodeURIComponent(virtualWanName));
  requestUrl = requestUrl.replace('{p2SVpnServerConfigurationName}', encodeURIComponent(p2SVpnServerConfigurationName));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'DELETE';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200 && statusCode !== 202 && statusCode !== 204) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorModel']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Retrieves all P2SVpnServerConfigurations for a particular VirtualWan.
 *
 * @param {string} nextPageLink The NextLink from the previous successful call
 * to List operation.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link ListP2SVpnServerConfigurationsResult} for
 *                      more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _listByVirtualWanNext(nextPageLink, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {
      throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let requestUrl = '{nextLink}';
  requestUrl = requestUrl.replace('{nextLink}', nextPageLink);

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorModel']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ListP2SVpnServerConfigurationsResult']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/** Class representing a P2sVpnServerConfigurations. */
class P2sVpnServerConfigurations {
  /**
   * Create a P2sVpnServerConfigurations.
   * @param {NetworkManagementClient} client Reference to the service client.
   */
  constructor(client) {
    this.client = client;
    this._get = _get;
    this._createOrUpdate = _createOrUpdate;
    this._deleteMethod = _deleteMethod;
    this._listByVirtualWan = _listByVirtualWan;
    this._beginCreateOrUpdate = _beginCreateOrUpdate;
    this._beginDeleteMethod = _beginDeleteMethod;
    this._listByVirtualWanNext = _listByVirtualWanNext;
  }

  /**
   * Retrieves the details of a P2SVpnServerConfiguration.
   *
   * @param {string} resourceGroupName The resource group name of the
   * P2SVpnServerConfiguration.
   *
   * @param {string} virtualWanName The name of the VirtualWan.
   *
   * @param {string} p2SVpnServerConfigurationName The name of the
   * P2SVpnServerConfiguration.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<P2SVpnServerConfiguration>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getWithHttpOperationResponse(resourceGroupName, virtualWanName, p2SVpnServerConfigurationName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._get(resourceGroupName, virtualWanName, p2SVpnServerConfigurationName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Retrieves the details of a P2SVpnServerConfiguration.
   *
   * @param {string} resourceGroupName The resource group name of the
   * P2SVpnServerConfiguration.
   *
   * @param {string} virtualWanName The name of the VirtualWan.
   *
   * @param {string} p2SVpnServerConfigurationName The name of the
   * P2SVpnServerConfiguration.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {P2SVpnServerConfiguration} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link P2SVpnServerConfiguration} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  get(resourceGroupName, virtualWanName, p2SVpnServerConfigurationName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._get(resourceGroupName, virtualWanName, p2SVpnServerConfigurationName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._get(resourceGroupName, virtualWanName, p2SVpnServerConfigurationName, options, optionalCallback);
    }
  }

  /**
   * Creates a P2SVpnServerConfiguration to associate with a VirtualWan if it
   * doesn't exist else updates the existing P2SVpnServerConfiguration.
   *
   * @param {string} resourceGroupName The resource group name of the VirtualWan.
   *
   * @param {string} virtualWanName The name of the VirtualWan.
   *
   * @param {string} p2SVpnServerConfigurationName The name of the
   * P2SVpnServerConfiguration.
   *
   * @param {object} p2SVpnServerConfigurationParameters Parameters supplied to
   * create or Update a P2SVpnServerConfiguration.
   *
   * @param {string}
   * [p2SVpnServerConfigurationParameters.p2SVpnServerConfigurationPropertiesName]
   * The name of the P2SVpnServerConfiguration that is unique within a VirtualWan
   * in a resource group. This name can be used to access the resource along with
   * Paren VirtualWan resource name.
   *
   * @param {array} [p2SVpnServerConfigurationParameters.vpnProtocols]
   * vpnProtocols for the P2SVpnServerConfiguration.
   *
   * @param {array}
   * [p2SVpnServerConfigurationParameters.p2SVpnServerConfigVpnClientRootCertificates]
   * VPN client root certificate of P2SVpnServerConfiguration.
   *
   * @param {array}
   * [p2SVpnServerConfigurationParameters.p2SVpnServerConfigVpnClientRevokedCertificates]
   * VPN client revoked certificate of P2SVpnServerConfiguration.
   *
   * @param {array}
   * [p2SVpnServerConfigurationParameters.p2SVpnServerConfigRadiusServerRootCertificates]
   * Radius Server root certificate of P2SVpnServerConfiguration.
   *
   * @param {array}
   * [p2SVpnServerConfigurationParameters.p2SVpnServerConfigRadiusClientRootCertificates]
   * Radius client root certificate of P2SVpnServerConfiguration.
   *
   * @param {array} [p2SVpnServerConfigurationParameters.vpnClientIpsecPolicies]
   * VpnClientIpsecPolicies for P2SVpnServerConfiguration.
   *
   * @param {string} [p2SVpnServerConfigurationParameters.radiusServerAddress]
   * The radius server address property of the P2SVpnServerConfiguration resource
   * for point to site client connection.
   *
   * @param {string} [p2SVpnServerConfigurationParameters.radiusServerSecret] The
   * radius secret property of the P2SVpnServerConfiguration resource for for
   * point to site client connection.
   *
   * @param {string}
   * [p2SVpnServerConfigurationParameters.p2SVpnServerConfigurationPropertiesEtag]
   * A unique read-only string that changes whenever the resource is updated.
   *
   * @param {string} [p2SVpnServerConfigurationParameters.name] The name of the
   * resource that is unique within a resource group. This name can be used to
   * access the resource.
   *
   * @param {string} [p2SVpnServerConfigurationParameters.id] Resource ID.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<P2SVpnServerConfiguration>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  createOrUpdateWithHttpOperationResponse(resourceGroupName, virtualWanName, p2SVpnServerConfigurationName, p2SVpnServerConfigurationParameters, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._createOrUpdate(resourceGroupName, virtualWanName, p2SVpnServerConfigurationName, p2SVpnServerConfigurationParameters, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Creates a P2SVpnServerConfiguration to associate with a VirtualWan if it
   * doesn't exist else updates the existing P2SVpnServerConfiguration.
   *
   * @param {string} resourceGroupName The resource group name of the VirtualWan.
   *
   * @param {string} virtualWanName The name of the VirtualWan.
   *
   * @param {string} p2SVpnServerConfigurationName The name of the
   * P2SVpnServerConfiguration.
   *
   * @param {object} p2SVpnServerConfigurationParameters Parameters supplied to
   * create or Update a P2SVpnServerConfiguration.
   *
   * @param {string}
   * [p2SVpnServerConfigurationParameters.p2SVpnServerConfigurationPropertiesName]
   * The name of the P2SVpnServerConfiguration that is unique within a VirtualWan
   * in a resource group. This name can be used to access the resource along with
   * Paren VirtualWan resource name.
   *
   * @param {array} [p2SVpnServerConfigurationParameters.vpnProtocols]
   * vpnProtocols for the P2SVpnServerConfiguration.
   *
   * @param {array}
   * [p2SVpnServerConfigurationParameters.p2SVpnServerConfigVpnClientRootCertificates]
   * VPN client root certificate of P2SVpnServerConfiguration.
   *
   * @param {array}
   * [p2SVpnServerConfigurationParameters.p2SVpnServerConfigVpnClientRevokedCertificates]
   * VPN client revoked certificate of P2SVpnServerConfiguration.
   *
   * @param {array}
   * [p2SVpnServerConfigurationParameters.p2SVpnServerConfigRadiusServerRootCertificates]
   * Radius Server root certificate of P2SVpnServerConfiguration.
   *
   * @param {array}
   * [p2SVpnServerConfigurationParameters.p2SVpnServerConfigRadiusClientRootCertificates]
   * Radius client root certificate of P2SVpnServerConfiguration.
   *
   * @param {array} [p2SVpnServerConfigurationParameters.vpnClientIpsecPolicies]
   * VpnClientIpsecPolicies for P2SVpnServerConfiguration.
   *
   * @param {string} [p2SVpnServerConfigurationParameters.radiusServerAddress]
   * The radius server address property of the P2SVpnServerConfiguration resource
   * for point to site client connection.
   *
   * @param {string} [p2SVpnServerConfigurationParameters.radiusServerSecret] The
   * radius secret property of the P2SVpnServerConfiguration resource for for
   * point to site client connection.
   *
   * @param {string}
   * [p2SVpnServerConfigurationParameters.p2SVpnServerConfigurationPropertiesEtag]
   * A unique read-only string that changes whenever the resource is updated.
   *
   * @param {string} [p2SVpnServerConfigurationParameters.name] The name of the
   * resource that is unique within a resource group. This name can be used to
   * access the resource.
   *
   * @param {string} [p2SVpnServerConfigurationParameters.id] Resource ID.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {P2SVpnServerConfiguration} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link P2SVpnServerConfiguration} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  createOrUpdate(resourceGroupName, virtualWanName, p2SVpnServerConfigurationName, p2SVpnServerConfigurationParameters, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._createOrUpdate(resourceGroupName, virtualWanName, p2SVpnServerConfigurationName, p2SVpnServerConfigurationParameters, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._createOrUpdate(resourceGroupName, virtualWanName, p2SVpnServerConfigurationName, p2SVpnServerConfigurationParameters, options, optionalCallback);
    }
  }

  /**
   * Deletes a P2SVpnServerConfiguration.
   *
   * @param {string} resourceGroupName The resource group name of the
   * P2SVpnServerConfiguration.
   *
   * @param {string} virtualWanName The name of the VirtualWan.
   *
   * @param {string} p2SVpnServerConfigurationName The name of the
   * P2SVpnServerConfiguration.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  deleteMethodWithHttpOperationResponse(resourceGroupName, virtualWanName, p2SVpnServerConfigurationName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._deleteMethod(resourceGroupName, virtualWanName, p2SVpnServerConfigurationName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Deletes a P2SVpnServerConfiguration.
   *
   * @param {string} resourceGroupName The resource group name of the
   * P2SVpnServerConfiguration.
   *
   * @param {string} virtualWanName The name of the VirtualWan.
   *
   * @param {string} p2SVpnServerConfigurationName The name of the
   * P2SVpnServerConfiguration.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteMethod(resourceGroupName, virtualWanName, p2SVpnServerConfigurationName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._deleteMethod(resourceGroupName, virtualWanName, p2SVpnServerConfigurationName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._deleteMethod(resourceGroupName, virtualWanName, p2SVpnServerConfigurationName, options, optionalCallback);
    }
  }

  /**
   * Retrieves all P2SVpnServerConfigurations for a particular VirtualWan.
   *
   * @param {string} resourceGroupName The resource group name of the VirtualWan.
   *
   * @param {string} virtualWanName The name of the VirtualWan.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ListP2SVpnServerConfigurationsResult>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  listByVirtualWanWithHttpOperationResponse(resourceGroupName, virtualWanName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._listByVirtualWan(resourceGroupName, virtualWanName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Retrieves all P2SVpnServerConfigurations for a particular VirtualWan.
   *
   * @param {string} resourceGroupName The resource group name of the VirtualWan.
   *
   * @param {string} virtualWanName The name of the VirtualWan.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {ListP2SVpnServerConfigurationsResult} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ListP2SVpnServerConfigurationsResult} for
   *                      more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  listByVirtualWan(resourceGroupName, virtualWanName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._listByVirtualWan(resourceGroupName, virtualWanName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._listByVirtualWan(resourceGroupName, virtualWanName, options, optionalCallback);
    }
  }

  /**
   * Creates a P2SVpnServerConfiguration to associate with a VirtualWan if it
   * doesn't exist else updates the existing P2SVpnServerConfiguration.
   *
   * @param {string} resourceGroupName The resource group name of the VirtualWan.
   *
   * @param {string} virtualWanName The name of the VirtualWan.
   *
   * @param {string} p2SVpnServerConfigurationName The name of the
   * P2SVpnServerConfiguration.
   *
   * @param {object} p2SVpnServerConfigurationParameters Parameters supplied to
   * create or Update a P2SVpnServerConfiguration.
   *
   * @param {string}
   * [p2SVpnServerConfigurationParameters.p2SVpnServerConfigurationPropertiesName]
   * The name of the P2SVpnServerConfiguration that is unique within a VirtualWan
   * in a resource group. This name can be used to access the resource along with
   * Paren VirtualWan resource name.
   *
   * @param {array} [p2SVpnServerConfigurationParameters.vpnProtocols]
   * vpnProtocols for the P2SVpnServerConfiguration.
   *
   * @param {array}
   * [p2SVpnServerConfigurationParameters.p2SVpnServerConfigVpnClientRootCertificates]
   * VPN client root certificate of P2SVpnServerConfiguration.
   *
   * @param {array}
   * [p2SVpnServerConfigurationParameters.p2SVpnServerConfigVpnClientRevokedCertificates]
   * VPN client revoked certificate of P2SVpnServerConfiguration.
   *
   * @param {array}
   * [p2SVpnServerConfigurationParameters.p2SVpnServerConfigRadiusServerRootCertificates]
   * Radius Server root certificate of P2SVpnServerConfiguration.
   *
   * @param {array}
   * [p2SVpnServerConfigurationParameters.p2SVpnServerConfigRadiusClientRootCertificates]
   * Radius client root certificate of P2SVpnServerConfiguration.
   *
   * @param {array} [p2SVpnServerConfigurationParameters.vpnClientIpsecPolicies]
   * VpnClientIpsecPolicies for P2SVpnServerConfiguration.
   *
   * @param {string} [p2SVpnServerConfigurationParameters.radiusServerAddress]
   * The radius server address property of the P2SVpnServerConfiguration resource
   * for point to site client connection.
   *
   * @param {string} [p2SVpnServerConfigurationParameters.radiusServerSecret] The
   * radius secret property of the P2SVpnServerConfiguration resource for for
   * point to site client connection.
   *
   * @param {string}
   * [p2SVpnServerConfigurationParameters.p2SVpnServerConfigurationPropertiesEtag]
   * A unique read-only string that changes whenever the resource is updated.
   *
   * @param {string} [p2SVpnServerConfigurationParameters.name] The name of the
   * resource that is unique within a resource group. This name can be used to
   * access the resource.
   *
   * @param {string} [p2SVpnServerConfigurationParameters.id] Resource ID.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<P2SVpnServerConfiguration>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName, virtualWanName, p2SVpnServerConfigurationName, p2SVpnServerConfigurationParameters, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._beginCreateOrUpdate(resourceGroupName, virtualWanName, p2SVpnServerConfigurationName, p2SVpnServerConfigurationParameters, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Creates a P2SVpnServerConfiguration to associate with a VirtualWan if it
   * doesn't exist else updates the existing P2SVpnServerConfiguration.
   *
   * @param {string} resourceGroupName The resource group name of the VirtualWan.
   *
   * @param {string} virtualWanName The name of the VirtualWan.
   *
   * @param {string} p2SVpnServerConfigurationName The name of the
   * P2SVpnServerConfiguration.
   *
   * @param {object} p2SVpnServerConfigurationParameters Parameters supplied to
   * create or Update a P2SVpnServerConfiguration.
   *
   * @param {string}
   * [p2SVpnServerConfigurationParameters.p2SVpnServerConfigurationPropertiesName]
   * The name of the P2SVpnServerConfiguration that is unique within a VirtualWan
   * in a resource group. This name can be used to access the resource along with
   * Paren VirtualWan resource name.
   *
   * @param {array} [p2SVpnServerConfigurationParameters.vpnProtocols]
   * vpnProtocols for the P2SVpnServerConfiguration.
   *
   * @param {array}
   * [p2SVpnServerConfigurationParameters.p2SVpnServerConfigVpnClientRootCertificates]
   * VPN client root certificate of P2SVpnServerConfiguration.
   *
   * @param {array}
   * [p2SVpnServerConfigurationParameters.p2SVpnServerConfigVpnClientRevokedCertificates]
   * VPN client revoked certificate of P2SVpnServerConfiguration.
   *
   * @param {array}
   * [p2SVpnServerConfigurationParameters.p2SVpnServerConfigRadiusServerRootCertificates]
   * Radius Server root certificate of P2SVpnServerConfiguration.
   *
   * @param {array}
   * [p2SVpnServerConfigurationParameters.p2SVpnServerConfigRadiusClientRootCertificates]
   * Radius client root certificate of P2SVpnServerConfiguration.
   *
   * @param {array} [p2SVpnServerConfigurationParameters.vpnClientIpsecPolicies]
   * VpnClientIpsecPolicies for P2SVpnServerConfiguration.
   *
   * @param {string} [p2SVpnServerConfigurationParameters.radiusServerAddress]
   * The radius server address property of the P2SVpnServerConfiguration resource
   * for point to site client connection.
   *
   * @param {string} [p2SVpnServerConfigurationParameters.radiusServerSecret] The
   * radius secret property of the P2SVpnServerConfiguration resource for for
   * point to site client connection.
   *
   * @param {string}
   * [p2SVpnServerConfigurationParameters.p2SVpnServerConfigurationPropertiesEtag]
   * A unique read-only string that changes whenever the resource is updated.
   *
   * @param {string} [p2SVpnServerConfigurationParameters.name] The name of the
   * resource that is unique within a resource group. This name can be used to
   * access the resource.
   *
   * @param {string} [p2SVpnServerConfigurationParameters.id] Resource ID.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {P2SVpnServerConfiguration} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link P2SVpnServerConfiguration} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  beginCreateOrUpdate(resourceGroupName, virtualWanName, p2SVpnServerConfigurationName, p2SVpnServerConfigurationParameters, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._beginCreateOrUpdate(resourceGroupName, virtualWanName, p2SVpnServerConfigurationName, p2SVpnServerConfigurationParameters, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._beginCreateOrUpdate(resourceGroupName, virtualWanName, p2SVpnServerConfigurationName, p2SVpnServerConfigurationParameters, options, optionalCallback);
    }
  }

  /**
   * Deletes a P2SVpnServerConfiguration.
   *
   * @param {string} resourceGroupName The resource group name of the
   * P2SVpnServerConfiguration.
   *
   * @param {string} virtualWanName The name of the VirtualWan.
   *
   * @param {string} p2SVpnServerConfigurationName The name of the
   * P2SVpnServerConfiguration.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  beginDeleteMethodWithHttpOperationResponse(resourceGroupName, virtualWanName, p2SVpnServerConfigurationName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._beginDeleteMethod(resourceGroupName, virtualWanName, p2SVpnServerConfigurationName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Deletes a P2SVpnServerConfiguration.
   *
   * @param {string} resourceGroupName The resource group name of the
   * P2SVpnServerConfiguration.
   *
   * @param {string} virtualWanName The name of the VirtualWan.
   *
   * @param {string} p2SVpnServerConfigurationName The name of the
   * P2SVpnServerConfiguration.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  beginDeleteMethod(resourceGroupName, virtualWanName, p2SVpnServerConfigurationName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._beginDeleteMethod(resourceGroupName, virtualWanName, p2SVpnServerConfigurationName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._beginDeleteMethod(resourceGroupName, virtualWanName, p2SVpnServerConfigurationName, options, optionalCallback);
    }
  }

  /**
   * Retrieves all P2SVpnServerConfigurations for a particular VirtualWan.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ListP2SVpnServerConfigurationsResult>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  listByVirtualWanNextWithHttpOperationResponse(nextPageLink, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._listByVirtualWanNext(nextPageLink, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Retrieves all P2SVpnServerConfigurations for a particular VirtualWan.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {ListP2SVpnServerConfigurationsResult} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ListP2SVpnServerConfigurationsResult} for
   *                      more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  listByVirtualWanNext(nextPageLink, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._listByVirtualWanNext(nextPageLink, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._listByVirtualWanNext(nextPageLink, options, optionalCallback);
    }
  }

}

module.exports = P2sVpnServerConfigurations;
