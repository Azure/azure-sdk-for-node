/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const msRest = require('ms-rest');
const msRestAzure = require('ms-rest-azure');
const WebResource = msRest.WebResource;


/**
 * Deletes the specified network security rule.
 *
 * @param {string} resourceGroupName The name of the resource group.
 *
 * @param {string} networkSecurityGroupName The name of the network security
 * group.
 *
 * @param {string} securityRuleName The name of the security rule.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _deleteMethod(resourceGroupName, networkSecurityGroupName, securityRuleName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }

  if (!callback) {
    throw new Error('callback cannot be null.');
  }

  // Send request
  this.beginDeleteMethod(resourceGroupName, networkSecurityGroupName, securityRuleName, options, (err, parsedResult, httpRequest, response) => {
    if (err) return callback(err);

    let initialResult = new msRest.HttpOperationResponse();
    initialResult.request = httpRequest;
    initialResult.response = response;
    initialResult.body = response.body;
    client.getLongRunningOperationResult(initialResult, options, (err, pollingResult) => {
      if (err) return callback(err);

      // Create Result
      let result = null;

      httpRequest = pollingResult.request;
      response = pollingResult.response;
      let responseBody = pollingResult.body;
      if (responseBody === '') responseBody = null;

      // Deserialize Response

      return callback(null, result, httpRequest, response);
    });
  });
}

/**
 * Get the specified network security rule.
 *
 * @param {string} resourceGroupName The name of the resource group.
 *
 * @param {string} networkSecurityGroupName The name of the network security
 * group.
 *
 * @param {string} securityRuleName The name of the security rule.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link SecurityRule} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _get(resourceGroupName, networkSecurityGroupName, securityRuleName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (networkSecurityGroupName === null || networkSecurityGroupName === undefined || typeof networkSecurityGroupName.valueOf() !== 'string') {
      throw new Error('networkSecurityGroupName cannot be null or undefined and it must be of type string.');
    }
    if (securityRuleName === null || securityRuleName === undefined || typeof securityRuleName.valueOf() !== 'string') {
      throw new Error('securityRuleName cannot be null or undefined and it must be of type string.');
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkSecurityGroups/{networkSecurityGroupName}/securityRules/{securityRuleName}';
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{networkSecurityGroupName}', encodeURIComponent(networkSecurityGroupName));
  requestUrl = requestUrl.replace('{securityRuleName}', encodeURIComponent(securityRuleName));
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['SecurityRule']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}


/**
 * Creates or updates a security rule in the specified network security group.
 *
 * @param {string} resourceGroupName The name of the resource group.
 *
 * @param {string} networkSecurityGroupName The name of the network security
 * group.
 *
 * @param {string} securityRuleName The name of the security rule.
 *
 * @param {object} securityRuleParameters Parameters supplied to the create or
 * update network security rule operation.
 *
 * @param {string} [securityRuleParameters.description] A description for this
 * rule. Restricted to 140 chars.
 *
 * @param {string} securityRuleParameters.protocol Network protocol this rule
 * applies to. Possible values are 'Tcp', 'Udp', and '*'. Possible values
 * include: 'Tcp', 'Udp', '*'
 *
 * @param {string} [securityRuleParameters.sourcePortRange] The source port or
 * range. Integer or range between 0 and 65535. Asterix '*' can also be used to
 * match all ports.
 *
 * @param {string} [securityRuleParameters.destinationPortRange] The
 * destination port or range. Integer or range between 0 and 65535. Asterix '*'
 * can also be used to match all ports.
 *
 * @param {string} [securityRuleParameters.sourceAddressPrefix] The CIDR or
 * source IP range. Asterix '*' can also be used to match all source IPs.
 * Default tags such as 'VirtualNetwork', 'AzureLoadBalancer' and 'Internet'
 * can also be used. If this is an ingress rule, specifies where network
 * traffic originates from.
 *
 * @param {array} [securityRuleParameters.sourceAddressPrefixes] The CIDR or
 * source IP ranges.
 *
 * @param {array} [securityRuleParameters.sourceApplicationSecurityGroups] The
 * application security group specified as source.
 *
 * @param {string} [securityRuleParameters.destinationAddressPrefix] The
 * destination address prefix. CIDR or destination IP range. Asterix '*' can
 * also be used to match all source IPs. Default tags such as 'VirtualNetwork',
 * 'AzureLoadBalancer' and 'Internet' can also be used.
 *
 * @param {array} [securityRuleParameters.destinationAddressPrefixes] The
 * destination address prefixes. CIDR or destination IP ranges.
 *
 * @param {array} [securityRuleParameters.destinationApplicationSecurityGroups]
 * The application security group specified as destination.
 *
 * @param {array} [securityRuleParameters.sourcePortRanges] The source port
 * ranges.
 *
 * @param {array} [securityRuleParameters.destinationPortRanges] The
 * destination port ranges.
 *
 * @param {string} securityRuleParameters.access The network traffic is allowed
 * or denied. Possible values are: 'Allow' and 'Deny'. Possible values include:
 * 'Allow', 'Deny'
 *
 * @param {number} [securityRuleParameters.priority] The priority of the rule.
 * The value can be between 100 and 4096. The priority number must be unique
 * for each rule in the collection. The lower the priority number, the higher
 * the priority of the rule.
 *
 * @param {string} securityRuleParameters.direction The direction of the rule.
 * The direction specifies if rule will be evaluated on incoming or outcoming
 * traffic. Possible values are: 'Inbound' and 'Outbound'. Possible values
 * include: 'Inbound', 'Outbound'
 *
 * @param {string} [securityRuleParameters.provisioningState] The provisioning
 * state of the public IP resource. Possible values are: 'Updating',
 * 'Deleting', and 'Failed'.
 *
 * @param {string} [securityRuleParameters.name] The name of the resource that
 * is unique within a resource group. This name can be used to access the
 * resource.
 *
 * @param {string} [securityRuleParameters.etag] A unique read-only string that
 * changes whenever the resource is updated.
 *
 * @param {string} [securityRuleParameters.id] Resource ID.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link SecurityRule} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _createOrUpdate(resourceGroupName, networkSecurityGroupName, securityRuleName, securityRuleParameters, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }

  if (!callback) {
    throw new Error('callback cannot be null.');
  }

  // Send request
  this.beginCreateOrUpdate(resourceGroupName, networkSecurityGroupName, securityRuleName, securityRuleParameters, options, (err, parsedResult, httpRequest, response) => {
    if (err) return callback(err);

    let initialResult = new msRest.HttpOperationResponse();
    initialResult.request = httpRequest;
    initialResult.response = response;
    initialResult.body = response.body;
    client.getLongRunningOperationResult(initialResult, options, (err, pollingResult) => {
      if (err) return callback(err);

      // Create Result
      let result = null;

      httpRequest = pollingResult.request;
      response = pollingResult.response;
      let responseBody = pollingResult.body;
      if (responseBody === '') responseBody = null;

      // Deserialize Response
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['SecurityRule']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }

      return callback(null, result, httpRequest, response);
    });
  });
}

/**
 * Gets all security rules in a network security group.
 *
 * @param {string} resourceGroupName The name of the resource group.
 *
 * @param {string} networkSecurityGroupName The name of the network security
 * group.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link SecurityRuleListResult} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _list(resourceGroupName, networkSecurityGroupName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (networkSecurityGroupName === null || networkSecurityGroupName === undefined || typeof networkSecurityGroupName.valueOf() !== 'string') {
      throw new Error('networkSecurityGroupName cannot be null or undefined and it must be of type string.');
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkSecurityGroups/{networkSecurityGroupName}/securityRules';
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{networkSecurityGroupName}', encodeURIComponent(networkSecurityGroupName));
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['SecurityRuleListResult']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Deletes the specified network security rule.
 *
 * @param {string} resourceGroupName The name of the resource group.
 *
 * @param {string} networkSecurityGroupName The name of the network security
 * group.
 *
 * @param {string} securityRuleName The name of the security rule.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _beginDeleteMethod(resourceGroupName, networkSecurityGroupName, securityRuleName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (networkSecurityGroupName === null || networkSecurityGroupName === undefined || typeof networkSecurityGroupName.valueOf() !== 'string') {
      throw new Error('networkSecurityGroupName cannot be null or undefined and it must be of type string.');
    }
    if (securityRuleName === null || securityRuleName === undefined || typeof securityRuleName.valueOf() !== 'string') {
      throw new Error('securityRuleName cannot be null or undefined and it must be of type string.');
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkSecurityGroups/{networkSecurityGroupName}/securityRules/{securityRuleName}';
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{networkSecurityGroupName}', encodeURIComponent(networkSecurityGroupName));
  requestUrl = requestUrl.replace('{securityRuleName}', encodeURIComponent(securityRuleName));
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'DELETE';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200 && statusCode !== 202 && statusCode !== 204) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Creates or updates a security rule in the specified network security group.
 *
 * @param {string} resourceGroupName The name of the resource group.
 *
 * @param {string} networkSecurityGroupName The name of the network security
 * group.
 *
 * @param {string} securityRuleName The name of the security rule.
 *
 * @param {object} securityRuleParameters Parameters supplied to the create or
 * update network security rule operation.
 *
 * @param {string} [securityRuleParameters.description] A description for this
 * rule. Restricted to 140 chars.
 *
 * @param {string} securityRuleParameters.protocol Network protocol this rule
 * applies to. Possible values are 'Tcp', 'Udp', and '*'. Possible values
 * include: 'Tcp', 'Udp', '*'
 *
 * @param {string} [securityRuleParameters.sourcePortRange] The source port or
 * range. Integer or range between 0 and 65535. Asterix '*' can also be used to
 * match all ports.
 *
 * @param {string} [securityRuleParameters.destinationPortRange] The
 * destination port or range. Integer or range between 0 and 65535. Asterix '*'
 * can also be used to match all ports.
 *
 * @param {string} [securityRuleParameters.sourceAddressPrefix] The CIDR or
 * source IP range. Asterix '*' can also be used to match all source IPs.
 * Default tags such as 'VirtualNetwork', 'AzureLoadBalancer' and 'Internet'
 * can also be used. If this is an ingress rule, specifies where network
 * traffic originates from.
 *
 * @param {array} [securityRuleParameters.sourceAddressPrefixes] The CIDR or
 * source IP ranges.
 *
 * @param {array} [securityRuleParameters.sourceApplicationSecurityGroups] The
 * application security group specified as source.
 *
 * @param {string} [securityRuleParameters.destinationAddressPrefix] The
 * destination address prefix. CIDR or destination IP range. Asterix '*' can
 * also be used to match all source IPs. Default tags such as 'VirtualNetwork',
 * 'AzureLoadBalancer' and 'Internet' can also be used.
 *
 * @param {array} [securityRuleParameters.destinationAddressPrefixes] The
 * destination address prefixes. CIDR or destination IP ranges.
 *
 * @param {array} [securityRuleParameters.destinationApplicationSecurityGroups]
 * The application security group specified as destination.
 *
 * @param {array} [securityRuleParameters.sourcePortRanges] The source port
 * ranges.
 *
 * @param {array} [securityRuleParameters.destinationPortRanges] The
 * destination port ranges.
 *
 * @param {string} securityRuleParameters.access The network traffic is allowed
 * or denied. Possible values are: 'Allow' and 'Deny'. Possible values include:
 * 'Allow', 'Deny'
 *
 * @param {number} [securityRuleParameters.priority] The priority of the rule.
 * The value can be between 100 and 4096. The priority number must be unique
 * for each rule in the collection. The lower the priority number, the higher
 * the priority of the rule.
 *
 * @param {string} securityRuleParameters.direction The direction of the rule.
 * The direction specifies if rule will be evaluated on incoming or outcoming
 * traffic. Possible values are: 'Inbound' and 'Outbound'. Possible values
 * include: 'Inbound', 'Outbound'
 *
 * @param {string} [securityRuleParameters.provisioningState] The provisioning
 * state of the public IP resource. Possible values are: 'Updating',
 * 'Deleting', and 'Failed'.
 *
 * @param {string} [securityRuleParameters.name] The name of the resource that
 * is unique within a resource group. This name can be used to access the
 * resource.
 *
 * @param {string} [securityRuleParameters.etag] A unique read-only string that
 * changes whenever the resource is updated.
 *
 * @param {string} [securityRuleParameters.id] Resource ID.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link SecurityRule} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _beginCreateOrUpdate(resourceGroupName, networkSecurityGroupName, securityRuleName, securityRuleParameters, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (networkSecurityGroupName === null || networkSecurityGroupName === undefined || typeof networkSecurityGroupName.valueOf() !== 'string') {
      throw new Error('networkSecurityGroupName cannot be null or undefined and it must be of type string.');
    }
    if (securityRuleName === null || securityRuleName === undefined || typeof securityRuleName.valueOf() !== 'string') {
      throw new Error('securityRuleName cannot be null or undefined and it must be of type string.');
    }
    if (securityRuleParameters === null || securityRuleParameters === undefined) {
      throw new Error('securityRuleParameters cannot be null or undefined.');
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkSecurityGroups/{networkSecurityGroupName}/securityRules/{securityRuleName}';
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{networkSecurityGroupName}', encodeURIComponent(networkSecurityGroupName));
  requestUrl = requestUrl.replace('{securityRuleName}', encodeURIComponent(securityRuleName));
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PUT';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (securityRuleParameters !== null && securityRuleParameters !== undefined) {
      let requestModelMapper = new client.models['SecurityRule']().mapper();
      requestModel = client.serialize(requestModelMapper, securityRuleParameters, 'securityRuleParameters');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(securityRuleParameters, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200 && statusCode !== 201) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['SecurityRule']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }
    // Deserialize Response
    if (statusCode === 201) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['SecurityRule']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError1 = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError1.request = msRest.stripRequest(httpRequest);
        deserializationError1.response = msRest.stripResponse(response);
        return callback(deserializationError1);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Gets all security rules in a network security group.
 *
 * @param {string} nextPageLink The NextLink from the previous successful call
 * to List operation.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link SecurityRuleListResult} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _listNext(nextPageLink, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {
      throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let requestUrl = '{nextLink}';
  requestUrl = requestUrl.replace('{nextLink}', nextPageLink);

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['SecurityRuleListResult']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/** Class representing a SecurityRules. */
class SecurityRules {
  /**
   * Create a SecurityRules.
   * @param {NetworkManagementClient} client Reference to the service client.
   */
  constructor(client) {
    this.client = client;
    this._deleteMethod = _deleteMethod;
    this._get = _get;
    this._createOrUpdate = _createOrUpdate;
    this._list = _list;
    this._beginDeleteMethod = _beginDeleteMethod;
    this._beginCreateOrUpdate = _beginCreateOrUpdate;
    this._listNext = _listNext;
  }

  /**
   * Deletes the specified network security rule.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} networkSecurityGroupName The name of the network security
   * group.
   *
   * @param {string} securityRuleName The name of the security rule.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  deleteMethodWithHttpOperationResponse(resourceGroupName, networkSecurityGroupName, securityRuleName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._deleteMethod(resourceGroupName, networkSecurityGroupName, securityRuleName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Deletes the specified network security rule.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} networkSecurityGroupName The name of the network security
   * group.
   *
   * @param {string} securityRuleName The name of the security rule.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteMethod(resourceGroupName, networkSecurityGroupName, securityRuleName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._deleteMethod(resourceGroupName, networkSecurityGroupName, securityRuleName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._deleteMethod(resourceGroupName, networkSecurityGroupName, securityRuleName, options, optionalCallback);
    }
  }

  /**
   * Get the specified network security rule.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} networkSecurityGroupName The name of the network security
   * group.
   *
   * @param {string} securityRuleName The name of the security rule.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<SecurityRule>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getWithHttpOperationResponse(resourceGroupName, networkSecurityGroupName, securityRuleName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._get(resourceGroupName, networkSecurityGroupName, securityRuleName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Get the specified network security rule.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} networkSecurityGroupName The name of the network security
   * group.
   *
   * @param {string} securityRuleName The name of the security rule.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {SecurityRule} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link SecurityRule} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  get(resourceGroupName, networkSecurityGroupName, securityRuleName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._get(resourceGroupName, networkSecurityGroupName, securityRuleName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._get(resourceGroupName, networkSecurityGroupName, securityRuleName, options, optionalCallback);
    }
  }

  /**
   * Creates or updates a security rule in the specified network security group.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} networkSecurityGroupName The name of the network security
   * group.
   *
   * @param {string} securityRuleName The name of the security rule.
   *
   * @param {object} securityRuleParameters Parameters supplied to the create or
   * update network security rule operation.
   *
   * @param {string} [securityRuleParameters.description] A description for this
   * rule. Restricted to 140 chars.
   *
   * @param {string} securityRuleParameters.protocol Network protocol this rule
   * applies to. Possible values are 'Tcp', 'Udp', and '*'. Possible values
   * include: 'Tcp', 'Udp', '*'
   *
   * @param {string} [securityRuleParameters.sourcePortRange] The source port or
   * range. Integer or range between 0 and 65535. Asterix '*' can also be used to
   * match all ports.
   *
   * @param {string} [securityRuleParameters.destinationPortRange] The
   * destination port or range. Integer or range between 0 and 65535. Asterix '*'
   * can also be used to match all ports.
   *
   * @param {string} [securityRuleParameters.sourceAddressPrefix] The CIDR or
   * source IP range. Asterix '*' can also be used to match all source IPs.
   * Default tags such as 'VirtualNetwork', 'AzureLoadBalancer' and 'Internet'
   * can also be used. If this is an ingress rule, specifies where network
   * traffic originates from.
   *
   * @param {array} [securityRuleParameters.sourceAddressPrefixes] The CIDR or
   * source IP ranges.
   *
   * @param {array} [securityRuleParameters.sourceApplicationSecurityGroups] The
   * application security group specified as source.
   *
   * @param {string} [securityRuleParameters.destinationAddressPrefix] The
   * destination address prefix. CIDR or destination IP range. Asterix '*' can
   * also be used to match all source IPs. Default tags such as 'VirtualNetwork',
   * 'AzureLoadBalancer' and 'Internet' can also be used.
   *
   * @param {array} [securityRuleParameters.destinationAddressPrefixes] The
   * destination address prefixes. CIDR or destination IP ranges.
   *
   * @param {array} [securityRuleParameters.destinationApplicationSecurityGroups]
   * The application security group specified as destination.
   *
   * @param {array} [securityRuleParameters.sourcePortRanges] The source port
   * ranges.
   *
   * @param {array} [securityRuleParameters.destinationPortRanges] The
   * destination port ranges.
   *
   * @param {string} securityRuleParameters.access The network traffic is allowed
   * or denied. Possible values are: 'Allow' and 'Deny'. Possible values include:
   * 'Allow', 'Deny'
   *
   * @param {number} [securityRuleParameters.priority] The priority of the rule.
   * The value can be between 100 and 4096. The priority number must be unique
   * for each rule in the collection. The lower the priority number, the higher
   * the priority of the rule.
   *
   * @param {string} securityRuleParameters.direction The direction of the rule.
   * The direction specifies if rule will be evaluated on incoming or outcoming
   * traffic. Possible values are: 'Inbound' and 'Outbound'. Possible values
   * include: 'Inbound', 'Outbound'
   *
   * @param {string} [securityRuleParameters.provisioningState] The provisioning
   * state of the public IP resource. Possible values are: 'Updating',
   * 'Deleting', and 'Failed'.
   *
   * @param {string} [securityRuleParameters.name] The name of the resource that
   * is unique within a resource group. This name can be used to access the
   * resource.
   *
   * @param {string} [securityRuleParameters.etag] A unique read-only string that
   * changes whenever the resource is updated.
   *
   * @param {string} [securityRuleParameters.id] Resource ID.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<SecurityRule>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  createOrUpdateWithHttpOperationResponse(resourceGroupName, networkSecurityGroupName, securityRuleName, securityRuleParameters, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._createOrUpdate(resourceGroupName, networkSecurityGroupName, securityRuleName, securityRuleParameters, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Creates or updates a security rule in the specified network security group.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} networkSecurityGroupName The name of the network security
   * group.
   *
   * @param {string} securityRuleName The name of the security rule.
   *
   * @param {object} securityRuleParameters Parameters supplied to the create or
   * update network security rule operation.
   *
   * @param {string} [securityRuleParameters.description] A description for this
   * rule. Restricted to 140 chars.
   *
   * @param {string} securityRuleParameters.protocol Network protocol this rule
   * applies to. Possible values are 'Tcp', 'Udp', and '*'. Possible values
   * include: 'Tcp', 'Udp', '*'
   *
   * @param {string} [securityRuleParameters.sourcePortRange] The source port or
   * range. Integer or range between 0 and 65535. Asterix '*' can also be used to
   * match all ports.
   *
   * @param {string} [securityRuleParameters.destinationPortRange] The
   * destination port or range. Integer or range between 0 and 65535. Asterix '*'
   * can also be used to match all ports.
   *
   * @param {string} [securityRuleParameters.sourceAddressPrefix] The CIDR or
   * source IP range. Asterix '*' can also be used to match all source IPs.
   * Default tags such as 'VirtualNetwork', 'AzureLoadBalancer' and 'Internet'
   * can also be used. If this is an ingress rule, specifies where network
   * traffic originates from.
   *
   * @param {array} [securityRuleParameters.sourceAddressPrefixes] The CIDR or
   * source IP ranges.
   *
   * @param {array} [securityRuleParameters.sourceApplicationSecurityGroups] The
   * application security group specified as source.
   *
   * @param {string} [securityRuleParameters.destinationAddressPrefix] The
   * destination address prefix. CIDR or destination IP range. Asterix '*' can
   * also be used to match all source IPs. Default tags such as 'VirtualNetwork',
   * 'AzureLoadBalancer' and 'Internet' can also be used.
   *
   * @param {array} [securityRuleParameters.destinationAddressPrefixes] The
   * destination address prefixes. CIDR or destination IP ranges.
   *
   * @param {array} [securityRuleParameters.destinationApplicationSecurityGroups]
   * The application security group specified as destination.
   *
   * @param {array} [securityRuleParameters.sourcePortRanges] The source port
   * ranges.
   *
   * @param {array} [securityRuleParameters.destinationPortRanges] The
   * destination port ranges.
   *
   * @param {string} securityRuleParameters.access The network traffic is allowed
   * or denied. Possible values are: 'Allow' and 'Deny'. Possible values include:
   * 'Allow', 'Deny'
   *
   * @param {number} [securityRuleParameters.priority] The priority of the rule.
   * The value can be between 100 and 4096. The priority number must be unique
   * for each rule in the collection. The lower the priority number, the higher
   * the priority of the rule.
   *
   * @param {string} securityRuleParameters.direction The direction of the rule.
   * The direction specifies if rule will be evaluated on incoming or outcoming
   * traffic. Possible values are: 'Inbound' and 'Outbound'. Possible values
   * include: 'Inbound', 'Outbound'
   *
   * @param {string} [securityRuleParameters.provisioningState] The provisioning
   * state of the public IP resource. Possible values are: 'Updating',
   * 'Deleting', and 'Failed'.
   *
   * @param {string} [securityRuleParameters.name] The name of the resource that
   * is unique within a resource group. This name can be used to access the
   * resource.
   *
   * @param {string} [securityRuleParameters.etag] A unique read-only string that
   * changes whenever the resource is updated.
   *
   * @param {string} [securityRuleParameters.id] Resource ID.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {SecurityRule} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link SecurityRule} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  createOrUpdate(resourceGroupName, networkSecurityGroupName, securityRuleName, securityRuleParameters, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._createOrUpdate(resourceGroupName, networkSecurityGroupName, securityRuleName, securityRuleParameters, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._createOrUpdate(resourceGroupName, networkSecurityGroupName, securityRuleName, securityRuleParameters, options, optionalCallback);
    }
  }

  /**
   * Gets all security rules in a network security group.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} networkSecurityGroupName The name of the network security
   * group.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<SecurityRuleListResult>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  listWithHttpOperationResponse(resourceGroupName, networkSecurityGroupName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._list(resourceGroupName, networkSecurityGroupName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Gets all security rules in a network security group.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} networkSecurityGroupName The name of the network security
   * group.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {SecurityRuleListResult} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link SecurityRuleListResult} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  list(resourceGroupName, networkSecurityGroupName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._list(resourceGroupName, networkSecurityGroupName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._list(resourceGroupName, networkSecurityGroupName, options, optionalCallback);
    }
  }

  /**
   * Deletes the specified network security rule.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} networkSecurityGroupName The name of the network security
   * group.
   *
   * @param {string} securityRuleName The name of the security rule.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  beginDeleteMethodWithHttpOperationResponse(resourceGroupName, networkSecurityGroupName, securityRuleName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._beginDeleteMethod(resourceGroupName, networkSecurityGroupName, securityRuleName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Deletes the specified network security rule.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} networkSecurityGroupName The name of the network security
   * group.
   *
   * @param {string} securityRuleName The name of the security rule.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  beginDeleteMethod(resourceGroupName, networkSecurityGroupName, securityRuleName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._beginDeleteMethod(resourceGroupName, networkSecurityGroupName, securityRuleName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._beginDeleteMethod(resourceGroupName, networkSecurityGroupName, securityRuleName, options, optionalCallback);
    }
  }

  /**
   * Creates or updates a security rule in the specified network security group.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} networkSecurityGroupName The name of the network security
   * group.
   *
   * @param {string} securityRuleName The name of the security rule.
   *
   * @param {object} securityRuleParameters Parameters supplied to the create or
   * update network security rule operation.
   *
   * @param {string} [securityRuleParameters.description] A description for this
   * rule. Restricted to 140 chars.
   *
   * @param {string} securityRuleParameters.protocol Network protocol this rule
   * applies to. Possible values are 'Tcp', 'Udp', and '*'. Possible values
   * include: 'Tcp', 'Udp', '*'
   *
   * @param {string} [securityRuleParameters.sourcePortRange] The source port or
   * range. Integer or range between 0 and 65535. Asterix '*' can also be used to
   * match all ports.
   *
   * @param {string} [securityRuleParameters.destinationPortRange] The
   * destination port or range. Integer or range between 0 and 65535. Asterix '*'
   * can also be used to match all ports.
   *
   * @param {string} [securityRuleParameters.sourceAddressPrefix] The CIDR or
   * source IP range. Asterix '*' can also be used to match all source IPs.
   * Default tags such as 'VirtualNetwork', 'AzureLoadBalancer' and 'Internet'
   * can also be used. If this is an ingress rule, specifies where network
   * traffic originates from.
   *
   * @param {array} [securityRuleParameters.sourceAddressPrefixes] The CIDR or
   * source IP ranges.
   *
   * @param {array} [securityRuleParameters.sourceApplicationSecurityGroups] The
   * application security group specified as source.
   *
   * @param {string} [securityRuleParameters.destinationAddressPrefix] The
   * destination address prefix. CIDR or destination IP range. Asterix '*' can
   * also be used to match all source IPs. Default tags such as 'VirtualNetwork',
   * 'AzureLoadBalancer' and 'Internet' can also be used.
   *
   * @param {array} [securityRuleParameters.destinationAddressPrefixes] The
   * destination address prefixes. CIDR or destination IP ranges.
   *
   * @param {array} [securityRuleParameters.destinationApplicationSecurityGroups]
   * The application security group specified as destination.
   *
   * @param {array} [securityRuleParameters.sourcePortRanges] The source port
   * ranges.
   *
   * @param {array} [securityRuleParameters.destinationPortRanges] The
   * destination port ranges.
   *
   * @param {string} securityRuleParameters.access The network traffic is allowed
   * or denied. Possible values are: 'Allow' and 'Deny'. Possible values include:
   * 'Allow', 'Deny'
   *
   * @param {number} [securityRuleParameters.priority] The priority of the rule.
   * The value can be between 100 and 4096. The priority number must be unique
   * for each rule in the collection. The lower the priority number, the higher
   * the priority of the rule.
   *
   * @param {string} securityRuleParameters.direction The direction of the rule.
   * The direction specifies if rule will be evaluated on incoming or outcoming
   * traffic. Possible values are: 'Inbound' and 'Outbound'. Possible values
   * include: 'Inbound', 'Outbound'
   *
   * @param {string} [securityRuleParameters.provisioningState] The provisioning
   * state of the public IP resource. Possible values are: 'Updating',
   * 'Deleting', and 'Failed'.
   *
   * @param {string} [securityRuleParameters.name] The name of the resource that
   * is unique within a resource group. This name can be used to access the
   * resource.
   *
   * @param {string} [securityRuleParameters.etag] A unique read-only string that
   * changes whenever the resource is updated.
   *
   * @param {string} [securityRuleParameters.id] Resource ID.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<SecurityRule>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName, networkSecurityGroupName, securityRuleName, securityRuleParameters, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._beginCreateOrUpdate(resourceGroupName, networkSecurityGroupName, securityRuleName, securityRuleParameters, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Creates or updates a security rule in the specified network security group.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} networkSecurityGroupName The name of the network security
   * group.
   *
   * @param {string} securityRuleName The name of the security rule.
   *
   * @param {object} securityRuleParameters Parameters supplied to the create or
   * update network security rule operation.
   *
   * @param {string} [securityRuleParameters.description] A description for this
   * rule. Restricted to 140 chars.
   *
   * @param {string} securityRuleParameters.protocol Network protocol this rule
   * applies to. Possible values are 'Tcp', 'Udp', and '*'. Possible values
   * include: 'Tcp', 'Udp', '*'
   *
   * @param {string} [securityRuleParameters.sourcePortRange] The source port or
   * range. Integer or range between 0 and 65535. Asterix '*' can also be used to
   * match all ports.
   *
   * @param {string} [securityRuleParameters.destinationPortRange] The
   * destination port or range. Integer or range between 0 and 65535. Asterix '*'
   * can also be used to match all ports.
   *
   * @param {string} [securityRuleParameters.sourceAddressPrefix] The CIDR or
   * source IP range. Asterix '*' can also be used to match all source IPs.
   * Default tags such as 'VirtualNetwork', 'AzureLoadBalancer' and 'Internet'
   * can also be used. If this is an ingress rule, specifies where network
   * traffic originates from.
   *
   * @param {array} [securityRuleParameters.sourceAddressPrefixes] The CIDR or
   * source IP ranges.
   *
   * @param {array} [securityRuleParameters.sourceApplicationSecurityGroups] The
   * application security group specified as source.
   *
   * @param {string} [securityRuleParameters.destinationAddressPrefix] The
   * destination address prefix. CIDR or destination IP range. Asterix '*' can
   * also be used to match all source IPs. Default tags such as 'VirtualNetwork',
   * 'AzureLoadBalancer' and 'Internet' can also be used.
   *
   * @param {array} [securityRuleParameters.destinationAddressPrefixes] The
   * destination address prefixes. CIDR or destination IP ranges.
   *
   * @param {array} [securityRuleParameters.destinationApplicationSecurityGroups]
   * The application security group specified as destination.
   *
   * @param {array} [securityRuleParameters.sourcePortRanges] The source port
   * ranges.
   *
   * @param {array} [securityRuleParameters.destinationPortRanges] The
   * destination port ranges.
   *
   * @param {string} securityRuleParameters.access The network traffic is allowed
   * or denied. Possible values are: 'Allow' and 'Deny'. Possible values include:
   * 'Allow', 'Deny'
   *
   * @param {number} [securityRuleParameters.priority] The priority of the rule.
   * The value can be between 100 and 4096. The priority number must be unique
   * for each rule in the collection. The lower the priority number, the higher
   * the priority of the rule.
   *
   * @param {string} securityRuleParameters.direction The direction of the rule.
   * The direction specifies if rule will be evaluated on incoming or outcoming
   * traffic. Possible values are: 'Inbound' and 'Outbound'. Possible values
   * include: 'Inbound', 'Outbound'
   *
   * @param {string} [securityRuleParameters.provisioningState] The provisioning
   * state of the public IP resource. Possible values are: 'Updating',
   * 'Deleting', and 'Failed'.
   *
   * @param {string} [securityRuleParameters.name] The name of the resource that
   * is unique within a resource group. This name can be used to access the
   * resource.
   *
   * @param {string} [securityRuleParameters.etag] A unique read-only string that
   * changes whenever the resource is updated.
   *
   * @param {string} [securityRuleParameters.id] Resource ID.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {SecurityRule} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link SecurityRule} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  beginCreateOrUpdate(resourceGroupName, networkSecurityGroupName, securityRuleName, securityRuleParameters, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._beginCreateOrUpdate(resourceGroupName, networkSecurityGroupName, securityRuleName, securityRuleParameters, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._beginCreateOrUpdate(resourceGroupName, networkSecurityGroupName, securityRuleName, securityRuleParameters, options, optionalCallback);
    }
  }

  /**
   * Gets all security rules in a network security group.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<SecurityRuleListResult>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  listNextWithHttpOperationResponse(nextPageLink, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._listNext(nextPageLink, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Gets all security rules in a network security group.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {SecurityRuleListResult} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link SecurityRuleListResult} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  listNext(nextPageLink, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._listNext(nextPageLink, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._listNext(nextPageLink, options, optionalCallback);
    }
  }

}

module.exports = SecurityRules;
