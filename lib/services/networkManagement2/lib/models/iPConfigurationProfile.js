/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * IP configuration profile child resource.
 *
 * @extends models['SubResource']
 */
class IPConfigurationProfile extends models['SubResource'] {
  /**
   * Create a IPConfigurationProfile.
   * @member {object} [properties] Properties of the IP configuration profile.
   * @member {object} [properties.subnet] The reference of the subnet resource
   * to create a contatainer network interface ip configruation.
   * @member {string} [properties.subnet.addressPrefix] The address prefix for
   * the subnet.
   * @member {array} [properties.subnet.addressPrefixes] List of  address
   * prefixes for the subnet.
   * @member {object} [properties.subnet.networkSecurityGroup] The reference of
   * the NetworkSecurityGroup resource.
   * @member {array} [properties.subnet.networkSecurityGroup.securityRules] A
   * collection of security rules of the network security group.
   * @member {array}
   * [properties.subnet.networkSecurityGroup.defaultSecurityRules] The default
   * security rules of network security group.
   * @member {array} [properties.subnet.networkSecurityGroup.networkInterfaces]
   * A collection of references to network interfaces.
   * @member {array} [properties.subnet.networkSecurityGroup.subnets] A
   * collection of references to subnets.
   * @member {string} [properties.subnet.networkSecurityGroup.resourceGuid] The
   * resource GUID property of the network security group resource.
   * @member {string}
   * [properties.subnet.networkSecurityGroup.provisioningState] The
   * provisioning state of the public IP resource. Possible values are:
   * 'Updating', 'Deleting', and 'Failed'.
   * @member {string} [properties.subnet.networkSecurityGroup.etag] A unique
   * read-only string that changes whenever the resource is updated.
   * @member {object} [properties.subnet.routeTable] The reference of the
   * RouteTable resource.
   * @member {array} [properties.subnet.routeTable.routes] Collection of routes
   * contained within a route table.
   * @member {array} [properties.subnet.routeTable.subnets] A collection of
   * references to subnets.
   * @member {boolean}
   * [properties.subnet.routeTable.disableBgpRoutePropagation] Gets or sets
   * whether to disable the routes learned by BGP on that route table. True
   * means disable.
   * @member {string} [properties.subnet.routeTable.provisioningState] The
   * provisioning state of the resource. Possible values are: 'Updating',
   * 'Deleting', and 'Failed'.
   * @member {string} [properties.subnet.routeTable.etag] Gets a unique
   * read-only string that changes whenever the resource is updated.
   * @member {array} [properties.subnet.serviceEndpoints] An array of service
   * endpoints.
   * @member {array} [properties.subnet.serviceEndpointPolicies] An array of
   * service endpoint policies.
   * @member {array} [properties.subnet.interfaceEndpoints] An array of
   * references to interface endpoints
   * @member {array} [properties.subnet.ipConfigurations] Gets an array of
   * references to the network interface IP configurations using subnet.
   * @member {array} [properties.subnet.resourceNavigationLinks] Gets an array
   * of references to the external resources using subnet.
   * @member {string} [properties.subnet.provisioningState] The provisioning
   * state of the resource.
   * @member {string} [properties.subnet.name] The name of the resource that is
   * unique within a resource group. This name can be used to access the
   * resource.
   * @member {string} [properties.subnet.etag] A unique read-only string that
   * changes whenever the resource is updated.
   * @member {string} [etag] A unique read-only string that changes whenever
   * the resource is updated.
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of IPConfigurationProfile
   *
   * @returns {object} metadata of IPConfigurationProfile
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'IPConfigurationProfile',
      type: {
        name: 'Composite',
        className: 'IPConfigurationProfile',
        modelProperties: {
          id: {
            required: false,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          properties: {
            required: false,
            serializedName: 'properties',
            type: {
              name: 'Composite',
              className: 'IPConfigurationProfilePropertiesFormat'
            }
          },
          etag: {
            required: false,
            serializedName: 'etag',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = IPConfigurationProfile;
