/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the LoadBalancer class.
 * @constructor
 * LoadBalancer resource
 * @member {string} [etag] Gets a unique read-only string that changes
 * whenever the resource is updated
 * 
 * @member {array} [frontendIPConfigurations] Gets or sets frontend IP
 * addresses of the load balancer
 * 
 * @member {array} [backendAddressPools] Gets or sets Pools of backend IP
 * addresseses
 * 
 * @member {array} [loadBalancingRules] Gets or sets loadbalancing rules
 * 
 * @member {array} [probes] Gets or sets list of Load balancer probes
 * 
 * @member {array} [inboundNatRules] Gets or sets list of inbound rules
 * 
 * @member {array} [inboundNatPools] Gets or sets inbound NAT pools
 * 
 * @member {array} [outboundNatRules] Gets or sets outbound NAT rules
 * 
 * @member {string} [resourceGuid] Gets or sets resource guid property of the
 * Load balancer resource
 * 
 * @member {string} [provisioningState] Gets or sets Provisioning state of the
 * PublicIP resource Updating/Deleting/Failed
 * 
 */
function LoadBalancer(parameters) {
  LoadBalancer['super_'].call(this, parameters);
  if (parameters !== null && parameters !== undefined) {
    if (parameters.etag !== undefined) {
      this.etag = parameters.etag;
    }
    if (parameters.frontendIPConfigurations) {
      var tempParametersfrontendIPConfigurations = [];
      parameters.frontendIPConfigurations.forEach(function(element) {
        if (element) {
          element = new models['FrontendIPConfiguration'](element);
        }
        tempParametersfrontendIPConfigurations.push(element);
      });
      this.frontendIPConfigurations = tempParametersfrontendIPConfigurations;
    }
    if (parameters.backendAddressPools) {
      var tempParametersbackendAddressPools = [];
      parameters.backendAddressPools.forEach(function(element1) {
        if (element1) {
          element1 = new models['BackendAddressPool'](element1);
        }
        tempParametersbackendAddressPools.push(element1);
      });
      this.backendAddressPools = tempParametersbackendAddressPools;
    }
    if (parameters.loadBalancingRules) {
      var tempParametersloadBalancingRules = [];
      parameters.loadBalancingRules.forEach(function(element2) {
        if (element2) {
          element2 = new models['LoadBalancingRule'](element2);
        }
        tempParametersloadBalancingRules.push(element2);
      });
      this.loadBalancingRules = tempParametersloadBalancingRules;
    }
    if (parameters.probes) {
      var tempParametersprobes = [];
      parameters.probes.forEach(function(element3) {
        if (element3) {
          element3 = new models['Probe'](element3);
        }
        tempParametersprobes.push(element3);
      });
      this.probes = tempParametersprobes;
    }
    if (parameters.inboundNatRules) {
      var tempParametersinboundNatRules = [];
      parameters.inboundNatRules.forEach(function(element4) {
        if (element4) {
          element4 = new models['InboundNatRule'](element4);
        }
        tempParametersinboundNatRules.push(element4);
      });
      this.inboundNatRules = tempParametersinboundNatRules;
    }
    if (parameters.inboundNatPools) {
      var tempParametersinboundNatPools = [];
      parameters.inboundNatPools.forEach(function(element5) {
        if (element5) {
          element5 = new models['InboundNatPool'](element5);
        }
        tempParametersinboundNatPools.push(element5);
      });
      this.inboundNatPools = tempParametersinboundNatPools;
    }
    if (parameters.outboundNatRules) {
      var tempParametersoutboundNatRules = [];
      parameters.outboundNatRules.forEach(function(element6) {
        if (element6) {
          element6 = new models['OutboundNatRule'](element6);
        }
        tempParametersoutboundNatRules.push(element6);
      });
      this.outboundNatRules = tempParametersoutboundNatRules;
    }
    if (parameters.resourceGuid !== undefined) {
      this.resourceGuid = parameters.resourceGuid;
    }
    if (parameters.provisioningState !== undefined) {
      this.provisioningState = parameters.provisioningState;
    }
  }    
}

util.inherits(LoadBalancer, models['Resource']);

/**
 * Validate the payload against the LoadBalancer schema
 *
 * @param {JSON} payload
 *
 */
LoadBalancer.prototype.serialize = function () {
  var payload = LoadBalancer['super_'].prototype.serialize.call(this);
  if (this['etag'] !== null && this['etag'] !== undefined) {
    if (typeof this['etag'].valueOf() !== 'string') {
      throw new Error('this[\'etag\'] must be of type string.');
    }
    payload['etag'] = this['etag'];
  }

  if (util.isArray(this['frontendIPConfigurations'])) {
    payload['properties']['frontendIPConfigurations'] = [];
    for (var i = 0; i < this['frontendIPConfigurations'].length; i++) {
      if (this['frontendIPConfigurations'][i]) {
        if (payload['properties'] === null || payload['properties'] === undefined) {
          payload['properties'] = {};
        }
        payload['properties']['frontendIPConfigurations'][i] = this['frontendIPConfigurations'][i].serialize();
      }
    }
  }

  if (util.isArray(this['backendAddressPools'])) {
    payload['properties']['backendAddressPools'] = [];
    for (var i1 = 0; i1 < this['backendAddressPools'].length; i1++) {
      if (this['backendAddressPools'][i1]) {
        if (payload['properties'] === null || payload['properties'] === undefined) {
          payload['properties'] = {};
        }
        payload['properties']['backendAddressPools'][i1] = this['backendAddressPools'][i1].serialize();
      }
    }
  }

  if (util.isArray(this['loadBalancingRules'])) {
    payload['properties']['loadBalancingRules'] = [];
    for (var i2 = 0; i2 < this['loadBalancingRules'].length; i2++) {
      if (this['loadBalancingRules'][i2]) {
        if (payload['properties'] === null || payload['properties'] === undefined) {
          payload['properties'] = {};
        }
        payload['properties']['loadBalancingRules'][i2] = this['loadBalancingRules'][i2].serialize();
      }
    }
  }

  if (util.isArray(this['probes'])) {
    payload['properties']['probes'] = [];
    for (var i3 = 0; i3 < this['probes'].length; i3++) {
      if (this['probes'][i3]) {
        if (payload['properties'] === null || payload['properties'] === undefined) {
          payload['properties'] = {};
        }
        payload['properties']['probes'][i3] = this['probes'][i3].serialize();
      }
    }
  }

  if (util.isArray(this['inboundNatRules'])) {
    payload['properties']['inboundNatRules'] = [];
    for (var i4 = 0; i4 < this['inboundNatRules'].length; i4++) {
      if (this['inboundNatRules'][i4]) {
        if (payload['properties'] === null || payload['properties'] === undefined) {
          payload['properties'] = {};
        }
        payload['properties']['inboundNatRules'][i4] = this['inboundNatRules'][i4].serialize();
      }
    }
  }

  if (util.isArray(this['inboundNatPools'])) {
    payload['properties']['inboundNatPools'] = [];
    for (var i5 = 0; i5 < this['inboundNatPools'].length; i5++) {
      if (this['inboundNatPools'][i5]) {
        if (payload['properties'] === null || payload['properties'] === undefined) {
          payload['properties'] = {};
        }
        payload['properties']['inboundNatPools'][i5] = this['inboundNatPools'][i5].serialize();
      }
    }
  }

  if (util.isArray(this['outboundNatRules'])) {
    payload['properties']['outboundNatRules'] = [];
    for (var i6 = 0; i6 < this['outboundNatRules'].length; i6++) {
      if (this['outboundNatRules'][i6]) {
        if (payload['properties'] === null || payload['properties'] === undefined) {
          payload['properties'] = {};
        }
        payload['properties']['outboundNatRules'][i6] = this['outboundNatRules'][i6].serialize();
      }
    }
  }

  if (this['resourceGuid'] !== null && this['resourceGuid'] !== undefined) {
    if (typeof this['resourceGuid'].valueOf() !== 'string') {
      throw new Error('this[\'resourceGuid\'] must be of type string.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['resourceGuid'] = this['resourceGuid'];
  }

  if (this['provisioningState'] !== null && this['provisioningState'] !== undefined) {
    if (typeof this['provisioningState'].valueOf() !== 'string') {
      throw new Error('this[\'provisioningState\'] must be of type string.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['provisioningState'] = this['provisioningState'];
  }

  return payload;
};

/**
 * Deserialize the instance to LoadBalancer schema
 *
 * @param {JSON} instance
 *
 */
LoadBalancer.prototype.deserialize = function (instance) {
  LoadBalancer['super_'].prototype.deserialize.call(this, instance);
  if (instance) {
    if (instance['etag'] !== undefined) {
      this['etag'] = instance['etag'];
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['frontendIPConfigurations']) {
        var tempInstancepropertiesfrontendIPConfigurations = [];
        instance['properties']['frontendIPConfigurations'].forEach(function(element7) {
          if (element7) {
            element7 = new models['FrontendIPConfiguration']().deserialize(element7);
          }
          tempInstancepropertiesfrontendIPConfigurations.push(element7);
        });
        this['frontendIPConfigurations'] = tempInstancepropertiesfrontendIPConfigurations;
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['backendAddressPools']) {
        var tempInstancepropertiesbackendAddressPools = [];
        instance['properties']['backendAddressPools'].forEach(function(element8) {
          if (element8) {
            element8 = new models['BackendAddressPool']().deserialize(element8);
          }
          tempInstancepropertiesbackendAddressPools.push(element8);
        });
        this['backendAddressPools'] = tempInstancepropertiesbackendAddressPools;
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['loadBalancingRules']) {
        var tempInstancepropertiesloadBalancingRules = [];
        instance['properties']['loadBalancingRules'].forEach(function(element9) {
          if (element9) {
            element9 = new models['LoadBalancingRule']().deserialize(element9);
          }
          tempInstancepropertiesloadBalancingRules.push(element9);
        });
        this['loadBalancingRules'] = tempInstancepropertiesloadBalancingRules;
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['probes']) {
        var tempInstancepropertiesprobes = [];
        instance['properties']['probes'].forEach(function(element10) {
          if (element10) {
            element10 = new models['Probe']().deserialize(element10);
          }
          tempInstancepropertiesprobes.push(element10);
        });
        this['probes'] = tempInstancepropertiesprobes;
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['inboundNatRules']) {
        var tempInstancepropertiesinboundNatRules = [];
        instance['properties']['inboundNatRules'].forEach(function(element11) {
          if (element11) {
            element11 = new models['InboundNatRule']().deserialize(element11);
          }
          tempInstancepropertiesinboundNatRules.push(element11);
        });
        this['inboundNatRules'] = tempInstancepropertiesinboundNatRules;
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['inboundNatPools']) {
        var tempInstancepropertiesinboundNatPools = [];
        instance['properties']['inboundNatPools'].forEach(function(element12) {
          if (element12) {
            element12 = new models['InboundNatPool']().deserialize(element12);
          }
          tempInstancepropertiesinboundNatPools.push(element12);
        });
        this['inboundNatPools'] = tempInstancepropertiesinboundNatPools;
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['outboundNatRules']) {
        var tempInstancepropertiesoutboundNatRules = [];
        instance['properties']['outboundNatRules'].forEach(function(element13) {
          if (element13) {
            element13 = new models['OutboundNatRule']().deserialize(element13);
          }
          tempInstancepropertiesoutboundNatRules.push(element13);
        });
        this['outboundNatRules'] = tempInstancepropertiesoutboundNatRules;
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['resourceGuid'] !== undefined) {
        this['resourceGuid'] = instance['properties']['resourceGuid'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['provisioningState'] !== undefined) {
        this['provisioningState'] = instance['properties']['provisioningState'];
      }
    }
  }

  return this;
};

module.exports = LoadBalancer;
