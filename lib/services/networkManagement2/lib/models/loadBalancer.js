/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the LoadBalancer class.
 * @constructor
 * LoadBalancer resource
 *
 * @member {array} [frontendIPConfigurations] Gets or sets frontend IP
 * addresses of the load balancer
 * 
 * @member {array} [backendAddressPools] Gets or sets Pools of backend IP
 * addresses
 * 
 * @member {array} [loadBalancingRules] Gets or sets load balancing rules
 * 
 * @member {array} [probes] Gets or sets list of Load balancer probes
 * 
 * @member {array} [inboundNatRules] Gets or sets list of inbound rules
 * 
 * @member {array} [inboundNatPools] Gets or sets inbound NAT pools
 * 
 * @member {array} [outboundNatRules] Gets or sets outbound NAT rules
 * 
 * @member {string} [resourceGuid] Gets or sets resource guid property of the
 * Load balancer resource
 * 
 * @member {string} [provisioningState] Gets provisioning state of the
 * PublicIP resource Updating/Deleting/Failed
 * 
 * @member {string} [etag] Gets a unique read-only string that changes
 * whenever the resource is updated
 * 
 */
function LoadBalancer() {
  LoadBalancer['super_'].call(this);
}

util.inherits(LoadBalancer, models['Resource']);

/**
 * Defines the metadata of LoadBalancer
 *
 * @returns {object} metadata of LoadBalancer
 *
 */
LoadBalancer.prototype.mapper = function () {
  return {
    required: false,
    serializedName: 'LoadBalancer',
    type: {
      name: 'Composite',
      className: 'LoadBalancer',
      modelProperties: {
        id: {
          required: false,
          serializedName: 'id',
          type: {
            name: 'String'
          }
        },
        name: {
          required: false,
          readOnly: true,
          serializedName: 'name',
          type: {
            name: 'String'
          }
        },
        type: {
          required: false,
          readOnly: true,
          serializedName: 'type',
          type: {
            name: 'String'
          }
        },
        location: {
          required: false,
          serializedName: 'location',
          type: {
            name: 'String'
          }
        },
        tags: {
          required: false,
          serializedName: 'tags',
          type: {
            name: 'Dictionary',
            value: {
                required: false,
                serializedName: 'StringElementType',
                type: {
                  name: 'String'
                }
            }
          }
        },
        frontendIPConfigurations: {
          required: false,
          serializedName: 'properties.frontendIPConfigurations',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'FrontendIPConfigurationElementType',
                type: {
                  name: 'Composite',
                  className: 'FrontendIPConfiguration'
                }
            }
          }
        },
        backendAddressPools: {
          required: false,
          serializedName: 'properties.backendAddressPools',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'BackendAddressPoolElementType',
                type: {
                  name: 'Composite',
                  className: 'BackendAddressPool'
                }
            }
          }
        },
        loadBalancingRules: {
          required: false,
          serializedName: 'properties.loadBalancingRules',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'LoadBalancingRuleElementType',
                type: {
                  name: 'Composite',
                  className: 'LoadBalancingRule'
                }
            }
          }
        },
        probes: {
          required: false,
          serializedName: 'properties.probes',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'ProbeElementType',
                type: {
                  name: 'Composite',
                  className: 'Probe'
                }
            }
          }
        },
        inboundNatRules: {
          required: false,
          serializedName: 'properties.inboundNatRules',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'InboundNatRuleElementType',
                type: {
                  name: 'Composite',
                  className: 'InboundNatRule'
                }
            }
          }
        },
        inboundNatPools: {
          required: false,
          serializedName: 'properties.inboundNatPools',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'InboundNatPoolElementType',
                type: {
                  name: 'Composite',
                  className: 'InboundNatPool'
                }
            }
          }
        },
        outboundNatRules: {
          required: false,
          serializedName: 'properties.outboundNatRules',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'OutboundNatRuleElementType',
                type: {
                  name: 'Composite',
                  className: 'OutboundNatRule'
                }
            }
          }
        },
        resourceGuid: {
          required: false,
          serializedName: 'properties.resourceGuid',
          type: {
            name: 'String'
          }
        },
        provisioningState: {
          required: false,
          serializedName: 'properties.provisioningState',
          type: {
            name: 'String'
          }
        },
        etag: {
          required: false,
          serializedName: 'etag',
          type: {
            name: 'String'
          }
        }
      }
    }
  };
};

module.exports = LoadBalancer;
