/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the VirtualNetwork class.
 * @constructor
 * Virtual Network resource
 * @member {string} [etag] Gets a unique read-only string that changes
 * whenever the resource is updated
 * 
 * @member {object} [addressSpace] Gets or sets AddressSpace that contains an
 * array of IP address ranges that can be used by subnets
 * 
 * @member {array} [addressSpace.addressPrefixes] Gets or sets List of address
 * blocks reserved for this virtual network in CIDR notation
 * 
 * @member {object} [dhcpOptions] Gets or sets DHCPOptions that contains an
 * array of DNS servers available to VMs deployed in the virtual network
 * 
 * @member {array} [dhcpOptions.dnsServers] Gets or sets list of DNS servers
 * IP addresses
 * 
 * @member {array} [subnets] Gets or sets List of subnets in a VirtualNetwork
 * 
 * @member {string} [resourceGuid] Gets or sets resource guid property of the
 * VirtualNetwork resource
 * 
 * @member {string} [provisioningState] Gets or sets Provisioning state of the
 * PublicIP resource Updating/Deleting/Failed
 * 
 */
function VirtualNetwork(parameters) {
  VirtualNetwork['super_'].call(this, parameters);
  if (parameters !== null && parameters !== undefined) {
    if (parameters.etag !== undefined) {
      this.etag = parameters.etag;
    }
    if (parameters.addressSpace) {
      this.addressSpace = new models['AddressSpace'](parameters.addressSpace);
    }
    if (parameters.dhcpOptions) {
      this.dhcpOptions = new models['DhcpOptions'](parameters.dhcpOptions);
    }
    if (parameters.subnets) {
      var tempParameterssubnets = [];
      parameters.subnets.forEach(function(element) {
        if (element) {
          element = new models['Subnet'](element);
        }
        tempParameterssubnets.push(element);
      });
      this.subnets = tempParameterssubnets;
    }
    if (parameters.resourceGuid !== undefined) {
      this.resourceGuid = parameters.resourceGuid;
    }
    if (parameters.provisioningState !== undefined) {
      this.provisioningState = parameters.provisioningState;
    }
  }    
}

util.inherits(VirtualNetwork, models['Resource']);

/**
 * Validate the payload against the VirtualNetwork schema
 *
 * @param {JSON} payload
 *
 */
VirtualNetwork.prototype.serialize = function () {
  var payload = VirtualNetwork['super_'].prototype.serialize.call(this);
  if (this['etag'] !== null && this['etag'] !== undefined) {
    if (typeof this['etag'].valueOf() !== 'string') {
      throw new Error('this[\'etag\'] must be of type string.');
    }
    payload['etag'] = this['etag'];
  }

  if (this['addressSpace']) {
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['addressSpace'] = this['addressSpace'].serialize();
  }

  if (this['dhcpOptions']) {
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['dhcpOptions'] = this['dhcpOptions'].serialize();
  }

  if (util.isArray(this['subnets'])) {
    payload['properties']['subnets'] = [];
    for (var i = 0; i < this['subnets'].length; i++) {
      if (this['subnets'][i]) {
        if (payload['properties'] === null || payload['properties'] === undefined) {
          payload['properties'] = {};
        }
        payload['properties']['subnets'][i] = this['subnets'][i].serialize();
      }
    }
  }

  if (this['resourceGuid'] !== null && this['resourceGuid'] !== undefined) {
    if (typeof this['resourceGuid'].valueOf() !== 'string') {
      throw new Error('this[\'resourceGuid\'] must be of type string.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['resourceGuid'] = this['resourceGuid'];
  }

  if (this['provisioningState'] !== null && this['provisioningState'] !== undefined) {
    if (typeof this['provisioningState'].valueOf() !== 'string') {
      throw new Error('this[\'provisioningState\'] must be of type string.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['provisioningState'] = this['provisioningState'];
  }

  return payload;
};

/**
 * Deserialize the instance to VirtualNetwork schema
 *
 * @param {JSON} instance
 *
 */
VirtualNetwork.prototype.deserialize = function (instance) {
  VirtualNetwork['super_'].prototype.deserialize.call(this, instance);
  if (instance) {
    if (instance['etag'] !== undefined) {
      this['etag'] = instance['etag'];
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['addressSpace']) {
        this['addressSpace'] = new models['AddressSpace']().deserialize(instance['properties']['addressSpace']);
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['dhcpOptions']) {
        this['dhcpOptions'] = new models['DhcpOptions']().deserialize(instance['properties']['dhcpOptions']);
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['subnets']) {
        var tempInstancepropertiessubnets = [];
        instance['properties']['subnets'].forEach(function(element1) {
          if (element1) {
            element1 = new models['Subnet']().deserialize(element1);
          }
          tempInstancepropertiessubnets.push(element1);
        });
        this['subnets'] = tempInstancepropertiessubnets;
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['resourceGuid'] !== undefined) {
        this['resourceGuid'] = instance['properties']['resourceGuid'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['provisioningState'] !== undefined) {
        this['provisioningState'] = instance['properties']['provisioningState'];
      }
    }
  }

  return this;
};

module.exports = VirtualNetwork;
