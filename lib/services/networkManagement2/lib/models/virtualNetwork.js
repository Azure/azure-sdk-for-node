/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the VirtualNetwork class.
 * @constructor
 * Virtual Network resource
 *
 * @member {object} [addressSpace] Gets or sets AddressSpace that contains an
 * array of IP address ranges that can be used by subnets
 * 
 * @member {array} [addressSpace.addressPrefixes] Gets or sets List of address
 * blocks reserved for this virtual network in CIDR notation
 * 
 * @member {object} [dhcpOptions] Gets or sets DHCPOptions that contains an
 * array of DNS servers available to VMs deployed in the virtual network
 * 
 * @member {array} [dhcpOptions.dnsServers] Gets or sets list of DNS servers
 * IP addresses
 * 
 * @member {array} [subnets] Gets or sets List of subnets in a VirtualNetwork
 * 
 * @member {string} [resourceGuid] Gets or sets resource guid property of the
 * VirtualNetwork resource
 * 
 * @member {string} [provisioningState] Gets or sets Provisioning state of the
 * PublicIP resource Updating/Deleting/Failed
 * 
 * @member {string} [etag] Gets a unique read-only string that changes
 * whenever the resource is updated
 * 
 */
function VirtualNetwork() {
  VirtualNetwork['super_'].call(this);
}

util.inherits(VirtualNetwork, models['Resource']);

/**
 * Defines the metadata of VirtualNetwork
 *
 * @returns {object} metadata of VirtualNetwork
 *
 */
VirtualNetwork.prototype.mapper = function () {
  return {
    required: false,
    serializedName: 'VirtualNetwork',
    type: {
      name: 'Composite',
      className: 'VirtualNetwork',
      modelProperties: {
        id: {
          required: false,
          serializedName: 'id',
          type: {
            name: 'String'
          }
        },
        name: {
          required: false,
          readOnly: true,
          serializedName: 'name',
          type: {
            name: 'String'
          }
        },
        type: {
          required: false,
          readOnly: true,
          serializedName: 'type',
          type: {
            name: 'String'
          }
        },
        location: {
          required: false,
          serializedName: 'location',
          type: {
            name: 'String'
          }
        },
        tags: {
          required: false,
          serializedName: 'tags',
          type: {
            name: 'Dictionary',
            value: {
                required: false,
                serializedName: 'StringElementType',
                type: {
                  name: 'String'
                }
            }
          }
        },
        addressSpace: {
          required: false,
          serializedName: 'properties.addressSpace',
          type: {
            name: 'Composite',
            className: 'AddressSpace'
          }
        },
        dhcpOptions: {
          required: false,
          serializedName: 'properties.dhcpOptions',
          type: {
            name: 'Composite',
            className: 'DhcpOptions'
          }
        },
        subnets: {
          required: false,
          serializedName: 'properties.subnets',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'SubnetElementType',
                type: {
                  name: 'Composite',
                  className: 'Subnet'
                }
            }
          }
        },
        resourceGuid: {
          required: false,
          serializedName: 'properties.resourceGuid',
          type: {
            name: 'String'
          }
        },
        provisioningState: {
          required: false,
          serializedName: 'properties.provisioningState',
          type: {
            name: 'String'
          }
        },
        etag: {
          required: false,
          serializedName: 'etag',
          type: {
            name: 'String'
          }
        }
      }
    }
  };
};

module.exports = VirtualNetwork;
