/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the ApplicationGateway class.
 * @constructor
 * ApplicationGateways resource
 * @member {string} [etag] Gets a unique read-only string that changes
 * whenever the resource is updated
 * 
 * @member {object} [sku] Gets or sets sku of application gateway resource
 * 
 * @member {string} [sku.name] Gets or sets name of application gateway SKU.
 * Possible values for this property include: 'Standard_Small',
 * 'Standard_Medium', 'Standard_Large'.
 * 
 * @member {string} [sku.tier] Gets or sets tier of application gateway.
 * Possible values for this property include: 'Standard'.
 * 
 * @member {number} [sku.capacity] Gets or sets capacity (instance count) of
 * application gateway
 * 
 * @member {string} [operationalState] Gets operational state of application
 * gateway resource. Possible values for this property include: 'Stopped',
 * 'Starting', 'Running', 'Stopping'.
 * 
 * @member {array} [gatewayIPConfigurations] Gets or sets subnets of
 * application gateway resource
 * 
 * @member {array} [sslCertificates] Gets or sets ssl certificates of
 * application gateway resource
 * 
 * @member {array} [frontendIPConfigurations] Gets or sets frontend IP
 * addresses of application gateway resource
 * 
 * @member {array} [frontendPorts] Gets or sets frontend ports of application
 * gateway resource
 * 
 * @member {array} [probes] Gets or sets probes of application gateway resource
 * 
 * @member {array} [backendAddressPools] Gets or sets backend address pool of
 * application gateway resource
 * 
 * @member {array} [backendHttpSettingsCollection] Gets or sets backend http
 * settings of application gateway resource
 * 
 * @member {array} [httpListeners] Gets or sets HTTP listeners of application
 * gateway resource
 * 
 * @member {array} [urlPathMaps] Gets or sets URL path map of application
 * gateway resource
 * 
 * @member {array} [requestRoutingRules] Gets or sets request routing rules of
 * application gateway resource
 * 
 * @member {string} [resourceGuid] Gets or sets resource guid property of the
 * ApplicationGateway resource
 * 
 * @member {string} [provisioningState] Gets or sets Provisioning state of the
 * ApplicationGateway resource Updating/Deleting/Failed
 * 
 */
function ApplicationGateway(parameters) {
  ApplicationGateway['super_'].call(this, parameters);
  if (parameters !== null && parameters !== undefined) {
    if (parameters.etag !== undefined) {
      this.etag = parameters.etag;
    }
    if (parameters.sku) {
      this.sku = new models['ApplicationGatewaySku'](parameters.sku);
    }
    if (parameters.operationalState !== undefined) {
      this.operationalState = parameters.operationalState;
    }
    if (parameters.gatewayIPConfigurations) {
      var tempParametersgatewayIPConfigurations = [];
      parameters.gatewayIPConfigurations.forEach(function(element) {
        if (element) {
          element = new models['ApplicationGatewayIPConfiguration'](element);
        }
        tempParametersgatewayIPConfigurations.push(element);
      });
      this.gatewayIPConfigurations = tempParametersgatewayIPConfigurations;
    }
    if (parameters.sslCertificates) {
      var tempParameterssslCertificates = [];
      parameters.sslCertificates.forEach(function(element1) {
        if (element1) {
          element1 = new models['ApplicationGatewaySslCertificate'](element1);
        }
        tempParameterssslCertificates.push(element1);
      });
      this.sslCertificates = tempParameterssslCertificates;
    }
    if (parameters.frontendIPConfigurations) {
      var tempParametersfrontendIPConfigurations = [];
      parameters.frontendIPConfigurations.forEach(function(element2) {
        if (element2) {
          element2 = new models['ApplicationGatewayFrontendIPConfiguration'](element2);
        }
        tempParametersfrontendIPConfigurations.push(element2);
      });
      this.frontendIPConfigurations = tempParametersfrontendIPConfigurations;
    }
    if (parameters.frontendPorts) {
      var tempParametersfrontendPorts = [];
      parameters.frontendPorts.forEach(function(element3) {
        if (element3) {
          element3 = new models['ApplicationGatewayFrontendPort'](element3);
        }
        tempParametersfrontendPorts.push(element3);
      });
      this.frontendPorts = tempParametersfrontendPorts;
    }
    if (parameters.probes) {
      var tempParametersprobes = [];
      parameters.probes.forEach(function(element4) {
        if (element4) {
          element4 = new models['ApplicationGatewayProbe'](element4);
        }
        tempParametersprobes.push(element4);
      });
      this.probes = tempParametersprobes;
    }
    if (parameters.backendAddressPools) {
      var tempParametersbackendAddressPools = [];
      parameters.backendAddressPools.forEach(function(element5) {
        if (element5) {
          element5 = new models['ApplicationGatewayBackendAddressPool'](element5);
        }
        tempParametersbackendAddressPools.push(element5);
      });
      this.backendAddressPools = tempParametersbackendAddressPools;
    }
    if (parameters.backendHttpSettingsCollection) {
      var tempParametersbackendHttpSettingsCollection = [];
      parameters.backendHttpSettingsCollection.forEach(function(element6) {
        if (element6) {
          element6 = new models['ApplicationGatewayBackendHttpSettings'](element6);
        }
        tempParametersbackendHttpSettingsCollection.push(element6);
      });
      this.backendHttpSettingsCollection = tempParametersbackendHttpSettingsCollection;
    }
    if (parameters.httpListeners) {
      var tempParametershttpListeners = [];
      parameters.httpListeners.forEach(function(element7) {
        if (element7) {
          element7 = new models['ApplicationGatewayHttpListener'](element7);
        }
        tempParametershttpListeners.push(element7);
      });
      this.httpListeners = tempParametershttpListeners;
    }
    if (parameters.urlPathMaps) {
      var tempParametersurlPathMaps = [];
      parameters.urlPathMaps.forEach(function(element8) {
        if (element8) {
          element8 = new models['ApplicationGatewayUrlPathMap'](element8);
        }
        tempParametersurlPathMaps.push(element8);
      });
      this.urlPathMaps = tempParametersurlPathMaps;
    }
    if (parameters.requestRoutingRules) {
      var tempParametersrequestRoutingRules = [];
      parameters.requestRoutingRules.forEach(function(element9) {
        if (element9) {
          element9 = new models['ApplicationGatewayRequestRoutingRule'](element9);
        }
        tempParametersrequestRoutingRules.push(element9);
      });
      this.requestRoutingRules = tempParametersrequestRoutingRules;
    }
    if (parameters.resourceGuid !== undefined) {
      this.resourceGuid = parameters.resourceGuid;
    }
    if (parameters.provisioningState !== undefined) {
      this.provisioningState = parameters.provisioningState;
    }
  }    
}

util.inherits(ApplicationGateway, models['Resource']);

/**
 * Validate the payload against the ApplicationGateway schema
 *
 * @param {JSON} payload
 *
 */
ApplicationGateway.prototype.serialize = function () {
  var payload = ApplicationGateway['super_'].prototype.serialize.call(this);
  if (this['etag'] !== null && this['etag'] !== undefined) {
    if (typeof this['etag'].valueOf() !== 'string') {
      throw new Error('this[\'etag\'] must be of type string.');
    }
    payload['etag'] = this['etag'];
  }

  if (this['sku']) {
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['sku'] = this['sku'].serialize();
  }

  if (this['operationalState'] !== null && this['operationalState'] !== undefined) {
    if (typeof this['operationalState'].valueOf() !== 'string') {
      throw new Error('this[\'operationalState\'] must be of type string.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['operationalState'] = this['operationalState'];
  }

  if (util.isArray(this['gatewayIPConfigurations'])) {
    payload['properties']['gatewayIPConfigurations'] = [];
    for (var i = 0; i < this['gatewayIPConfigurations'].length; i++) {
      if (this['gatewayIPConfigurations'][i]) {
        if (payload['properties'] === null || payload['properties'] === undefined) {
          payload['properties'] = {};
        }
        payload['properties']['gatewayIPConfigurations'][i] = this['gatewayIPConfigurations'][i].serialize();
      }
    }
  }

  if (util.isArray(this['sslCertificates'])) {
    payload['properties']['sslCertificates'] = [];
    for (var i1 = 0; i1 < this['sslCertificates'].length; i1++) {
      if (this['sslCertificates'][i1]) {
        if (payload['properties'] === null || payload['properties'] === undefined) {
          payload['properties'] = {};
        }
        payload['properties']['sslCertificates'][i1] = this['sslCertificates'][i1].serialize();
      }
    }
  }

  if (util.isArray(this['frontendIPConfigurations'])) {
    payload['properties']['frontendIPConfigurations'] = [];
    for (var i2 = 0; i2 < this['frontendIPConfigurations'].length; i2++) {
      if (this['frontendIPConfigurations'][i2]) {
        if (payload['properties'] === null || payload['properties'] === undefined) {
          payload['properties'] = {};
        }
        payload['properties']['frontendIPConfigurations'][i2] = this['frontendIPConfigurations'][i2].serialize();
      }
    }
  }

  if (util.isArray(this['frontendPorts'])) {
    payload['properties']['frontendPorts'] = [];
    for (var i3 = 0; i3 < this['frontendPorts'].length; i3++) {
      if (this['frontendPorts'][i3]) {
        if (payload['properties'] === null || payload['properties'] === undefined) {
          payload['properties'] = {};
        }
        payload['properties']['frontendPorts'][i3] = this['frontendPorts'][i3].serialize();
      }
    }
  }

  if (util.isArray(this['probes'])) {
    payload['properties']['probes'] = [];
    for (var i4 = 0; i4 < this['probes'].length; i4++) {
      if (this['probes'][i4]) {
        if (payload['properties'] === null || payload['properties'] === undefined) {
          payload['properties'] = {};
        }
        payload['properties']['probes'][i4] = this['probes'][i4].serialize();
      }
    }
  }

  if (util.isArray(this['backendAddressPools'])) {
    payload['properties']['backendAddressPools'] = [];
    for (var i5 = 0; i5 < this['backendAddressPools'].length; i5++) {
      if (this['backendAddressPools'][i5]) {
        if (payload['properties'] === null || payload['properties'] === undefined) {
          payload['properties'] = {};
        }
        payload['properties']['backendAddressPools'][i5] = this['backendAddressPools'][i5].serialize();
      }
    }
  }

  if (util.isArray(this['backendHttpSettingsCollection'])) {
    payload['properties']['backendHttpSettingsCollection'] = [];
    for (var i6 = 0; i6 < this['backendHttpSettingsCollection'].length; i6++) {
      if (this['backendHttpSettingsCollection'][i6]) {
        if (payload['properties'] === null || payload['properties'] === undefined) {
          payload['properties'] = {};
        }
        payload['properties']['backendHttpSettingsCollection'][i6] = this['backendHttpSettingsCollection'][i6].serialize();
      }
    }
  }

  if (util.isArray(this['httpListeners'])) {
    payload['properties']['httpListeners'] = [];
    for (var i7 = 0; i7 < this['httpListeners'].length; i7++) {
      if (this['httpListeners'][i7]) {
        if (payload['properties'] === null || payload['properties'] === undefined) {
          payload['properties'] = {};
        }
        payload['properties']['httpListeners'][i7] = this['httpListeners'][i7].serialize();
      }
    }
  }

  if (util.isArray(this['urlPathMaps'])) {
    payload['properties']['urlPathMaps'] = [];
    for (var i8 = 0; i8 < this['urlPathMaps'].length; i8++) {
      if (this['urlPathMaps'][i8]) {
        if (payload['properties'] === null || payload['properties'] === undefined) {
          payload['properties'] = {};
        }
        payload['properties']['urlPathMaps'][i8] = this['urlPathMaps'][i8].serialize();
      }
    }
  }

  if (util.isArray(this['requestRoutingRules'])) {
    payload['properties']['requestRoutingRules'] = [];
    for (var i9 = 0; i9 < this['requestRoutingRules'].length; i9++) {
      if (this['requestRoutingRules'][i9]) {
        if (payload['properties'] === null || payload['properties'] === undefined) {
          payload['properties'] = {};
        }
        payload['properties']['requestRoutingRules'][i9] = this['requestRoutingRules'][i9].serialize();
      }
    }
  }

  if (this['resourceGuid'] !== null && this['resourceGuid'] !== undefined) {
    if (typeof this['resourceGuid'].valueOf() !== 'string') {
      throw new Error('this[\'resourceGuid\'] must be of type string.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['resourceGuid'] = this['resourceGuid'];
  }

  if (this['provisioningState'] !== null && this['provisioningState'] !== undefined) {
    if (typeof this['provisioningState'].valueOf() !== 'string') {
      throw new Error('this[\'provisioningState\'] must be of type string.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['provisioningState'] = this['provisioningState'];
  }

  return payload;
};

/**
 * Deserialize the instance to ApplicationGateway schema
 *
 * @param {JSON} instance
 *
 */
ApplicationGateway.prototype.deserialize = function (instance) {
  ApplicationGateway['super_'].prototype.deserialize.call(this, instance);
  if (instance) {
    if (instance['etag'] !== undefined) {
      this['etag'] = instance['etag'];
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['sku']) {
        this['sku'] = new models['ApplicationGatewaySku']().deserialize(instance['properties']['sku']);
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['operationalState'] !== undefined) {
        this['operationalState'] = instance['properties']['operationalState'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['gatewayIPConfigurations']) {
        var tempInstancepropertiesgatewayIPConfigurations = [];
        instance['properties']['gatewayIPConfigurations'].forEach(function(element10) {
          if (element10) {
            element10 = new models['ApplicationGatewayIPConfiguration']().deserialize(element10);
          }
          tempInstancepropertiesgatewayIPConfigurations.push(element10);
        });
        this['gatewayIPConfigurations'] = tempInstancepropertiesgatewayIPConfigurations;
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['sslCertificates']) {
        var tempInstancepropertiessslCertificates = [];
        instance['properties']['sslCertificates'].forEach(function(element11) {
          if (element11) {
            element11 = new models['ApplicationGatewaySslCertificate']().deserialize(element11);
          }
          tempInstancepropertiessslCertificates.push(element11);
        });
        this['sslCertificates'] = tempInstancepropertiessslCertificates;
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['frontendIPConfigurations']) {
        var tempInstancepropertiesfrontendIPConfigurations = [];
        instance['properties']['frontendIPConfigurations'].forEach(function(element12) {
          if (element12) {
            element12 = new models['ApplicationGatewayFrontendIPConfiguration']().deserialize(element12);
          }
          tempInstancepropertiesfrontendIPConfigurations.push(element12);
        });
        this['frontendIPConfigurations'] = tempInstancepropertiesfrontendIPConfigurations;
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['frontendPorts']) {
        var tempInstancepropertiesfrontendPorts = [];
        instance['properties']['frontendPorts'].forEach(function(element13) {
          if (element13) {
            element13 = new models['ApplicationGatewayFrontendPort']().deserialize(element13);
          }
          tempInstancepropertiesfrontendPorts.push(element13);
        });
        this['frontendPorts'] = tempInstancepropertiesfrontendPorts;
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['probes']) {
        var tempInstancepropertiesprobes = [];
        instance['properties']['probes'].forEach(function(element14) {
          if (element14) {
            element14 = new models['ApplicationGatewayProbe']().deserialize(element14);
          }
          tempInstancepropertiesprobes.push(element14);
        });
        this['probes'] = tempInstancepropertiesprobes;
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['backendAddressPools']) {
        var tempInstancepropertiesbackendAddressPools = [];
        instance['properties']['backendAddressPools'].forEach(function(element15) {
          if (element15) {
            element15 = new models['ApplicationGatewayBackendAddressPool']().deserialize(element15);
          }
          tempInstancepropertiesbackendAddressPools.push(element15);
        });
        this['backendAddressPools'] = tempInstancepropertiesbackendAddressPools;
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['backendHttpSettingsCollection']) {
        var tempInstancepropertiesbackendHttpSettingsCollection = [];
        instance['properties']['backendHttpSettingsCollection'].forEach(function(element16) {
          if (element16) {
            element16 = new models['ApplicationGatewayBackendHttpSettings']().deserialize(element16);
          }
          tempInstancepropertiesbackendHttpSettingsCollection.push(element16);
        });
        this['backendHttpSettingsCollection'] = tempInstancepropertiesbackendHttpSettingsCollection;
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['httpListeners']) {
        var tempInstancepropertieshttpListeners = [];
        instance['properties']['httpListeners'].forEach(function(element17) {
          if (element17) {
            element17 = new models['ApplicationGatewayHttpListener']().deserialize(element17);
          }
          tempInstancepropertieshttpListeners.push(element17);
        });
        this['httpListeners'] = tempInstancepropertieshttpListeners;
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['urlPathMaps']) {
        var tempInstancepropertiesurlPathMaps = [];
        instance['properties']['urlPathMaps'].forEach(function(element18) {
          if (element18) {
            element18 = new models['ApplicationGatewayUrlPathMap']().deserialize(element18);
          }
          tempInstancepropertiesurlPathMaps.push(element18);
        });
        this['urlPathMaps'] = tempInstancepropertiesurlPathMaps;
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['requestRoutingRules']) {
        var tempInstancepropertiesrequestRoutingRules = [];
        instance['properties']['requestRoutingRules'].forEach(function(element19) {
          if (element19) {
            element19 = new models['ApplicationGatewayRequestRoutingRule']().deserialize(element19);
          }
          tempInstancepropertiesrequestRoutingRules.push(element19);
        });
        this['requestRoutingRules'] = tempInstancepropertiesrequestRoutingRules;
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['resourceGuid'] !== undefined) {
        this['resourceGuid'] = instance['properties']['resourceGuid'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['provisioningState'] !== undefined) {
        this['provisioningState'] = instance['properties']['provisioningState'];
      }
    }
  }

  return this;
};

module.exports = ApplicationGateway;
