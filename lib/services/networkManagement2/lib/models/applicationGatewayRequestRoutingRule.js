/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.13.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the ApplicationGatewayRequestRoutingRule class.
 * @constructor
 * Request routing rule of application gateway
 * @member {string} [name] Gets name of the resource that is unique within a
 * resource group. This name can be used to access the resource
 * 
 * @member {string} [etag] A unique read-only string that changes whenever the
 * resource is updated
 * 
 * @member {string} [ruleType] Gets or sets the rule type. Possible values for
 * this property include: 'Basic'.
 * 
 * @member {object} [backendAddressPool] Gets or sets backend address pool
 * resource of application gateway
 * 
 * @member {string} [backendAddressPool.id] Resource Id
 * 
 * @member {object} [backendHttpSettings] Gets or sets frontend port resource
 * of application gateway
 * 
 * @member {string} [backendHttpSettings.id] Resource Id
 * 
 * @member {object} [httpListener] Gets or sets http listener resource of
 * application gateway
 * 
 * @member {string} [httpListener.id] Resource Id
 * 
 * @member {string} [provisioningState] Gets or sets Provisioning state of the
 * request routing rule resource Updating/Deleting/Failed
 * 
 */
function ApplicationGatewayRequestRoutingRule(parameters) {
  ApplicationGatewayRequestRoutingRule['super_'].call(this, parameters);
  if (parameters !== null && parameters !== undefined) {
    if (parameters.name !== undefined) {
      this.name = parameters.name;
    }
    if (parameters.etag !== undefined) {
      this.etag = parameters.etag;
    }
    if (parameters.ruleType !== undefined) {
      this.ruleType = parameters.ruleType;
    }
    if (parameters.backendAddressPool) {
      this.backendAddressPool = new models['SubResource'](parameters.backendAddressPool);
    }
    if (parameters.backendHttpSettings) {
      this.backendHttpSettings = new models['SubResource'](parameters.backendHttpSettings);
    }
    if (parameters.httpListener) {
      this.httpListener = new models['SubResource'](parameters.httpListener);
    }
    if (parameters.provisioningState !== undefined) {
      this.provisioningState = parameters.provisioningState;
    }
  }    
}

util.inherits(ApplicationGatewayRequestRoutingRule, models['SubResource']);

/**
 * Validate the payload against the ApplicationGatewayRequestRoutingRule schema
 *
 * @param {JSON} payload
 *
 */
ApplicationGatewayRequestRoutingRule.prototype.serialize = function () {
  var payload = ApplicationGatewayRequestRoutingRule['super_'].prototype.serialize.call(this);
  if (this['name'] !== null && this['name'] !== undefined) {
    if (typeof this['name'].valueOf() !== 'string') {
      throw new Error('this[\'name\'] must be of type string.');
    }
    payload['name'] = this['name'];
  }

  if (this['etag'] !== null && this['etag'] !== undefined) {
    if (typeof this['etag'].valueOf() !== 'string') {
      throw new Error('this[\'etag\'] must be of type string.');
    }
    payload['etag'] = this['etag'];
  }

  if (this['ruleType'] !== null && this['ruleType'] !== undefined) {
    if (typeof this['ruleType'].valueOf() !== 'string') {
      throw new Error('this[\'ruleType\'] must be of type string.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['ruleType'] = this['ruleType'];
  }

  if (this['backendAddressPool']) {
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['backendAddressPool'] = this['backendAddressPool'].serialize();
  }

  if (this['backendHttpSettings']) {
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['backendHttpSettings'] = this['backendHttpSettings'].serialize();
  }

  if (this['httpListener']) {
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['httpListener'] = this['httpListener'].serialize();
  }

  if (this['provisioningState'] !== null && this['provisioningState'] !== undefined) {
    if (typeof this['provisioningState'].valueOf() !== 'string') {
      throw new Error('this[\'provisioningState\'] must be of type string.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['provisioningState'] = this['provisioningState'];
  }

  return payload;
};

/**
 * Deserialize the instance to ApplicationGatewayRequestRoutingRule schema
 *
 * @param {JSON} instance
 *
 */
ApplicationGatewayRequestRoutingRule.prototype.deserialize = function (instance) {
  ApplicationGatewayRequestRoutingRule['super_'].prototype.deserialize.call(this, instance);
  if (instance) {
    if (instance['name'] !== undefined) {
      this['name'] = instance['name'];
    }

    if (instance['etag'] !== undefined) {
      this['etag'] = instance['etag'];
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['ruleType'] !== undefined) {
        this['ruleType'] = instance['properties']['ruleType'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['backendAddressPool']) {
        this['backendAddressPool'] = new models['SubResource']().deserialize(instance['properties']['backendAddressPool']);
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['backendHttpSettings']) {
        this['backendHttpSettings'] = new models['SubResource']().deserialize(instance['properties']['backendHttpSettings']);
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['httpListener']) {
        this['httpListener'] = new models['SubResource']().deserialize(instance['properties']['httpListener']);
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['provisioningState'] !== undefined) {
        this['provisioningState'] = instance['properties']['provisioningState'];
      }
    }
  }

  return this;
};

module.exports = ApplicationGatewayRequestRoutingRule;
