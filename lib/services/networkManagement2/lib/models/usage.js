/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

/**
 * @class
 * Initializes a new instance of the Usage class.
 * @constructor
 * Describes Network Resource Usage.
 * @member {string} unit Gets or sets an enum describing the unit of
 * measurement. Possible values for this property include: 'Count'.
 * 
 * @member {number} currentValue Gets or sets the current value of the usage.
 * 
 * @member {number} limit Gets or sets the limit of usage.
 * 
 * @member {object} name Gets or sets the name of the type of usage.
 * 
 * @member {string} [name.value] Gets or sets a string describing the resource
 * name.
 * 
 * @member {string} [name.localizedValue] Gets or sets a localized string
 * describing the resource name.
 * 
 */
function Usage(parameters) {
  if (parameters !== null && parameters !== undefined) {
    if (parameters.unit !== undefined) {
      this.unit = parameters.unit;
    }
    if (parameters.currentValue !== undefined) {
      this.currentValue = parameters.currentValue;
    }
    if (parameters.limit !== undefined) {
      this.limit = parameters.limit;
    }
    if (parameters.name) {
      this.name = new models['UsageName'](parameters.name);
    }
  }    
}


/**
 * Validate the payload against the Usage schema
 *
 * @param {JSON} payload
 *
 */
Usage.prototype.serialize = function () {
  var payload = {};
  if (this['unit'] === null || this['unit'] === undefined || typeof this['unit'].valueOf() !== 'string') {
    throw new Error('this[\'unit\'] cannot be null or undefined and it must be of type string.');
  }
  payload['unit'] = this['unit'];

  if (this['currentValue'] === null || this['currentValue'] === undefined || typeof this['currentValue'] !== 'number') {
    throw new Error('this[\'currentValue\'] cannot be null or undefined and it must be of type number.');
  }
  payload['currentValue'] = this['currentValue'];

  if (this['limit'] === null || this['limit'] === undefined || typeof this['limit'] !== 'number') {
    throw new Error('this[\'limit\'] cannot be null or undefined and it must be of type number.');
  }
  payload['limit'] = this['limit'];

  if (this['name']) {
    payload['name'] = this['name'].serialize();
  }
   else {  throw new Error('this[\'name\'] cannot be null or undefined.');
  }

  return payload;
};

/**
 * Deserialize the instance to Usage schema
 *
 * @param {JSON} instance
 *
 */
Usage.prototype.deserialize = function (instance) {
  if (instance) {
    if (instance['unit'] !== undefined) {
      this['unit'] = instance['unit'];
    }

    if (instance['currentValue'] !== undefined) {
      this['currentValue'] = instance['currentValue'];
    }

    if (instance['limit'] !== undefined) {
      this['limit'] = instance['limit'];
    }

    if (instance['name']) {
      this['name'] = new models['UsageName']().deserialize(instance['name']);
    }
  }

  return this;
};

module.exports = Usage;
