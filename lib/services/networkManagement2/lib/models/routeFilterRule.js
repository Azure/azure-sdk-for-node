/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Route Filter Rule Resource
 *
 * @extends models['SubResource']
 */
class RouteFilterRule extends models['SubResource'] {
  /**
   * Create a RouteFilterRule.
   * @member {string} access The access type of the rule. Valid values are:
   * 'Allow', 'Deny'. Possible values include: 'Allow', 'Deny'
   * @member {array} communities The collection for bgp community values to
   * filter on. e.g. ['12076:5010','12076:5020']
   * @member {string} [provisioningState] The provisioning state of the
   * resource. Possible values are: 'Updating', 'Deleting', 'Succeeded' and
   * 'Failed'.
   * @member {string} [name] The name of the resource that is unique within a
   * resource group. This name can be used to access the resource.
   * @member {string} [location] Resource location.
   * @member {string} [etag] A unique read-only string that changes whenever
   * the resource is updated.
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of RouteFilterRule
   *
   * @returns {object} metadata of RouteFilterRule
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'RouteFilterRule',
      type: {
        name: 'Composite',
        className: 'RouteFilterRule',
        modelProperties: {
          id: {
            required: false,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          access: {
            required: true,
            serializedName: 'properties.access',
            type: {
              name: 'String'
            }
          },
          routeFilterRuleType: {
            required: true,
            isConstant: true,
            serializedName: 'properties.routeFilterRuleType',
            defaultValue: 'Community',
            type: {
              name: 'String'
            }
          },
          communities: {
            required: true,
            serializedName: 'properties.communities',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          provisioningState: {
            required: false,
            readOnly: true,
            serializedName: 'properties.provisioningState',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          location: {
            required: false,
            serializedName: 'location',
            type: {
              name: 'String'
            }
          },
          etag: {
            required: false,
            readOnly: true,
            serializedName: 'etag',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = RouteFilterRule;
