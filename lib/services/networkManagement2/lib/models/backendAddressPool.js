/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.13.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the BackendAddressPool class.
 * @constructor
 * Pool of backend IP addresseses
 * @member {string} [name] Gets name of the resource that is unique within a
 * resource group. This name can be used to access the resource
 * 
 * @member {string} [etag] A unique read-only string that changes whenever the
 * resource is updated
 * 
 * @member {array} [backendIPConfigurations] Gets collection of references to
 * IPs defined in NICs
 * 
 * @member {array} [loadBalancingRules] Gets Load Balancing rules that use
 * this Backend Address Pool
 * 
 * @member {object} [outboundNatRule] Gets outbound rules that use this
 * Backend Address Pool
 * 
 * @member {string} [outboundNatRule.id] Resource Id
 * 
 * @member {string} [provisioningState] Provisioning state of the PublicIP
 * resource Updating/Deleting/Failed
 * 
 */
function BackendAddressPool(parameters) {
  BackendAddressPool['super_'].call(this, parameters);
  if (parameters !== null && parameters !== undefined) {
    if (parameters.name !== undefined) {
      this.name = parameters.name;
    }
    if (parameters.etag !== undefined) {
      this.etag = parameters.etag;
    }
    if (parameters.backendIPConfigurations) {
      var tempParametersbackendIPConfigurations = [];
      parameters.backendIPConfigurations.forEach(function(element) {
        if (element) {
          element = new models['NetworkInterfaceIPConfiguration'](element);
        }
        tempParametersbackendIPConfigurations.push(element);
      });
      this.backendIPConfigurations = tempParametersbackendIPConfigurations;
    }
    if (parameters.loadBalancingRules) {
      var tempParametersloadBalancingRules = [];
      parameters.loadBalancingRules.forEach(function(element1) {
        if (element1) {
          element1 = new models['SubResource'](element1);
        }
        tempParametersloadBalancingRules.push(element1);
      });
      this.loadBalancingRules = tempParametersloadBalancingRules;
    }
    if (parameters.outboundNatRule) {
      this.outboundNatRule = new models['SubResource'](parameters.outboundNatRule);
    }
    if (parameters.provisioningState !== undefined) {
      this.provisioningState = parameters.provisioningState;
    }
  }    
}

util.inherits(BackendAddressPool, models['SubResource']);

/**
 * Validate the payload against the BackendAddressPool schema
 *
 * @param {JSON} payload
 *
 */
BackendAddressPool.prototype.serialize = function () {
  var payload = BackendAddressPool['super_'].prototype.serialize.call(this);
  if (this['name'] !== null && this['name'] !== undefined) {
    if (typeof this['name'].valueOf() !== 'string') {
      throw new Error('this[\'name\'] must be of type string.');
    }
    payload['name'] = this['name'];
  }

  if (this['etag'] !== null && this['etag'] !== undefined) {
    if (typeof this['etag'].valueOf() !== 'string') {
      throw new Error('this[\'etag\'] must be of type string.');
    }
    payload['etag'] = this['etag'];
  }

  if (util.isArray(this['backendIPConfigurations'])) {
    payload['properties']['backendIPConfigurations'] = [];
    for (var i = 0; i < this['backendIPConfigurations'].length; i++) {
      if (this['backendIPConfigurations'][i]) {
        if (payload['properties'] === null || payload['properties'] === undefined) {
          payload['properties'] = {};
        }
        payload['properties']['backendIPConfigurations'][i] = this['backendIPConfigurations'][i].serialize();
      }
    }
  }

  if (util.isArray(this['loadBalancingRules'])) {
    payload['properties']['loadBalancingRules'] = [];
    for (var i1 = 0; i1 < this['loadBalancingRules'].length; i1++) {
      if (this['loadBalancingRules'][i1]) {
        if (payload['properties'] === null || payload['properties'] === undefined) {
          payload['properties'] = {};
        }
        payload['properties']['loadBalancingRules'][i1] = this['loadBalancingRules'][i1].serialize();
      }
    }
  }

  if (this['outboundNatRule']) {
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['outboundNatRule'] = this['outboundNatRule'].serialize();
  }

  if (this['provisioningState'] !== null && this['provisioningState'] !== undefined) {
    if (typeof this['provisioningState'].valueOf() !== 'string') {
      throw new Error('this[\'provisioningState\'] must be of type string.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['provisioningState'] = this['provisioningState'];
  }

  return payload;
};

/**
 * Deserialize the instance to BackendAddressPool schema
 *
 * @param {JSON} instance
 *
 */
BackendAddressPool.prototype.deserialize = function (instance) {
  BackendAddressPool['super_'].prototype.deserialize.call(this, instance);
  if (instance) {
    if (instance['name'] !== undefined) {
      this['name'] = instance['name'];
    }

    if (instance['etag'] !== undefined) {
      this['etag'] = instance['etag'];
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['backendIPConfigurations']) {
        var tempInstancepropertiesbackendIPConfigurations = [];
        instance['properties']['backendIPConfigurations'].forEach(function(element2) {
          if (element2) {
            element2 = new models['NetworkInterfaceIPConfiguration']().deserialize(element2);
          }
          tempInstancepropertiesbackendIPConfigurations.push(element2);
        });
        this['backendIPConfigurations'] = tempInstancepropertiesbackendIPConfigurations;
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['loadBalancingRules']) {
        var tempInstancepropertiesloadBalancingRules = [];
        instance['properties']['loadBalancingRules'].forEach(function(element3) {
          if (element3) {
            element3 = new models['SubResource']().deserialize(element3);
          }
          tempInstancepropertiesloadBalancingRules.push(element3);
        });
        this['loadBalancingRules'] = tempInstancepropertiesloadBalancingRules;
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['outboundNatRule']) {
        this['outboundNatRule'] = new models['SubResource']().deserialize(instance['properties']['outboundNatRule']);
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['provisioningState'] !== undefined) {
        this['provisioningState'] = instance['properties']['provisioningState'];
      }
    }
  }

  return this;
};

module.exports = BackendAddressPool;
