/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the SecurityRule class.
 * @constructor
 * Network security rule
 * @member {string} [name] Gets name of the resource that is unique within a
 * resource group. This name can be used to access the resource
 * 
 * @member {string} [etag] A unique read-only string that changes whenever the
 * resource is updated
 * 
 * @member {string} [description] Gets or sets a description for this rule.
 * Restricted to 140 chars.
 * 
 * @member {string} protocol Gets or sets Network protocol this rule applies
 * to. Can be Tcp, Udp or All(*). Possible values for this property include:
 * 'Tcp', 'Udp', '*'.
 * 
 * @member {string} [sourcePortRange] Gets or sets Source Port or Range.
 * Integer or range between 0 and 65535. Asterix '*' can also be used to
 * match all ports.
 * 
 * @member {string} [destinationPortRange] Gets or sets Destination Port or
 * Range. Integer or range between 0 and 65535. Asterix '*' can also be used
 * to match all ports.
 * 
 * @member {string} sourceAddressPrefix Gets or sets source address prefix.
 * CIDR or source IP range. Asterix '*' can also be used to match all source
 * IPs. Default tags such as 'VirtualNetwork', 'AzureLoadBalancer' and
 * 'Internet' can also be used. If this is an ingress rule, specifies where
 * network traffic originates from.
 * 
 * @member {string} destinationAddressPrefix Gets or sets destination address
 * prefix. CIDR or source IP range. Asterix '*' can also be used to match all
 * source IPs. Default tags such as 'VirtualNetwork', 'AzureLoadBalancer' and
 * 'Internet' can also be used.
 * 
 * @member {string} access Gets or sets network traffic is allowed or denied.
 * Possible values are 'Allow' and 'Deny'. Possible values for this property
 * include: 'Allow', 'Deny'.
 * 
 * @member {number} [priority] Gets or sets the priority of the rule. The
 * value can be between 100 and 4096. The priority number must be unique for
 * each rule in the collection. The lower the priority number, the higher the
 * priority of the rule.
 * 
 * @member {string} direction Gets or sets the direction of the rule.InBound
 * or Outbound. The direction specifies if rule will be evaluated on incoming
 * or outcoming traffic. Possible values for this property include:
 * 'Inbound', 'Outbound'.
 * 
 * @member {string} [provisioningState] Gets or sets Provisioning state of the
 * PublicIP resource Updating/Deleting/Failed
 * 
 */
function SecurityRule(parameters) {
  SecurityRule['super_'].call(this, parameters);
  if (parameters !== null && parameters !== undefined) {
    if (parameters.name !== undefined) {
      this.name = parameters.name;
    }
    if (parameters.etag !== undefined) {
      this.etag = parameters.etag;
    }
    if (parameters.description !== undefined) {
      this.description = parameters.description;
    }
    if (parameters.protocol !== undefined) {
      this.protocol = parameters.protocol;
    }
    if (parameters.sourcePortRange !== undefined) {
      this.sourcePortRange = parameters.sourcePortRange;
    }
    if (parameters.destinationPortRange !== undefined) {
      this.destinationPortRange = parameters.destinationPortRange;
    }
    if (parameters.sourceAddressPrefix !== undefined) {
      this.sourceAddressPrefix = parameters.sourceAddressPrefix;
    }
    if (parameters.destinationAddressPrefix !== undefined) {
      this.destinationAddressPrefix = parameters.destinationAddressPrefix;
    }
    if (parameters.access !== undefined) {
      this.access = parameters.access;
    }
    if (parameters.priority !== undefined) {
      this.priority = parameters.priority;
    }
    if (parameters.direction !== undefined) {
      this.direction = parameters.direction;
    }
    if (parameters.provisioningState !== undefined) {
      this.provisioningState = parameters.provisioningState;
    }
  }    
}

util.inherits(SecurityRule, models['SubResource']);

/**
 * Validate the payload against the SecurityRule schema
 *
 * @param {JSON} payload
 *
 */
SecurityRule.prototype.serialize = function () {
  var payload = SecurityRule['super_'].prototype.serialize.call(this);
  if (this['name'] !== null && this['name'] !== undefined) {
    if (typeof this['name'].valueOf() !== 'string') {
      throw new Error('this[\'name\'] must be of type string.');
    }
    payload['name'] = this['name'];
  }

  if (this['etag'] !== null && this['etag'] !== undefined) {
    if (typeof this['etag'].valueOf() !== 'string') {
      throw new Error('this[\'etag\'] must be of type string.');
    }
    payload['etag'] = this['etag'];
  }

  if (this['description'] !== null && this['description'] !== undefined) {
    if (typeof this['description'].valueOf() !== 'string') {
      throw new Error('this[\'description\'] must be of type string.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['description'] = this['description'];
  }

  if (this['protocol'] === null || this['protocol'] === undefined || typeof this['protocol'].valueOf() !== 'string') {
    throw new Error('this[\'protocol\'] cannot be null or undefined and it must be of type string.');
  }
  if (payload['properties'] === null || payload['properties'] === undefined) {
    payload['properties'] = {};
  }
  payload['properties']['protocol'] = this['protocol'];

  if (this['sourcePortRange'] !== null && this['sourcePortRange'] !== undefined) {
    if (typeof this['sourcePortRange'].valueOf() !== 'string') {
      throw new Error('this[\'sourcePortRange\'] must be of type string.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['sourcePortRange'] = this['sourcePortRange'];
  }

  if (this['destinationPortRange'] !== null && this['destinationPortRange'] !== undefined) {
    if (typeof this['destinationPortRange'].valueOf() !== 'string') {
      throw new Error('this[\'destinationPortRange\'] must be of type string.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['destinationPortRange'] = this['destinationPortRange'];
  }

  if (this['sourceAddressPrefix'] === null || this['sourceAddressPrefix'] === undefined || typeof this['sourceAddressPrefix'].valueOf() !== 'string') {
    throw new Error('this[\'sourceAddressPrefix\'] cannot be null or undefined and it must be of type string.');
  }
  if (payload['properties'] === null || payload['properties'] === undefined) {
    payload['properties'] = {};
  }
  payload['properties']['sourceAddressPrefix'] = this['sourceAddressPrefix'];

  if (this['destinationAddressPrefix'] === null || this['destinationAddressPrefix'] === undefined || typeof this['destinationAddressPrefix'].valueOf() !== 'string') {
    throw new Error('this[\'destinationAddressPrefix\'] cannot be null or undefined and it must be of type string.');
  }
  if (payload['properties'] === null || payload['properties'] === undefined) {
    payload['properties'] = {};
  }
  payload['properties']['destinationAddressPrefix'] = this['destinationAddressPrefix'];

  if (this['access'] === null || this['access'] === undefined || typeof this['access'].valueOf() !== 'string') {
    throw new Error('this[\'access\'] cannot be null or undefined and it must be of type string.');
  }
  if (payload['properties'] === null || payload['properties'] === undefined) {
    payload['properties'] = {};
  }
  payload['properties']['access'] = this['access'];

  if (this['priority'] !== null && this['priority'] !== undefined) {
    if (typeof this['priority'] !== 'number') {
      throw new Error('this[\'priority\'] must be of type number.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['priority'] = this['priority'];
  }

  if (this['direction'] === null || this['direction'] === undefined || typeof this['direction'].valueOf() !== 'string') {
    throw new Error('this[\'direction\'] cannot be null or undefined and it must be of type string.');
  }
  if (payload['properties'] === null || payload['properties'] === undefined) {
    payload['properties'] = {};
  }
  payload['properties']['direction'] = this['direction'];

  if (this['provisioningState'] !== null && this['provisioningState'] !== undefined) {
    if (typeof this['provisioningState'].valueOf() !== 'string') {
      throw new Error('this[\'provisioningState\'] must be of type string.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['provisioningState'] = this['provisioningState'];
  }

  return payload;
};

/**
 * Deserialize the instance to SecurityRule schema
 *
 * @param {JSON} instance
 *
 */
SecurityRule.prototype.deserialize = function (instance) {
  SecurityRule['super_'].prototype.deserialize.call(this, instance);
  if (instance) {
    if (instance['name'] !== undefined) {
      this['name'] = instance['name'];
    }

    if (instance['etag'] !== undefined) {
      this['etag'] = instance['etag'];
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['description'] !== undefined) {
        this['description'] = instance['properties']['description'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['protocol'] !== undefined) {
        this['protocol'] = instance['properties']['protocol'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['sourcePortRange'] !== undefined) {
        this['sourcePortRange'] = instance['properties']['sourcePortRange'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['destinationPortRange'] !== undefined) {
        this['destinationPortRange'] = instance['properties']['destinationPortRange'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['sourceAddressPrefix'] !== undefined) {
        this['sourceAddressPrefix'] = instance['properties']['sourceAddressPrefix'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['destinationAddressPrefix'] !== undefined) {
        this['destinationAddressPrefix'] = instance['properties']['destinationAddressPrefix'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['access'] !== undefined) {
        this['access'] = instance['properties']['access'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['priority'] !== undefined) {
        this['priority'] = instance['properties']['priority'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['direction'] !== undefined) {
        this['direction'] = instance['properties']['direction'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['provisioningState'] !== undefined) {
        this['provisioningState'] = instance['properties']['provisioningState'];
      }
    }
  }

  return this;
};

module.exports = SecurityRule;
