/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the Route class.
 * @constructor
 * Route resource
 * @member {string} [name] Gets name of the resource that is unique within a
 * resource group. This name can be used to access the resource
 * 
 * @member {string} [etag] A unique read-only string that changes whenever the
 * resource is updated
 * 
 * @member {string} [addressPrefix] Gets or sets the destination CIDR to which
 * the route applies.
 * 
 * @member {string} nextHopType Gets or sets the type of Azure hop the packet
 * should be sent to. Possible values for this property include:
 * 'VirtualNetworkGateway', 'VnetLocal', 'Internet', 'VirtualAppliance',
 * 'None'.
 * 
 * @member {string} [nextHopIpAddress] Gets or sets the IP address packets
 * should be forwarded to. Next hop values are only allowed in routes where
 * the next hop type is VirtualAppliance.
 * 
 * @member {string} [provisioningState] Gets or sets Provisioning state of the
 * resource Updating/Deleting/Failed
 * 
 */
function Route(parameters) {
  Route['super_'].call(this, parameters);
  if (parameters !== null && parameters !== undefined) {
    if (parameters.name !== undefined) {
      this.name = parameters.name;
    }
    if (parameters.etag !== undefined) {
      this.etag = parameters.etag;
    }
    if (parameters.addressPrefix !== undefined) {
      this.addressPrefix = parameters.addressPrefix;
    }
    if (parameters.nextHopType !== undefined) {
      this.nextHopType = parameters.nextHopType;
    }
    if (parameters.nextHopIpAddress !== undefined) {
      this.nextHopIpAddress = parameters.nextHopIpAddress;
    }
    if (parameters.provisioningState !== undefined) {
      this.provisioningState = parameters.provisioningState;
    }
  }    
}

util.inherits(Route, models['SubResource']);

/**
 * Validate the payload against the Route schema
 *
 * @param {JSON} payload
 *
 */
Route.prototype.serialize = function () {
  var payload = Route['super_'].prototype.serialize.call(this);
  if (this['name'] !== null && this['name'] !== undefined) {
    if (typeof this['name'].valueOf() !== 'string') {
      throw new Error('this[\'name\'] must be of type string.');
    }
    payload['name'] = this['name'];
  }

  if (this['etag'] !== null && this['etag'] !== undefined) {
    if (typeof this['etag'].valueOf() !== 'string') {
      throw new Error('this[\'etag\'] must be of type string.');
    }
    payload['etag'] = this['etag'];
  }

  if (this['addressPrefix'] !== null && this['addressPrefix'] !== undefined) {
    if (typeof this['addressPrefix'].valueOf() !== 'string') {
      throw new Error('this[\'addressPrefix\'] must be of type string.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['addressPrefix'] = this['addressPrefix'];
  }

  if (this['nextHopType'] === null || this['nextHopType'] === undefined || typeof this['nextHopType'].valueOf() !== 'string') {
    throw new Error('this[\'nextHopType\'] cannot be null or undefined and it must be of type string.');
  }
  if (payload['properties'] === null || payload['properties'] === undefined) {
    payload['properties'] = {};
  }
  payload['properties']['nextHopType'] = this['nextHopType'];

  if (this['nextHopIpAddress'] !== null && this['nextHopIpAddress'] !== undefined) {
    if (typeof this['nextHopIpAddress'].valueOf() !== 'string') {
      throw new Error('this[\'nextHopIpAddress\'] must be of type string.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['nextHopIpAddress'] = this['nextHopIpAddress'];
  }

  if (this['provisioningState'] !== null && this['provisioningState'] !== undefined) {
    if (typeof this['provisioningState'].valueOf() !== 'string') {
      throw new Error('this[\'provisioningState\'] must be of type string.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['provisioningState'] = this['provisioningState'];
  }

  return payload;
};

/**
 * Deserialize the instance to Route schema
 *
 * @param {JSON} instance
 *
 */
Route.prototype.deserialize = function (instance) {
  Route['super_'].prototype.deserialize.call(this, instance);
  if (instance) {
    if (instance['name'] !== undefined) {
      this['name'] = instance['name'];
    }

    if (instance['etag'] !== undefined) {
      this['etag'] = instance['etag'];
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['addressPrefix'] !== undefined) {
        this['addressPrefix'] = instance['properties']['addressPrefix'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['nextHopType'] !== undefined) {
        this['nextHopType'] = instance['properties']['nextHopType'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['nextHopIpAddress'] !== undefined) {
        this['nextHopIpAddress'] = instance['properties']['nextHopIpAddress'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['provisioningState'] !== undefined) {
        this['provisioningState'] = instance['properties']['provisioningState'];
      }
    }
  }

  return this;
};

module.exports = Route;
