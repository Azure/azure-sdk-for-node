/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the ApplicationGatewayUrlPathMap class.
 * @constructor
 * UrlPathMap of application gateway
 * @member {object} [defaultBackendAddressPool] Gets or sets default backend
 * address pool resource of URL path map
 * 
 * @member {string} [defaultBackendAddressPool.id] Resource Id
 * 
 * @member {object} [defaultBackendHttpSettings] Gets or sets default backend
 * http settings resource of URL path map
 * 
 * @member {string} [defaultBackendHttpSettings.id] Resource Id
 * 
 * @member {array} [pathRules] Gets or sets path rule of URL path map resource
 * 
 * @member {string} [provisioningState] Gets or sets Provisioning state of the
 * backend http settings resource Updating/Deleting/Failed
 * 
 * @member {string} [name] Gets name of the resource that is unique within a
 * resource group. This name can be used to access the resource
 * 
 * @member {string} [etag] A unique read-only string that changes whenever the
 * resource is updated
 * 
 */
function ApplicationGatewayUrlPathMap() {
  ApplicationGatewayUrlPathMap['super_'].call(this);
}

util.inherits(ApplicationGatewayUrlPathMap, models['SubResource']);

/**
 * Defines the metadata of ApplicationGatewayUrlPathMap
 *
 * @returns {object} metadata of ApplicationGatewayUrlPathMap
 *
 */
ApplicationGatewayUrlPathMap.prototype.mapper = function () {
  return {
    required: false,
    serializedName: 'ApplicationGatewayUrlPathMap',
    type: {
      name: 'Composite',
      className: 'ApplicationGatewayUrlPathMap',
      modelProperties: {
        id: {
          required: false,
          serializedName: 'id',
          type: {
            name: 'String'
          }
        },
        defaultBackendAddressPool: {
          required: false,
          serializedName: 'properties.defaultBackendAddressPool',
          type: {
            name: 'Composite',
            className: 'SubResource'
          }
        },
        defaultBackendHttpSettings: {
          required: false,
          serializedName: 'properties.defaultBackendHttpSettings',
          type: {
            name: 'Composite',
            className: 'SubResource'
          }
        },
        pathRules: {
          required: false,
          serializedName: 'properties.pathRules',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'ApplicationGatewayPathRuleElementType',
                type: {
                  name: 'Composite',
                  className: 'ApplicationGatewayPathRule'
                }
            }
          }
        },
        provisioningState: {
          required: false,
          serializedName: 'properties.provisioningState',
          type: {
            name: 'String'
          }
        },
        name: {
          required: false,
          serializedName: 'name',
          type: {
            name: 'String'
          }
        },
        etag: {
          required: false,
          serializedName: 'etag',
          type: {
            name: 'String'
          }
        }
      }
    }
  };
};

module.exports = ApplicationGatewayUrlPathMap;
