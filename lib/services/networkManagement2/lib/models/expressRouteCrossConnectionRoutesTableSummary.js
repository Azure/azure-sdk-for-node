/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * The routes table associated with the ExpressRouteCircuit.
 *
 */
class ExpressRouteCrossConnectionRoutesTableSummary {
  /**
   * Create a ExpressRouteCrossConnectionRoutesTableSummary.
   * @member {string} [neighbor] IP address of Neighbor router
   * @member {number} [asn] Autonomous system number.
   * @member {string} [upDown] The length of time that the BGP session has been
   * in the Established state, or the current status if not in the Established
   * state.
   * @member {string} [stateOrPrefixesReceived] Current state of the BGP
   * session, and the number of prefixes that have been received from a
   * neighbor or peer group.
   */
  constructor() {
  }

  /**
   * Defines the metadata of ExpressRouteCrossConnectionRoutesTableSummary
   *
   * @returns {object} metadata of ExpressRouteCrossConnectionRoutesTableSummary
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'ExpressRouteCrossConnectionRoutesTableSummary',
      type: {
        name: 'Composite',
        className: 'ExpressRouteCrossConnectionRoutesTableSummary',
        modelProperties: {
          neighbor: {
            required: false,
            serializedName: 'neighbor',
            type: {
              name: 'String'
            }
          },
          asn: {
            required: false,
            serializedName: 'asn',
            type: {
              name: 'Number'
            }
          },
          upDown: {
            required: false,
            serializedName: 'upDown',
            type: {
              name: 'String'
            }
          },
          stateOrPrefixesReceived: {
            required: false,
            serializedName: 'stateOrPrefixesReceived',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = ExpressRouteCrossConnectionRoutesTableSummary;
