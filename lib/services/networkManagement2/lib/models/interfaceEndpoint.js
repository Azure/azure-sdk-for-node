/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Interface endpoint resource.
 *
 * @extends models['Resource']
 */
class InterfaceEndpoint extends models['Resource'] {
  /**
   * Create a InterfaceEndpoint.
   * @member {string} [fqdn] A first-party service's FQDN that is mapped to the
   * private IP allocated via this interface endpoint.
   * @member {object} [endpointService] A reference to the service being
   * brought into the virtual network.
   * @member {string} [endpointService.id] A unique identifier of the service
   * being referenced by the interface endpoint.
   * @member {object} [subnet] The ID of the subnet from which the private IP
   * will be allocated.
   * @member {string} [subnet.id] Resource ID.
   * @member {array} [networkInterfaces] Gets an array of references to the
   * network interfaces created for this interface endpoint.
   * @member {string} [owner] A read-only property that identifies who created
   * this interface endpoint.
   * @member {string} [provisioningState] The provisioning state of the
   * interface endpoint. Possible values are: 'Updating', 'Deleting', and
   * 'Failed'.
   * @member {string} [etag] Gets a unique read-only string that changes
   * whenever the resource is updated.
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of InterfaceEndpoint
   *
   * @returns {object} metadata of InterfaceEndpoint
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'InterfaceEndpoint',
      type: {
        name: 'Composite',
        className: 'InterfaceEndpoint',
        modelProperties: {
          id: {
            required: false,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          location: {
            required: false,
            serializedName: 'location',
            type: {
              name: 'String'
            }
          },
          tags: {
            required: false,
            serializedName: 'tags',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          fqdn: {
            required: false,
            serializedName: 'properties.fqdn',
            type: {
              name: 'String'
            }
          },
          endpointService: {
            required: false,
            serializedName: 'properties.endpointService',
            type: {
              name: 'Composite',
              className: 'EndpointService'
            }
          },
          subnet: {
            required: false,
            serializedName: 'properties.subnet',
            type: {
              name: 'Composite',
              className: 'SubResource'
            }
          },
          networkInterfaces: {
            required: false,
            serializedName: 'properties.networkInterfaces',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'SubResourceElementType',
                  type: {
                    name: 'Composite',
                    className: 'SubResource'
                  }
              }
            }
          },
          owner: {
            required: false,
            readOnly: true,
            serializedName: 'properties.owner',
            type: {
              name: 'String'
            }
          },
          provisioningState: {
            required: false,
            readOnly: true,
            serializedName: 'properties.provisioningState',
            type: {
              name: 'String'
            }
          },
          etag: {
            required: false,
            serializedName: 'etag',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = InterfaceEndpoint;
