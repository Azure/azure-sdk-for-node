/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.13.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the VirtualNetworkGateway class.
 * @constructor
 * A common class for general resource information
 * @member {string} [etag] Gets a unique read-only string that changes
 * whenever the resource is updated
 * 
 * @member {array} [ipConfigurations] IpConfigurations for Virtual network
 * gateway.
 * 
 * @member {string} [gatewayType] The type of this virtual network gateway.
 * Possible values for this property include: 'Vpn', 'ExpressRoute'.
 * 
 * @member {string} [vpnType] The type of this virtual network gateway.
 * Possible values for this property include: 'PolicyBased', 'RouteBased'.
 * 
 * @member {boolean} [enableBgp] EnableBgp Flag
 * 
 * @member {object} [gatewayDefaultSite] Gets or sets the reference of the
 * LocalNetworkGateway resource which represents Local network site having
 * default routes. Assign Null value in case of removing existing default
 * site setting.
 * 
 * @member {string} [gatewayDefaultSite.id] Resource Id
 * 
 * @member {string} [resourceGuid] Gets or sets resource guid property of the
 * VirtualNetworkGateway resource
 * 
 * @member {string} [provisioningState] Gets or sets Provisioning state of the
 * VirtualNetworkGateway resource Updating/Deleting/Failed
 * 
 */
function VirtualNetworkGateway(parameters) {
  VirtualNetworkGateway['super_'].call(this, parameters);
  if (parameters !== null && parameters !== undefined) {
    if (parameters.etag !== undefined) {
      this.etag = parameters.etag;
    }
    if (parameters.ipConfigurations) {
      var tempParametersipConfigurations = [];
      parameters.ipConfigurations.forEach(function(element) {
        if (element) {
          element = new models['VirtualNetworkGatewayIPConfiguration'](element);
        }
        tempParametersipConfigurations.push(element);
      });
      this.ipConfigurations = tempParametersipConfigurations;
    }
    if (parameters.gatewayType !== undefined) {
      this.gatewayType = parameters.gatewayType;
    }
    if (parameters.vpnType !== undefined) {
      this.vpnType = parameters.vpnType;
    }
    if (parameters.enableBgp !== undefined) {
      this.enableBgp = parameters.enableBgp;
    }
    if (parameters.gatewayDefaultSite) {
      this.gatewayDefaultSite = new models['SubResource'](parameters.gatewayDefaultSite);
    }
    if (parameters.resourceGuid !== undefined) {
      this.resourceGuid = parameters.resourceGuid;
    }
    if (parameters.provisioningState !== undefined) {
      this.provisioningState = parameters.provisioningState;
    }
  }    
}

util.inherits(VirtualNetworkGateway, models['Resource']);

/**
 * Validate the payload against the VirtualNetworkGateway schema
 *
 * @param {JSON} payload
 *
 */
VirtualNetworkGateway.prototype.serialize = function () {
  var payload = VirtualNetworkGateway['super_'].prototype.serialize.call(this);
  if (this['etag'] !== null && this['etag'] !== undefined) {
    if (typeof this['etag'].valueOf() !== 'string') {
      throw new Error('this[\'etag\'] must be of type string.');
    }
    payload['etag'] = this['etag'];
  }

  if (util.isArray(this['ipConfigurations'])) {
    payload['properties']['ipConfigurations'] = [];
    for (var i = 0; i < this['ipConfigurations'].length; i++) {
      if (this['ipConfigurations'][i]) {
        if (payload['properties'] === null || payload['properties'] === undefined) {
          payload['properties'] = {};
        }
        payload['properties']['ipConfigurations'][i] = this['ipConfigurations'][i].serialize();
      }
    }
  }

  if (this['gatewayType'] !== null && this['gatewayType'] !== undefined) {
    if (typeof this['gatewayType'].valueOf() !== 'string') {
      throw new Error('this[\'gatewayType\'] must be of type string.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['gatewayType'] = this['gatewayType'];
  }

  if (this['vpnType'] !== null && this['vpnType'] !== undefined) {
    if (typeof this['vpnType'].valueOf() !== 'string') {
      throw new Error('this[\'vpnType\'] must be of type string.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['vpnType'] = this['vpnType'];
  }

  if (this['enableBgp'] !== null && this['enableBgp'] !== undefined) {
    if (typeof this['enableBgp'] !== 'boolean') {
      throw new Error('this[\'enableBgp\'] must be of type boolean.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['enableBgp'] = this['enableBgp'];
  }

  if (this['gatewayDefaultSite']) {
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['gatewayDefaultSite'] = this['gatewayDefaultSite'].serialize();
  }

  if (this['resourceGuid'] !== null && this['resourceGuid'] !== undefined) {
    if (typeof this['resourceGuid'].valueOf() !== 'string') {
      throw new Error('this[\'resourceGuid\'] must be of type string.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['resourceGuid'] = this['resourceGuid'];
  }

  if (this['provisioningState'] !== null && this['provisioningState'] !== undefined) {
    if (typeof this['provisioningState'].valueOf() !== 'string') {
      throw new Error('this[\'provisioningState\'] must be of type string.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['provisioningState'] = this['provisioningState'];
  }

  return payload;
};

/**
 * Deserialize the instance to VirtualNetworkGateway schema
 *
 * @param {JSON} instance
 *
 */
VirtualNetworkGateway.prototype.deserialize = function (instance) {
  VirtualNetworkGateway['super_'].prototype.deserialize.call(this, instance);
  if (instance) {
    if (instance['etag'] !== undefined) {
      this['etag'] = instance['etag'];
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['ipConfigurations']) {
        var tempInstancepropertiesipConfigurations = [];
        instance['properties']['ipConfigurations'].forEach(function(element1) {
          if (element1) {
            element1 = new models['VirtualNetworkGatewayIPConfiguration']().deserialize(element1);
          }
          tempInstancepropertiesipConfigurations.push(element1);
        });
        this['ipConfigurations'] = tempInstancepropertiesipConfigurations;
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['gatewayType'] !== undefined) {
        this['gatewayType'] = instance['properties']['gatewayType'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['vpnType'] !== undefined) {
        this['vpnType'] = instance['properties']['vpnType'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['enableBgp'] !== undefined) {
        this['enableBgp'] = instance['properties']['enableBgp'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['gatewayDefaultSite']) {
        this['gatewayDefaultSite'] = new models['SubResource']().deserialize(instance['properties']['gatewayDefaultSite']);
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['resourceGuid'] !== undefined) {
        this['resourceGuid'] = instance['properties']['resourceGuid'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['provisioningState'] !== undefined) {
        this['provisioningState'] = instance['properties']['provisioningState'];
      }
    }
  }

  return this;
};

module.exports = VirtualNetworkGateway;
