/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the VirtualNetworkGateway class.
 * @constructor
 * A common class for general resource information
 *
 * @member {array} [ipConfigurations] IpConfigurations for Virtual network
 * gateway.
 * 
 * @member {string} [gatewayType] The type of this virtual network gateway.
 * Possible values include: 'Vpn', 'ExpressRoute'
 * 
 * @member {string} [vpnType] The type of this virtual network gateway.
 * Possible values include: 'PolicyBased', 'RouteBased'
 * 
 * @member {boolean} [enableBgp] EnableBgp Flag
 * 
 * @member {object} [gatewayDefaultSite] Gets or sets the reference of the
 * LocalNetworkGateway resource which represents Local network site having
 * default routes. Assign Null value in case of removing existing default
 * site setting.
 * 
 * @member {string} [gatewayDefaultSite.id] Resource Id
 * 
 * @member {object} [sku] Gets or sets the reference of the
 * VirtualNetworkGatewaySku resource which represents the sku selected for
 * Virtual network gateway.
 * 
 * @member {string} [sku.name] Gateway sku name
 * -Basic/HighPerformance/Standard. Possible values include: 'Basic',
 * 'HighPerformance', 'Standard'
 * 
 * @member {string} [sku.tier] Gateway sku tier
 * -Basic/HighPerformance/Standard. Possible values include: 'Basic',
 * 'HighPerformance', 'Standard'
 * 
 * @member {number} [sku.capacity] The capacity
 * 
 * @member {object} [vpnClientConfiguration] Gets or sets the reference of the
 * VpnClientConfiguration resource which represents the P2S VpnClient
 * configurations.
 * 
 * @member {object} [vpnClientConfiguration.vpnClientAddressPool] Gets or sets
 * the reference of the Address space resource which represents Address space
 * for P2S VpnClient.
 * 
 * @member {array}
 * [vpnClientConfiguration.vpnClientAddressPool.addressPrefixes] Gets or sets
 * List of address blocks reserved for this virtual network in CIDR notation
 * 
 * @member {array} [vpnClientConfiguration.vpnClientRootCertificates]
 * VpnClientRootCertificate for Virtual network gateway.
 * 
 * @member {array} [vpnClientConfiguration.vpnClientRevokedCertificates]
 * VpnClientRevokedCertificate for Virtual network gateway.
 * 
 * @member {object} [bgpSettings] Virtual network gateway's BGP speaker
 * settings
 * 
 * @member {number} [bgpSettings.asn] Gets or sets this BGP speaker's ASN
 * 
 * @member {string} [bgpSettings.bgpPeeringAddress] Gets or sets the BGP
 * peering address and BGP identifier of this BGP speaker
 * 
 * @member {number} [bgpSettings.peerWeight] Gets or sets the weight added to
 * routes learned from this BGP speaker
 * 
 * @member {string} [resourceGuid] Gets or sets resource guid property of the
 * VirtualNetworkGateway resource
 * 
 * @member {string} [provisioningState] Gets or sets Provisioning state of the
 * VirtualNetworkGateway resource Updating/Deleting/Failed
 * 
 * @member {string} [etag] Gets a unique read-only string that changes
 * whenever the resource is updated
 * 
 */
function VirtualNetworkGateway() {
  VirtualNetworkGateway['super_'].call(this);
}

util.inherits(VirtualNetworkGateway, models['Resource']);

/**
 * Defines the metadata of VirtualNetworkGateway
 *
 * @returns {object} metadata of VirtualNetworkGateway
 *
 */
VirtualNetworkGateway.prototype.mapper = function () {
  return {
    required: false,
    serializedName: 'VirtualNetworkGateway',
    type: {
      name: 'Composite',
      className: 'VirtualNetworkGateway',
      modelProperties: {
        id: {
          required: false,
          serializedName: 'id',
          type: {
            name: 'String'
          }
        },
        name: {
          required: false,
          readOnly: true,
          serializedName: 'name',
          type: {
            name: 'String'
          }
        },
        type: {
          required: false,
          readOnly: true,
          serializedName: 'type',
          type: {
            name: 'String'
          }
        },
        location: {
          required: false,
          serializedName: 'location',
          type: {
            name: 'String'
          }
        },
        tags: {
          required: false,
          serializedName: 'tags',
          type: {
            name: 'Dictionary',
            value: {
                required: false,
                serializedName: 'StringElementType',
                type: {
                  name: 'String'
                }
            }
          }
        },
        ipConfigurations: {
          required: false,
          serializedName: 'properties.ipConfigurations',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'VirtualNetworkGatewayIPConfigurationElementType',
                type: {
                  name: 'Composite',
                  className: 'VirtualNetworkGatewayIPConfiguration'
                }
            }
          }
        },
        gatewayType: {
          required: false,
          serializedName: 'properties.gatewayType',
          type: {
            name: 'String'
          }
        },
        vpnType: {
          required: false,
          serializedName: 'properties.vpnType',
          type: {
            name: 'String'
          }
        },
        enableBgp: {
          required: false,
          serializedName: 'properties.enableBgp',
          type: {
            name: 'Boolean'
          }
        },
        gatewayDefaultSite: {
          required: false,
          serializedName: 'properties.gatewayDefaultSite',
          type: {
            name: 'Composite',
            className: 'SubResource'
          }
        },
        sku: {
          required: false,
          serializedName: 'properties.sku',
          type: {
            name: 'Composite',
            className: 'VirtualNetworkGatewaySku'
          }
        },
        vpnClientConfiguration: {
          required: false,
          serializedName: 'properties.vpnClientConfiguration',
          type: {
            name: 'Composite',
            className: 'VpnClientConfiguration'
          }
        },
        bgpSettings: {
          required: false,
          serializedName: 'properties.bgpSettings',
          type: {
            name: 'Composite',
            className: 'BgpSettings'
          }
        },
        resourceGuid: {
          required: false,
          serializedName: 'properties.resourceGuid',
          type: {
            name: 'String'
          }
        },
        provisioningState: {
          required: false,
          serializedName: 'properties.provisioningState',
          type: {
            name: 'String'
          }
        },
        etag: {
          required: false,
          serializedName: 'etag',
          type: {
            name: 'String'
          }
        }
      }
    }
  };
};

module.exports = VirtualNetworkGateway;
