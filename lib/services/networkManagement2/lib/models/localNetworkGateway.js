/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the LocalNetworkGateway class.
 * @constructor
 * A common class for general resource information
 * @member {string} [etag] Gets a unique read-only string that changes
 * whenever the resource is updated
 * 
 * @member {object} [localNetworkAddressSpace] Local network site Address space
 * 
 * @member {array} [localNetworkAddressSpace.addressPrefixes] Gets or sets
 * List of address blocks reserved for this virtual network in CIDR notation
 * 
 * @member {string} [gatewayIpAddress] IP address of local network gateway.
 * 
 * @member {string} [resourceGuid] Gets or sets resource guid property of the
 * LocalNetworkGateway resource
 * 
 * @member {string} [provisioningState] Gets or sets Provisioning state of the
 * LocalNetworkGateway resource Updating/Deleting/Failed
 * 
 */
function LocalNetworkGateway(parameters) {
  LocalNetworkGateway['super_'].call(this, parameters);
  if (parameters !== null && parameters !== undefined) {
    if (parameters.etag !== undefined) {
      this.etag = parameters.etag;
    }
    if (parameters.localNetworkAddressSpace) {
      this.localNetworkAddressSpace = new models['AddressSpace'](parameters.localNetworkAddressSpace);
    }
    if (parameters.gatewayIpAddress !== undefined) {
      this.gatewayIpAddress = parameters.gatewayIpAddress;
    }
    if (parameters.resourceGuid !== undefined) {
      this.resourceGuid = parameters.resourceGuid;
    }
    if (parameters.provisioningState !== undefined) {
      this.provisioningState = parameters.provisioningState;
    }
  }    
}

util.inherits(LocalNetworkGateway, models['Resource']);

/**
 * Validate the payload against the LocalNetworkGateway schema
 *
 * @param {JSON} payload
 *
 */
LocalNetworkGateway.prototype.serialize = function () {
  var payload = LocalNetworkGateway['super_'].prototype.serialize.call(this);
  if (this['etag'] !== null && this['etag'] !== undefined) {
    if (typeof this['etag'].valueOf() !== 'string') {
      throw new Error('this[\'etag\'] must be of type string.');
    }
    payload['etag'] = this['etag'];
  }

  if (this['localNetworkAddressSpace']) {
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['localNetworkAddressSpace'] = this['localNetworkAddressSpace'].serialize();
  }

  if (this['gatewayIpAddress'] !== null && this['gatewayIpAddress'] !== undefined) {
    if (typeof this['gatewayIpAddress'].valueOf() !== 'string') {
      throw new Error('this[\'gatewayIpAddress\'] must be of type string.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['gatewayIpAddress'] = this['gatewayIpAddress'];
  }

  if (this['resourceGuid'] !== null && this['resourceGuid'] !== undefined) {
    if (typeof this['resourceGuid'].valueOf() !== 'string') {
      throw new Error('this[\'resourceGuid\'] must be of type string.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['resourceGuid'] = this['resourceGuid'];
  }

  if (this['provisioningState'] !== null && this['provisioningState'] !== undefined) {
    if (typeof this['provisioningState'].valueOf() !== 'string') {
      throw new Error('this[\'provisioningState\'] must be of type string.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['provisioningState'] = this['provisioningState'];
  }

  return payload;
};

/**
 * Deserialize the instance to LocalNetworkGateway schema
 *
 * @param {JSON} instance
 *
 */
LocalNetworkGateway.prototype.deserialize = function (instance) {
  LocalNetworkGateway['super_'].prototype.deserialize.call(this, instance);
  if (instance) {
    if (instance['etag'] !== undefined) {
      this['etag'] = instance['etag'];
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['localNetworkAddressSpace']) {
        this['localNetworkAddressSpace'] = new models['AddressSpace']().deserialize(instance['properties']['localNetworkAddressSpace']);
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['gatewayIpAddress'] !== undefined) {
        this['gatewayIpAddress'] = instance['properties']['gatewayIpAddress'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['resourceGuid'] !== undefined) {
        this['resourceGuid'] = instance['properties']['resourceGuid'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['provisioningState'] !== undefined) {
        this['provisioningState'] = instance['properties']['provisioningState'];
      }
    }
  }

  return this;
};

module.exports = LocalNetworkGateway;
