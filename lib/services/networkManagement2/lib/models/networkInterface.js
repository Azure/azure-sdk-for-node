/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * A network interface in a resource group.
 *
 * @extends models['Resource']
 */
class NetworkInterface extends models['Resource'] {
  /**
   * Create a NetworkInterface.
   * @member {object} [virtualMachine] The reference of a virtual machine.
   * @member {string} [virtualMachine.id] Resource ID.
   * @member {object} [networkSecurityGroup] The reference of the
   * NetworkSecurityGroup resource.
   * @member {array} [networkSecurityGroup.securityRules] A collection of
   * security rules of the network security group.
   * @member {array} [networkSecurityGroup.defaultSecurityRules] The default
   * security rules of network security group.
   * @member {array} [networkSecurityGroup.networkInterfaces] A collection of
   * references to network interfaces.
   * @member {array} [networkSecurityGroup.subnets] A collection of references
   * to subnets.
   * @member {string} [networkSecurityGroup.resourceGuid] The resource GUID
   * property of the network security group resource.
   * @member {string} [networkSecurityGroup.provisioningState] The provisioning
   * state of the public IP resource. Possible values are: 'Updating',
   * 'Deleting', and 'Failed'.
   * @member {string} [networkSecurityGroup.etag] A unique read-only string
   * that changes whenever the resource is updated.
   * @member {object} [interfaceEndpoint] A reference to the interface endpoint
   * to which the network interface is linked.
   * @member {string} [interfaceEndpoint.fqdn] A first-party service's FQDN
   * that is mapped to the private IP allocated via this interface endpoint.
   * @member {object} [interfaceEndpoint.endpointService] A reference to the
   * service being brought into the virtual network.
   * @member {string} [interfaceEndpoint.endpointService.id] A unique
   * identifier of the service being referenced by the interface endpoint.
   * @member {object} [interfaceEndpoint.subnet] The ID of the subnet from
   * which the private IP will be allocated.
   * @member {string} [interfaceEndpoint.subnet.id] Resource ID.
   * @member {array} [interfaceEndpoint.networkInterfaces] Gets an array of
   * references to the network interfaces created for this interface endpoint.
   * @member {string} [interfaceEndpoint.owner] A read-only property that
   * identifies who created this interface endpoint.
   * @member {string} [interfaceEndpoint.provisioningState] The provisioning
   * state of the interface endpoint. Possible values are: 'Updating',
   * 'Deleting', and 'Failed'.
   * @member {string} [interfaceEndpoint.etag] Gets a unique read-only string
   * that changes whenever the resource is updated.
   * @member {array} [ipConfigurations] A list of IPConfigurations of the
   * network interface.
   * @member {array} [tapConfigurations] A list of TapConfigurations of the
   * network interface.
   * @member {object} [dnsSettings] The DNS settings in network interface.
   * @member {array} [dnsSettings.dnsServers] List of DNS servers IP addresses.
   * Use 'AzureProvidedDNS' to switch to azure provided DNS resolution.
   * 'AzureProvidedDNS' value cannot be combined with other IPs, it must be the
   * only value in dnsServers collection.
   * @member {array} [dnsSettings.appliedDnsServers] If the VM that uses this
   * NIC is part of an Availability Set, then this list will have the union of
   * all DNS servers from all NICs that are part of the Availability Set. This
   * property is what is configured on each of those VMs.
   * @member {string} [dnsSettings.internalDnsNameLabel] Relative DNS name for
   * this NIC used for internal communications between VMs in the same virtual
   * network.
   * @member {string} [dnsSettings.internalFqdn] Fully qualified DNS name
   * supporting internal communications between VMs in the same virtual
   * network.
   * @member {string} [dnsSettings.internalDomainNameSuffix] Even if
   * internalDnsNameLabel is not specified, a DNS entry is created for the
   * primary NIC of the VM. This DNS name can be constructed by concatenating
   * the VM name with the value of internalDomainNameSuffix.
   * @member {string} [macAddress] The MAC address of the network interface.
   * @member {boolean} [primary] Gets whether this is a primary network
   * interface on a virtual machine.
   * @member {boolean} [enableAcceleratedNetworking] If the network interface
   * is accelerated networking enabled.
   * @member {boolean} [enableIPForwarding] Indicates whether IP forwarding is
   * enabled on this network interface.
   * @member {array} [hostedWorkloads] A list of references to linked BareMetal
   * resources
   * @member {string} [linkedResourceType] The type of resource to be linked to
   * this network interface
   * @member {string} [resourceGuid] The resource GUID property of the network
   * interface resource.
   * @member {string} [provisioningState] The provisioning state of the public
   * IP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
   * @member {string} [etag] A unique read-only string that changes whenever
   * the resource is updated.
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of NetworkInterface
   *
   * @returns {object} metadata of NetworkInterface
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'NetworkInterface',
      type: {
        name: 'Composite',
        className: 'NetworkInterface',
        modelProperties: {
          id: {
            required: false,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          location: {
            required: false,
            serializedName: 'location',
            type: {
              name: 'String'
            }
          },
          tags: {
            required: false,
            serializedName: 'tags',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          virtualMachine: {
            required: false,
            serializedName: 'properties.virtualMachine',
            type: {
              name: 'Composite',
              className: 'SubResource'
            }
          },
          networkSecurityGroup: {
            required: false,
            serializedName: 'properties.networkSecurityGroup',
            type: {
              name: 'Composite',
              className: 'NetworkSecurityGroup'
            }
          },
          interfaceEndpoint: {
            required: false,
            readOnly: true,
            serializedName: 'properties.interfaceEndpoint',
            type: {
              name: 'Composite',
              className: 'InterfaceEndpoint'
            }
          },
          ipConfigurations: {
            required: false,
            serializedName: 'properties.ipConfigurations',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'NetworkInterfaceIPConfigurationElementType',
                  type: {
                    name: 'Composite',
                    className: 'NetworkInterfaceIPConfiguration'
                  }
              }
            }
          },
          tapConfigurations: {
            required: false,
            serializedName: 'properties.tapConfigurations',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'NetworkInterfaceTapConfigurationElementType',
                  type: {
                    name: 'Composite',
                    className: 'NetworkInterfaceTapConfiguration'
                  }
              }
            }
          },
          dnsSettings: {
            required: false,
            serializedName: 'properties.dnsSettings',
            type: {
              name: 'Composite',
              className: 'NetworkInterfaceDnsSettings'
            }
          },
          macAddress: {
            required: false,
            serializedName: 'properties.macAddress',
            type: {
              name: 'String'
            }
          },
          primary: {
            required: false,
            serializedName: 'properties.primary',
            type: {
              name: 'Boolean'
            }
          },
          enableAcceleratedNetworking: {
            required: false,
            serializedName: 'properties.enableAcceleratedNetworking',
            type: {
              name: 'Boolean'
            }
          },
          enableIPForwarding: {
            required: false,
            serializedName: 'properties.enableIPForwarding',
            type: {
              name: 'Boolean'
            }
          },
          hostedWorkloads: {
            required: false,
            readOnly: true,
            serializedName: 'properties.hostedWorkloads',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          linkedResourceType: {
            required: false,
            serializedName: 'properties.linkedResourceType',
            type: {
              name: 'String'
            }
          },
          resourceGuid: {
            required: false,
            serializedName: 'properties.resourceGuid',
            type: {
              name: 'String'
            }
          },
          provisioningState: {
            required: false,
            serializedName: 'properties.provisioningState',
            type: {
              name: 'String'
            }
          },
          etag: {
            required: false,
            serializedName: 'etag',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = NetworkInterface;
