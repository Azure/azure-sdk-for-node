/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.13.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the NetworkInterface class.
 * @constructor
 * A NetworkInterface in a resource group
 * @member {string} [etag] Gets a unique read-only string that changes
 * whenever the resource is updated
 * 
 * @member {object} [virtualMachine] Gets or sets the reference of a
 * VirtualMachine
 * 
 * @member {string} [virtualMachine.id] Resource Id
 * 
 * @member {object} [networkSecurityGroup] Gets or sets the reference of the
 * NetworkSecurityGroup resource
 * 
 * @member {string} [networkSecurityGroup.etag] Gets a unique read-only string
 * that changes whenever the resource is updated
 * 
 * @member {array} [networkSecurityGroup.securityRules] Gets or sets Security
 * rules of network security group
 * 
 * @member {array} [networkSecurityGroup.defaultSecurityRules] Gets or sets
 * Default security rules of network security group
 * 
 * @member {array} [networkSecurityGroup.networkInterfaces] Gets collection of
 * references to Network Interfaces
 * 
 * @member {array} [networkSecurityGroup.subnets] Gets collection of
 * references to subnets
 * 
 * @member {string} [networkSecurityGroup.resourceGuid] Gets or sets resource
 * guid property of the network security group resource
 * 
 * @member {string} [networkSecurityGroup.provisioningState] Gets or sets
 * Provisioning state of the PublicIP resource Updating/Deleting/Failed
 * 
 * @member {array} [ipConfigurations] Gets or sets list of IPConfigurations of
 * the NetworkInterface
 * 
 * @member {object} [dnsSettings] Gets or sets DNS Settings in
 * NetworkInterface
 * 
 * @member {array} [dnsSettings.dnsServers] Gets or sets list of DNS servers
 * IP addresses
 * 
 * @member {array} [dnsSettings.appliedDnsServers] Gets or sets list of
 * Applied DNS servers IP addresses
 * 
 * @member {string} [dnsSettings.internalDnsNameLabel] Gets or sets the
 * Internal DNS name
 * 
 * @member {string} [dnsSettings.internalFqdn] Gets or sets full IDNS name in
 * the form, DnsName.VnetId.ZoneId.TopleveSuffix. This is set when the NIC is
 * associated to a VM
 * 
 * @member {string} [macAddress] Gets the MAC Address of the network interface
 * 
 * @member {boolean} [primary] Gets whether this is a primary NIC on a virtual
 * machine
 * 
 * @member {boolean} [enableIPForwarding] Gets or sets whether IPForwarding is
 * enabled on the NIC
 * 
 * @member {string} [resourceGuid] Gets or sets resource guid property of the
 * network interface resource
 * 
 * @member {string} [provisioningState] Gets or sets Provisioning state of the
 * PublicIP resource Updating/Deleting/Failed
 * 
 */
function NetworkInterface(parameters) {
  NetworkInterface['super_'].call(this, parameters);
  if (parameters !== null && parameters !== undefined) {
    if (parameters.etag !== undefined) {
      this.etag = parameters.etag;
    }
    if (parameters.virtualMachine) {
      this.virtualMachine = new models['SubResource'](parameters.virtualMachine);
    }
    if (parameters.networkSecurityGroup) {
      this.networkSecurityGroup = new models['NetworkSecurityGroup'](parameters.networkSecurityGroup);
    }
    if (parameters.ipConfigurations) {
      var tempParametersipConfigurations = [];
      parameters.ipConfigurations.forEach(function(element) {
        if (element) {
          element = new models['NetworkInterfaceIPConfiguration'](element);
        }
        tempParametersipConfigurations.push(element);
      });
      this.ipConfigurations = tempParametersipConfigurations;
    }
    if (parameters.dnsSettings) {
      this.dnsSettings = new models['NetworkInterfaceDnsSettings'](parameters.dnsSettings);
    }
    if (parameters.macAddress !== undefined) {
      this.macAddress = parameters.macAddress;
    }
    if (parameters.primary !== undefined) {
      this.primary = parameters.primary;
    }
    if (parameters.enableIPForwarding !== undefined) {
      this.enableIPForwarding = parameters.enableIPForwarding;
    }
    if (parameters.resourceGuid !== undefined) {
      this.resourceGuid = parameters.resourceGuid;
    }
    if (parameters.provisioningState !== undefined) {
      this.provisioningState = parameters.provisioningState;
    }
  }    
}

util.inherits(NetworkInterface, models['Resource']);

/**
 * Validate the payload against the NetworkInterface schema
 *
 * @param {JSON} payload
 *
 */
NetworkInterface.prototype.serialize = function () {
  var payload = NetworkInterface['super_'].prototype.serialize.call(this);
  if (this['etag'] !== null && this['etag'] !== undefined) {
    if (typeof this['etag'].valueOf() !== 'string') {
      throw new Error('this[\'etag\'] must be of type string.');
    }
    payload['etag'] = this['etag'];
  }

  if (this['virtualMachine']) {
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['virtualMachine'] = this['virtualMachine'].serialize();
  }

  if (this['networkSecurityGroup']) {
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['networkSecurityGroup'] = this['networkSecurityGroup'].serialize();
  }

  if (util.isArray(this['ipConfigurations'])) {
    payload['properties']['ipConfigurations'] = [];
    for (var i = 0; i < this['ipConfigurations'].length; i++) {
      if (this['ipConfigurations'][i]) {
        if (payload['properties'] === null || payload['properties'] === undefined) {
          payload['properties'] = {};
        }
        payload['properties']['ipConfigurations'][i] = this['ipConfigurations'][i].serialize();
      }
    }
  }

  if (this['dnsSettings']) {
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['dnsSettings'] = this['dnsSettings'].serialize();
  }

  if (this['macAddress'] !== null && this['macAddress'] !== undefined) {
    if (typeof this['macAddress'].valueOf() !== 'string') {
      throw new Error('this[\'macAddress\'] must be of type string.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['macAddress'] = this['macAddress'];
  }

  if (this['primary'] !== null && this['primary'] !== undefined) {
    if (typeof this['primary'] !== 'boolean') {
      throw new Error('this[\'primary\'] must be of type boolean.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['primary'] = this['primary'];
  }

  if (this['enableIPForwarding'] !== null && this['enableIPForwarding'] !== undefined) {
    if (typeof this['enableIPForwarding'] !== 'boolean') {
      throw new Error('this[\'enableIPForwarding\'] must be of type boolean.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['enableIPForwarding'] = this['enableIPForwarding'];
  }

  if (this['resourceGuid'] !== null && this['resourceGuid'] !== undefined) {
    if (typeof this['resourceGuid'].valueOf() !== 'string') {
      throw new Error('this[\'resourceGuid\'] must be of type string.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['resourceGuid'] = this['resourceGuid'];
  }

  if (this['provisioningState'] !== null && this['provisioningState'] !== undefined) {
    if (typeof this['provisioningState'].valueOf() !== 'string') {
      throw new Error('this[\'provisioningState\'] must be of type string.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['provisioningState'] = this['provisioningState'];
  }

  return payload;
};

/**
 * Deserialize the instance to NetworkInterface schema
 *
 * @param {JSON} instance
 *
 */
NetworkInterface.prototype.deserialize = function (instance) {
  NetworkInterface['super_'].prototype.deserialize.call(this, instance);
  if (instance) {
    if (instance['etag'] !== undefined) {
      this['etag'] = instance['etag'];
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['virtualMachine']) {
        this['virtualMachine'] = new models['SubResource']().deserialize(instance['properties']['virtualMachine']);
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['networkSecurityGroup']) {
        this['networkSecurityGroup'] = new models['NetworkSecurityGroup']().deserialize(instance['properties']['networkSecurityGroup']);
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['ipConfigurations']) {
        var tempInstancepropertiesipConfigurations = [];
        instance['properties']['ipConfigurations'].forEach(function(element1) {
          if (element1) {
            element1 = new models['NetworkInterfaceIPConfiguration']().deserialize(element1);
          }
          tempInstancepropertiesipConfigurations.push(element1);
        });
        this['ipConfigurations'] = tempInstancepropertiesipConfigurations;
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['dnsSettings']) {
        this['dnsSettings'] = new models['NetworkInterfaceDnsSettings']().deserialize(instance['properties']['dnsSettings']);
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['macAddress'] !== undefined) {
        this['macAddress'] = instance['properties']['macAddress'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['primary'] !== undefined) {
        this['primary'] = instance['properties']['primary'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['enableIPForwarding'] !== undefined) {
        this['enableIPForwarding'] = instance['properties']['enableIPForwarding'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['resourceGuid'] !== undefined) {
        this['resourceGuid'] = instance['properties']['resourceGuid'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['provisioningState'] !== undefined) {
        this['provisioningState'] = instance['properties']['provisioningState'];
      }
    }
  }

  return this;
};

module.exports = NetworkInterface;
