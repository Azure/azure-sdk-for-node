/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the RouteTable class.
 * @constructor
 * RouteTable resource
 * @member {string} [etag] Gets a unique read-only string that changes
 * whenever the resource is updated
 * 
 * @member {array} [routes] Gets or sets Routes in a Route Table
 * 
 * @member {array} [subnets] Gets collection of references to subnets
 * 
 * @member {string} [provisioningState] Gets or sets Provisioning state of the
 * resource Updating/Deleting/Failed
 * 
 */
function RouteTable(parameters) {
  RouteTable['super_'].call(this, parameters);
  if (parameters !== null && parameters !== undefined) {
    if (parameters.etag !== undefined) {
      this.etag = parameters.etag;
    }
    if (parameters.routes) {
      var tempParametersroutes = [];
      parameters.routes.forEach(function(element) {
        if (element) {
          element = new models['Route'](element);
        }
        tempParametersroutes.push(element);
      });
      this.routes = tempParametersroutes;
    }
    if (parameters.subnets) {
      var tempParameterssubnets = [];
      parameters.subnets.forEach(function(element1) {
        if (element1) {
          element1 = new models['Subnet'](element1);
        }
        tempParameterssubnets.push(element1);
      });
      this.subnets = tempParameterssubnets;
    }
    if (parameters.provisioningState !== undefined) {
      this.provisioningState = parameters.provisioningState;
    }
  }    
}

util.inherits(RouteTable, models['Resource']);

/**
 * Validate the payload against the RouteTable schema
 *
 * @param {JSON} payload
 *
 */
RouteTable.prototype.serialize = function () {
  var payload = RouteTable['super_'].prototype.serialize.call(this);
  if (this['etag'] !== null && this['etag'] !== undefined) {
    if (typeof this['etag'].valueOf() !== 'string') {
      throw new Error('this[\'etag\'] must be of type string.');
    }
    payload['etag'] = this['etag'];
  }

  if (util.isArray(this['routes'])) {
    payload['properties']['routes'] = [];
    for (var i = 0; i < this['routes'].length; i++) {
      if (this['routes'][i]) {
        if (payload['properties'] === null || payload['properties'] === undefined) {
          payload['properties'] = {};
        }
        payload['properties']['routes'][i] = this['routes'][i].serialize();
      }
    }
  }

  if (util.isArray(this['subnets'])) {
    payload['properties']['subnets'] = [];
    for (var i1 = 0; i1 < this['subnets'].length; i1++) {
      if (this['subnets'][i1]) {
        if (payload['properties'] === null || payload['properties'] === undefined) {
          payload['properties'] = {};
        }
        payload['properties']['subnets'][i1] = this['subnets'][i1].serialize();
      }
    }
  }

  if (this['provisioningState'] !== null && this['provisioningState'] !== undefined) {
    if (typeof this['provisioningState'].valueOf() !== 'string') {
      throw new Error('this[\'provisioningState\'] must be of type string.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['provisioningState'] = this['provisioningState'];
  }

  return payload;
};

/**
 * Deserialize the instance to RouteTable schema
 *
 * @param {JSON} instance
 *
 */
RouteTable.prototype.deserialize = function (instance) {
  RouteTable['super_'].prototype.deserialize.call(this, instance);
  if (instance) {
    if (instance['etag'] !== undefined) {
      this['etag'] = instance['etag'];
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['routes']) {
        var tempInstancepropertiesroutes = [];
        instance['properties']['routes'].forEach(function(element2) {
          if (element2) {
            element2 = new models['Route']().deserialize(element2);
          }
          tempInstancepropertiesroutes.push(element2);
        });
        this['routes'] = tempInstancepropertiesroutes;
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['subnets']) {
        var tempInstancepropertiessubnets = [];
        instance['properties']['subnets'].forEach(function(element3) {
          if (element3) {
            element3 = new models['Subnet']().deserialize(element3);
          }
          tempInstancepropertiessubnets.push(element3);
        });
        this['subnets'] = tempInstancepropertiessubnets;
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['provisioningState'] !== undefined) {
        this['provisioningState'] = instance['properties']['provisioningState'];
      }
    }
  }

  return this;
};

module.exports = RouteTable;
