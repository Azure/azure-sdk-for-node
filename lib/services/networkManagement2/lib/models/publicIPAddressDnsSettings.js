/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.13.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * @class
 * Initializes a new instance of the PublicIPAddressDnsSettings class.
 * @constructor
 * Contains FQDN of the DNS record associated with the public IP address
 * @member {string} [domainNameLabel] Gets or sets the Domain name label.The
 * concatenation of the domain name label and the regionalized DNS zone make
 * up the fully qualified domain name associated with the public IP address.
 * If a domain name label is specified, an A DNS record is created for the
 * public IP in the Microsoft Azure DNS system.
 * 
 * @member {string} [fqdn] Gets the FQDN, Fully qualified domain name of the A
 * DNS record associated with the public IP. This is the concatenation of the
 * domainNameLabel and the regionalized DNS zone.
 * 
 * @member {string} [reverseFqdn] Gets or Sests the Reverse FQDN. A
 * user-visible, fully qualified domain name that resolves to this public IP
 * address. If the reverseFqdn is specified, then a PTR DNS record is created
 * pointing from the IP address in the in-addr.arpa domain to the reverse
 * FQDN.
 * 
 */
function PublicIPAddressDnsSettings(parameters) {
  if (parameters !== null && parameters !== undefined) {
    if (parameters.domainNameLabel !== undefined) {
      this.domainNameLabel = parameters.domainNameLabel;
    }
    if (parameters.fqdn !== undefined) {
      this.fqdn = parameters.fqdn;
    }
    if (parameters.reverseFqdn !== undefined) {
      this.reverseFqdn = parameters.reverseFqdn;
    }
  }    
}


/**
 * Validate the payload against the PublicIPAddressDnsSettings schema
 *
 * @param {JSON} payload
 *
 */
PublicIPAddressDnsSettings.prototype.serialize = function () {
  var payload = {};
  if (this['domainNameLabel'] !== null && this['domainNameLabel'] !== undefined) {
    if (typeof this['domainNameLabel'].valueOf() !== 'string') {
      throw new Error('this[\'domainNameLabel\'] must be of type string.');
    }
    payload['domainNameLabel'] = this['domainNameLabel'];
  }

  if (this['fqdn'] !== null && this['fqdn'] !== undefined) {
    if (typeof this['fqdn'].valueOf() !== 'string') {
      throw new Error('this[\'fqdn\'] must be of type string.');
    }
    payload['fqdn'] = this['fqdn'];
  }

  if (this['reverseFqdn'] !== null && this['reverseFqdn'] !== undefined) {
    if (typeof this['reverseFqdn'].valueOf() !== 'string') {
      throw new Error('this[\'reverseFqdn\'] must be of type string.');
    }
    payload['reverseFqdn'] = this['reverseFqdn'];
  }

  return payload;
};

/**
 * Deserialize the instance to PublicIPAddressDnsSettings schema
 *
 * @param {JSON} instance
 *
 */
PublicIPAddressDnsSettings.prototype.deserialize = function (instance) {
  if (instance) {
    if (instance['domainNameLabel'] !== undefined) {
      this['domainNameLabel'] = instance['domainNameLabel'];
    }

    if (instance['fqdn'] !== undefined) {
      this['fqdn'] = instance['fqdn'];
    }

    if (instance['reverseFqdn'] !== undefined) {
      this['reverseFqdn'] = instance['reverseFqdn'];
    }
  }

  return this;
};

module.exports = PublicIPAddressDnsSettings;
