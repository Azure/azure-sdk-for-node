/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Service End point policy resource.
 *
 * @extends models['Resource']
 */
class ServiceEndpointPolicy extends models['Resource'] {
  /**
   * Create a ServiceEndpointPolicy.
   * @property {array} [serviceEndpointPolicyDefinitions] A collection of
   * service endpoint policy definitions of the service endpoint policy.
   * @property {array} [subnets] A collection of references to subnets.
   * @property {string} [resourceGuid] The resource GUID property of the
   * service endpoint policy resource.
   * @property {string} [provisioningState] The provisioning state of the
   * service endpoint policy. Possible values are: 'Updating', 'Deleting', and
   * 'Failed'.
   * @property {string} [etag] A unique read-only string that changes whenever
   * the resource is updated.
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of ServiceEndpointPolicy
   *
   * @returns {object} metadata of ServiceEndpointPolicy
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'ServiceEndpointPolicy',
      type: {
        name: 'Composite',
        className: 'ServiceEndpointPolicy',
        modelProperties: {
          id: {
            required: false,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          location: {
            required: false,
            serializedName: 'location',
            type: {
              name: 'String'
            }
          },
          tags: {
            required: false,
            serializedName: 'tags',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          serviceEndpointPolicyDefinitions: {
            required: false,
            serializedName: 'properties.serviceEndpointPolicyDefinitions',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ServiceEndpointPolicyDefinitionElementType',
                  type: {
                    name: 'Composite',
                    className: 'ServiceEndpointPolicyDefinition'
                  }
              }
            }
          },
          subnets: {
            required: false,
            readOnly: true,
            serializedName: 'properties.subnets',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'SubnetElementType',
                  type: {
                    name: 'Composite',
                    className: 'Subnet'
                  }
              }
            }
          },
          resourceGuid: {
            required: false,
            readOnly: true,
            serializedName: 'properties.resourceGuid',
            type: {
              name: 'String'
            }
          },
          provisioningState: {
            required: false,
            readOnly: true,
            serializedName: 'properties.provisioningState',
            type: {
              name: 'String'
            }
          },
          etag: {
            required: false,
            serializedName: 'etag',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = ServiceEndpointPolicy;
