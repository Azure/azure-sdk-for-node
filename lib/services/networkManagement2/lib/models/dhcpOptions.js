/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var util = require('util');

/**
 * @class
 * Initializes a new instance of the DhcpOptions class.
 * @constructor
 * DHCPOptions contains an array of DNS servers available to VMs deployed in
 * the virtual networkStandard DHCP option for a subnet overrides VNET DHCP
 * options.
 * @member {array} [dnsServers] Gets or sets list of DNS servers IP addresses
 * 
 */
function DhcpOptions(parameters) {
  if (parameters !== null && parameters !== undefined) {
    if (parameters.dnsServers) {
      var tempParametersdnsServers = [];
      parameters.dnsServers.forEach(function(element) {
        if (element !== undefined) {
          element = element;
        }
        tempParametersdnsServers.push(element);
      });
      this.dnsServers = tempParametersdnsServers;
    }
  }    
}


/**
 * Validate the payload against the DhcpOptions schema
 *
 * @param {JSON} payload
 *
 */
DhcpOptions.prototype.serialize = function () {
  var payload = {};
  if (util.isArray(this['dnsServers'])) {
    payload['dnsServers'] = [];
    for (var i = 0; i < this['dnsServers'].length; i++) {
      if (this['dnsServers'][i] !== null && this['dnsServers'][i] !== undefined) {
        if (typeof this['dnsServers'][i].valueOf() !== 'string') {
          throw new Error('this[\'dnsServers\'][i] must be of type string.');
        }
        if (payload['dnsServers'] === null || payload['dnsServers'] === undefined) {
          payload['dnsServers'] = {};
        }
        payload['dnsServers'][i] = this['dnsServers'][i];
      }
    }
  }

  return payload;
};

/**
 * Deserialize the instance to DhcpOptions schema
 *
 * @param {JSON} instance
 *
 */
DhcpOptions.prototype.deserialize = function (instance) {
  if (instance) {
    if (instance['dnsServers']) {
      var tempInstancednsServers = [];
      instance['dnsServers'].forEach(function(element1) {
        if (element1 !== undefined) {
          element1 = element1;
        }
        tempInstancednsServers.push(element1);
      });
      this['dnsServers'] = tempInstancednsServers;
    }
  }

  return this;
};

module.exports = DhcpOptions;
