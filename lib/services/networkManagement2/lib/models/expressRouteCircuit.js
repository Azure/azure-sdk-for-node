/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the ExpressRouteCircuit class.
 * @constructor
 * ExpressRouteCircuit resource
 * @member {object} [sku] Gets or sets sku
 * 
 * @member {string} [sku.name] Gets or sets name of the sku.
 * 
 * @member {string} [sku.tier] Gets or sets tier of the sku. Possible values
 * include: 'Standard', 'Premium'
 * 
 * @member {string} [sku.family] Gets or sets family of the sku. Possible
 * values include: 'UnlimitedData', 'MeteredData'
 * 
 * @member {boolean} [allowClassicOperations] allow classic operations
 * 
 * @member {string} [circuitProvisioningState] Gets or sets
 * CircuitProvisioningState state of the resource
 * 
 * @member {string} [serviceProviderProvisioningState] Gets or sets
 * ServiceProviderProvisioningState state of the resource . Possible values
 * include: 'NotProvisioned', 'Provisioning', 'Provisioned', 'Deprovisioning'
 * 
 * @member {array} [authorizations] Gets or sets list of authorizations
 * 
 * @member {array} [peerings] Gets or sets list of peerings
 * 
 * @member {string} [serviceKey] Gets or sets ServiceKey
 * 
 * @member {string} [serviceProviderNotes] Gets or sets ServiceProviderNotes
 * 
 * @member {object} [serviceProviderProperties] Gets or sets
 * ServiceProviderProperties
 * 
 * @member {string} [serviceProviderProperties.serviceProviderName] Gets or
 * sets serviceProviderName.
 * 
 * @member {string} [serviceProviderProperties.peeringLocation] Gets or sets
 * peering location.
 * 
 * @member {number} [serviceProviderProperties.bandwidthInMbps] Gets or sets
 * BandwidthInMbps.
 * 
 * @member {string} [provisioningState] Gets or sets Provisioning state of the
 * PublicIP resource Updating/Deleting/Failed
 * 
 * @member {string} [etag] Gets a unique read-only string that changes
 * whenever the resource is updated
 * 
 */
function ExpressRouteCircuit() {
  ExpressRouteCircuit['super_'].call(this);
}

util.inherits(ExpressRouteCircuit, models['Resource']);

/**
 * Defines the metadata of ExpressRouteCircuit
 *
 * @returns {object} metadata of ExpressRouteCircuit
 *
 */
ExpressRouteCircuit.prototype.mapper = function () {
  return {
    required: false,
    serializedName: 'ExpressRouteCircuit',
    type: {
      name: 'Composite',
      className: 'ExpressRouteCircuit',
      modelProperties: {
        id: {
          required: false,
          serializedName: 'id',
          type: {
            name: 'String'
          }
        },
        name: {
          required: false,
          readOnly: true,
          serializedName: 'name',
          type: {
            name: 'String'
          }
        },
        type: {
          required: false,
          readOnly: true,
          serializedName: 'type',
          type: {
            name: 'String'
          }
        },
        location: {
          required: false,
          serializedName: 'location',
          type: {
            name: 'String'
          }
        },
        tags: {
          required: false,
          serializedName: 'tags',
          type: {
            name: 'Dictionary',
            value: {
                required: false,
                serializedName: 'StringElementType',
                type: {
                  name: 'String'
                }
            }
          }
        },
        sku: {
          required: false,
          serializedName: 'sku',
          type: {
            name: 'Composite',
            className: 'ExpressRouteCircuitSku'
          }
        },
        allowClassicOperations: {
          required: false,
          serializedName: 'properties.allowClassicOperations',
          type: {
            name: 'Boolean'
          }
        },
        circuitProvisioningState: {
          required: false,
          serializedName: 'properties.circuitProvisioningState',
          type: {
            name: 'String'
          }
        },
        serviceProviderProvisioningState: {
          required: false,
          serializedName: 'properties.serviceProviderProvisioningState',
          type: {
            name: 'String'
          }
        },
        authorizations: {
          required: false,
          serializedName: 'properties.authorizations',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'ExpressRouteCircuitAuthorizationElementType',
                type: {
                  name: 'Composite',
                  className: 'ExpressRouteCircuitAuthorization'
                }
            }
          }
        },
        peerings: {
          required: false,
          serializedName: 'properties.peerings',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'ExpressRouteCircuitPeeringElementType',
                type: {
                  name: 'Composite',
                  className: 'ExpressRouteCircuitPeering'
                }
            }
          }
        },
        serviceKey: {
          required: false,
          serializedName: 'properties.serviceKey',
          type: {
            name: 'String'
          }
        },
        serviceProviderNotes: {
          required: false,
          serializedName: 'properties.serviceProviderNotes',
          type: {
            name: 'String'
          }
        },
        serviceProviderProperties: {
          required: false,
          serializedName: 'properties.serviceProviderProperties',
          type: {
            name: 'Composite',
            className: 'ExpressRouteCircuitServiceProviderProperties'
          }
        },
        provisioningState: {
          required: false,
          serializedName: 'properties.provisioningState',
          type: {
            name: 'String'
          }
        },
        etag: {
          required: false,
          serializedName: 'etag',
          type: {
            name: 'String'
          }
        }
      }
    }
  };
};

module.exports = ExpressRouteCircuit;
