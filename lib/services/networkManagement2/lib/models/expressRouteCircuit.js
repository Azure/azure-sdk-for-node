/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.13.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the ExpressRouteCircuit class.
 * @constructor
 * ExpressRouteCircuit resource
 * @member {object} [sku] Gets or sets sku
 * 
 * @member {string} [sku.name] Gets or sets name of the sku.
 * 
 * @member {string} [sku.tier] Gets or sets tier of the sku. Possible values
 * for this property include: 'Standard', 'Premium'.
 * 
 * @member {string} [sku.family] Gets or sets family of the sku. Possible
 * values for this property include: 'UnlimitedData', 'MeteredData'.
 * 
 * @member {string} [etag] Gets a unique read-only string that changes
 * whenever the resource is updated
 * 
 * @member {string} [circuitProvisioningState] Gets or sets
 * CircuitProvisioningState state of the resource
 * 
 * @member {string} [serviceProviderProvisioningState] Gets or sets
 * ServiceProviderProvisioningState state of the resource . Possible values
 * for this property include: 'NotProvisioned', 'Provisioning',
 * 'Provisioned', 'Deprovisioning'.
 * 
 * @member {array} [authorizations] Gets or sets list of authorizations
 * 
 * @member {array} [peerings] Gets or sets list of peerings
 * 
 * @member {string} [serviceKey] Gets or sets ServiceKey
 * 
 * @member {string} [serviceProviderNotes] Gets or sets ServiceProviderNotes
 * 
 * @member {object} [serviceProviderProperties] Gets or sets
 * ServiceProviderProperties
 * 
 * @member {string} [serviceProviderProperties.serviceProviderName] Gets or
 * sets serviceProviderName.
 * 
 * @member {string} [serviceProviderProperties.peeringLocation] Gets or sets
 * peering location.
 * 
 * @member {number} [serviceProviderProperties.bandwidthInMbps] Gets or sets
 * BandwidthInMbps.
 * 
 * @member {string} [provisioningState] Gets or sets Provisioning state of the
 * PublicIP resource Updating/Deleting/Failed
 * 
 */
function ExpressRouteCircuit(parameters) {
  ExpressRouteCircuit['super_'].call(this, parameters);
  if (parameters !== null && parameters !== undefined) {
    if (parameters.sku) {
      this.sku = new models['ExpressRouteCircuitSku'](parameters.sku);
    }
    if (parameters.etag !== undefined) {
      this.etag = parameters.etag;
    }
    if (parameters.circuitProvisioningState !== undefined) {
      this.circuitProvisioningState = parameters.circuitProvisioningState;
    }
    if (parameters.serviceProviderProvisioningState !== undefined) {
      this.serviceProviderProvisioningState = parameters.serviceProviderProvisioningState;
    }
    if (parameters.authorizations) {
      var tempParametersauthorizations = [];
      parameters.authorizations.forEach(function(element) {
        if (element) {
          element = new models['ExpressRouteCircuitAuthorization'](element);
        }
        tempParametersauthorizations.push(element);
      });
      this.authorizations = tempParametersauthorizations;
    }
    if (parameters.peerings) {
      var tempParameterspeerings = [];
      parameters.peerings.forEach(function(element1) {
        if (element1) {
          element1 = new models['ExpressRouteCircuitPeering'](element1);
        }
        tempParameterspeerings.push(element1);
      });
      this.peerings = tempParameterspeerings;
    }
    if (parameters.serviceKey !== undefined) {
      this.serviceKey = parameters.serviceKey;
    }
    if (parameters.serviceProviderNotes !== undefined) {
      this.serviceProviderNotes = parameters.serviceProviderNotes;
    }
    if (parameters.serviceProviderProperties) {
      this.serviceProviderProperties = new models['ExpressRouteCircuitServiceProviderProperties'](parameters.serviceProviderProperties);
    }
    if (parameters.provisioningState !== undefined) {
      this.provisioningState = parameters.provisioningState;
    }
  }    
}

util.inherits(ExpressRouteCircuit, models['Resource']);

/**
 * Validate the payload against the ExpressRouteCircuit schema
 *
 * @param {JSON} payload
 *
 */
ExpressRouteCircuit.prototype.serialize = function () {
  var payload = ExpressRouteCircuit['super_'].prototype.serialize.call(this);
  if (this['sku']) {
    payload['sku'] = this['sku'].serialize();
  }

  if (this['etag'] !== null && this['etag'] !== undefined) {
    if (typeof this['etag'].valueOf() !== 'string') {
      throw new Error('this[\'etag\'] must be of type string.');
    }
    payload['etag'] = this['etag'];
  }

  if (this['circuitProvisioningState'] !== null && this['circuitProvisioningState'] !== undefined) {
    if (typeof this['circuitProvisioningState'].valueOf() !== 'string') {
      throw new Error('this[\'circuitProvisioningState\'] must be of type string.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['circuitProvisioningState'] = this['circuitProvisioningState'];
  }

  if (this['serviceProviderProvisioningState'] !== null && this['serviceProviderProvisioningState'] !== undefined) {
    if (typeof this['serviceProviderProvisioningState'].valueOf() !== 'string') {
      throw new Error('this[\'serviceProviderProvisioningState\'] must be of type string.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['serviceProviderProvisioningState'] = this['serviceProviderProvisioningState'];
  }

  if (util.isArray(this['authorizations'])) {
    payload['properties']['authorizations'] = [];
    for (var i = 0; i < this['authorizations'].length; i++) {
      if (this['authorizations'][i]) {
        if (payload['properties'] === null || payload['properties'] === undefined) {
          payload['properties'] = {};
        }
        payload['properties']['authorizations'][i] = this['authorizations'][i].serialize();
      }
    }
  }

  if (util.isArray(this['peerings'])) {
    payload['properties']['peerings'] = [];
    for (var i1 = 0; i1 < this['peerings'].length; i1++) {
      if (this['peerings'][i1]) {
        if (payload['properties'] === null || payload['properties'] === undefined) {
          payload['properties'] = {};
        }
        payload['properties']['peerings'][i1] = this['peerings'][i1].serialize();
      }
    }
  }

  if (this['serviceKey'] !== null && this['serviceKey'] !== undefined) {
    if (typeof this['serviceKey'].valueOf() !== 'string') {
      throw new Error('this[\'serviceKey\'] must be of type string.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['serviceKey'] = this['serviceKey'];
  }

  if (this['serviceProviderNotes'] !== null && this['serviceProviderNotes'] !== undefined) {
    if (typeof this['serviceProviderNotes'].valueOf() !== 'string') {
      throw new Error('this[\'serviceProviderNotes\'] must be of type string.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['serviceProviderNotes'] = this['serviceProviderNotes'];
  }

  if (this['serviceProviderProperties']) {
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['serviceProviderProperties'] = this['serviceProviderProperties'].serialize();
  }

  if (this['provisioningState'] !== null && this['provisioningState'] !== undefined) {
    if (typeof this['provisioningState'].valueOf() !== 'string') {
      throw new Error('this[\'provisioningState\'] must be of type string.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['provisioningState'] = this['provisioningState'];
  }

  return payload;
};

/**
 * Deserialize the instance to ExpressRouteCircuit schema
 *
 * @param {JSON} instance
 *
 */
ExpressRouteCircuit.prototype.deserialize = function (instance) {
  ExpressRouteCircuit['super_'].prototype.deserialize.call(this, instance);
  if (instance) {
    if (instance['sku']) {
      this['sku'] = new models['ExpressRouteCircuitSku']().deserialize(instance['sku']);
    }

    if (instance['etag'] !== undefined) {
      this['etag'] = instance['etag'];
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['circuitProvisioningState'] !== undefined) {
        this['circuitProvisioningState'] = instance['properties']['circuitProvisioningState'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['serviceProviderProvisioningState'] !== undefined) {
        this['serviceProviderProvisioningState'] = instance['properties']['serviceProviderProvisioningState'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['authorizations']) {
        var tempInstancepropertiesauthorizations = [];
        instance['properties']['authorizations'].forEach(function(element2) {
          if (element2) {
            element2 = new models['ExpressRouteCircuitAuthorization']().deserialize(element2);
          }
          tempInstancepropertiesauthorizations.push(element2);
        });
        this['authorizations'] = tempInstancepropertiesauthorizations;
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['peerings']) {
        var tempInstancepropertiespeerings = [];
        instance['properties']['peerings'].forEach(function(element3) {
          if (element3) {
            element3 = new models['ExpressRouteCircuitPeering']().deserialize(element3);
          }
          tempInstancepropertiespeerings.push(element3);
        });
        this['peerings'] = tempInstancepropertiespeerings;
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['serviceKey'] !== undefined) {
        this['serviceKey'] = instance['properties']['serviceKey'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['serviceProviderNotes'] !== undefined) {
        this['serviceProviderNotes'] = instance['properties']['serviceProviderNotes'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['serviceProviderProperties']) {
        this['serviceProviderProperties'] = new models['ExpressRouteCircuitServiceProviderProperties']().deserialize(instance['properties']['serviceProviderProperties']);
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['provisioningState'] !== undefined) {
        this['provisioningState'] = instance['properties']['provisioningState'];
      }
    }
  }

  return this;
};

module.exports = ExpressRouteCircuit;
