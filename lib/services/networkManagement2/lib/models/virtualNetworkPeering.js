/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the VirtualNetworkPeering class.
 * @constructor
 * Peerings in a VirtualNework resource
 *
 * @member {boolean} [allowVirtualNetworkAccess] Gets or sets whether the VMs
 * in the linked virtual network space would be able to access all the VMs in
 * local Virtual network space
 * 
 * @member {boolean} [allowForwardedTraffic] Gets or sets whether the
 * forwarded traffic from the VMs in the remote virtual network will be
 * allowed/disallowed
 * 
 * @member {boolean} [allowGatewayTransit] Gets or sets if gatewayLinks can be
 * used in remote virtual networkâ€™s link to this virtual network
 * 
 * @member {boolean} [useRemoteGateways] Gets or sets if remote gateways can
 * be used on this virtual network. If the flag is set to true, and
 * allowGatewayTransit on remote peering is also true, virtual network will
 * use gateways of remote virtual network for transit. Only 1 peering can
 * have this flag set to true. This flag cannot be set if virtual network
 * already has a gateway.
 * 
 * @member {object} [remoteVirtualNetwork] Gets or sets the reference of the
 * remote virtual network
 * 
 * @member {string} [remoteVirtualNetwork.id] Resource Id
 * 
 * @member {string} [peeringState] Gets the status of the virtual network
 * peering. Possible values include: 'Initiated', 'Connected', 'Disconnected'
 * 
 * @member {string} [provisioningState] Gets provisioning state of the resource
 * 
 * @member {string} [name] Gets or sets the name of the resource that is
 * unique within a resource group. This name can be used to access the
 * resource
 * 
 * @member {string} [etag] A unique read-only string that changes whenever the
 * resource is updated
 * 
 */
function VirtualNetworkPeering() {
  VirtualNetworkPeering['super_'].call(this);
}

util.inherits(VirtualNetworkPeering, models['SubResource']);

/**
 * Defines the metadata of VirtualNetworkPeering
 *
 * @returns {object} metadata of VirtualNetworkPeering
 *
 */
VirtualNetworkPeering.prototype.mapper = function () {
  return {
    required: false,
    serializedName: 'VirtualNetworkPeering',
    type: {
      name: 'Composite',
      className: 'VirtualNetworkPeering',
      modelProperties: {
        id: {
          required: false,
          serializedName: 'id',
          type: {
            name: 'String'
          }
        },
        allowVirtualNetworkAccess: {
          required: false,
          serializedName: 'properties.allowVirtualNetworkAccess',
          type: {
            name: 'Boolean'
          }
        },
        allowForwardedTraffic: {
          required: false,
          serializedName: 'properties.allowForwardedTraffic',
          type: {
            name: 'Boolean'
          }
        },
        allowGatewayTransit: {
          required: false,
          serializedName: 'properties.allowGatewayTransit',
          type: {
            name: 'Boolean'
          }
        },
        useRemoteGateways: {
          required: false,
          serializedName: 'properties.useRemoteGateways',
          type: {
            name: 'Boolean'
          }
        },
        remoteVirtualNetwork: {
          required: false,
          serializedName: 'properties.remoteVirtualNetwork',
          type: {
            name: 'Composite',
            className: 'SubResource'
          }
        },
        peeringState: {
          required: false,
          serializedName: 'properties.peeringState',
          type: {
            name: 'String'
          }
        },
        provisioningState: {
          required: false,
          serializedName: 'properties.provisioningState',
          type: {
            name: 'String'
          }
        },
        name: {
          required: false,
          serializedName: 'name',
          type: {
            name: 'String'
          }
        },
        etag: {
          required: false,
          serializedName: 'etag',
          type: {
            name: 'String'
          }
        }
      }
    }
  };
};

module.exports = VirtualNetworkPeering;
