/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.13.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the ExpressRouteServiceProviderPropertiesFormat class.
 * @constructor
 * Properties of ExpressRouteServiceProvider
 * @member {array} [peeringLocations] Gets or list of peering locations
 * 
 * @member {array} [bandwidthsOffered] Gets or bandwidths offered
 * 
 * @member {string} [provisioningState] Gets or sets Provisioning state of the
 * resource
 * 
 */
function ExpressRouteServiceProviderPropertiesFormat(parameters) {
  if (parameters !== null && parameters !== undefined) {
    if (parameters.peeringLocations) {
      var tempParameterspeeringLocations = [];
      parameters.peeringLocations.forEach(function(element) {
        if (element !== undefined) {
          element = element;
        }
        tempParameterspeeringLocations.push(element);
      });
      this.peeringLocations = tempParameterspeeringLocations;
    }
    if (parameters.bandwidthsOffered) {
      var tempParametersbandwidthsOffered = [];
      parameters.bandwidthsOffered.forEach(function(element1) {
        if (element1) {
          element1 = new models['ExpressRouteServiceProviderBandwidthsOffered'](element1);
        }
        tempParametersbandwidthsOffered.push(element1);
      });
      this.bandwidthsOffered = tempParametersbandwidthsOffered;
    }
    if (parameters.provisioningState !== undefined) {
      this.provisioningState = parameters.provisioningState;
    }
  }    
}


/**
 * Validate the payload against the ExpressRouteServiceProviderPropertiesFormat schema
 *
 * @param {JSON} payload
 *
 */
ExpressRouteServiceProviderPropertiesFormat.prototype.serialize = function () {
  var payload = {};
  if (util.isArray(this['peeringLocations'])) {
    payload['peeringLocations'] = [];
    for (var i = 0; i < this['peeringLocations'].length; i++) {
      if (this['peeringLocations'][i] !== null && this['peeringLocations'][i] !== undefined) {
        if (typeof this['peeringLocations'][i].valueOf() !== 'string') {
          throw new Error('this[\'peeringLocations\'][i] must be of type string.');
        }
        if (payload['peeringLocations'] === null || payload['peeringLocations'] === undefined) {
          payload['peeringLocations'] = {};
        }
        payload['peeringLocations'][i] = this['peeringLocations'][i];
      }
    }
  }

  if (util.isArray(this['bandwidthsOffered'])) {
    payload['bandwidthsOffered'] = [];
    for (var i1 = 0; i1 < this['bandwidthsOffered'].length; i1++) {
      if (this['bandwidthsOffered'][i1]) {
        if (payload['bandwidthsOffered'] === null || payload['bandwidthsOffered'] === undefined) {
          payload['bandwidthsOffered'] = {};
        }
        payload['bandwidthsOffered'][i1] = this['bandwidthsOffered'][i1].serialize();
      }
    }
  }

  if (this['provisioningState'] !== null && this['provisioningState'] !== undefined) {
    if (typeof this['provisioningState'].valueOf() !== 'string') {
      throw new Error('this[\'provisioningState\'] must be of type string.');
    }
    payload['provisioningState'] = this['provisioningState'];
  }

  return payload;
};

/**
 * Deserialize the instance to ExpressRouteServiceProviderPropertiesFormat schema
 *
 * @param {JSON} instance
 *
 */
ExpressRouteServiceProviderPropertiesFormat.prototype.deserialize = function (instance) {
  if (instance) {
    if (instance['peeringLocations']) {
      var tempInstancepeeringLocations = [];
      instance['peeringLocations'].forEach(function(element2) {
        if (element2 !== undefined) {
          element2 = element2;
        }
        tempInstancepeeringLocations.push(element2);
      });
      this['peeringLocations'] = tempInstancepeeringLocations;
    }

    if (instance['bandwidthsOffered']) {
      var tempInstancebandwidthsOffered = [];
      instance['bandwidthsOffered'].forEach(function(element3) {
        if (element3) {
          element3 = new models['ExpressRouteServiceProviderBandwidthsOffered']().deserialize(element3);
        }
        tempInstancebandwidthsOffered.push(element3);
      });
      this['bandwidthsOffered'] = tempInstancebandwidthsOffered;
    }

    if (instance['provisioningState'] !== undefined) {
      this['provisioningState'] = instance['provisioningState'];
    }
  }

  return this;
};

module.exports = ExpressRouteServiceProviderPropertiesFormat;
