/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.13.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the VirtualNetworkGatewayIPConfiguration class.
 * @constructor
 * IpConfiguration for Virtual network gateway
 * @member {string} [name] Gets name of the resource that is unique within a
 * resource group. This name can be used to access the resource
 * 
 * @member {string} [etag] A unique read-only string that changes whenever the
 * resource is updated
 * 
 * @member {string} [privateIPAddress] Gets or sets the privateIPAddress of
 * the IP Configuration
 * 
 * @member {string} [privateIPAllocationMethod] Gets or sets PrivateIP
 * allocation method (Static/Dynamic). Possible values for this property
 * include: 'Static', 'Dynamic'.
 * 
 * @member {object} [subnet] Gets or sets the reference of the subnet resource
 * 
 * @member {string} [subnet.id] Resource Id
 * 
 * @member {object} [publicIPAddress] Gets or sets the reference of the
 * PublicIP resource
 * 
 * @member {string} [publicIPAddress.id] Resource Id
 * 
 * @member {string} [provisioningState] Gets or sets Provisioning state of the
 * PublicIP resource Updating/Deleting/Failed
 * 
 */
function VirtualNetworkGatewayIPConfiguration(parameters) {
  VirtualNetworkGatewayIPConfiguration['super_'].call(this, parameters);
  if (parameters !== null && parameters !== undefined) {
    if (parameters.name !== undefined) {
      this.name = parameters.name;
    }
    if (parameters.etag !== undefined) {
      this.etag = parameters.etag;
    }
    if (parameters.privateIPAddress !== undefined) {
      this.privateIPAddress = parameters.privateIPAddress;
    }
    if (parameters.privateIPAllocationMethod !== undefined) {
      this.privateIPAllocationMethod = parameters.privateIPAllocationMethod;
    }
    if (parameters.subnet) {
      this.subnet = new models['SubResource'](parameters.subnet);
    }
    if (parameters.publicIPAddress) {
      this.publicIPAddress = new models['SubResource'](parameters.publicIPAddress);
    }
    if (parameters.provisioningState !== undefined) {
      this.provisioningState = parameters.provisioningState;
    }
  }    
}

util.inherits(VirtualNetworkGatewayIPConfiguration, models['SubResource']);

/**
 * Validate the payload against the VirtualNetworkGatewayIPConfiguration schema
 *
 * @param {JSON} payload
 *
 */
VirtualNetworkGatewayIPConfiguration.prototype.serialize = function () {
  var payload = VirtualNetworkGatewayIPConfiguration['super_'].prototype.serialize.call(this);
  if (this['name'] !== null && this['name'] !== undefined) {
    if (typeof this['name'].valueOf() !== 'string') {
      throw new Error('this[\'name\'] must be of type string.');
    }
    payload['name'] = this['name'];
  }

  if (this['etag'] !== null && this['etag'] !== undefined) {
    if (typeof this['etag'].valueOf() !== 'string') {
      throw new Error('this[\'etag\'] must be of type string.');
    }
    payload['etag'] = this['etag'];
  }

  if (this['privateIPAddress'] !== null && this['privateIPAddress'] !== undefined) {
    if (typeof this['privateIPAddress'].valueOf() !== 'string') {
      throw new Error('this[\'privateIPAddress\'] must be of type string.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['privateIPAddress'] = this['privateIPAddress'];
  }

  if (this['privateIPAllocationMethod'] !== null && this['privateIPAllocationMethod'] !== undefined) {
    if (typeof this['privateIPAllocationMethod'].valueOf() !== 'string') {
      throw new Error('this[\'privateIPAllocationMethod\'] must be of type string.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['privateIPAllocationMethod'] = this['privateIPAllocationMethod'];
  }

  if (this['subnet']) {
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['subnet'] = this['subnet'].serialize();
  }

  if (this['publicIPAddress']) {
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['publicIPAddress'] = this['publicIPAddress'].serialize();
  }

  if (this['provisioningState'] !== null && this['provisioningState'] !== undefined) {
    if (typeof this['provisioningState'].valueOf() !== 'string') {
      throw new Error('this[\'provisioningState\'] must be of type string.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['provisioningState'] = this['provisioningState'];
  }

  return payload;
};

/**
 * Deserialize the instance to VirtualNetworkGatewayIPConfiguration schema
 *
 * @param {JSON} instance
 *
 */
VirtualNetworkGatewayIPConfiguration.prototype.deserialize = function (instance) {
  VirtualNetworkGatewayIPConfiguration['super_'].prototype.deserialize.call(this, instance);
  if (instance) {
    if (instance['name'] !== undefined) {
      this['name'] = instance['name'];
    }

    if (instance['etag'] !== undefined) {
      this['etag'] = instance['etag'];
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['privateIPAddress'] !== undefined) {
        this['privateIPAddress'] = instance['properties']['privateIPAddress'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['privateIPAllocationMethod'] !== undefined) {
        this['privateIPAllocationMethod'] = instance['properties']['privateIPAllocationMethod'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['subnet']) {
        this['subnet'] = new models['SubResource']().deserialize(instance['properties']['subnet']);
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['publicIPAddress']) {
        this['publicIPAddress'] = new models['SubResource']().deserialize(instance['properties']['publicIPAddress']);
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['provisioningState'] !== undefined) {
        this['provisioningState'] = instance['properties']['provisioningState'];
      }
    }
  }

  return this;
};

module.exports = VirtualNetworkGatewayIPConfiguration;
