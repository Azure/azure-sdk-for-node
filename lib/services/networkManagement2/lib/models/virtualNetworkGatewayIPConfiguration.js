/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the VirtualNetworkGatewayIPConfiguration class.
 * @constructor
 * IpConfiguration for Virtual network gateway
 * @member {string} [privateIPAddress] Gets or sets the privateIPAddress of
 * the IP Configuration
 * 
 * @member {string} [privateIPAllocationMethod] Gets or sets PrivateIP
 * allocation method (Static/Dynamic). Possible values include: 'Static',
 * 'Dynamic'
 * 
 * @member {object} [subnet] Gets or sets the reference of the subnet resource
 * 
 * @member {string} [subnet.id] Resource Id
 * 
 * @member {object} [publicIPAddress] Gets or sets the reference of the
 * PublicIP resource
 * 
 * @member {string} [publicIPAddress.id] Resource Id
 * 
 * @member {string} [provisioningState] Gets or sets Provisioning state of the
 * PublicIP resource Updating/Deleting/Failed
 * 
 * @member {string} [name] Gets name of the resource that is unique within a
 * resource group. This name can be used to access the resource
 * 
 * @member {string} [etag] A unique read-only string that changes whenever the
 * resource is updated
 * 
 */
function VirtualNetworkGatewayIPConfiguration() {
  VirtualNetworkGatewayIPConfiguration['super_'].call(this);
}

util.inherits(VirtualNetworkGatewayIPConfiguration, models['SubResource']);

/**
 * Defines the metadata of VirtualNetworkGatewayIPConfiguration
 *
 * @returns {object} metadata of VirtualNetworkGatewayIPConfiguration
 *
 */
VirtualNetworkGatewayIPConfiguration.prototype.mapper = function () {
  return {
    required: false,
    serializedName: 'VirtualNetworkGatewayIPConfiguration',
    type: {
      name: 'Composite',
      className: 'VirtualNetworkGatewayIPConfiguration',
      modelProperties: {
        id: {
          required: false,
          serializedName: 'id',
          type: {
            name: 'String'
          }
        },
        privateIPAddress: {
          required: false,
          serializedName: 'properties.privateIPAddress',
          type: {
            name: 'String'
          }
        },
        privateIPAllocationMethod: {
          required: false,
          serializedName: 'properties.privateIPAllocationMethod',
          type: {
            name: 'String'
          }
        },
        subnet: {
          required: false,
          serializedName: 'properties.subnet',
          type: {
            name: 'Composite',
            className: 'SubResource'
          }
        },
        publicIPAddress: {
          required: false,
          serializedName: 'properties.publicIPAddress',
          type: {
            name: 'Composite',
            className: 'SubResource'
          }
        },
        provisioningState: {
          required: false,
          serializedName: 'properties.provisioningState',
          type: {
            name: 'String'
          }
        },
        name: {
          required: false,
          serializedName: 'name',
          type: {
            name: 'String'
          }
        },
        etag: {
          required: false,
          serializedName: 'etag',
          type: {
            name: 'String'
          }
        }
      }
    }
  };
};

module.exports = VirtualNetworkGatewayIPConfiguration;
