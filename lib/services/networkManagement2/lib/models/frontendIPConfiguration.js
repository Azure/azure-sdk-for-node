/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.13.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the FrontendIPConfiguration class.
 * @constructor
 * Frontend IP address of the load balancer
 * @member {string} [name] Gets name of the resource that is unique within a
 * resource group. This name can be used to access the resource
 * 
 * @member {string} [etag] A unique read-only string that changes whenever the
 * resource is updated
 * 
 * @member {array} [inboundNatRules] Read only.Inbound rules URIs that use
 * this frontend IP
 * 
 * @member {array} [inboundNatPools] Read only.Inbound pools URIs that use
 * this frontend IP
 * 
 * @member {array} [outboundNatRules] Read only.Outbound rules URIs that use
 * this frontend IP
 * 
 * @member {array} [loadBalancingRules] Gets Load Balancing rules URIs that
 * use this frontend IP
 * 
 * @member {string} [privateIPAddress] Gets or sets the privateIPAddress of
 * the IP Configuration
 * 
 * @member {string} [privateIPAllocationMethod] Gets or sets PrivateIP
 * allocation method (Static/Dynamic). Possible values for this property
 * include: 'Static', 'Dynamic'.
 * 
 * @member {object} [subnet] Gets or sets the reference of the subnet resource
 * 
 * @member {string} [subnet.name] Gets name of the resource that is unique
 * within a resource group. This name can be used to access the resource
 * 
 * @member {string} [subnet.etag] A unique read-only string that changes
 * whenever the resource is updated
 * 
 * @member {string} [subnet.addressPrefix] Gets or sets Address prefix for the
 * subnet.
 * 
 * @member {object} [subnet.networkSecurityGroup] Gets or sets the reference
 * of the NetworkSecurityGroup resource
 * 
 * @member {string} [subnet.networkSecurityGroup.etag] Gets a unique read-only
 * string that changes whenever the resource is updated
 * 
 * @member {array} [subnet.networkSecurityGroup.securityRules] Gets or sets
 * Security rules of network security group
 * 
 * @member {array} [subnet.networkSecurityGroup.defaultSecurityRules] Gets or
 * sets Default security rules of network security group
 * 
 * @member {array} [subnet.networkSecurityGroup.networkInterfaces] Gets
 * collection of references to Network Interfaces
 * 
 * @member {array} [subnet.networkSecurityGroup.subnets] Gets collection of
 * references to subnets
 * 
 * @member {string} [subnet.networkSecurityGroup.resourceGuid] Gets or sets
 * resource guid property of the network security group resource
 * 
 * @member {string} [subnet.networkSecurityGroup.provisioningState] Gets or
 * sets Provisioning state of the PublicIP resource Updating/Deleting/Failed
 * 
 * @member {object} [subnet.routeTable] Gets or sets the reference of the
 * RouteTable resource
 * 
 * @member {string} [subnet.routeTable.etag] Gets a unique read-only string
 * that changes whenever the resource is updated
 * 
 * @member {array} [subnet.routeTable.routes] Gets or sets Routes in a Route
 * Table
 * 
 * @member {array} [subnet.routeTable.subnets] Gets collection of references
 * to subnets
 * 
 * @member {string} [subnet.routeTable.provisioningState] Gets or sets
 * Provisioning state of the resource Updating/Deleting/Failed
 * 
 * @member {array} [subnet.ipConfigurations] Gets array of references to the
 * network interface IP configurations using subnet
 * 
 * @member {string} [subnet.provisioningState] Gets or sets Provisioning state
 * of the PublicIP resource Updating/Deleting/Failed
 * 
 * @member {object} [publicIPAddress] Gets or sets the reference of the
 * PublicIP resource
 * 
 * @member {string} [publicIPAddress.etag] Gets a unique read-only string that
 * changes whenever the resource is updated
 * 
 * @member {string} [publicIPAddress.publicIPAllocationMethod] Gets or sets
 * PublicIP allocation method (Static/Dynamic). Possible values for this
 * property include: 'Static', 'Dynamic'.
 * 
 * @member {object} [publicIPAddress.ipConfiguration]
 * 
 * @member {string} [publicIPAddress.ipConfiguration.name] Gets name of the
 * resource that is unique within a resource group. This name can be used to
 * access the resource
 * 
 * @member {string} [publicIPAddress.ipConfiguration.etag] A unique read-only
 * string that changes whenever the resource is updated
 * 
 * @member {string} [publicIPAddress.ipConfiguration.privateIPAddress] Gets or
 * sets the privateIPAddress of the IP Configuration
 * 
 * @member {string}
 * [publicIPAddress.ipConfiguration.privateIPAllocationMethod] Gets or sets
 * PrivateIP allocation method (Static/Dynamic). Possible values for this
 * property include: 'Static', 'Dynamic'.
 * 
 * @member {object} [publicIPAddress.ipConfiguration.subnet] Gets or sets the
 * reference of the subnet resource
 * 
 * @member {string} [publicIPAddress.ipConfiguration.subnet.name] Gets name of
 * the resource that is unique within a resource group. This name can be used
 * to access the resource
 * 
 * @member {string} [publicIPAddress.ipConfiguration.subnet.etag] A unique
 * read-only string that changes whenever the resource is updated
 * 
 * @member {string} [publicIPAddress.ipConfiguration.subnet.addressPrefix]
 * Gets or sets Address prefix for the subnet.
 * 
 * @member {object}
 * [publicIPAddress.ipConfiguration.subnet.networkSecurityGroup] Gets or sets
 * the reference of the NetworkSecurityGroup resource
 * 
 * @member {string}
 * [publicIPAddress.ipConfiguration.subnet.networkSecurityGroup.etag] Gets a
 * unique read-only string that changes whenever the resource is updated
 * 
 * @member {array}
 * [publicIPAddress.ipConfiguration.subnet.networkSecurityGroup.securityRules]
 * Gets or sets Security rules of network security group
 * 
 * @member {array}
 * [publicIPAddress.ipConfiguration.subnet.networkSecurityGroup.defaultSecurityRules]
 * Gets or sets Default security rules of network security group
 * 
 * @member {array}
 * [publicIPAddress.ipConfiguration.subnet.networkSecurityGroup.networkInterfaces]
 * Gets collection of references to Network Interfaces
 * 
 * @member {array}
 * [publicIPAddress.ipConfiguration.subnet.networkSecurityGroup.subnets] Gets
 * collection of references to subnets
 * 
 * @member {string}
 * [publicIPAddress.ipConfiguration.subnet.networkSecurityGroup.resourceGuid]
 * Gets or sets resource guid property of the network security group resource
 * 
 * @member {string}
 * [publicIPAddress.ipConfiguration.subnet.networkSecurityGroup.provisioningState]
 * Gets or sets Provisioning state of the PublicIP resource
 * Updating/Deleting/Failed
 * 
 * @member {object} [publicIPAddress.ipConfiguration.subnet.routeTable] Gets
 * or sets the reference of the RouteTable resource
 * 
 * @member {string} [publicIPAddress.ipConfiguration.subnet.routeTable.etag]
 * Gets a unique read-only string that changes whenever the resource is
 * updated
 * 
 * @member {array} [publicIPAddress.ipConfiguration.subnet.routeTable.routes]
 * Gets or sets Routes in a Route Table
 * 
 * @member {array} [publicIPAddress.ipConfiguration.subnet.routeTable.subnets]
 * Gets collection of references to subnets
 * 
 * @member {string}
 * [publicIPAddress.ipConfiguration.subnet.routeTable.provisioningState] Gets
 * or sets Provisioning state of the resource Updating/Deleting/Failed
 * 
 * @member {array} [publicIPAddress.ipConfiguration.subnet.ipConfigurations]
 * Gets array of references to the network interface IP configurations using
 * subnet
 * 
 * @member {string} [publicIPAddress.ipConfiguration.subnet.provisioningState]
 * Gets or sets Provisioning state of the PublicIP resource
 * Updating/Deleting/Failed
 * 
 * @member {object} [publicIPAddress.ipConfiguration.publicIPAddress] Gets or
 * sets the reference of the PublicIP resource
 * 
 * @member {string} [publicIPAddress.ipConfiguration.provisioningState] Gets
 * or sets Provisioning state of the PublicIP resource
 * Updating/Deleting/Failed
 * 
 * @member {object} [publicIPAddress.dnsSettings] Gets or sets FQDN of the DNS
 * record associated with the public IP address
 * 
 * @member {string} [publicIPAddress.dnsSettings.domainNameLabel] Gets or sets
 * the Domain name label.The concatenation of the domain name label and the
 * regionalized DNS zone make up the fully qualified domain name associated
 * with the public IP address. If a domain name label is specified, an A DNS
 * record is created for the public IP in the Microsoft Azure DNS system.
 * 
 * @member {string} [publicIPAddress.dnsSettings.fqdn] Gets the FQDN, Fully
 * qualified domain name of the A DNS record associated with the public IP.
 * This is the concatenation of the domainNameLabel and the regionalized DNS
 * zone.
 * 
 * @member {string} [publicIPAddress.dnsSettings.reverseFqdn] Gets or Sests
 * the Reverse FQDN. A user-visible, fully qualified domain name that
 * resolves to this public IP address. If the reverseFqdn is specified, then
 * a PTR DNS record is created pointing from the IP address in the
 * in-addr.arpa domain to the reverse FQDN.
 * 
 * @member {string} [publicIPAddress.ipAddress]
 * 
 * @member {number} [publicIPAddress.idleTimeoutInMinutes] Gets or sets the
 * Idletimeout of the public IP address
 * 
 * @member {string} [publicIPAddress.resourceGuid] Gets or sets resource guid
 * property of the PublicIP resource
 * 
 * @member {string} [publicIPAddress.provisioningState] Gets or sets
 * Provisioning state of the PublicIP resource Updating/Deleting/Failed
 * 
 * @member {string} [provisioningState] Gets or sets Provisioning state of the
 * PublicIP resource Updating/Deleting/Failed
 * 
 */
function FrontendIPConfiguration(parameters) {
  FrontendIPConfiguration['super_'].call(this, parameters);
  if (parameters !== null && parameters !== undefined) {
    if (parameters.name !== undefined) {
      this.name = parameters.name;
    }
    if (parameters.etag !== undefined) {
      this.etag = parameters.etag;
    }
    if (parameters.inboundNatRules) {
      var tempParametersinboundNatRules = [];
      parameters.inboundNatRules.forEach(function(element) {
        if (element) {
          element = new models['SubResource'](element);
        }
        tempParametersinboundNatRules.push(element);
      });
      this.inboundNatRules = tempParametersinboundNatRules;
    }
    if (parameters.inboundNatPools) {
      var tempParametersinboundNatPools = [];
      parameters.inboundNatPools.forEach(function(element1) {
        if (element1) {
          element1 = new models['SubResource'](element1);
        }
        tempParametersinboundNatPools.push(element1);
      });
      this.inboundNatPools = tempParametersinboundNatPools;
    }
    if (parameters.outboundNatRules) {
      var tempParametersoutboundNatRules = [];
      parameters.outboundNatRules.forEach(function(element2) {
        if (element2) {
          element2 = new models['SubResource'](element2);
        }
        tempParametersoutboundNatRules.push(element2);
      });
      this.outboundNatRules = tempParametersoutboundNatRules;
    }
    if (parameters.loadBalancingRules) {
      var tempParametersloadBalancingRules = [];
      parameters.loadBalancingRules.forEach(function(element3) {
        if (element3) {
          element3 = new models['SubResource'](element3);
        }
        tempParametersloadBalancingRules.push(element3);
      });
      this.loadBalancingRules = tempParametersloadBalancingRules;
    }
    if (parameters.privateIPAddress !== undefined) {
      this.privateIPAddress = parameters.privateIPAddress;
    }
    if (parameters.privateIPAllocationMethod !== undefined) {
      this.privateIPAllocationMethod = parameters.privateIPAllocationMethod;
    }
    if (parameters.subnet) {
      this.subnet = new models['Subnet'](parameters.subnet);
    }
    if (parameters.publicIPAddress) {
      this.publicIPAddress = new models['PublicIPAddress'](parameters.publicIPAddress);
    }
    if (parameters.provisioningState !== undefined) {
      this.provisioningState = parameters.provisioningState;
    }
  }    
}

util.inherits(FrontendIPConfiguration, models['SubResource']);

/**
 * Validate the payload against the FrontendIPConfiguration schema
 *
 * @param {JSON} payload
 *
 */
FrontendIPConfiguration.prototype.serialize = function () {
  var payload = FrontendIPConfiguration['super_'].prototype.serialize.call(this);
  if (this['name'] !== null && this['name'] !== undefined) {
    if (typeof this['name'].valueOf() !== 'string') {
      throw new Error('this[\'name\'] must be of type string.');
    }
    payload['name'] = this['name'];
  }

  if (this['etag'] !== null && this['etag'] !== undefined) {
    if (typeof this['etag'].valueOf() !== 'string') {
      throw new Error('this[\'etag\'] must be of type string.');
    }
    payload['etag'] = this['etag'];
  }

  if (util.isArray(this['inboundNatRules'])) {
    payload['properties']['inboundNatRules'] = [];
    for (var i = 0; i < this['inboundNatRules'].length; i++) {
      if (this['inboundNatRules'][i]) {
        if (payload['properties'] === null || payload['properties'] === undefined) {
          payload['properties'] = {};
        }
        payload['properties']['inboundNatRules'][i] = this['inboundNatRules'][i].serialize();
      }
    }
  }

  if (util.isArray(this['inboundNatPools'])) {
    payload['properties']['inboundNatPools'] = [];
    for (var i1 = 0; i1 < this['inboundNatPools'].length; i1++) {
      if (this['inboundNatPools'][i1]) {
        if (payload['properties'] === null || payload['properties'] === undefined) {
          payload['properties'] = {};
        }
        payload['properties']['inboundNatPools'][i1] = this['inboundNatPools'][i1].serialize();
      }
    }
  }

  if (util.isArray(this['outboundNatRules'])) {
    payload['properties']['outboundNatRules'] = [];
    for (var i2 = 0; i2 < this['outboundNatRules'].length; i2++) {
      if (this['outboundNatRules'][i2]) {
        if (payload['properties'] === null || payload['properties'] === undefined) {
          payload['properties'] = {};
        }
        payload['properties']['outboundNatRules'][i2] = this['outboundNatRules'][i2].serialize();
      }
    }
  }

  if (util.isArray(this['loadBalancingRules'])) {
    payload['properties']['loadBalancingRules'] = [];
    for (var i3 = 0; i3 < this['loadBalancingRules'].length; i3++) {
      if (this['loadBalancingRules'][i3]) {
        if (payload['properties'] === null || payload['properties'] === undefined) {
          payload['properties'] = {};
        }
        payload['properties']['loadBalancingRules'][i3] = this['loadBalancingRules'][i3].serialize();
      }
    }
  }

  if (this['privateIPAddress'] !== null && this['privateIPAddress'] !== undefined) {
    if (typeof this['privateIPAddress'].valueOf() !== 'string') {
      throw new Error('this[\'privateIPAddress\'] must be of type string.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['privateIPAddress'] = this['privateIPAddress'];
  }

  if (this['privateIPAllocationMethod'] !== null && this['privateIPAllocationMethod'] !== undefined) {
    if (typeof this['privateIPAllocationMethod'].valueOf() !== 'string') {
      throw new Error('this[\'privateIPAllocationMethod\'] must be of type string.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['privateIPAllocationMethod'] = this['privateIPAllocationMethod'];
  }

  if (this['subnet']) {
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['subnet'] = this['subnet'].serialize();
  }

  if (this['publicIPAddress']) {
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['publicIPAddress'] = this['publicIPAddress'].serialize();
  }

  if (this['provisioningState'] !== null && this['provisioningState'] !== undefined) {
    if (typeof this['provisioningState'].valueOf() !== 'string') {
      throw new Error('this[\'provisioningState\'] must be of type string.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['provisioningState'] = this['provisioningState'];
  }

  return payload;
};

/**
 * Deserialize the instance to FrontendIPConfiguration schema
 *
 * @param {JSON} instance
 *
 */
FrontendIPConfiguration.prototype.deserialize = function (instance) {
  FrontendIPConfiguration['super_'].prototype.deserialize.call(this, instance);
  if (instance) {
    if (instance['name'] !== undefined) {
      this['name'] = instance['name'];
    }

    if (instance['etag'] !== undefined) {
      this['etag'] = instance['etag'];
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['inboundNatRules']) {
        var tempInstancepropertiesinboundNatRules = [];
        instance['properties']['inboundNatRules'].forEach(function(element4) {
          if (element4) {
            element4 = new models['SubResource']().deserialize(element4);
          }
          tempInstancepropertiesinboundNatRules.push(element4);
        });
        this['inboundNatRules'] = tempInstancepropertiesinboundNatRules;
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['inboundNatPools']) {
        var tempInstancepropertiesinboundNatPools = [];
        instance['properties']['inboundNatPools'].forEach(function(element5) {
          if (element5) {
            element5 = new models['SubResource']().deserialize(element5);
          }
          tempInstancepropertiesinboundNatPools.push(element5);
        });
        this['inboundNatPools'] = tempInstancepropertiesinboundNatPools;
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['outboundNatRules']) {
        var tempInstancepropertiesoutboundNatRules = [];
        instance['properties']['outboundNatRules'].forEach(function(element6) {
          if (element6) {
            element6 = new models['SubResource']().deserialize(element6);
          }
          tempInstancepropertiesoutboundNatRules.push(element6);
        });
        this['outboundNatRules'] = tempInstancepropertiesoutboundNatRules;
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['loadBalancingRules']) {
        var tempInstancepropertiesloadBalancingRules = [];
        instance['properties']['loadBalancingRules'].forEach(function(element7) {
          if (element7) {
            element7 = new models['SubResource']().deserialize(element7);
          }
          tempInstancepropertiesloadBalancingRules.push(element7);
        });
        this['loadBalancingRules'] = tempInstancepropertiesloadBalancingRules;
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['privateIPAddress'] !== undefined) {
        this['privateIPAddress'] = instance['properties']['privateIPAddress'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['privateIPAllocationMethod'] !== undefined) {
        this['privateIPAllocationMethod'] = instance['properties']['privateIPAllocationMethod'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['subnet']) {
        this['subnet'] = new models['Subnet']().deserialize(instance['properties']['subnet']);
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['publicIPAddress']) {
        this['publicIPAddress'] = new models['PublicIPAddress']().deserialize(instance['properties']['publicIPAddress']);
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['provisioningState'] !== undefined) {
        this['provisioningState'] = instance['properties']['provisioningState'];
      }
    }
  }

  return this;
};

module.exports = FrontendIPConfiguration;
