/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the ApplicationGatewayBackendHttpSettings class.
 * @constructor
 * Backend address pool settings of application gateway
 * @member {string} [name] Gets name of the resource that is unique within a
 * resource group. This name can be used to access the resource
 * 
 * @member {string} [etag] A unique read-only string that changes whenever the
 * resource is updated
 * 
 * @member {number} [port] Gets or sets the port
 * 
 * @member {string} [protocol] Gets or sets the protocol. Possible values for
 * this property include: 'Http', 'Https'.
 * 
 * @member {string} [cookieBasedAffinity] Gets or sets the cookie affinity.
 * Possible values for this property include: 'Enabled', 'Disabled'.
 * 
 * @member {number} [requestTimeout] Gets or sets request timeout
 * 
 * @member {object} [probe] Gets or sets probe resource of application gateway
 * 
 * @member {string} [probe.id] Resource Id
 * 
 * @member {string} [provisioningState] Gets or sets Provisioning state of the
 * backend http settings resource Updating/Deleting/Failed
 * 
 */
function ApplicationGatewayBackendHttpSettings(parameters) {
  ApplicationGatewayBackendHttpSettings['super_'].call(this, parameters);
  if (parameters !== null && parameters !== undefined) {
    if (parameters.name !== undefined) {
      this.name = parameters.name;
    }
    if (parameters.etag !== undefined) {
      this.etag = parameters.etag;
    }
    if (parameters.port !== undefined) {
      this.port = parameters.port;
    }
    if (parameters.protocol !== undefined) {
      this.protocol = parameters.protocol;
    }
    if (parameters.cookieBasedAffinity !== undefined) {
      this.cookieBasedAffinity = parameters.cookieBasedAffinity;
    }
    if (parameters.requestTimeout !== undefined) {
      this.requestTimeout = parameters.requestTimeout;
    }
    if (parameters.probe) {
      this.probe = new models['SubResource'](parameters.probe);
    }
    if (parameters.provisioningState !== undefined) {
      this.provisioningState = parameters.provisioningState;
    }
  }    
}

util.inherits(ApplicationGatewayBackendHttpSettings, models['SubResource']);

/**
 * Validate the payload against the ApplicationGatewayBackendHttpSettings schema
 *
 * @param {JSON} payload
 *
 */
ApplicationGatewayBackendHttpSettings.prototype.serialize = function () {
  var payload = ApplicationGatewayBackendHttpSettings['super_'].prototype.serialize.call(this);
  if (this['name'] !== null && this['name'] !== undefined) {
    if (typeof this['name'].valueOf() !== 'string') {
      throw new Error('this[\'name\'] must be of type string.');
    }
    payload['name'] = this['name'];
  }

  if (this['etag'] !== null && this['etag'] !== undefined) {
    if (typeof this['etag'].valueOf() !== 'string') {
      throw new Error('this[\'etag\'] must be of type string.');
    }
    payload['etag'] = this['etag'];
  }

  if (this['port'] !== null && this['port'] !== undefined) {
    if (typeof this['port'] !== 'number') {
      throw new Error('this[\'port\'] must be of type number.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['port'] = this['port'];
  }

  if (this['protocol'] !== null && this['protocol'] !== undefined) {
    if (typeof this['protocol'].valueOf() !== 'string') {
      throw new Error('this[\'protocol\'] must be of type string.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['protocol'] = this['protocol'];
  }

  if (this['cookieBasedAffinity'] !== null && this['cookieBasedAffinity'] !== undefined) {
    if (typeof this['cookieBasedAffinity'].valueOf() !== 'string') {
      throw new Error('this[\'cookieBasedAffinity\'] must be of type string.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['cookieBasedAffinity'] = this['cookieBasedAffinity'];
  }

  if (this['requestTimeout'] !== null && this['requestTimeout'] !== undefined) {
    if (typeof this['requestTimeout'] !== 'number') {
      throw new Error('this[\'requestTimeout\'] must be of type number.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['requestTimeout'] = this['requestTimeout'];
  }

  if (this['probe']) {
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['probe'] = this['probe'].serialize();
  }

  if (this['provisioningState'] !== null && this['provisioningState'] !== undefined) {
    if (typeof this['provisioningState'].valueOf() !== 'string') {
      throw new Error('this[\'provisioningState\'] must be of type string.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['provisioningState'] = this['provisioningState'];
  }

  return payload;
};

/**
 * Deserialize the instance to ApplicationGatewayBackendHttpSettings schema
 *
 * @param {JSON} instance
 *
 */
ApplicationGatewayBackendHttpSettings.prototype.deserialize = function (instance) {
  ApplicationGatewayBackendHttpSettings['super_'].prototype.deserialize.call(this, instance);
  if (instance) {
    if (instance['name'] !== undefined) {
      this['name'] = instance['name'];
    }

    if (instance['etag'] !== undefined) {
      this['etag'] = instance['etag'];
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['port'] !== undefined) {
        this['port'] = instance['properties']['port'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['protocol'] !== undefined) {
        this['protocol'] = instance['properties']['protocol'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['cookieBasedAffinity'] !== undefined) {
        this['cookieBasedAffinity'] = instance['properties']['cookieBasedAffinity'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['requestTimeout'] !== undefined) {
        this['requestTimeout'] = instance['properties']['requestTimeout'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['probe']) {
        this['probe'] = new models['SubResource']().deserialize(instance['properties']['probe']);
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['provisioningState'] !== undefined) {
        this['provisioningState'] = instance['properties']['provisioningState'];
      }
    }
  }

  return this;
};

module.exports = ApplicationGatewayBackendHttpSettings;
