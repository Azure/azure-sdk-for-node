/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the ApplicationGatewayBackendHttpSettings class.
 * @constructor
 * Backend address pool settings of application gateway
 * @member {number} [port] Gets or sets the port
 * 
 * @member {string} [protocol] Gets or sets the protocol. Possible values
 * include: 'Http', 'Https'
 * 
 * @member {string} [cookieBasedAffinity] Gets or sets the cookie affinity.
 * Possible values include: 'Enabled', 'Disabled'
 * 
 * @member {number} [requestTimeout] Gets or sets request timeout
 * 
 * @member {object} [probe] Gets or sets probe resource of application gateway
 * 
 * @member {string} [probe.id] Resource Id
 * 
 * @member {string} [provisioningState] Gets or sets Provisioning state of the
 * backend http settings resource Updating/Deleting/Failed
 * 
 * @member {string} [name] Gets name of the resource that is unique within a
 * resource group. This name can be used to access the resource
 * 
 * @member {string} [etag] A unique read-only string that changes whenever the
 * resource is updated
 * 
 */
function ApplicationGatewayBackendHttpSettings() {
  ApplicationGatewayBackendHttpSettings['super_'].call(this);
}

util.inherits(ApplicationGatewayBackendHttpSettings, models['SubResource']);

/**
 * Defines the metadata of ApplicationGatewayBackendHttpSettings
 *
 * @returns {object} metadata of ApplicationGatewayBackendHttpSettings
 *
 */
ApplicationGatewayBackendHttpSettings.prototype.mapper = function () {
  return {
    required: false,
    serializedName: 'ApplicationGatewayBackendHttpSettings',
    type: {
      name: 'Composite',
      className: 'ApplicationGatewayBackendHttpSettings',
      modelProperties: {
        id: {
          required: false,
          serializedName: 'id',
          type: {
            name: 'String'
          }
        },
        port: {
          required: false,
          serializedName: 'properties.port',
          type: {
            name: 'Number'
          }
        },
        protocol: {
          required: false,
          serializedName: 'properties.protocol',
          type: {
            name: 'String'
          }
        },
        cookieBasedAffinity: {
          required: false,
          serializedName: 'properties.cookieBasedAffinity',
          type: {
            name: 'String'
          }
        },
        requestTimeout: {
          required: false,
          serializedName: 'properties.requestTimeout',
          type: {
            name: 'Number'
          }
        },
        probe: {
          required: false,
          serializedName: 'properties.probe',
          type: {
            name: 'Composite',
            className: 'SubResource'
          }
        },
        provisioningState: {
          required: false,
          serializedName: 'properties.provisioningState',
          type: {
            name: 'String'
          }
        },
        name: {
          required: false,
          serializedName: 'name',
          type: {
            name: 'String'
          }
        },
        etag: {
          required: false,
          serializedName: 'etag',
          type: {
            name: 'String'
          }
        }
      }
    }
  };
};

module.exports = ApplicationGatewayBackendHttpSettings;
