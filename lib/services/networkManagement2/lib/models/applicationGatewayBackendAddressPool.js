/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Backend Address Pool of an application gateway.
 *
 * @extends models['SubResource']
 */
class ApplicationGatewayBackendAddressPool extends models['SubResource'] {
  /**
   * Create a ApplicationGatewayBackendAddressPool.
   * @member {array} [backendIPConfigurations] Collection of references to IPs
   * defined in network interfaces.
   * @member {array} [backendAddresses] Backend addresses
   * @member {string} [provisioningState] Provisioning state of the backend
   * address pool resource. Possible values are: 'Updating', 'Deleting', and
   * 'Failed'.
   * @member {string} [name] Resource that is unique within a resource group.
   * This name can be used to access the resource.
   * @member {string} [etag] A unique read-only string that changes whenever
   * the resource is updated.
   * @member {string} [type] Type of the resource.
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of ApplicationGatewayBackendAddressPool
   *
   * @returns {object} metadata of ApplicationGatewayBackendAddressPool
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'ApplicationGatewayBackendAddressPool',
      type: {
        name: 'Composite',
        className: 'ApplicationGatewayBackendAddressPool',
        modelProperties: {
          id: {
            required: false,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          backendIPConfigurations: {
            required: false,
            serializedName: 'properties.backendIPConfigurations',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'NetworkInterfaceIPConfigurationElementType',
                  type: {
                    name: 'Composite',
                    className: 'NetworkInterfaceIPConfiguration'
                  }
              }
            }
          },
          backendAddresses: {
            required: false,
            serializedName: 'properties.backendAddresses',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ApplicationGatewayBackendAddressElementType',
                  type: {
                    name: 'Composite',
                    className: 'ApplicationGatewayBackendAddress'
                  }
              }
            }
          },
          provisioningState: {
            required: false,
            serializedName: 'properties.provisioningState',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          etag: {
            required: false,
            serializedName: 'etag',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = ApplicationGatewayBackendAddressPool;
