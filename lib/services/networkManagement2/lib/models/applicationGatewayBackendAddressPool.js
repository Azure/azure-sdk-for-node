/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the ApplicationGatewayBackendAddressPool class.
 * @constructor
 * Backend Address Pool of application gateway
 * @member {string} [name] Gets name of the resource that is unique within a
 * resource group. This name can be used to access the resource
 * 
 * @member {string} [etag] A unique read-only string that changes whenever the
 * resource is updated
 * 
 * @member {array} [backendIPConfigurations] Gets or sets
 * backendIPConfiguration of application gateway
 * 
 * @member {array} [backendAddresses] Gets or sets the backend addresses
 * 
 * @member {string} [provisioningState] Gets or sets Provisioning state of the
 * backend address pool resource Updating/Deleting/Failed
 * 
 */
function ApplicationGatewayBackendAddressPool() {
  ApplicationGatewayBackendAddressPool['super_'].call(this);
}

util.inherits(ApplicationGatewayBackendAddressPool, models['SubResource']);

/**
 * Defines the metadata of ApplicationGatewayBackendAddressPool
 *
 * @returns {object} metadata of ApplicationGatewayBackendAddressPool
 *
 */
ApplicationGatewayBackendAddressPool.prototype.mapper = function () {
  return {
    required: false,
    serializedName: 'ApplicationGatewayBackendAddressPool',
    type: {
      name: 'Composite',
      className: 'ApplicationGatewayBackendAddressPool',
      modelProperties: {
        id: {
          required: false,
          serializedName: 'id',
          type: {
            name: 'String'
          }
        },
        name: {
          required: false,
          serializedName: 'name',
          type: {
            name: 'String'
          }
        },
        etag: {
          required: false,
          serializedName: 'etag',
          type: {
            name: 'String'
          }
        },
        backendIPConfigurations: {
          required: false,
          serializedName: 'properties.backendIPConfigurations',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'SubResourceElementType',
                type: {
                  name: 'Composite',
                  className: 'SubResource'
                }
            }
          }
        },
        backendAddresses: {
          required: false,
          serializedName: 'properties.backendAddresses',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'ApplicationGatewayBackendAddressElementType',
                type: {
                  name: 'Composite',
                  className: 'ApplicationGatewayBackendAddress'
                }
            }
          }
        },
        provisioningState: {
          required: false,
          serializedName: 'properties.provisioningState',
          type: {
            name: 'String'
          }
        }
      }
    }
  };
};

module.exports = ApplicationGatewayBackendAddressPool;
