/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the VirtualNetworkGatewayConnection class.
 * @constructor
 * A common class for general resource information
 * @member {string} [etag] Gets a unique read-only string that changes
 * whenever the resource is updated
 * 
 * @member {string} [authorizationKey] The authorizationKey.
 * 
 * @member {object} [virtualNetworkGateway1]
 * 
 * @member {string} [virtualNetworkGateway1.etag] Gets a unique read-only
 * string that changes whenever the resource is updated
 * 
 * @member {array} [virtualNetworkGateway1.ipConfigurations] IpConfigurations
 * for Virtual network gateway.
 * 
 * @member {string} [virtualNetworkGateway1.gatewayType] The type of this
 * virtual network gateway. Possible values for this property include: 'Vpn',
 * 'ExpressRoute'.
 * 
 * @member {string} [virtualNetworkGateway1.vpnType] The type of this virtual
 * network gateway. Possible values for this property include: 'PolicyBased',
 * 'RouteBased'.
 * 
 * @member {boolean} [virtualNetworkGateway1.enableBgp] EnableBgp Flag
 * 
 * @member {object} [virtualNetworkGateway1.gatewayDefaultSite] Gets or sets
 * the reference of the LocalNetworkGateway resource which represents Local
 * network site having default routes. Assign Null value in case of removing
 * existing default site setting.
 * 
 * @member {string} [virtualNetworkGateway1.gatewayDefaultSite.id] Resource Id
 * 
 * @member {object} [virtualNetworkGateway1.sku] Gets or sets the reference of
 * the VirtualNetworkGatewaySku resource which represents the sku selected
 * for Virtual network gateway.
 * 
 * @member {string} [virtualNetworkGateway1.sku.name] Gateway sku name
 * -Basic/HighPerformance/Standard. Possible values for this property
 * include: 'Basic', 'HighPerformance', 'Standard'.
 * 
 * @member {string} [virtualNetworkGateway1.sku.tier] Gateway sku tier
 * -Basic/HighPerformance/Standard. Possible values for this property
 * include: 'Basic', 'HighPerformance', 'Standard'.
 * 
 * @member {number} [virtualNetworkGateway1.sku.capacity] The capacity
 * 
 * @member {object} [virtualNetworkGateway1.vpnClientConfiguration] Gets or
 * sets the reference of the VpnClientConfiguration resource which represents
 * the P2S VpnClient configurations.
 * 
 * @member {object}
 * [virtualNetworkGateway1.vpnClientConfiguration.vpnClientAddressPool] Gets
 * or sets the reference of the Address space resource which represents
 * Address space for P2S VpnClient.
 * 
 * @member {array}
 * [virtualNetworkGateway1.vpnClientConfiguration.vpnClientAddressPool.addressPrefixes]
 * Gets or sets List of address blocks reserved for this virtual network in
 * CIDR notation
 * 
 * @member {array}
 * [virtualNetworkGateway1.vpnClientConfiguration.vpnClientRootCertificates]
 * VpnClientRootCertificate for Virtual network gateway.
 * 
 * @member {array}
 * [virtualNetworkGateway1.vpnClientConfiguration.vpnClientRevokedCertificates]
 * VpnClientRevokedCertificate for Virtual network gateway.
 * 
 * @member {string} [virtualNetworkGateway1.resourceGuid] Gets or sets
 * resource guid property of the VirtualNetworkGateway resource
 * 
 * @member {string} [virtualNetworkGateway1.provisioningState] Gets or sets
 * Provisioning state of the VirtualNetworkGateway resource
 * Updating/Deleting/Failed
 * 
 * @member {object} [virtualNetworkGateway2]
 * 
 * @member {string} [virtualNetworkGateway2.etag] Gets a unique read-only
 * string that changes whenever the resource is updated
 * 
 * @member {array} [virtualNetworkGateway2.ipConfigurations] IpConfigurations
 * for Virtual network gateway.
 * 
 * @member {string} [virtualNetworkGateway2.gatewayType] The type of this
 * virtual network gateway. Possible values for this property include: 'Vpn',
 * 'ExpressRoute'.
 * 
 * @member {string} [virtualNetworkGateway2.vpnType] The type of this virtual
 * network gateway. Possible values for this property include: 'PolicyBased',
 * 'RouteBased'.
 * 
 * @member {boolean} [virtualNetworkGateway2.enableBgp] EnableBgp Flag
 * 
 * @member {object} [virtualNetworkGateway2.gatewayDefaultSite] Gets or sets
 * the reference of the LocalNetworkGateway resource which represents Local
 * network site having default routes. Assign Null value in case of removing
 * existing default site setting.
 * 
 * @member {string} [virtualNetworkGateway2.gatewayDefaultSite.id] Resource Id
 * 
 * @member {object} [virtualNetworkGateway2.sku] Gets or sets the reference of
 * the VirtualNetworkGatewaySku resource which represents the sku selected
 * for Virtual network gateway.
 * 
 * @member {string} [virtualNetworkGateway2.sku.name] Gateway sku name
 * -Basic/HighPerformance/Standard. Possible values for this property
 * include: 'Basic', 'HighPerformance', 'Standard'.
 * 
 * @member {string} [virtualNetworkGateway2.sku.tier] Gateway sku tier
 * -Basic/HighPerformance/Standard. Possible values for this property
 * include: 'Basic', 'HighPerformance', 'Standard'.
 * 
 * @member {number} [virtualNetworkGateway2.sku.capacity] The capacity
 * 
 * @member {object} [virtualNetworkGateway2.vpnClientConfiguration] Gets or
 * sets the reference of the VpnClientConfiguration resource which represents
 * the P2S VpnClient configurations.
 * 
 * @member {object}
 * [virtualNetworkGateway2.vpnClientConfiguration.vpnClientAddressPool] Gets
 * or sets the reference of the Address space resource which represents
 * Address space for P2S VpnClient.
 * 
 * @member {array}
 * [virtualNetworkGateway2.vpnClientConfiguration.vpnClientAddressPool.addressPrefixes]
 * Gets or sets List of address blocks reserved for this virtual network in
 * CIDR notation
 * 
 * @member {array}
 * [virtualNetworkGateway2.vpnClientConfiguration.vpnClientRootCertificates]
 * VpnClientRootCertificate for Virtual network gateway.
 * 
 * @member {array}
 * [virtualNetworkGateway2.vpnClientConfiguration.vpnClientRevokedCertificates]
 * VpnClientRevokedCertificate for Virtual network gateway.
 * 
 * @member {string} [virtualNetworkGateway2.resourceGuid] Gets or sets
 * resource guid property of the VirtualNetworkGateway resource
 * 
 * @member {string} [virtualNetworkGateway2.provisioningState] Gets or sets
 * Provisioning state of the VirtualNetworkGateway resource
 * Updating/Deleting/Failed
 * 
 * @member {object} [localNetworkGateway2]
 * 
 * @member {string} [localNetworkGateway2.etag] Gets a unique read-only string
 * that changes whenever the resource is updated
 * 
 * @member {object} [localNetworkGateway2.localNetworkAddressSpace] Local
 * network site Address space
 * 
 * @member {array}
 * [localNetworkGateway2.localNetworkAddressSpace.addressPrefixes] Gets or
 * sets List of address blocks reserved for this virtual network in CIDR
 * notation
 * 
 * @member {string} [localNetworkGateway2.gatewayIpAddress] IP address of
 * local network gateway.
 * 
 * @member {string} [localNetworkGateway2.resourceGuid] Gets or sets resource
 * guid property of the LocalNetworkGateway resource
 * 
 * @member {string} [localNetworkGateway2.provisioningState] Gets or sets
 * Provisioning state of the LocalNetworkGateway resource
 * Updating/Deleting/Failed
 * 
 * @member {string} [connectionType] Gateway connection type
 * -Ipsec/Dedicated/VpnClient/Vnet2Vnet. Possible values for this property
 * include: 'IPsec', 'Vnet2Vnet', 'ExpressRoute', 'VPNClient'.
 * 
 * @member {number} [routingWeight] The Routing weight.
 * 
 * @member {string} [sharedKey] The Ipsec share key.
 * 
 * @member {string} [connectionStatus] Virtual network Gateway connection
 * status. Possible values for this property include: 'Unknown',
 * 'Connecting', 'Connected', 'NotConnected'.
 * 
 * @member {number} [egressBytesTransferred] The Egress Bytes Transferred in
 * this connection
 * 
 * @member {number} [ingressBytesTransferred] The Ingress Bytes Transferred in
 * this connection
 * 
 * @member {object} [peer] The reference to peerings resource.
 * 
 * @member {string} [peer.id] Resource Id
 * 
 * @member {string} [resourceGuid] Gets or sets resource guid property of the
 * VirtualNetworkGatewayConnection resource
 * 
 * @member {string} [provisioningState] Gets or sets Provisioning state of the
 * VirtualNetworkGatewayConnection resource Updating/Deleting/Failed
 * 
 */
function VirtualNetworkGatewayConnection(parameters) {
  VirtualNetworkGatewayConnection['super_'].call(this, parameters);
  if (parameters !== null && parameters !== undefined) {
    if (parameters.etag !== undefined) {
      this.etag = parameters.etag;
    }
    if (parameters.authorizationKey !== undefined) {
      this.authorizationKey = parameters.authorizationKey;
    }
    if (parameters.virtualNetworkGateway1) {
      this.virtualNetworkGateway1 = new models['VirtualNetworkGateway'](parameters.virtualNetworkGateway1);
    }
    if (parameters.virtualNetworkGateway2) {
      this.virtualNetworkGateway2 = new models['VirtualNetworkGateway'](parameters.virtualNetworkGateway2);
    }
    if (parameters.localNetworkGateway2) {
      this.localNetworkGateway2 = new models['LocalNetworkGateway'](parameters.localNetworkGateway2);
    }
    if (parameters.connectionType !== undefined) {
      this.connectionType = parameters.connectionType;
    }
    if (parameters.routingWeight !== undefined) {
      this.routingWeight = parameters.routingWeight;
    }
    if (parameters.sharedKey !== undefined) {
      this.sharedKey = parameters.sharedKey;
    }
    if (parameters.connectionStatus !== undefined) {
      this.connectionStatus = parameters.connectionStatus;
    }
    if (parameters.egressBytesTransferred !== undefined) {
      this.egressBytesTransferred = parameters.egressBytesTransferred;
    }
    if (parameters.ingressBytesTransferred !== undefined) {
      this.ingressBytesTransferred = parameters.ingressBytesTransferred;
    }
    if (parameters.peer) {
      this.peer = new models['SubResource'](parameters.peer);
    }
    if (parameters.resourceGuid !== undefined) {
      this.resourceGuid = parameters.resourceGuid;
    }
    if (parameters.provisioningState !== undefined) {
      this.provisioningState = parameters.provisioningState;
    }
  }    
}

util.inherits(VirtualNetworkGatewayConnection, models['Resource']);

/**
 * Validate the payload against the VirtualNetworkGatewayConnection schema
 *
 * @param {JSON} payload
 *
 */
VirtualNetworkGatewayConnection.prototype.serialize = function () {
  var payload = VirtualNetworkGatewayConnection['super_'].prototype.serialize.call(this);
  if (this['etag'] !== null && this['etag'] !== undefined) {
    if (typeof this['etag'].valueOf() !== 'string') {
      throw new Error('this[\'etag\'] must be of type string.');
    }
    payload['etag'] = this['etag'];
  }

  if (this['authorizationKey'] !== null && this['authorizationKey'] !== undefined) {
    if (typeof this['authorizationKey'].valueOf() !== 'string') {
      throw new Error('this[\'authorizationKey\'] must be of type string.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['authorizationKey'] = this['authorizationKey'];
  }

  if (this['virtualNetworkGateway1']) {
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['virtualNetworkGateway1'] = this['virtualNetworkGateway1'].serialize();
  }

  if (this['virtualNetworkGateway2']) {
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['virtualNetworkGateway2'] = this['virtualNetworkGateway2'].serialize();
  }

  if (this['localNetworkGateway2']) {
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['localNetworkGateway2'] = this['localNetworkGateway2'].serialize();
  }

  if (this['connectionType'] !== null && this['connectionType'] !== undefined) {
    if (typeof this['connectionType'].valueOf() !== 'string') {
      throw new Error('this[\'connectionType\'] must be of type string.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['connectionType'] = this['connectionType'];
  }

  if (this['routingWeight'] !== null && this['routingWeight'] !== undefined) {
    if (typeof this['routingWeight'] !== 'number') {
      throw new Error('this[\'routingWeight\'] must be of type number.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['routingWeight'] = this['routingWeight'];
  }

  if (this['sharedKey'] !== null && this['sharedKey'] !== undefined) {
    if (typeof this['sharedKey'].valueOf() !== 'string') {
      throw new Error('this[\'sharedKey\'] must be of type string.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['sharedKey'] = this['sharedKey'];
  }

  if (this['connectionStatus'] !== null && this['connectionStatus'] !== undefined) {
    if (typeof this['connectionStatus'].valueOf() !== 'string') {
      throw new Error('this[\'connectionStatus\'] must be of type string.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['connectionStatus'] = this['connectionStatus'];
  }

  if (this['egressBytesTransferred'] !== null && this['egressBytesTransferred'] !== undefined) {
    if (typeof this['egressBytesTransferred'] !== 'number') {
      throw new Error('this[\'egressBytesTransferred\'] must be of type number.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['egressBytesTransferred'] = this['egressBytesTransferred'];
  }

  if (this['ingressBytesTransferred'] !== null && this['ingressBytesTransferred'] !== undefined) {
    if (typeof this['ingressBytesTransferred'] !== 'number') {
      throw new Error('this[\'ingressBytesTransferred\'] must be of type number.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['ingressBytesTransferred'] = this['ingressBytesTransferred'];
  }

  if (this['peer']) {
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['peer'] = this['peer'].serialize();
  }

  if (this['resourceGuid'] !== null && this['resourceGuid'] !== undefined) {
    if (typeof this['resourceGuid'].valueOf() !== 'string') {
      throw new Error('this[\'resourceGuid\'] must be of type string.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['resourceGuid'] = this['resourceGuid'];
  }

  if (this['provisioningState'] !== null && this['provisioningState'] !== undefined) {
    if (typeof this['provisioningState'].valueOf() !== 'string') {
      throw new Error('this[\'provisioningState\'] must be of type string.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['provisioningState'] = this['provisioningState'];
  }

  return payload;
};

/**
 * Deserialize the instance to VirtualNetworkGatewayConnection schema
 *
 * @param {JSON} instance
 *
 */
VirtualNetworkGatewayConnection.prototype.deserialize = function (instance) {
  VirtualNetworkGatewayConnection['super_'].prototype.deserialize.call(this, instance);
  if (instance) {
    if (instance['etag'] !== undefined) {
      this['etag'] = instance['etag'];
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['authorizationKey'] !== undefined) {
        this['authorizationKey'] = instance['properties']['authorizationKey'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['virtualNetworkGateway1']) {
        this['virtualNetworkGateway1'] = new models['VirtualNetworkGateway']().deserialize(instance['properties']['virtualNetworkGateway1']);
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['virtualNetworkGateway2']) {
        this['virtualNetworkGateway2'] = new models['VirtualNetworkGateway']().deserialize(instance['properties']['virtualNetworkGateway2']);
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['localNetworkGateway2']) {
        this['localNetworkGateway2'] = new models['LocalNetworkGateway']().deserialize(instance['properties']['localNetworkGateway2']);
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['connectionType'] !== undefined) {
        this['connectionType'] = instance['properties']['connectionType'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['routingWeight'] !== undefined) {
        this['routingWeight'] = instance['properties']['routingWeight'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['sharedKey'] !== undefined) {
        this['sharedKey'] = instance['properties']['sharedKey'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['connectionStatus'] !== undefined) {
        this['connectionStatus'] = instance['properties']['connectionStatus'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['egressBytesTransferred'] !== undefined) {
        this['egressBytesTransferred'] = instance['properties']['egressBytesTransferred'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['ingressBytesTransferred'] !== undefined) {
        this['ingressBytesTransferred'] = instance['properties']['ingressBytesTransferred'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['peer']) {
        this['peer'] = new models['SubResource']().deserialize(instance['properties']['peer']);
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['resourceGuid'] !== undefined) {
        this['resourceGuid'] = instance['properties']['resourceGuid'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['provisioningState'] !== undefined) {
        this['provisioningState'] = instance['properties']['provisioningState'];
      }
    }
  }

  return this;
};

module.exports = VirtualNetworkGatewayConnection;
