/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * Specifies the peering configuration.
 *
 */
class ExpressRouteCircuitPeeringConfig {
  /**
   * Create a ExpressRouteCircuitPeeringConfig.
   * @member {array} [advertisedPublicPrefixes] The reference of
   * AdvertisedPublicPrefixes.
   * @member {array} [advertisedCommunities] The communities of bgp peering.
   * Spepcified for microsoft peering
   * @member {string} [advertisedPublicPrefixesState]
   * AdvertisedPublicPrefixState of the Peering resource. Possible values are
   * 'NotConfigured', 'Configuring', 'Configured', and 'ValidationNeeded'.
   * Possible values include: 'NotConfigured', 'Configuring', 'Configured',
   * 'ValidationNeeded'
   * @member {number} [legacyMode] The legacy mode of the peering.
   * @member {number} [customerASN] The CustomerASN of the peering.
   * @member {string} [routingRegistryName] The RoutingRegistryName of the
   * configuration.
   */
  constructor() {
  }

  /**
   * Defines the metadata of ExpressRouteCircuitPeeringConfig
   *
   * @returns {object} metadata of ExpressRouteCircuitPeeringConfig
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'ExpressRouteCircuitPeeringConfig',
      type: {
        name: 'Composite',
        className: 'ExpressRouteCircuitPeeringConfig',
        modelProperties: {
          advertisedPublicPrefixes: {
            required: false,
            serializedName: 'advertisedPublicPrefixes',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          advertisedCommunities: {
            required: false,
            serializedName: 'advertisedCommunities',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          advertisedPublicPrefixesState: {
            required: false,
            serializedName: 'advertisedPublicPrefixesState',
            type: {
              name: 'String'
            }
          },
          legacyMode: {
            required: false,
            serializedName: 'legacyMode',
            type: {
              name: 'Number'
            }
          },
          customerASN: {
            required: false,
            serializedName: 'customerASN',
            type: {
              name: 'Number'
            }
          },
          routingRegistryName: {
            required: false,
            serializedName: 'routingRegistryName',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = ExpressRouteCircuitPeeringConfig;
