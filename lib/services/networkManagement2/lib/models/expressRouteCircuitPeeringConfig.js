/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var util = require('util');

/**
 * @class
 * Initializes a new instance of the ExpressRouteCircuitPeeringConfig class.
 * @constructor
 * Specfies the peering config
 *
 * @member {array} [advertisedPublicPrefixes] Gets or sets the reference of
 * AdvertisedPublicPrefixes
 * 
 * @member {string} [advertisedPublicPrefixesState] Gets or sets
 * AdvertisedPublicPrefixState of the Peering resource . Possible values
 * include: 'NotConfigured', 'Configuring', 'Configured', 'ValidationNeeded'
 * 
 * @member {number} [customerASN] Gets or Sets CustomerAsn of the peering.
 * 
 * @member {string} [routingRegistryName] Gets or Sets RoutingRegistryName of
 * the config.
 * 
 */
function ExpressRouteCircuitPeeringConfig() {
}

/**
 * Defines the metadata of ExpressRouteCircuitPeeringConfig
 *
 * @returns {object} metadata of ExpressRouteCircuitPeeringConfig
 *
 */
ExpressRouteCircuitPeeringConfig.prototype.mapper = function () {
  return {
    required: false,
    serializedName: 'ExpressRouteCircuitPeeringConfig',
    type: {
      name: 'Composite',
      className: 'ExpressRouteCircuitPeeringConfig',
      modelProperties: {
        advertisedPublicPrefixes: {
          required: false,
          serializedName: 'advertisedPublicPrefixes',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'StringElementType',
                type: {
                  name: 'String'
                }
            }
          }
        },
        advertisedPublicPrefixesState: {
          required: false,
          serializedName: 'advertisedPublicPrefixesState',
          type: {
            name: 'String'
          }
        },
        customerASN: {
          required: false,
          serializedName: 'customerASN',
          type: {
            name: 'Number'
          }
        },
        routingRegistryName: {
          required: false,
          serializedName: 'routingRegistryName',
          type: {
            name: 'String'
          }
        }
      }
    }
  };
};

module.exports = ExpressRouteCircuitPeeringConfig;
