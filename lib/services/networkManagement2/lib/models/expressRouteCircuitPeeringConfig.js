/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.13.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var util = require('util');

/**
 * @class
 * Initializes a new instance of the ExpressRouteCircuitPeeringConfig class.
 * @constructor
 * Specfies the peering config
 * @member {array} [advertisedPublicPrefixes] Gets or sets the reference of
 * AdvertisedPublicPrefixes
 * 
 * @member {string} [advertisedPublicPrefixesState] Gets or sets
 * AdvertisedPublicPrefixState of the Peering resource . Possible values for
 * this property include: 'NotConfigured', 'Configuring', 'Configured',
 * 'ValidationNeeded'.
 * 
 * @member {number} [customerASN] Gets or Sets CustomerAsn of the peering.
 * 
 * @member {string} [routingRegistryName] Gets or Sets RoutingRegistryName of
 * the config.
 * 
 */
function ExpressRouteCircuitPeeringConfig(parameters) {
  if (parameters !== null && parameters !== undefined) {
    if (parameters.advertisedPublicPrefixes) {
      var tempParametersadvertisedPublicPrefixes = [];
      parameters.advertisedPublicPrefixes.forEach(function(element) {
        if (element !== undefined) {
          element = element;
        }
        tempParametersadvertisedPublicPrefixes.push(element);
      });
      this.advertisedPublicPrefixes = tempParametersadvertisedPublicPrefixes;
    }
    if (parameters.advertisedPublicPrefixesState !== undefined) {
      this.advertisedPublicPrefixesState = parameters.advertisedPublicPrefixesState;
    }
    if (parameters.customerASN !== undefined) {
      this.customerASN = parameters.customerASN;
    }
    if (parameters.routingRegistryName !== undefined) {
      this.routingRegistryName = parameters.routingRegistryName;
    }
  }    
}


/**
 * Validate the payload against the ExpressRouteCircuitPeeringConfig schema
 *
 * @param {JSON} payload
 *
 */
ExpressRouteCircuitPeeringConfig.prototype.serialize = function () {
  var payload = {};
  if (util.isArray(this['advertisedPublicPrefixes'])) {
    payload['advertisedPublicPrefixes'] = [];
    for (var i = 0; i < this['advertisedPublicPrefixes'].length; i++) {
      if (this['advertisedPublicPrefixes'][i] !== null && this['advertisedPublicPrefixes'][i] !== undefined) {
        if (typeof this['advertisedPublicPrefixes'][i].valueOf() !== 'string') {
          throw new Error('this[\'advertisedPublicPrefixes\'][i] must be of type string.');
        }
        if (payload['advertisedPublicPrefixes'] === null || payload['advertisedPublicPrefixes'] === undefined) {
          payload['advertisedPublicPrefixes'] = {};
        }
        payload['advertisedPublicPrefixes'][i] = this['advertisedPublicPrefixes'][i];
      }
    }
  }

  if (this['advertisedPublicPrefixesState'] !== null && this['advertisedPublicPrefixesState'] !== undefined) {
    if (typeof this['advertisedPublicPrefixesState'].valueOf() !== 'string') {
      throw new Error('this[\'advertisedPublicPrefixesState\'] must be of type string.');
    }
    payload['advertisedPublicPrefixesState'] = this['advertisedPublicPrefixesState'];
  }

  if (this['customerASN'] !== null && this['customerASN'] !== undefined) {
    if (typeof this['customerASN'] !== 'number') {
      throw new Error('this[\'customerASN\'] must be of type number.');
    }
    payload['customerASN'] = this['customerASN'];
  }

  if (this['routingRegistryName'] !== null && this['routingRegistryName'] !== undefined) {
    if (typeof this['routingRegistryName'].valueOf() !== 'string') {
      throw new Error('this[\'routingRegistryName\'] must be of type string.');
    }
    payload['routingRegistryName'] = this['routingRegistryName'];
  }

  return payload;
};

/**
 * Deserialize the instance to ExpressRouteCircuitPeeringConfig schema
 *
 * @param {JSON} instance
 *
 */
ExpressRouteCircuitPeeringConfig.prototype.deserialize = function (instance) {
  if (instance) {
    if (instance['advertisedPublicPrefixes']) {
      var tempInstanceadvertisedPublicPrefixes = [];
      instance['advertisedPublicPrefixes'].forEach(function(element1) {
        if (element1 !== undefined) {
          element1 = element1;
        }
        tempInstanceadvertisedPublicPrefixes.push(element1);
      });
      this['advertisedPublicPrefixes'] = tempInstanceadvertisedPublicPrefixes;
    }

    if (instance['advertisedPublicPrefixesState'] !== undefined) {
      this['advertisedPublicPrefixesState'] = instance['advertisedPublicPrefixesState'];
    }

    if (instance['customerASN'] !== undefined) {
      this['customerASN'] = instance['customerASN'];
    }

    if (instance['routingRegistryName'] !== undefined) {
      this['routingRegistryName'] = instance['routingRegistryName'];
    }
  }

  return this;
};

module.exports = ExpressRouteCircuitPeeringConfig;
