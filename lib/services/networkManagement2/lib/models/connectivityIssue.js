/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * Information about an issue encountered in the process of checking for
 * connectivity.
 *
 */
class ConnectivityIssue {
  /**
   * Create a ConnectivityIssue.
   * @member {string} [origin] The origin of the issue. Possible values
   * include: 'Local', 'Inbound', 'Outbound'
   * @member {string} [severity] The severity of the issue. Possible values
   * include: 'Error', 'Warning'
   * @member {string} [type] The type of issue. Possible values include:
   * 'Unknown', 'AgentStopped', 'GuestFirewall', 'DnsResolution', 'SocketBind',
   * 'NetworkSecurityRule', 'UserDefinedRoute', 'PortThrottled', 'Platform'
   * @member {array} [context] Provides additional context on the issue.
   */
  constructor() {
  }

  /**
   * Defines the metadata of ConnectivityIssue
   *
   * @returns {object} metadata of ConnectivityIssue
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'ConnectivityIssue',
      type: {
        name: 'Composite',
        className: 'ConnectivityIssue',
        modelProperties: {
          origin: {
            required: false,
            readOnly: true,
            serializedName: 'origin',
            type: {
              name: 'String'
            }
          },
          severity: {
            required: false,
            readOnly: true,
            serializedName: 'severity',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          context: {
            required: false,
            readOnly: true,
            serializedName: 'context',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ObjectElementType',
                  type: {
                    name: 'Dictionary',
                    value: {
                        required: false,
                        serializedName: 'StringElementType',
                        type: {
                          name: 'String'
                        }
                    }
                  }
              }
            }
          }
        }
      }
    };
  }
}

module.exports = ConnectivityIssue;
