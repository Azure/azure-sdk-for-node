/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.13.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the Probe class.
 * @constructor
 * Load balancer Probe
 * @member {string} [name] Gets name of the resource that is unique within a
 * resource group. This name can be used to access the resource
 * 
 * @member {string} [etag] A unique read-only string that changes whenever the
 * resource is updated
 * 
 * @member {array} [loadBalancingRules] Gets Load balancer rules that use this
 * probe
 * 
 * @member {string} protocol Gets or sets the protocol of the end point.
 * Possible values are http pr Tcp. If Tcp is specified, a received ACK is
 * required for the probe to be successful. If http is specified,a 200 OK
 * response from the specifies URI is required for the probe to be
 * successful. Possible values for this property include: 'Http', 'Tcp'.
 * 
 * @member {number} port Gets or sets Port for communicating the probe.
 * Possible values range from 1 to 65535, inclusive.
 * 
 * @member {number} [intervalInSeconds] Gets or sets the interval, in seconds,
 * for how frequently to probe the endpoint for health status. Typically, the
 * interval is slightly less than half the allocated timeout period (in
 * seconds) which allows two full probes before taking the instance out of
 * rotation. The default value is 15, the minimum value is 5
 * 
 * @member {number} [numberOfProbes] Gets or sets the number of probes where
 * if no response, will result in stopping further traffic from being
 * delivered to the endpoint. This values allows endponints to be taken out
 * of rotation faster or slower than the typical times used in Azure.
 * 
 * @member {string} [requestPath] Gets or sets the URI used for requesting
 * health status from the VM. Path is required if a protocol is set to http.
 * Otherwise, it is not allowed. There is no default value
 * 
 * @member {string} [provisioningState] Gets or sets Provisioning state of the
 * PublicIP resource Updating/Deleting/Failed
 * 
 */
function Probe(parameters) {
  Probe['super_'].call(this, parameters);
  if (parameters !== null && parameters !== undefined) {
    if (parameters.name !== undefined) {
      this.name = parameters.name;
    }
    if (parameters.etag !== undefined) {
      this.etag = parameters.etag;
    }
    if (parameters.loadBalancingRules) {
      var tempParametersloadBalancingRules = [];
      parameters.loadBalancingRules.forEach(function(element) {
        if (element) {
          element = new models['SubResource'](element);
        }
        tempParametersloadBalancingRules.push(element);
      });
      this.loadBalancingRules = tempParametersloadBalancingRules;
    }
    if (parameters.protocol !== undefined) {
      this.protocol = parameters.protocol;
    }
    if (parameters.port !== undefined) {
      this.port = parameters.port;
    }
    if (parameters.intervalInSeconds !== undefined) {
      this.intervalInSeconds = parameters.intervalInSeconds;
    }
    if (parameters.numberOfProbes !== undefined) {
      this.numberOfProbes = parameters.numberOfProbes;
    }
    if (parameters.requestPath !== undefined) {
      this.requestPath = parameters.requestPath;
    }
    if (parameters.provisioningState !== undefined) {
      this.provisioningState = parameters.provisioningState;
    }
  }    
}

util.inherits(Probe, models['SubResource']);

/**
 * Validate the payload against the Probe schema
 *
 * @param {JSON} payload
 *
 */
Probe.prototype.serialize = function () {
  var payload = Probe['super_'].prototype.serialize.call(this);
  if (this['name'] !== null && this['name'] !== undefined) {
    if (typeof this['name'].valueOf() !== 'string') {
      throw new Error('this[\'name\'] must be of type string.');
    }
    payload['name'] = this['name'];
  }

  if (this['etag'] !== null && this['etag'] !== undefined) {
    if (typeof this['etag'].valueOf() !== 'string') {
      throw new Error('this[\'etag\'] must be of type string.');
    }
    payload['etag'] = this['etag'];
  }

  if (util.isArray(this['loadBalancingRules'])) {
    payload['properties']['loadBalancingRules'] = [];
    for (var i = 0; i < this['loadBalancingRules'].length; i++) {
      if (this['loadBalancingRules'][i]) {
        if (payload['properties'] === null || payload['properties'] === undefined) {
          payload['properties'] = {};
        }
        payload['properties']['loadBalancingRules'][i] = this['loadBalancingRules'][i].serialize();
      }
    }
  }

  if (this['protocol'] === null || this['protocol'] === undefined || typeof this['protocol'].valueOf() !== 'string') {
    throw new Error('this[\'protocol\'] cannot be null or undefined and it must be of type string.');
  }
  if (payload['properties'] === null || payload['properties'] === undefined) {
    payload['properties'] = {};
  }
  payload['properties']['protocol'] = this['protocol'];

  if (this['port'] === null || this['port'] === undefined || typeof this['port'] !== 'number') {
    throw new Error('this[\'port\'] cannot be null or undefined and it must be of type number.');
  }
  if (payload['properties'] === null || payload['properties'] === undefined) {
    payload['properties'] = {};
  }
  payload['properties']['port'] = this['port'];

  if (this['intervalInSeconds'] !== null && this['intervalInSeconds'] !== undefined) {
    if (typeof this['intervalInSeconds'] !== 'number') {
      throw new Error('this[\'intervalInSeconds\'] must be of type number.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['intervalInSeconds'] = this['intervalInSeconds'];
  }

  if (this['numberOfProbes'] !== null && this['numberOfProbes'] !== undefined) {
    if (typeof this['numberOfProbes'] !== 'number') {
      throw new Error('this[\'numberOfProbes\'] must be of type number.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['numberOfProbes'] = this['numberOfProbes'];
  }

  if (this['requestPath'] !== null && this['requestPath'] !== undefined) {
    if (typeof this['requestPath'].valueOf() !== 'string') {
      throw new Error('this[\'requestPath\'] must be of type string.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['requestPath'] = this['requestPath'];
  }

  if (this['provisioningState'] !== null && this['provisioningState'] !== undefined) {
    if (typeof this['provisioningState'].valueOf() !== 'string') {
      throw new Error('this[\'provisioningState\'] must be of type string.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['provisioningState'] = this['provisioningState'];
  }

  return payload;
};

/**
 * Deserialize the instance to Probe schema
 *
 * @param {JSON} instance
 *
 */
Probe.prototype.deserialize = function (instance) {
  Probe['super_'].prototype.deserialize.call(this, instance);
  if (instance) {
    if (instance['name'] !== undefined) {
      this['name'] = instance['name'];
    }

    if (instance['etag'] !== undefined) {
      this['etag'] = instance['etag'];
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['loadBalancingRules']) {
        var tempInstancepropertiesloadBalancingRules = [];
        instance['properties']['loadBalancingRules'].forEach(function(element1) {
          if (element1) {
            element1 = new models['SubResource']().deserialize(element1);
          }
          tempInstancepropertiesloadBalancingRules.push(element1);
        });
        this['loadBalancingRules'] = tempInstancepropertiesloadBalancingRules;
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['protocol'] !== undefined) {
        this['protocol'] = instance['properties']['protocol'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['port'] !== undefined) {
        this['port'] = instance['properties']['port'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['intervalInSeconds'] !== undefined) {
        this['intervalInSeconds'] = instance['properties']['intervalInSeconds'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['numberOfProbes'] !== undefined) {
        this['numberOfProbes'] = instance['properties']['numberOfProbes'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['requestPath'] !== undefined) {
        this['requestPath'] = instance['properties']['requestPath'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['provisioningState'] !== undefined) {
        this['provisioningState'] = instance['properties']['provisioningState'];
      }
    }
  }

  return this;
};

module.exports = Probe;
