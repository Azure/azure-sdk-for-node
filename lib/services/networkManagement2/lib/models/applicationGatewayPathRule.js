/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Path rule of URL path map of an application gateway.
 *
 * @extends models['SubResource']
 */
class ApplicationGatewayPathRule extends models['SubResource'] {
  /**
   * Create a ApplicationGatewayPathRule.
   * @member {array} [paths] Path rules of URL path map.
   * @member {object} [backendAddressPool] Backend address pool resource of URL
   * path map path rule.
   * @member {string} [backendAddressPool.id] Resource ID.
   * @member {object} [backendHttpSettings] Backend http settings resource of
   * URL path map path rule.
   * @member {string} [backendHttpSettings.id] Resource ID.
   * @member {object} [redirectConfiguration] Redirect configuration resource
   * of URL path map path rule.
   * @member {string} [redirectConfiguration.id] Resource ID.
   * @member {string} [provisioningState] Path rule of URL path map resource.
   * Possible values are: 'Updating', 'Deleting', and 'Failed'.
   * @member {string} [name] Name of the resource that is unique within a
   * resource group. This name can be used to access the resource.
   * @member {string} [etag] A unique read-only string that changes whenever
   * the resource is updated.
   * @member {string} [type] Type of the resource.
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of ApplicationGatewayPathRule
   *
   * @returns {object} metadata of ApplicationGatewayPathRule
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'ApplicationGatewayPathRule',
      type: {
        name: 'Composite',
        className: 'ApplicationGatewayPathRule',
        modelProperties: {
          id: {
            required: false,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          paths: {
            required: false,
            serializedName: 'properties.paths',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          backendAddressPool: {
            required: false,
            serializedName: 'properties.backendAddressPool',
            type: {
              name: 'Composite',
              className: 'SubResource'
            }
          },
          backendHttpSettings: {
            required: false,
            serializedName: 'properties.backendHttpSettings',
            type: {
              name: 'Composite',
              className: 'SubResource'
            }
          },
          redirectConfiguration: {
            required: false,
            serializedName: 'properties.redirectConfiguration',
            type: {
              name: 'Composite',
              className: 'SubResource'
            }
          },
          provisioningState: {
            required: false,
            serializedName: 'properties.provisioningState',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          etag: {
            required: false,
            serializedName: 'etag',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = ApplicationGatewayPathRule;
