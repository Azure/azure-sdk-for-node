/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the ApplicationGatewayPathRule class.
 * @constructor
 * Path rule of URL path map of application gateway
 * @member {array} [paths] Gets or sets the path rules of URL path map
 * 
 * @member {object} [backendAddressPool] Gets or sets backend address pool
 * resource of URL path map
 * 
 * @member {string} [backendAddressPool.id] Resource Id
 * 
 * @member {object} [backendHttpSettings] Gets or sets backend http settings
 * resource of URL path map
 * 
 * @member {string} [backendHttpSettings.id] Resource Id
 * 
 * @member {string} [provisioningState] Gets or sets path rule of URL path map
 * resource Updating/Deleting/Failed
 * 
 * @member {string} [name] Gets name of the resource that is unique within a
 * resource group. This name can be used to access the resource
 * 
 * @member {string} [etag] A unique read-only string that changes whenever the
 * resource is updated
 * 
 */
function ApplicationGatewayPathRule() {
  ApplicationGatewayPathRule['super_'].call(this);
}

util.inherits(ApplicationGatewayPathRule, models['SubResource']);

/**
 * Defines the metadata of ApplicationGatewayPathRule
 *
 * @returns {object} metadata of ApplicationGatewayPathRule
 *
 */
ApplicationGatewayPathRule.prototype.mapper = function () {
  return {
    required: false,
    serializedName: 'ApplicationGatewayPathRule',
    type: {
      name: 'Composite',
      className: 'ApplicationGatewayPathRule',
      modelProperties: {
        id: {
          required: false,
          serializedName: 'id',
          type: {
            name: 'String'
          }
        },
        paths: {
          required: false,
          serializedName: 'properties.paths',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'StringElementType',
                type: {
                  name: 'String'
                }
            }
          }
        },
        backendAddressPool: {
          required: false,
          serializedName: 'properties.backendAddressPool',
          type: {
            name: 'Composite',
            className: 'SubResource'
          }
        },
        backendHttpSettings: {
          required: false,
          serializedName: 'properties.backendHttpSettings',
          type: {
            name: 'Composite',
            className: 'SubResource'
          }
        },
        provisioningState: {
          required: false,
          serializedName: 'properties.provisioningState',
          type: {
            name: 'String'
          }
        },
        name: {
          required: false,
          serializedName: 'name',
          type: {
            name: 'String'
          }
        },
        etag: {
          required: false,
          serializedName: 'etag',
          type: {
            name: 'String'
          }
        }
      }
    }
  };
};

module.exports = ApplicationGatewayPathRule;
