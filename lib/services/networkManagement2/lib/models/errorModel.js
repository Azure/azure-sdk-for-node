/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the ErrorModel class.
 * @constructor
 * @member {string} [code]
 * 
 * @member {string} [message]
 * 
 * @member {string} [target]
 * 
 * @member {array} [details]
 * 
 * @member {string} [innerError]
 * 
 */
function ErrorModel(parameters) {
  if (parameters !== null && parameters !== undefined) {
    if (parameters.code !== undefined) {
      this.code = parameters.code;
    }
    if (parameters.message !== undefined) {
      this.message = parameters.message;
    }
    if (parameters.target !== undefined) {
      this.target = parameters.target;
    }
    if (parameters.details) {
      var tempParametersdetails = [];
      parameters.details.forEach(function(element) {
        if (element) {
          element = new models['ErrorDetails'](element);
        }
        tempParametersdetails.push(element);
      });
      this.details = tempParametersdetails;
    }
    if (parameters.innerError !== undefined) {
      this.innerError = parameters.innerError;
    }
  }    
}


/**
 * Validate the payload against the ErrorModel schema
 *
 * @param {JSON} payload
 *
 */
ErrorModel.prototype.serialize = function () {
  var payload = {};
  if (this['code'] !== null && this['code'] !== undefined) {
    if (typeof this['code'].valueOf() !== 'string') {
      throw new Error('this[\'code\'] must be of type string.');
    }
    payload['code'] = this['code'];
  }

  if (this['message'] !== null && this['message'] !== undefined) {
    if (typeof this['message'].valueOf() !== 'string') {
      throw new Error('this[\'message\'] must be of type string.');
    }
    payload['message'] = this['message'];
  }

  if (this['target'] !== null && this['target'] !== undefined) {
    if (typeof this['target'].valueOf() !== 'string') {
      throw new Error('this[\'target\'] must be of type string.');
    }
    payload['target'] = this['target'];
  }

  if (util.isArray(this['details'])) {
    payload['details'] = [];
    for (var i = 0; i < this['details'].length; i++) {
      if (this['details'][i]) {
        if (payload['details'] === null || payload['details'] === undefined) {
          payload['details'] = {};
        }
        payload['details'][i] = this['details'][i].serialize();
      }
    }
  }

  if (this['innerError'] !== null && this['innerError'] !== undefined) {
    if (typeof this['innerError'].valueOf() !== 'string') {
      throw new Error('this[\'innerError\'] must be of type string.');
    }
    payload['innerError'] = this['innerError'];
  }

  return payload;
};

/**
 * Deserialize the instance to ErrorModel schema
 *
 * @param {JSON} instance
 *
 */
ErrorModel.prototype.deserialize = function (instance) {
  if (instance) {
    if (instance['code'] !== undefined) {
      this['code'] = instance['code'];
    }

    if (instance['message'] !== undefined) {
      this['message'] = instance['message'];
    }

    if (instance['target'] !== undefined) {
      this['target'] = instance['target'];
    }

    if (instance['details']) {
      var tempInstancedetails = [];
      instance['details'].forEach(function(element1) {
        if (element1) {
          element1 = new models['ErrorDetails']().deserialize(element1);
        }
        tempInstancedetails.push(element1);
      });
      this['details'] = tempInstancedetails;
    }

    if (instance['innerError'] !== undefined) {
      this['innerError'] = instance['innerError'];
    }
  }

  return this;
};

module.exports = ErrorModel;
