/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * NetworkSecurityGroup resource.
 *
 * @extends models['Resource']
 */
class NetworkSecurityGroup extends models['Resource'] {
  /**
   * Create a NetworkSecurityGroup.
   * @member {array} [securityRules] A collection of security rules of the
   * network security group.
   * @member {array} [defaultSecurityRules] The default security rules of
   * network security group.
   * @member {array} [networkInterfaces] A collection of references to network
   * interfaces.
   * @member {array} [subnets] A collection of references to subnets.
   * @member {string} [resourceGuid] The resource GUID property of the network
   * security group resource.
   * @member {string} [provisioningState] The provisioning state of the public
   * IP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
   * @member {string} [etag] A unique read-only string that changes whenever
   * the resource is updated.
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of NetworkSecurityGroup
   *
   * @returns {object} metadata of NetworkSecurityGroup
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'NetworkSecurityGroup',
      type: {
        name: 'Composite',
        className: 'NetworkSecurityGroup',
        modelProperties: {
          id: {
            required: false,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          location: {
            required: false,
            serializedName: 'location',
            type: {
              name: 'String'
            }
          },
          tags: {
            required: false,
            serializedName: 'tags',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          securityRules: {
            required: false,
            serializedName: 'properties.securityRules',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'SecurityRuleElementType',
                  type: {
                    name: 'Composite',
                    className: 'SecurityRule'
                  }
              }
            }
          },
          defaultSecurityRules: {
            required: false,
            serializedName: 'properties.defaultSecurityRules',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'SecurityRuleElementType',
                  type: {
                    name: 'Composite',
                    className: 'SecurityRule'
                  }
              }
            }
          },
          networkInterfaces: {
            required: false,
            readOnly: true,
            serializedName: 'properties.networkInterfaces',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'NetworkInterfaceElementType',
                  type: {
                    name: 'Composite',
                    className: 'NetworkInterface'
                  }
              }
            }
          },
          subnets: {
            required: false,
            readOnly: true,
            serializedName: 'properties.subnets',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'SubnetElementType',
                  type: {
                    name: 'Composite',
                    className: 'Subnet'
                  }
              }
            }
          },
          resourceGuid: {
            required: false,
            serializedName: 'properties.resourceGuid',
            type: {
              name: 'String'
            }
          },
          provisioningState: {
            required: false,
            serializedName: 'properties.provisioningState',
            type: {
              name: 'String'
            }
          },
          etag: {
            required: false,
            serializedName: 'etag',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = NetworkSecurityGroup;
