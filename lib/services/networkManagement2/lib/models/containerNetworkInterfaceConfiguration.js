/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Container network interface configruation child resource.
 *
 * @extends models['SubResource']
 */
class ContainerNetworkInterfaceConfiguration extends models['SubResource'] {
  /**
   * Create a ContainerNetworkInterfaceConfiguration.
   * @member {array} [ipConfigurations] A list of ip configurations of the
   * container network interface configuration.
   * @member {array} [containerNetworkInterfaces] A list of container network
   * interfaces created from this container network interface configuration.
   * @member {string} [provisioningState] The provisioning state of the
   * resource.
   * @member {string} [name] The name of the resource. This name can be used to
   * access the resource.
   * @member {string} [type] Sub Resource type.
   * @member {string} [etag] A unique read-only string that changes whenever
   * the resource is updated.
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of ContainerNetworkInterfaceConfiguration
   *
   * @returns {object} metadata of ContainerNetworkInterfaceConfiguration
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'ContainerNetworkInterfaceConfiguration',
      type: {
        name: 'Composite',
        className: 'ContainerNetworkInterfaceConfiguration',
        modelProperties: {
          id: {
            required: false,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          ipConfigurations: {
            required: false,
            serializedName: 'properties.ipConfigurations',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'IPConfigurationProfileElementType',
                  type: {
                    name: 'Composite',
                    className: 'IPConfigurationProfile'
                  }
              }
            }
          },
          containerNetworkInterfaces: {
            required: false,
            serializedName: 'properties.containerNetworkInterfaces',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ContainerNetworkInterfaceElementType',
                  type: {
                    name: 'Composite',
                    className: 'ContainerNetworkInterface'
                  }
              }
            }
          },
          provisioningState: {
            required: false,
            readOnly: true,
            serializedName: 'properties.provisioningState',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          etag: {
            required: false,
            serializedName: 'etag',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = ContainerNetworkInterfaceConfiguration;
