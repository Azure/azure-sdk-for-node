/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the ApplicationGatewayProbe class.
 * @constructor
 * Probe of application gateway
 *
 * @member {string} [protocol] Gets or sets the protocol. Possible values
 * include: 'Http', 'Https'
 * 
 * @member {string} [host] Gets or sets the host to send probe to
 * 
 * @member {string} [path] Gets or sets the relative path of probe
 * 
 * @member {number} [interval] Gets or sets probing interval in seconds
 * 
 * @member {number} [timeout] Gets or sets probing timeout in seconds
 * 
 * @member {number} [unhealthyThreshold] Gets or sets probing unhealthy
 * threshold
 * 
 * @member {string} [provisioningState] Gets or sets Provisioning state of the
 * backend http settings resource Updating/Deleting/Failed
 * 
 * @member {string} [name] Gets name of the resource that is unique within a
 * resource group. This name can be used to access the resource
 * 
 * @member {string} [etag] A unique read-only string that changes whenever the
 * resource is updated
 * 
 */
function ApplicationGatewayProbe() {
  ApplicationGatewayProbe['super_'].call(this);
}

util.inherits(ApplicationGatewayProbe, models['SubResource']);

/**
 * Defines the metadata of ApplicationGatewayProbe
 *
 * @returns {object} metadata of ApplicationGatewayProbe
 *
 */
ApplicationGatewayProbe.prototype.mapper = function () {
  return {
    required: false,
    serializedName: 'ApplicationGatewayProbe',
    type: {
      name: 'Composite',
      className: 'ApplicationGatewayProbe',
      modelProperties: {
        id: {
          required: false,
          serializedName: 'id',
          type: {
            name: 'String'
          }
        },
        protocol: {
          required: false,
          serializedName: 'properties.protocol',
          type: {
            name: 'String'
          }
        },
        host: {
          required: false,
          serializedName: 'properties.host',
          type: {
            name: 'String'
          }
        },
        path: {
          required: false,
          serializedName: 'properties.path',
          type: {
            name: 'String'
          }
        },
        interval: {
          required: false,
          serializedName: 'properties.interval',
          type: {
            name: 'Number'
          }
        },
        timeout: {
          required: false,
          serializedName: 'properties.timeout',
          type: {
            name: 'Number'
          }
        },
        unhealthyThreshold: {
          required: false,
          serializedName: 'properties.unhealthyThreshold',
          type: {
            name: 'Number'
          }
        },
        provisioningState: {
          required: false,
          serializedName: 'properties.provisioningState',
          type: {
            name: 'String'
          }
        },
        name: {
          required: false,
          serializedName: 'name',
          type: {
            name: 'String'
          }
        },
        etag: {
          required: false,
          serializedName: 'etag',
          type: {
            name: 'String'
          }
        }
      }
    }
  };
};

module.exports = ApplicationGatewayProbe;
