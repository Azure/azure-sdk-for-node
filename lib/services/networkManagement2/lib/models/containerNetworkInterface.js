/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Container network interface child resource.
 *
 * @extends models['SubResource']
 */
class ContainerNetworkInterface extends models['SubResource'] {
  /**
   * Create a ContainerNetworkInterface.
   * @property {object} [containerNetworkInterfaceConfiguration] Container
   * network interface configuration from which this container network
   * interface is created.
   * @property {array}
   * [containerNetworkInterfaceConfiguration.ipConfigurations] A list of ip
   * configurations of the container network interface configuration.
   * @property {array}
   * [containerNetworkInterfaceConfiguration.containerNetworkInterfaces] A list
   * of container network interfaces created from this container network
   * interface configuration.
   * @property {string}
   * [containerNetworkInterfaceConfiguration.provisioningState] The
   * provisioning state of the resource.
   * @property {string} [containerNetworkInterfaceConfiguration.name] The name
   * of the resource. This name can be used to access the resource.
   * @property {string} [containerNetworkInterfaceConfiguration.type] Sub
   * Resource type.
   * @property {string} [containerNetworkInterfaceConfiguration.etag] A unique
   * read-only string that changes whenever the resource is updated.
   * @property {object} [container] Reference to the conatinaer to which this
   * container network interface is attached.
   * @property {array} [ipConfigurations] Reference to the ip configuration on
   * this container nic.
   * @property {string} [provisioningState] The provisioning state of the
   * resource.
   * @property {string} [name] The name of the resource. This name can be used
   * to access the resource.
   * @property {string} [type] Sub Resource type.
   * @property {string} [etag] A unique read-only string that changes whenever
   * the resource is updated.
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of ContainerNetworkInterface
   *
   * @returns {object} metadata of ContainerNetworkInterface
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'ContainerNetworkInterface',
      type: {
        name: 'Composite',
        className: 'ContainerNetworkInterface',
        modelProperties: {
          id: {
            required: false,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          containerNetworkInterfaceConfiguration: {
            required: false,
            serializedName: 'properties.containerNetworkInterfaceConfiguration',
            type: {
              name: 'Composite',
              className: 'ContainerNetworkInterfaceConfiguration'
            }
          },
          container: {
            required: false,
            serializedName: 'properties.container',
            type: {
              name: 'Composite',
              className: 'Container'
            }
          },
          ipConfigurations: {
            required: false,
            serializedName: 'properties.ipConfigurations',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ContainerNetworkInterfaceIpConfigurationElementType',
                  type: {
                    name: 'Composite',
                    className: 'ContainerNetworkInterfaceIpConfiguration'
                  }
              }
            }
          },
          provisioningState: {
            required: false,
            readOnly: true,
            serializedName: 'properties.provisioningState',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          etag: {
            required: false,
            serializedName: 'etag',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = ContainerNetworkInterface;
