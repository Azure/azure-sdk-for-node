/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Subnet in a virtual network resource.
 *
 * @extends models['SubResource']
 */
class Subnet extends models['SubResource'] {
  /**
   * Create a Subnet.
   * @member {string} [addressPrefix] The address prefix for the subnet.
   * @member {object} [networkSecurityGroup] The reference of the
   * NetworkSecurityGroup resource.
   * @member {array} [networkSecurityGroup.securityRules] A collection of
   * security rules of the network security group.
   * @member {array} [networkSecurityGroup.defaultSecurityRules] The default
   * security rules of network security group.
   * @member {array} [networkSecurityGroup.networkInterfaces] A collection of
   * references to network interfaces.
   * @member {array} [networkSecurityGroup.subnets] A collection of references
   * to subnets.
   * @member {string} [networkSecurityGroup.resourceGuid] The resource GUID
   * property of the network security group resource.
   * @member {string} [networkSecurityGroup.provisioningState] The provisioning
   * state of the public IP resource. Possible values are: 'Updating',
   * 'Deleting', and 'Failed'.
   * @member {string} [networkSecurityGroup.etag] A unique read-only string
   * that changes whenever the resource is updated.
   * @member {object} [routeTable] The reference of the RouteTable resource.
   * @member {array} [routeTable.routes] Collection of routes contained within
   * a route table.
   * @member {array} [routeTable.subnets] A collection of references to
   * subnets.
   * @member {string} [routeTable.provisioningState] The provisioning state of
   * the resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
   * @member {string} [routeTable.etag] Gets a unique read-only string that
   * changes whenever the resource is updated.
   * @member {array} [serviceEndpoints] An array of service endpoints.
   * @member {array} [ipConfigurations] Gets an array of references to the
   * network interface IP configurations using subnet.
   * @member {array} [resourceNavigationLinks] Gets an array of references to
   * the external resources using subnet.
   * @member {string} [provisioningState] The provisioning state of the
   * resource.
   * @member {string} [name] The name of the resource that is unique within a
   * resource group. This name can be used to access the resource.
   * @member {string} [etag] A unique read-only string that changes whenever
   * the resource is updated.
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of Subnet
   *
   * @returns {object} metadata of Subnet
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'Subnet',
      type: {
        name: 'Composite',
        className: 'Subnet',
        modelProperties: {
          id: {
            required: false,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          addressPrefix: {
            required: false,
            serializedName: 'properties.addressPrefix',
            type: {
              name: 'String'
            }
          },
          networkSecurityGroup: {
            required: false,
            serializedName: 'properties.networkSecurityGroup',
            type: {
              name: 'Composite',
              className: 'NetworkSecurityGroup'
            }
          },
          routeTable: {
            required: false,
            serializedName: 'properties.routeTable',
            type: {
              name: 'Composite',
              className: 'RouteTable'
            }
          },
          serviceEndpoints: {
            required: false,
            serializedName: 'properties.serviceEndpoints',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ServiceEndpointPropertiesFormatElementType',
                  type: {
                    name: 'Composite',
                    className: 'ServiceEndpointPropertiesFormat'
                  }
              }
            }
          },
          ipConfigurations: {
            required: false,
            readOnly: true,
            serializedName: 'properties.ipConfigurations',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'IPConfigurationElementType',
                  type: {
                    name: 'Composite',
                    className: 'IPConfiguration'
                  }
              }
            }
          },
          resourceNavigationLinks: {
            required: false,
            serializedName: 'properties.resourceNavigationLinks',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ResourceNavigationLinkElementType',
                  type: {
                    name: 'Composite',
                    className: 'ResourceNavigationLink'
                  }
              }
            }
          },
          provisioningState: {
            required: false,
            serializedName: 'properties.provisioningState',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          etag: {
            required: false,
            serializedName: 'etag',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = Subnet;
