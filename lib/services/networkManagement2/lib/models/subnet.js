/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the Subnet class.
 * @constructor
 * Subnet in a VirtualNework resource
 * @member {string} [name] Gets name of the resource that is unique within a
 * resource group. This name can be used to access the resource
 * 
 * @member {string} [etag] A unique read-only string that changes whenever the
 * resource is updated
 * 
 * @member {string} addressPrefix Gets or sets Address prefix for the subnet.
 * 
 * @member {object} [networkSecurityGroup] Gets or sets the reference of the
 * NetworkSecurityGroup resource
 * 
 * @member {string} [networkSecurityGroup.etag] Gets a unique read-only string
 * that changes whenever the resource is updated
 * 
 * @member {array} [networkSecurityGroup.securityRules] Gets or sets Security
 * rules of network security group
 * 
 * @member {array} [networkSecurityGroup.defaultSecurityRules] Gets or sets
 * Default security rules of network security group
 * 
 * @member {array} [networkSecurityGroup.networkInterfaces] Gets collection of
 * references to Network Interfaces
 * 
 * @member {array} [networkSecurityGroup.subnets] Gets collection of
 * references to subnets
 * 
 * @member {string} [networkSecurityGroup.resourceGuid] Gets or sets resource
 * guid property of the network security group resource
 * 
 * @member {string} [networkSecurityGroup.provisioningState] Gets or sets
 * Provisioning state of the PublicIP resource Updating/Deleting/Failed
 * 
 * @member {object} [routeTable] Gets or sets the reference of the RouteTable
 * resource
 * 
 * @member {string} [routeTable.etag] Gets a unique read-only string that
 * changes whenever the resource is updated
 * 
 * @member {array} [routeTable.routes] Gets or sets Routes in a Route Table
 * 
 * @member {array} [routeTable.subnets] Gets collection of references to
 * subnets
 * 
 * @member {string} [routeTable.provisioningState] Gets or sets Provisioning
 * state of the resource Updating/Deleting/Failed
 * 
 * @member {array} [ipConfigurations] Gets array of references to the network
 * interface IP configurations using subnet
 * 
 * @member {string} [provisioningState] Gets or sets Provisioning state of the
 * PublicIP resource Updating/Deleting/Failed
 * 
 */
function Subnet(parameters) {
  Subnet['super_'].call(this, parameters);
  if (parameters !== null && parameters !== undefined) {
    if (parameters.name !== undefined) {
      this.name = parameters.name;
    }
    if (parameters.etag !== undefined) {
      this.etag = parameters.etag;
    }
    if (parameters.addressPrefix !== undefined) {
      this.addressPrefix = parameters.addressPrefix;
    }
    if (parameters.networkSecurityGroup) {
      this.networkSecurityGroup = new models['NetworkSecurityGroup'](parameters.networkSecurityGroup);
    }
    if (parameters.routeTable) {
      this.routeTable = new models['RouteTable'](parameters.routeTable);
    }
    if (parameters.ipConfigurations) {
      var tempParametersipConfigurations = [];
      parameters.ipConfigurations.forEach(function(element) {
        if (element) {
          element = new models['IPConfiguration'](element);
        }
        tempParametersipConfigurations.push(element);
      });
      this.ipConfigurations = tempParametersipConfigurations;
    }
    if (parameters.provisioningState !== undefined) {
      this.provisioningState = parameters.provisioningState;
    }
  }    
}

util.inherits(Subnet, models['SubResource']);

/**
 * Validate the payload against the Subnet schema
 *
 * @param {JSON} payload
 *
 */
Subnet.prototype.serialize = function () {
  var payload = Subnet['super_'].prototype.serialize.call(this);
  if (this['name'] !== null && this['name'] !== undefined) {
    if (typeof this['name'].valueOf() !== 'string') {
      throw new Error('this[\'name\'] must be of type string.');
    }
    payload['name'] = this['name'];
  }

  if (this['etag'] !== null && this['etag'] !== undefined) {
    if (typeof this['etag'].valueOf() !== 'string') {
      throw new Error('this[\'etag\'] must be of type string.');
    }
    payload['etag'] = this['etag'];
  }

  if (this['addressPrefix'] === null || this['addressPrefix'] === undefined || typeof this['addressPrefix'].valueOf() !== 'string') {
    throw new Error('this[\'addressPrefix\'] cannot be null or undefined and it must be of type string.');
  }
  if (payload['properties'] === null || payload['properties'] === undefined) {
    payload['properties'] = {};
  }
  payload['properties']['addressPrefix'] = this['addressPrefix'];

  if (this['networkSecurityGroup']) {
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['networkSecurityGroup'] = this['networkSecurityGroup'].serialize();
  }

  if (this['routeTable']) {
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['routeTable'] = this['routeTable'].serialize();
  }

  if (util.isArray(this['ipConfigurations'])) {
    payload['properties']['ipConfigurations'] = [];
    for (var i = 0; i < this['ipConfigurations'].length; i++) {
      if (this['ipConfigurations'][i]) {
        if (payload['properties'] === null || payload['properties'] === undefined) {
          payload['properties'] = {};
        }
        payload['properties']['ipConfigurations'][i] = this['ipConfigurations'][i].serialize();
      }
    }
  }

  if (this['provisioningState'] !== null && this['provisioningState'] !== undefined) {
    if (typeof this['provisioningState'].valueOf() !== 'string') {
      throw new Error('this[\'provisioningState\'] must be of type string.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['provisioningState'] = this['provisioningState'];
  }

  return payload;
};

/**
 * Deserialize the instance to Subnet schema
 *
 * @param {JSON} instance
 *
 */
Subnet.prototype.deserialize = function (instance) {
  Subnet['super_'].prototype.deserialize.call(this, instance);
  if (instance) {
    if (instance['name'] !== undefined) {
      this['name'] = instance['name'];
    }

    if (instance['etag'] !== undefined) {
      this['etag'] = instance['etag'];
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['addressPrefix'] !== undefined) {
        this['addressPrefix'] = instance['properties']['addressPrefix'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['networkSecurityGroup']) {
        this['networkSecurityGroup'] = new models['NetworkSecurityGroup']().deserialize(instance['properties']['networkSecurityGroup']);
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['routeTable']) {
        this['routeTable'] = new models['RouteTable']().deserialize(instance['properties']['routeTable']);
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['ipConfigurations']) {
        var tempInstancepropertiesipConfigurations = [];
        instance['properties']['ipConfigurations'].forEach(function(element1) {
          if (element1) {
            element1 = new models['IPConfiguration']().deserialize(element1);
          }
          tempInstancepropertiesipConfigurations.push(element1);
        });
        this['ipConfigurations'] = tempInstancepropertiesipConfigurations;
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['provisioningState'] !== undefined) {
        this['provisioningState'] = instance['properties']['provisioningState'];
      }
    }
  }

  return this;
};

module.exports = Subnet;
