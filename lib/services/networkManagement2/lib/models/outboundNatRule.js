/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the OutboundNatRule class.
 * @constructor
 * Outbound NAT pool of the loadbalancer
 * @member {string} [name] Gets name of the resource that is unique within a
 * resource group. This name can be used to access the resource
 * 
 * @member {string} [etag] A unique read-only string that changes whenever the
 * resource is updated
 * 
 * @member {number} [allocatedOutboundPort] Gets or sets the number of
 * outbound ports to be used for SNAT
 * 
 * @member {array} [frontendIPConfigurations] Gets or sets Frontend IP
 * addresses of the load balancer
 * 
 * @member {object} backendAddressPool Gets or sets a reference to a pool of
 * DIPs. Outbound traffic is randomly load balanced across IPs in the backend
 * IPs
 * 
 * @member {string} [backendAddressPool.id] Resource Id
 * 
 * @member {string} [provisioningState] Gets or sets Provisioning state of the
 * PublicIP resource Updating/Deleting/Failed
 * 
 */
function OutboundNatRule(parameters) {
  OutboundNatRule['super_'].call(this, parameters);
  if (parameters !== null && parameters !== undefined) {
    if (parameters.name !== undefined) {
      this.name = parameters.name;
    }
    if (parameters.etag !== undefined) {
      this.etag = parameters.etag;
    }
    if (parameters.allocatedOutboundPort !== undefined) {
      this.allocatedOutboundPort = parameters.allocatedOutboundPort;
    }
    if (parameters.frontendIPConfigurations) {
      var tempParametersfrontendIPConfigurations = [];
      parameters.frontendIPConfigurations.forEach(function(element) {
        if (element) {
          element = new models['SubResource'](element);
        }
        tempParametersfrontendIPConfigurations.push(element);
      });
      this.frontendIPConfigurations = tempParametersfrontendIPConfigurations;
    }
    if (parameters.backendAddressPool) {
      this.backendAddressPool = new models['SubResource'](parameters.backendAddressPool);
    }
    if (parameters.provisioningState !== undefined) {
      this.provisioningState = parameters.provisioningState;
    }
  }    
}

util.inherits(OutboundNatRule, models['SubResource']);

/**
 * Validate the payload against the OutboundNatRule schema
 *
 * @param {JSON} payload
 *
 */
OutboundNatRule.prototype.serialize = function () {
  var payload = OutboundNatRule['super_'].prototype.serialize.call(this);
  if (this['name'] !== null && this['name'] !== undefined) {
    if (typeof this['name'].valueOf() !== 'string') {
      throw new Error('this[\'name\'] must be of type string.');
    }
    payload['name'] = this['name'];
  }

  if (this['etag'] !== null && this['etag'] !== undefined) {
    if (typeof this['etag'].valueOf() !== 'string') {
      throw new Error('this[\'etag\'] must be of type string.');
    }
    payload['etag'] = this['etag'];
  }

  if (this['allocatedOutboundPort'] !== null && this['allocatedOutboundPort'] !== undefined) {
    if (typeof this['allocatedOutboundPort'] !== 'number') {
      throw new Error('this[\'allocatedOutboundPort\'] must be of type number.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['allocatedOutboundPort'] = this['allocatedOutboundPort'];
  }

  if (util.isArray(this['frontendIPConfigurations'])) {
    payload['properties']['frontendIPConfigurations'] = [];
    for (var i = 0; i < this['frontendIPConfigurations'].length; i++) {
      if (this['frontendIPConfigurations'][i]) {
        if (payload['properties'] === null || payload['properties'] === undefined) {
          payload['properties'] = {};
        }
        payload['properties']['frontendIPConfigurations'][i] = this['frontendIPConfigurations'][i].serialize();
      }
    }
  }

  if (this['backendAddressPool']) {
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['backendAddressPool'] = this['backendAddressPool'].serialize();
  }
   else {  throw new Error('this[\'backendAddressPool\'] cannot be null or undefined.');
  }

  if (this['provisioningState'] !== null && this['provisioningState'] !== undefined) {
    if (typeof this['provisioningState'].valueOf() !== 'string') {
      throw new Error('this[\'provisioningState\'] must be of type string.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['provisioningState'] = this['provisioningState'];
  }

  return payload;
};

/**
 * Deserialize the instance to OutboundNatRule schema
 *
 * @param {JSON} instance
 *
 */
OutboundNatRule.prototype.deserialize = function (instance) {
  OutboundNatRule['super_'].prototype.deserialize.call(this, instance);
  if (instance) {
    if (instance['name'] !== undefined) {
      this['name'] = instance['name'];
    }

    if (instance['etag'] !== undefined) {
      this['etag'] = instance['etag'];
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['allocatedOutboundPort'] !== undefined) {
        this['allocatedOutboundPort'] = instance['properties']['allocatedOutboundPort'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['frontendIPConfigurations']) {
        var tempInstancepropertiesfrontendIPConfigurations = [];
        instance['properties']['frontendIPConfigurations'].forEach(function(element1) {
          if (element1) {
            element1 = new models['SubResource']().deserialize(element1);
          }
          tempInstancepropertiesfrontendIPConfigurations.push(element1);
        });
        this['frontendIPConfigurations'] = tempInstancepropertiesfrontendIPConfigurations;
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['backendAddressPool']) {
        this['backendAddressPool'] = new models['SubResource']().deserialize(instance['properties']['backendAddressPool']);
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['provisioningState'] !== undefined) {
        this['provisioningState'] = instance['properties']['provisioningState'];
      }
    }
  }

  return this;
};

module.exports = OutboundNatRule;
