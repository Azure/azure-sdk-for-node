/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Parameters that determine how the connectivity check will be performed.
 *
 */
class ConnectivityParameters {
  /**
   * Create a ConnectivityParameters.
   * @member {object} source
   * @member {string} [source.resourceId] The ID of the resource from which a
   * connectivity check will be initiated.
   * @member {number} [source.port] The source port from which a connectivity
   * check will be performed.
   * @member {object} destination
   * @member {string} [destination.resourceId] The ID of the resource to which
   * a connection attempt will be made.
   * @member {string} [destination.address] The IP address or URI the resource
   * to which a connection attempt will be made.
   * @member {number} [destination.port] Port on which check connectivity will
   * be performed.
   */
  constructor() {
  }

  /**
   * Defines the metadata of ConnectivityParameters
   *
   * @returns {object} metadata of ConnectivityParameters
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'ConnectivityParameters',
      type: {
        name: 'Composite',
        className: 'ConnectivityParameters',
        modelProperties: {
          source: {
            required: true,
            serializedName: 'source',
            type: {
              name: 'Composite',
              className: 'ConnectivitySource'
            }
          },
          destination: {
            required: true,
            serializedName: 'destination',
            type: {
              name: 'Composite',
              className: 'ConnectivityDestination'
            }
          }
        }
      }
    };
  }
}

module.exports = ConnectivityParameters;
