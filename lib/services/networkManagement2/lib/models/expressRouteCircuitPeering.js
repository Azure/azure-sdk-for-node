/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the ExpressRouteCircuitPeering class.
 * @constructor
 * Peering in a ExpressRouteCircuit resource
 * @member {string} [name] Gets name of the resource that is unique within a
 * resource group. This name can be used to access the resource
 * 
 * @member {string} [etag] A unique read-only string that changes whenever the
 * resource is updated
 * 
 * @member {string} [peeringType] Gets or sets PeeringType. Possible values
 * for this property include: 'AzurePublicPeering', 'AzurePrivatePeering',
 * 'MicrosoftPeering'.
 * 
 * @member {string} [state] Gets or sets state of Peering. Possible values for
 * this property include: 'Disabled', 'Enabled'.
 * 
 * @member {number} [azureASN] Gets or sets the azure ASN
 * 
 * @member {number} [peerASN] Gets or sets the peer ASN
 * 
 * @member {string} [primaryPeerAddressPrefix] Gets or sets the primary
 * address prefix
 * 
 * @member {string} [secondaryPeerAddressPrefix] Gets or sets the secondary
 * address prefix
 * 
 * @member {string} [primaryAzurePort] Gets or sets the primary port
 * 
 * @member {string} [secondaryAzurePort] Gets or sets the secondary port
 * 
 * @member {string} [sharedKey] Gets or sets the shared key
 * 
 * @member {number} [vlanId] Gets or sets the vlan id
 * 
 * @member {object} [microsoftPeeringConfig] Gets or sets the mircosoft
 * peering config
 * 
 * @member {array} [microsoftPeeringConfig.advertisedPublicPrefixes] Gets or
 * sets the reference of AdvertisedPublicPrefixes
 * 
 * @member {string} [microsoftPeeringConfig.advertisedPublicPrefixesState]
 * Gets or sets AdvertisedPublicPrefixState of the Peering resource .
 * Possible values for this property include: 'NotConfigured', 'Configuring',
 * 'Configured', 'ValidationNeeded'.
 * 
 * @member {number} [microsoftPeeringConfig.customerASN] Gets or Sets
 * CustomerAsn of the peering.
 * 
 * @member {string} [microsoftPeeringConfig.routingRegistryName] Gets or Sets
 * RoutingRegistryName of the config.
 * 
 * @member {object} [stats] Gets or peering stats
 * 
 * @member {number} [stats.bytesIn] Gets BytesIn of the peering.
 * 
 * @member {number} [stats.bytesOut] Gets BytesOut of the peering.
 * 
 * @member {string} [provisioningState] Gets or sets Provisioning state of the
 * PublicIP resource Updating/Deleting/Failed
 * 
 */
function ExpressRouteCircuitPeering(parameters) {
  ExpressRouteCircuitPeering['super_'].call(this, parameters);
  if (parameters !== null && parameters !== undefined) {
    if (parameters.name !== undefined) {
      this.name = parameters.name;
    }
    if (parameters.etag !== undefined) {
      this.etag = parameters.etag;
    }
    if (parameters.peeringType !== undefined) {
      this.peeringType = parameters.peeringType;
    }
    if (parameters.state !== undefined) {
      this.state = parameters.state;
    }
    if (parameters.azureASN !== undefined) {
      this.azureASN = parameters.azureASN;
    }
    if (parameters.peerASN !== undefined) {
      this.peerASN = parameters.peerASN;
    }
    if (parameters.primaryPeerAddressPrefix !== undefined) {
      this.primaryPeerAddressPrefix = parameters.primaryPeerAddressPrefix;
    }
    if (parameters.secondaryPeerAddressPrefix !== undefined) {
      this.secondaryPeerAddressPrefix = parameters.secondaryPeerAddressPrefix;
    }
    if (parameters.primaryAzurePort !== undefined) {
      this.primaryAzurePort = parameters.primaryAzurePort;
    }
    if (parameters.secondaryAzurePort !== undefined) {
      this.secondaryAzurePort = parameters.secondaryAzurePort;
    }
    if (parameters.sharedKey !== undefined) {
      this.sharedKey = parameters.sharedKey;
    }
    if (parameters.vlanId !== undefined) {
      this.vlanId = parameters.vlanId;
    }
    if (parameters.microsoftPeeringConfig) {
      this.microsoftPeeringConfig = new models['ExpressRouteCircuitPeeringConfig'](parameters.microsoftPeeringConfig);
    }
    if (parameters.stats) {
      this.stats = new models['ExpressRouteCircuitStats'](parameters.stats);
    }
    if (parameters.provisioningState !== undefined) {
      this.provisioningState = parameters.provisioningState;
    }
  }    
}

util.inherits(ExpressRouteCircuitPeering, models['SubResource']);

/**
 * Validate the payload against the ExpressRouteCircuitPeering schema
 *
 * @param {JSON} payload
 *
 */
ExpressRouteCircuitPeering.prototype.serialize = function () {
  var payload = ExpressRouteCircuitPeering['super_'].prototype.serialize.call(this);
  if (this['name'] !== null && this['name'] !== undefined) {
    if (typeof this['name'].valueOf() !== 'string') {
      throw new Error('this[\'name\'] must be of type string.');
    }
    payload['name'] = this['name'];
  }

  if (this['etag'] !== null && this['etag'] !== undefined) {
    if (typeof this['etag'].valueOf() !== 'string') {
      throw new Error('this[\'etag\'] must be of type string.');
    }
    payload['etag'] = this['etag'];
  }

  if (this['peeringType'] !== null && this['peeringType'] !== undefined) {
    if (typeof this['peeringType'].valueOf() !== 'string') {
      throw new Error('this[\'peeringType\'] must be of type string.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['peeringType'] = this['peeringType'];
  }

  if (this['state'] !== null && this['state'] !== undefined) {
    if (typeof this['state'].valueOf() !== 'string') {
      throw new Error('this[\'state\'] must be of type string.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['state'] = this['state'];
  }

  if (this['azureASN'] !== null && this['azureASN'] !== undefined) {
    if (typeof this['azureASN'] !== 'number') {
      throw new Error('this[\'azureASN\'] must be of type number.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['azureASN'] = this['azureASN'];
  }

  if (this['peerASN'] !== null && this['peerASN'] !== undefined) {
    if (typeof this['peerASN'] !== 'number') {
      throw new Error('this[\'peerASN\'] must be of type number.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['peerASN'] = this['peerASN'];
  }

  if (this['primaryPeerAddressPrefix'] !== null && this['primaryPeerAddressPrefix'] !== undefined) {
    if (typeof this['primaryPeerAddressPrefix'].valueOf() !== 'string') {
      throw new Error('this[\'primaryPeerAddressPrefix\'] must be of type string.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['primaryPeerAddressPrefix'] = this['primaryPeerAddressPrefix'];
  }

  if (this['secondaryPeerAddressPrefix'] !== null && this['secondaryPeerAddressPrefix'] !== undefined) {
    if (typeof this['secondaryPeerAddressPrefix'].valueOf() !== 'string') {
      throw new Error('this[\'secondaryPeerAddressPrefix\'] must be of type string.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['secondaryPeerAddressPrefix'] = this['secondaryPeerAddressPrefix'];
  }

  if (this['primaryAzurePort'] !== null && this['primaryAzurePort'] !== undefined) {
    if (typeof this['primaryAzurePort'].valueOf() !== 'string') {
      throw new Error('this[\'primaryAzurePort\'] must be of type string.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['primaryAzurePort'] = this['primaryAzurePort'];
  }

  if (this['secondaryAzurePort'] !== null && this['secondaryAzurePort'] !== undefined) {
    if (typeof this['secondaryAzurePort'].valueOf() !== 'string') {
      throw new Error('this[\'secondaryAzurePort\'] must be of type string.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['secondaryAzurePort'] = this['secondaryAzurePort'];
  }

  if (this['sharedKey'] !== null && this['sharedKey'] !== undefined) {
    if (typeof this['sharedKey'].valueOf() !== 'string') {
      throw new Error('this[\'sharedKey\'] must be of type string.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['sharedKey'] = this['sharedKey'];
  }

  if (this['vlanId'] !== null && this['vlanId'] !== undefined) {
    if (typeof this['vlanId'] !== 'number') {
      throw new Error('this[\'vlanId\'] must be of type number.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['vlanId'] = this['vlanId'];
  }

  if (this['microsoftPeeringConfig']) {
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['microsoftPeeringConfig'] = this['microsoftPeeringConfig'].serialize();
  }

  if (this['stats']) {
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['stats'] = this['stats'].serialize();
  }

  if (this['provisioningState'] !== null && this['provisioningState'] !== undefined) {
    if (typeof this['provisioningState'].valueOf() !== 'string') {
      throw new Error('this[\'provisioningState\'] must be of type string.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['provisioningState'] = this['provisioningState'];
  }

  return payload;
};

/**
 * Deserialize the instance to ExpressRouteCircuitPeering schema
 *
 * @param {JSON} instance
 *
 */
ExpressRouteCircuitPeering.prototype.deserialize = function (instance) {
  ExpressRouteCircuitPeering['super_'].prototype.deserialize.call(this, instance);
  if (instance) {
    if (instance['name'] !== undefined) {
      this['name'] = instance['name'];
    }

    if (instance['etag'] !== undefined) {
      this['etag'] = instance['etag'];
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['peeringType'] !== undefined) {
        this['peeringType'] = instance['properties']['peeringType'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['state'] !== undefined) {
        this['state'] = instance['properties']['state'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['azureASN'] !== undefined) {
        this['azureASN'] = instance['properties']['azureASN'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['peerASN'] !== undefined) {
        this['peerASN'] = instance['properties']['peerASN'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['primaryPeerAddressPrefix'] !== undefined) {
        this['primaryPeerAddressPrefix'] = instance['properties']['primaryPeerAddressPrefix'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['secondaryPeerAddressPrefix'] !== undefined) {
        this['secondaryPeerAddressPrefix'] = instance['properties']['secondaryPeerAddressPrefix'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['primaryAzurePort'] !== undefined) {
        this['primaryAzurePort'] = instance['properties']['primaryAzurePort'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['secondaryAzurePort'] !== undefined) {
        this['secondaryAzurePort'] = instance['properties']['secondaryAzurePort'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['sharedKey'] !== undefined) {
        this['sharedKey'] = instance['properties']['sharedKey'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['vlanId'] !== undefined) {
        this['vlanId'] = instance['properties']['vlanId'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['microsoftPeeringConfig']) {
        this['microsoftPeeringConfig'] = new models['ExpressRouteCircuitPeeringConfig']().deserialize(instance['properties']['microsoftPeeringConfig']);
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['stats']) {
        this['stats'] = new models['ExpressRouteCircuitStats']().deserialize(instance['properties']['stats']);
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['provisioningState'] !== undefined) {
        this['provisioningState'] = instance['properties']['provisioningState'];
      }
    }
  }

  return this;
};

module.exports = ExpressRouteCircuitPeering;
