/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the ApplicationGatewayHttpListener class.
 * @constructor
 * Http listener of application gateway
 * @member {object} [frontendIPConfiguration] Gets or sets frontend IP
 * configuration resource of application gateway
 * 
 * @member {string} [frontendIPConfiguration.id] Resource Id
 * 
 * @member {object} [frontendPort] Gets or sets frontend port resource of
 * application gateway
 * 
 * @member {string} [frontendPort.id] Resource Id
 * 
 * @member {string} [protocol] Gets or sets the protocol. Possible values
 * include: 'Http', 'Https'
 * 
 * @member {string} [hostName] Gets or sets the host name of http listener
 * 
 * @member {object} [sslCertificate] Gets or sets ssl certificate resource of
 * application gateway
 * 
 * @member {string} [sslCertificate.id] Resource Id
 * 
 * @member {boolean} [requireServerNameIndication] Gets or sets the
 * requireServerNameIndication of http listener
 * 
 * @member {string} [provisioningState] Gets or sets Provisioning state of the
 * http listener resource Updating/Deleting/Failed
 * 
 * @member {string} [name] Gets name of the resource that is unique within a
 * resource group. This name can be used to access the resource
 * 
 * @member {string} [etag] A unique read-only string that changes whenever the
 * resource is updated
 * 
 */
function ApplicationGatewayHttpListener() {
  ApplicationGatewayHttpListener['super_'].call(this);
}

util.inherits(ApplicationGatewayHttpListener, models['SubResource']);

/**
 * Defines the metadata of ApplicationGatewayHttpListener
 *
 * @returns {object} metadata of ApplicationGatewayHttpListener
 *
 */
ApplicationGatewayHttpListener.prototype.mapper = function () {
  return {
    required: false,
    serializedName: 'ApplicationGatewayHttpListener',
    type: {
      name: 'Composite',
      className: 'ApplicationGatewayHttpListener',
      modelProperties: {
        id: {
          required: false,
          serializedName: 'id',
          type: {
            name: 'String'
          }
        },
        frontendIPConfiguration: {
          required: false,
          serializedName: 'properties.frontendIPConfiguration',
          type: {
            name: 'Composite',
            className: 'SubResource'
          }
        },
        frontendPort: {
          required: false,
          serializedName: 'properties.frontendPort',
          type: {
            name: 'Composite',
            className: 'SubResource'
          }
        },
        protocol: {
          required: false,
          serializedName: 'properties.protocol',
          type: {
            name: 'String'
          }
        },
        hostName: {
          required: false,
          serializedName: 'properties.hostName',
          type: {
            name: 'String'
          }
        },
        sslCertificate: {
          required: false,
          serializedName: 'properties.sslCertificate',
          type: {
            name: 'Composite',
            className: 'SubResource'
          }
        },
        requireServerNameIndication: {
          required: false,
          serializedName: 'properties.requireServerNameIndication',
          type: {
            name: 'Boolean'
          }
        },
        provisioningState: {
          required: false,
          serializedName: 'properties.provisioningState',
          type: {
            name: 'String'
          }
        },
        name: {
          required: false,
          serializedName: 'name',
          type: {
            name: 'String'
          }
        },
        etag: {
          required: false,
          serializedName: 'etag',
          type: {
            name: 'String'
          }
        }
      }
    }
  };
};

module.exports = ApplicationGatewayHttpListener;
