/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.13.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the ApplicationGatewayHttpListener class.
 * @constructor
 * Http listener of application gateway
 * @member {string} [name] Gets name of the resource that is unique within a
 * resource group. This name can be used to access the resource
 * 
 * @member {string} [etag] A unique read-only string that changes whenever the
 * resource is updated
 * 
 * @member {object} [frontendIPConfiguration] Gets or sets frontend IP
 * configuration resource of application gateway
 * 
 * @member {string} [frontendIPConfiguration.id] Resource Id
 * 
 * @member {object} [frontendPort] Gets or sets frontend port resource of
 * application gateway
 * 
 * @member {string} [frontendPort.id] Resource Id
 * 
 * @member {string} [protocol] Gets or sets the protocol. Possible values for
 * this property include: 'Http', 'Https'.
 * 
 * @member {object} [sslCertificate] Gets or sets ssl certificate resource of
 * application gateway
 * 
 * @member {string} [sslCertificate.id] Resource Id
 * 
 * @member {string} [provisioningState] Gets or sets Provisioning state of the
 * http listener resource Updating/Deleting/Failed
 * 
 */
function ApplicationGatewayHttpListener(parameters) {
  ApplicationGatewayHttpListener['super_'].call(this, parameters);
  if (parameters !== null && parameters !== undefined) {
    if (parameters.name !== undefined) {
      this.name = parameters.name;
    }
    if (parameters.etag !== undefined) {
      this.etag = parameters.etag;
    }
    if (parameters.frontendIPConfiguration) {
      this.frontendIPConfiguration = new models['SubResource'](parameters.frontendIPConfiguration);
    }
    if (parameters.frontendPort) {
      this.frontendPort = new models['SubResource'](parameters.frontendPort);
    }
    if (parameters.protocol !== undefined) {
      this.protocol = parameters.protocol;
    }
    if (parameters.sslCertificate) {
      this.sslCertificate = new models['SubResource'](parameters.sslCertificate);
    }
    if (parameters.provisioningState !== undefined) {
      this.provisioningState = parameters.provisioningState;
    }
  }    
}

util.inherits(ApplicationGatewayHttpListener, models['SubResource']);

/**
 * Validate the payload against the ApplicationGatewayHttpListener schema
 *
 * @param {JSON} payload
 *
 */
ApplicationGatewayHttpListener.prototype.serialize = function () {
  var payload = ApplicationGatewayHttpListener['super_'].prototype.serialize.call(this);
  if (this['name'] !== null && this['name'] !== undefined) {
    if (typeof this['name'].valueOf() !== 'string') {
      throw new Error('this[\'name\'] must be of type string.');
    }
    payload['name'] = this['name'];
  }

  if (this['etag'] !== null && this['etag'] !== undefined) {
    if (typeof this['etag'].valueOf() !== 'string') {
      throw new Error('this[\'etag\'] must be of type string.');
    }
    payload['etag'] = this['etag'];
  }

  if (this['frontendIPConfiguration']) {
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['frontendIPConfiguration'] = this['frontendIPConfiguration'].serialize();
  }

  if (this['frontendPort']) {
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['frontendPort'] = this['frontendPort'].serialize();
  }

  if (this['protocol'] !== null && this['protocol'] !== undefined) {
    if (typeof this['protocol'].valueOf() !== 'string') {
      throw new Error('this[\'protocol\'] must be of type string.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['protocol'] = this['protocol'];
  }

  if (this['sslCertificate']) {
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['sslCertificate'] = this['sslCertificate'].serialize();
  }

  if (this['provisioningState'] !== null && this['provisioningState'] !== undefined) {
    if (typeof this['provisioningState'].valueOf() !== 'string') {
      throw new Error('this[\'provisioningState\'] must be of type string.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['provisioningState'] = this['provisioningState'];
  }

  return payload;
};

/**
 * Deserialize the instance to ApplicationGatewayHttpListener schema
 *
 * @param {JSON} instance
 *
 */
ApplicationGatewayHttpListener.prototype.deserialize = function (instance) {
  ApplicationGatewayHttpListener['super_'].prototype.deserialize.call(this, instance);
  if (instance) {
    if (instance['name'] !== undefined) {
      this['name'] = instance['name'];
    }

    if (instance['etag'] !== undefined) {
      this['etag'] = instance['etag'];
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['frontendIPConfiguration']) {
        this['frontendIPConfiguration'] = new models['SubResource']().deserialize(instance['properties']['frontendIPConfiguration']);
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['frontendPort']) {
        this['frontendPort'] = new models['SubResource']().deserialize(instance['properties']['frontendPort']);
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['protocol'] !== undefined) {
        this['protocol'] = instance['properties']['protocol'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['sslCertificate']) {
        this['sslCertificate'] = new models['SubResource']().deserialize(instance['properties']['sslCertificate']);
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['provisioningState'] !== undefined) {
        this['provisioningState'] = instance['properties']['provisioningState'];
      }
    }
  }

  return this;
};

module.exports = ApplicationGatewayHttpListener;
