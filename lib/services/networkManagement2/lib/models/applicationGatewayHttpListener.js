/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Http listener of an application gateway.
 *
 * @extends models['SubResource']
 */
class ApplicationGatewayHttpListener extends models['SubResource'] {
  /**
   * Create a ApplicationGatewayHttpListener.
   * @member {object} [frontendIPConfiguration] Frontend IP configuration
   * resource of an application gateway.
   * @member {string} [frontendIPConfiguration.id] Resource ID.
   * @member {object} [frontendPort] Frontend port resource of an application
   * gateway.
   * @member {string} [frontendPort.id] Resource ID.
   * @member {string} [protocol] Protocol. Possible values include: 'Http',
   * 'Https'
   * @member {string} [hostName] Host name of HTTP listener.
   * @member {object} [sslCertificate] SSL certificate resource of an
   * application gateway.
   * @member {string} [sslCertificate.id] Resource ID.
   * @member {boolean} [requireServerNameIndication] Applicable only if
   * protocol is https. Enables SNI for multi-hosting.
   * @member {string} [provisioningState] Provisioning state of the HTTP
   * listener resource. Possible values are: 'Updating', 'Deleting', and
   * 'Failed'.
   * @member {string} [name] Name of the resource that is unique within a
   * resource group. This name can be used to access the resource.
   * @member {string} [etag] A unique read-only string that changes whenever
   * the resource is updated.
   * @member {string} [type] Type of the resource.
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of ApplicationGatewayHttpListener
   *
   * @returns {object} metadata of ApplicationGatewayHttpListener
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'ApplicationGatewayHttpListener',
      type: {
        name: 'Composite',
        className: 'ApplicationGatewayHttpListener',
        modelProperties: {
          id: {
            required: false,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          frontendIPConfiguration: {
            required: false,
            serializedName: 'properties.frontendIPConfiguration',
            type: {
              name: 'Composite',
              className: 'SubResource'
            }
          },
          frontendPort: {
            required: false,
            serializedName: 'properties.frontendPort',
            type: {
              name: 'Composite',
              className: 'SubResource'
            }
          },
          protocol: {
            required: false,
            serializedName: 'properties.protocol',
            type: {
              name: 'String'
            }
          },
          hostName: {
            required: false,
            serializedName: 'properties.hostName',
            type: {
              name: 'String'
            }
          },
          sslCertificate: {
            required: false,
            serializedName: 'properties.sslCertificate',
            type: {
              name: 'Composite',
              className: 'SubResource'
            }
          },
          requireServerNameIndication: {
            required: false,
            serializedName: 'properties.requireServerNameIndication',
            type: {
              name: 'Boolean'
            }
          },
          provisioningState: {
            required: false,
            serializedName: 'properties.provisioningState',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          etag: {
            required: false,
            serializedName: 'etag',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = ApplicationGatewayHttpListener;
