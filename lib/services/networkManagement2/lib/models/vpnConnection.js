/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * VpnConnection Resource.
 *
 * @extends models['Resource']
 */
class VpnConnection extends models['Resource'] {
  /**
   * Create a VpnConnection.
   * @member {object} [remoteVpnSite] Id of the connected vpn site.
   * @member {string} [remoteVpnSite.id] Resource ID.
   * @member {number} [routingWeight] routing weight for vpn connection.
   * @member {string} [connectionStatus] The connection status. Possible values
   * include: 'Unknown', 'Connecting', 'Connected', 'NotConnected'
   * @member {number} [ingressBytesTransferred] Ingress bytes transferred.
   * @member {number} [egressBytesTransferred] Egress bytes transferred.
   * @member {number} [connectionBandwidthInMbps] Expected bandwidth in MBPS.
   * @member {string} [sharedKey] SharedKey for the vpn connection.
   * @member {boolean} [enableBgp] EnableBgp flag
   * @member {array} [ipsecPolicies] The IPSec Policies to be considered by
   * this connection.
   * @member {string} [provisioningState] The provisioning state of the
   * resource. Possible values include: 'Succeeded', 'Updating', 'Deleting',
   * 'Failed'
   * @member {string} [etag] Gets a unique read-only string that changes
   * whenever the resource is updated.
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of VpnConnection
   *
   * @returns {object} metadata of VpnConnection
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'VpnConnection',
      type: {
        name: 'Composite',
        className: 'VpnConnection',
        modelProperties: {
          id: {
            required: false,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          location: {
            required: false,
            serializedName: 'location',
            type: {
              name: 'String'
            }
          },
          tags: {
            required: false,
            serializedName: 'tags',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          remoteVpnSite: {
            required: false,
            serializedName: 'properties.remoteVpnSite',
            type: {
              name: 'Composite',
              className: 'SubResource'
            }
          },
          routingWeight: {
            required: false,
            serializedName: 'properties.routingWeight',
            type: {
              name: 'Number'
            }
          },
          connectionStatus: {
            required: false,
            serializedName: 'properties.connectionStatus',
            type: {
              name: 'String'
            }
          },
          ingressBytesTransferred: {
            required: false,
            readOnly: true,
            serializedName: 'properties.ingressBytesTransferred',
            type: {
              name: 'Number'
            }
          },
          egressBytesTransferred: {
            required: false,
            readOnly: true,
            serializedName: 'properties.egressBytesTransferred',
            type: {
              name: 'Number'
            }
          },
          connectionBandwidthInMbps: {
            required: false,
            readOnly: true,
            serializedName: 'properties.connectionBandwidthInMbps',
            type: {
              name: 'Number'
            }
          },
          sharedKey: {
            required: false,
            serializedName: 'properties.sharedKey',
            type: {
              name: 'String'
            }
          },
          enableBgp: {
            required: false,
            serializedName: 'properties.enableBgp',
            type: {
              name: 'Boolean'
            }
          },
          ipsecPolicies: {
            required: false,
            serializedName: 'properties.ipsecPolicies',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'IpsecPolicyElementType',
                  type: {
                    name: 'Composite',
                    className: 'IpsecPolicy'
                  }
              }
            }
          },
          provisioningState: {
            required: false,
            serializedName: 'properties.provisioningState',
            type: {
              name: 'String'
            }
          },
          etag: {
            required: false,
            readOnly: true,
            serializedName: 'etag',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = VpnConnection;
