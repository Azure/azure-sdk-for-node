/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the LoadBalancingRule class.
 * @constructor
 * Rules of the load balancer
 * @member {string} [name] Gets name of the resource that is unique within a
 * resource group. This name can be used to access the resource
 * 
 * @member {string} [etag] A unique read-only string that changes whenever the
 * resource is updated
 * 
 * @member {object} [frontendIPConfiguration] Gets or sets a reference to
 * frontend IP Addresses
 * 
 * @member {string} [frontendIPConfiguration.id] Resource Id
 * 
 * @member {object} backendAddressPool Gets or sets  a reference to a pool of
 * DIPs. Inbound traffic is randomly load balanced across IPs in the backend
 * IPs
 * 
 * @member {string} [backendAddressPool.id] Resource Id
 * 
 * @member {object} [probe] Gets or sets the reference of the load balancer
 * probe used by the Load Balancing rule.
 * 
 * @member {string} [probe.id] Resource Id
 * 
 * @member {string} protocol Gets or sets the transport protocol for the
 * external endpoint. Possible values are Udp or Tcp. Possible values for
 * this property include: 'Udp', 'Tcp'.
 * 
 * @member {string} [loadDistribution] Gets or sets the load distribution
 * policy for this rule. Possible values for this property include:
 * 'Default', 'SourceIP', 'SourceIPProtocol'.
 * 
 * @member {number} frontendPort Gets or sets the port for the external
 * endpoint. You can specify any port number you choose, but the port numbers
 * specified for each role in the service must be unique. Possible values
 * range between 1 and 65535, inclusive
 * 
 * @member {number} [backendPort] Gets or sets a port used for internal
 * connections on the endpoint. The localPort attribute maps the eternal port
 * of the endpoint to an internal port on a role. This is useful in scenarios
 * where a role must communicate to an internal compotnent on a port that is
 * different from the one that is exposed externally. If not specified, the
 * value of localPort is the same as the port attribute. Set the value of
 * localPort to '*' to automatically assign an unallocated port that is
 * discoverable using the runtime API
 * 
 * @member {number} [idleTimeoutInMinutes] Gets or sets the timeout for the
 * Tcp idle connection. The value can be set between 4 and 30 minutes. The
 * default value is 4 minutes. This emlement is only used when the protocol
 * is set to Tcp
 * 
 * @member {boolean} enableFloatingIP Configures a virtual machine's endpoint
 * for the floating IP capability required to configure a SQL AlwaysOn
 * availability Group. This setting is required when using the SQL Always ON
 * availability Groups in SQL server. This setting can't be changed after you
 * create the endpoint
 * 
 * @member {string} [provisioningState] Gets or sets Provisioning state of the
 * PublicIP resource Updating/Deleting/Failed
 * 
 */
function LoadBalancingRule(parameters) {
  LoadBalancingRule['super_'].call(this, parameters);
  if (parameters !== null && parameters !== undefined) {
    if (parameters.name !== undefined) {
      this.name = parameters.name;
    }
    if (parameters.etag !== undefined) {
      this.etag = parameters.etag;
    }
    if (parameters.frontendIPConfiguration) {
      this.frontendIPConfiguration = new models['SubResource'](parameters.frontendIPConfiguration);
    }
    if (parameters.backendAddressPool) {
      this.backendAddressPool = new models['SubResource'](parameters.backendAddressPool);
    }
    if (parameters.probe) {
      this.probe = new models['SubResource'](parameters.probe);
    }
    if (parameters.protocol !== undefined) {
      this.protocol = parameters.protocol;
    }
    if (parameters.loadDistribution !== undefined) {
      this.loadDistribution = parameters.loadDistribution;
    }
    if (parameters.frontendPort !== undefined) {
      this.frontendPort = parameters.frontendPort;
    }
    if (parameters.backendPort !== undefined) {
      this.backendPort = parameters.backendPort;
    }
    if (parameters.idleTimeoutInMinutes !== undefined) {
      this.idleTimeoutInMinutes = parameters.idleTimeoutInMinutes;
    }
    if (parameters.enableFloatingIP !== undefined) {
      this.enableFloatingIP = parameters.enableFloatingIP;
    }
    if (parameters.provisioningState !== undefined) {
      this.provisioningState = parameters.provisioningState;
    }
  }    
}

util.inherits(LoadBalancingRule, models['SubResource']);

/**
 * Validate the payload against the LoadBalancingRule schema
 *
 * @param {JSON} payload
 *
 */
LoadBalancingRule.prototype.serialize = function () {
  var payload = LoadBalancingRule['super_'].prototype.serialize.call(this);
  if (this['name'] !== null && this['name'] !== undefined) {
    if (typeof this['name'].valueOf() !== 'string') {
      throw new Error('this[\'name\'] must be of type string.');
    }
    payload['name'] = this['name'];
  }

  if (this['etag'] !== null && this['etag'] !== undefined) {
    if (typeof this['etag'].valueOf() !== 'string') {
      throw new Error('this[\'etag\'] must be of type string.');
    }
    payload['etag'] = this['etag'];
  }

  if (this['frontendIPConfiguration']) {
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['frontendIPConfiguration'] = this['frontendIPConfiguration'].serialize();
  }

  if (this['backendAddressPool']) {
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['backendAddressPool'] = this['backendAddressPool'].serialize();
  }
   else {  throw new Error('this[\'backendAddressPool\'] cannot be null or undefined.');
  }

  if (this['probe']) {
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['probe'] = this['probe'].serialize();
  }

  if (this['protocol'] === null || this['protocol'] === undefined || typeof this['protocol'].valueOf() !== 'string') {
    throw new Error('this[\'protocol\'] cannot be null or undefined and it must be of type string.');
  }
  if (payload['properties'] === null || payload['properties'] === undefined) {
    payload['properties'] = {};
  }
  payload['properties']['protocol'] = this['protocol'];

  if (this['loadDistribution'] !== null && this['loadDistribution'] !== undefined) {
    if (typeof this['loadDistribution'].valueOf() !== 'string') {
      throw new Error('this[\'loadDistribution\'] must be of type string.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['loadDistribution'] = this['loadDistribution'];
  }

  if (this['frontendPort'] === null || this['frontendPort'] === undefined || typeof this['frontendPort'] !== 'number') {
    throw new Error('this[\'frontendPort\'] cannot be null or undefined and it must be of type number.');
  }
  if (payload['properties'] === null || payload['properties'] === undefined) {
    payload['properties'] = {};
  }
  payload['properties']['frontendPort'] = this['frontendPort'];

  if (this['backendPort'] !== null && this['backendPort'] !== undefined) {
    if (typeof this['backendPort'] !== 'number') {
      throw new Error('this[\'backendPort\'] must be of type number.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['backendPort'] = this['backendPort'];
  }

  if (this['idleTimeoutInMinutes'] !== null && this['idleTimeoutInMinutes'] !== undefined) {
    if (typeof this['idleTimeoutInMinutes'] !== 'number') {
      throw new Error('this[\'idleTimeoutInMinutes\'] must be of type number.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['idleTimeoutInMinutes'] = this['idleTimeoutInMinutes'];
  }

  if (this['enableFloatingIP'] === null || this['enableFloatingIP'] === undefined || typeof this['enableFloatingIP'] !== 'boolean') {
    throw new Error('this[\'enableFloatingIP\'] cannot be null or undefined and it must be of type boolean.');
  }
  if (payload['properties'] === null || payload['properties'] === undefined) {
    payload['properties'] = {};
  }
  payload['properties']['enableFloatingIP'] = this['enableFloatingIP'];

  if (this['provisioningState'] !== null && this['provisioningState'] !== undefined) {
    if (typeof this['provisioningState'].valueOf() !== 'string') {
      throw new Error('this[\'provisioningState\'] must be of type string.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['provisioningState'] = this['provisioningState'];
  }

  return payload;
};

/**
 * Deserialize the instance to LoadBalancingRule schema
 *
 * @param {JSON} instance
 *
 */
LoadBalancingRule.prototype.deserialize = function (instance) {
  LoadBalancingRule['super_'].prototype.deserialize.call(this, instance);
  if (instance) {
    if (instance['name'] !== undefined) {
      this['name'] = instance['name'];
    }

    if (instance['etag'] !== undefined) {
      this['etag'] = instance['etag'];
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['frontendIPConfiguration']) {
        this['frontendIPConfiguration'] = new models['SubResource']().deserialize(instance['properties']['frontendIPConfiguration']);
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['backendAddressPool']) {
        this['backendAddressPool'] = new models['SubResource']().deserialize(instance['properties']['backendAddressPool']);
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['probe']) {
        this['probe'] = new models['SubResource']().deserialize(instance['properties']['probe']);
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['protocol'] !== undefined) {
        this['protocol'] = instance['properties']['protocol'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['loadDistribution'] !== undefined) {
        this['loadDistribution'] = instance['properties']['loadDistribution'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['frontendPort'] !== undefined) {
        this['frontendPort'] = instance['properties']['frontendPort'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['backendPort'] !== undefined) {
        this['backendPort'] = instance['properties']['backendPort'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['idleTimeoutInMinutes'] !== undefined) {
        this['idleTimeoutInMinutes'] = instance['properties']['idleTimeoutInMinutes'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['enableFloatingIP'] !== undefined) {
        this['enableFloatingIP'] = instance['properties']['enableFloatingIP'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['provisioningState'] !== undefined) {
        this['provisioningState'] = instance['properties']['provisioningState'];
      }
    }
  }

  return this;
};

module.exports = LoadBalancingRule;
