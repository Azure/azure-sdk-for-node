/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the InboundNatRule class.
 * @constructor
 * Inbound NAT rule of the loadbalancer
 *
 * @member {object} [frontendIPConfiguration] Gets or sets a reference to
 * frontend IP Addresses
 * 
 * @member {string} [frontendIPConfiguration.id] Resource Id
 * 
 * @member {object} [backendIPConfiguration] Gets or sets a reference to a
 * private ip address defined on a NetworkInterface of a VM. Traffic sent to
 * frontendPort of each of the frontendIPConfigurations is forwarded to the
 * backed IP
 * 
 * @member {array}
 * [backendIPConfiguration.applicationGatewayBackendAddressPools] Gets or
 * sets the reference of ApplicationGatewayBackendAddressPool resource
 * 
 * @member {array} [backendIPConfiguration.loadBalancerBackendAddressPools]
 * Gets or sets the reference of LoadBalancerBackendAddressPool resource
 * 
 * @member {array} [backendIPConfiguration.loadBalancerInboundNatRules] Gets
 * or sets list of references of LoadBalancerInboundNatRules
 * 
 * @member {string} [backendIPConfiguration.privateIPAddress]
 * 
 * @member {string} [backendIPConfiguration.privateIPAllocationMethod] Gets or
 * sets PrivateIP allocation method (Static/Dynamic). Possible values
 * include: 'Static', 'Dynamic'
 * 
 * @member {string} [backendIPConfiguration.privateIPAddressVersion] Gets or
 * sets PrivateIP address version (IPv4/IPv6). Possible values include:
 * 'IPv4', 'IPv6'
 * 
 * @member {object} [backendIPConfiguration.subnet]
 * 
 * @member {string} [backendIPConfiguration.subnet.addressPrefix] Gets or sets
 * Address prefix for the subnet.
 * 
 * @member {object} [backendIPConfiguration.subnet.networkSecurityGroup] Gets
 * or sets the reference of the NetworkSecurityGroup resource
 * 
 * @member {array}
 * [backendIPConfiguration.subnet.networkSecurityGroup.securityRules] Gets or
 * sets Security rules of network security group
 * 
 * @member {array}
 * [backendIPConfiguration.subnet.networkSecurityGroup.defaultSecurityRules]
 * Gets or sets Default security rules of network security group
 * 
 * @member {array}
 * [backendIPConfiguration.subnet.networkSecurityGroup.networkInterfaces]
 * Gets collection of references to Network Interfaces
 * 
 * @member {array}
 * [backendIPConfiguration.subnet.networkSecurityGroup.subnets] Gets
 * collection of references to subnets
 * 
 * @member {string}
 * [backendIPConfiguration.subnet.networkSecurityGroup.resourceGuid] Gets or
 * sets resource guid property of the network security group resource
 * 
 * @member {string}
 * [backendIPConfiguration.subnet.networkSecurityGroup.provisioningState]
 * Gets or sets Provisioning state of the PublicIP resource
 * Updating/Deleting/Failed
 * 
 * @member {string} [backendIPConfiguration.subnet.networkSecurityGroup.etag]
 * Gets a unique read-only string that changes whenever the resource is
 * updated
 * 
 * @member {object} [backendIPConfiguration.subnet.routeTable] Gets or sets
 * the reference of the RouteTable resource
 * 
 * @member {array} [backendIPConfiguration.subnet.routeTable.routes] Gets or
 * sets Routes in a Route Table
 * 
 * @member {array} [backendIPConfiguration.subnet.routeTable.subnets] Gets
 * collection of references to subnets
 * 
 * @member {string}
 * [backendIPConfiguration.subnet.routeTable.provisioningState] Gets or sets
 * Provisioning state of the resource Updating/Deleting/Failed
 * 
 * @member {string} [backendIPConfiguration.subnet.routeTable.etag] Gets a
 * unique read-only string that changes whenever the resource is updated
 * 
 * @member {array} [backendIPConfiguration.subnet.ipConfigurations] Gets array
 * of references to the network interface IP configurations using subnet
 * 
 * @member {string} [backendIPConfiguration.subnet.provisioningState] Gets or
 * sets Provisioning state of the PublicIP resource Updating/Deleting/Failed
 * 
 * @member {string} [backendIPConfiguration.subnet.name] Gets name of the
 * resource that is unique within a resource group. This name can be used to
 * access the resource
 * 
 * @member {string} [backendIPConfiguration.subnet.etag] A unique read-only
 * string that changes whenever the resource is updated
 * 
 * @member {boolean} [backendIPConfiguration.primary] Gets whether this is a
 * primary customer address on the NIC
 * 
 * @member {object} [backendIPConfiguration.publicIPAddress]
 * 
 * @member {string}
 * [backendIPConfiguration.publicIPAddress.publicIPAllocationMethod] Gets or
 * sets PublicIP allocation method (Static/Dynamic). Possible values include:
 * 'Static', 'Dynamic'
 * 
 * @member {string}
 * [backendIPConfiguration.publicIPAddress.publicIPAddressVersion] Gets or
 * sets PublicIP address version (IPv4/IPv6). Possible values include:
 * 'IPv4', 'IPv6'
 * 
 * @member {object} [backendIPConfiguration.publicIPAddress.ipConfiguration]
 * 
 * @member {string}
 * [backendIPConfiguration.publicIPAddress.ipConfiguration.privateIPAddress]
 * Gets or sets the privateIPAddress of the IP Configuration
 * 
 * @member {string}
 * [backendIPConfiguration.publicIPAddress.ipConfiguration.privateIPAllocationMethod]
 * Gets or sets PrivateIP allocation method (Static/Dynamic). Possible values
 * include: 'Static', 'Dynamic'
 * 
 * @member {object}
 * [backendIPConfiguration.publicIPAddress.ipConfiguration.subnet] Gets or
 * sets the reference of the subnet resource
 * 
 * @member {string}
 * [backendIPConfiguration.publicIPAddress.ipConfiguration.subnet.addressPrefix]
 * Gets or sets Address prefix for the subnet.
 * 
 * @member {object}
 * [backendIPConfiguration.publicIPAddress.ipConfiguration.subnet.networkSecurityGroup]
 * Gets or sets the reference of the NetworkSecurityGroup resource
 * 
 * @member {array}
 * [backendIPConfiguration.publicIPAddress.ipConfiguration.subnet.networkSecurityGroup.securityRules]
 * Gets or sets Security rules of network security group
 * 
 * @member {array}
 * [backendIPConfiguration.publicIPAddress.ipConfiguration.subnet.networkSecurityGroup.defaultSecurityRules]
 * Gets or sets Default security rules of network security group
 * 
 * @member {array}
 * [backendIPConfiguration.publicIPAddress.ipConfiguration.subnet.networkSecurityGroup.networkInterfaces]
 * Gets collection of references to Network Interfaces
 * 
 * @member {array}
 * [backendIPConfiguration.publicIPAddress.ipConfiguration.subnet.networkSecurityGroup.subnets]
 * Gets collection of references to subnets
 * 
 * @member {string}
 * [backendIPConfiguration.publicIPAddress.ipConfiguration.subnet.networkSecurityGroup.resourceGuid]
 * Gets or sets resource guid property of the network security group resource
 * 
 * @member {string}
 * [backendIPConfiguration.publicIPAddress.ipConfiguration.subnet.networkSecurityGroup.provisioningState]
 * Gets or sets Provisioning state of the PublicIP resource
 * Updating/Deleting/Failed
 * 
 * @member {string}
 * [backendIPConfiguration.publicIPAddress.ipConfiguration.subnet.networkSecurityGroup.etag]
 * Gets a unique read-only string that changes whenever the resource is
 * updated
 * 
 * @member {object}
 * [backendIPConfiguration.publicIPAddress.ipConfiguration.subnet.routeTable]
 * Gets or sets the reference of the RouteTable resource
 * 
 * @member {array}
 * [backendIPConfiguration.publicIPAddress.ipConfiguration.subnet.routeTable.routes]
 * Gets or sets Routes in a Route Table
 * 
 * @member {array}
 * [backendIPConfiguration.publicIPAddress.ipConfiguration.subnet.routeTable.subnets]
 * Gets collection of references to subnets
 * 
 * @member {string}
 * [backendIPConfiguration.publicIPAddress.ipConfiguration.subnet.routeTable.provisioningState]
 * Gets or sets Provisioning state of the resource Updating/Deleting/Failed
 * 
 * @member {string}
 * [backendIPConfiguration.publicIPAddress.ipConfiguration.subnet.routeTable.etag]
 * Gets a unique read-only string that changes whenever the resource is
 * updated
 * 
 * @member {array}
 * [backendIPConfiguration.publicIPAddress.ipConfiguration.subnet.ipConfigurations]
 * Gets array of references to the network interface IP configurations using
 * subnet
 * 
 * @member {string}
 * [backendIPConfiguration.publicIPAddress.ipConfiguration.subnet.provisioningState]
 * Gets or sets Provisioning state of the PublicIP resource
 * Updating/Deleting/Failed
 * 
 * @member {string}
 * [backendIPConfiguration.publicIPAddress.ipConfiguration.subnet.name] Gets
 * name of the resource that is unique within a resource group. This name can
 * be used to access the resource
 * 
 * @member {string}
 * [backendIPConfiguration.publicIPAddress.ipConfiguration.subnet.etag] A
 * unique read-only string that changes whenever the resource is updated
 * 
 * @member {object}
 * [backendIPConfiguration.publicIPAddress.ipConfiguration.publicIPAddress]
 * Gets or sets the reference of the PublicIP resource
 * 
 * @member {string}
 * [backendIPConfiguration.publicIPAddress.ipConfiguration.provisioningState]
 * Gets or sets Provisioning state of the PublicIP resource
 * Updating/Deleting/Failed
 * 
 * @member {string}
 * [backendIPConfiguration.publicIPAddress.ipConfiguration.name] Gets name of
 * the resource that is unique within a resource group. This name can be used
 * to access the resource
 * 
 * @member {string}
 * [backendIPConfiguration.publicIPAddress.ipConfiguration.etag] A unique
 * read-only string that changes whenever the resource is updated
 * 
 * @member {object} [backendIPConfiguration.publicIPAddress.dnsSettings] Gets
 * or sets FQDN of the DNS record associated with the public IP address
 * 
 * @member {string}
 * [backendIPConfiguration.publicIPAddress.dnsSettings.domainNameLabel] Gets
 * or sets the Domain name label.The concatenation of the domain name label
 * and the regionalized DNS zone make up the fully qualified domain name
 * associated with the public IP address. If a domain name label is
 * specified, an A DNS record is created for the public IP in the Microsoft
 * Azure DNS system.
 * 
 * @member {string} [backendIPConfiguration.publicIPAddress.dnsSettings.fqdn]
 * Gets the FQDN, Fully qualified domain name of the A DNS record associated
 * with the public IP. This is the concatenation of the domainNameLabel and
 * the regionalized DNS zone.
 * 
 * @member {string}
 * [backendIPConfiguration.publicIPAddress.dnsSettings.reverseFqdn] Gets or
 * Sests the Reverse FQDN. A user-visible, fully qualified domain name that
 * resolves to this public IP address. If the reverseFqdn is specified, then
 * a PTR DNS record is created pointing from the IP address in the
 * in-addr.arpa domain to the reverse FQDN.
 * 
 * @member {string} [backendIPConfiguration.publicIPAddress.ipAddress]
 * 
 * @member {number}
 * [backendIPConfiguration.publicIPAddress.idleTimeoutInMinutes] Gets or sets
 * the Idletimeout of the public IP address
 * 
 * @member {string} [backendIPConfiguration.publicIPAddress.resourceGuid] Gets
 * or sets resource guid property of the PublicIP resource
 * 
 * @member {string} [backendIPConfiguration.publicIPAddress.provisioningState]
 * Gets or sets Provisioning state of the PublicIP resource
 * Updating/Deleting/Failed
 * 
 * @member {string} [backendIPConfiguration.publicIPAddress.etag] Gets a
 * unique read-only string that changes whenever the resource is updated
 * 
 * @member {string} [backendIPConfiguration.provisioningState]
 * 
 * @member {string} [backendIPConfiguration.name] Gets name of the resource
 * that is unique within a resource group. This name can be used to access
 * the resource
 * 
 * @member {string} [backendIPConfiguration.etag] A unique read-only string
 * that changes whenever the resource is updated
 * 
 * @member {string} [protocol] Gets or sets the transport potocol for the
 * external endpoint. Possible values are Udp or Tcp. Possible values
 * include: 'Udp', 'Tcp'
 * 
 * @member {number} [frontendPort] Gets or sets the port for the external
 * endpoint. You can spcify any port number you choose, but the port numbers
 * specified for each role in the service must be unique. Possible values
 * range between 1 and 65535, inclusive
 * 
 * @member {number} [backendPort] Gets or sets a port used for internal
 * connections on the endpoint. The localPort attribute maps the eternal port
 * of the endpoint to an internal port on a role. This is useful in scenarios
 * where a role must communicate to an internal compotnent on a port that is
 * different from the one that is exposed externally. If not specified, the
 * value of localPort is the same as the port attribute. Set the value of
 * localPort to '*' to automatically assign an unallocated port that is
 * discoverable using the runtime API
 * 
 * @member {number} [idleTimeoutInMinutes] Gets or sets the timeout for the
 * Tcp idle connection. The value can be set between 4 and 30 minutes. The
 * default value is 4 minutes. This emlement is only used when the protocol
 * is set to Tcp
 * 
 * @member {boolean} [enableFloatingIP] Configures a virtual machine's
 * endpoint for the floating IP capability required to configure a SQL
 * AlwaysOn availability Group. This setting is required when using the SQL
 * Always ON availability Groups in SQL server. This setting can't be changed
 * after you create the endpoint
 * 
 * @member {string} [provisioningState] Gets or sets Provisioning state of the
 * PublicIP resource Updating/Deleting/Failed
 * 
 * @member {string} [name] Gets name of the resource that is unique within a
 * resource group. This name can be used to access the resource
 * 
 * @member {string} [etag] A unique read-only string that changes whenever the
 * resource is updated
 * 
 */
function InboundNatRule() {
  InboundNatRule['super_'].call(this);
}

util.inherits(InboundNatRule, models['SubResource']);

/**
 * Defines the metadata of InboundNatRule
 *
 * @returns {object} metadata of InboundNatRule
 *
 */
InboundNatRule.prototype.mapper = function () {
  return {
    required: false,
    serializedName: 'InboundNatRule',
    type: {
      name: 'Composite',
      className: 'InboundNatRule',
      modelProperties: {
        id: {
          required: false,
          serializedName: 'id',
          type: {
            name: 'String'
          }
        },
        frontendIPConfiguration: {
          required: false,
          serializedName: 'properties.frontendIPConfiguration',
          type: {
            name: 'Composite',
            className: 'SubResource'
          }
        },
        backendIPConfiguration: {
          required: false,
          serializedName: 'properties.backendIPConfiguration',
          type: {
            name: 'Composite',
            className: 'NetworkInterfaceIPConfiguration'
          }
        },
        protocol: {
          required: false,
          serializedName: 'properties.protocol',
          type: {
            name: 'String'
          }
        },
        frontendPort: {
          required: false,
          serializedName: 'properties.frontendPort',
          type: {
            name: 'Number'
          }
        },
        backendPort: {
          required: false,
          serializedName: 'properties.backendPort',
          type: {
            name: 'Number'
          }
        },
        idleTimeoutInMinutes: {
          required: false,
          serializedName: 'properties.idleTimeoutInMinutes',
          type: {
            name: 'Number'
          }
        },
        enableFloatingIP: {
          required: false,
          serializedName: 'properties.enableFloatingIP',
          type: {
            name: 'Boolean'
          }
        },
        provisioningState: {
          required: false,
          serializedName: 'properties.provisioningState',
          type: {
            name: 'String'
          }
        },
        name: {
          required: false,
          serializedName: 'name',
          type: {
            name: 'String'
          }
        },
        etag: {
          required: false,
          serializedName: 'etag',
          type: {
            name: 'String'
          }
        }
      }
    }
  };
};

module.exports = InboundNatRule;
