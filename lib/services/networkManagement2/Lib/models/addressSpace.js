/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var util = require('util');

/**
 * @class
 * Initializes a new instance of the AddressSpace class.
 * @constructor
 * AddressSpace contains an array of IP address ranges that can be used by
 * subnets
 * @member {array} [addressPrefixes] Gets or sets List of address blocks
 * reserved for this virtual network in CIDR notation
 * 
 */
function AddressSpace(parameters) {
  if (parameters !== null && parameters !== undefined) {
    if (parameters.addressPrefixes) {
      var tempParametersaddressPrefixes = [];
      parameters.addressPrefixes.forEach(function(element) {
        if (element !== undefined) {
          element = element;
        }
        tempParametersaddressPrefixes.push(element);
      });
      this.addressPrefixes = tempParametersaddressPrefixes;
    }
  }    
}


/**
 * Validate the payload against the AddressSpace schema
 *
 * @param {JSON} payload
 *
 */
AddressSpace.prototype.serialize = function () {
  var payload = {};
  if (util.isArray(this['addressPrefixes'])) {
    payload['addressPrefixes'] = [];
    for (var i = 0; i < this['addressPrefixes'].length; i++) {
      if (this['addressPrefixes'][i] !== null && this['addressPrefixes'][i] !== undefined) {
        if (typeof this['addressPrefixes'][i].valueOf() !== 'string') {
          throw new Error('this[\'addressPrefixes\'][i] must be of type string.');
        }
        if (payload['addressPrefixes'] === null || payload['addressPrefixes'] === undefined) {
          payload['addressPrefixes'] = {};
        }
        payload['addressPrefixes'][i] = this['addressPrefixes'][i];
      }
    }
  }

  return payload;
};

/**
 * Deserialize the instance to AddressSpace schema
 *
 * @param {JSON} instance
 *
 */
AddressSpace.prototype.deserialize = function (instance) {
  if (instance) {
    if (instance['addressPrefixes']) {
      var tempInstanceaddressPrefixes = [];
      instance['addressPrefixes'].forEach(function(element1) {
        if (element1 !== undefined) {
          element1 = element1;
        }
        tempInstanceaddressPrefixes.push(element1);
      });
      this['addressPrefixes'] = tempInstanceaddressPrefixes;
    }
  }

  return this;
};

module.exports = AddressSpace;
