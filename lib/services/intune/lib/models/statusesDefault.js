/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.13.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the StatusesDefault class.
 * @constructor
 * Default Statuses entity for the given tenant.
 * @member {number} [deployedPolicies]
 * 
 * @member {number} [enrolledUsers]
 * 
 * @member {number} [flaggedUsers]
 * 
 * @member {date} [lastModifiedTime]
 * 
 * @member {number} [policyAppliedUsers]
 * 
 * @member {string} [status]
 * 
 * @member {number} [wipeFailedApps]
 * 
 * @member {number} [wipePendingApps]
 * 
 * @member {number} [wipeSucceededApps]
 * 
 */
function StatusesDefault(parameters) {
  StatusesDefault['super_'].call(this, parameters);
  if (parameters !== null && parameters !== undefined) {
    if (parameters.deployedPolicies !== undefined) {
      this.deployedPolicies = parameters.deployedPolicies;
    }
    if (parameters.enrolledUsers !== undefined) {
      this.enrolledUsers = parameters.enrolledUsers;
    }
    if (parameters.flaggedUsers !== undefined) {
      this.flaggedUsers = parameters.flaggedUsers;
    }
    if (parameters.lastModifiedTime !== undefined) {
      this.lastModifiedTime = parameters.lastModifiedTime;
    }
    if (parameters.policyAppliedUsers !== undefined) {
      this.policyAppliedUsers = parameters.policyAppliedUsers;
    }
    if (parameters.status !== undefined) {
      this.status = parameters.status;
    }
    if (parameters.wipeFailedApps !== undefined) {
      this.wipeFailedApps = parameters.wipeFailedApps;
    }
    if (parameters.wipePendingApps !== undefined) {
      this.wipePendingApps = parameters.wipePendingApps;
    }
    if (parameters.wipeSucceededApps !== undefined) {
      this.wipeSucceededApps = parameters.wipeSucceededApps;
    }
  }    
}

util.inherits(StatusesDefault, models['Resource']);

/**
 * Validate the payload against the StatusesDefault schema
 *
 * @param {JSON} payload
 *
 */
StatusesDefault.prototype.serialize = function () {
  var payload = StatusesDefault['super_'].prototype.serialize.call(this);
  if (this['deployedPolicies'] !== null && this['deployedPolicies'] !== undefined) {
    if (typeof this['deployedPolicies'] !== 'number') {
      throw new Error('this[\'deployedPolicies\'] must be of type number.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['deployedPolicies'] = this['deployedPolicies'];
  }

  if (this['enrolledUsers'] !== null && this['enrolledUsers'] !== undefined) {
    if (typeof this['enrolledUsers'] !== 'number') {
      throw new Error('this[\'enrolledUsers\'] must be of type number.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['enrolledUsers'] = this['enrolledUsers'];
  }

  if (this['flaggedUsers'] !== null && this['flaggedUsers'] !== undefined) {
    if (typeof this['flaggedUsers'] !== 'number') {
      throw new Error('this[\'flaggedUsers\'] must be of type number.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['flaggedUsers'] = this['flaggedUsers'];
  }

  if (this['lastModifiedTime']) {
    if (!(this['lastModifiedTime'] instanceof Date || typeof this['lastModifiedTime'].valueOf() === 'string' && !isNaN(Date.parse(this['lastModifiedTime'])))) {
      throw new Error('this[\'lastModifiedTime\'] must be of type date.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['lastModifiedTime'] = (this['lastModifiedTime'] instanceof Date) ? this['lastModifiedTime'].toISOString() : this['lastModifiedTime'];
  }

  if (this['policyAppliedUsers'] !== null && this['policyAppliedUsers'] !== undefined) {
    if (typeof this['policyAppliedUsers'] !== 'number') {
      throw new Error('this[\'policyAppliedUsers\'] must be of type number.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['policyAppliedUsers'] = this['policyAppliedUsers'];
  }

  if (this['status'] !== null && this['status'] !== undefined) {
    if (typeof this['status'].valueOf() !== 'string') {
      throw new Error('this[\'status\'] must be of type string.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['status'] = this['status'];
  }

  if (this['wipeFailedApps'] !== null && this['wipeFailedApps'] !== undefined) {
    if (typeof this['wipeFailedApps'] !== 'number') {
      throw new Error('this[\'wipeFailedApps\'] must be of type number.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['wipeFailedApps'] = this['wipeFailedApps'];
  }

  if (this['wipePendingApps'] !== null && this['wipePendingApps'] !== undefined) {
    if (typeof this['wipePendingApps'] !== 'number') {
      throw new Error('this[\'wipePendingApps\'] must be of type number.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['wipePendingApps'] = this['wipePendingApps'];
  }

  if (this['wipeSucceededApps'] !== null && this['wipeSucceededApps'] !== undefined) {
    if (typeof this['wipeSucceededApps'] !== 'number') {
      throw new Error('this[\'wipeSucceededApps\'] must be of type number.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['wipeSucceededApps'] = this['wipeSucceededApps'];
  }

  return payload;
};

/**
 * Deserialize the instance to StatusesDefault schema
 *
 * @param {JSON} instance
 *
 */
StatusesDefault.prototype.deserialize = function (instance) {
  StatusesDefault['super_'].prototype.deserialize.call(this, instance);
  if (instance) {
    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['deployedPolicies'] !== undefined) {
        this['deployedPolicies'] = instance['properties']['deployedPolicies'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['enrolledUsers'] !== undefined) {
        this['enrolledUsers'] = instance['properties']['enrolledUsers'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['flaggedUsers'] !== undefined) {
        this['flaggedUsers'] = instance['properties']['flaggedUsers'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['lastModifiedTime']) {
        this['lastModifiedTime'] = new Date(instance['properties']['lastModifiedTime']);
      }
      else if (instance['properties']['lastModifiedTime'] !== undefined) {
        this['lastModifiedTime'] = instance['properties']['lastModifiedTime'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['policyAppliedUsers'] !== undefined) {
        this['policyAppliedUsers'] = instance['properties']['policyAppliedUsers'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['status'] !== undefined) {
        this['status'] = instance['properties']['status'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['wipeFailedApps'] !== undefined) {
        this['wipeFailedApps'] = instance['properties']['wipeFailedApps'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['wipePendingApps'] !== undefined) {
        this['wipePendingApps'] = instance['properties']['wipePendingApps'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['wipeSucceededApps'] !== undefined) {
        this['wipeSucceededApps'] = instance['properties']['wipeSucceededApps'];
      }
    }
  }

  return this;
};

module.exports = StatusesDefault;
