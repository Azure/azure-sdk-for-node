/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.13.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var moment = require('moment');

/**
 * @class
 * Initializes a new instance of the MAMPolicyProperties class.
 * @constructor
 * @member {string} friendlyName
 * 
 * @member {string} [description]
 * 
 * @member {string} [appSharingFromLevel] Possible values for this property
 * include: 'none', 'policyManagedApps', 'allApps'.
 * 
 * @member {string} [appSharingToLevel] Possible values for this property
 * include: 'none', 'policyManagedApps', 'allApps'.
 * 
 * @member {string} [authentication] Possible values for this property
 * include: 'required', 'notRequired'.
 * 
 * @member {string} [clipboardSharingLevel] Possible values for this property
 * include: 'blocked', 'policyManagedApps', 'policyManagedAppsWithPasteIn',
 * 'allApps'.
 * 
 * @member {string} [dataBackup] Possible values for this property include:
 * 'allow', 'block'.
 * 
 * @member {string} [fileSharingSaveAs] Possible values for this property
 * include: 'allow', 'block'.
 * 
 * @member {string} [pin] Possible values for this property include:
 * 'required', 'notRequired'.
 * 
 * @member {number} [pinNumRetry]
 * 
 * @member {string} [deviceCompliance] Possible values for this property
 * include: 'enable', 'disable'.
 * 
 * @member {string} [managedBrowser] Possible values for this property
 * include: 'required', 'notRequired'.
 * 
 * @member {moment.duration} [accessRecheckOfflineTimeout]
 * 
 * @member {moment.duration} [accessRecheckOnlineTimeout]
 * 
 * @member {moment.duration} [offlineWipeTimeout]
 * 
 * @member {number} [numOfApps]
 * 
 * @member {string} [groupStatus] Possible values for this property include:
 * 'notTargeted', 'targeted'.
 * 
 * @member {date} [lastModifiedTime]
 * 
 */
function MAMPolicyProperties(parameters) {
  if (parameters !== null && parameters !== undefined) {
    if (parameters.friendlyName !== undefined) {
      this.friendlyName = parameters.friendlyName;
    }
    if (parameters.description !== undefined) {
      this.description = parameters.description;
    }
    if (parameters.appSharingFromLevel !== undefined) {
      this.appSharingFromLevel = parameters.appSharingFromLevel;
    }
    if (parameters.appSharingToLevel !== undefined) {
      this.appSharingToLevel = parameters.appSharingToLevel;
    }
    if (parameters.authentication !== undefined) {
      this.authentication = parameters.authentication;
    }
    if (parameters.clipboardSharingLevel !== undefined) {
      this.clipboardSharingLevel = parameters.clipboardSharingLevel;
    }
    if (parameters.dataBackup !== undefined) {
      this.dataBackup = parameters.dataBackup;
    }
    if (parameters.fileSharingSaveAs !== undefined) {
      this.fileSharingSaveAs = parameters.fileSharingSaveAs;
    }
    if (parameters.pin !== undefined) {
      this.pin = parameters.pin;
    }
    if (parameters.pinNumRetry !== undefined) {
      this.pinNumRetry = parameters.pinNumRetry;
    }
    if (parameters.deviceCompliance !== undefined) {
      this.deviceCompliance = parameters.deviceCompliance;
    }
    if (parameters.managedBrowser !== undefined) {
      this.managedBrowser = parameters.managedBrowser;
    }
    if (parameters.accessRecheckOfflineTimeout !== undefined) {
      this.accessRecheckOfflineTimeout = parameters.accessRecheckOfflineTimeout;
    }
    if (parameters.accessRecheckOnlineTimeout !== undefined) {
      this.accessRecheckOnlineTimeout = parameters.accessRecheckOnlineTimeout;
    }
    if (parameters.offlineWipeTimeout !== undefined) {
      this.offlineWipeTimeout = parameters.offlineWipeTimeout;
    }
    if (parameters.numOfApps !== undefined) {
      this.numOfApps = parameters.numOfApps;
    }
    if (parameters.groupStatus !== undefined) {
      this.groupStatus = parameters.groupStatus;
    }
    if (parameters.lastModifiedTime !== undefined) {
      this.lastModifiedTime = parameters.lastModifiedTime;
    }
  }    
}


/**
 * Validate the payload against the MAMPolicyProperties schema
 *
 * @param {JSON} payload
 *
 */
MAMPolicyProperties.prototype.serialize = function () {
  var payload = {};
  if (this['friendlyName'] === null || this['friendlyName'] === undefined || typeof this['friendlyName'].valueOf() !== 'string') {
    throw new Error('this[\'friendlyName\'] cannot be null or undefined and it must be of type string.');
  }
  payload['friendlyName'] = this['friendlyName'];

  if (this['description'] !== null && this['description'] !== undefined) {
    if (typeof this['description'].valueOf() !== 'string') {
      throw new Error('this[\'description\'] must be of type string.');
    }
    payload['description'] = this['description'];
  }

  if (this['appSharingFromLevel'] !== null && this['appSharingFromLevel'] !== undefined) {
    if (typeof this['appSharingFromLevel'].valueOf() !== 'string') {
      throw new Error('this[\'appSharingFromLevel\'] must be of type string.');
    }
    payload['appSharingFromLevel'] = this['appSharingFromLevel'];
  }

  if (this['appSharingToLevel'] !== null && this['appSharingToLevel'] !== undefined) {
    if (typeof this['appSharingToLevel'].valueOf() !== 'string') {
      throw new Error('this[\'appSharingToLevel\'] must be of type string.');
    }
    payload['appSharingToLevel'] = this['appSharingToLevel'];
  }

  if (this['authentication'] !== null && this['authentication'] !== undefined) {
    if (typeof this['authentication'].valueOf() !== 'string') {
      throw new Error('this[\'authentication\'] must be of type string.');
    }
    payload['authentication'] = this['authentication'];
  }

  if (this['clipboardSharingLevel'] !== null && this['clipboardSharingLevel'] !== undefined) {
    if (typeof this['clipboardSharingLevel'].valueOf() !== 'string') {
      throw new Error('this[\'clipboardSharingLevel\'] must be of type string.');
    }
    payload['clipboardSharingLevel'] = this['clipboardSharingLevel'];
  }

  if (this['dataBackup'] !== null && this['dataBackup'] !== undefined) {
    if (typeof this['dataBackup'].valueOf() !== 'string') {
      throw new Error('this[\'dataBackup\'] must be of type string.');
    }
    payload['dataBackup'] = this['dataBackup'];
  }

  if (this['fileSharingSaveAs'] !== null && this['fileSharingSaveAs'] !== undefined) {
    if (typeof this['fileSharingSaveAs'].valueOf() !== 'string') {
      throw new Error('this[\'fileSharingSaveAs\'] must be of type string.');
    }
    payload['fileSharingSaveAs'] = this['fileSharingSaveAs'];
  }

  if (this['pin'] !== null && this['pin'] !== undefined) {
    if (typeof this['pin'].valueOf() !== 'string') {
      throw new Error('this[\'pin\'] must be of type string.');
    }
    payload['pin'] = this['pin'];
  }

  if (this['pinNumRetry'] !== null && this['pinNumRetry'] !== undefined) {
    if (typeof this['pinNumRetry'] !== 'number') {
      throw new Error('this[\'pinNumRetry\'] must be of type number.');
    }
    payload['pinNumRetry'] = this['pinNumRetry'];
  }

  if (this['deviceCompliance'] !== null && this['deviceCompliance'] !== undefined) {
    if (typeof this['deviceCompliance'].valueOf() !== 'string') {
      throw new Error('this[\'deviceCompliance\'] must be of type string.');
    }
    payload['deviceCompliance'] = this['deviceCompliance'];
  }

  if (this['managedBrowser'] !== null && this['managedBrowser'] !== undefined) {
    if (typeof this['managedBrowser'].valueOf() !== 'string') {
      throw new Error('this[\'managedBrowser\'] must be of type string.');
    }
    payload['managedBrowser'] = this['managedBrowser'];
  }

  if (this['accessRecheckOfflineTimeout']) {
    if (!moment.isDuration(this['accessRecheckOfflineTimeout'])) {
      throw new Error('this[\'accessRecheckOfflineTimeout\'] must be of type moment.duration.');
    }
    payload['accessRecheckOfflineTimeout'] = this['accessRecheckOfflineTimeout'].toISOString();
  }

  if (this['accessRecheckOnlineTimeout']) {
    if (!moment.isDuration(this['accessRecheckOnlineTimeout'])) {
      throw new Error('this[\'accessRecheckOnlineTimeout\'] must be of type moment.duration.');
    }
    payload['accessRecheckOnlineTimeout'] = this['accessRecheckOnlineTimeout'].toISOString();
  }

  if (this['offlineWipeTimeout']) {
    if (!moment.isDuration(this['offlineWipeTimeout'])) {
      throw new Error('this[\'offlineWipeTimeout\'] must be of type moment.duration.');
    }
    payload['offlineWipeTimeout'] = this['offlineWipeTimeout'].toISOString();
  }

  if (this['numOfApps'] !== null && this['numOfApps'] !== undefined) {
    if (typeof this['numOfApps'] !== 'number') {
      throw new Error('this[\'numOfApps\'] must be of type number.');
    }
    payload['numOfApps'] = this['numOfApps'];
  }

  if (this['groupStatus'] !== null && this['groupStatus'] !== undefined) {
    if (typeof this['groupStatus'].valueOf() !== 'string') {
      throw new Error('this[\'groupStatus\'] must be of type string.');
    }
    payload['groupStatus'] = this['groupStatus'];
  }

  if (this['lastModifiedTime']) {
    if (!(this['lastModifiedTime'] instanceof Date || typeof this['lastModifiedTime'].valueOf() === 'string' && !isNaN(Date.parse(this['lastModifiedTime'])))) {
      throw new Error('this[\'lastModifiedTime\'] must be of type date.');
    }
    payload['lastModifiedTime'] = (this['lastModifiedTime'] instanceof Date) ? this['lastModifiedTime'].toISOString() : this['lastModifiedTime'];
  }

  return payload;
};

/**
 * Deserialize the instance to MAMPolicyProperties schema
 *
 * @param {JSON} instance
 *
 */
MAMPolicyProperties.prototype.deserialize = function (instance) {
  if (instance) {
    if (instance['friendlyName'] !== undefined) {
      this['friendlyName'] = instance['friendlyName'];
    }

    if (instance['description'] !== undefined) {
      this['description'] = instance['description'];
    }

    if (instance['appSharingFromLevel'] !== undefined) {
      this['appSharingFromLevel'] = instance['appSharingFromLevel'];
    }

    if (instance['appSharingToLevel'] !== undefined) {
      this['appSharingToLevel'] = instance['appSharingToLevel'];
    }

    if (instance['authentication'] !== undefined) {
      this['authentication'] = instance['authentication'];
    }

    if (instance['clipboardSharingLevel'] !== undefined) {
      this['clipboardSharingLevel'] = instance['clipboardSharingLevel'];
    }

    if (instance['dataBackup'] !== undefined) {
      this['dataBackup'] = instance['dataBackup'];
    }

    if (instance['fileSharingSaveAs'] !== undefined) {
      this['fileSharingSaveAs'] = instance['fileSharingSaveAs'];
    }

    if (instance['pin'] !== undefined) {
      this['pin'] = instance['pin'];
    }

    if (instance['pinNumRetry'] !== undefined) {
      this['pinNumRetry'] = instance['pinNumRetry'];
    }

    if (instance['deviceCompliance'] !== undefined) {
      this['deviceCompliance'] = instance['deviceCompliance'];
    }

    if (instance['managedBrowser'] !== undefined) {
      this['managedBrowser'] = instance['managedBrowser'];
    }

    if (instance['accessRecheckOfflineTimeout']) {
      this['accessRecheckOfflineTimeout'] = moment.duration(instance['accessRecheckOfflineTimeout']);
    }
    else if (instance['accessRecheckOfflineTimeout'] !== undefined) {
      this['accessRecheckOfflineTimeout'] = instance['accessRecheckOfflineTimeout'];
    }

    if (instance['accessRecheckOnlineTimeout']) {
      this['accessRecheckOnlineTimeout'] = moment.duration(instance['accessRecheckOnlineTimeout']);
    }
    else if (instance['accessRecheckOnlineTimeout'] !== undefined) {
      this['accessRecheckOnlineTimeout'] = instance['accessRecheckOnlineTimeout'];
    }

    if (instance['offlineWipeTimeout']) {
      this['offlineWipeTimeout'] = moment.duration(instance['offlineWipeTimeout']);
    }
    else if (instance['offlineWipeTimeout'] !== undefined) {
      this['offlineWipeTimeout'] = instance['offlineWipeTimeout'];
    }

    if (instance['numOfApps'] !== undefined) {
      this['numOfApps'] = instance['numOfApps'];
    }

    if (instance['groupStatus'] !== undefined) {
      this['groupStatus'] = instance['groupStatus'];
    }

    if (instance['lastModifiedTime']) {
      this['lastModifiedTime'] = new Date(instance['lastModifiedTime']);
    }
    else if (instance['lastModifiedTime'] !== undefined) {
      this['lastModifiedTime'] = instance['lastModifiedTime'];
    }
  }

  return this;
};

module.exports = MAMPolicyProperties;
