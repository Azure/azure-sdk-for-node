/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.13.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the FlaggedEnrolledApp class.
 * @constructor
 * Flagged Enrolled App for the given tenant.
 * @member {string} [deviceType]
 * 
 * @member {string} [friendlyName]
 * 
 * @member {string} [lastModifiedTime]
 * 
 * @member {string} [platform]
 * 
 * @member {array} [errors]
 * 
 */
function FlaggedEnrolledApp(parameters) {
  FlaggedEnrolledApp['super_'].call(this, parameters);
  if (parameters !== null && parameters !== undefined) {
    if (parameters.deviceType !== undefined) {
      this.deviceType = parameters.deviceType;
    }
    if (parameters.friendlyName !== undefined) {
      this.friendlyName = parameters.friendlyName;
    }
    if (parameters.lastModifiedTime !== undefined) {
      this.lastModifiedTime = parameters.lastModifiedTime;
    }
    if (parameters.platform !== undefined) {
      this.platform = parameters.platform;
    }
    if (parameters.errors) {
      var tempParameterserrors = [];
      parameters.errors.forEach(function(element) {
        if (element) {
          element = new models['FlaggedEnrolledAppError'](element);
        }
        tempParameterserrors.push(element);
      });
      this.errors = tempParameterserrors;
    }
  }    
}

util.inherits(FlaggedEnrolledApp, models['Resource']);

/**
 * Validate the payload against the FlaggedEnrolledApp schema
 *
 * @param {JSON} payload
 *
 */
FlaggedEnrolledApp.prototype.serialize = function () {
  var payload = FlaggedEnrolledApp['super_'].prototype.serialize.call(this);
  if (this['deviceType'] !== null && this['deviceType'] !== undefined) {
    if (typeof this['deviceType'].valueOf() !== 'string') {
      throw new Error('this[\'deviceType\'] must be of type string.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['deviceType'] = this['deviceType'];
  }

  if (this['friendlyName'] !== null && this['friendlyName'] !== undefined) {
    if (typeof this['friendlyName'].valueOf() !== 'string') {
      throw new Error('this[\'friendlyName\'] must be of type string.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['friendlyName'] = this['friendlyName'];
  }

  if (this['lastModifiedTime'] !== null && this['lastModifiedTime'] !== undefined) {
    if (typeof this['lastModifiedTime'].valueOf() !== 'string') {
      throw new Error('this[\'lastModifiedTime\'] must be of type string.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['lastModifiedTime'] = this['lastModifiedTime'];
  }

  if (this['platform'] !== null && this['platform'] !== undefined) {
    if (typeof this['platform'].valueOf() !== 'string') {
      throw new Error('this[\'platform\'] must be of type string.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['platform'] = this['platform'];
  }

  if (util.isArray(this['errors'])) {
    payload['properties']['errors'] = [];
    for (var i = 0; i < this['errors'].length; i++) {
      if (this['errors'][i]) {
        if (payload['properties'] === null || payload['properties'] === undefined) {
          payload['properties'] = {};
        }
        payload['properties']['errors'][i] = this['errors'][i].serialize();
      }
    }
  }

  return payload;
};

/**
 * Deserialize the instance to FlaggedEnrolledApp schema
 *
 * @param {JSON} instance
 *
 */
FlaggedEnrolledApp.prototype.deserialize = function (instance) {
  FlaggedEnrolledApp['super_'].prototype.deserialize.call(this, instance);
  if (instance) {
    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['deviceType'] !== undefined) {
        this['deviceType'] = instance['properties']['deviceType'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['friendlyName'] !== undefined) {
        this['friendlyName'] = instance['properties']['friendlyName'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['lastModifiedTime'] !== undefined) {
        this['lastModifiedTime'] = instance['properties']['lastModifiedTime'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['platform'] !== undefined) {
        this['platform'] = instance['properties']['platform'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['errors']) {
        var tempInstancepropertieserrors = [];
        instance['properties']['errors'].forEach(function(element1) {
          if (element1) {
            element1 = new models['FlaggedEnrolledAppError']().deserialize(element1);
          }
          tempInstancepropertieserrors.push(element1);
        });
        this['errors'] = tempInstancepropertieserrors;
      }
    }
  }

  return this;
};

module.exports = FlaggedEnrolledApp;
