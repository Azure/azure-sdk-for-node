/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.13.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

var moment = require('moment');

/**
 * @class
 * Initializes a new instance of the AndroidMAMPolicy class.
 * @constructor
 * Android Policy entity for Intune MAM.
 * @member {string} [screenCapture] Possible values for this property include:
 * 'allow', 'block'.
 * 
 * @member {string} [fileEncryption] Possible values for this property
 * include: 'required', 'notRequired'.
 * 
 * @member {string} friendlyName
 * 
 * @member {string} [description]
 * 
 * @member {string} [appSharingFromLevel] Possible values for this property
 * include: 'none', 'policyManagedApps', 'allApps'.
 * 
 * @member {string} [appSharingToLevel] Possible values for this property
 * include: 'none', 'policyManagedApps', 'allApps'.
 * 
 * @member {string} [authentication] Possible values for this property
 * include: 'required', 'notRequired'.
 * 
 * @member {string} [clipboardSharingLevel] Possible values for this property
 * include: 'blocked', 'policyManagedApps', 'policyManagedAppsWithPasteIn',
 * 'allApps'.
 * 
 * @member {string} [dataBackup] Possible values for this property include:
 * 'allow', 'block'.
 * 
 * @member {string} [fileSharingSaveAs] Possible values for this property
 * include: 'allow', 'block'.
 * 
 * @member {string} [pin] Possible values for this property include:
 * 'required', 'notRequired'.
 * 
 * @member {number} [pinNumRetry]
 * 
 * @member {string} [deviceCompliance] Possible values for this property
 * include: 'enable', 'disable'.
 * 
 * @member {string} [managedBrowser] Possible values for this property
 * include: 'required', 'notRequired'.
 * 
 * @member {moment.duration} [accessRecheckOfflineTimeout]
 * 
 * @member {moment.duration} [accessRecheckOnlineTimeout]
 * 
 * @member {moment.duration} [offlineWipeTimeout]
 * 
 * @member {number} [numOfApps]
 * 
 * @member {string} [groupStatus] Possible values for this property include:
 * 'notTargeted', 'targeted'.
 * 
 * @member {date} [lastModifiedTime]
 * 
 */
function AndroidMAMPolicy(parameters) {
  AndroidMAMPolicy['super_'].call(this, parameters);
  if (parameters !== null && parameters !== undefined) {
    if (parameters.screenCapture !== undefined) {
      this.screenCapture = parameters.screenCapture;
    }
    if (parameters.fileEncryption !== undefined) {
      this.fileEncryption = parameters.fileEncryption;
    }
    if (parameters.friendlyName !== undefined) {
      this.friendlyName = parameters.friendlyName;
    }
    if (parameters.description !== undefined) {
      this.description = parameters.description;
    }
    if (parameters.appSharingFromLevel !== undefined) {
      this.appSharingFromLevel = parameters.appSharingFromLevel;
    }
    if (parameters.appSharingToLevel !== undefined) {
      this.appSharingToLevel = parameters.appSharingToLevel;
    }
    if (parameters.authentication !== undefined) {
      this.authentication = parameters.authentication;
    }
    if (parameters.clipboardSharingLevel !== undefined) {
      this.clipboardSharingLevel = parameters.clipboardSharingLevel;
    }
    if (parameters.dataBackup !== undefined) {
      this.dataBackup = parameters.dataBackup;
    }
    if (parameters.fileSharingSaveAs !== undefined) {
      this.fileSharingSaveAs = parameters.fileSharingSaveAs;
    }
    if (parameters.pin !== undefined) {
      this.pin = parameters.pin;
    }
    if (parameters.pinNumRetry !== undefined) {
      this.pinNumRetry = parameters.pinNumRetry;
    }
    if (parameters.deviceCompliance !== undefined) {
      this.deviceCompliance = parameters.deviceCompliance;
    }
    if (parameters.managedBrowser !== undefined) {
      this.managedBrowser = parameters.managedBrowser;
    }
    if (parameters.accessRecheckOfflineTimeout !== undefined) {
      this.accessRecheckOfflineTimeout = parameters.accessRecheckOfflineTimeout;
    }
    if (parameters.accessRecheckOnlineTimeout !== undefined) {
      this.accessRecheckOnlineTimeout = parameters.accessRecheckOnlineTimeout;
    }
    if (parameters.offlineWipeTimeout !== undefined) {
      this.offlineWipeTimeout = parameters.offlineWipeTimeout;
    }
    if (parameters.numOfApps !== undefined) {
      this.numOfApps = parameters.numOfApps;
    }
    if (parameters.groupStatus !== undefined) {
      this.groupStatus = parameters.groupStatus;
    }
    if (parameters.lastModifiedTime !== undefined) {
      this.lastModifiedTime = parameters.lastModifiedTime;
    }
  }    
}

util.inherits(AndroidMAMPolicy, models['Resource']);

/**
 * Validate the payload against the AndroidMAMPolicy schema
 *
 * @param {JSON} payload
 *
 */
AndroidMAMPolicy.prototype.serialize = function () {
  var payload = AndroidMAMPolicy['super_'].prototype.serialize.call(this);
  if (this['screenCapture'] !== null && this['screenCapture'] !== undefined) {
    if (typeof this['screenCapture'].valueOf() !== 'string') {
      throw new Error('this[\'screenCapture\'] must be of type string.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['screenCapture'] = this['screenCapture'];
  }

  if (this['fileEncryption'] !== null && this['fileEncryption'] !== undefined) {
    if (typeof this['fileEncryption'].valueOf() !== 'string') {
      throw new Error('this[\'fileEncryption\'] must be of type string.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['fileEncryption'] = this['fileEncryption'];
  }

  if (this['friendlyName'] === null || this['friendlyName'] === undefined || typeof this['friendlyName'].valueOf() !== 'string') {
    throw new Error('this[\'friendlyName\'] cannot be null or undefined and it must be of type string.');
  }
  if (payload['properties'] === null || payload['properties'] === undefined) {
    payload['properties'] = {};
  }
  payload['properties']['friendlyName'] = this['friendlyName'];

  if (this['description'] !== null && this['description'] !== undefined) {
    if (typeof this['description'].valueOf() !== 'string') {
      throw new Error('this[\'description\'] must be of type string.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['description'] = this['description'];
  }

  if (this['appSharingFromLevel'] !== null && this['appSharingFromLevel'] !== undefined) {
    if (typeof this['appSharingFromLevel'].valueOf() !== 'string') {
      throw new Error('this[\'appSharingFromLevel\'] must be of type string.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['appSharingFromLevel'] = this['appSharingFromLevel'];
  }

  if (this['appSharingToLevel'] !== null && this['appSharingToLevel'] !== undefined) {
    if (typeof this['appSharingToLevel'].valueOf() !== 'string') {
      throw new Error('this[\'appSharingToLevel\'] must be of type string.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['appSharingToLevel'] = this['appSharingToLevel'];
  }

  if (this['authentication'] !== null && this['authentication'] !== undefined) {
    if (typeof this['authentication'].valueOf() !== 'string') {
      throw new Error('this[\'authentication\'] must be of type string.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['authentication'] = this['authentication'];
  }

  if (this['clipboardSharingLevel'] !== null && this['clipboardSharingLevel'] !== undefined) {
    if (typeof this['clipboardSharingLevel'].valueOf() !== 'string') {
      throw new Error('this[\'clipboardSharingLevel\'] must be of type string.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['clipboardSharingLevel'] = this['clipboardSharingLevel'];
  }

  if (this['dataBackup'] !== null && this['dataBackup'] !== undefined) {
    if (typeof this['dataBackup'].valueOf() !== 'string') {
      throw new Error('this[\'dataBackup\'] must be of type string.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['dataBackup'] = this['dataBackup'];
  }

  if (this['fileSharingSaveAs'] !== null && this['fileSharingSaveAs'] !== undefined) {
    if (typeof this['fileSharingSaveAs'].valueOf() !== 'string') {
      throw new Error('this[\'fileSharingSaveAs\'] must be of type string.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['fileSharingSaveAs'] = this['fileSharingSaveAs'];
  }

  if (this['pin'] !== null && this['pin'] !== undefined) {
    if (typeof this['pin'].valueOf() !== 'string') {
      throw new Error('this[\'pin\'] must be of type string.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['pin'] = this['pin'];
  }

  if (this['pinNumRetry'] !== null && this['pinNumRetry'] !== undefined) {
    if (typeof this['pinNumRetry'] !== 'number') {
      throw new Error('this[\'pinNumRetry\'] must be of type number.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['pinNumRetry'] = this['pinNumRetry'];
  }

  if (this['deviceCompliance'] !== null && this['deviceCompliance'] !== undefined) {
    if (typeof this['deviceCompliance'].valueOf() !== 'string') {
      throw new Error('this[\'deviceCompliance\'] must be of type string.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['deviceCompliance'] = this['deviceCompliance'];
  }

  if (this['managedBrowser'] !== null && this['managedBrowser'] !== undefined) {
    if (typeof this['managedBrowser'].valueOf() !== 'string') {
      throw new Error('this[\'managedBrowser\'] must be of type string.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['managedBrowser'] = this['managedBrowser'];
  }

  if (this['accessRecheckOfflineTimeout']) {
    if (!moment.isDuration(this['accessRecheckOfflineTimeout'])) {
      throw new Error('this[\'accessRecheckOfflineTimeout\'] must be of type moment.duration.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['accessRecheckOfflineTimeout'] = this['accessRecheckOfflineTimeout'].toISOString();
  }

  if (this['accessRecheckOnlineTimeout']) {
    if (!moment.isDuration(this['accessRecheckOnlineTimeout'])) {
      throw new Error('this[\'accessRecheckOnlineTimeout\'] must be of type moment.duration.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['accessRecheckOnlineTimeout'] = this['accessRecheckOnlineTimeout'].toISOString();
  }

  if (this['offlineWipeTimeout']) {
    if (!moment.isDuration(this['offlineWipeTimeout'])) {
      throw new Error('this[\'offlineWipeTimeout\'] must be of type moment.duration.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['offlineWipeTimeout'] = this['offlineWipeTimeout'].toISOString();
  }

  if (this['numOfApps'] !== null && this['numOfApps'] !== undefined) {
    if (typeof this['numOfApps'] !== 'number') {
      throw new Error('this[\'numOfApps\'] must be of type number.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['numOfApps'] = this['numOfApps'];
  }

  if (this['groupStatus'] !== null && this['groupStatus'] !== undefined) {
    if (typeof this['groupStatus'].valueOf() !== 'string') {
      throw new Error('this[\'groupStatus\'] must be of type string.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['groupStatus'] = this['groupStatus'];
  }

  if (this['lastModifiedTime']) {
    if (!(this['lastModifiedTime'] instanceof Date || typeof this['lastModifiedTime'].valueOf() === 'string' && !isNaN(Date.parse(this['lastModifiedTime'])))) {
      throw new Error('this[\'lastModifiedTime\'] must be of type date.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['lastModifiedTime'] = (this['lastModifiedTime'] instanceof Date) ? this['lastModifiedTime'].toISOString() : this['lastModifiedTime'];
  }

  return payload;
};

/**
 * Deserialize the instance to AndroidMAMPolicy schema
 *
 * @param {JSON} instance
 *
 */
AndroidMAMPolicy.prototype.deserialize = function (instance) {
  AndroidMAMPolicy['super_'].prototype.deserialize.call(this, instance);
  if (instance) {
    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['screenCapture'] !== undefined) {
        this['screenCapture'] = instance['properties']['screenCapture'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['fileEncryption'] !== undefined) {
        this['fileEncryption'] = instance['properties']['fileEncryption'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['friendlyName'] !== undefined) {
        this['friendlyName'] = instance['properties']['friendlyName'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['description'] !== undefined) {
        this['description'] = instance['properties']['description'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['appSharingFromLevel'] !== undefined) {
        this['appSharingFromLevel'] = instance['properties']['appSharingFromLevel'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['appSharingToLevel'] !== undefined) {
        this['appSharingToLevel'] = instance['properties']['appSharingToLevel'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['authentication'] !== undefined) {
        this['authentication'] = instance['properties']['authentication'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['clipboardSharingLevel'] !== undefined) {
        this['clipboardSharingLevel'] = instance['properties']['clipboardSharingLevel'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['dataBackup'] !== undefined) {
        this['dataBackup'] = instance['properties']['dataBackup'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['fileSharingSaveAs'] !== undefined) {
        this['fileSharingSaveAs'] = instance['properties']['fileSharingSaveAs'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['pin'] !== undefined) {
        this['pin'] = instance['properties']['pin'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['pinNumRetry'] !== undefined) {
        this['pinNumRetry'] = instance['properties']['pinNumRetry'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['deviceCompliance'] !== undefined) {
        this['deviceCompliance'] = instance['properties']['deviceCompliance'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['managedBrowser'] !== undefined) {
        this['managedBrowser'] = instance['properties']['managedBrowser'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['accessRecheckOfflineTimeout']) {
        this['accessRecheckOfflineTimeout'] = moment.duration(instance['properties']['accessRecheckOfflineTimeout']);
      }
      else if (instance['properties']['accessRecheckOfflineTimeout'] !== undefined) {
        this['accessRecheckOfflineTimeout'] = instance['properties']['accessRecheckOfflineTimeout'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['accessRecheckOnlineTimeout']) {
        this['accessRecheckOnlineTimeout'] = moment.duration(instance['properties']['accessRecheckOnlineTimeout']);
      }
      else if (instance['properties']['accessRecheckOnlineTimeout'] !== undefined) {
        this['accessRecheckOnlineTimeout'] = instance['properties']['accessRecheckOnlineTimeout'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['offlineWipeTimeout']) {
        this['offlineWipeTimeout'] = moment.duration(instance['properties']['offlineWipeTimeout']);
      }
      else if (instance['properties']['offlineWipeTimeout'] !== undefined) {
        this['offlineWipeTimeout'] = instance['properties']['offlineWipeTimeout'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['numOfApps'] !== undefined) {
        this['numOfApps'] = instance['properties']['numOfApps'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['groupStatus'] !== undefined) {
        this['groupStatus'] = instance['properties']['groupStatus'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['lastModifiedTime']) {
        this['lastModifiedTime'] = new Date(instance['properties']['lastModifiedTime']);
      }
      else if (instance['properties']['lastModifiedTime'] !== undefined) {
        this['lastModifiedTime'] = instance['properties']['lastModifiedTime'];
      }
    }
  }

  return this;
};

module.exports = AndroidMAMPolicy;
