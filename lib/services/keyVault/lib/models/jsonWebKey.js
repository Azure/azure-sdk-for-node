/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var util = require('util');

/**
 * @class
 * Initializes a new instance of the JsonWebKey class.
 * @constructor
 * As of http://tools.ietf.org/html/draft-ietf-jose-json-web-key-18
 *
 * @member {string} [kid] Key Identifier
 * 
 * @member {string} [kty] Supported JsonWebKey key types (kty) for Elliptic
 * Curve, RSA, HSM, Octet, usually RSA. Possible values include: 'EC', 'RSA',
 * 'RSA-HSM', 'oct'
 * 
 * @member {array} [keyOps]
 * 
 * @member {buffer} [n] RSA modulus
 * 
 * @member {buffer} [e] RSA public exponent
 * 
 * @member {buffer} [d] RSA private exponent
 * 
 * @member {buffer} [dp] RSA Private Key Parameter
 * 
 * @member {buffer} [dq] RSA Private Key Parameter
 * 
 * @member {buffer} [qi] RSA Private Key Parameter
 * 
 * @member {buffer} [p] RSA secret prime
 * 
 * @member {buffer} [q] RSA secret prime, with p < q
 * 
 * @member {buffer} [k] Symmetric key
 * 
 * @member {buffer} [t] HSM Token, used with Bring Your Own Key
 * 
 */
function JsonWebKey() {
}

/**
 * Defines the metadata of JsonWebKey
 *
 * @returns {object} metadata of JsonWebKey
 *
 */
JsonWebKey.prototype.mapper = function () {
  return {
    required: false,
    serializedName: 'JsonWebKey',
    type: {
      name: 'Composite',
      className: 'JsonWebKey',
      modelProperties: {
        kid: {
          required: false,
          serializedName: 'kid',
          type: {
            name: 'String'
          }
        },
        kty: {
          required: false,
          serializedName: 'kty',
          type: {
            name: 'String'
          }
        },
        keyOps: {
          required: false,
          serializedName: 'key_ops',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'StringElementType',
                type: {
                  name: 'String'
                }
            }
          }
        },
        n: {
          required: false,
          serializedName: 'n',
          type: {
            name: 'Base64Url'
          }
        },
        e: {
          required: false,
          serializedName: 'e',
          type: {
            name: 'Base64Url'
          }
        },
        d: {
          required: false,
          serializedName: 'd',
          type: {
            name: 'Base64Url'
          }
        },
        dp: {
          required: false,
          serializedName: 'dp',
          type: {
            name: 'Base64Url'
          }
        },
        dq: {
          required: false,
          serializedName: 'dq',
          type: {
            name: 'Base64Url'
          }
        },
        qi: {
          required: false,
          serializedName: 'qi',
          type: {
            name: 'Base64Url'
          }
        },
        p: {
          required: false,
          serializedName: 'p',
          type: {
            name: 'Base64Url'
          }
        },
        q: {
          required: false,
          serializedName: 'q',
          type: {
            name: 'Base64Url'
          }
        },
        k: {
          required: false,
          serializedName: 'k',
          type: {
            name: 'Base64Url'
          }
        },
        t: {
          required: false,
          serializedName: 'key_hsm',
          type: {
            name: 'Base64Url'
          }
        }
      }
    }
  };
};

module.exports = JsonWebKey;
