/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

/**
 * @class
 * Initializes a new instance of the CertificateCreateParameters class.
 * @constructor
 * The certificate create parameters
 *
 * @member {object} [certificatePolicy] The management policy for the
 * certificate
 * 
 * @member {string} [certificatePolicy.id] The certificate id
 * 
 * @member {object} [certificatePolicy.keyProperties] Properties of the key
 * backing a certificate.
 * 
 * @member {boolean} [certificatePolicy.keyProperties.exportable] Indicates if
 * the private key can be exported.
 * 
 * @member {string} [certificatePolicy.keyProperties.keyType] The key type.
 * 
 * @member {number} [certificatePolicy.keyProperties.keySize] The key size in
 * bytes. e.g. 2048.
 * 
 * @member {boolean} [certificatePolicy.keyProperties.reuseKey] Indicates if
 * the same key pair will be used on certificate renewal.
 * 
 * @member {object} [certificatePolicy.secretProperties] Properties of the
 * secret backing a certificate.
 * 
 * @member {string} [certificatePolicy.secretProperties.contentType] The media
 * type (MIME type).
 * 
 * @member {object} [certificatePolicy.x509CertificateProperties] Properties of
 * the X509 component of a certificate.
 * 
 * @member {string} [certificatePolicy.x509CertificateProperties.subject] The
 * subject name. Should be a valid X509 Distinguished Name.
 * 
 * @member {array} [certificatePolicy.x509CertificateProperties.ekus] The
 * enhanced key usage.
 * 
 * @member {object}
 * [certificatePolicy.x509CertificateProperties.subjectAlternativeNames] The
 * subject alternative names.
 * 
 * @member {array}
 * [certificatePolicy.x509CertificateProperties.subjectAlternativeNames.emails]
 * Email addresses.
 * 
 * @member {array}
 * [certificatePolicy.x509CertificateProperties.subjectAlternativeNames.dnsNames]
 * Domain names.
 * 
 * @member {array}
 * [certificatePolicy.x509CertificateProperties.subjectAlternativeNames.upns]
 * User principal names.
 * 
 * @member {array} [certificatePolicy.x509CertificateProperties.keyUsage] List
 * of key usages.
 * 
 * @member {number}
 * [certificatePolicy.x509CertificateProperties.validityInMonths] The duration
 * that the ceritifcate is valid in months.
 * 
 * @member {array} [certificatePolicy.lifetimeActions] Actions that will be
 * performed by Key Vault over the lifetime of a certificate.
 * 
 * @member {object} [certificatePolicy.issuerParameters] Parameters for the
 * issuer of the X509 component of a certificate.
 * 
 * @member {string} [certificatePolicy.issuerParameters.name] Name of the
 * referenced issuer object or reserved names e.g. 'Self', 'Unknown'.
 * 
 * @member {string} [certificatePolicy.issuerParameters.certificateType] Type
 * of certificate to be requested from the issuer provider.
 * 
 * @member {object} [certificatePolicy.attributes] The certificate attributes.
 * 
 * @member {object} [certificateAttributes] The attributes of the certificate
 * (optional)
 * 
 * @member {object} [tags] Application-specific metadata in the form of
 * key-value pairs
 * 
 */
function CertificateCreateParameters() {
}

/**
 * Defines the metadata of CertificateCreateParameters
 *
 * @returns {object} metadata of CertificateCreateParameters
 *
 */
CertificateCreateParameters.prototype.mapper = function () {
  return {
    required: false,
    serializedName: 'CertificateCreateParameters',
    type: {
      name: 'Composite',
      className: 'CertificateCreateParameters',
      modelProperties: {
        certificatePolicy: {
          required: false,
          serializedName: 'policy',
          type: {
            name: 'Composite',
            className: 'CertificatePolicy'
          }
        },
        certificateAttributes: {
          required: false,
          serializedName: 'attributes',
          type: {
            name: 'Composite',
            className: 'CertificateAttributes'
          }
        },
        tags: {
          required: false,
          serializedName: 'tags',
          type: {
            name: 'Dictionary',
            value: {
                required: false,
                serializedName: 'StringElementType',
                type: {
                  name: 'String'
                }
            }
          }
        }
      }
    }
  };
};

module.exports = CertificateCreateParameters;
