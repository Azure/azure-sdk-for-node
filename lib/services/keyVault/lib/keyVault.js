/*
 * Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

/* jshint latedef:false */
/* jshint forin:false */
/* jshint noempty:false */

'use strict';

var util = require('util');
var msRest = require('ms-rest');
var msRestAzure = require('ms-rest-azure');

var ServiceClient = msRestAzure.AzureServiceClient;
var WebResource = msRest.WebResource;

var models = require('./models');
var jwk = require('./jwk');
var kvcreds = require('./keyVaultCredentials');
var objId = require('./objectIdentifier');

/** Identifier of the resource on which Key Vault users and service principals must authenticate.
 */
exports.RESOURCE_ID = 'https://vault.azure.net';

// The internal client is too low level, so we wrap it instead of exposing it directly.
var InternalClient = require('./keyVaultClient');

/**
 * @class
 * Initializes a new instance of the KeyVaultClient class.
 * @constructor
 *
 * @param {credentials} credentials - Credentials needed for the client to connect to Azure.
 *
 * @param {object} [options] - The parameter options
 *
 * @param {Array} [options.filters] - Filters to be added to the request pipeline
 *
 * @param {object} [options.requestOptions] - Options for the underlying request object
 * {@link https://github.com/request/request#requestoptions-callback Options doc}
 *
 * @param {boolean} [options.noRetryPolicy] - If set to true, turn off default retry policy
 *
 * @param {string} [options.apiVersion] - Client Api Version.
 *
 * @param {string} [options.acceptLanguage] - Gets or sets the preferred language for the response.
 *
 * @param {number} [options.longRunningOperationRetryTimeout] - Gets or sets the retry timeout in seconds for Long Running Operations. Default value is 30.
 *
 * @param {boolean} [options.generateClientRequestId] - When set to true a unique x-ms-client-request-id value is generated and included in each request. Default is true.
 *
 */
function KeyVaultClient(credentials, options) {

  if (credentials.createSigningFilter) {
    if(!options) options = [];
    if (!options.filters) options.filters = [];
    options.filters.push(credentials.createSigningFilter());
  }
  
  this._internalClient = new InternalClient(credentials, options);
}

/**
 * Creates a new {@linkcode KeyVaultClient} object.
 *
 * @param {object} [credentials]     The credentials, typically a {@linkcode KeyVaultCredentials} object. If null, an authentication filter must be provided.
 
 * @param {object} [options] - The parameter options
 *
 * @param {Array} [options.filters] - Filters to be added to the request pipeline
 *
 * @param {object} [options.requestOptions] - Options for the underlying request object
 * {@link https://github.com/request/request#requestoptions-callback Options doc}
 *
 * @param {boolean} [options.noRetryPolicy] - If set to true, turn off default retry policy
 *
 * @param {string} [options.apiVersion] - Client Api Version.
 *
 * @param {string} [options.acceptLanguage] - Gets or sets the preferred language for the response.
 *
 * @param {number} [options.longRunningOperationRetryTimeout] - Gets or sets the retry timeout in seconds for Long Running Operations. Default value is 30.
 *
 * @param {boolean} [options.generateClientRequestId] - When set to true a unique x-ms-client-request-id value is generated and included in each request. Default is true.
 *
 */
module.exports.createKeyVaultClient = function (credentials, options) {
  return new module.exports.KeyVaultClient(credentials, options);
};

/**
 * Creates a new, named, key in the specified vault.
 *
 * @param {string} vaultBaseUrl The vault name, e.g.
 * https://myvault.vault.azure.net
 * 
 * @param {string} keyName The name of the key
 * 
 * @param {string} kty The type of key to create. Valid key types, see
 * JsonWebKeyType. Possible values include: 'EC', 'RSA', 'RSA-HSM', 'oct'
 * 
 * @param {object} [options] Optional Parameters.
 * 
 * @param {number} [options.keySize] The key size in bytes. e.g. 1024 or 2048.
 * 
 * @param {array} [options.keyOps]
 * 
 * @param {object} [options.keyAttributes]
 * 
 * @param {boolean} [options.keyAttributes.enabled] Determines whether the
 * object is enabled
 * 
 * @param {date} [options.keyAttributes.notBefore] Not before date in UTC
 * 
 * @param {date} [options.keyAttributes.expires] Expiry date in UTC
 * 
 * @param {object} [options.tags] Application-specific metadata in the form of
 * key-value pairs
 * 
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 * 
 * @param {function} callback
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object.
 *                      See {@link KeyBundle} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
KeyVaultClient.prototype.createKey = function (vaultBaseUrl, keyName, keyType, options, callback) {
  return this._internalClient.createKey(vaultBaseUrl, keyName, keyType, options, callback);
};

/**
 * Imports a key into the specified vault
 *
 * @param {string} vaultBaseUrl The vault name, e.g.
 * https://myvault.vault.azure.net
 * 
 * @param {string} keyName The name of the key
 * 
 * @param {object} key The Json web key
 * 
 * @param {string} [key.kid] Key Identifier
 * 
 * @param {string} [key.kty] Key type, usually RSA. Possible values include:
 * 'EC', 'RSA', 'RSA-HSM', 'oct'
 * 
 * @param {array} [key.keyOps]
 * 
 * @param {buffer} [key.n] RSA modulus
 * 
 * @param {buffer} [key.e] RSA public exponent
 * 
 * @param {buffer} [key.d] RSA private exponent
 * 
 * @param {buffer} [key.dp] RSA Private Key Parameter
 * 
 * @param {buffer} [key.dq] RSA Private Key Parameter
 * 
 * @param {buffer} [key.qi] RSA Private Key Parameter
 * 
 * @param {buffer} [key.p] RSA secret prime
 * 
 * @param {buffer} [key.q] RSA secret prime, with p < q
 * 
 * @param {buffer} [key.k] Symmetric key
 * 
 * @param {buffer} [key.t] HSM Token, used with Bring Your Own Key
 * 
 * @param {object} [options] Optional Parameters.
 * 
 * @param {boolean} [options.hsm] Whether to import as a hardware key (HSM) or
 * software key
 * 
 * @param {object} [options.keyAttributes] The key management attributes
 * 
 * @param {boolean} [options.keyAttributes.enabled] Determines whether the
 * object is enabled
 * 
 * @param {date} [options.keyAttributes.notBefore] Not before date in UTC
 * 
 * @param {date} [options.keyAttributes.expires] Expiry date in UTC
 * 
 * @param {object} [options.tags] Application-specific metadata in the form of
 * key-value pairs
 * 
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 * 
 * @param {function} callback
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object.
 *                      See {@link KeyBundle} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
KeyVaultClient.prototype.importKey = function (vaultBaseUrl, keyName, key, options, callback) {
  return this._internalClient.importKey(vaultBaseUrl, keyName, key, options, callback);
};

/**
 * Deletes the specified key
 *
 * @param {string} vaultBaseUrl The vault name, e.g.
 * https://myvault.vault.azure.net
 * 
 * @param {string} keyName The name of the key
 * 
 * @param {object} [options] Optional Parameters.
 * 
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 * 
 * @param {function} callback
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object.
 *                      See {@link KeyBundle} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
KeyVaultClient.prototype.deleteKey = function (vaultBaseUrl, keyName, options, callback) {
  return this._internalClient.deleteKey(vaultBaseUrl, keyName, options, callback);
};

/**
 * Updates the Key Attributes associated with the specified key
 * 
 * @param {string} keyIdentifier The key identifier. It may or may not contain a version path. If a version is not provided, the latest key version is used.
 * 
 * @param {object} [options] Optional Parameters.
 * 
 * @param {array} [options.keyOps] Json web key operations. For more
 * information on possible key operations, see JsonWebKeyOperation.
 * 
 * @param {object} [options.keyAttributes]
 * 
 * @param {boolean} [options.keyAttributes.enabled] Determines whether the
 * object is enabled
 * 
 * @param {date} [options.keyAttributes.notBefore] Not before date in UTC
 * 
 * @param {date} [options.keyAttributes.expires] Expiry date in UTC
 * 
 * @param {object} [options.tags] Application-specific metadata in the form of
 * key-value pairs
 * 
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 * 
 * @param {function} callback
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object.
 *                      See {@link KeyBundle} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
KeyVaultClient.prototype.updateKey = function (keyIdentifier, options, callback) {
  var parsedId = objId.parseKeyIdentifier(keyIdentifier);
  var version = (parsedId.version === null) ? '' : parsedId.version;
  return this._internalClient.updateKey(parsedId.vault, parsedId.name, version, options, callback);
};

/**
 * Retrieves the public portion of a key plus its attributes
 *
 * @param {string} keyIdentifier The key identifier. It may or may not contain a version path. If a version is not provided, the latest key version is used.
 * 
 * @param {object} [options] Optional Parameters.
 * 
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 * 
 * @param {function} callback
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object.
 *                      See {@link KeyBundle} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
KeyVaultClient.prototype.getKey = function (keyIdentifier, options, callback) {
  var parsedId = objId.parseKeyIdentifier(keyIdentifier);
  var version = (parsedId.version === null) ? '' : parsedId.version;
  return this._internalClient.getKey(parsedId.vault, parsedId.name, version, options, callback);
};

/**
 * List the versions of the specified key
 *
 * @param {string} vaultBaseUrl The vault name, e.g.
 * https://myvault.vault.azure.net
 * 
 * @param {string} keyName The name of the key
 * 
 * @param {object} [options] Optional Parameters.
 *
 * @param {number} [options.maxresults] Maximum number of results to return in
 * a page. If not specified the service will return up to 25 results.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 * 
 * @param {function} callback
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object.
 *                      See {@link KeyListResult} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
KeyVaultClient.prototype.getKeyVersions = function (vaultBaseUrl, keyName, options, callback) {
  return this._internalClient.getKeyVersions(vaultBaseUrl, keyName, options, callback);
};

/**
 * List keys in the specified vault
 *
 * @param {string} vaultBaseUrl The vault name, e.g.
 * https://myvault.vault.azure.net
 * 
 * @param {object} [options] Optional Parameters.
 *
 * @param {number} [options.maxresults] Maximum number of results to return in
 * a page. If not specified the service will return up to 25 results.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 * 
 * @param {function} callback
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object.
 *                      See {@link KeyListResult} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
KeyVaultClient.prototype.getKeys = function (vaultBaseUrl, options, callback) {
  return this._internalClient.getKeys(vaultBaseUrl, options, callback);
};

/**
 * Requests that a backup of the specified key be downloaded to the client.
 *
 * @param {string} vaultBaseUrl The vault name, e.g.
 * https://myvault.vault.azure.net
 * 
 * @param {string} keyName The name of the key
 * 
 * @param {object} [options] Optional Parameters.
 * 
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 * 
 * @param {function} callback
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object.
 *                      See {@link BackupKeyResult} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
KeyVaultClient.prototype.backupKey = function (vaultBaseUrl, keyName, options, callback) {
  return this._internalClient.backupKey(vaultBaseUrl, keyName, options, callback);
};

/**
 * Restores the backup key in to a vault
 *
 * @param {string} vaultBaseUrl The vault name, e.g.
 * https://myvault.vault.azure.net
 * 
 * @param {buffer} keyBundleBackup the backup blob associated with a key bundle
 * 
 * @param {object} [options] Optional Parameters.
 * 
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 * 
 * @param {function} callback
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object.
 *                      See {@link KeyBundle} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
KeyVaultClient.prototype.restoreKey = function (vaultBaseUrl, keyBundleBackup, options, callback) {
  return this._internalClient.restoreKey(vaultBaseUrl, keyBundleBackup, options, callback);
};

/**
 * Encrypts an arbitrary sequence of bytes using an encryption key that is
 * stored in Azure Key Vault.
 *
 * @param {string} keyIdentifier The key identifier. It may or may not contain a version path. If a version is not provided, the latest key version is used.
 * 
 * @param {string} algorithm algorithm identifier. Possible values include:
 * 'RSA-OAEP', 'RSA1_5'
 * 
 * @param {buffer} value
 * 
 * @param {object} [options] Optional Parameters.
 * 
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 * 
 * @param {function} callback
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object.
 *                      See {@link KeyOperationResult} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
KeyVaultClient.prototype.encrypt = function (keyIdentifier, algorithm, value, options, callback) {
  var parsedId = objId.parseKeyIdentifier(keyIdentifier);
  var version = (parsedId.version === null) ? '' : parsedId.version;
  return this._internalClient.encrypt(parsedId.vault, parsedId.name, version, algorithm, value, options, callback);
};

/**
 * Decrypts a single block of encrypted data
 *
 * @param {string} keyIdentifier The key identifier. It may or may not contain a version path. If a version is not provided, the latest key version is used.
 * 
 * @param {string} algorithm algorithm identifier. Possible values include:
 * 'RSA-OAEP', 'RSA1_5'
 * 
 * @param {buffer} value
 * 
 * @param {object} [options] Optional Parameters.
 * 
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 * 
 * @param {function} callback
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object.
 *                      See {@link KeyOperationResult} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
KeyVaultClient.prototype.decrypt = function (keyIdentifier, algorithm, value, options, callback) {
  var parsedId = objId.parseKeyIdentifier(keyIdentifier);
  var version = (parsedId.version === null) ? '' : parsedId.version;
  return this._internalClient.decrypt(parsedId.vault, parsedId.name, version, algorithm, value, options, callback);
};

/**
 * Creates a signature from a digest using the specified key in the vault
 *
 * @param {string} keyIdentifier The key identifier. It may or may not contain a version path. If a version is not provided, the latest key version is used.
 *  
 * @param {string} algorithm algorithm identifier
 * @param {string} algorithm The signing/verification algorithm identifier.
 * For more information on possible algorithm types, see
 * JsonWebKeySignatureAlgorithm. Possible values include: 'RS256', 'RS384',
 * 'RS512', 'RSNULL'
 * 
 * @param {buffer} value
 * 
 * @param {object} [options] Optional Parameters.
 * 
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 * 
 * @param {function} callback
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object.
 *                      See {@link KeyOperationResult} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
KeyVaultClient.prototype.sign = function (keyIdentifier, algorithm, value, options, callback) {
  var parsedId = objId.parseKeyIdentifier(keyIdentifier);
  var version = (parsedId.version === null) ? '' : parsedId.version;
  return this._internalClient.sign(parsedId.vault, parsedId.name, version, algorithm, value, options, callback);
};

/**
 * Verifies a signature using the specified key
 *
 * @param {string} keyIdentifier The key identifier. It may or may not contain a version path. If a version is not provided, the latest key version is used.
 * 
 * @param {string} algorithm The signing/verification algorithm. For more
 * information on possible algorithm types, see JsonWebKeySignatureAlgorithm.
 * Possible values include: 'RS256', 'RS384', 'RS512', 'RSNULL'
 * 
 * @param {buffer} digest The digest used for signing
 * 
 * @param {buffer} signature The signature to be verified
 * 
 * @param {object} [options] Optional Parameters.
 * 
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 * 
 * @param {function} callback
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object.
 *                      See {@link KeyVerifyResult} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
KeyVaultClient.prototype.verify = function (keyIdentifier, algorithm, digest, signature, options, callback) {
  var parsedId = objId.parseKeyIdentifier(keyIdentifier);
  var version = (parsedId.version === null) ? '' : parsedId.version;
  return this._internalClient.verify(parsedId.vault, parsedId.name, version, algorithm, digest, signature, options, callback);
};

/**
 * Wraps a symmetric key using the specified key
 *
 * @param {string} keyIdentifier The key identifier. It may or may not contain a version path. If a version is not provided, the latest key version is used.
 *  
 * @param {string} algorithm algorithm identifier. Possible values include:
 * 'RSA-OAEP', 'RSA1_5'
 * 
 * @param {buffer} value
 * 
 * @param {object} [options] Optional Parameters.
 * 
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 * 
 * @param {function} callback
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object.
 *                      See {@link KeyOperationResult} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
KeyVaultClient.prototype.wrapKey = function (keyIdentifier, algorithm, value, options, callback) {
  var parsedId = objId.parseKeyIdentifier(keyIdentifier);
  var version = (parsedId.version === null) ? '' : parsedId.version;
  return this._internalClient.wrapKey(parsedId.vault, parsedId.name, version, algorithm, value, options, callback);
};

/**
 * Unwraps a symmetric key using the specified key in the vault that has
 * initially been used for wrapping the key.
 *
 * @param {string} keyIdentifier The key identifier. It may or may not contain a version path. If a version is not provided, the latest key version is used.
 *  
 * @param {string} algorithm algorithm identifier. Possible values include:
 * 'RSA-OAEP', 'RSA1_5'
 * 
 * @param {buffer} value
 * 
 * @param {object} [options] Optional Parameters.
 * 
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 * 
 * @param {function} callback
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object.
 *                      See {@link KeyOperationResult} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
KeyVaultClient.prototype.unwrapKey = function (keyIdentifier, algorithm, value, options, callback) {
  var parsedId = objId.parseKeyIdentifier(keyIdentifier);
  var version = (parsedId.version === null) ? '' : parsedId.version;
  return this._internalClient.unwrapKey(parsedId.vault, parsedId.name, version, algorithm, value, options, callback);
};

/**
 * Sets a secret in the specified vault.
 *
 * @param {string} vaultBaseUrl The vault name, e.g.
 * https://myvault.vault.azure.net
 * 
 * @param {string} secretName The name of the secret in the given vault
 * 
 * @param {string} value The value of the secret
 * 
 * @param {object} [options] Optional Parameters.
 * 
 * @param {object} [options.tags] Application-specific metadata in the form of
 * key-value pairs
 * 
 * @param {string} [options.contentType] Type of the secret value such as a
 * password
 * 
 * @param {object} [options.secretAttributes] The secret management attributes
 * 
 * @param {boolean} [options.secretAttributes.enabled] Determines whether the
 * object is enabled
 * 
 * @param {date} [options.secretAttributes.notBefore] Not before date in UTC
 * 
 * @param {date} [options.secretAttributes.expires] Expiry date in UTC
 * 
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 * 
 * @param {function} callback
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object.
 *                      See {@link SecretBundle} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
KeyVaultClient.prototype.setSecret = function (vaultBaseUrl, secretName, value, options, callback) {
  return this._internalClient.setSecret(vaultBaseUrl, secretName, value, options, callback);
};

/**
 * Deletes a secret from the specified vault.
 *
 * @param {string} vaultBaseUrl The vault name, e.g.
 * https://myvault.vault.azure.net
 * 
 * @param {string} secretName The name of the secret in the given vault
 * 
 * @param {object} [options] Optional Parameters.
 * 
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 * 
 * @param {function} callback
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object.
 *                      See {@link SecretBundle} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
KeyVaultClient.prototype.deleteSecret = function (vaultBaseUrl, secretName, options, callback) {
  return this._internalClient.deleteSecret(vaultBaseUrl, secretName, options, callback);
};

/**
 * Updates the attributes associated with the specified secret
 *
 * @param {string} secretIdentifier The secret identifier. It may or may not contain a version path. If a version is not provided, the latest secret version is used.
 * 
 * @param {object} [options] Optional Parameters.
 * 
 * @param {string} [options.contentType] Type of the secret value such as a
 * password
 * 
 * @param {object} [options.secretAttributes] The secret management attributes
 * 
 * @param {boolean} [options.secretAttributes.enabled] Determines whether the
 * object is enabled
 * 
 * @param {date} [options.secretAttributes.notBefore] Not before date in UTC
 * 
 * @param {date} [options.secretAttributes.expires] Expiry date in UTC
 * 
 * @param {object} [options.tags] Application-specific metadata in the form of
 * key-value pairs
 * 
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 * 
 * @param {function} callback
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object.
 *                      See {@link SecretBundle} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
KeyVaultClient.prototype.updateSecret = function (secretIdentifier, options, callback) {
  var parsedId = objId.parseSecretIdentifier(secretIdentifier);
  var version = (parsedId.version === null) ? '' : parsedId.version;
  return this._internalClient.updateSecret(parsedId.vault, parsedId.name, version, options, callback);
};

/**
 * Gets a secret.
 *
 * @param {string} secretIdentifier The secret identifier. It may or may not contain a version path. If a version is not provided, the latest secret version is used.
 * 
 * @param {object} [options] Optional Parameters.
 * 
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 * 
 * @param {function} callback
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object.
 *                      See {@link SecretBundle} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
KeyVaultClient.prototype.getSecret = function (secretIdentifier, options, callback) {
  var parsedId = objId.parseSecretIdentifier(secretIdentifier);
  var version = (parsedId.version === null) ? '' : parsedId.version;
  return this._internalClient.getSecret(parsedId.vault, parsedId.name, version, options, callback);
};

/**
 * List secrets in the specified vault
 *
 * @param {string} vaultBaseUrl The vault name, e.g.
 * https://myvault.vault.azure.net
 * 
 * @param {object} [options] Optional Parameters.
 *
 * @param {number} [options.maxresults] Maximum number of results to return in
 * a page. If not specified the service will return up to 25 results.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 * 
 * @param {function} callback
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object.
 *                      See {@link SecretListResult} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
KeyVaultClient.prototype.getSecrets = function (vaultBaseUrl, options, callback) {
  return this._internalClient.getSecrets(vaultBaseUrl, options, callback);
};

/**
 * List the versions of the specified secret
 *
 * @param {string} vaultBaseUrl The vault name, e.g.
 * https://myvault.vault.azure.net
 * 
 * @param {string} secretName The name of the secret in the given vault
 * 
 * @param {object} [options] Optional Parameters.
 *
 * @param {number} [options.maxresults] Maximum number of results to return in
 * a page. If not specified the service will return up to 25 results.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 * 
 * @param {function} callback
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object.
 *                      See {@link SecretListResult} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
KeyVaultClient.prototype.getSecretVersions = function (vaultBaseUrl, secretName, options, callback) {
  return this._internalClient.getSecretVersions(vaultBaseUrl, secretName, options, callback);
};

/**
 * List certificates in the specified vault
 *
 * @param {string} vaultBaseUrl The vault name, e.g.
 * https://myvault.vault.azure.net
 * 
 * @param {object} [options] Optional Parameters.
 *
 * @param {number} [options.maxresults] Maximum number of results to return in
 * a page. If not specified the service will return up to 25 results.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 * 
 * @param {function} callback
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object.
 *                      See {@link CertificateListResult} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
KeyVaultClient.prototype.getCertificates = function (vaultBaseUrl, options, callback) {
  return this._internalClient.getCertificates(vaultBaseUrl, options, callback);
};

/**
 * Deletes a certificate from the specified vault.
 *
 * @param {string} vaultBaseUrl The vault name, e.g.
 * https://myvault.vault.azure.net
 * 
 * @param {string} certificateName The name of the certificate in the given
 * vault
 * 
 * @param {object} [options] Optional Parameters.
 * 
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 * 
 * @param {function} callback
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object.
 *                      See {@link CertificateBundle} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
KeyVaultClient.prototype.deleteCertificate = function (vaultBaseUrl, certificateName, options, callback) {
  return this._internalClient.deleteCertificate(vaultBaseUrl, certificateName, options, callback);
};

/**
 * Sets the certificate contacts for the specified vault.
 *
 * @param {string} vaultBaseUrl The vault name, e.g.
 * https://myvault.vault.azure.net
 * 
 * @param {object} contacts The contacts for the vault certificates.
 * 
 * @param {array} [contacts.contactList] The contact list for the vault
 * certificates.
 * 
 * @param {object} [options] Optional Parameters.
 * 
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 * 
 * @param {function} callback
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object.
 *                      See {@link Contacts} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
KeyVaultClient.prototype.setCertificateContacts = function (vaultBaseUrl, contacts, options, callback) {
  return this._internalClient.setCertificateContacts(vaultBaseUrl, contacts, options, callback);
};

/**
 * Gets the certificate contacts for the specified vault.
 *
 * @param {string} vaultBaseUrl The vault name, e.g.
 * https://myvault.vault.azure.net
 * 
 * @param {object} [options] Optional Parameters.
 * 
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 * 
 * @param {function} callback
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object.
 *                      See {@link Contacts} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
KeyVaultClient.prototype.getCertificateContacts = function (vaultBaseUrl, options, callback) {
  return this._internalClient.getCertificateContacts(vaultBaseUrl, options, callback);
};

/**
 * Deletes the certificate contacts for the specified vault.
 *
 * @param {string} vaultBaseUrl The vault name, e.g.
 * https://myvault.vault.azure.net
 * 
 * @param {object} [options] Optional Parameters.
 * 
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 * 
 * @param {function} callback
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object.
 *                      See {@link Contacts} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
KeyVaultClient.prototype.deleteCertificateContacts = function (vaultBaseUrl, options, callback) {
  return this._internalClient.deleteCertificateContacts(vaultBaseUrl, options, callback);
};

/**
 * List certificate issuers for the specified vault.
 *
 * @param {string} vaultBaseUrl The vault name, e.g.
 * https://myvault.vault.azure.net
 * 
 * @param {object} [options] Optional Parameters.
 *
 * @param {number} [options.maxresults] Maximum number of results to return in
 * a page. If not specified the service will return up to 25 results.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 * 
 * @param {function} callback
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object.
 *                      See {@link CertificateIssuerListResult} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
KeyVaultClient.prototype.getCertificateIssuers = function (vaultBaseUrl, options, callback) {
  return this._internalClient.getCertificateIssuers(vaultBaseUrl, options, callback);
};

/**
 * Sets the specified certificate issuer.
 *
 * @param {string} vaultBaseUrl The vault name, e.g.
 * https://myvault.vault.azure.net
 * 
 * @param {string} issuerName The name of the issuer.
 * 
 * @param {string} provider The issuer provider.
 * 
 * @param {object} [options] Optional Parameters.
 * 
 * @param {object} [options.credentials] The credentials to be used for the
 * issuer.
 * 
 * @param {string} [options.credentials.accountId] The user name/account
 * name/account id.
 * 
 * @param {string} [options.credentials.password] The password/secret/account
 * key.
 * 
 * @param {object} [options.organizationDetails] Details of the organization
 * as provided to the issuer.
 * 
 * @param {string} [options.organizationDetails.id] Id of the organization.
 * 
 * @param {array} [options.organizationDetails.adminDetails] Details of the
 * organization administrator.
 * 
 * @param {object} [options.attributes] Attributes of the issuer object.
 * 
 * @param {boolean} [options.attributes.enabled] Determines whether the issuer
 * is enabled
 * 
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 * 
 * @param {function} callback
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object.
 *                      See {@link IssuerBundle} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
KeyVaultClient.prototype.setCertificateIssuer = function (vaultBaseUrl, issuerName, provider, options, callback) {
  return this._internalClient.setCertificateIssuer(vaultBaseUrl, issuerName, provider, options, callback);
};

/**
 * Updates the specified certificate issuer.
 *
 * @param {string} vaultBaseUrl The vault name, e.g.
 * https://myvault.vault.azure.net
 * 
 * @param {string} issuerName The name of the issuer.
 * 
 * @param {object} [options] Optional Parameters.
 * 
 * @param {string} [options.provider] The issuer provider.
 * 
 * @param {object} [options.credentials] The credentials to be used for the
 * issuer.
 * 
 * @param {string} [options.credentials.accountId] The user name/account
 * name/account id.
 * 
 * @param {string} [options.credentials.password] The password/secret/account
 * key.
 * 
 * @param {object} [options.organizationDetails] Details of the organization
 * as provided to the issuer.
 * 
 * @param {string} [options.organizationDetails.id] Id of the organization.
 * 
 * @param {array} [options.organizationDetails.adminDetails] Details of the
 * organization administrator.
 * 
 * @param {object} [options.attributes] Attributes of the issuer object.
 * 
 * @param {boolean} [options.attributes.enabled] Determines whether the issuer
 * is enabled
 * 
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 * 
 * @param {function} callback
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object.
 *                      See {@link IssuerBundle} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
KeyVaultClient.prototype.updateCertificateIssuer = function (vaultBaseUrl, issuerName, options, callback) {
  return this._internalClient.updateCertificateIssuer(vaultBaseUrl, issuerName, options, callback);
};

/**
 * Gets the specified certificate issuer.
 *
 * @param {string} vaultBaseUrl The vault name, e.g.
 * https://myvault.vault.azure.net
 * 
 * @param {string} issuerName The name of the issuer.
 * 
 * @param {object} [options] Optional Parameters.
 * 
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 * 
 * @param {function} callback
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object.
 *                      See {@link IssuerBundle} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
KeyVaultClient.prototype.getCertificateIssuer = function (vaultBaseUrl, issuerName, options, callback) {
  return this._internalClient.getCertificateIssuer(vaultBaseUrl, issuerName, options, callback);
};

/**
 * Deletes the specified certificate issuer.
 *
 * @param {string} vaultBaseUrl The vault name, e.g.
 * https://myvault.vault.azure.net
 * 
 * @param {string} issuerName The name of the issuer.
 * 
 * @param {object} [options] Optional Parameters.
 * 
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 * 
 * @param {function} callback
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object.
 *                      See {@link IssuerBundle} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
KeyVaultClient.prototype.deleteCertificateIssuer = function (vaultBaseUrl, issuerName, options, callback) {
  return this._internalClient.deleteCertificateIssuer(vaultBaseUrl, issuerName, options, callback);
};

/**
 * Creates a new certificate version. If this is the first version, the
 * certificate resource is created.
 *
 * @param {string} vaultBaseUrl The vault name, e.g.
 * https://myvault.vault.azure.net
 * 
 * @param {string} certificateName The name of the certificate
 * 
 * @param {object} [options] Optional Parameters.
 * 
 * @param {object} [options.certificatePolicy] The management policy for the
 * certificate
 * 
 * @param {object} [options.certificatePolicy.keyProperties] Properties of the
 * key backing a certificate.
 * 
 * @param {boolean} [options.certificatePolicy.keyProperties.exportable]
 * Indicates if the private key can be exported.
 * 
 * @param {string} [options.certificatePolicy.keyProperties.keyType] The key
 * type.
 * 
 * @param {number} [options.certificatePolicy.keyProperties.keySize] The key
 * size in bytes. e.g. 2048.
 * 
 * @param {boolean} [options.certificatePolicy.keyProperties.reuseKey]
 * Indicates if the same key pair will be used on certificate renewal.
 * 
 * @param {object} [options.certificatePolicy.secretProperties] Properties of
 * the secret backing a certificate.
 * 
 * @param {string} [options.certificatePolicy.secretProperties.contentType]
 * The media type (MIME type).
 * 
 * @param {object} [options.certificatePolicy.x509CertificateProperties]
 * Properties of the X509 component of a certificate.
 * 
 * @param {string}
 * [options.certificatePolicy.x509CertificateProperties.subject] The subject
 * name. Should be a valid X509 Distinguished Name.
 * 
 * @param {array} [options.certificatePolicy.x509CertificateProperties.ekus]
 * The enhanced key usage.
 * 
 * @param {object}
 * [options.certificatePolicy.x509CertificateProperties.subjectAlternativeNames]
 * The subject alternative names.
 * 
 * @param {array}
 * [options.certificatePolicy.x509CertificateProperties.subjectAlternativeNames.emails]
 * Email addresses.
 * 
 * @param {array}
 * [options.certificatePolicy.x509CertificateProperties.subjectAlternativeNames.dnsNames]
 * Domain names.
 * 
 * @param {array}
 * [options.certificatePolicy.x509CertificateProperties.subjectAlternativeNames.upns]
 * User principal names.
 * 
 * @param {array}
 * [options.certificatePolicy.x509CertificateProperties.keyUsage] List of key
 * usages.
 * 
 * @param {number}
 * [options.certificatePolicy.x509CertificateProperties.validityInMonths] The
 * duration that the ceritifcate is valid in months.
 * 
 * @param {array} [options.certificatePolicy.lifetimeActions] Actions that
 * will be performed by Key Vault over the lifetime of a certificate.
 * 
 * @param {object} [options.certificatePolicy.issuerParameters] Parameters for
 * the issuer of the X509 component of a certificate.
 * 
 * @param {string} [options.certificatePolicy.issuerParameters.name] Name of
 * the referenced issuer object or reserved names e.g. 'Self', 'Unknown'.
 * 
 * @param {string}
 * [options.certificatePolicy.issuerParameters.certificateType] Type of
 * certificate to be requested from the issuer provider.
 * 
 * @param {object} [options.certificatePolicy.attributes] The certificate
 * attributes.
 * 
 * @param {object} [options.certificateAttributes] The attributes of the
 * certificate (optional)
 * 
 * @param {boolean} [options.certificateAttributes.enabled] Determines whether
 * the object is enabled
 * 
 * @param {date} [options.certificateAttributes.notBefore] Not before date in
 * UTC
 * 
 * @param {date} [options.certificateAttributes.expires] Expiry date in UTC
 * 
 * @param {object} [options.tags] Application-specific metadata in the form of
 * key-value pairs
 * 
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 * 
 * @param {function} callback
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object.
 *                      See {@link CertificateOperation} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
KeyVaultClient.prototype.createCertificate = function (vaultBaseUrl, certificateName, options, callback) {
  return this._internalClient.createCertificate(vaultBaseUrl, certificateName, options, callback);
};

/**
 * Imports a certificate into the specified vault
 *
 * @param {string} vaultBaseUrl The vault name, e.g.
 * https://myvault.vault.azure.net
 * 
 * @param {string} certificateName The name of the certificate
 * 
 * @param {string} base64EncodedCertificate Base64 encoded representation of
 * the certificate object to import. This certificate needs to contain the
 * private key.
 * 
 * @param {object} [options] Optional Parameters.
 * 
 * @param {string} [options.password] If the private key in
 * base64EncodedCertificate is encrypted, the password used for encryption
 * 
 * @param {object} [options.certificatePolicy] The management policy for the
 * certificate
 * 
 * @param {object} [options.certificatePolicy.keyProperties] Properties of the
 * key backing a certificate.
 * 
 * @param {boolean} [options.certificatePolicy.keyProperties.exportable]
 * Indicates if the private key can be exported.
 * 
 * @param {string} [options.certificatePolicy.keyProperties.keyType] The key
 * type.
 * 
 * @param {number} [options.certificatePolicy.keyProperties.keySize] The key
 * size in bytes. e.g. 2048.
 * 
 * @param {boolean} [options.certificatePolicy.keyProperties.reuseKey]
 * Indicates if the same key pair will be used on certificate renewal.
 * 
 * @param {object} [options.certificatePolicy.secretProperties] Properties of
 * the secret backing a certificate.
 * 
 * @param {string} [options.certificatePolicy.secretProperties.contentType]
 * The media type (MIME type).
 * 
 * @param {object} [options.certificatePolicy.x509CertificateProperties]
 * Properties of the X509 component of a certificate.
 * 
 * @param {string}
 * [options.certificatePolicy.x509CertificateProperties.subject] The subject
 * name. Should be a valid X509 Distinguished Name.
 * 
 * @param {array} [options.certificatePolicy.x509CertificateProperties.ekus]
 * The enhanced key usage.
 * 
 * @param {object}
 * [options.certificatePolicy.x509CertificateProperties.subjectAlternativeNames]
 * The subject alternative names.
 * 
 * @param {array}
 * [options.certificatePolicy.x509CertificateProperties.subjectAlternativeNames.emails]
 * Email addresses.
 * 
 * @param {array}
 * [options.certificatePolicy.x509CertificateProperties.subjectAlternativeNames.dnsNames]
 * Domain names.
 * 
 * @param {array}
 * [options.certificatePolicy.x509CertificateProperties.subjectAlternativeNames.upns]
 * User principal names.
 * 
 * @param {array}
 * [options.certificatePolicy.x509CertificateProperties.keyUsage] List of key
 * usages.
 * 
 * @param {number}
 * [options.certificatePolicy.x509CertificateProperties.validityInMonths] The
 * duration that the ceritifcate is valid in months.
 * 
 * @param {array} [options.certificatePolicy.lifetimeActions] Actions that
 * will be performed by Key Vault over the lifetime of a certificate.
 * 
 * @param {object} [options.certificatePolicy.issuerParameters] Parameters for
 * the issuer of the X509 component of a certificate.
 * 
 * @param {string} [options.certificatePolicy.issuerParameters.name] Name of
 * the referenced issuer object or reserved names e.g. 'Self', 'Unknown'.
 * 
 * @param {string}
 * [options.certificatePolicy.issuerParameters.certificateType] Type of
 * certificate to be requested from the issuer provider.
 * 
 * @param {object} [options.certificatePolicy.attributes] The certificate
 * attributes.
 * 
 * @param {object} [options.certificateAttributes] The attributes of the
 * certificate (optional)
 * 
 * @param {boolean} [options.certificateAttributes.enabled] Determines whether
 * the object is enabled
 * 
 * @param {date} [options.certificateAttributes.notBefore] Not before date in
 * UTC
 * 
 * @param {date} [options.certificateAttributes.expires] Expiry date in UTC
 * 
 * @param {object} [options.tags] Application-specific metadata in the form of
 * key-value pairs
 * 
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 * 
 * @param {function} callback
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object.
 *                      See {@link CertificateBundle} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
KeyVaultClient.prototype.importCertificate = function (vaultBaseUrl, certificateName, base64EncodedCertificate, options, callback) {
  return this._internalClient.importCertificate(vaultBaseUrl, certificateName, base64EncodedCertificate, options, callback);
};

/**
 * List the versions of a certificate.
 *
 * @param {string} vaultBaseUrl The vault name, e.g.
 * https://myvault.vault.azure.net
 * 
 * @param {string} certificateName The name of the certificate
 * 
 * @param {object} [options] Optional Parameters.
 *
 * @param {number} [options.maxresults] Maximum number of results to return in
 * a page. If not specified the service will return up to 25 results.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 * 
 * @param {function} callback
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object.
 *                      See {@link CertificateListResult} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
KeyVaultClient.prototype.getCertificateVersions = function (vaultBaseUrl, certificateName, options, callback) {
  return this._internalClient.getCertificateVersions(vaultBaseUrl, certificateName, options, callback);
};

/**
 * Gets the policy for a certificate.
 *
 * @param {string} vaultBaseUrl The vault name, e.g.
 * https://myvault.vault.azure.net
 * 
 * @param {string} certificateName The name of the certificate in the given
 * vault.
 * 
 * @param {object} [options] Optional Parameters.
 * 
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 * 
 * @param {function} callback
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object.
 *                      See {@link CertificatePolicy} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
KeyVaultClient.prototype.getCertificatePolicy = function (vaultBaseUrl, certificateName, options, callback) {
  return this._internalClient.getCertificatePolicy(vaultBaseUrl, certificateName, options, callback);
};

/**
 * Updates the policy for a certificate. Set appropriate members in the
 * certificatePolicy that must be updated. Leave others as null.
 *
 * @param {string} vaultBaseUrl The vault name, e.g.
 * https://myvault.vault.azure.net
 * 
 * @param {string} certificateName The name of the certificate in the given
 * vault.
 * 
 * @param {object} certificatePolicy The policy for the certificate.
 * 
 * @param {object} [certificatePolicy.keyProperties] Properties of the key
 * backing a certificate.
 * 
 * @param {boolean} [certificatePolicy.keyProperties.exportable] Indicates if
 * the private key can be exported.
 * 
 * @param {string} [certificatePolicy.keyProperties.keyType] The key type.
 * 
 * @param {number} [certificatePolicy.keyProperties.keySize] The key size in
 * bytes. e.g. 2048.
 * 
 * @param {boolean} [certificatePolicy.keyProperties.reuseKey] Indicates if
 * the same key pair will be used on certificate renewal.
 * 
 * @param {object} [certificatePolicy.secretProperties] Properties of the
 * secret backing a certificate.
 * 
 * @param {string} [certificatePolicy.secretProperties.contentType] The media
 * type (MIME type).
 * 
 * @param {object} [certificatePolicy.x509CertificateProperties] Properties of
 * the X509 component of a certificate.
 * 
 * @param {string} [certificatePolicy.x509CertificateProperties.subject] The
 * subject name. Should be a valid X509 Distinguished Name.
 * 
 * @param {array} [certificatePolicy.x509CertificateProperties.ekus] The
 * enhanced key usage.
 * 
 * @param {object}
 * [certificatePolicy.x509CertificateProperties.subjectAlternativeNames] The
 * subject alternative names.
 * 
 * @param {array}
 * [certificatePolicy.x509CertificateProperties.subjectAlternativeNames.emails]
 * Email addresses.
 * 
 * @param {array}
 * [certificatePolicy.x509CertificateProperties.subjectAlternativeNames.dnsNames]
 * Domain names.
 * 
 * @param {array}
 * [certificatePolicy.x509CertificateProperties.subjectAlternativeNames.upns]
 * User principal names.
 * 
 * @param {array} [certificatePolicy.x509CertificateProperties.keyUsage] List
 * of key usages.
 * 
 * @param {number}
 * [certificatePolicy.x509CertificateProperties.validityInMonths] The
 * duration that the ceritifcate is valid in months.
 * 
 * @param {array} [certificatePolicy.lifetimeActions] Actions that will be
 * performed by Key Vault over the lifetime of a certificate.
 * 
 * @param {object} [certificatePolicy.issuerParameters] Parameters for the
 * issuer of the X509 component of a certificate.
 * 
 * @param {string} [certificatePolicy.issuerParameters.name] Name of the
 * referenced issuer object or reserved names e.g. 'Self', 'Unknown'.
 * 
 * @param {string} [certificatePolicy.issuerParameters.certificateType] Type
 * of certificate to be requested from the issuer provider.
 * 
 * @param {object} [certificatePolicy.attributes] The certificate attributes.
 * 
 * @param {boolean} [certificatePolicy.attributes.enabled] Determines whether
 * the object is enabled
 * 
 * @param {date} [certificatePolicy.attributes.notBefore] Not before date in
 * UTC
 * 
 * @param {date} [certificatePolicy.attributes.expires] Expiry date in UTC
 * 
 * @param {object} [options] Optional Parameters.
 * 
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 * 
 * @param {function} callback
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object.
 *                      See {@link CertificatePolicy} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
KeyVaultClient.prototype.updateCertificatePolicy = function (vaultBaseUrl, certificateName, certificatePolicy, options, callback) {
  return this._internalClient.updateCertificatePolicy(vaultBaseUrl, certificateName, certificatePolicy, options, callback);
};

/**
 * Updates the attributes associated with the specified certificate
 *
 * @param {string} vaultBaseUrl The vault name, e.g.
 * https://myvault.vault.azure.net
 * 
 * @param {string} certificateName The name of the certificate in the given
 * vault
 * 
 * @param {string} certificateVersion The version of the certificate
 * 
 * @param {object} [options] Optional Parameters.
 * 
 * @param {object} [options.certificatePolicy] The management policy for the
 * certificate
 * 
 * @param {object} [options.certificatePolicy.keyProperties] Properties of the
 * key backing a certificate.
 * 
 * @param {boolean} [options.certificatePolicy.keyProperties.exportable]
 * Indicates if the private key can be exported.
 * 
 * @param {string} [options.certificatePolicy.keyProperties.keyType] The key
 * type.
 * 
 * @param {number} [options.certificatePolicy.keyProperties.keySize] The key
 * size in bytes. e.g. 2048.
 * 
 * @param {boolean} [options.certificatePolicy.keyProperties.reuseKey]
 * Indicates if the same key pair will be used on certificate renewal.
 * 
 * @param {object} [options.certificatePolicy.secretProperties] Properties of
 * the secret backing a certificate.
 * 
 * @param {string} [options.certificatePolicy.secretProperties.contentType]
 * The media type (MIME type).
 * 
 * @param {object} [options.certificatePolicy.x509CertificateProperties]
 * Properties of the X509 component of a certificate.
 * 
 * @param {string}
 * [options.certificatePolicy.x509CertificateProperties.subject] The subject
 * name. Should be a valid X509 Distinguished Name.
 * 
 * @param {array} [options.certificatePolicy.x509CertificateProperties.ekus]
 * The enhanced key usage.
 * 
 * @param {object}
 * [options.certificatePolicy.x509CertificateProperties.subjectAlternativeNames]
 * The subject alternative names.
 * 
 * @param {array}
 * [options.certificatePolicy.x509CertificateProperties.subjectAlternativeNames.emails]
 * Email addresses.
 * 
 * @param {array}
 * [options.certificatePolicy.x509CertificateProperties.subjectAlternativeNames.dnsNames]
 * Domain names.
 * 
 * @param {array}
 * [options.certificatePolicy.x509CertificateProperties.subjectAlternativeNames.upns]
 * User principal names.
 * 
 * @param {array}
 * [options.certificatePolicy.x509CertificateProperties.keyUsage] List of key
 * usages.
 * 
 * @param {number}
 * [options.certificatePolicy.x509CertificateProperties.validityInMonths] The
 * duration that the ceritifcate is valid in months.
 * 
 * @param {array} [options.certificatePolicy.lifetimeActions] Actions that
 * will be performed by Key Vault over the lifetime of a certificate.
 * 
 * @param {object} [options.certificatePolicy.issuerParameters] Parameters for
 * the issuer of the X509 component of a certificate.
 * 
 * @param {string} [options.certificatePolicy.issuerParameters.name] Name of
 * the referenced issuer object or reserved names e.g. 'Self', 'Unknown'.
 * 
 * @param {string}
 * [options.certificatePolicy.issuerParameters.certificateType] Type of
 * certificate to be requested from the issuer provider.
 * 
 * @param {object} [options.certificatePolicy.attributes] The certificate
 * attributes.
 * 
 * @param {object} [options.certificateAttributes] The attributes of the
 * certificate (optional)
 * 
 * @param {boolean} [options.certificateAttributes.enabled] Determines whether
 * the object is enabled
 * 
 * @param {date} [options.certificateAttributes.notBefore] Not before date in
 * UTC
 * 
 * @param {date} [options.certificateAttributes.expires] Expiry date in UTC
 * 
 * @param {object} [options.tags] Application-specific metadata in the form of
 * key-value pairs
 * 
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 * 
 * @param {function} callback
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object.
 *                      See {@link CertificateBundle} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
KeyVaultClient.prototype.updateCertificate = function (certificateIdentifier, options, callback) {
    var parsedId = objId.parseCertificateIdentifier(certificateIdentifier);
    var version = (parsedId.version === null) ? '' : parsedId.version;
  return this._internalClient.updateCertificate(parsedId.vault, parsedId.name, version, options, callback);
};

/**
 * Gets a Certificate.
 *
 * @param {string} certificateIdentifier The certificate identifier. It may or may not contain a version path. If a version is not provided, the latest certificate version is used.
 * 
 * @param {object} [options] Optional Parameters.
 * 
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 * 
 * @param {function} callback
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object.
 *                      See {@link CertificateBundle} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
KeyVaultClient.prototype.getCertificate = function (certificateIdentifier, options, callback) {
    var parsedId = objId.parseCertificateIdentifier(certificateIdentifier);
    var version = (parsedId.version === null) ? '' : parsedId.version;
  return this._internalClient.getCertificate(parsedId.vault, parsedId.name, version, options, callback);
};

/**
 * Updates a certificate operation.
 *
 * @param {string} vaultBaseUrl The vault name, e.g.
 * https://myvault.vault.azure.net
 * 
 * @param {string} certificateName The name of the certificate
 * 
 * @param {boolean} cancellationRequested Indicates if cancellation was
 * requested on the certificate operation.
 * 
 * @param {object} [options] Optional Parameters.
 * 
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 * 
 * @param {function} callback
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object.
 *                      See {@link CertificateOperation} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
KeyVaultClient.prototype.updateCertificateOperation = function (vaultBaseUrl, certificateName, cancellationRequested, options, callback) {
  return this._internalClient.updateCertificateOperation(vaultBaseUrl, certificateName, cancellationRequested, options, callback);
};

/**
 * Gets the certificate operation response.
 *
 * @param {string} vaultBaseUrl The vault name, e.g.
 * https://myvault.vault.azure.net
 * 
 * @param {string} certificateName The name of the certificate
 * 
 * @param {object} [options] Optional Parameters.
 * 
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 * 
 * @param {function} callback
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object.
 *                      See {@link CertificateOperation} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
KeyVaultClient.prototype.getCertificateOperation = function (vaultBaseUrl, certificateName, options, callback) {
  return this._internalClient.getCertificateOperation(vaultBaseUrl, certificateName, options, callback);
};

/**
 * Deletes the certificate operation.
 *
 * @param {string} vaultBaseUrl The vault name, e.g.
 * https://myvault.vault.azure.net
 * 
 * @param {string} certificateName The name of the certificate
 * 
 * @param {object} [options] Optional Parameters.
 * 
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 * 
 * @param {function} callback
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object.
 *                      See {@link CertificateOperation} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
KeyVaultClient.prototype.deleteCertificateOperation = function (vaultBaseUrl, certificateName, options, callback) {
  return this._internalClient.deleteCertificateOperation(vaultBaseUrl, certificateName, options, callback);
};

/**
 * Merges a certificate or a certificate chain with a key pair existing on the
 * server.
 *
 * @param {string} vaultBaseUrl The vault name, e.g.
 * https://myvault.vault.azure.net
 * 
 * @param {string} certificateName The name of the certificate
 * 
 * @param {array} x509Certificates The certificate or the certificate chain to
 * merge
 * 
 * @param {object} [options] Optional Parameters.
 * 
 * @param {object} [options.certificateAttributes] The attributes of the
 * certificate (optional)
 * 
 * @param {boolean} [options.certificateAttributes.enabled] Determines whether
 * the object is enabled
 * 
 * @param {date} [options.certificateAttributes.notBefore] Not before date in
 * UTC
 * 
 * @param {date} [options.certificateAttributes.expires] Expiry date in UTC
 * 
 * @param {object} [options.tags] Application-specific metadata in the form of
 * key-value pairs
 * 
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 * 
 * @param {function} callback
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object.
 *                      See {@link CertificateBundle} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
KeyVaultClient.prototype.mergeCertificate = function (vaultBaseUrl, certificateName, x509Certificates, options, callback) {
  return this._internalClient.mergeCertificate(vaultBaseUrl, certificateName, x509Certificates, options, callback);
};

/**
 * List the versions of the specified key
 *
 * @param {string} nextPageLink The NextLink from the previous successful call
 * to List operation.
 * 
 * @param {object} [options] Optional Parameters.
 * 
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 * 
 * @param {function} callback
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object.
 *                      See {@link KeyListResult} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
KeyVaultClient.prototype.getKeyVersionsNext = function (nextPageLink, options, callback) {
  return this._internalClient.getKeyVersionsNext(nextPageLink, options, callback);
};

/**
 * List keys in the specified vault
 *
 * @param {string} nextPageLink The NextLink from the previous successful call
 * to List operation.
 * 
 * @param {object} [options] Optional Parameters.
 * 
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 * 
 * @param {function} callback
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object.
 *                      See {@link KeyListResult} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
KeyVaultClient.prototype.getKeysNext = function (nextPageLink, options, callback) {
  return this._internalClient.getKeysNext(nextPageLink, options, callback);
};

/**
 * List secrets in the specified vault
 *
 * @param {string} nextPageLink The NextLink from the previous successful call
 * to List operation.
 * 
 * @param {object} [options] Optional Parameters.
 * 
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 * 
 * @param {function} callback
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object.
 *                      See {@link SecretListResult} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
KeyVaultClient.prototype.getSecretsNext = function (nextPageLink, options, callback) {
  return this._internalClient.getSecretsNext(nextPageLink, options, callback);
};

/**
 * List the versions of the specified secret
 *
 * @param {string} nextPageLink The NextLink from the previous successful call
 * to List operation.
 * 
 * @param {object} [options] Optional Parameters.
 * 
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 * 
 * @param {function} callback
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object.
 *                      See {@link SecretListResult} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
KeyVaultClient.prototype.getSecretVersionsNext = function (nextPageLink, options, callback) {
  return this._internalClient.getSecretVersionsNext(nextPageLink, options, callback);
};

/**
 * List certificates in the specified vault
 *
 * @param {string} nextPageLink The NextLink from the previous successful call
 * to List operation.
 * 
 * @param {object} [options] Optional Parameters.
 * 
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 * 
 * @param {function} callback
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object.
 *                      See {@link CertificateListResult} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
KeyVaultClient.prototype.getCertificatesNext = function (nextPageLink, options, callback) {
  return this._internalClient.getCertificatesNext(nextPageLink, options, callback);
};

/**
 * List certificate issuers for the specified vault.
 *
 * @param {string} nextPageLink The NextLink from the previous successful call
 * to List operation.
 * 
 * @param {object} [options] Optional Parameters.
 * 
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 * 
 * @param {function} callback
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object.
 *                      See {@link CertificateIssuerListResult} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
KeyVaultClient.prototype.getCertificateIssuersNext = function (nextPageLink, options, callback) {
  return this._internalClient.getCertificateIssuersNext(nextPageLink, options, callback);
};

/**
 * List the versions of a certificate.
 *
 * @param {string} nextPageLink The NextLink from the previous successful call
 * to List operation.
 * 
 * @param {object} [options] Optional Parameters.
 * 
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 * 
 * @param {function} callback
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object.
 *                      See {@link CertificateListResult} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
KeyVaultClient.prototype.getCertificateVersionsNext = function (nextPageLink, options, callback) {
  return this._internalClient.getCertificateVersionsNext(nextPageLink, options, callback);
};


/**
 * Gets the certificate operation response.
 *
 * @param {string} vaultBaseUrl The vault name, e.g.
 * https://myvault.vault.azure.net
 * 
 * @param {string} certificateName The name of the certificate
 * 
 * @param {object} [options] Optional Parameters.
 * 
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 * 
 * @param {function} callback
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object.
 *                      See {@link CertificateOperation} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
KeyVaultClient.prototype.getPendingCertificateSigningRequest = function (vaultBaseUrl, certificateName, options, callback) {
    var client = this._internalClient;
    if (!callback && typeof options === 'function') {
        callback = options;
        options = null;
    }
    if (!callback) {
        throw new Error('callback cannot be null.');
    }
    // Validate
    try {
        if (vaultBaseUrl === null || vaultBaseUrl === undefined || typeof vaultBaseUrl.valueOf() !== 'string') {
            throw new Error('vaultBaseUrl cannot be null or undefined and it must be of type string.');
        }
        if (certificateName === null || certificateName === undefined || typeof certificateName.valueOf() !== 'string') {
            throw new Error('certificateName cannot be null or undefined and it must be of type string.');
        }
        if (this._internalClient.apiVersion === null || this._internalClient.apiVersion === undefined || typeof this._internalClient.apiVersion.valueOf() !== 'string') {
            throw new Error('this.apiVersion cannot be null or undefined and it must be of type string.');
        }
        if (this._internalClient.acceptLanguage !== null && this._internalClient.acceptLanguage !== undefined && typeof this._internalClient.acceptLanguage.valueOf() !== 'string') {
            throw new Error('this.acceptLanguage must be of type string.');
        }
    } catch (error) {
        return callback(error);
    }
    
    // Construct URL
    var requestUrl = this._internalClient.baseUri +
                   '//certificates/{certificate-name}/pending';
    requestUrl = requestUrl.replace('{vaultBaseUrl}', vaultBaseUrl);
    requestUrl = requestUrl.replace('{certificate-name}', encodeURIComponent(certificateName));
    var queryParameters = [];
    queryParameters.push('api-version=' + encodeURIComponent(this._internalClient.apiVersion));
    if (queryParameters.length > 0) {
        requestUrl += '?' + queryParameters.join('&');
    }
    // trim all duplicate forward slashes in the url
    var regex = /([^:]\/)\/+/gi;
    requestUrl = requestUrl.replace(regex, '$1');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = requestUrl;
    // Set Headers
    if (this._internalClient.generateClientRequestId) {
        httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
    }
    if (this._internalClient.acceptLanguage !== undefined && this._internalClient.acceptLanguage !== null) {
        httpRequest.headers['accept-language'] = this._internalClient.acceptLanguage;
    }
    if (options) {
        for (var headerName in options['customHeaders']) {
            if (options['customHeaders'].hasOwnProperty(headerName)) {
                httpRequest.headers[headerName] = options['customHeaders'][headerName];
            }
        }
    }
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    httpRequest.headers['Accept'] = 'application/pkcs10';
    httpRequest.body = null;
    // Send Request
    return client.pipeline(httpRequest, function (err, response, responseBody) {
        if (err) {
            return callback(err);
        }
        var statusCode = response.statusCode;
        if (statusCode !== 200) {
            var error = new Error(responseBody);
            error.statusCode = response.statusCode;
            error.request = msRest.stripRequest(httpRequest);
            error.response = msRest.stripResponse(response);
            if (responseBody === '') responseBody = null;
            var parsedErrorResponse;
            try {
                parsedErrorResponse = JSON.parse(responseBody);
                if (parsedErrorResponse) {
                    var internalError = null;
                    if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
                    error.code = internalError ? internalError.code : parsedErrorResponse.code;
                    error.message = internalError ? internalError.message : parsedErrorResponse.message;
                }
                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                    var resultMapper = new client.models['KeyVaultError']().mapper();
                    error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                }
            } catch (defaultError) {
                error.message = util.format('Error "%s" occurred in deserializing the responseBody ' + 
                         '- "%s" for the default response.', defaultError.message, responseBody);
                return callback(error);
            }
            return callback(error);
        }
        // Create Result
        var result = null;
        if (responseBody === '') responseBody = null;
        // Deserialize Response
        if (statusCode === 200) {
            result = responseBody;
        }
        
        return callback(null, result, httpRequest, response);
    });
};



module.exports.KeyVaultClient                       = KeyVaultClient;
module.exports.JsonWebKeyEncryptionAlgorithms       = jwk.JsonWebKeyEncryptionAlgorithms;
module.exports.JsonWebKeySignatureAlgorithms        = jwk.JsonWebKeySignatureAlgorithms;
module.exports.KeyVaultCredentials                  = kvcreds.KeyVaultCredentials;
module.exports.parseKeyIdentifier                   = objId.parseKeyIdentifier;
module.exports.createSecretIdentifier               = objId.createSecretIdentifier;
module.exports.createKeyIdentifier                  = objId.createKeyIdentifier;
module.exports.parseSecretIdentifier                = objId.parseSecretIdentifier;
module.exports.createCertificateIdentifier          = objId.createCertificateIdentifier;
module.exports.parseCertificateIdentifier           = objId.parseCertificateIdentifier;
module.exports.createCertificateOperationIdentifier = objId.createCertificateOperationIdentifier;
module.exports.parseCertificateOperationIdentifier  = objId.parseCertificateOperationIdentifier;
module.exports.createIssuerIdentifier               = objId.createIssuerIdentifier;
module.exports.parseIssuerIdentifier                = objId.parseIssuerIdentifier;
module.exports.Models                               = models;