/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * availabilityStatus of a resource.
 *
 */
class AvailabilityStatus {
  /**
   * Create a AvailabilityStatus.
   * @property {string} [id] Azure Resource Manager Identity for the
   * availabilityStatuses resource.
   * @property {string} [name] current.
   * @property {string} [type] Microsoft.ResourceHealth/AvailabilityStatuses.
   * @property {string} [location] Azure Resource Manager geo location of the
   * resource.
   * @property {object} [properties] Properties of availability state.
   * @property {string} [properties.availabilityState] Availability status of
   * the resource. When it is null, this availabilityStatus object represents
   * an availability impacting event. Possible values include: 'Available',
   * 'Unavailable', 'Unknown'
   * @property {string} [properties.summary] Summary description of the
   * availability status.
   * @property {string} [properties.detailedStatus] Details of the availability
   * status.
   * @property {string} [properties.reasonType] When the resource's
   * availabilityState is Unavailable, it describes where the health impacting
   * event was originated. Examples are planned, unplanned, user initiated or
   * an outage etc.
   * @property {date} [properties.rootCauseAttributionTime] When the resource's
   * availabilityState is Unavailable, it provides the Timestamp for when the
   * health impacting event was received.
   * @property {string} [properties.healthEventType] In case of an availability
   * impacting event, it describes when the health impacting event was
   * originated. Examples are Lifecycle, Downtime, Fault Analysis etc.
   * @property {string} [properties.healthEventCause] In case of an
   * availability impacting event, it describes where the health impacting
   * event was originated. Examples are PlatformInitiated, UserInitiated etc.
   * @property {string} [properties.healthEventCategory] In case of an
   * availability impacting event, it describes the category of a
   * PlatformInitiated health impacting event. Examples are Planned, Unplanned
   * etc.
   * @property {string} [properties.healthEventId] It is a unique Id that
   * identifies the event
   * @property {date} [properties.resolutionETA] When the resource's
   * availabilityState is Unavailable and the reasonType is not User Initiated,
   * it provides the date and time for when the issue is expected to be
   * resolved.
   * @property {date} [properties.occuredTime] Timestamp for when last change
   * in health status occurred.
   * @property {string} [properties.reasonChronicity] Chronicity of the
   * availability transition. Possible values include: 'Transient',
   * 'Persistent'
   * @property {date} [properties.reportedTime] Timestamp for when the health
   * was last checked.
   * @property {object} [properties.recentlyResolvedState] An annotation
   * describing a change in the availabilityState to Available from Unavailable
   * with a reasonType of type Unplanned
   * @property {date}
   * [properties.recentlyResolvedState.unavailableOccurredTime] Timestamp for
   * when the availabilityState changed to Unavailable
   * @property {date} [properties.recentlyResolvedState.resolvedTime] Timestamp
   * when the availabilityState changes to Available.
   * @property {string}
   * [properties.recentlyResolvedState.unavailabilitySummary] Brief description
   * of cause of the resource becoming unavailable.
   * @property {array} [properties.recommendedActions] Lists actions the user
   * can take based on the current availabilityState of the resource.
   * @property {array} [properties.serviceImpactingEvents] Lists the service
   * impacting events that may be affecting the health of the resource.
   */
  constructor() {
  }

  /**
   * Defines the metadata of AvailabilityStatus
   *
   * @returns {object} metadata of AvailabilityStatus
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'availabilityStatus',
      type: {
        name: 'Composite',
        className: 'AvailabilityStatus',
        modelProperties: {
          id: {
            required: false,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          location: {
            required: false,
            serializedName: 'location',
            type: {
              name: 'String'
            }
          },
          properties: {
            required: false,
            serializedName: 'properties',
            type: {
              name: 'Composite',
              className: 'AvailabilityStatusProperties'
            }
          }
        }
      }
    };
  }
}

module.exports = AvailabilityStatus;
