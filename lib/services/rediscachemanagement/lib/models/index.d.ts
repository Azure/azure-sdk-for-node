/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import { BaseResource } from 'ms-rest-azure';
import { CloudError } from 'ms-rest-azure';
import * as moment from 'moment';

export { BaseResource } from 'ms-rest-azure';
export { CloudError } from 'ms-rest-azure';


/**
 * @class
 * Initializes a new instance of the Sku class.
 * @constructor
 * SKU parameters supplied to the create Redis operation.
 *
 * @member {string} name The type of Redis cache to deploy. Valid values:
 * (Basic, Standard, Premium). Possible values include: 'Basic', 'Standard',
 * 'Premium'
 * @member {string} family The SKU family to use. Valid values: (C, P). (C =
 * Basic/Standard, P = Premium). Possible values include: 'C', 'P'
 * @member {number} capacity The size of the Redis cache to deploy. Valid
 * values: for C (Basic/Standard) family (0, 1, 2, 3, 4, 5, 6), for P (Premium)
 * family (1, 2, 3, 4).
 */
export interface Sku {
  name: string;
  family: string;
  capacity: number;
}

/**
 * @class
 * Initializes a new instance of the Resource class.
 * @constructor
 * The Resource definition.
 *
 * @member {string} [id] Resource ID.
 * @member {string} [name] Resource name.
 * @member {string} [type] Resource type.
 * @member {string} location Resource location.
 * @member {object} [tags] Resource tags.
 */
export interface Resource extends BaseResource {
  readonly id?: string;
  readonly name?: string;
  readonly type?: string;
  location: string;
  tags?: { [propertyName: string]: string };
}

/**
 * @class
 * Initializes a new instance of the RedisCreateParameters class.
 * @constructor
 * Parameters supplied to the Create Redis operation.
 *
 * @member {object} [redisConfiguration] All Redis Settings. Few possible keys:
 * rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value
 * etc.
 * @member {boolean} [enableNonSslPort] Specifies whether the non-ssl Redis
 * server port (6379) is enabled.
 * @member {object} [tenantSettings] tenantSettings
 * @member {number} [shardCount] The number of shards to be created on a
 * Premium Cluster Cache.
 * @member {string} [subnetId] The full resource ID of a subnet in a virtual
 * network to deploy the Redis cache in. Example format:
 * /subscriptions/{subid}/resourceGroups/{resourceGroupName}/Microsoft.{Network|ClassicNetwork}/VirtualNetworks/vnet1/subnets/subnet1
 * @member {string} [staticIP] Static IP address. Required when deploying a
 * Redis cache inside an existing Azure Virtual Network.
 * @member {object} sku The SKU of the Redis cache to deploy.
 * @member {string} [sku.name] The type of Redis cache to deploy. Valid values:
 * (Basic, Standard, Premium). Possible values include: 'Basic', 'Standard',
 * 'Premium'
 * @member {string} [sku.family] The SKU family to use. Valid values: (C, P).
 * (C = Basic/Standard, P = Premium). Possible values include: 'C', 'P'
 * @member {number} [sku.capacity] The size of the Redis cache to deploy. Valid
 * values: for C (Basic/Standard) family (0, 1, 2, 3, 4, 5, 6), for P (Premium)
 * family (1, 2, 3, 4).
 */
export interface RedisCreateParameters extends Resource {
  redisConfiguration?: { [propertyName: string]: string };
  enableNonSslPort?: boolean;
  tenantSettings?: { [propertyName: string]: string };
  shardCount?: number;
  subnetId?: string;
  staticIP?: string;
  sku: Sku;
}

/**
 * @class
 * Initializes a new instance of the RedisUpdateParameters class.
 * @constructor
 * Parameters supplied to the Update Redis operation.
 *
 * @member {object} [redisConfiguration] All Redis Settings. Few possible keys:
 * rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value
 * etc.
 * @member {boolean} [enableNonSslPort] Specifies whether the non-ssl Redis
 * server port (6379) is enabled.
 * @member {object} [tenantSettings] tenantSettings
 * @member {number} [shardCount] The number of shards to be created on a
 * Premium Cluster Cache.
 * @member {string} [subnetId] The full resource ID of a subnet in a virtual
 * network to deploy the Redis cache in. Example format:
 * /subscriptions/{subid}/resourceGroups/{resourceGroupName}/Microsoft.{Network|ClassicNetwork}/VirtualNetworks/vnet1/subnets/subnet1
 * @member {string} [staticIP] Static IP address. Required when deploying a
 * Redis cache inside an existing Azure Virtual Network.
 * @member {object} [sku] The SKU of the Redis cache to deploy.
 * @member {string} [sku.name] The type of Redis cache to deploy. Valid values:
 * (Basic, Standard, Premium). Possible values include: 'Basic', 'Standard',
 * 'Premium'
 * @member {string} [sku.family] The SKU family to use. Valid values: (C, P).
 * (C = Basic/Standard, P = Premium). Possible values include: 'C', 'P'
 * @member {number} [sku.capacity] The size of the Redis cache to deploy. Valid
 * values: for C (Basic/Standard) family (0, 1, 2, 3, 4, 5, 6), for P (Premium)
 * family (1, 2, 3, 4).
 * @member {object} [tags] Resource tags.
 */
export interface RedisUpdateParameters {
  redisConfiguration?: { [propertyName: string]: string };
  enableNonSslPort?: boolean;
  tenantSettings?: { [propertyName: string]: string };
  shardCount?: number;
  subnetId?: string;
  staticIP?: string;
  sku?: Sku;
  tags?: { [propertyName: string]: string };
}

/**
 * @class
 * Initializes a new instance of the RedisAccessKeys class.
 * @constructor
 * Redis cache access keys.
 *
 * @member {string} [primaryKey] The current primary key that clients can use
 * to authenticate with Redis cache.
 * @member {string} [secondaryKey] The current secondary key that clients can
 * use to authenticate with Redis cache.
 */
export interface RedisAccessKeys {
  readonly primaryKey?: string;
  readonly secondaryKey?: string;
}

/**
 * @class
 * Initializes a new instance of the RedisLinkedServer class.
 * @constructor
 * Linked server Id
 *
 * @member {string} [id] Linked server Id.
 */
export interface RedisLinkedServer {
  readonly id?: string;
}

/**
 * @class
 * Initializes a new instance of the RedisLinkedServerList class.
 * @constructor
 * List of linked server Ids of a Redis cache.
 *
 * @member {array} value List of linked server Ids of a Redis cache.
 */
export interface RedisLinkedServerList {
  value: RedisLinkedServer[];
}

/**
 * @class
 * Initializes a new instance of the RedisResource class.
 * @constructor
 * A single Redis item in List or Get Operation.
 *
 * @member {object} [redisConfiguration] All Redis Settings. Few possible keys:
 * rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value
 * etc.
 * @member {boolean} [enableNonSslPort] Specifies whether the non-ssl Redis
 * server port (6379) is enabled.
 * @member {object} [tenantSettings] tenantSettings
 * @member {number} [shardCount] The number of shards to be created on a
 * Premium Cluster Cache.
 * @member {string} [subnetId] The full resource ID of a subnet in a virtual
 * network to deploy the Redis cache in. Example format:
 * /subscriptions/{subid}/resourceGroups/{resourceGroupName}/Microsoft.{Network|ClassicNetwork}/VirtualNetworks/vnet1/subnets/subnet1
 * @member {string} [staticIP] Static IP address. Required when deploying a
 * Redis cache inside an existing Azure Virtual Network.
 * @member {object} [sku] The SKU of the Redis cache to deploy.
 * @member {string} [sku.name] The type of Redis cache to deploy. Valid values:
 * (Basic, Standard, Premium). Possible values include: 'Basic', 'Standard',
 * 'Premium'
 * @member {string} [sku.family] The SKU family to use. Valid values: (C, P).
 * (C = Basic/Standard, P = Premium). Possible values include: 'C', 'P'
 * @member {number} [sku.capacity] The size of the Redis cache to deploy. Valid
 * values: for C (Basic/Standard) family (0, 1, 2, 3, 4, 5, 6), for P (Premium)
 * family (1, 2, 3, 4).
 * @member {string} [redisVersion] Redis version.
 * @member {string} [provisioningState] Redis instance provisioning status.
 * @member {string} [hostName] Redis host name.
 * @member {number} [port] Redis non-SSL port.
 * @member {number} [sslPort] Redis SSL port.
 * @member {object} [accessKeys] The keys of the Redis cache - not set if this
 * object is not the response to Create or Update redis cache
 * @member {string} [accessKeys.primaryKey] The current primary key that
 * clients can use to authenticate with Redis cache.
 * @member {string} [accessKeys.secondaryKey] The current secondary key that
 * clients can use to authenticate with Redis cache.
 * @member {object} [linkedServers] List of the linked servers associated with
 * the cache
 * @member {array} [linkedServers.value] List of linked server Ids of a Redis
 * cache.
 */
export interface RedisResource extends Resource {
  redisConfiguration?: { [propertyName: string]: string };
  enableNonSslPort?: boolean;
  tenantSettings?: { [propertyName: string]: string };
  shardCount?: number;
  subnetId?: string;
  staticIP?: string;
  sku?: Sku;
  readonly redisVersion?: string;
  readonly provisioningState?: string;
  readonly hostName?: string;
  readonly port?: number;
  readonly sslPort?: number;
  readonly accessKeys?: RedisAccessKeys;
  readonly linkedServers?: RedisLinkedServerList;
}

/**
 * @class
 * Initializes a new instance of the RedisRegenerateKeyParameters class.
 * @constructor
 * Specifies which Redis access keys to reset.
 *
 * @member {string} keyType The Redis access key to regenerate. Possible values
 * include: 'Primary', 'Secondary'
 */
export interface RedisRegenerateKeyParameters {
  keyType: string;
}

/**
 * @class
 * Initializes a new instance of the RedisRebootParameters class.
 * @constructor
 * Specifies which Redis node(s) to reboot.
 *
 * @member {string} rebootType Which Redis node(s) to reboot. Depending on this
 * value data loss is possible. Possible values include: 'PrimaryNode',
 * 'SecondaryNode', 'AllNodes'
 * @member {number} [shardId] If clustering is enabled, the ID of the shard to
 * be rebooted.
 */
export interface RedisRebootParameters {
  rebootType: string;
  shardId?: number;
}

/**
 * @class
 * Initializes a new instance of the ExportRDBParameters class.
 * @constructor
 * Parameters for Redis export operation.
 *
 * @member {string} [format] File format.
 * @member {string} prefix Prefix to use for exported files.
 * @member {string} container Container name to export to.
 */
export interface ExportRDBParameters {
  format?: string;
  prefix: string;
  container: string;
}

/**
 * @class
 * Initializes a new instance of the ImportRDBParameters class.
 * @constructor
 * Parameters for Redis import operation.
 *
 * @member {string} [format] File format.
 * @member {array} files files to import.
 */
export interface ImportRDBParameters {
  format?: string;
  files: string[];
}

/**
 * @class
 * Initializes a new instance of the ScheduleEntry class.
 * @constructor
 * Patch schedule entry for a Premium Redis Cache.
 *
 * @member {string} dayOfWeek Day of the week when a cache can be patched.
 * Possible values include: 'Monday', 'Tuesday', 'Wednesday', 'Thursday',
 * 'Friday', 'Saturday', 'Sunday', 'Everyday', 'Weekend'
 * @member {number} startHourUtc Start hour after which cache patching can
 * start.
 * @member {moment.duration} [maintenanceWindow] ISO8601 timespan specifying
 * how much time cache patching can take.
 */
export interface ScheduleEntry {
  dayOfWeek: string;
  startHourUtc: number;
  maintenanceWindow?: moment.Duration;
}

/**
 * @class
 * Initializes a new instance of the RedisPatchSchedule class.
 * @constructor
 * Response to put/get patch schedules for Redis cache.
 *
 * @member {string} [id] Resource ID.
 * @member {string} [name] Resource name.
 * @member {string} [type] Resource type.
 * @member {string} [location] Resource location.
 * @member {array} scheduleEntries List of patch schedules for a Redis cache.
 */
export interface RedisPatchSchedule {
  readonly id?: string;
  readonly name?: string;
  readonly type?: string;
  readonly location?: string;
  scheduleEntries: ScheduleEntry[];
}

/**
 * @class
 * Initializes a new instance of the RedisForceRebootResponse class.
 * @constructor
 * Response to force reboot for Redis cache.
 *
 * @member {string} [message] Status message
 */
export interface RedisForceRebootResponse {
  readonly message?: string;
}

/**
 * @class
 * Initializes a new instance of the RedisLinkedServerWithProperties class.
 * @constructor
 * Response to put/get linked server (with properties) for Redis cache.
 *
 * @member {string} [id] Resource ID.
 * @member {string} [name] Resource name.
 * @member {string} [type] Resource type.
 * @member {string} linkedRedisCacheId Fully qualified resourceId of the linked
 * redis cache.
 * @member {string} linkedRedisCacheLocation Location of the linked redis
 * cache.
 * @member {string} serverRole Role of the linked server. Possible values
 * include: 'Primary', 'Secondary'
 * @member {string} [provisioningState] Terminal state of the link between
 * primary and secondary redis cache.
 */
export interface RedisLinkedServerWithProperties {
  readonly id?: string;
  readonly name?: string;
  readonly type?: string;
  linkedRedisCacheId: string;
  linkedRedisCacheLocation: string;
  serverRole: string;
  readonly provisioningState?: string;
}

/**
 * @class
 * Initializes a new instance of the RedisLinkedServerWithPropertiesList class.
 * @constructor
 * List of linked servers (with properites) of a Redis cache.
 *
 * @member {array} value List of linked servers (with properites) of a Redis
 * cache.
 */
export interface RedisLinkedServerWithPropertiesList {
  value: RedisLinkedServerWithProperties[];
}

/**
 * @class
 * Initializes a new instance of the RedisLinkedServerCreateParameters class.
 * @constructor
 * Parameter required for creating a linked server to redis cache.
 *
 * @member {string} linkedRedisCacheId Fully qualified resourceId of the linked
 * redis cache.
 * @member {string} linkedRedisCacheLocation Location of the linked redis
 * cache.
 * @member {string} serverRole Role of the linked server. Possible values
 * include: 'Primary', 'Secondary'
 */
export interface RedisLinkedServerCreateParameters {
  linkedRedisCacheId: string;
  linkedRedisCacheLocation: string;
  serverRole: string;
}


/**
 * @class
 * Initializes a new instance of the RedisListResult class.
 * @constructor
 * The response of list Redis operation.
 *
 * @member {string} [nextLink] Link for next set of locations.
 */
export interface RedisListResult extends Array<RedisResource> {
  nextLink?: string;
}
