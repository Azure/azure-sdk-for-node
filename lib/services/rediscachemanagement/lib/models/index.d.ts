/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */


/**
 * @class
 * Initializes a new instance of the Sku class.
 * @constructor
 * Sku parameters supplied to the create redis operation.
 *
 * @member {string} name What type of redis cache to deploy. Valid values:
 * (Basic, Standard, Premium). Possible values include: 'Basic', 'Standard',
 * 'Premium'
 * 
 * @member {string} family Which family to use. Valid values: (C, P). Possible
 * values include: 'C', 'P'
 * 
 * @member {number} capacity What size of redis cache to deploy. Valid values:
 * for C family (0, 1, 2, 3, 4, 5, 6), for P family (1, 2, 3, 4)
 * 
 */
export interface Sku {
  name: string;
  family: string;
  capacity: number;
}

/**
 * @class
 * Initializes a new instance of the Resource class.
 * @constructor
 * The Resource definition.
 *
 * @member {string} [id] Resource Id
 * 
 * @member {string} [name] Resource name
 * 
 * @member {string} [type] Resource type
 * 
 * @member {string} location Resource location
 * 
 * @member {object} [tags] Resource tags
 * 
 */
export interface Resource extends BaseResource {
  id?: string;
  name?: string;
  type?: string;
  location: string;
  tags?: { [propertyName: string]: string };
}

/**
 * @class
 * Initializes a new instance of the RedisCreateParameters class.
 * @constructor
 * Parameters supplied to the Create Redis operation.
 *
 * @member {object} [redisConfiguration] All Redis Settings. Few possible
 * keys: rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value
 * etc.
 * 
 * @member {boolean} [enableNonSslPort] If the value is true, then the non-ssl
 * redis server port (6379) will be enabled.
 * 
 * @member {object} [tenantSettings] tenantSettings
 * 
 * @member {number} [shardCount] The number of shards to be created on a
 * Premium Cluster Cache.
 * 
 * @member {string} [subnetId] The full resource ID of a subnet in a virtual
 * network to deploy the redis cache in. Example format:
 * /subscriptions/{subid}/resourceGroups/{resourceGroupName}/Microsoft.{Network|ClassicNetwork}/VirtualNetworks/vnet1/subnets/subnet1
 * 
 * @member {string} [staticIP] Required when deploying a redis cache inside an
 * existing Azure Virtual Network.
 * 
 * @member {object} sku What sku of redis cache to deploy.
 * 
 * @member {string} [sku.name] What type of redis cache to deploy. Valid
 * values: (Basic, Standard, Premium). Possible values include: 'Basic',
 * 'Standard', 'Premium'
 * 
 * @member {string} [sku.family] Which family to use. Valid values: (C, P).
 * Possible values include: 'C', 'P'
 * 
 * @member {number} [sku.capacity] What size of redis cache to deploy. Valid
 * values: for C family (0, 1, 2, 3, 4, 5, 6), for P family (1, 2, 3, 4)
 * 
 */
export interface RedisCreateParameters extends Resource {
  redisConfiguration?: { [propertyName: string]: string };
  enableNonSslPort?: boolean;
  tenantSettings?: { [propertyName: string]: string };
  shardCount?: number;
  subnetId?: string;
  staticIP?: string;
  sku: Sku;
}

/**
 * @class
 * Initializes a new instance of the RedisUpdateParameters class.
 * @constructor
 * Parameters supplied to the Update Redis operation.
 *
 * @member {object} [redisConfiguration] All Redis Settings. Few possible
 * keys: rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value
 * etc.
 * 
 * @member {boolean} [enableNonSslPort] If the value is true, then the non-ssl
 * redis server port (6379) will be enabled.
 * 
 * @member {object} [tenantSettings] tenantSettings
 * 
 * @member {number} [shardCount] The number of shards to be created on a
 * Premium Cluster Cache.
 * 
 * @member {string} [subnetId] The full resource ID of a subnet in a virtual
 * network to deploy the redis cache in. Example format:
 * /subscriptions/{subid}/resourceGroups/{resourceGroupName}/Microsoft.{Network|ClassicNetwork}/VirtualNetworks/vnet1/subnets/subnet1
 * 
 * @member {string} [staticIP] Required when deploying a redis cache inside an
 * existing Azure Virtual Network.
 * 
 * @member {object} [sku] What sku of redis cache to deploy.
 * 
 * @member {string} [sku.name] What type of redis cache to deploy. Valid
 * values: (Basic, Standard, Premium). Possible values include: 'Basic',
 * 'Standard', 'Premium'
 * 
 * @member {string} [sku.family] Which family to use. Valid values: (C, P).
 * Possible values include: 'C', 'P'
 * 
 * @member {number} [sku.capacity] What size of redis cache to deploy. Valid
 * values: for C family (0, 1, 2, 3, 4, 5, 6), for P family (1, 2, 3, 4)
 * 
 * @member {object} [tags] Resource tags
 * 
 */
export interface RedisUpdateParameters {
  redisConfiguration?: { [propertyName: string]: string };
  enableNonSslPort?: boolean;
  tenantSettings?: { [propertyName: string]: string };
  shardCount?: number;
  subnetId?: string;
  staticIP?: string;
  sku?: Sku;
  tags?: { [propertyName: string]: string };
}

/**
 * @class
 * Initializes a new instance of the RedisAccessKeys class.
 * @constructor
 * Redis cache access keys.
 *
 * @member {string} [primaryKey] The current primary key that clients can use
 * to authenticate with redis cache.
 * 
 * @member {string} [secondaryKey] The current secondary key that clients can
 * use to authenticate with redis cache.
 * 
 */
export interface RedisAccessKeys {
  primaryKey?: string;
  secondaryKey?: string;
}

/**
 * @class
 * Initializes a new instance of the RedisResource class.
 * @constructor
 * A single redis item in List or Get Operation.
 *
 * @member {string} [redisVersion] Redis Version.
 * 
 * @member {string} [provisioningState] Redis instance provisioning status
 * 
 * @member {string} [hostName] Redis host name
 * 
 * @member {number} [port] Redis non-ssl port
 * 
 * @member {number} [sslPort] Redis ssl port
 * 
 * @member {object} [redisConfiguration] All Redis Settings. Few possible
 * keys: rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value
 * etc.
 * 
 * @member {boolean} [enableNonSslPort] If the value is true, then the non-ssl
 * redis server port (6379) will be enabled.
 * 
 * @member {object} [tenantSettings] tenantSettings
 * 
 * @member {number} [shardCount] The number of shards to be created on a
 * Premium Cluster Cache.
 * 
 * @member {string} [subnetId] The full resource ID of a subnet in a virtual
 * network to deploy the redis cache in. Example format:
 * /subscriptions/{subid}/resourceGroups/{resourceGroupName}/Microsoft.{Network|ClassicNetwork}/VirtualNetworks/vnet1/subnets/subnet1
 * 
 * @member {string} [staticIP] Required when deploying a redis cache inside an
 * existing Azure Virtual Network.
 * 
 * @member {object} sku What sku of redis cache to deploy.
 * 
 * @member {string} [sku.name] What type of redis cache to deploy. Valid
 * values: (Basic, Standard, Premium). Possible values include: 'Basic',
 * 'Standard', 'Premium'
 * 
 * @member {string} [sku.family] Which family to use. Valid values: (C, P).
 * Possible values include: 'C', 'P'
 * 
 * @member {number} [sku.capacity] What size of redis cache to deploy. Valid
 * values: for C family (0, 1, 2, 3, 4, 5, 6), for P family (1, 2, 3, 4)
 * 
 */
export interface RedisResource extends Resource {
  redisVersion?: string;
  provisioningState?: string;
  hostName?: string;
  port?: number;
  sslPort?: number;
  redisConfiguration?: { [propertyName: string]: string };
  enableNonSslPort?: boolean;
  tenantSettings?: { [propertyName: string]: string };
  shardCount?: number;
  subnetId?: string;
  staticIP?: string;
  sku: Sku;
}

/**
 * @class
 * Initializes a new instance of the RedisRegenerateKeyParameters class.
 * @constructor
 * Specifies which redis access keys to reset.
 *
 * @member {string} keyType Which redis access key to reset. Possible values
 * include: 'Primary', 'Secondary'
 * 
 */
export interface RedisRegenerateKeyParameters {
  keyType: string;
}

/**
 * @class
 * Initializes a new instance of the RedisRebootParameters class.
 * @constructor
 * Specifies which redis node(s) to reboot.
 *
 * @member {string} rebootType Which redis node(s) to reboot. Depending on
 * this value data loss is possible. Possible values include: 'PrimaryNode',
 * 'SecondaryNode', 'AllNodes'
 * 
 * @member {number} [shardId] In case of cluster cache, this specifies shard
 * id which should be rebooted.
 * 
 */
export interface RedisRebootParameters {
  rebootType: string;
  shardId?: number;
}

/**
 * @class
 * Initializes a new instance of the ExportRDBParameters class.
 * @constructor
 * Parameters for redis export operation.
 *
 * @member {string} [format] File format.
 * 
 * @member {string} prefix Prefix to use for exported files.
 * 
 * @member {string} container Container name to export to.
 * 
 */
export interface ExportRDBParameters {
  format?: string;
  prefix: string;
  container: string;
}

/**
 * @class
 * Initializes a new instance of the ImportRDBParameters class.
 * @constructor
 * Parameters for redis import operation.
 *
 * @member {string} [format] File format.
 * 
 * @member {array} files files to import
 * 
 */
export interface ImportRDBParameters {
  format?: string;
  files: string[];
}

/**
 * @class
 * Initializes a new instance of the ScheduleEntry class.
 * @constructor
 * Patch schedule entry for Premium Redis Cache.
 *
 * @member {string} dayOfWeek Day of week when cache can be patched. Possible
 * values include: 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday',
 * 'Saturday', 'Sunday'
 * 
 * @member {number} startHourUtc Start hour after which cache patching can
 * start.
 * 
 * @member {moment.duration} [maintenanceWindow] ISO8601 timespan specifying
 * how much time cache patching can take.
 * 
 */
export interface ScheduleEntry {
  dayOfWeek: string;
  startHourUtc: number;
  maintenanceWindow?: moment.Duration;
}

/**
 * @class
 * Initializes a new instance of the RedisPatchSchedule class.
 * @constructor
 * Response to put/get patch schedules for redis cache.
 *
 * @member {string} [id] Resource Id
 * 
 * @member {string} [name] Resource name
 * 
 * @member {string} [type] Resource type
 * 
 * @member {string} [location] Resource location
 * 
 * @member {array} scheduleEntries List of patch schedules for redis cache.
 * 
 */
export interface RedisPatchSchedule {
  id?: string;
  name?: string;
  type?: string;
  location?: string;
  scheduleEntries: ScheduleEntry[];
}


/**
 * @class
 * Initializes a new instance of the RedisListResult class.
 * @constructor
 * The response of list redis operation.
 *
 * @member {string} [nextLink] Link for next set of locations.
 * 
 */
export interface RedisListResult extends Array<RedisResource> {
  nextLink?: string;
}
