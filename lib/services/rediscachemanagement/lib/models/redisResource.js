/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the RedisResource class.
 * @constructor
 * A single redis item in List or Get Operation.
 * @member {string} [redisVersion] RedisVersion parameter has been deprecated.
 * As such, it is no longer necessary to provide this parameter and any value
 * specified is ignored.
 * 
 * @member {object} sku What sku of redis cache to deploy.
 * 
 * @member {string} [sku.name] What type of redis cache to deploy. Valid
 * values: (Basic, Standard, Premium). Possible values include: 'Basic',
 * 'Standard', 'Premium'
 * 
 * @member {string} [sku.family] Which family to use. Valid values: (C, P).
 * Possible values include: 'C', 'P'
 * 
 * @member {number} [sku.capacity] What size of redis cache to deploy. Valid
 * values: for C family (0, 1, 2, 3, 4, 5, 6), for P family (1, 2, 3, 4)
 * 
 * @member {object} [redisConfiguration] All Redis Settings. Few possible
 * keys: rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value
 * etc.
 * 
 * @member {boolean} [enableNonSslPort] If the value is true, then the non-ssl
 * redis server port (6379) will be enabled.
 * 
 * @member {object} [tenantSettings] tenantSettings
 * 
 * @member {number} [shardCount] The number of shards to be created on a
 * Premium Cluster Cache.
 * 
 * @member {string} [virtualNetwork] The exact ARM resource ID of the virtual
 * network to deploy the redis cache in. Example format:
 * /subscriptions/{subid}/resourceGroups/{resourceGroupName}/Microsoft.ClassicNetwork/VirtualNetworks/vnet1
 * 
 * @member {string} [subnet] Required when deploying a redis cache inside an
 * existing Azure Virtual Network.
 * 
 * @member {string} [staticIP] Required when deploying a redis cache inside an
 * existing Azure Virtual Network.
 * 
 * @member {string} [provisioningState] Redis instance provisioning status
 * 
 * @member {string} [hostName] Redis host name
 * 
 * @member {number} [port] Redis non-ssl port
 * 
 * @member {number} [sslPort] Redis ssl port
 * 
 */
function RedisResource() {
  RedisResource['super_'].call(this);
}

util.inherits(RedisResource, models['Resource']);

/**
 * Defines the metadata of RedisResource
 *
 * @returns {object} metadata of RedisResource
 *
 */
RedisResource.prototype.mapper = function () {
  return {
    required: false,
    serializedName: 'RedisResource',
    type: {
      name: 'Composite',
      className: 'RedisResource',
      modelProperties: {
        id: {
          required: false,
          readOnly: true,
          serializedName: 'id',
          type: {
            name: 'String'
          }
        },
        name: {
          required: false,
          readOnly: true,
          serializedName: 'name',
          type: {
            name: 'String'
          }
        },
        type: {
          required: false,
          readOnly: true,
          serializedName: 'type',
          type: {
            name: 'String'
          }
        },
        location: {
          required: true,
          serializedName: 'location',
          type: {
            name: 'String'
          }
        },
        tags: {
          required: false,
          serializedName: 'tags',
          type: {
            name: 'Dictionary',
            value: {
                required: false,
                serializedName: 'StringElementType',
                type: {
                  name: 'String'
                }
            }
          }
        },
        redisVersion: {
          required: false,
          serializedName: 'properties.redisVersion',
          type: {
            name: 'String'
          }
        },
        sku: {
          required: true,
          serializedName: 'properties.sku',
          type: {
            name: 'Composite',
            className: 'Sku'
          }
        },
        redisConfiguration: {
          required: false,
          serializedName: 'properties.redisConfiguration',
          type: {
            name: 'Dictionary',
            value: {
                required: false,
                serializedName: 'StringElementType',
                type: {
                  name: 'String'
                }
            }
          }
        },
        enableNonSslPort: {
          required: false,
          serializedName: 'properties.enableNonSslPort',
          type: {
            name: 'Boolean'
          }
        },
        tenantSettings: {
          required: false,
          serializedName: 'properties.tenantSettings',
          type: {
            name: 'Dictionary',
            value: {
                required: false,
                serializedName: 'StringElementType',
                type: {
                  name: 'String'
                }
            }
          }
        },
        shardCount: {
          required: false,
          serializedName: 'properties.shardCount',
          type: {
            name: 'Number'
          }
        },
        virtualNetwork: {
          required: false,
          serializedName: 'properties.virtualNetwork',
          type: {
            name: 'String'
          }
        },
        subnet: {
          required: false,
          serializedName: 'properties.subnet',
          type: {
            name: 'String'
          }
        },
        staticIP: {
          required: false,
          serializedName: 'properties.staticIP',
          type: {
            name: 'String'
          }
        },
        provisioningState: {
          required: false,
          serializedName: 'properties.provisioningState',
          type: {
            name: 'String'
          }
        },
        hostName: {
          required: false,
          serializedName: 'properties.hostName',
          type: {
            name: 'String'
          }
        },
        port: {
          required: false,
          serializedName: 'properties.port',
          type: {
            name: 'Number'
          }
        },
        sslPort: {
          required: false,
          serializedName: 'properties.sslPort',
          type: {
            name: 'Number'
          }
        }
      }
    }
  };
};

module.exports = RedisResource;
