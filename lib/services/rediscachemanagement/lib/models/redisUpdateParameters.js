/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

/**
 * @class
 * Initializes a new instance of the RedisUpdateParameters class.
 * @constructor
 * Parameters supplied to the Update Redis operation.
 *
 * @member {object} [redisConfiguration] All Redis Settings. Few possible
 * keys: rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value
 * etc.
 * 
 * @member {boolean} [enableNonSslPort] Specifies whether the non-ssl Redis
 * server port (6379) is enabled.
 * 
 * @member {object} [tenantSettings] tenantSettings
 * 
 * @member {number} [shardCount] The number of shards to be created on a
 * Premium Cluster Cache.
 * 
 * @member {string} [subnetId] The full resource ID of a subnet in a virtual
 * network to deploy the Redis cache in. Example format:
 * /subscriptions/{subid}/resourceGroups/{resourceGroupName}/Microsoft.{Network|ClassicNetwork}/VirtualNetworks/vnet1/subnets/subnet1
 * 
 * @member {string} [staticIP] Static IP address. Required when deploying a
 * Redis cache inside an existing Azure Virtual Network.
 * 
 * @member {object} [sku] The SKU of the Redis cache to deploy.
 * 
 * @member {string} [sku.name] The type of Redis cache to deploy. Valid
 * values: (Basic, Standard, Premium). Possible values include: 'Basic',
 * 'Standard', 'Premium'
 * 
 * @member {string} [sku.family] The SKU family to use. Valid values: (C, P).
 * (C = Basic/Standard, P = Premium). Possible values include: 'C', 'P'
 * 
 * @member {number} [sku.capacity] The size of the Redis cache to deploy.
 * Valid values: for C (Basic/Standard) family (0, 1, 2, 3, 4, 5, 6), for P
 * (Premium) family (1, 2, 3, 4).
 * 
 * @member {object} [tags] Resource tags.
 * 
 */
function RedisUpdateParameters() {
}

/**
 * Defines the metadata of RedisUpdateParameters
 *
 * @returns {object} metadata of RedisUpdateParameters
 *
 */
RedisUpdateParameters.prototype.mapper = function () {
  return {
    required: false,
    serializedName: 'RedisUpdateParameters',
    type: {
      name: 'Composite',
      className: 'RedisUpdateParameters',
      modelProperties: {
        redisConfiguration: {
          required: false,
          serializedName: 'properties.RedisConfiguration',
          type: {
            name: 'Dictionary',
            value: {
                required: false,
                serializedName: 'StringElementType',
                type: {
                  name: 'String'
                }
            }
          }
        },
        enableNonSslPort: {
          required: false,
          serializedName: 'properties.enableNonSslPort',
          type: {
            name: 'Boolean'
          }
        },
        tenantSettings: {
          required: false,
          serializedName: 'properties.tenantSettings',
          type: {
            name: 'Dictionary',
            value: {
                required: false,
                serializedName: 'StringElementType',
                type: {
                  name: 'String'
                }
            }
          }
        },
        shardCount: {
          required: false,
          serializedName: 'properties.shardCount',
          type: {
            name: 'Number'
          }
        },
        subnetId: {
          required: false,
          serializedName: 'properties.subnetId',
          constraints: {
            Pattern: '^/subscriptions/[^/]*/resourceGroups/[^/]*/providers/Microsoft.(ClassicNetwork|Network)/virtualNetworks/[^/]*/subnets/[^/]*$'
          },
          type: {
            name: 'String'
          }
        },
        staticIP: {
          required: false,
          serializedName: 'properties.staticIP',
          constraints: {
            Pattern: '^\d+\.\d+\.\d+\.\d+$'
          },
          type: {
            name: 'String'
          }
        },
        sku: {
          required: false,
          serializedName: 'properties.sku',
          type: {
            name: 'Composite',
            className: 'Sku'
          }
        },
        tags: {
          required: false,
          serializedName: 'properties.tags',
          type: {
            name: 'Dictionary',
            value: {
                required: false,
                serializedName: 'StringElementType',
                type: {
                  name: 'String'
                }
            }
          }
        }
      }
    }
  };
};

module.exports = RedisUpdateParameters;
