/* jshint latedef:false */
/* jshint forin:false */
/* jshint noempty:false */

// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

'use strict';

var util = require('util');
var azureCommon = require('azure-common');
var Service = azureCommon.Service;
var WebResource = azureCommon.WebResource;

var RedisManagementClient = ( /** @lends RedisManagementClient */ function() {
  /**
   * @class
   * .Net client wrapper for the REST API for Azure Redis Cache Management
   * Service
   * Initializes a new instance of the RedisManagementClient class.
   * @constructor
   * 
   * @param {SubscriptionCloudCredentials} credentials Gets subscription
   * credentials which uniquely identify Microsoft Azure subscription. The
   * subscription ID forms part of the URI for every service call.
   * 
   * @param {string} [credentials.subscriptionId]
   * 
   * @param {string} [baseUri] Gets the URI used as the base for all cloud
   * service requests.
   * 
   * @param {Array} filters
   */
  function RedisManagementClient(credentials, baseUri, filters) {
    if (credentials === null || credentials === undefined) {
      throw new Error('credentials cannot be null.');
    }
    
    RedisManagementClient['super_'].call(this, credentials, filters);
    
    this.credentials = credentials;
    this.baseUri = baseUri;
    if (this.baseUri === null || this.baseUri === undefined) {
      this.baseUri = 'https://management.azure.com';
    }
    if (this.apiVersion === null || this.apiVersion === undefined) {
      this.apiVersion = '2015-03-01';
    }
    if (this.longRunningOperationInitialTimeout === null || this.longRunningOperationInitialTimeout === undefined) {
      this.longRunningOperationInitialTimeout = -1;
    }
    if (this.longRunningOperationRetryTimeout === null || this.longRunningOperationRetryTimeout === undefined) {
      this.longRunningOperationRetryTimeout = -1;
    }
    /**
     * Provides an instance of the [RedisOperations](-RedisOperations.html)
     * object.
     * @type {object}
     */
    this.redis = new RedisOperations(this);
  }
  
  util.inherits(RedisManagementClient, Service);
  
  
  return RedisManagementClient;
})();
exports.RedisManagementClient = RedisManagementClient;

var RedisOperations = ( /** @lends RedisOperations */ function() {
  /**
   * @class
   * Operations for managing the redis cache.
   * __NOTE__: An instance of this class is automatically created for an
   * instance of the [RedisManagementClient] {@link
   * RedisManagementClient~RedisManagementClient}.
   * See [redis] {@link RedisManagementClient~RedisManagementClient#redis}.
   * Initializes a new instance of the RedisOperations class.
   * @constructor
   * 
   * @param {RedisManagementClient} client Reference to the service client.
   */
  function RedisOperations(client) {
    this.client = client;
  }
  
  /**
   * Create a redis cache, or replace (overwrite/recreate, with potential
   * downtime) an existing cache
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} name The name of the redis cache.
   * 
   * @param {RedisCreateOrUpdateParameters} parameters Parameters supplied to
   * the CreateOrUpdate redis operation.
   * 
   * @param {RedisProperties} parameters.properties Redis cache properties.
   * 
   * @param {string} parameters.properties.redisVersion The version of Redis to
   * deploy. Valid values: (2.8)
   * 
   * @param {Sku} parameters.properties.sku What sku of redis cache to deploy.
   * 
   * @param {string} parameters.properties.sku.name What type of redis cache to
   * deploy. Valid values: (Basic, Standard)
   * 
   * @param {string} parameters.properties.sku.family Which family to use.
   * Valid values: (C)
   * 
   * @param {number} parameters.properties.sku.capacity What size of redis
   * cache to deploy. Valid values: (0, 1, 2, 3, 4, 5, 6)
   * 
   * @param {object} [parameters.properties.redisConfiguration] All Redis
   * Settings. Few possible keys:
   * <para>maxmemory-delta</para><para>maxmemory-policy</para><para>notify-keyspace-events</para><para>maxmemory-samples</para><para>slowlog-log-slower-than</para><para>slowlog-max-len</para><para>list-max-ziplist-entries</para><para>list-max-ziplist-value</para><para>hash-max-ziplist-entries</para><para>hash-max-ziplist-value</para><para>set-max-intset-entries</para><para>zset-max-ziplist-entries</para><para>zset-max-ziplist-value
   * etc.</para>
   * 
   * @param {boolean} parameters.properties.enableNonSslPort Non-ssl redis
   * server port (6379) is enabled or not.
   * 
   * @param {string} parameters.location Gets or sets the location of the
   * resource.
   * 
   * @param {object} [parameters.tags] Gets or sets the tags attached to the
   * resource.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  RedisOperations.prototype.createOrUpdate = function(resourceGroupName, name, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (name === null || name === undefined) {
      return callback(new Error('name cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.location === null || parameters.location === undefined) {
      return callback(new Error('parameters.location cannot be null.'));
    }
    if (parameters.properties === null || parameters.properties === undefined) {
      return callback(new Error('parameters.properties cannot be null.'));
    }
    if (parameters.properties.enableNonSslPort === null || parameters.properties.enableNonSslPort === undefined) {
      return callback(new Error('parameters.properties.enableNonSslPort cannot be null.'));
    }
    if (parameters.properties.redisVersion === null || parameters.properties.redisVersion === undefined) {
      return callback(new Error('parameters.properties.redisVersion cannot be null.'));
    }
    if (parameters.properties.sku === null || parameters.properties.sku === undefined) {
      return callback(new Error('parameters.properties.sku cannot be null.'));
    }
    if (parameters.properties.sku.capacity === null || parameters.properties.sku.capacity === undefined) {
      return callback(new Error('parameters.properties.sku.capacity cannot be null.'));
    }
    if (parameters.properties.sku.family === null || parameters.properties.sku.family === undefined) {
      return callback(new Error('parameters.properties.sku.family cannot be null.'));
    }
    if (parameters.properties.sku.name === null || parameters.properties.sku.name === undefined) {
      return callback(new Error('parameters.properties.sku.name cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Cache';
    url2 = url2 + '/Redis/';
    url2 = url2 + encodeURIComponent(name);
    var queryParameters = [];
    queryParameters.push('api-version=2015-03-01');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = null;
    
    var redisCreateOrUpdateParametersValue = {};
    requestDoc = redisCreateOrUpdateParametersValue;
    
    var propertiesValue = {};
    redisCreateOrUpdateParametersValue['properties'] = propertiesValue;
    
    propertiesValue['redisVersion'] = parameters.properties.redisVersion;
    
    var skuValue = {};
    propertiesValue['sku'] = skuValue;
    
    skuValue['name'] = parameters.properties.sku.name;
    
    skuValue['family'] = parameters.properties.sku.family;
    
    skuValue['capacity'] = parameters.properties.sku.capacity;
    
    if (parameters.properties.redisConfiguration !== null && parameters.properties.redisConfiguration !== undefined) {
      var redisConfigurationDictionary = {};
      for (var redisConfigurationKey in parameters.properties.redisConfiguration) {
        var redisConfigurationValue = parameters.properties.redisConfiguration[redisConfigurationKey];
        redisConfigurationDictionary[redisConfigurationKey] = redisConfigurationValue;
      }
      propertiesValue['redisConfiguration'] = redisConfigurationDictionary;
    }
    
    propertiesValue['enableNonSslPort'] = parameters.properties.enableNonSslPort;
    
    redisCreateOrUpdateParametersValue['location'] = parameters.location;
    
    if (parameters.tags !== null && parameters.tags !== undefined) {
      var tagsDictionary = {};
      for (var tagsKey in parameters.tags) {
        var tagsValue = parameters.tags[tagsKey];
        tagsDictionary[tagsKey] = tagsValue;
      }
      redisCreateOrUpdateParametersValue['tags'] = tagsDictionary;
    }
    
    requestContent = JSON.stringify(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200 && statusCode !== 201) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200 || statusCode === 201) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var resourceInstance = { tags: {} };
          result.resource = resourceInstance;
          
          var propertiesValue2 = responseDoc['properties'];
          if (propertiesValue2 !== null && propertiesValue2 !== undefined) {
            var propertiesInstance = { redisConfiguration: {} };
            resourceInstance.properties = propertiesInstance;
            
            var accessKeysValue = propertiesValue2['accessKeys'];
            if (accessKeysValue !== null && accessKeysValue !== undefined) {
              var accessKeysInstance = {};
              propertiesInstance.accessKeys = accessKeysInstance;
              
              var primaryKeyValue = accessKeysValue['primaryKey'];
              if (primaryKeyValue !== null && primaryKeyValue !== undefined) {
                var primaryKeyInstance = primaryKeyValue;
                accessKeysInstance.primaryKey = primaryKeyInstance;
              }
              
              var secondaryKeyValue = accessKeysValue['secondaryKey'];
              if (secondaryKeyValue !== null && secondaryKeyValue !== undefined) {
                var secondaryKeyInstance = secondaryKeyValue;
                accessKeysInstance.secondaryKey = secondaryKeyInstance;
              }
            }
            
            var provisioningStateValue = propertiesValue2['provisioningState'];
            if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
              var provisioningStateInstance = provisioningStateValue;
              propertiesInstance.provisioningState = provisioningStateInstance;
            }
            
            var hostNameValue = propertiesValue2['hostName'];
            if (hostNameValue !== null && hostNameValue !== undefined) {
              var hostNameInstance = hostNameValue;
              propertiesInstance.hostName = hostNameInstance;
            }
            
            var portValue = propertiesValue2['port'];
            if (portValue !== null && portValue !== undefined) {
              var portInstance = portValue;
              propertiesInstance.port = portInstance;
            }
            
            var sslPortValue = propertiesValue2['sslPort'];
            if (sslPortValue !== null && sslPortValue !== undefined) {
              var sslPortInstance = sslPortValue;
              propertiesInstance.sslPort = sslPortInstance;
            }
            
            var redisVersionValue = propertiesValue2['redisVersion'];
            if (redisVersionValue !== null && redisVersionValue !== undefined) {
              var redisVersionInstance = redisVersionValue;
              propertiesInstance.redisVersion = redisVersionInstance;
            }
            
            var skuValue2 = propertiesValue2['sku'];
            if (skuValue2 !== null && skuValue2 !== undefined) {
              var skuInstance = {};
              propertiesInstance.sku = skuInstance;
              
              var nameValue = skuValue2['name'];
              if (nameValue !== null && nameValue !== undefined) {
                var nameInstance = nameValue;
                skuInstance.name = nameInstance;
              }
              
              var familyValue = skuValue2['family'];
              if (familyValue !== null && familyValue !== undefined) {
                var familyInstance = familyValue;
                skuInstance.family = familyInstance;
              }
              
              var capacityValue = skuValue2['capacity'];
              if (capacityValue !== null && capacityValue !== undefined) {
                var capacityInstance = capacityValue;
                skuInstance.capacity = capacityInstance;
              }
            }
            
            var redisConfigurationSequenceElement = propertiesValue2['redisConfiguration'];
            if (redisConfigurationSequenceElement !== null && redisConfigurationSequenceElement !== undefined) {
              for (var property in redisConfigurationSequenceElement) {
                var redisConfigurationKey2 = property;
                var redisConfigurationValue2 = redisConfigurationSequenceElement[property];
                propertiesInstance.redisConfiguration[redisConfigurationKey2] = redisConfigurationValue2;
              }
            }
            
            var enableNonSslPortValue = propertiesValue2['enableNonSslPort'];
            if (enableNonSslPortValue !== null && enableNonSslPortValue !== undefined) {
              var enableNonSslPortInstance = enableNonSslPortValue;
              propertiesInstance.enableNonSslPort = enableNonSslPortInstance;
            }
          }
          
          var idValue = responseDoc['id'];
          if (idValue !== null && idValue !== undefined) {
            var idInstance = idValue;
            resourceInstance.id = idInstance;
          }
          
          var nameValue2 = responseDoc['name'];
          if (nameValue2 !== null && nameValue2 !== undefined) {
            var nameInstance2 = nameValue2;
            resourceInstance.name = nameInstance2;
          }
          
          var typeValue = responseDoc['type'];
          if (typeValue !== null && typeValue !== undefined) {
            var typeInstance = typeValue;
            resourceInstance.type = typeInstance;
          }
          
          var locationValue = responseDoc['location'];
          if (locationValue !== null && locationValue !== undefined) {
            var locationInstance = locationValue;
            resourceInstance.location = locationInstance;
          }
          
          var tagsSequenceElement = responseDoc['tags'];
          if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
            for (var property2 in tagsSequenceElement) {
              var tagsKey2 = property2;
              var tagsValue2 = tagsSequenceElement[property2];
              resourceInstance.tags[tagsKey2] = tagsValue2;
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Deletes a redis cache. This operation takes a while to complete.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} name The name of the redis cache.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  RedisOperations.prototype.deleteMethod = function(resourceGroupName, name, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (name === null || name === undefined) {
      return callback(new Error('name cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Cache';
    url2 = url2 + '/Redis/';
    url2 = url2 + encodeURIComponent(name);
    var queryParameters = [];
    queryParameters.push('api-version=2015-03-01');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'DELETE';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200 && statusCode !== 202 && statusCode !== 404) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Gets a redis cache (resource description).
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} name The name of the redis cache.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  RedisOperations.prototype.get = function(resourceGroupName, name, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (name === null || name === undefined) {
      return callback(new Error('name cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Cache';
    url2 = url2 + '/Redis/';
    url2 = url2 + encodeURIComponent(name);
    var queryParameters = [];
    queryParameters.push('api-version=2015-03-01');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var resourceInstance = { tags: {} };
          result.resource = resourceInstance;
          
          var propertiesValue = responseDoc['properties'];
          if (propertiesValue !== null && propertiesValue !== undefined) {
            var propertiesInstance = { redisConfiguration: {} };
            resourceInstance.properties = propertiesInstance;
            
            var provisioningStateValue = propertiesValue['provisioningState'];
            if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
              var provisioningStateInstance = provisioningStateValue;
              propertiesInstance.provisioningState = provisioningStateInstance;
            }
            
            var hostNameValue = propertiesValue['hostName'];
            if (hostNameValue !== null && hostNameValue !== undefined) {
              var hostNameInstance = hostNameValue;
              propertiesInstance.hostName = hostNameInstance;
            }
            
            var portValue = propertiesValue['port'];
            if (portValue !== null && portValue !== undefined) {
              var portInstance = portValue;
              propertiesInstance.port = portInstance;
            }
            
            var sslPortValue = propertiesValue['sslPort'];
            if (sslPortValue !== null && sslPortValue !== undefined) {
              var sslPortInstance = sslPortValue;
              propertiesInstance.sslPort = sslPortInstance;
            }
            
            var redisVersionValue = propertiesValue['redisVersion'];
            if (redisVersionValue !== null && redisVersionValue !== undefined) {
              var redisVersionInstance = redisVersionValue;
              propertiesInstance.redisVersion = redisVersionInstance;
            }
            
            var skuValue = propertiesValue['sku'];
            if (skuValue !== null && skuValue !== undefined) {
              var skuInstance = {};
              propertiesInstance.sku = skuInstance;
              
              var nameValue = skuValue['name'];
              if (nameValue !== null && nameValue !== undefined) {
                var nameInstance = nameValue;
                skuInstance.name = nameInstance;
              }
              
              var familyValue = skuValue['family'];
              if (familyValue !== null && familyValue !== undefined) {
                var familyInstance = familyValue;
                skuInstance.family = familyInstance;
              }
              
              var capacityValue = skuValue['capacity'];
              if (capacityValue !== null && capacityValue !== undefined) {
                var capacityInstance = capacityValue;
                skuInstance.capacity = capacityInstance;
              }
            }
            
            var redisConfigurationSequenceElement = propertiesValue['redisConfiguration'];
            if (redisConfigurationSequenceElement !== null && redisConfigurationSequenceElement !== undefined) {
              for (var property in redisConfigurationSequenceElement) {
                var redisConfigurationKey = property;
                var redisConfigurationValue = redisConfigurationSequenceElement[property];
                propertiesInstance.redisConfiguration[redisConfigurationKey] = redisConfigurationValue;
              }
            }
            
            var enableNonSslPortValue = propertiesValue['enableNonSslPort'];
            if (enableNonSslPortValue !== null && enableNonSslPortValue !== undefined) {
              var enableNonSslPortInstance = enableNonSslPortValue;
              propertiesInstance.enableNonSslPort = enableNonSslPortInstance;
            }
          }
          
          var idValue = responseDoc['id'];
          if (idValue !== null && idValue !== undefined) {
            var idInstance = idValue;
            resourceInstance.id = idInstance;
          }
          
          var nameValue2 = responseDoc['name'];
          if (nameValue2 !== null && nameValue2 !== undefined) {
            var nameInstance2 = nameValue2;
            resourceInstance.name = nameInstance2;
          }
          
          var typeValue = responseDoc['type'];
          if (typeValue !== null && typeValue !== undefined) {
            var typeInstance = typeValue;
            resourceInstance.type = typeInstance;
          }
          
          var locationValue = responseDoc['location'];
          if (locationValue !== null && locationValue !== undefined) {
            var locationInstance = locationValue;
            resourceInstance.location = locationInstance;
          }
          
          var tagsSequenceElement = responseDoc['tags'];
          if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
            for (var property2 in tagsSequenceElement) {
              var tagsKey = property2;
              var tagsValue = tagsSequenceElement[property2];
              resourceInstance.tags[tagsKey] = tagsValue;
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Gets all redis caches in a resource group (if provided) otherwise all in
   * subscription.
   * 
   * @param {string} [resourceGroupName] The name of the resource group.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  RedisOperations.prototype.list = function(resourceGroupName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    if (resourceGroupName !== null && resourceGroupName !== undefined) {
      url2 = url2 + '/resourceGroups/' + encodeURIComponent(resourceGroupName);
    }
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Cache';
    url2 = url2 + '/Redis/';
    var queryParameters = [];
    queryParameters.push('api-version=2015-03-01');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = { value: [] };
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var valueArray = responseDoc['value'];
          if (valueArray !== null && valueArray !== undefined) {
            for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var valueValue = valueArray[loweredIndex1];
              var redisResourceInstance = { tags: {} };
              result.value.push(redisResourceInstance);
              
              var propertiesValue = valueValue['properties'];
              if (propertiesValue !== null && propertiesValue !== undefined) {
                var propertiesInstance = { redisConfiguration: {} };
                redisResourceInstance.properties = propertiesInstance;
                
                var provisioningStateValue = propertiesValue['provisioningState'];
                if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
                  var provisioningStateInstance = provisioningStateValue;
                  propertiesInstance.provisioningState = provisioningStateInstance;
                }
                
                var hostNameValue = propertiesValue['hostName'];
                if (hostNameValue !== null && hostNameValue !== undefined) {
                  var hostNameInstance = hostNameValue;
                  propertiesInstance.hostName = hostNameInstance;
                }
                
                var portValue = propertiesValue['port'];
                if (portValue !== null && portValue !== undefined) {
                  var portInstance = portValue;
                  propertiesInstance.port = portInstance;
                }
                
                var sslPortValue = propertiesValue['sslPort'];
                if (sslPortValue !== null && sslPortValue !== undefined) {
                  var sslPortInstance = sslPortValue;
                  propertiesInstance.sslPort = sslPortInstance;
                }
                
                var redisVersionValue = propertiesValue['redisVersion'];
                if (redisVersionValue !== null && redisVersionValue !== undefined) {
                  var redisVersionInstance = redisVersionValue;
                  propertiesInstance.redisVersion = redisVersionInstance;
                }
                
                var skuValue = propertiesValue['sku'];
                if (skuValue !== null && skuValue !== undefined) {
                  var skuInstance = {};
                  propertiesInstance.sku = skuInstance;
                  
                  var nameValue = skuValue['name'];
                  if (nameValue !== null && nameValue !== undefined) {
                    var nameInstance = nameValue;
                    skuInstance.name = nameInstance;
                  }
                  
                  var familyValue = skuValue['family'];
                  if (familyValue !== null && familyValue !== undefined) {
                    var familyInstance = familyValue;
                    skuInstance.family = familyInstance;
                  }
                  
                  var capacityValue = skuValue['capacity'];
                  if (capacityValue !== null && capacityValue !== undefined) {
                    var capacityInstance = capacityValue;
                    skuInstance.capacity = capacityInstance;
                  }
                }
                
                var redisConfigurationSequenceElement = propertiesValue['redisConfiguration'];
                if (redisConfigurationSequenceElement !== null && redisConfigurationSequenceElement !== undefined) {
                  for (var property in redisConfigurationSequenceElement) {
                    var redisConfigurationKey = property;
                    var redisConfigurationValue = redisConfigurationSequenceElement[property];
                    propertiesInstance.redisConfiguration[redisConfigurationKey] = redisConfigurationValue;
                  }
                }
                
                var enableNonSslPortValue = propertiesValue['enableNonSslPort'];
                if (enableNonSslPortValue !== null && enableNonSslPortValue !== undefined) {
                  var enableNonSslPortInstance = enableNonSslPortValue;
                  propertiesInstance.enableNonSslPort = enableNonSslPortInstance;
                }
              }
              
              var idValue = valueValue['id'];
              if (idValue !== null && idValue !== undefined) {
                var idInstance = idValue;
                redisResourceInstance.id = idInstance;
              }
              
              var nameValue2 = valueValue['name'];
              if (nameValue2 !== null && nameValue2 !== undefined) {
                var nameInstance2 = nameValue2;
                redisResourceInstance.name = nameInstance2;
              }
              
              var typeValue = valueValue['type'];
              if (typeValue !== null && typeValue !== undefined) {
                var typeInstance = typeValue;
                redisResourceInstance.type = typeInstance;
              }
              
              var locationValue = valueValue['location'];
              if (locationValue !== null && locationValue !== undefined) {
                var locationInstance = locationValue;
                redisResourceInstance.location = locationInstance;
              }
              
              var tagsSequenceElement = valueValue['tags'];
              if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
                for (var property2 in tagsSequenceElement) {
                  var tagsKey = property2;
                  var tagsValue = tagsSequenceElement[property2];
                  redisResourceInstance.tags[tagsKey] = tagsValue;
                }
              }
            }
          }
          
          var nextLinkValue = responseDoc['nextLink'];
          if (nextLinkValue !== null && nextLinkValue !== undefined) {
            var nextLinkInstance = nextLinkValue;
            result.nextLink = nextLinkInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Retrieve a redis cache's access keys. This operation requires write
   * permission to the cache resource.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} name The name of the redis cache.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  RedisOperations.prototype.listKeys = function(resourceGroupName, name, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (name === null || name === undefined) {
      return callback(new Error('name cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Cache';
    url2 = url2 + '/Redis/';
    url2 = url2 + encodeURIComponent(name);
    url2 = url2 + '/listKeys';
    var queryParameters = [];
    queryParameters.push('api-version=2015-03-01');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var primaryKeyValue = responseDoc['primaryKey'];
          if (primaryKeyValue !== null && primaryKeyValue !== undefined) {
            var primaryKeyInstance = primaryKeyValue;
            result.primaryKey = primaryKeyInstance;
          }
          
          var secondaryKeyValue = responseDoc['secondaryKey'];
          if (secondaryKeyValue !== null && secondaryKeyValue !== undefined) {
            var secondaryKeyInstance = secondaryKeyValue;
            result.secondaryKey = secondaryKeyInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Gets all redis caches using next link.
   * 
   * @param {string} nextLink NextLink from the previous successful call to
   * List operation.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  RedisOperations.prototype.listNext = function(nextLink, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (nextLink === null || nextLink === undefined) {
      return callback(new Error('nextLink cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + nextLink;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = { value: [] };
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var valueArray = responseDoc['value'];
          if (valueArray !== null && valueArray !== undefined) {
            for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var valueValue = valueArray[loweredIndex1];
              var redisResourceInstance = { tags: {} };
              result.value.push(redisResourceInstance);
              
              var propertiesValue = valueValue['properties'];
              if (propertiesValue !== null && propertiesValue !== undefined) {
                var propertiesInstance = { redisConfiguration: {} };
                redisResourceInstance.properties = propertiesInstance;
                
                var provisioningStateValue = propertiesValue['provisioningState'];
                if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
                  var provisioningStateInstance = provisioningStateValue;
                  propertiesInstance.provisioningState = provisioningStateInstance;
                }
                
                var hostNameValue = propertiesValue['hostName'];
                if (hostNameValue !== null && hostNameValue !== undefined) {
                  var hostNameInstance = hostNameValue;
                  propertiesInstance.hostName = hostNameInstance;
                }
                
                var portValue = propertiesValue['port'];
                if (portValue !== null && portValue !== undefined) {
                  var portInstance = portValue;
                  propertiesInstance.port = portInstance;
                }
                
                var sslPortValue = propertiesValue['sslPort'];
                if (sslPortValue !== null && sslPortValue !== undefined) {
                  var sslPortInstance = sslPortValue;
                  propertiesInstance.sslPort = sslPortInstance;
                }
                
                var redisVersionValue = propertiesValue['redisVersion'];
                if (redisVersionValue !== null && redisVersionValue !== undefined) {
                  var redisVersionInstance = redisVersionValue;
                  propertiesInstance.redisVersion = redisVersionInstance;
                }
                
                var skuValue = propertiesValue['sku'];
                if (skuValue !== null && skuValue !== undefined) {
                  var skuInstance = {};
                  propertiesInstance.sku = skuInstance;
                  
                  var nameValue = skuValue['name'];
                  if (nameValue !== null && nameValue !== undefined) {
                    var nameInstance = nameValue;
                    skuInstance.name = nameInstance;
                  }
                  
                  var familyValue = skuValue['family'];
                  if (familyValue !== null && familyValue !== undefined) {
                    var familyInstance = familyValue;
                    skuInstance.family = familyInstance;
                  }
                  
                  var capacityValue = skuValue['capacity'];
                  if (capacityValue !== null && capacityValue !== undefined) {
                    var capacityInstance = capacityValue;
                    skuInstance.capacity = capacityInstance;
                  }
                }
                
                var redisConfigurationSequenceElement = propertiesValue['redisConfiguration'];
                if (redisConfigurationSequenceElement !== null && redisConfigurationSequenceElement !== undefined) {
                  for (var property in redisConfigurationSequenceElement) {
                    var redisConfigurationKey = property;
                    var redisConfigurationValue = redisConfigurationSequenceElement[property];
                    propertiesInstance.redisConfiguration[redisConfigurationKey] = redisConfigurationValue;
                  }
                }
                
                var enableNonSslPortValue = propertiesValue['enableNonSslPort'];
                if (enableNonSslPortValue !== null && enableNonSslPortValue !== undefined) {
                  var enableNonSslPortInstance = enableNonSslPortValue;
                  propertiesInstance.enableNonSslPort = enableNonSslPortInstance;
                }
              }
              
              var idValue = valueValue['id'];
              if (idValue !== null && idValue !== undefined) {
                var idInstance = idValue;
                redisResourceInstance.id = idInstance;
              }
              
              var nameValue2 = valueValue['name'];
              if (nameValue2 !== null && nameValue2 !== undefined) {
                var nameInstance2 = nameValue2;
                redisResourceInstance.name = nameInstance2;
              }
              
              var typeValue = valueValue['type'];
              if (typeValue !== null && typeValue !== undefined) {
                var typeInstance = typeValue;
                redisResourceInstance.type = typeInstance;
              }
              
              var locationValue = valueValue['location'];
              if (locationValue !== null && locationValue !== undefined) {
                var locationInstance = locationValue;
                redisResourceInstance.location = locationInstance;
              }
              
              var tagsSequenceElement = valueValue['tags'];
              if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
                for (var property2 in tagsSequenceElement) {
                  var tagsKey = property2;
                  var tagsValue = tagsSequenceElement[property2];
                  redisResourceInstance.tags[tagsKey] = tagsValue;
                }
              }
            }
          }
          
          var nextLinkValue = responseDoc['nextLink'];
          if (nextLinkValue !== null && nextLinkValue !== undefined) {
            var nextLinkInstance = nextLinkValue;
            result.nextLink = nextLinkInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Regenerate redis cache's access keys. This operation requires write
   * permission to the cache resource.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} name The name of the redis cache.
   * 
   * @param {RedisRegenerateKeyParameters} parameters Specifies which key to
   * reset.
   * 
   * @param {RedisKeyType} parameters.keyType Which redis access key to reset
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  RedisOperations.prototype.regenerateKey = function(resourceGroupName, name, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (name === null || name === undefined) {
      return callback(new Error('name cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.keyType === null || parameters.keyType === undefined) {
      return callback(new Error('parameters.keyType cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Cache';
    url2 = url2 + '/Redis/';
    url2 = url2 + encodeURIComponent(name);
    url2 = url2 + '/regenerateKey';
    var queryParameters = [];
    queryParameters.push('api-version=2015-03-01');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = null;
    
    var redisRegenerateKeyParametersValue = {};
    requestDoc = redisRegenerateKeyParametersValue;
    
    redisRegenerateKeyParametersValue['keyType'] = parameters.keyType !== null && parameters.keyType !== undefined ? parameters.keyType.toString() : 'Primary';
    
    requestContent = JSON.stringify(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  return RedisOperations;
})();
