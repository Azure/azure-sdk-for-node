/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback } from 'ms-rest';
import * as models from '../models';


/**
 * @class
 * ClassicAdministrators
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the AuthorizationManagementClient.
 */
export interface ClassicAdministrators {

    /**
     * Gets service administrator, account administrator, and co-administrators
     * for the subscription.
     *
     * @param {string} apiVersion The API version to use for this operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    list(apiVersion: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ClassicAdministratorListResult>): void;
    list(apiVersion: string, callback: ServiceCallback<models.ClassicAdministratorListResult>): void;

    /**
     * Gets service administrator, account administrator, and co-administrators
     * for the subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ClassicAdministratorListResult>): void;
    listNext(nextPageLink: string, callback: ServiceCallback<models.ClassicAdministratorListResult>): void;
}

/**
 * @class
 * Permissions
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the AuthorizationManagementClient.
 */
export interface Permissions {

    /**
     * Gets all permissions the caller has for a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group to get the
     * permissions for. The name is case insensitive.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listForResourceGroup(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PermissionGetResult>): void;
    listForResourceGroup(resourceGroupName: string, callback: ServiceCallback<models.PermissionGetResult>): void;

    /**
     * Gets all permissions the caller has for a resource.
     *
     * @param {string} resourceGroupName The name of the resource group containing
     * the resource. The name is case insensitive.
     * 
     * @param {string} resourceProviderNamespace The namespace of the resource
     * provider.
     * 
     * @param {string} parentResourcePath The parent resource identity.
     * 
     * @param {string} resourceType The resource type of the resource.
     * 
     * @param {string} resourceName The name of the resource to get the
     * permissions for.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listForResource(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PermissionGetResult>): void;
    listForResource(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, callback: ServiceCallback<models.PermissionGetResult>): void;

    /**
     * Gets all permissions the caller has for a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listForResourceGroupNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PermissionGetResult>): void;
    listForResourceGroupNext(nextPageLink: string, callback: ServiceCallback<models.PermissionGetResult>): void;

    /**
     * Gets all permissions the caller has for a resource.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listForResourceNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PermissionGetResult>): void;
    listForResourceNext(nextPageLink: string, callback: ServiceCallback<models.PermissionGetResult>): void;
}

/**
 * @class
 * ProviderOperationsMetadataOperations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the AuthorizationManagementClient.
 */
export interface ProviderOperationsMetadataOperations {

    /**
     * Gets provider operations metadata for the specified resource provider.
     *
     * @param {string} resourceProviderNamespace The namespace of the resource
     * provider.
     * 
     * @param {string} apiVersion The API version to use for the operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.expand] Specifies whether to expand the values.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(resourceProviderNamespace: string, apiVersion: string, options: { expand? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProviderOperationsMetadata>): void;
    get(resourceProviderNamespace: string, apiVersion: string, callback: ServiceCallback<models.ProviderOperationsMetadata>): void;

    /**
     * Gets provider operations metadata for all resource providers.
     *
     * @param {string} apiVersion The API version to use for this operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.expand] Specifies whether to expand the values.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    list(apiVersion: string, options: { expand? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProviderOperationsMetadataListResult>): void;
    list(apiVersion: string, callback: ServiceCallback<models.ProviderOperationsMetadataListResult>): void;

    /**
     * Gets provider operations metadata for all resource providers.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProviderOperationsMetadataListResult>): void;
    listNext(nextPageLink: string, callback: ServiceCallback<models.ProviderOperationsMetadataListResult>): void;
}

/**
 * @class
 * RoleAssignments
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the AuthorizationManagementClient.
 */
export interface RoleAssignments {

    /**
     * Gets role assignments for a resource.
     *
     * @param {string} resourceGroupName The name of the resource group.
     * 
     * @param {string} resourceProviderNamespace The namespace of the resource
     * provider.
     * 
     * @param {string} parentResourcePath The parent resource identity.
     * 
     * @param {string} resourceType The resource type of the resource.
     * 
     * @param {string} resourceName The name of the resource to get role
     * assignments for.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.filter] The filter to apply on the operation. Use
     * $filter=atScope() to return all role assignments at or above the scope.
     * Use $filter=principalId eq {id} to return all role assignments at, above
     * or below the scope for the specified principal.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listForResource(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, options: { filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RoleAssignmentListResult>): void;
    listForResource(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, callback: ServiceCallback<models.RoleAssignmentListResult>): void;

    /**
     * Gets role assignments for a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.filter] The filter to apply on the operation. Use
     * $filter=atScope() to return all role assignments at or above the scope.
     * Use $filter=principalId eq {id} to return all role assignments at, above
     * or below the scope for the specified principal.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listForResourceGroup(resourceGroupName: string, options: { filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RoleAssignmentListResult>): void;
    listForResourceGroup(resourceGroupName: string, callback: ServiceCallback<models.RoleAssignmentListResult>): void;

    /**
     * Deletes a role assignment.
     *
     * @param {string} scope The scope of the role assignment to delete.
     * 
     * @param {string} roleAssignmentName The name of the role assignment to
     * delete.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteMethod(scope: string, roleAssignmentName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RoleAssignment>): void;
    deleteMethod(scope: string, roleAssignmentName: string, callback: ServiceCallback<models.RoleAssignment>): void;

    /**
     * Creates a role assignment.
     *
     * @param {string} scope The scope of the role assignment to create. The scope
     * can be any REST resource instance. For example, use
     * '/subscriptions/{subscription-id}/' for a subscription,
     * '/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}'
     * for a resource group, and
     * '/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/providers/{resource-provider}/{resource-type}/{resource-name}'
     * for a resource.
     * 
     * @param {string} roleAssignmentName The name of the role assignment to
     * create. It can be any valid GUID.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.properties] Role assignment properties.
     * 
     * @param {string} [options.properties.roleDefinitionId] The role definition
     * ID used in the role assignment.
     * 
     * @param {string} [options.properties.principalId] The principal ID assigned
     * to the role. This maps to the ID inside the Active Directory. It can point
     * to a user, service principal, or security group.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    create(scope: string, roleAssignmentName: string, options: { properties? : models.RoleAssignmentProperties, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RoleAssignment>): void;
    create(scope: string, roleAssignmentName: string, callback: ServiceCallback<models.RoleAssignment>): void;

    /**
     * Get the specified role assignment.
     *
     * @param {string} scope The scope of the role assignment.
     * 
     * @param {string} roleAssignmentName The name of the role assignment to get.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(scope: string, roleAssignmentName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RoleAssignment>): void;
    get(scope: string, roleAssignmentName: string, callback: ServiceCallback<models.RoleAssignment>): void;

    /**
     * Deletes a role assignment.
     *
     * @param {string} roleAssignmentId The ID of the role assignment to delete.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteById(roleAssignmentId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RoleAssignment>): void;
    deleteById(roleAssignmentId: string, callback: ServiceCallback<models.RoleAssignment>): void;

    /**
     * Creates a role assignment by ID.
     *
     * @param {string} roleAssignmentId The ID of the role assignment to create.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.properties] Role assignment properties.
     * 
     * @param {string} [options.properties.roleDefinitionId] The role definition
     * ID used in the role assignment.
     * 
     * @param {string} [options.properties.principalId] The principal ID assigned
     * to the role. This maps to the ID inside the Active Directory. It can point
     * to a user, service principal, or security group.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createById(roleAssignmentId: string, options: { properties? : models.RoleAssignmentProperties, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RoleAssignment>): void;
    createById(roleAssignmentId: string, callback: ServiceCallback<models.RoleAssignment>): void;

    /**
     * Gets a role assignment by ID.
     *
     * @param {string} roleAssignmentId The ID of the role assignment to get.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getById(roleAssignmentId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RoleAssignment>): void;
    getById(roleAssignmentId: string, callback: ServiceCallback<models.RoleAssignment>): void;

    /**
     * Gets all role assignments for the subscription.
     *
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.filter] The filter to apply on the operation. Use
     * $filter=atScope() to return all role assignments at or above the scope.
     * Use $filter=principalId eq {id} to return all role assignments at, above
     * or below the scope for the specified principal.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    list(options: { filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RoleAssignmentListResult>): void;
    list(callback: ServiceCallback<models.RoleAssignmentListResult>): void;

    /**
     * Gets role assignments for a scope.
     *
     * @param {string} scope The scope of the role assignments.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.filter] The filter to apply on the operation. Use
     * $filter=atScope() to return all role assignments at or above the scope.
     * Use $filter=principalId eq {id} to return all role assignments at, above
     * or below the scope for the specified principal.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listForScope(scope: string, options: { filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RoleAssignmentListResult>): void;
    listForScope(scope: string, callback: ServiceCallback<models.RoleAssignmentListResult>): void;

    /**
     * Gets role assignments for a resource.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listForResourceNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RoleAssignmentListResult>): void;
    listForResourceNext(nextPageLink: string, callback: ServiceCallback<models.RoleAssignmentListResult>): void;

    /**
     * Gets role assignments for a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listForResourceGroupNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RoleAssignmentListResult>): void;
    listForResourceGroupNext(nextPageLink: string, callback: ServiceCallback<models.RoleAssignmentListResult>): void;

    /**
     * Gets all role assignments for the subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RoleAssignmentListResult>): void;
    listNext(nextPageLink: string, callback: ServiceCallback<models.RoleAssignmentListResult>): void;

    /**
     * Gets role assignments for a scope.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listForScopeNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RoleAssignmentListResult>): void;
    listForScopeNext(nextPageLink: string, callback: ServiceCallback<models.RoleAssignmentListResult>): void;
}

/**
 * @class
 * RoleDefinitions
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the AuthorizationManagementClient.
 */
export interface RoleDefinitions {

    /**
     * Deletes a role definition.
     *
     * @param {string} scope The scope of the role definition.
     * 
     * @param {string} roleDefinitionId The ID of the role definition to delete.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteMethod(scope: string, roleDefinitionId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RoleDefinition>): void;
    deleteMethod(scope: string, roleDefinitionId: string, callback: ServiceCallback<models.RoleDefinition>): void;

    /**
     * Get role definition by name (GUID).
     *
     * @param {string} scope The scope of the role definition.
     * 
     * @param {string} roleDefinitionId The ID of the role definition.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(scope: string, roleDefinitionId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RoleDefinition>): void;
    get(scope: string, roleDefinitionId: string, callback: ServiceCallback<models.RoleDefinition>): void;

    /**
     * Creates or updates a role definition.
     *
     * @param {string} scope The scope of the role definition.
     * 
     * @param {string} roleDefinitionId The ID of the role definition.
     * 
     * @param {object} roleDefinition The values for the role definition.
     * 
     * @param {string} [roleDefinition.id] The role definition ID.
     * 
     * @param {string} [roleDefinition.name] The role definition name.
     * 
     * @param {string} [roleDefinition.type] The role definition type.
     * 
     * @param {object} [roleDefinition.properties] Role definition properties.
     * 
     * @param {string} [roleDefinition.properties.roleName] The role name.
     * 
     * @param {string} [roleDefinition.properties.description] The role definition
     * description.
     * 
     * @param {string} [roleDefinition.properties.type] The role type.
     * 
     * @param {array} [roleDefinition.properties.permissions] Role definition
     * permissions.
     * 
     * @param {array} [roleDefinition.properties.assignableScopes] Role definition
     * assignable scopes.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createOrUpdate(scope: string, roleDefinitionId: string, roleDefinition: models.RoleDefinition, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RoleDefinition>): void;
    createOrUpdate(scope: string, roleDefinitionId: string, roleDefinition: models.RoleDefinition, callback: ServiceCallback<models.RoleDefinition>): void;

    /**
     * Gets a role definition by ID.
     *
     * @param {string} roleDefinitionId The fully qualified role definition ID to
     * get.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getById(roleDefinitionId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RoleDefinition>): void;
    getById(roleDefinitionId: string, callback: ServiceCallback<models.RoleDefinition>): void;

    /**
     * Get all role definitions that are applicable at scope and above.
     *
     * @param {string} scope The scope of the role definition.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.filter] The filter to apply on the operation. Use
     * atScopeAndBelow filter to search below the given scope as well.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    list(scope: string, options: { filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RoleDefinitionListResult>): void;
    list(scope: string, callback: ServiceCallback<models.RoleDefinitionListResult>): void;

    /**
     * Get all role definitions that are applicable at scope and above.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RoleDefinitionListResult>): void;
    listNext(nextPageLink: string, callback: ServiceCallback<models.RoleDefinitionListResult>): void;
}
