/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.15.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback } from 'ms-rest';
import * as models from '../models';


/**
 * @class
 * ClassicAdministrators
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the AuthorizationManagementClient.
 */
export interface ClassicAdministrators {

    /**
     * Gets a list of classic administrators for the subscription.
     *
     * @param {string} apiVersion
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    list(apiVersion: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ClassicAdministratorListResult>): void;
    list(apiVersion: string, callback: ServiceCallback<models.ClassicAdministratorListResult>): void;

    /**
     * Gets a list of classic administrators for the subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ClassicAdministratorListResult>): void;
    listNext(nextPageLink: string, callback: ServiceCallback<models.ClassicAdministratorListResult>): void;
}

/**
 * @class
 * Permissions
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the AuthorizationManagementClient.
 */
export interface Permissions {

    /**
     * Gets a resource group permissions.
     *
     * @param {string} resourceGroupName Name of the resource group to get the
     * permissions for.The name is case insensitive.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listForResourceGroup(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PermissionGetResult>): void;
    listForResourceGroup(resourceGroupName: string, callback: ServiceCallback<models.PermissionGetResult>): void;

    /**
     * Gets a resource permissions.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     * 
     * @param {string} resourceProviderNamespace Resource
     * 
     * @param {string} parentResourcePath Resource
     * 
     * @param {string} resourceType Resource
     * 
     * @param {string} resourceName Resource
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listForResource(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PermissionGetResult>): void;
    listForResource(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, callback: ServiceCallback<models.PermissionGetResult>): void;

    /**
     * Gets a resource group permissions.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listForResourceGroupNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PermissionGetResult>): void;
    listForResourceGroupNext(nextPageLink: string, callback: ServiceCallback<models.PermissionGetResult>): void;

    /**
     * Gets a resource permissions.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listForResourceNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PermissionGetResult>): void;
    listForResourceNext(nextPageLink: string, callback: ServiceCallback<models.PermissionGetResult>): void;
}

/**
 * @class
 * ProviderOperationsMetadataOperations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the AuthorizationManagementClient.
 */
export interface ProviderOperationsMetadataOperations {

    /**
     * Gets provider operations metadata
     *
     * @param {string} resourceProviderNamespace Namespace of the resource
     * provider.
     * 
     * @param {string} apiVersion
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.expand]
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(resourceProviderNamespace: string, apiVersion: string, options: { expand? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProviderOperationsMetadata>): void;
    get(resourceProviderNamespace: string, apiVersion: string, callback: ServiceCallback<models.ProviderOperationsMetadata>): void;

    /**
     * Gets provider operations metadata list
     *
     * @param {string} apiVersion
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.expand]
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    list(apiVersion: string, options: { expand? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProviderOperationsMetadataListResult>): void;
    list(apiVersion: string, callback: ServiceCallback<models.ProviderOperationsMetadataListResult>): void;

    /**
     * Gets provider operations metadata list
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProviderOperationsMetadataListResult>): void;
    listNext(nextPageLink: string, callback: ServiceCallback<models.ProviderOperationsMetadataListResult>): void;
}

/**
 * @class
 * RoleAssignments
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the AuthorizationManagementClient.
 */
export interface RoleAssignments {

    /**
     * Gets role assignments of the resource.
     *
     * @param {string} resourceGroupName The name of the resource group.
     * 
     * @param {string} resourceProviderNamespace Resource identity.
     * 
     * @param {string} parentResourcePath Resource identity.
     * 
     * @param {string} resourceType Resource identity.
     * 
     * @param {string} resourceName Resource identity.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.filter] The filter to apply on the operation.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listForResource(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, options: { filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RoleAssignmentListResult>): void;
    listForResource(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, callback: ServiceCallback<models.RoleAssignmentListResult>): void;

    /**
     * Gets role assignments of the resource group.
     *
     * @param {string} resourceGroupName Resource group name.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.filter] The filter to apply on the operation.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listForResourceGroup(resourceGroupName: string, options: { filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RoleAssignmentListResult>): void;
    listForResourceGroup(resourceGroupName: string, callback: ServiceCallback<models.RoleAssignmentListResult>): void;

    /**
     * Delete role assignment.
     *
     * @param {string} scope Scope.
     * 
     * @param {string} roleAssignmentName Role assignment name.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteMethod(scope: string, roleAssignmentName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RoleAssignment>): void;
    deleteMethod(scope: string, roleAssignmentName: string, callback: ServiceCallback<models.RoleAssignment>): void;

    /**
     * Create role assignment.
     *
     * @param {string} scope Scope.
     * 
     * @param {string} roleAssignmentName Role assignment name.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.properties] Gets or sets role assignment
     * properties.
     * 
     * @param {string} [options.properties.roleDefinitionId] Gets or sets role
     * definition id.
     * 
     * @param {string} [options.properties.principalId] Gets or sets principal Id.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    create(scope: string, roleAssignmentName: string, options: { properties? : models.RoleAssignmentProperties, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RoleAssignment>): void;
    create(scope: string, roleAssignmentName: string, callback: ServiceCallback<models.RoleAssignment>): void;

    /**
     * Get single role assignment.
     *
     * @param {string} scope Scope.
     * 
     * @param {string} roleAssignmentName Role assignment name.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(scope: string, roleAssignmentName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RoleAssignment>): void;
    get(scope: string, roleAssignmentName: string, callback: ServiceCallback<models.RoleAssignment>): void;

    /**
     * Delete role assignment.
     *
     * @param {string} roleAssignmentId Role assignment Id
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteById(roleAssignmentId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RoleAssignment>): void;
    deleteById(roleAssignmentId: string, callback: ServiceCallback<models.RoleAssignment>): void;

    /**
     * Create role assignment by Id.
     *
     * @param {string} roleAssignmentId Role assignment Id
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.properties] Gets or sets role assignment
     * properties.
     * 
     * @param {string} [options.properties.roleDefinitionId] Gets or sets role
     * definition id.
     * 
     * @param {string} [options.properties.principalId] Gets or sets principal Id.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createById(roleAssignmentId: string, options: { properties? : models.RoleAssignmentProperties, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RoleAssignment>): void;
    createById(roleAssignmentId: string, callback: ServiceCallback<models.RoleAssignment>): void;

    /**
     * Get single role assignment.
     *
     * @param {string} roleAssignmentId Role assignment Id
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getById(roleAssignmentId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RoleAssignment>): void;
    getById(roleAssignmentId: string, callback: ServiceCallback<models.RoleAssignment>): void;

    /**
     * Gets role assignments of the subscription.
     *
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.filter] The filter to apply on the operation.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    list(options: { filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RoleAssignmentListResult>): void;
    list(callback: ServiceCallback<models.RoleAssignmentListResult>): void;

    /**
     * Gets role assignments of the scope.
     *
     * @param {string} scope Scope.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.filter] The filter to apply on the operation.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listForScope(scope: string, options: { filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RoleAssignmentListResult>): void;
    listForScope(scope: string, callback: ServiceCallback<models.RoleAssignmentListResult>): void;

    /**
     * Gets role assignments of the resource.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listForResourceNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RoleAssignmentListResult>): void;
    listForResourceNext(nextPageLink: string, callback: ServiceCallback<models.RoleAssignmentListResult>): void;

    /**
     * Gets role assignments of the resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listForResourceGroupNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RoleAssignmentListResult>): void;
    listForResourceGroupNext(nextPageLink: string, callback: ServiceCallback<models.RoleAssignmentListResult>): void;

    /**
     * Gets role assignments of the subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RoleAssignmentListResult>): void;
    listNext(nextPageLink: string, callback: ServiceCallback<models.RoleAssignmentListResult>): void;

    /**
     * Gets role assignments of the scope.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listForScopeNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RoleAssignmentListResult>): void;
    listForScopeNext(nextPageLink: string, callback: ServiceCallback<models.RoleAssignmentListResult>): void;
}

/**
 * @class
 * RoleDefinitions
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the AuthorizationManagementClient.
 */
export interface RoleDefinitions {

    /**
     * Deletes the role definition.
     *
     * @param {string} scope Scope
     * 
     * @param {string} roleDefinitionId Role definition id.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteMethod(scope: string, roleDefinitionId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RoleDefinition>): void;
    deleteMethod(scope: string, roleDefinitionId: string, callback: ServiceCallback<models.RoleDefinition>): void;

    /**
     * Get role definition by name (GUID).
     *
     * @param {string} scope Scope
     * 
     * @param {string} roleDefinitionId Role definition Id
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(scope: string, roleDefinitionId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RoleDefinition>): void;
    get(scope: string, roleDefinitionId: string, callback: ServiceCallback<models.RoleDefinition>): void;

    /**
     * Creates or updates a role definition.
     *
     * @param {string} scope Scope
     * 
     * @param {string} roleDefinitionId Role definition id.
     * 
     * @param {object} roleDefinition Role definition.
     * 
     * @param {string} [roleDefinition.id] Gets or sets role definition id.
     * 
     * @param {string} [roleDefinition.name] Gets or sets role definition name.
     * 
     * @param {string} [roleDefinition.type] Gets or sets role definition type.
     * 
     * @param {object} [roleDefinition.properties] Gets or sets role definition
     * properties.
     * 
     * @param {string} [roleDefinition.properties.roleName] Gets or sets role name.
     * 
     * @param {string} [roleDefinition.properties.description] Gets or sets role
     * definition description.
     * 
     * @param {string} [roleDefinition.properties.type] Gets or sets role type.
     * 
     * @param {array} [roleDefinition.properties.permissions] Gets or sets role
     * definition permissions.
     * 
     * @param {array} [roleDefinition.properties.assignableScopes] Gets or sets
     * role definition assignable scopes.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createOrUpdate(scope: string, roleDefinitionId: string, roleDefinition: models.RoleDefinition, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RoleDefinition>): void;
    createOrUpdate(scope: string, roleDefinitionId: string, roleDefinition: models.RoleDefinition, callback: ServiceCallback<models.RoleDefinition>): void;

    /**
     * Get role definition by name (GUID).
     *
     * @param {string} roleDefinitionId Fully qualified role definition Id
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getById(roleDefinitionId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RoleDefinition>): void;
    getById(roleDefinitionId: string, callback: ServiceCallback<models.RoleDefinition>): void;

    /**
     * Get all role definitions that are applicable at scope and above. Use
     * atScopeAndBelow filter to search below the given scope as well
     *
     * @param {string} scope Scope
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.filter] The filter to apply on the operation.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    list(scope: string, options: { filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RoleDefinitionListResult>): void;
    list(scope: string, callback: ServiceCallback<models.RoleDefinitionListResult>): void;

    /**
     * Get all role definitions that are applicable at scope and above. Use
     * atScopeAndBelow filter to search below the given scope as well
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RoleDefinitionListResult>): void;
    listNext(nextPageLink: string, callback: ServiceCallback<models.RoleDefinitionListResult>): void;
}
