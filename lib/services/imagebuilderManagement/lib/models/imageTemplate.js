/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Class representing a ImageTemplate.
 * @extends models['Resource']
 */
class ImageTemplate extends models['Resource'] {
  /**
   * Create a ImageTemplate.
   * @property {object} source Specifies the properties used to describe the
   * source image.
   * @property {string} [source.type] Polymorphic Discriminator
   * @property {array} [customize] Specifies the properties used to describe
   * the customization steps of the image, like Image source etc
   * @property {array} distribute The distribution targets where the image
   * output needs to go to.
   * @property {string} [provisioningState] Provisioning state of the resource.
   * Possible values include: 'Creating', 'Succeeded', 'Failed', 'Deleting'
   * @property {object} [provisioningError] Provisioning error, if any
   * @property {string} [provisioningError.provisioningErrorCode] Error code of
   * the provisioning failure. Possible values include: 'BadSourceType',
   * 'BadPIRSource', 'BadISOSource', 'BadManagedImageSource',
   * 'BadCustomizerType', 'UnsupportedCustomizerType', 'NoCustomizerScript',
   * 'BadDistributeType', 'BadSharedImageDistribute', 'ServerError', 'Other'
   * @property {string} [provisioningError.message] Verbose error message about
   * the provisioning failure
   * @property {object} [lastRunStatus] State of 'run' that is currently
   * executing or was last executed.
   * @property {date} [lastRunStatus.startTime] Start time of the last run
   * (UTC)
   * @property {date} [lastRunStatus.endTime] End time of the last run (UTC)
   * @property {string} [lastRunStatus.runState] State of the last run.
   * Possible values include: 'Running', 'Succeeded', 'PartiallySucceeded',
   * 'Failed'
   * @property {string} [lastRunStatus.runSubState] Sub-state of the last run.
   * Possible values include: 'Queued', 'Building', 'Customizing',
   * 'Distributing'
   * @property {string} [lastRunStatus.message] Verbose information about the
   * last run state
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of ImageTemplate
   *
   * @returns {object} metadata of ImageTemplate
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'ImageTemplate',
      type: {
        name: 'Composite',
        className: 'ImageTemplate',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          location: {
            required: true,
            serializedName: 'location',
            type: {
              name: 'String'
            }
          },
          tags: {
            required: false,
            serializedName: 'tags',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          source: {
            required: true,
            serializedName: 'properties.source',
            type: {
              name: 'Composite',
              polymorphicDiscriminator: {
                serializedName: 'type',
                clientName: 'type'
              },
              uberParent: 'ImageTemplateSource',
              className: 'ImageTemplateSource'
            }
          },
          customize: {
            required: false,
            serializedName: 'properties.customize',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ImageTemplateCustomizerElementType',
                  type: {
                    name: 'Composite',
                    polymorphicDiscriminator: {
                      serializedName: 'type',
                      clientName: 'type'
                    },
                    uberParent: 'ImageTemplateCustomizer',
                    className: 'ImageTemplateCustomizer'
                  }
              }
            }
          },
          distribute: {
            required: true,
            serializedName: 'properties.distribute',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ImageTemplateDistributorElementType',
                  type: {
                    name: 'Composite',
                    polymorphicDiscriminator: {
                      serializedName: 'type',
                      clientName: 'type'
                    },
                    uberParent: 'ImageTemplateDistributor',
                    className: 'ImageTemplateDistributor'
                  }
              }
            }
          },
          provisioningState: {
            required: false,
            readOnly: true,
            serializedName: 'properties.provisioningState',
            type: {
              name: 'String'
            }
          },
          provisioningError: {
            required: false,
            readOnly: true,
            serializedName: 'properties.provisioningError',
            type: {
              name: 'Composite',
              className: 'ProvisioningError'
            }
          },
          lastRunStatus: {
            required: false,
            readOnly: true,
            serializedName: 'properties.lastRunStatus',
            type: {
              name: 'Composite',
              className: 'ImageTemplateLastRunStatus'
            }
          }
        }
      }
    };
  }
}

module.exports = ImageTemplate;
