/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const msRest = require('ms-rest');
const msRestAzure = require('ms-rest-azure');
const WebResource = msRest.WebResource;

/**
 * Creates a new Azure Search datasource or updates a datasource if it already
 * exists.
 *
 * @param {string} dataSourceName The name of the datasource to create or
 * update.
 *
 * @param {object} dataSource The definition of the datasource to create or
 * update.
 *
 * @param {string} dataSource.name The name of the datasource.
 *
 * @param {string} [dataSource.description] The description of the datasource.
 *
 * @param {object} dataSource.type The type of the datasource.
 *
 * @param {string} [dataSource.type.name]
 *
 * @param {object} dataSource.credentials Credentials for the datasource.
 *
 * @param {string} dataSource.credentials.connectionString The connection
 * string for the datasource.
 *
 * @param {object} dataSource.container The data container for the datasource.
 *
 * @param {string} dataSource.container.name The name of the table or view (for
 * Azure SQL data source) or collection (for DocumentDB data source) that will
 * be indexed.
 *
 * @param {string} [dataSource.container.query] A query that is applied to this
 * data container. The syntax and meaning of this parameter is
 * datasource-specific. Not supported by Azure SQL datasources.
 *
 * @param {object} [dataSource.dataChangeDetectionPolicy] The data change
 * detection policy for the datasource.
 *
 * @param {string} dataSource.dataChangeDetectionPolicy.odatatype Polymorphic
 * Discriminator
 *
 * @param {object} [dataSource.dataDeletionDetectionPolicy] The data deletion
 * detection policy for the datasource.
 *
 * @param {string} dataSource.dataDeletionDetectionPolicy.odatatype Polymorphic
 * Discriminator
 *
 * @param {string} [dataSource.eTag] The ETag of the DataSource.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.searchRequestOptions] Additional parameters for the
 * operation
 *
 * @param {uuid} [options.searchRequestOptions.clientRequestId] The tracking ID
 * sent with the request to help with debugging.
 *
 * @param {object} [options.accessCondition] Additional parameters for the
 * operation
 *
 * @param {string} [options.accessCondition.ifMatch] Defines the If-Match
 * condition. The operation will be performed only if the ETag on the server
 * matches this value.
 *
 * @param {string} [options.accessCondition.ifNoneMatch] Defines the
 * If-None-Match condition. The operation will be performed only if the ETag on
 * the server does not match this value.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link DataSource} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _createOrUpdate(dataSourceName, dataSource, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let searchRequestOptions = (options && options.searchRequestOptions !== undefined) ? options.searchRequestOptions : undefined;
  let accessCondition = (options && options.accessCondition !== undefined) ? options.accessCondition : undefined;
  // Validate
  try {
    if (dataSourceName === null || dataSourceName === undefined || typeof dataSourceName.valueOf() !== 'string') {
      throw new Error('dataSourceName cannot be null or undefined and it must be of type string.');
    }
    if (dataSource === null || dataSource === undefined) {
      throw new Error('dataSource cannot be null or undefined.');
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }
  let clientRequestId;
  let ifMatch;
  let ifNoneMatch;
  try {
    if (searchRequestOptions !== null && searchRequestOptions !== undefined)
    {
      clientRequestId = searchRequestOptions.clientRequestId;
      if (clientRequestId !== null && clientRequestId !== undefined && !(typeof clientRequestId.valueOf() === 'string' && msRest.isValidUuid(clientRequestId))) {
        throw new Error('clientRequestId must be of type string and must be a valid uuid.');
      }
    }
    if (accessCondition !== null && accessCondition !== undefined)
    {
      ifMatch = accessCondition.ifMatch;
      if (ifMatch !== null && ifMatch !== undefined && typeof ifMatch.valueOf() !== 'string') {
        throw new Error('ifMatch must be of type string.');
      }
    }
    if (accessCondition !== null && accessCondition !== undefined)
    {
      ifNoneMatch = accessCondition.ifNoneMatch;
      if (ifNoneMatch !== null && ifNoneMatch !== undefined && typeof ifNoneMatch.valueOf() !== 'string') {
        throw new Error('ifNoneMatch must be of type string.');
      }
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'datasources(\'{dataSourceName}\')';
  requestUrl = requestUrl.replace('{dataSourceName}', encodeURIComponent(dataSourceName));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PUT';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if (clientRequestId !== undefined && clientRequestId !== null) {
    httpRequest.headers['client-request-id'] = clientRequestId.toString();
  }
  if (ifMatch !== undefined && ifMatch !== null) {
    httpRequest.headers['If-Match'] = ifMatch;
  }
  if (ifNoneMatch !== undefined && ifNoneMatch !== null) {
    httpRequest.headers['If-None-Match'] = ifNoneMatch;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (dataSource !== null && dataSource !== undefined) {
      let requestModelMapper = new client.models['DataSource']().mapper();
      requestModel = client.serialize(requestModelMapper, dataSource, 'dataSource');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(dataSource, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200 && statusCode !== 201) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['DataSource']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }
    // Deserialize Response
    if (statusCode === 201) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['DataSource']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError1 = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError1.request = msRest.stripRequest(httpRequest);
        deserializationError1.response = msRest.stripResponse(response);
        return callback(deserializationError1);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Deletes an Azure Search datasource.
 *
 * @param {string} dataSourceName The name of the datasource to delete.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.searchRequestOptions] Additional parameters for the
 * operation
 *
 * @param {uuid} [options.searchRequestOptions.clientRequestId] The tracking ID
 * sent with the request to help with debugging.
 *
 * @param {object} [options.accessCondition] Additional parameters for the
 * operation
 *
 * @param {string} [options.accessCondition.ifMatch] Defines the If-Match
 * condition. The operation will be performed only if the ETag on the server
 * matches this value.
 *
 * @param {string} [options.accessCondition.ifNoneMatch] Defines the
 * If-None-Match condition. The operation will be performed only if the ETag on
 * the server does not match this value.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _deleteMethod(dataSourceName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let searchRequestOptions = (options && options.searchRequestOptions !== undefined) ? options.searchRequestOptions : undefined;
  let accessCondition = (options && options.accessCondition !== undefined) ? options.accessCondition : undefined;
  // Validate
  try {
    if (dataSourceName === null || dataSourceName === undefined || typeof dataSourceName.valueOf() !== 'string') {
      throw new Error('dataSourceName cannot be null or undefined and it must be of type string.');
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }
  let clientRequestId;
  let ifMatch;
  let ifNoneMatch;
  try {
    if (searchRequestOptions !== null && searchRequestOptions !== undefined)
    {
      clientRequestId = searchRequestOptions.clientRequestId;
      if (clientRequestId !== null && clientRequestId !== undefined && !(typeof clientRequestId.valueOf() === 'string' && msRest.isValidUuid(clientRequestId))) {
        throw new Error('clientRequestId must be of type string and must be a valid uuid.');
      }
    }
    if (accessCondition !== null && accessCondition !== undefined)
    {
      ifMatch = accessCondition.ifMatch;
      if (ifMatch !== null && ifMatch !== undefined && typeof ifMatch.valueOf() !== 'string') {
        throw new Error('ifMatch must be of type string.');
      }
    }
    if (accessCondition !== null && accessCondition !== undefined)
    {
      ifNoneMatch = accessCondition.ifNoneMatch;
      if (ifNoneMatch !== null && ifNoneMatch !== undefined && typeof ifNoneMatch.valueOf() !== 'string') {
        throw new Error('ifNoneMatch must be of type string.');
      }
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'datasources(\'{dataSourceName}\')';
  requestUrl = requestUrl.replace('{dataSourceName}', encodeURIComponent(dataSourceName));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'DELETE';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if (clientRequestId !== undefined && clientRequestId !== null) {
    httpRequest.headers['client-request-id'] = clientRequestId.toString();
  }
  if (ifMatch !== undefined && ifMatch !== null) {
    httpRequest.headers['If-Match'] = ifMatch;
  }
  if (ifNoneMatch !== undefined && ifNoneMatch !== null) {
    httpRequest.headers['If-None-Match'] = ifNoneMatch;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 204 && statusCode !== 404) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Retrieves a datasource definition from Azure Search.
 *
 * @param {string} dataSourceName The name of the datasource to retrieve.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.searchRequestOptions] Additional parameters for the
 * operation
 *
 * @param {uuid} [options.searchRequestOptions.clientRequestId] The tracking ID
 * sent with the request to help with debugging.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link DataSource} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _get(dataSourceName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let searchRequestOptions = (options && options.searchRequestOptions !== undefined) ? options.searchRequestOptions : undefined;
  // Validate
  try {
    if (dataSourceName === null || dataSourceName === undefined || typeof dataSourceName.valueOf() !== 'string') {
      throw new Error('dataSourceName cannot be null or undefined and it must be of type string.');
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }
  let clientRequestId;
  try {
    if (searchRequestOptions !== null && searchRequestOptions !== undefined)
    {
      clientRequestId = searchRequestOptions.clientRequestId;
      if (clientRequestId !== null && clientRequestId !== undefined && !(typeof clientRequestId.valueOf() === 'string' && msRest.isValidUuid(clientRequestId))) {
        throw new Error('clientRequestId must be of type string and must be a valid uuid.');
      }
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'datasources(\'{dataSourceName}\')';
  requestUrl = requestUrl.replace('{dataSourceName}', encodeURIComponent(dataSourceName));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if (clientRequestId !== undefined && clientRequestId !== null) {
    httpRequest.headers['client-request-id'] = clientRequestId.toString();
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['DataSource']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Lists all datasources available for an Azure Search service.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.searchRequestOptions] Additional parameters for the
 * operation
 *
 * @param {uuid} [options.searchRequestOptions.clientRequestId] The tracking ID
 * sent with the request to help with debugging.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link DataSourceListResult} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _list(options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let searchRequestOptions = (options && options.searchRequestOptions !== undefined) ? options.searchRequestOptions : undefined;
  // Validate
  try {
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }
  let clientRequestId;
  try {
    if (searchRequestOptions !== null && searchRequestOptions !== undefined)
    {
      clientRequestId = searchRequestOptions.clientRequestId;
      if (clientRequestId !== null && clientRequestId !== undefined && !(typeof clientRequestId.valueOf() === 'string' && msRest.isValidUuid(clientRequestId))) {
        throw new Error('clientRequestId must be of type string and must be a valid uuid.');
      }
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'datasources';
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if (clientRequestId !== undefined && clientRequestId !== null) {
    httpRequest.headers['client-request-id'] = clientRequestId.toString();
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['DataSourceListResult']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Creates a new Azure Search datasource.
 *
 * @param {object} dataSource The definition of the datasource to create.
 *
 * @param {string} dataSource.name The name of the datasource.
 *
 * @param {string} [dataSource.description] The description of the datasource.
 *
 * @param {object} dataSource.type The type of the datasource.
 *
 * @param {string} [dataSource.type.name]
 *
 * @param {object} dataSource.credentials Credentials for the datasource.
 *
 * @param {string} dataSource.credentials.connectionString The connection
 * string for the datasource.
 *
 * @param {object} dataSource.container The data container for the datasource.
 *
 * @param {string} dataSource.container.name The name of the table or view (for
 * Azure SQL data source) or collection (for DocumentDB data source) that will
 * be indexed.
 *
 * @param {string} [dataSource.container.query] A query that is applied to this
 * data container. The syntax and meaning of this parameter is
 * datasource-specific. Not supported by Azure SQL datasources.
 *
 * @param {object} [dataSource.dataChangeDetectionPolicy] The data change
 * detection policy for the datasource.
 *
 * @param {string} dataSource.dataChangeDetectionPolicy.odatatype Polymorphic
 * Discriminator
 *
 * @param {object} [dataSource.dataDeletionDetectionPolicy] The data deletion
 * detection policy for the datasource.
 *
 * @param {string} dataSource.dataDeletionDetectionPolicy.odatatype Polymorphic
 * Discriminator
 *
 * @param {string} [dataSource.eTag] The ETag of the DataSource.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.searchRequestOptions] Additional parameters for the
 * operation
 *
 * @param {uuid} [options.searchRequestOptions.clientRequestId] The tracking ID
 * sent with the request to help with debugging.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link DataSource} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _create(dataSource, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let searchRequestOptions = (options && options.searchRequestOptions !== undefined) ? options.searchRequestOptions : undefined;
  // Validate
  try {
    if (dataSource === null || dataSource === undefined) {
      throw new Error('dataSource cannot be null or undefined.');
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }
  let clientRequestId;
  try {
    if (searchRequestOptions !== null && searchRequestOptions !== undefined)
    {
      clientRequestId = searchRequestOptions.clientRequestId;
      if (clientRequestId !== null && clientRequestId !== undefined && !(typeof clientRequestId.valueOf() === 'string' && msRest.isValidUuid(clientRequestId))) {
        throw new Error('clientRequestId must be of type string and must be a valid uuid.');
      }
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'datasources';
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if (clientRequestId !== undefined && clientRequestId !== null) {
    httpRequest.headers['client-request-id'] = clientRequestId.toString();
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (dataSource !== null && dataSource !== undefined) {
      let requestModelMapper = new client.models['DataSource']().mapper();
      requestModel = client.serialize(requestModelMapper, dataSource, 'dataSource');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(dataSource, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 201) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 201) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['DataSource']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/** Class representing a DataSources. */
class DataSources {
  /**
   * Create a DataSources.
   * @param {SearchServiceClient} client Reference to the service client.
   */
  constructor(client) {
    this.client = client;
    this._createOrUpdate = _createOrUpdate;
    this._deleteMethod = _deleteMethod;
    this._get = _get;
    this._list = _list;
    this._create = _create;
  }

  /**
   * Creates a new Azure Search datasource or updates a datasource if it already
   * exists.
   *
   * @param {string} dataSourceName The name of the datasource to create or
   * update.
   *
   * @param {object} dataSource The definition of the datasource to create or
   * update.
   *
   * @param {string} dataSource.name The name of the datasource.
   *
   * @param {string} [dataSource.description] The description of the datasource.
   *
   * @param {object} dataSource.type The type of the datasource.
   *
   * @param {string} [dataSource.type.name]
   *
   * @param {object} dataSource.credentials Credentials for the datasource.
   *
   * @param {string} dataSource.credentials.connectionString The connection
   * string for the datasource.
   *
   * @param {object} dataSource.container The data container for the datasource.
   *
   * @param {string} dataSource.container.name The name of the table or view (for
   * Azure SQL data source) or collection (for DocumentDB data source) that will
   * be indexed.
   *
   * @param {string} [dataSource.container.query] A query that is applied to this
   * data container. The syntax and meaning of this parameter is
   * datasource-specific. Not supported by Azure SQL datasources.
   *
   * @param {object} [dataSource.dataChangeDetectionPolicy] The data change
   * detection policy for the datasource.
   *
   * @param {string} dataSource.dataChangeDetectionPolicy.odatatype Polymorphic
   * Discriminator
   *
   * @param {object} [dataSource.dataDeletionDetectionPolicy] The data deletion
   * detection policy for the datasource.
   *
   * @param {string} dataSource.dataDeletionDetectionPolicy.odatatype Polymorphic
   * Discriminator
   *
   * @param {string} [dataSource.eTag] The ETag of the DataSource.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.searchRequestOptions] Additional parameters for the
   * operation
   *
   * @param {uuid} [options.searchRequestOptions.clientRequestId] The tracking ID
   * sent with the request to help with debugging.
   *
   * @param {object} [options.accessCondition] Additional parameters for the
   * operation
   *
   * @param {string} [options.accessCondition.ifMatch] Defines the If-Match
   * condition. The operation will be performed only if the ETag on the server
   * matches this value.
   *
   * @param {string} [options.accessCondition.ifNoneMatch] Defines the
   * If-None-Match condition. The operation will be performed only if the ETag on
   * the server does not match this value.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<DataSource>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  createOrUpdateWithHttpOperationResponse(dataSourceName, dataSource, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._createOrUpdate(dataSourceName, dataSource, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Creates a new Azure Search datasource or updates a datasource if it already
   * exists.
   *
   * @param {string} dataSourceName The name of the datasource to create or
   * update.
   *
   * @param {object} dataSource The definition of the datasource to create or
   * update.
   *
   * @param {string} dataSource.name The name of the datasource.
   *
   * @param {string} [dataSource.description] The description of the datasource.
   *
   * @param {object} dataSource.type The type of the datasource.
   *
   * @param {string} [dataSource.type.name]
   *
   * @param {object} dataSource.credentials Credentials for the datasource.
   *
   * @param {string} dataSource.credentials.connectionString The connection
   * string for the datasource.
   *
   * @param {object} dataSource.container The data container for the datasource.
   *
   * @param {string} dataSource.container.name The name of the table or view (for
   * Azure SQL data source) or collection (for DocumentDB data source) that will
   * be indexed.
   *
   * @param {string} [dataSource.container.query] A query that is applied to this
   * data container. The syntax and meaning of this parameter is
   * datasource-specific. Not supported by Azure SQL datasources.
   *
   * @param {object} [dataSource.dataChangeDetectionPolicy] The data change
   * detection policy for the datasource.
   *
   * @param {string} dataSource.dataChangeDetectionPolicy.odatatype Polymorphic
   * Discriminator
   *
   * @param {object} [dataSource.dataDeletionDetectionPolicy] The data deletion
   * detection policy for the datasource.
   *
   * @param {string} dataSource.dataDeletionDetectionPolicy.odatatype Polymorphic
   * Discriminator
   *
   * @param {string} [dataSource.eTag] The ETag of the DataSource.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.searchRequestOptions] Additional parameters for the
   * operation
   *
   * @param {uuid} [options.searchRequestOptions.clientRequestId] The tracking ID
   * sent with the request to help with debugging.
   *
   * @param {object} [options.accessCondition] Additional parameters for the
   * operation
   *
   * @param {string} [options.accessCondition.ifMatch] Defines the If-Match
   * condition. The operation will be performed only if the ETag on the server
   * matches this value.
   *
   * @param {string} [options.accessCondition.ifNoneMatch] Defines the
   * If-None-Match condition. The operation will be performed only if the ETag on
   * the server does not match this value.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {DataSource} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link DataSource} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  createOrUpdate(dataSourceName, dataSource, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._createOrUpdate(dataSourceName, dataSource, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._createOrUpdate(dataSourceName, dataSource, options, optionalCallback);
    }
  }

  /**
   * Deletes an Azure Search datasource.
   *
   * @param {string} dataSourceName The name of the datasource to delete.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.searchRequestOptions] Additional parameters for the
   * operation
   *
   * @param {uuid} [options.searchRequestOptions.clientRequestId] The tracking ID
   * sent with the request to help with debugging.
   *
   * @param {object} [options.accessCondition] Additional parameters for the
   * operation
   *
   * @param {string} [options.accessCondition.ifMatch] Defines the If-Match
   * condition. The operation will be performed only if the ETag on the server
   * matches this value.
   *
   * @param {string} [options.accessCondition.ifNoneMatch] Defines the
   * If-None-Match condition. The operation will be performed only if the ETag on
   * the server does not match this value.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  deleteMethodWithHttpOperationResponse(dataSourceName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._deleteMethod(dataSourceName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Deletes an Azure Search datasource.
   *
   * @param {string} dataSourceName The name of the datasource to delete.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.searchRequestOptions] Additional parameters for the
   * operation
   *
   * @param {uuid} [options.searchRequestOptions.clientRequestId] The tracking ID
   * sent with the request to help with debugging.
   *
   * @param {object} [options.accessCondition] Additional parameters for the
   * operation
   *
   * @param {string} [options.accessCondition.ifMatch] Defines the If-Match
   * condition. The operation will be performed only if the ETag on the server
   * matches this value.
   *
   * @param {string} [options.accessCondition.ifNoneMatch] Defines the
   * If-None-Match condition. The operation will be performed only if the ETag on
   * the server does not match this value.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteMethod(dataSourceName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._deleteMethod(dataSourceName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._deleteMethod(dataSourceName, options, optionalCallback);
    }
  }

  /**
   * Retrieves a datasource definition from Azure Search.
   *
   * @param {string} dataSourceName The name of the datasource to retrieve.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.searchRequestOptions] Additional parameters for the
   * operation
   *
   * @param {uuid} [options.searchRequestOptions.clientRequestId] The tracking ID
   * sent with the request to help with debugging.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<DataSource>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getWithHttpOperationResponse(dataSourceName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._get(dataSourceName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Retrieves a datasource definition from Azure Search.
   *
   * @param {string} dataSourceName The name of the datasource to retrieve.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.searchRequestOptions] Additional parameters for the
   * operation
   *
   * @param {uuid} [options.searchRequestOptions.clientRequestId] The tracking ID
   * sent with the request to help with debugging.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {DataSource} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link DataSource} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  get(dataSourceName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._get(dataSourceName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._get(dataSourceName, options, optionalCallback);
    }
  }

  /**
   * Lists all datasources available for an Azure Search service.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.searchRequestOptions] Additional parameters for the
   * operation
   *
   * @param {uuid} [options.searchRequestOptions.clientRequestId] The tracking ID
   * sent with the request to help with debugging.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<DataSourceListResult>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  listWithHttpOperationResponse(options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._list(options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Lists all datasources available for an Azure Search service.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.searchRequestOptions] Additional parameters for the
   * operation
   *
   * @param {uuid} [options.searchRequestOptions.clientRequestId] The tracking ID
   * sent with the request to help with debugging.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {DataSourceListResult} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link DataSourceListResult} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  list(options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._list(options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._list(options, optionalCallback);
    }
  }

  /**
   * Creates a new Azure Search datasource.
   *
   * @param {object} dataSource The definition of the datasource to create.
   *
   * @param {string} dataSource.name The name of the datasource.
   *
   * @param {string} [dataSource.description] The description of the datasource.
   *
   * @param {object} dataSource.type The type of the datasource.
   *
   * @param {string} [dataSource.type.name]
   *
   * @param {object} dataSource.credentials Credentials for the datasource.
   *
   * @param {string} dataSource.credentials.connectionString The connection
   * string for the datasource.
   *
   * @param {object} dataSource.container The data container for the datasource.
   *
   * @param {string} dataSource.container.name The name of the table or view (for
   * Azure SQL data source) or collection (for DocumentDB data source) that will
   * be indexed.
   *
   * @param {string} [dataSource.container.query] A query that is applied to this
   * data container. The syntax and meaning of this parameter is
   * datasource-specific. Not supported by Azure SQL datasources.
   *
   * @param {object} [dataSource.dataChangeDetectionPolicy] The data change
   * detection policy for the datasource.
   *
   * @param {string} dataSource.dataChangeDetectionPolicy.odatatype Polymorphic
   * Discriminator
   *
   * @param {object} [dataSource.dataDeletionDetectionPolicy] The data deletion
   * detection policy for the datasource.
   *
   * @param {string} dataSource.dataDeletionDetectionPolicy.odatatype Polymorphic
   * Discriminator
   *
   * @param {string} [dataSource.eTag] The ETag of the DataSource.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.searchRequestOptions] Additional parameters for the
   * operation
   *
   * @param {uuid} [options.searchRequestOptions.clientRequestId] The tracking ID
   * sent with the request to help with debugging.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<DataSource>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  createWithHttpOperationResponse(dataSource, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._create(dataSource, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Creates a new Azure Search datasource.
   *
   * @param {object} dataSource The definition of the datasource to create.
   *
   * @param {string} dataSource.name The name of the datasource.
   *
   * @param {string} [dataSource.description] The description of the datasource.
   *
   * @param {object} dataSource.type The type of the datasource.
   *
   * @param {string} [dataSource.type.name]
   *
   * @param {object} dataSource.credentials Credentials for the datasource.
   *
   * @param {string} dataSource.credentials.connectionString The connection
   * string for the datasource.
   *
   * @param {object} dataSource.container The data container for the datasource.
   *
   * @param {string} dataSource.container.name The name of the table or view (for
   * Azure SQL data source) or collection (for DocumentDB data source) that will
   * be indexed.
   *
   * @param {string} [dataSource.container.query] A query that is applied to this
   * data container. The syntax and meaning of this parameter is
   * datasource-specific. Not supported by Azure SQL datasources.
   *
   * @param {object} [dataSource.dataChangeDetectionPolicy] The data change
   * detection policy for the datasource.
   *
   * @param {string} dataSource.dataChangeDetectionPolicy.odatatype Polymorphic
   * Discriminator
   *
   * @param {object} [dataSource.dataDeletionDetectionPolicy] The data deletion
   * detection policy for the datasource.
   *
   * @param {string} dataSource.dataDeletionDetectionPolicy.odatatype Polymorphic
   * Discriminator
   *
   * @param {string} [dataSource.eTag] The ETag of the DataSource.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.searchRequestOptions] Additional parameters for the
   * operation
   *
   * @param {uuid} [options.searchRequestOptions.clientRequestId] The tracking ID
   * sent with the request to help with debugging.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {DataSource} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link DataSource} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  create(dataSource, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._create(dataSource, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._create(dataSource, options, optionalCallback);
    }
  }

}

module.exports = DataSources;
