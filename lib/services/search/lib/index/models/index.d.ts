/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import { BaseResource } from 'ms-rest-azure';
import { CloudError } from 'ms-rest-azure';
import * as moment from 'moment';

export { BaseResource } from 'ms-rest-azure';
export { CloudError } from 'ms-rest-azure';


/**
 * @class
 * Initializes a new instance of the DocumentIndexResult class.
 * @constructor
 * Response containing the status of operations for all documents in the
 * indexing request.
 *
 * @member {array} [results] The list of status information for each document
 * in the indexing request.
 */
export interface DocumentIndexResult {
  readonly results?: IndexingResult[];
}

/**
 * @class
 * Initializes a new instance of the SearchParametersPayload class.
 * @constructor
 * Parameters for filtering, sorting, faceting, paging, and other search query
 * behaviors.
 *
 * @member {boolean} [count] A value that specifies whether to fetch the total
 * count of results. Default is false. Setting this value to true may have a
 * performance impact. Note that the count returned is an approximation.
 * @member {array} [facets] The list of facet expressions to apply to the
 * search query. Each facet expression contains a field name, optionally
 * followed by a comma-separated list of name:value pairs.
 * @member {string} [filter] The OData $filter expression to apply to the
 * search query.
 * @member {string} [highlight] The comma-separated list of field names to use
 * for hit highlights. Only searchable fields can be used for hit highlighting.
 * @member {string} [highlightPostTag] A string tag that is appended to hit
 * highlights. Must be set with HighlightPreTag. Default is &lt;/em&gt;.
 * @member {string} [highlightPreTag] A string tag that is prepended to hit
 * highlights. Must be set with HighlightPostTag. Default is &lt;em&gt;.
 * @member {number} [minimumCoverage] A number between 0 and 100 indicating the
 * percentage of the index that must be covered by a search query in order for
 * the query to be reported as a success. This parameter can be useful for
 * ensuring search availability even for services with only one replica. The
 * default is 100.
 * @member {string} [orderBy] The comma-separated list of OData $orderby
 * expressions by which to sort the results. Each expression can be either a
 * field name or a call to the geo.distance() function. Each expression can be
 * followed by asc to indicate ascending, and desc to indicate descending. The
 * default is ascending order. Ties will be broken by the match scores of
 * documents. If no OrderBy is specified, the default sort order is descending
 * by document match score. There can be at most 32 Orderby clauses.
 * @member {string} [queryType] Gets or sets a value that specifies the syntax
 * of the search query. The default is 'simple'. Use 'full' if your query uses
 * the Lucene query syntax. Possible values include: 'simple', 'full'
 * @member {array} [scoringParameters] The list of parameter values to be used
 * in scoring functions (for example, referencePointParameter) using the format
 * name:value. For example, if the scoring profile defines a function with a
 * parameter called 'mylocation' the parameter string would be
 * "mylocation:-122.2,44.8"(without the quotes).
 * @member {string} [scoringProfile] The name of a scoring profile to evaluate
 * match scores for matching documents in order to sort the results.
 * @member {string} [search] A full-text search query expression; Use null or
 * "*" to match all documents.
 * @member {string} [searchFields] The comma-separated list of field names to
 * include in the full-text search.
 * @member {string} [searchMode] A value that specifies whether any or all of
 * the search terms must be matched in order to count the document as a match.
 * Possible values include: 'any', 'all'
 * @member {string} [select] The comma-separated list of fields to retrieve. If
 * unspecified, all fields marked as retrievable in the schema are included.
 * @member {number} [skip] The number of search results to skip. This value
 * cannot be greater than 100,000. If you need to scan documents in sequence,
 * but cannot use Skip due to this limitation, consider using OrderBy on a
 * totally-ordered key and Filter with a range query instead.
 * @member {number} [top] The number of search results to retrieve. This can be
 * used in conjunction with Skip to implement client-side paging of search
 * results. If results are truncated due to server-side paging, the response
 * will include a continuation token that can be passed to ContinueSearch to
 * retrieve the next page of results. See
 * DocumentSearchResponse.ContinuationToken for more information.
 */
export interface SearchParametersPayload {
  count?: boolean;
  facets?: string[];
  filter?: string;
  highlight?: string;
  highlightPostTag?: string;
  highlightPreTag?: string;
  minimumCoverage?: number;
  orderBy?: string;
  queryType?: string;
  scoringParameters?: string[];
  scoringProfile?: string;
  search?: string;
  searchFields?: string;
  searchMode?: string;
  select?: string;
  skip?: number;
  top?: number;
}

/**
 * @class
 * Initializes a new instance of the SuggestParametersPayload class.
 * @constructor
 * Parameters for filtering, sorting, fuzzy matching, and other suggestions
 * query behaviors.
 *
 * @member {string} [filter] The OData $filter expression to apply to the
 * suggestions query.
 * @member {boolean} [fuzzy] A value indicating whether to use fuzzy matching
 * for the suggestion query. Default is false. when set to true, the query will
 * find suggestions even if there's a substituted or missing character in the
 * search text. While this provides a better experience in some scenarios it
 * comes at a performance cost as fuzzy suggestion searches are slower and
 * consume more resources.
 * @member {string} [highlightPostTag] A string tag that is appended to hit
 * highlights. Must be set with HighlightPreTag. If omitted, hit highlighting
 * of suggestions is disabled.
 * @member {string} [highlightPreTag] A string tag that is prepended to hit
 * highlights. Must be set with HighlightPostTag. If omitted, hit highlighting
 * of suggestions is disabled.
 * @member {number} [minimumCoverage] A number between 0 and 100 indicating the
 * percentage of the index that must be covered by a suggestion query in order
 * for the query to be reported as a success. This parameter can be useful for
 * ensuring search availability even for services with only one replica. The
 * default is 80.
 * @member {string} [orderBy] The comma-separated list of OData $orderby
 * expressions by which to sort the results. Each expression can be either a
 * field name or a call to the geo.distance() function. Each expression can be
 * followed by asc to indicate ascending, and desc to indicate descending. The
 * default is ascending order. Ties will be broken by the match scores of
 * documents. If no OrderBy is specified, the default sort order is descending
 * by document match score. There can be at most 32 Orderby clauses.
 * @member {string} [search] The search text on which to base suggestions.
 * @member {string} [searchFields] The comma-separated list of field names to
 * consider when querying for suggestions.
 * @member {string} [select] The comma-separated list of fields to retrieve. If
 * unspecified, all fields marked as retrievable in the schema are included.
 * @member {string} [suggesterName] The name of the suggester as specified in
 * the suggesters collection that's part of the index definition.
 * @member {number} [top] The number of suggestions to retrieve. This must be a
 * value between 1 and 100. The default is to 5.
 */
export interface SuggestParametersPayload {
  filter?: string;
  fuzzy?: boolean;
  highlightPostTag?: string;
  highlightPreTag?: string;
  minimumCoverage?: number;
  orderBy?: string;
  search?: string;
  searchFields?: string;
  select?: string;
  suggesterName?: string;
  top?: number;
}

/**
 * @class
 * Initializes a new instance of the SearchRequestOptions class.
 * @constructor
 * Additional parameters for count operation.
 *
 * @member {uuid} [clientRequestId] The tracking ID sent with the request to
 * help with debugging.
 */
export interface SearchRequestOptions {
  clientRequestId?: string;
}

