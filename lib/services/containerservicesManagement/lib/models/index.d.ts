/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { BaseResource, CloudError } from "ms-rest-azure";
import * as moment from "moment";

export {

  BaseResource,
  CloudError
};

/**
 * Describes the properties of a Compute Operation value.
 */
export interface OperationValue {
  /**
   * The origin of the compute operation.
   */
  readonly origin?: string;
  /**
   * The name of the compute operation.
   */
  readonly name?: string;
  /**
   * The display name of the compute operation.
   */
  readonly operation?: string;
  /**
   * The display name of the resource the operation applies to.
   */
  readonly resource?: string;
  /**
   * The description of the operation.
   */
  readonly description?: string;
  /**
   * The resource provider for the operation.
   */
  readonly provider?: string;
}

/**
 * The Resource model definition.
 */
export interface Resource extends BaseResource {
  /**
   * Resource Id
   */
  readonly id?: string;
  /**
   * Resource name
   */
  readonly name?: string;
  /**
   * Resource type
   */
  readonly type?: string;
  /**
   * Resource location
   */
  location: string;
  /**
   * Resource tags
   */
  tags?: { [propertyName: string]: string };
}

/**
 * Reference to another subresource.
 */
export interface SubResource extends BaseResource {
  /**
   * Resource ID.
   */
  readonly id?: string;
  /**
   * The name of the resource that is unique within a resource group. This name can be used to
   * access the resource.
   */
  readonly name?: string;
  /**
   * Resource type
   */
  readonly type?: string;
}

/**
 * Tags object for patch operations.
 */
export interface TagsObject {
  /**
   * Resource tags.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * Information about a service principal identity for the cluster to use for manipulating Azure
 * APIs.
 */
export interface ManagedClusterServicePrincipalProfile {
  /**
   * The ID for the service principal.
   */
  clientId: string;
  /**
   * The secret password associated with the service principal in plain text.
   */
  secret?: string;
}

/**
 * Profile for the container service master.
 */
export interface ContainerServiceMasterProfile {
  /**
   * Number of masters (VMs) in the container service cluster. Allowed values are 1, 3, and 5. The
   * default value is 1.
   */
  count?: number;
  /**
   * DNS prefix to be used to create the FQDN for the master pool.
   */
  dnsPrefix: string;
  /**
   * Size of agent VMs. Possible values include: 'Standard_A1', 'Standard_A10', 'Standard_A11',
   * 'Standard_A1_v2', 'Standard_A2', 'Standard_A2_v2', 'Standard_A2m_v2', 'Standard_A3',
   * 'Standard_A4', 'Standard_A4_v2', 'Standard_A4m_v2', 'Standard_A5', 'Standard_A6',
   * 'Standard_A7', 'Standard_A8', 'Standard_A8_v2', 'Standard_A8m_v2', 'Standard_A9',
   * 'Standard_B2ms', 'Standard_B2s', 'Standard_B4ms', 'Standard_B8ms', 'Standard_D1',
   * 'Standard_D11', 'Standard_D11_v2', 'Standard_D11_v2_Promo', 'Standard_D12', 'Standard_D12_v2',
   * 'Standard_D12_v2_Promo', 'Standard_D13', 'Standard_D13_v2', 'Standard_D13_v2_Promo',
   * 'Standard_D14', 'Standard_D14_v2', 'Standard_D14_v2_Promo', 'Standard_D15_v2',
   * 'Standard_D16_v3', 'Standard_D16s_v3', 'Standard_D1_v2', 'Standard_D2', 'Standard_D2_v2',
   * 'Standard_D2_v2_Promo', 'Standard_D2_v3', 'Standard_D2s_v3', 'Standard_D3', 'Standard_D32_v3',
   * 'Standard_D32s_v3', 'Standard_D3_v2', 'Standard_D3_v2_Promo', 'Standard_D4', 'Standard_D4_v2',
   * 'Standard_D4_v2_Promo', 'Standard_D4_v3', 'Standard_D4s_v3', 'Standard_D5_v2',
   * 'Standard_D5_v2_Promo', 'Standard_D64_v3', 'Standard_D64s_v3', 'Standard_D8_v3',
   * 'Standard_D8s_v3', 'Standard_DS1', 'Standard_DS11', 'Standard_DS11_v2',
   * 'Standard_DS11_v2_Promo', 'Standard_DS12', 'Standard_DS12_v2', 'Standard_DS12_v2_Promo',
   * 'Standard_DS13', 'Standard_DS13-2_v2', 'Standard_DS13-4_v2', 'Standard_DS13_v2',
   * 'Standard_DS13_v2_Promo', 'Standard_DS14', 'Standard_DS14-4_v2', 'Standard_DS14-8_v2',
   * 'Standard_DS14_v2', 'Standard_DS14_v2_Promo', 'Standard_DS15_v2', 'Standard_DS1_v2',
   * 'Standard_DS2', 'Standard_DS2_v2', 'Standard_DS2_v2_Promo', 'Standard_DS3', 'Standard_DS3_v2',
   * 'Standard_DS3_v2_Promo', 'Standard_DS4', 'Standard_DS4_v2', 'Standard_DS4_v2_Promo',
   * 'Standard_DS5_v2', 'Standard_DS5_v2_Promo', 'Standard_E16_v3', 'Standard_E16s_v3',
   * 'Standard_E2_v3', 'Standard_E2s_v3', 'Standard_E32-16s_v3', 'Standard_E32-8s_v3',
   * 'Standard_E32_v3', 'Standard_E32s_v3', 'Standard_E4_v3', 'Standard_E4s_v3',
   * 'Standard_E64-16s_v3', 'Standard_E64-32s_v3', 'Standard_E64_v3', 'Standard_E64s_v3',
   * 'Standard_E8_v3', 'Standard_E8s_v3', 'Standard_F1', 'Standard_F16', 'Standard_F16s',
   * 'Standard_F16s_v2', 'Standard_F1s', 'Standard_F2', 'Standard_F2s', 'Standard_F2s_v2',
   * 'Standard_F32s_v2', 'Standard_F4', 'Standard_F4s', 'Standard_F4s_v2', 'Standard_F64s_v2',
   * 'Standard_F72s_v2', 'Standard_F8', 'Standard_F8s', 'Standard_F8s_v2', 'Standard_G1',
   * 'Standard_G2', 'Standard_G3', 'Standard_G4', 'Standard_G5', 'Standard_GS1', 'Standard_GS2',
   * 'Standard_GS3', 'Standard_GS4', 'Standard_GS4-4', 'Standard_GS4-8', 'Standard_GS5',
   * 'Standard_GS5-16', 'Standard_GS5-8', 'Standard_H16', 'Standard_H16m', 'Standard_H16mr',
   * 'Standard_H16r', 'Standard_H8', 'Standard_H8m', 'Standard_L16s', 'Standard_L32s',
   * 'Standard_L4s', 'Standard_L8s', 'Standard_M128-32ms', 'Standard_M128-64ms', 'Standard_M128ms',
   * 'Standard_M128s', 'Standard_M64-16ms', 'Standard_M64-32ms', 'Standard_M64ms', 'Standard_M64s',
   * 'Standard_NC12', 'Standard_NC12s_v2', 'Standard_NC12s_v3', 'Standard_NC24', 'Standard_NC24r',
   * 'Standard_NC24rs_v2', 'Standard_NC24rs_v3', 'Standard_NC24s_v2', 'Standard_NC24s_v3',
   * 'Standard_NC6', 'Standard_NC6s_v2', 'Standard_NC6s_v3', 'Standard_ND12s', 'Standard_ND24rs',
   * 'Standard_ND24s', 'Standard_ND6s', 'Standard_NV12', 'Standard_NV24', 'Standard_NV6'
   */
  vmSize: string;
  /**
   * OS Disk Size in GB to be used to specify the disk size for every machine in this master/agent
   * pool. If you specify 0, it will apply the default osDisk size according to the vmSize
   * specified.
   */
  osDiskSizeGB?: number;
  /**
   * VNet SubnetID specifies the VNet's subnet identifier.
   */
  vnetSubnetID?: string;
  /**
   * FirstConsecutiveStaticIP used to specify the first static ip of masters.
   */
  firstConsecutiveStaticIP?: string;
  /**
   * Storage profile specifies what kind of storage used. Choose from StorageAccount and
   * ManagedDisks. Leave it empty, we will choose for you based on the orchestrator choice.
   * Possible values include: 'StorageAccount', 'ManagedDisks'
   */
  storageProfile?: string;
  /**
   * FQDN for the master pool.
   */
  readonly fqdn?: string;
}

/**
 * Properties for the container service agent pool profile.
 */
export interface ManagedClusterAgentPoolProfileProperties {
  /**
   * Number of agents (VMs) to host docker containers. Allowed values must be in the range of 1 to
   * 100 (inclusive). The default value is 1.
   */
  count: number;
  /**
   * Size of agent VMs. Possible values include: 'Standard_A1', 'Standard_A10', 'Standard_A11',
   * 'Standard_A1_v2', 'Standard_A2', 'Standard_A2_v2', 'Standard_A2m_v2', 'Standard_A3',
   * 'Standard_A4', 'Standard_A4_v2', 'Standard_A4m_v2', 'Standard_A5', 'Standard_A6',
   * 'Standard_A7', 'Standard_A8', 'Standard_A8_v2', 'Standard_A8m_v2', 'Standard_A9',
   * 'Standard_B2ms', 'Standard_B2s', 'Standard_B4ms', 'Standard_B8ms', 'Standard_D1',
   * 'Standard_D11', 'Standard_D11_v2', 'Standard_D11_v2_Promo', 'Standard_D12', 'Standard_D12_v2',
   * 'Standard_D12_v2_Promo', 'Standard_D13', 'Standard_D13_v2', 'Standard_D13_v2_Promo',
   * 'Standard_D14', 'Standard_D14_v2', 'Standard_D14_v2_Promo', 'Standard_D15_v2',
   * 'Standard_D16_v3', 'Standard_D16s_v3', 'Standard_D1_v2', 'Standard_D2', 'Standard_D2_v2',
   * 'Standard_D2_v2_Promo', 'Standard_D2_v3', 'Standard_D2s_v3', 'Standard_D3', 'Standard_D32_v3',
   * 'Standard_D32s_v3', 'Standard_D3_v2', 'Standard_D3_v2_Promo', 'Standard_D4', 'Standard_D4_v2',
   * 'Standard_D4_v2_Promo', 'Standard_D4_v3', 'Standard_D4s_v3', 'Standard_D5_v2',
   * 'Standard_D5_v2_Promo', 'Standard_D64_v3', 'Standard_D64s_v3', 'Standard_D8_v3',
   * 'Standard_D8s_v3', 'Standard_DS1', 'Standard_DS11', 'Standard_DS11_v2',
   * 'Standard_DS11_v2_Promo', 'Standard_DS12', 'Standard_DS12_v2', 'Standard_DS12_v2_Promo',
   * 'Standard_DS13', 'Standard_DS13-2_v2', 'Standard_DS13-4_v2', 'Standard_DS13_v2',
   * 'Standard_DS13_v2_Promo', 'Standard_DS14', 'Standard_DS14-4_v2', 'Standard_DS14-8_v2',
   * 'Standard_DS14_v2', 'Standard_DS14_v2_Promo', 'Standard_DS15_v2', 'Standard_DS1_v2',
   * 'Standard_DS2', 'Standard_DS2_v2', 'Standard_DS2_v2_Promo', 'Standard_DS3', 'Standard_DS3_v2',
   * 'Standard_DS3_v2_Promo', 'Standard_DS4', 'Standard_DS4_v2', 'Standard_DS4_v2_Promo',
   * 'Standard_DS5_v2', 'Standard_DS5_v2_Promo', 'Standard_E16_v3', 'Standard_E16s_v3',
   * 'Standard_E2_v3', 'Standard_E2s_v3', 'Standard_E32-16s_v3', 'Standard_E32-8s_v3',
   * 'Standard_E32_v3', 'Standard_E32s_v3', 'Standard_E4_v3', 'Standard_E4s_v3',
   * 'Standard_E64-16s_v3', 'Standard_E64-32s_v3', 'Standard_E64_v3', 'Standard_E64s_v3',
   * 'Standard_E8_v3', 'Standard_E8s_v3', 'Standard_F1', 'Standard_F16', 'Standard_F16s',
   * 'Standard_F16s_v2', 'Standard_F1s', 'Standard_F2', 'Standard_F2s', 'Standard_F2s_v2',
   * 'Standard_F32s_v2', 'Standard_F4', 'Standard_F4s', 'Standard_F4s_v2', 'Standard_F64s_v2',
   * 'Standard_F72s_v2', 'Standard_F8', 'Standard_F8s', 'Standard_F8s_v2', 'Standard_G1',
   * 'Standard_G2', 'Standard_G3', 'Standard_G4', 'Standard_G5', 'Standard_GS1', 'Standard_GS2',
   * 'Standard_GS3', 'Standard_GS4', 'Standard_GS4-4', 'Standard_GS4-8', 'Standard_GS5',
   * 'Standard_GS5-16', 'Standard_GS5-8', 'Standard_H16', 'Standard_H16m', 'Standard_H16mr',
   * 'Standard_H16r', 'Standard_H8', 'Standard_H8m', 'Standard_L16s', 'Standard_L32s',
   * 'Standard_L4s', 'Standard_L8s', 'Standard_M128-32ms', 'Standard_M128-64ms', 'Standard_M128ms',
   * 'Standard_M128s', 'Standard_M64-16ms', 'Standard_M64-32ms', 'Standard_M64ms', 'Standard_M64s',
   * 'Standard_NC12', 'Standard_NC12s_v2', 'Standard_NC12s_v3', 'Standard_NC24', 'Standard_NC24r',
   * 'Standard_NC24rs_v2', 'Standard_NC24rs_v3', 'Standard_NC24s_v2', 'Standard_NC24s_v3',
   * 'Standard_NC6', 'Standard_NC6s_v2', 'Standard_NC6s_v3', 'Standard_ND12s', 'Standard_ND24rs',
   * 'Standard_ND24s', 'Standard_ND6s', 'Standard_NV12', 'Standard_NV24', 'Standard_NV6'
   */
  vmSize: string;
  /**
   * OS Disk Size in GB to be used to specify the disk size for every machine in this master/agent
   * pool. If you specify 0, it will apply the default osDisk size according to the vmSize
   * specified.
   */
  osDiskSizeGB?: number;
  /**
   * VNet SubnetID specifies the VNet's subnet identifier.
   */
  vnetSubnetID?: string;
  /**
   * Maximum number of pods that can run on a node.
   */
  maxPods?: number;
  /**
   * OsType to be used to specify os type. Choose from Linux and Windows. Default to Linux.
   * Possible values include: 'Linux', 'Windows'
   */
  osType?: string;
  /**
   * Maximum number of nodes for auto-scaling
   */
  maxCount?: number;
  /**
   * Minimum number of nodes for auto-scaling
   */
  minCount?: number;
  /**
   * Whether to enable auto-scaler
   */
  enableAutoScaling?: boolean;
  /**
   * AgentPoolType represents types of an agent pool. Possible values include:
   * 'VirtualMachineScaleSets', 'AvailabilitySet'
   */
  type?: string;
  /**
   * Version of orchestrator specified when creating the managed cluster.
   */
  orchestratorVersion?: string;
  /**
   * The current deployment or provisioning state, which only appears in the response.
   */
  readonly provisioningState?: string;
  /**
   * (PREVIEW) Availability zones for nodes. Must use VirtualMachineScaleSets AgentPoolType.
   */
  availabilityZones?: string[];
}

/**
 * Profile for the container service agent pool.
 */
export interface ManagedClusterAgentPoolProfile extends ManagedClusterAgentPoolProfileProperties {
  /**
   * Unique name of the agent pool profile in the context of the subscription and resource group.
   */
  name: string;
}

/**
 * Agent Pool.
 */
export interface AgentPool extends SubResource {
  /**
   * Number of agents (VMs) to host docker containers. Allowed values must be in the range of 1 to
   * 100 (inclusive). The default value is 1.
   */
  count: number;
  /**
   * Size of agent VMs. Possible values include: 'Standard_A1', 'Standard_A10', 'Standard_A11',
   * 'Standard_A1_v2', 'Standard_A2', 'Standard_A2_v2', 'Standard_A2m_v2', 'Standard_A3',
   * 'Standard_A4', 'Standard_A4_v2', 'Standard_A4m_v2', 'Standard_A5', 'Standard_A6',
   * 'Standard_A7', 'Standard_A8', 'Standard_A8_v2', 'Standard_A8m_v2', 'Standard_A9',
   * 'Standard_B2ms', 'Standard_B2s', 'Standard_B4ms', 'Standard_B8ms', 'Standard_D1',
   * 'Standard_D11', 'Standard_D11_v2', 'Standard_D11_v2_Promo', 'Standard_D12', 'Standard_D12_v2',
   * 'Standard_D12_v2_Promo', 'Standard_D13', 'Standard_D13_v2', 'Standard_D13_v2_Promo',
   * 'Standard_D14', 'Standard_D14_v2', 'Standard_D14_v2_Promo', 'Standard_D15_v2',
   * 'Standard_D16_v3', 'Standard_D16s_v3', 'Standard_D1_v2', 'Standard_D2', 'Standard_D2_v2',
   * 'Standard_D2_v2_Promo', 'Standard_D2_v3', 'Standard_D2s_v3', 'Standard_D3', 'Standard_D32_v3',
   * 'Standard_D32s_v3', 'Standard_D3_v2', 'Standard_D3_v2_Promo', 'Standard_D4', 'Standard_D4_v2',
   * 'Standard_D4_v2_Promo', 'Standard_D4_v3', 'Standard_D4s_v3', 'Standard_D5_v2',
   * 'Standard_D5_v2_Promo', 'Standard_D64_v3', 'Standard_D64s_v3', 'Standard_D8_v3',
   * 'Standard_D8s_v3', 'Standard_DS1', 'Standard_DS11', 'Standard_DS11_v2',
   * 'Standard_DS11_v2_Promo', 'Standard_DS12', 'Standard_DS12_v2', 'Standard_DS12_v2_Promo',
   * 'Standard_DS13', 'Standard_DS13-2_v2', 'Standard_DS13-4_v2', 'Standard_DS13_v2',
   * 'Standard_DS13_v2_Promo', 'Standard_DS14', 'Standard_DS14-4_v2', 'Standard_DS14-8_v2',
   * 'Standard_DS14_v2', 'Standard_DS14_v2_Promo', 'Standard_DS15_v2', 'Standard_DS1_v2',
   * 'Standard_DS2', 'Standard_DS2_v2', 'Standard_DS2_v2_Promo', 'Standard_DS3', 'Standard_DS3_v2',
   * 'Standard_DS3_v2_Promo', 'Standard_DS4', 'Standard_DS4_v2', 'Standard_DS4_v2_Promo',
   * 'Standard_DS5_v2', 'Standard_DS5_v2_Promo', 'Standard_E16_v3', 'Standard_E16s_v3',
   * 'Standard_E2_v3', 'Standard_E2s_v3', 'Standard_E32-16s_v3', 'Standard_E32-8s_v3',
   * 'Standard_E32_v3', 'Standard_E32s_v3', 'Standard_E4_v3', 'Standard_E4s_v3',
   * 'Standard_E64-16s_v3', 'Standard_E64-32s_v3', 'Standard_E64_v3', 'Standard_E64s_v3',
   * 'Standard_E8_v3', 'Standard_E8s_v3', 'Standard_F1', 'Standard_F16', 'Standard_F16s',
   * 'Standard_F16s_v2', 'Standard_F1s', 'Standard_F2', 'Standard_F2s', 'Standard_F2s_v2',
   * 'Standard_F32s_v2', 'Standard_F4', 'Standard_F4s', 'Standard_F4s_v2', 'Standard_F64s_v2',
   * 'Standard_F72s_v2', 'Standard_F8', 'Standard_F8s', 'Standard_F8s_v2', 'Standard_G1',
   * 'Standard_G2', 'Standard_G3', 'Standard_G4', 'Standard_G5', 'Standard_GS1', 'Standard_GS2',
   * 'Standard_GS3', 'Standard_GS4', 'Standard_GS4-4', 'Standard_GS4-8', 'Standard_GS5',
   * 'Standard_GS5-16', 'Standard_GS5-8', 'Standard_H16', 'Standard_H16m', 'Standard_H16mr',
   * 'Standard_H16r', 'Standard_H8', 'Standard_H8m', 'Standard_L16s', 'Standard_L32s',
   * 'Standard_L4s', 'Standard_L8s', 'Standard_M128-32ms', 'Standard_M128-64ms', 'Standard_M128ms',
   * 'Standard_M128s', 'Standard_M64-16ms', 'Standard_M64-32ms', 'Standard_M64ms', 'Standard_M64s',
   * 'Standard_NC12', 'Standard_NC12s_v2', 'Standard_NC12s_v3', 'Standard_NC24', 'Standard_NC24r',
   * 'Standard_NC24rs_v2', 'Standard_NC24rs_v3', 'Standard_NC24s_v2', 'Standard_NC24s_v3',
   * 'Standard_NC6', 'Standard_NC6s_v2', 'Standard_NC6s_v3', 'Standard_ND12s', 'Standard_ND24rs',
   * 'Standard_ND24s', 'Standard_ND6s', 'Standard_NV12', 'Standard_NV24', 'Standard_NV6'
   */
  vmSize: string;
  /**
   * OS Disk Size in GB to be used to specify the disk size for every machine in this master/agent
   * pool. If you specify 0, it will apply the default osDisk size according to the vmSize
   * specified.
   */
  osDiskSizeGB?: number;
  /**
   * VNet SubnetID specifies the VNet's subnet identifier.
   */
  vnetSubnetID?: string;
  /**
   * Maximum number of pods that can run on a node.
   */
  maxPods?: number;
  /**
   * OsType to be used to specify os type. Choose from Linux and Windows. Default to Linux.
   * Possible values include: 'Linux', 'Windows'
   */
  osType?: string;
  /**
   * Maximum number of nodes for auto-scaling
   */
  maxCount?: number;
  /**
   * Minimum number of nodes for auto-scaling
   */
  minCount?: number;
  /**
   * Whether to enable auto-scaler
   */
  enableAutoScaling?: boolean;
  /**
   * AgentPoolType represents types of an agent pool. Possible values include:
   * 'VirtualMachineScaleSets', 'AvailabilitySet'
   */
  agentPoolType?: string;
  /**
   * Version of orchestrator specified when creating the managed cluster.
   */
  orchestratorVersion?: string;
  /**
   * The current deployment or provisioning state, which only appears in the response.
   */
  readonly provisioningState?: string;
  /**
   * (PREVIEW) Availability zones for nodes. Must use VirtualMachineScaleSets AgentPoolType.
   */
  availabilityZones?: string[];
}

/**
 * The response from the List Agent Pools operation.
 */
export interface AgentPoolListResult {
  /**
   * The list of agent pools.
   */
  value?: AgentPool[];
  /**
   * The URL to get the next set of agent pool results.
   */
  readonly nextLink?: string;
}

/**
 * Profile for Windows VMs in the container service cluster.
 */
export interface ContainerServiceWindowsProfile {
  /**
   * The administrator username to use for Windows VMs.
   */
  adminUsername: string;
  /**
   * The administrator password to use for Windows VMs.
   */
  adminPassword: string;
}

/**
 * Contains information about SSH certificate public key data.
 */
export interface ContainerServiceSshPublicKey {
  /**
   * Certificate public key used to authenticate with VMs through SSH. The certificate must be in
   * PEM format with or without headers.
   */
  keyData: string;
}

/**
 * SSH configuration for Linux-based VMs running on Azure.
 */
export interface ContainerServiceSshConfiguration {
  /**
   * The list of SSH public keys used to authenticate with Linux-based VMs. Only expect one key
   * specified.
   */
  publicKeys: ContainerServiceSshPublicKey[];
}

/**
 * Profile for Linux VMs in the container service cluster.
 */
export interface ContainerServiceLinuxProfile {
  /**
   * The administrator username to use for Linux VMs.
   */
  adminUsername: string;
  /**
   * SSH configuration for Linux-based VMs running on Azure.
   */
  ssh: ContainerServiceSshConfiguration;
}

/**
 * Profile of network configuration.
 */
export interface ContainerServiceNetworkProfile {
  /**
   * Network plugin used for building Kubernetes network. Possible values include: 'azure',
   * 'kubenet'
   */
  networkPlugin?: string;
  /**
   * Network policy used for building Kubernetes network. Possible values include: 'calico',
   * 'azure'
   */
  networkPolicy?: string;
  /**
   * A CIDR notation IP range from which to assign pod IPs when kubenet is used.
   */
  podCidr?: string;
  /**
   * A CIDR notation IP range from which to assign service cluster IPs. It must not overlap with
   * any Subnet IP ranges.
   */
  serviceCidr?: string;
  /**
   * An IP address assigned to the Kubernetes DNS service. It must be within the Kubernetes service
   * address range specified in serviceCidr.
   */
  dnsServiceIP?: string;
  /**
   * A CIDR notation IP range assigned to the Docker bridge network. It must not overlap with any
   * Subnet IP ranges or the Kubernetes service address range.
   */
  dockerBridgeCidr?: string;
}

/**
 * Profile for diagnostics on the container service VMs.
 */
export interface ContainerServiceVMDiagnostics {
  /**
   * Whether the VM diagnostic agent is provisioned on the VM.
   */
  enabled: boolean;
  /**
   * The URI of the storage account where diagnostics are stored.
   */
  readonly storageUri?: string;
}

/**
 * Profile for diagnostics on the container service cluster.
 */
export interface ContainerServiceDiagnosticsProfile {
  /**
   * Profile for diagnostics on the container service VMs.
   */
  vmDiagnostics: ContainerServiceVMDiagnostics;
}

/**
 * A Kubernetes add-on profile for a managed cluster.
 */
export interface ManagedClusterAddonProfile {
  /**
   * Whether the add-on is enabled or not.
   */
  enabled: boolean;
  /**
   * Key-value pairs for configuring an add-on.
   */
  config?: { [propertyName: string]: string };
}

/**
 * AADProfile specifies attributes for Azure Active Directory integration.
 */
export interface ManagedClusterAADProfile {
  /**
   * The client AAD application ID.
   */
  clientAppID: string;
  /**
   * The server AAD application ID.
   */
  serverAppID: string;
  /**
   * The server AAD application secret.
   */
  serverAppSecret?: string;
  /**
   * The AAD tenant ID to use for authentication. If not specified, will use the tenant of the
   * deployment subscription.
   */
  tenantID?: string;
}

/**
 * Managed cluster.
 */
export interface ManagedCluster extends Resource {
  /**
   * The current deployment or provisioning state, which only appears in the response.
   */
  readonly provisioningState?: string;
  /**
   * Version of Kubernetes specified when creating the managed cluster.
   */
  kubernetesVersion?: string;
  /**
   * DNS prefix specified when creating the managed cluster.
   */
  dnsPrefix?: string;
  /**
   * FQDN for the master pool.
   */
  readonly fqdn?: string;
  /**
   * Properties of the agent pool.
   */
  agentPoolProfiles?: ManagedClusterAgentPoolProfile[];
  /**
   * Profile for Linux VMs in the container service cluster.
   */
  linuxProfile?: ContainerServiceLinuxProfile;
  /**
   * Information about a service principal identity for the cluster to use for manipulating Azure
   * APIs.
   */
  servicePrincipalProfile?: ManagedClusterServicePrincipalProfile;
  /**
   * Profile of managed cluster add-on.
   */
  addonProfiles?: { [propertyName: string]: ManagedClusterAddonProfile };
  /**
   * Name of the resource group containing agent pool nodes.
   */
  readonly nodeResourceGroup?: string;
  /**
   * Whether to enable Kubernetes Role-Based Access Control.
   */
  enableRBAC?: boolean;
  /**
   * (PREVIEW) Whether to enable Kubernetes Pod security policy.
   */
  enablePodSecurityPolicy?: boolean;
  /**
   * Profile of network configuration.
   */
  networkProfile?: ContainerServiceNetworkProfile;
  /**
   * Profile of Azure Active Directory configuration.
   */
  aadProfile?: ManagedClusterAADProfile;
  /**
   * (PREVIEW) Authorized IP Ranges to kubernetes API server.
   */
  apiServerAuthorizedIPRanges?: string[];
}

/**
 * Contains information about orchestrator.
 */
export interface OrchestratorProfile {
  /**
   * Orchestrator type.
   */
  orchestratorType: string;
  /**
   * Orchestrator version (major, minor, patch).
   */
  orchestratorVersion: string;
}

/**
 * Managed cluster Access Profile.
 */
export interface ManagedClusterAccessProfile extends Resource {
  /**
   * Base64-encoded Kubernetes configuration file.
   */
  kubeConfig?: Buffer;
}

/**
 * The list of available upgrade versions.
 */
export interface ManagedClusterPoolUpgradeProfile {
  /**
   * Kubernetes version (major, minor, patch).
   */
  kubernetesVersion: string;
  /**
   * Pool name.
   */
  name?: string;
  /**
   * OsType to be used to specify os type. Choose from Linux and Windows. Default to Linux.
   * Possible values include: 'Linux', 'Windows'
   */
  osType: string;
  /**
   * List of orchestrator types and versions available for upgrade.
   */
  upgrades?: string[];
}

/**
 * The list of available upgrades for compute pools.
 */
export interface ManagedClusterUpgradeProfile {
  /**
   * Id of upgrade profile.
   */
  readonly id?: string;
  /**
   * Name of upgrade profile.
   */
  readonly name?: string;
  /**
   * Type of upgrade profile.
   */
  readonly type?: string;
  /**
   * The list of available upgrade versions for the control plane.
   */
  controlPlaneProfile: ManagedClusterPoolUpgradeProfile;
  /**
   * The list of available upgrade versions for agent pools.
   */
  agentPoolProfiles: ManagedClusterPoolUpgradeProfile[];
}

/**
 * The credential result response.
 */
export interface CredentialResult {
  /**
   * The name of the credential.
   */
  readonly name?: string;
  /**
   * Base64-encoded Kubernetes configuration file.
   */
  readonly value?: Buffer;
}

/**
 * The list of credential result response.
 */
export interface CredentialResults {
  /**
   * Base64-encoded Kubernetes configuration file.
   */
  readonly kubeconfigs?: CredentialResult[];
}

/**
 * The List Compute Operation operation response.
 */
export interface OperationListResult extends Array<OperationValue> {
}

/**
 * The response from the List Managed Clusters operation.
 */
export interface ManagedClusterListResult extends Array<ManagedCluster> {
  /**
   * The URL to get the next set of managed cluster results.
   */
  readonly nextLink?: string;
}
