/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Container service.
 *
 * @extends models['Resource']
 */
class ContainerService extends models['Resource'] {
  /**
   * Create a ContainerService.
   * @member {string} [provisioningState] The current deployment or
   * provisioning state, which only appears in the response.
   * @member {object} orchestratorProfile Profile for the container service
   * orchestrator.
   * @member {string} [orchestratorProfile.orchestratorType] The orchestrator
   * to use to manage container service cluster resources. Valid values are
   * Kubernetes, Swarm, DCOS, DockerCE and Custom. Possible values include:
   * 'Kubernetes', 'Swarm', 'DCOS', 'DockerCE', 'Custom'
   * @member {string} [orchestratorProfile.orchestratorVersion] The version of
   * the orchestrator to use. You can specify the major.minor.patch part of the
   * actual version.For example, you can specify version as "1.6.11".
   * @member {object} [customProfile] Properties to configure a custom
   * container service cluster.
   * @member {string} [customProfile.orchestrator] The name of the custom
   * orchestrator to use.
   * @member {object} [servicePrincipalProfile] Information about a service
   * principal identity for the cluster to use for manipulating Azure APIs.
   * Exact one of secret or keyVaultSecretRef need to be specified.
   * @member {string} [servicePrincipalProfile.clientId] The ID for the service
   * principal.
   * @member {string} [servicePrincipalProfile.secret] The secret password
   * associated with the service principal in plain text.
   * @member {object} [servicePrincipalProfile.keyVaultSecretRef] Reference to
   * a secret stored in Azure Key Vault.
   * @member {string} [servicePrincipalProfile.keyVaultSecretRef.vaultID] Key
   * vault identifier.
   * @member {string} [servicePrincipalProfile.keyVaultSecretRef.secretName]
   * The secret name.
   * @member {string} [servicePrincipalProfile.keyVaultSecretRef.version] The
   * secret version.
   * @member {object} masterProfile Profile for the container service master.
   * @member {number} [masterProfile.count] Number of masters (VMs) in the
   * container service cluster. Allowed values are 1, 3, and 5. The default
   * value is 1.
   * @member {string} [masterProfile.dnsPrefix] DNS prefix to be used to create
   * the FQDN for the master pool.
   * @member {string} [masterProfile.vmSize] Size of agent VMs. Possible values
   * include: 'Standard_A1', 'Standard_A10', 'Standard_A11', 'Standard_A1_v2',
   * 'Standard_A2', 'Standard_A2_v2', 'Standard_A2m_v2', 'Standard_A3',
   * 'Standard_A4', 'Standard_A4_v2', 'Standard_A4m_v2', 'Standard_A5',
   * 'Standard_A6', 'Standard_A7', 'Standard_A8', 'Standard_A8_v2',
   * 'Standard_A8m_v2', 'Standard_A9', 'Standard_B2ms', 'Standard_B2s',
   * 'Standard_B4ms', 'Standard_B8ms', 'Standard_D1', 'Standard_D11',
   * 'Standard_D11_v2', 'Standard_D11_v2_Promo', 'Standard_D12',
   * 'Standard_D12_v2', 'Standard_D12_v2_Promo', 'Standard_D13',
   * 'Standard_D13_v2', 'Standard_D13_v2_Promo', 'Standard_D14',
   * 'Standard_D14_v2', 'Standard_D14_v2_Promo', 'Standard_D15_v2',
   * 'Standard_D16_v3', 'Standard_D16s_v3', 'Standard_D1_v2', 'Standard_D2',
   * 'Standard_D2_v2', 'Standard_D2_v2_Promo', 'Standard_D2_v3',
   * 'Standard_D2s_v3', 'Standard_D3', 'Standard_D32_v3', 'Standard_D32s_v3',
   * 'Standard_D3_v2', 'Standard_D3_v2_Promo', 'Standard_D4', 'Standard_D4_v2',
   * 'Standard_D4_v2_Promo', 'Standard_D4_v3', 'Standard_D4s_v3',
   * 'Standard_D5_v2', 'Standard_D5_v2_Promo', 'Standard_D64_v3',
   * 'Standard_D64s_v3', 'Standard_D8_v3', 'Standard_D8s_v3', 'Standard_DS1',
   * 'Standard_DS11', 'Standard_DS11_v2', 'Standard_DS11_v2_Promo',
   * 'Standard_DS12', 'Standard_DS12_v2', 'Standard_DS12_v2_Promo',
   * 'Standard_DS13', 'Standard_DS13-2_v2', 'Standard_DS13-4_v2',
   * 'Standard_DS13_v2', 'Standard_DS13_v2_Promo', 'Standard_DS14',
   * 'Standard_DS14-4_v2', 'Standard_DS14-8_v2', 'Standard_DS14_v2',
   * 'Standard_DS14_v2_Promo', 'Standard_DS15_v2', 'Standard_DS1_v2',
   * 'Standard_DS2', 'Standard_DS2_v2', 'Standard_DS2_v2_Promo',
   * 'Standard_DS3', 'Standard_DS3_v2', 'Standard_DS3_v2_Promo',
   * 'Standard_DS4', 'Standard_DS4_v2', 'Standard_DS4_v2_Promo',
   * 'Standard_DS5_v2', 'Standard_DS5_v2_Promo', 'Standard_E16_v3',
   * 'Standard_E16s_v3', 'Standard_E2_v3', 'Standard_E2s_v3',
   * 'Standard_E32-16s_v3', 'Standard_E32-8s_v3', 'Standard_E32_v3',
   * 'Standard_E32s_v3', 'Standard_E4_v3', 'Standard_E4s_v3',
   * 'Standard_E64-16s_v3', 'Standard_E64-32s_v3', 'Standard_E64_v3',
   * 'Standard_E64s_v3', 'Standard_E8_v3', 'Standard_E8s_v3', 'Standard_F1',
   * 'Standard_F16', 'Standard_F16s', 'Standard_F16s_v2', 'Standard_F1s',
   * 'Standard_F2', 'Standard_F2s', 'Standard_F2s_v2', 'Standard_F32s_v2',
   * 'Standard_F4', 'Standard_F4s', 'Standard_F4s_v2', 'Standard_F64s_v2',
   * 'Standard_F72s_v2', 'Standard_F8', 'Standard_F8s', 'Standard_F8s_v2',
   * 'Standard_G1', 'Standard_G2', 'Standard_G3', 'Standard_G4', 'Standard_G5',
   * 'Standard_GS1', 'Standard_GS2', 'Standard_GS3', 'Standard_GS4',
   * 'Standard_GS4-4', 'Standard_GS4-8', 'Standard_GS5', 'Standard_GS5-16',
   * 'Standard_GS5-8', 'Standard_H16', 'Standard_H16m', 'Standard_H16mr',
   * 'Standard_H16r', 'Standard_H8', 'Standard_H8m', 'Standard_L16s',
   * 'Standard_L32s', 'Standard_L4s', 'Standard_L8s', 'Standard_M128-32ms',
   * 'Standard_M128-64ms', 'Standard_M128ms', 'Standard_M128s',
   * 'Standard_M64-16ms', 'Standard_M64-32ms', 'Standard_M64ms',
   * 'Standard_M64s', 'Standard_NC12', 'Standard_NC12s_v2',
   * 'Standard_NC12s_v3', 'Standard_NC24', 'Standard_NC24r',
   * 'Standard_NC24rs_v2', 'Standard_NC24rs_v3', 'Standard_NC24s_v2',
   * 'Standard_NC24s_v3', 'Standard_NC6', 'Standard_NC6s_v2',
   * 'Standard_NC6s_v3', 'Standard_ND12s', 'Standard_ND24rs', 'Standard_ND24s',
   * 'Standard_ND6s', 'Standard_NV12', 'Standard_NV24', 'Standard_NV6'
   * @member {number} [masterProfile.osDiskSizeGB] OS Disk Size in GB to be
   * used to specify the disk size for every machine in this master/agent pool.
   * If you specify 0, it will apply the default osDisk size according to the
   * vmSize specified.
   * @member {string} [masterProfile.vnetSubnetID] VNet SubnetID specifies the
   * VNet's subnet identifier.
   * @member {string} [masterProfile.firstConsecutiveStaticIP]
   * FirstConsecutiveStaticIP used to specify the first static ip of masters.
   * @member {string} [masterProfile.storageProfile] Storage profile specifies
   * what kind of storage used. Choose from StorageAccount and ManagedDisks.
   * Leave it empty, we will choose for you based on the orchestrator choice.
   * Possible values include: 'StorageAccount', 'ManagedDisks'
   * @member {string} [masterProfile.fqdn] FQDN for the master pool.
   * @member {array} [agentPoolProfiles] Properties of the agent pool.
   * @member {object} [windowsProfile] Profile for Windows VMs in the container
   * service cluster.
   * @member {string} [windowsProfile.adminUsername] The administrator username
   * to use for Windows VMs.
   * @member {string} [windowsProfile.adminPassword] The administrator password
   * to use for Windows VMs.
   * @member {object} linuxProfile Profile for Linux VMs in the container
   * service cluster.
   * @member {string} [linuxProfile.adminUsername] The administrator username
   * to use for Linux VMs.
   * @member {object} [linuxProfile.ssh] SSH configuration for Linux-based VMs
   * running on Azure.
   * @member {array} [linuxProfile.ssh.publicKeys] The list of SSH public keys
   * used to authenticate with Linux-based VMs. Only expect one key specified.
   * @member {object} [diagnosticsProfile] Profile for diagnostics in the
   * container service cluster.
   * @member {object} [diagnosticsProfile.vmDiagnostics] Profile for
   * diagnostics on the container service VMs.
   * @member {boolean} [diagnosticsProfile.vmDiagnostics.enabled] Whether the
   * VM diagnostic agent is provisioned on the VM.
   * @member {string} [diagnosticsProfile.vmDiagnostics.storageUri] The URI of
   * the storage account where diagnostics are stored.
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of ContainerService
   *
   * @returns {object} metadata of ContainerService
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'ContainerService',
      type: {
        name: 'Composite',
        className: 'ContainerService',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          location: {
            required: true,
            serializedName: 'location',
            type: {
              name: 'String'
            }
          },
          tags: {
            required: false,
            serializedName: 'tags',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          provisioningState: {
            required: false,
            readOnly: true,
            serializedName: 'properties.provisioningState',
            type: {
              name: 'String'
            }
          },
          orchestratorProfile: {
            required: true,
            serializedName: 'properties.orchestratorProfile',
            type: {
              name: 'Composite',
              className: 'ContainerServiceOrchestratorProfile'
            }
          },
          customProfile: {
            required: false,
            serializedName: 'properties.customProfile',
            type: {
              name: 'Composite',
              className: 'ContainerServiceCustomProfile'
            }
          },
          servicePrincipalProfile: {
            required: false,
            serializedName: 'properties.servicePrincipalProfile',
            type: {
              name: 'Composite',
              className: 'ContainerServiceServicePrincipalProfile'
            }
          },
          masterProfile: {
            required: true,
            serializedName: 'properties.masterProfile',
            type: {
              name: 'Composite',
              className: 'ContainerServiceMasterProfile'
            }
          },
          agentPoolProfiles: {
            required: false,
            serializedName: 'properties.agentPoolProfiles',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ContainerServiceAgentPoolProfileElementType',
                  type: {
                    name: 'Composite',
                    className: 'ContainerServiceAgentPoolProfile'
                  }
              }
            }
          },
          windowsProfile: {
            required: false,
            serializedName: 'properties.windowsProfile',
            type: {
              name: 'Composite',
              className: 'ContainerServiceWindowsProfile'
            }
          },
          linuxProfile: {
            required: true,
            serializedName: 'properties.linuxProfile',
            type: {
              name: 'Composite',
              className: 'ContainerServiceLinuxProfile'
            }
          },
          diagnosticsProfile: {
            required: false,
            serializedName: 'properties.diagnosticsProfile',
            type: {
              name: 'Composite',
              className: 'ContainerServiceDiagnosticsProfile'
            }
          }
        }
      }
    };
  }
}

module.exports = ContainerService;
