/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback, HttpOperationResponse } from 'ms-rest';
import * as models from '../models';


/**
 * @class
 * OpenShiftManagedClusters
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ContainerServiceClient.
 */
export interface OpenShiftManagedClusters {


    /**
     * @summary Gets a list of OpenShift managed clusters in the specified
     * subscription.
     *
     * Gets a list of OpenShift managed clusters in the specified subscription. The
     * operation returns properties of each OpenShift managed cluster.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OpenShiftManagedClusterListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OpenShiftManagedClusterListResult>>;

    /**
     * @summary Gets a list of OpenShift managed clusters in the specified
     * subscription.
     *
     * Gets a list of OpenShift managed clusters in the specified subscription. The
     * operation returns properties of each OpenShift managed cluster.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OpenShiftManagedClusterListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OpenShiftManagedClusterListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OpenShiftManagedClusterListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.OpenShiftManagedClusterListResult>;
    list(callback: ServiceCallback<models.OpenShiftManagedClusterListResult>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OpenShiftManagedClusterListResult>): void;


    /**
     * @summary Lists OpenShift managed clusters in the specified subscription and
     * resource group.
     *
     * Lists OpenShift managed clusters in the specified subscription and resource
     * group. The operation returns properties of each OpenShift managed cluster.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OpenShiftManagedClusterListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupWithHttpOperationResponse(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OpenShiftManagedClusterListResult>>;

    /**
     * @summary Lists OpenShift managed clusters in the specified subscription and
     * resource group.
     *
     * Lists OpenShift managed clusters in the specified subscription and resource
     * group. The operation returns properties of each OpenShift managed cluster.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OpenShiftManagedClusterListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OpenShiftManagedClusterListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OpenShiftManagedClusterListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroup(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.OpenShiftManagedClusterListResult>;
    listByResourceGroup(resourceGroupName: string, callback: ServiceCallback<models.OpenShiftManagedClusterListResult>): void;
    listByResourceGroup(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OpenShiftManagedClusterListResult>): void;


    /**
     * @summary Gets a OpenShift managed cluster.
     *
     * Gets the details of the managed OpenShift cluster with a specified resource
     * group and name.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} resourceName The name of the OpenShift managed cluster
     * resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OpenShiftManagedCluster>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, resourceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OpenShiftManagedCluster>>;

    /**
     * @summary Gets a OpenShift managed cluster.
     *
     * Gets the details of the managed OpenShift cluster with a specified resource
     * group and name.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} resourceName The name of the OpenShift managed cluster
     * resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OpenShiftManagedCluster} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OpenShiftManagedCluster} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OpenShiftManagedCluster} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, resourceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.OpenShiftManagedCluster>;
    get(resourceGroupName: string, resourceName: string, callback: ServiceCallback<models.OpenShiftManagedCluster>): void;
    get(resourceGroupName: string, resourceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OpenShiftManagedCluster>): void;


    /**
     * @summary Creates or updates an OpenShift managed cluster.
     *
     * Creates or updates a OpenShift managed cluster with the specified
     * configuration for agents and OpenShift version.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} resourceName The name of the OpenShift managed cluster
     * resource.
     *
     * @param {object} parameters Parameters supplied to the Create or Update an
     * OpenShift Managed Cluster operation.
     *
     * @param {object} [parameters.plan] Define the resource plan as required by
     * ARM for billing purposes
     *
     * @param {string} [parameters.plan.name] The plan ID.
     *
     * @param {string} [parameters.plan.product] Specifies the product of the image
     * from the marketplace. This is the same value as Offer under the
     * imageReference element.
     *
     * @param {string} [parameters.plan.promotionCode] The promotion code.
     *
     * @param {string} [parameters.plan.publisher] The plan ID.
     *
     * @param {string} parameters.openShiftVersion Version of OpenShift specified
     * when creating the cluster.
     *
     * @param {string} [parameters.publicHostname] Optional user-specified FQDN for
     * OpenShift API server.
     *
     * @param {string} [parameters.fqdn] User-specified FQDN for OpenShift API
     * server loadbalancer internal hostname.
     *
     * @param {object} [parameters.networkProfile] Configuration for OpenShift
     * networking.
     *
     * @param {string} [parameters.networkProfile.vnetCidr] CIDR for the OpenShift
     * Vnet.
     *
     * @param {string} [parameters.networkProfile.peerVnetId] CIDR of the Vnet to
     * peer.
     *
     * @param {array} [parameters.routerProfiles] Configuration for OpenShift
     * router(s).
     *
     * @param {object} [parameters.masterPoolProfile] Configuration for OpenShift
     * master VMs.
     *
     * @param {string} [parameters.masterPoolProfile.name] Unique name of the
     * master pool profile in the context of the subscription and resource group.
     *
     * @param {number} parameters.masterPoolProfile.count Number of masters (VMs)
     * to host docker containers. The default value is 3.
     *
     * @param {string} parameters.masterPoolProfile.vmSize Size of agent VMs.
     * Possible values include: 'Standard_D2s_v3', 'Standard_D4s_v3',
     * 'Standard_D8s_v3', 'Standard_D16s_v3', 'Standard_D32s_v3',
     * 'Standard_D64s_v3', 'Standard_DS4_v2', 'Standard_DS5_v2', 'Standard_F8s_v2',
     * 'Standard_F16s_v2', 'Standard_F32s_v2', 'Standard_F64s_v2',
     * 'Standard_F72s_v2', 'Standard_F8s', 'Standard_F16s', 'Standard_E4s_v3',
     * 'Standard_E8s_v3', 'Standard_E16s_v3', 'Standard_E20s_v3',
     * 'Standard_E32s_v3', 'Standard_E64s_v3', 'Standard_GS2', 'Standard_GS3',
     * 'Standard_GS4', 'Standard_GS5', 'Standard_DS12_v2', 'Standard_DS13_v2',
     * 'Standard_DS14_v2', 'Standard_DS15_v2', 'Standard_L4s', 'Standard_L8s',
     * 'Standard_L16s', 'Standard_L32s'
     *
     * @param {string} [parameters.masterPoolProfile.subnetCidr] Subnet CIDR for
     * the peering.
     *
     * @param {string} [parameters.masterPoolProfile.osType] OsType to be used to
     * specify os type. Choose from Linux and Windows. Default to Linux. Possible
     * values include: 'Linux', 'Windows'
     *
     * @param {array} [parameters.agentPoolProfiles] Configuration of OpenShift
     * cluster VMs.
     *
     * @param {object} [parameters.authProfile] Configures OpenShift
     * authentication.
     *
     * @param {array} [parameters.authProfile.identityProviders] Type of
     * authentication profile to use.
     *
     * @param {string} parameters.location Resource location
     *
     * @param {object} [parameters.tags] Resource tags
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OpenShiftManagedCluster>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, resourceName: string, parameters: models.OpenShiftManagedCluster, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OpenShiftManagedCluster>>;

    /**
     * @summary Creates or updates an OpenShift managed cluster.
     *
     * Creates or updates a OpenShift managed cluster with the specified
     * configuration for agents and OpenShift version.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} resourceName The name of the OpenShift managed cluster
     * resource.
     *
     * @param {object} parameters Parameters supplied to the Create or Update an
     * OpenShift Managed Cluster operation.
     *
     * @param {object} [parameters.plan] Define the resource plan as required by
     * ARM for billing purposes
     *
     * @param {string} [parameters.plan.name] The plan ID.
     *
     * @param {string} [parameters.plan.product] Specifies the product of the image
     * from the marketplace. This is the same value as Offer under the
     * imageReference element.
     *
     * @param {string} [parameters.plan.promotionCode] The promotion code.
     *
     * @param {string} [parameters.plan.publisher] The plan ID.
     *
     * @param {string} parameters.openShiftVersion Version of OpenShift specified
     * when creating the cluster.
     *
     * @param {string} [parameters.publicHostname] Optional user-specified FQDN for
     * OpenShift API server.
     *
     * @param {string} [parameters.fqdn] User-specified FQDN for OpenShift API
     * server loadbalancer internal hostname.
     *
     * @param {object} [parameters.networkProfile] Configuration for OpenShift
     * networking.
     *
     * @param {string} [parameters.networkProfile.vnetCidr] CIDR for the OpenShift
     * Vnet.
     *
     * @param {string} [parameters.networkProfile.peerVnetId] CIDR of the Vnet to
     * peer.
     *
     * @param {array} [parameters.routerProfiles] Configuration for OpenShift
     * router(s).
     *
     * @param {object} [parameters.masterPoolProfile] Configuration for OpenShift
     * master VMs.
     *
     * @param {string} [parameters.masterPoolProfile.name] Unique name of the
     * master pool profile in the context of the subscription and resource group.
     *
     * @param {number} parameters.masterPoolProfile.count Number of masters (VMs)
     * to host docker containers. The default value is 3.
     *
     * @param {string} parameters.masterPoolProfile.vmSize Size of agent VMs.
     * Possible values include: 'Standard_D2s_v3', 'Standard_D4s_v3',
     * 'Standard_D8s_v3', 'Standard_D16s_v3', 'Standard_D32s_v3',
     * 'Standard_D64s_v3', 'Standard_DS4_v2', 'Standard_DS5_v2', 'Standard_F8s_v2',
     * 'Standard_F16s_v2', 'Standard_F32s_v2', 'Standard_F64s_v2',
     * 'Standard_F72s_v2', 'Standard_F8s', 'Standard_F16s', 'Standard_E4s_v3',
     * 'Standard_E8s_v3', 'Standard_E16s_v3', 'Standard_E20s_v3',
     * 'Standard_E32s_v3', 'Standard_E64s_v3', 'Standard_GS2', 'Standard_GS3',
     * 'Standard_GS4', 'Standard_GS5', 'Standard_DS12_v2', 'Standard_DS13_v2',
     * 'Standard_DS14_v2', 'Standard_DS15_v2', 'Standard_L4s', 'Standard_L8s',
     * 'Standard_L16s', 'Standard_L32s'
     *
     * @param {string} [parameters.masterPoolProfile.subnetCidr] Subnet CIDR for
     * the peering.
     *
     * @param {string} [parameters.masterPoolProfile.osType] OsType to be used to
     * specify os type. Choose from Linux and Windows. Default to Linux. Possible
     * values include: 'Linux', 'Windows'
     *
     * @param {array} [parameters.agentPoolProfiles] Configuration of OpenShift
     * cluster VMs.
     *
     * @param {object} [parameters.authProfile] Configures OpenShift
     * authentication.
     *
     * @param {array} [parameters.authProfile.identityProviders] Type of
     * authentication profile to use.
     *
     * @param {string} parameters.location Resource location
     *
     * @param {object} [parameters.tags] Resource tags
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OpenShiftManagedCluster} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OpenShiftManagedCluster} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OpenShiftManagedCluster} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, resourceName: string, parameters: models.OpenShiftManagedCluster, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.OpenShiftManagedCluster>;
    createOrUpdate(resourceGroupName: string, resourceName: string, parameters: models.OpenShiftManagedCluster, callback: ServiceCallback<models.OpenShiftManagedCluster>): void;
    createOrUpdate(resourceGroupName: string, resourceName: string, parameters: models.OpenShiftManagedCluster, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OpenShiftManagedCluster>): void;


    /**
     * @summary Updates tags on an OpenShift managed cluster.
     *
     * Updates an OpenShift managed cluster with the specified tags.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} resourceName The name of the OpenShift managed cluster
     * resource.
     *
     * @param {object} parameters Parameters supplied to the Update OpenShift
     * Managed Cluster Tags operation.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OpenShiftManagedCluster>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateTagsWithHttpOperationResponse(resourceGroupName: string, resourceName: string, parameters: models.TagsObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OpenShiftManagedCluster>>;

    /**
     * @summary Updates tags on an OpenShift managed cluster.
     *
     * Updates an OpenShift managed cluster with the specified tags.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} resourceName The name of the OpenShift managed cluster
     * resource.
     *
     * @param {object} parameters Parameters supplied to the Update OpenShift
     * Managed Cluster Tags operation.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OpenShiftManagedCluster} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OpenShiftManagedCluster} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OpenShiftManagedCluster} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updateTags(resourceGroupName: string, resourceName: string, parameters: models.TagsObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.OpenShiftManagedCluster>;
    updateTags(resourceGroupName: string, resourceName: string, parameters: models.TagsObject, callback: ServiceCallback<models.OpenShiftManagedCluster>): void;
    updateTags(resourceGroupName: string, resourceName: string, parameters: models.TagsObject, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OpenShiftManagedCluster>): void;


    /**
     * @summary Deletes an OpenShift managed cluster.
     *
     * Deletes the OpenShift managed cluster with a specified resource group and
     * name.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} resourceName The name of the OpenShift managed cluster
     * resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, resourceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Deletes an OpenShift managed cluster.
     *
     * Deletes the OpenShift managed cluster with a specified resource group and
     * name.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} resourceName The name of the OpenShift managed cluster
     * resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, resourceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, resourceName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, resourceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Creates or updates an OpenShift managed cluster.
     *
     * Creates or updates a OpenShift managed cluster with the specified
     * configuration for agents and OpenShift version.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} resourceName The name of the OpenShift managed cluster
     * resource.
     *
     * @param {object} parameters Parameters supplied to the Create or Update an
     * OpenShift Managed Cluster operation.
     *
     * @param {object} [parameters.plan] Define the resource plan as required by
     * ARM for billing purposes
     *
     * @param {string} [parameters.plan.name] The plan ID.
     *
     * @param {string} [parameters.plan.product] Specifies the product of the image
     * from the marketplace. This is the same value as Offer under the
     * imageReference element.
     *
     * @param {string} [parameters.plan.promotionCode] The promotion code.
     *
     * @param {string} [parameters.plan.publisher] The plan ID.
     *
     * @param {string} parameters.openShiftVersion Version of OpenShift specified
     * when creating the cluster.
     *
     * @param {string} [parameters.publicHostname] Optional user-specified FQDN for
     * OpenShift API server.
     *
     * @param {string} [parameters.fqdn] User-specified FQDN for OpenShift API
     * server loadbalancer internal hostname.
     *
     * @param {object} [parameters.networkProfile] Configuration for OpenShift
     * networking.
     *
     * @param {string} [parameters.networkProfile.vnetCidr] CIDR for the OpenShift
     * Vnet.
     *
     * @param {string} [parameters.networkProfile.peerVnetId] CIDR of the Vnet to
     * peer.
     *
     * @param {array} [parameters.routerProfiles] Configuration for OpenShift
     * router(s).
     *
     * @param {object} [parameters.masterPoolProfile] Configuration for OpenShift
     * master VMs.
     *
     * @param {string} [parameters.masterPoolProfile.name] Unique name of the
     * master pool profile in the context of the subscription and resource group.
     *
     * @param {number} parameters.masterPoolProfile.count Number of masters (VMs)
     * to host docker containers. The default value is 3.
     *
     * @param {string} parameters.masterPoolProfile.vmSize Size of agent VMs.
     * Possible values include: 'Standard_D2s_v3', 'Standard_D4s_v3',
     * 'Standard_D8s_v3', 'Standard_D16s_v3', 'Standard_D32s_v3',
     * 'Standard_D64s_v3', 'Standard_DS4_v2', 'Standard_DS5_v2', 'Standard_F8s_v2',
     * 'Standard_F16s_v2', 'Standard_F32s_v2', 'Standard_F64s_v2',
     * 'Standard_F72s_v2', 'Standard_F8s', 'Standard_F16s', 'Standard_E4s_v3',
     * 'Standard_E8s_v3', 'Standard_E16s_v3', 'Standard_E20s_v3',
     * 'Standard_E32s_v3', 'Standard_E64s_v3', 'Standard_GS2', 'Standard_GS3',
     * 'Standard_GS4', 'Standard_GS5', 'Standard_DS12_v2', 'Standard_DS13_v2',
     * 'Standard_DS14_v2', 'Standard_DS15_v2', 'Standard_L4s', 'Standard_L8s',
     * 'Standard_L16s', 'Standard_L32s'
     *
     * @param {string} [parameters.masterPoolProfile.subnetCidr] Subnet CIDR for
     * the peering.
     *
     * @param {string} [parameters.masterPoolProfile.osType] OsType to be used to
     * specify os type. Choose from Linux and Windows. Default to Linux. Possible
     * values include: 'Linux', 'Windows'
     *
     * @param {array} [parameters.agentPoolProfiles] Configuration of OpenShift
     * cluster VMs.
     *
     * @param {object} [parameters.authProfile] Configures OpenShift
     * authentication.
     *
     * @param {array} [parameters.authProfile.identityProviders] Type of
     * authentication profile to use.
     *
     * @param {string} parameters.location Resource location
     *
     * @param {object} [parameters.tags] Resource tags
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OpenShiftManagedCluster>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, resourceName: string, parameters: models.OpenShiftManagedCluster, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OpenShiftManagedCluster>>;

    /**
     * @summary Creates or updates an OpenShift managed cluster.
     *
     * Creates or updates a OpenShift managed cluster with the specified
     * configuration for agents and OpenShift version.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} resourceName The name of the OpenShift managed cluster
     * resource.
     *
     * @param {object} parameters Parameters supplied to the Create or Update an
     * OpenShift Managed Cluster operation.
     *
     * @param {object} [parameters.plan] Define the resource plan as required by
     * ARM for billing purposes
     *
     * @param {string} [parameters.plan.name] The plan ID.
     *
     * @param {string} [parameters.plan.product] Specifies the product of the image
     * from the marketplace. This is the same value as Offer under the
     * imageReference element.
     *
     * @param {string} [parameters.plan.promotionCode] The promotion code.
     *
     * @param {string} [parameters.plan.publisher] The plan ID.
     *
     * @param {string} parameters.openShiftVersion Version of OpenShift specified
     * when creating the cluster.
     *
     * @param {string} [parameters.publicHostname] Optional user-specified FQDN for
     * OpenShift API server.
     *
     * @param {string} [parameters.fqdn] User-specified FQDN for OpenShift API
     * server loadbalancer internal hostname.
     *
     * @param {object} [parameters.networkProfile] Configuration for OpenShift
     * networking.
     *
     * @param {string} [parameters.networkProfile.vnetCidr] CIDR for the OpenShift
     * Vnet.
     *
     * @param {string} [parameters.networkProfile.peerVnetId] CIDR of the Vnet to
     * peer.
     *
     * @param {array} [parameters.routerProfiles] Configuration for OpenShift
     * router(s).
     *
     * @param {object} [parameters.masterPoolProfile] Configuration for OpenShift
     * master VMs.
     *
     * @param {string} [parameters.masterPoolProfile.name] Unique name of the
     * master pool profile in the context of the subscription and resource group.
     *
     * @param {number} parameters.masterPoolProfile.count Number of masters (VMs)
     * to host docker containers. The default value is 3.
     *
     * @param {string} parameters.masterPoolProfile.vmSize Size of agent VMs.
     * Possible values include: 'Standard_D2s_v3', 'Standard_D4s_v3',
     * 'Standard_D8s_v3', 'Standard_D16s_v3', 'Standard_D32s_v3',
     * 'Standard_D64s_v3', 'Standard_DS4_v2', 'Standard_DS5_v2', 'Standard_F8s_v2',
     * 'Standard_F16s_v2', 'Standard_F32s_v2', 'Standard_F64s_v2',
     * 'Standard_F72s_v2', 'Standard_F8s', 'Standard_F16s', 'Standard_E4s_v3',
     * 'Standard_E8s_v3', 'Standard_E16s_v3', 'Standard_E20s_v3',
     * 'Standard_E32s_v3', 'Standard_E64s_v3', 'Standard_GS2', 'Standard_GS3',
     * 'Standard_GS4', 'Standard_GS5', 'Standard_DS12_v2', 'Standard_DS13_v2',
     * 'Standard_DS14_v2', 'Standard_DS15_v2', 'Standard_L4s', 'Standard_L8s',
     * 'Standard_L16s', 'Standard_L32s'
     *
     * @param {string} [parameters.masterPoolProfile.subnetCidr] Subnet CIDR for
     * the peering.
     *
     * @param {string} [parameters.masterPoolProfile.osType] OsType to be used to
     * specify os type. Choose from Linux and Windows. Default to Linux. Possible
     * values include: 'Linux', 'Windows'
     *
     * @param {array} [parameters.agentPoolProfiles] Configuration of OpenShift
     * cluster VMs.
     *
     * @param {object} [parameters.authProfile] Configures OpenShift
     * authentication.
     *
     * @param {array} [parameters.authProfile.identityProviders] Type of
     * authentication profile to use.
     *
     * @param {string} parameters.location Resource location
     *
     * @param {object} [parameters.tags] Resource tags
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OpenShiftManagedCluster} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OpenShiftManagedCluster} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OpenShiftManagedCluster} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(resourceGroupName: string, resourceName: string, parameters: models.OpenShiftManagedCluster, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.OpenShiftManagedCluster>;
    beginCreateOrUpdate(resourceGroupName: string, resourceName: string, parameters: models.OpenShiftManagedCluster, callback: ServiceCallback<models.OpenShiftManagedCluster>): void;
    beginCreateOrUpdate(resourceGroupName: string, resourceName: string, parameters: models.OpenShiftManagedCluster, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OpenShiftManagedCluster>): void;


    /**
     * @summary Updates tags on an OpenShift managed cluster.
     *
     * Updates an OpenShift managed cluster with the specified tags.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} resourceName The name of the OpenShift managed cluster
     * resource.
     *
     * @param {object} parameters Parameters supplied to the Update OpenShift
     * Managed Cluster Tags operation.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OpenShiftManagedCluster>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginUpdateTagsWithHttpOperationResponse(resourceGroupName: string, resourceName: string, parameters: models.TagsObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OpenShiftManagedCluster>>;

    /**
     * @summary Updates tags on an OpenShift managed cluster.
     *
     * Updates an OpenShift managed cluster with the specified tags.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} resourceName The name of the OpenShift managed cluster
     * resource.
     *
     * @param {object} parameters Parameters supplied to the Update OpenShift
     * Managed Cluster Tags operation.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OpenShiftManagedCluster} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OpenShiftManagedCluster} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OpenShiftManagedCluster} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginUpdateTags(resourceGroupName: string, resourceName: string, parameters: models.TagsObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.OpenShiftManagedCluster>;
    beginUpdateTags(resourceGroupName: string, resourceName: string, parameters: models.TagsObject, callback: ServiceCallback<models.OpenShiftManagedCluster>): void;
    beginUpdateTags(resourceGroupName: string, resourceName: string, parameters: models.TagsObject, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OpenShiftManagedCluster>): void;


    /**
     * @summary Deletes an OpenShift managed cluster.
     *
     * Deletes the OpenShift managed cluster with a specified resource group and
     * name.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} resourceName The name of the OpenShift managed cluster
     * resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, resourceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Deletes an OpenShift managed cluster.
     *
     * Deletes the OpenShift managed cluster with a specified resource group and
     * name.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} resourceName The name of the OpenShift managed cluster
     * resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(resourceGroupName: string, resourceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(resourceGroupName: string, resourceName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, resourceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Gets a list of OpenShift managed clusters in the specified
     * subscription.
     *
     * Gets a list of OpenShift managed clusters in the specified subscription. The
     * operation returns properties of each OpenShift managed cluster.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OpenShiftManagedClusterListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OpenShiftManagedClusterListResult>>;

    /**
     * @summary Gets a list of OpenShift managed clusters in the specified
     * subscription.
     *
     * Gets a list of OpenShift managed clusters in the specified subscription. The
     * operation returns properties of each OpenShift managed cluster.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OpenShiftManagedClusterListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OpenShiftManagedClusterListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OpenShiftManagedClusterListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.OpenShiftManagedClusterListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.OpenShiftManagedClusterListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OpenShiftManagedClusterListResult>): void;


    /**
     * @summary Lists OpenShift managed clusters in the specified subscription and
     * resource group.
     *
     * Lists OpenShift managed clusters in the specified subscription and resource
     * group. The operation returns properties of each OpenShift managed cluster.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OpenShiftManagedClusterListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OpenShiftManagedClusterListResult>>;

    /**
     * @summary Lists OpenShift managed clusters in the specified subscription and
     * resource group.
     *
     * Lists OpenShift managed clusters in the specified subscription and resource
     * group. The operation returns properties of each OpenShift managed cluster.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OpenShiftManagedClusterListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OpenShiftManagedClusterListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OpenShiftManagedClusterListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroupNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.OpenShiftManagedClusterListResult>;
    listByResourceGroupNext(nextPageLink: string, callback: ServiceCallback<models.OpenShiftManagedClusterListResult>): void;
    listByResourceGroupNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OpenShiftManagedClusterListResult>): void;
}

/**
 * @class
 * ContainerServices
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ContainerServiceClient.
 */
export interface ContainerServices {


    /**
     * @summary Gets a list of container services in the specified subscription.
     *
     * Gets a list of container services in the specified subscription. The
     * operation returns properties of each container service including state,
     * orchestrator, number of masters and agents, and FQDNs of masters and agents.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ContainerServiceListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ContainerServiceListResult>>;

    /**
     * @summary Gets a list of container services in the specified subscription.
     *
     * Gets a list of container services in the specified subscription. The
     * operation returns properties of each container service including state,
     * orchestrator, number of masters and agents, and FQDNs of masters and agents.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ContainerServiceListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ContainerServiceListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ContainerServiceListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ContainerServiceListResult>;
    list(callback: ServiceCallback<models.ContainerServiceListResult>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ContainerServiceListResult>): void;


    /**
     * @summary Creates or updates a container service.
     *
     * Creates or updates a container service with the specified configuration of
     * orchestrator, masters, and agents.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} containerServiceName The name of the container service in
     * the specified subscription and resource group.
     *
     * @param {object} parameters Parameters supplied to the Create or Update a
     * Container Service operation.
     *
     * @param {object} parameters.orchestratorProfile Profile for the container
     * service orchestrator.
     *
     * @param {string} parameters.orchestratorProfile.orchestratorType The
     * orchestrator to use to manage container service cluster resources. Valid
     * values are Kubernetes, Swarm, DCOS, DockerCE and Custom. Possible values
     * include: 'Kubernetes', 'Swarm', 'DCOS', 'DockerCE', 'Custom'
     *
     * @param {string} [parameters.orchestratorProfile.orchestratorVersion] The
     * version of the orchestrator to use. You can specify the major.minor.patch
     * part of the actual version.For example, you can specify version as "1.6.11".
     *
     * @param {object} [parameters.customProfile] Properties to configure a custom
     * container service cluster.
     *
     * @param {string} parameters.customProfile.orchestrator The name of the custom
     * orchestrator to use.
     *
     * @param {object} [parameters.servicePrincipalProfile] Information about a
     * service principal identity for the cluster to use for manipulating Azure
     * APIs. Exact one of secret or keyVaultSecretRef need to be specified.
     *
     * @param {string} parameters.servicePrincipalProfile.clientId The ID for the
     * service principal.
     *
     * @param {string} [parameters.servicePrincipalProfile.secret] The secret
     * password associated with the service principal in plain text.
     *
     * @param {object} [parameters.servicePrincipalProfile.keyVaultSecretRef]
     * Reference to a secret stored in Azure Key Vault.
     *
     * @param {string} parameters.servicePrincipalProfile.keyVaultSecretRef.vaultID
     * Key vault identifier.
     *
     * @param {string}
     * parameters.servicePrincipalProfile.keyVaultSecretRef.secretName The secret
     * name.
     *
     * @param {string}
     * [parameters.servicePrincipalProfile.keyVaultSecretRef.version] The secret
     * version.
     *
     * @param {object} parameters.masterProfile Profile for the container service
     * master.
     *
     * @param {number} [parameters.masterProfile.count] Number of masters (VMs) in
     * the container service cluster. Allowed values are 1, 3, and 5. The default
     * value is 1.
     *
     * @param {string} parameters.masterProfile.dnsPrefix DNS prefix to be used to
     * create the FQDN for the master pool.
     *
     * @param {string} parameters.masterProfile.vmSize Size of agent VMs. Possible
     * values include: 'Standard_A1', 'Standard_A10', 'Standard_A11',
     * 'Standard_A1_v2', 'Standard_A2', 'Standard_A2_v2', 'Standard_A2m_v2',
     * 'Standard_A3', 'Standard_A4', 'Standard_A4_v2', 'Standard_A4m_v2',
     * 'Standard_A5', 'Standard_A6', 'Standard_A7', 'Standard_A8',
     * 'Standard_A8_v2', 'Standard_A8m_v2', 'Standard_A9', 'Standard_B2ms',
     * 'Standard_B2s', 'Standard_B4ms', 'Standard_B8ms', 'Standard_D1',
     * 'Standard_D11', 'Standard_D11_v2', 'Standard_D11_v2_Promo', 'Standard_D12',
     * 'Standard_D12_v2', 'Standard_D12_v2_Promo', 'Standard_D13',
     * 'Standard_D13_v2', 'Standard_D13_v2_Promo', 'Standard_D14',
     * 'Standard_D14_v2', 'Standard_D14_v2_Promo', 'Standard_D15_v2',
     * 'Standard_D16_v3', 'Standard_D16s_v3', 'Standard_D1_v2', 'Standard_D2',
     * 'Standard_D2_v2', 'Standard_D2_v2_Promo', 'Standard_D2_v3',
     * 'Standard_D2s_v3', 'Standard_D3', 'Standard_D32_v3', 'Standard_D32s_v3',
     * 'Standard_D3_v2', 'Standard_D3_v2_Promo', 'Standard_D4', 'Standard_D4_v2',
     * 'Standard_D4_v2_Promo', 'Standard_D4_v3', 'Standard_D4s_v3',
     * 'Standard_D5_v2', 'Standard_D5_v2_Promo', 'Standard_D64_v3',
     * 'Standard_D64s_v3', 'Standard_D8_v3', 'Standard_D8s_v3', 'Standard_DS1',
     * 'Standard_DS11', 'Standard_DS11_v2', 'Standard_DS11_v2_Promo',
     * 'Standard_DS12', 'Standard_DS12_v2', 'Standard_DS12_v2_Promo',
     * 'Standard_DS13', 'Standard_DS13-2_v2', 'Standard_DS13-4_v2',
     * 'Standard_DS13_v2', 'Standard_DS13_v2_Promo', 'Standard_DS14',
     * 'Standard_DS14-4_v2', 'Standard_DS14-8_v2', 'Standard_DS14_v2',
     * 'Standard_DS14_v2_Promo', 'Standard_DS15_v2', 'Standard_DS1_v2',
     * 'Standard_DS2', 'Standard_DS2_v2', 'Standard_DS2_v2_Promo', 'Standard_DS3',
     * 'Standard_DS3_v2', 'Standard_DS3_v2_Promo', 'Standard_DS4',
     * 'Standard_DS4_v2', 'Standard_DS4_v2_Promo', 'Standard_DS5_v2',
     * 'Standard_DS5_v2_Promo', 'Standard_E16_v3', 'Standard_E16s_v3',
     * 'Standard_E2_v3', 'Standard_E2s_v3', 'Standard_E32-16s_v3',
     * 'Standard_E32-8s_v3', 'Standard_E32_v3', 'Standard_E32s_v3',
     * 'Standard_E4_v3', 'Standard_E4s_v3', 'Standard_E64-16s_v3',
     * 'Standard_E64-32s_v3', 'Standard_E64_v3', 'Standard_E64s_v3',
     * 'Standard_E8_v3', 'Standard_E8s_v3', 'Standard_F1', 'Standard_F16',
     * 'Standard_F16s', 'Standard_F16s_v2', 'Standard_F1s', 'Standard_F2',
     * 'Standard_F2s', 'Standard_F2s_v2', 'Standard_F32s_v2', 'Standard_F4',
     * 'Standard_F4s', 'Standard_F4s_v2', 'Standard_F64s_v2', 'Standard_F72s_v2',
     * 'Standard_F8', 'Standard_F8s', 'Standard_F8s_v2', 'Standard_G1',
     * 'Standard_G2', 'Standard_G3', 'Standard_G4', 'Standard_G5', 'Standard_GS1',
     * 'Standard_GS2', 'Standard_GS3', 'Standard_GS4', 'Standard_GS4-4',
     * 'Standard_GS4-8', 'Standard_GS5', 'Standard_GS5-16', 'Standard_GS5-8',
     * 'Standard_H16', 'Standard_H16m', 'Standard_H16mr', 'Standard_H16r',
     * 'Standard_H8', 'Standard_H8m', 'Standard_L16s', 'Standard_L32s',
     * 'Standard_L4s', 'Standard_L8s', 'Standard_M128-32ms', 'Standard_M128-64ms',
     * 'Standard_M128ms', 'Standard_M128s', 'Standard_M64-16ms',
     * 'Standard_M64-32ms', 'Standard_M64ms', 'Standard_M64s', 'Standard_NC12',
     * 'Standard_NC12s_v2', 'Standard_NC12s_v3', 'Standard_NC24', 'Standard_NC24r',
     * 'Standard_NC24rs_v2', 'Standard_NC24rs_v3', 'Standard_NC24s_v2',
     * 'Standard_NC24s_v3', 'Standard_NC6', 'Standard_NC6s_v2', 'Standard_NC6s_v3',
     * 'Standard_ND12s', 'Standard_ND24rs', 'Standard_ND24s', 'Standard_ND6s',
     * 'Standard_NV12', 'Standard_NV24', 'Standard_NV6'
     *
     * @param {number} [parameters.masterProfile.osDiskSizeGB] OS Disk Size in GB
     * to be used to specify the disk size for every machine in this master/agent
     * pool. If you specify 0, it will apply the default osDisk size according to
     * the vmSize specified.
     *
     * @param {string} [parameters.masterProfile.vnetSubnetID] VNet SubnetID
     * specifies the VNet's subnet identifier.
     *
     * @param {string} [parameters.masterProfile.firstConsecutiveStaticIP]
     * FirstConsecutiveStaticIP used to specify the first static ip of masters.
     *
     * @param {string} [parameters.masterProfile.storageProfile] Storage profile
     * specifies what kind of storage used. Choose from StorageAccount and
     * ManagedDisks. Leave it empty, we will choose for you based on the
     * orchestrator choice. Possible values include: 'StorageAccount',
     * 'ManagedDisks'
     *
     * @param {array} [parameters.agentPoolProfiles] Properties of the agent pool.
     *
     * @param {object} [parameters.windowsProfile] Profile for Windows VMs in the
     * container service cluster.
     *
     * @param {string} parameters.windowsProfile.adminUsername The administrator
     * username to use for Windows VMs.
     *
     * @param {string} parameters.windowsProfile.adminPassword The administrator
     * password to use for Windows VMs.
     *
     * @param {object} parameters.linuxProfile Profile for Linux VMs in the
     * container service cluster.
     *
     * @param {string} parameters.linuxProfile.adminUsername The administrator
     * username to use for Linux VMs.
     *
     * @param {object} parameters.linuxProfile.ssh SSH configuration for
     * Linux-based VMs running on Azure.
     *
     * @param {array} parameters.linuxProfile.ssh.publicKeys The list of SSH public
     * keys used to authenticate with Linux-based VMs. Only expect one key
     * specified.
     *
     * @param {object} [parameters.diagnosticsProfile] Profile for diagnostics in
     * the container service cluster.
     *
     * @param {object} parameters.diagnosticsProfile.vmDiagnostics Profile for
     * diagnostics on the container service VMs.
     *
     * @param {boolean} parameters.diagnosticsProfile.vmDiagnostics.enabled Whether
     * the VM diagnostic agent is provisioned on the VM.
     *
     * @param {string} parameters.location Resource location
     *
     * @param {object} [parameters.tags] Resource tags
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ContainerService>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, containerServiceName: string, parameters: models.ContainerService, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ContainerService>>;

    /**
     * @summary Creates or updates a container service.
     *
     * Creates or updates a container service with the specified configuration of
     * orchestrator, masters, and agents.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} containerServiceName The name of the container service in
     * the specified subscription and resource group.
     *
     * @param {object} parameters Parameters supplied to the Create or Update a
     * Container Service operation.
     *
     * @param {object} parameters.orchestratorProfile Profile for the container
     * service orchestrator.
     *
     * @param {string} parameters.orchestratorProfile.orchestratorType The
     * orchestrator to use to manage container service cluster resources. Valid
     * values are Kubernetes, Swarm, DCOS, DockerCE and Custom. Possible values
     * include: 'Kubernetes', 'Swarm', 'DCOS', 'DockerCE', 'Custom'
     *
     * @param {string} [parameters.orchestratorProfile.orchestratorVersion] The
     * version of the orchestrator to use. You can specify the major.minor.patch
     * part of the actual version.For example, you can specify version as "1.6.11".
     *
     * @param {object} [parameters.customProfile] Properties to configure a custom
     * container service cluster.
     *
     * @param {string} parameters.customProfile.orchestrator The name of the custom
     * orchestrator to use.
     *
     * @param {object} [parameters.servicePrincipalProfile] Information about a
     * service principal identity for the cluster to use for manipulating Azure
     * APIs. Exact one of secret or keyVaultSecretRef need to be specified.
     *
     * @param {string} parameters.servicePrincipalProfile.clientId The ID for the
     * service principal.
     *
     * @param {string} [parameters.servicePrincipalProfile.secret] The secret
     * password associated with the service principal in plain text.
     *
     * @param {object} [parameters.servicePrincipalProfile.keyVaultSecretRef]
     * Reference to a secret stored in Azure Key Vault.
     *
     * @param {string} parameters.servicePrincipalProfile.keyVaultSecretRef.vaultID
     * Key vault identifier.
     *
     * @param {string}
     * parameters.servicePrincipalProfile.keyVaultSecretRef.secretName The secret
     * name.
     *
     * @param {string}
     * [parameters.servicePrincipalProfile.keyVaultSecretRef.version] The secret
     * version.
     *
     * @param {object} parameters.masterProfile Profile for the container service
     * master.
     *
     * @param {number} [parameters.masterProfile.count] Number of masters (VMs) in
     * the container service cluster. Allowed values are 1, 3, and 5. The default
     * value is 1.
     *
     * @param {string} parameters.masterProfile.dnsPrefix DNS prefix to be used to
     * create the FQDN for the master pool.
     *
     * @param {string} parameters.masterProfile.vmSize Size of agent VMs. Possible
     * values include: 'Standard_A1', 'Standard_A10', 'Standard_A11',
     * 'Standard_A1_v2', 'Standard_A2', 'Standard_A2_v2', 'Standard_A2m_v2',
     * 'Standard_A3', 'Standard_A4', 'Standard_A4_v2', 'Standard_A4m_v2',
     * 'Standard_A5', 'Standard_A6', 'Standard_A7', 'Standard_A8',
     * 'Standard_A8_v2', 'Standard_A8m_v2', 'Standard_A9', 'Standard_B2ms',
     * 'Standard_B2s', 'Standard_B4ms', 'Standard_B8ms', 'Standard_D1',
     * 'Standard_D11', 'Standard_D11_v2', 'Standard_D11_v2_Promo', 'Standard_D12',
     * 'Standard_D12_v2', 'Standard_D12_v2_Promo', 'Standard_D13',
     * 'Standard_D13_v2', 'Standard_D13_v2_Promo', 'Standard_D14',
     * 'Standard_D14_v2', 'Standard_D14_v2_Promo', 'Standard_D15_v2',
     * 'Standard_D16_v3', 'Standard_D16s_v3', 'Standard_D1_v2', 'Standard_D2',
     * 'Standard_D2_v2', 'Standard_D2_v2_Promo', 'Standard_D2_v3',
     * 'Standard_D2s_v3', 'Standard_D3', 'Standard_D32_v3', 'Standard_D32s_v3',
     * 'Standard_D3_v2', 'Standard_D3_v2_Promo', 'Standard_D4', 'Standard_D4_v2',
     * 'Standard_D4_v2_Promo', 'Standard_D4_v3', 'Standard_D4s_v3',
     * 'Standard_D5_v2', 'Standard_D5_v2_Promo', 'Standard_D64_v3',
     * 'Standard_D64s_v3', 'Standard_D8_v3', 'Standard_D8s_v3', 'Standard_DS1',
     * 'Standard_DS11', 'Standard_DS11_v2', 'Standard_DS11_v2_Promo',
     * 'Standard_DS12', 'Standard_DS12_v2', 'Standard_DS12_v2_Promo',
     * 'Standard_DS13', 'Standard_DS13-2_v2', 'Standard_DS13-4_v2',
     * 'Standard_DS13_v2', 'Standard_DS13_v2_Promo', 'Standard_DS14',
     * 'Standard_DS14-4_v2', 'Standard_DS14-8_v2', 'Standard_DS14_v2',
     * 'Standard_DS14_v2_Promo', 'Standard_DS15_v2', 'Standard_DS1_v2',
     * 'Standard_DS2', 'Standard_DS2_v2', 'Standard_DS2_v2_Promo', 'Standard_DS3',
     * 'Standard_DS3_v2', 'Standard_DS3_v2_Promo', 'Standard_DS4',
     * 'Standard_DS4_v2', 'Standard_DS4_v2_Promo', 'Standard_DS5_v2',
     * 'Standard_DS5_v2_Promo', 'Standard_E16_v3', 'Standard_E16s_v3',
     * 'Standard_E2_v3', 'Standard_E2s_v3', 'Standard_E32-16s_v3',
     * 'Standard_E32-8s_v3', 'Standard_E32_v3', 'Standard_E32s_v3',
     * 'Standard_E4_v3', 'Standard_E4s_v3', 'Standard_E64-16s_v3',
     * 'Standard_E64-32s_v3', 'Standard_E64_v3', 'Standard_E64s_v3',
     * 'Standard_E8_v3', 'Standard_E8s_v3', 'Standard_F1', 'Standard_F16',
     * 'Standard_F16s', 'Standard_F16s_v2', 'Standard_F1s', 'Standard_F2',
     * 'Standard_F2s', 'Standard_F2s_v2', 'Standard_F32s_v2', 'Standard_F4',
     * 'Standard_F4s', 'Standard_F4s_v2', 'Standard_F64s_v2', 'Standard_F72s_v2',
     * 'Standard_F8', 'Standard_F8s', 'Standard_F8s_v2', 'Standard_G1',
     * 'Standard_G2', 'Standard_G3', 'Standard_G4', 'Standard_G5', 'Standard_GS1',
     * 'Standard_GS2', 'Standard_GS3', 'Standard_GS4', 'Standard_GS4-4',
     * 'Standard_GS4-8', 'Standard_GS5', 'Standard_GS5-16', 'Standard_GS5-8',
     * 'Standard_H16', 'Standard_H16m', 'Standard_H16mr', 'Standard_H16r',
     * 'Standard_H8', 'Standard_H8m', 'Standard_L16s', 'Standard_L32s',
     * 'Standard_L4s', 'Standard_L8s', 'Standard_M128-32ms', 'Standard_M128-64ms',
     * 'Standard_M128ms', 'Standard_M128s', 'Standard_M64-16ms',
     * 'Standard_M64-32ms', 'Standard_M64ms', 'Standard_M64s', 'Standard_NC12',
     * 'Standard_NC12s_v2', 'Standard_NC12s_v3', 'Standard_NC24', 'Standard_NC24r',
     * 'Standard_NC24rs_v2', 'Standard_NC24rs_v3', 'Standard_NC24s_v2',
     * 'Standard_NC24s_v3', 'Standard_NC6', 'Standard_NC6s_v2', 'Standard_NC6s_v3',
     * 'Standard_ND12s', 'Standard_ND24rs', 'Standard_ND24s', 'Standard_ND6s',
     * 'Standard_NV12', 'Standard_NV24', 'Standard_NV6'
     *
     * @param {number} [parameters.masterProfile.osDiskSizeGB] OS Disk Size in GB
     * to be used to specify the disk size for every machine in this master/agent
     * pool. If you specify 0, it will apply the default osDisk size according to
     * the vmSize specified.
     *
     * @param {string} [parameters.masterProfile.vnetSubnetID] VNet SubnetID
     * specifies the VNet's subnet identifier.
     *
     * @param {string} [parameters.masterProfile.firstConsecutiveStaticIP]
     * FirstConsecutiveStaticIP used to specify the first static ip of masters.
     *
     * @param {string} [parameters.masterProfile.storageProfile] Storage profile
     * specifies what kind of storage used. Choose from StorageAccount and
     * ManagedDisks. Leave it empty, we will choose for you based on the
     * orchestrator choice. Possible values include: 'StorageAccount',
     * 'ManagedDisks'
     *
     * @param {array} [parameters.agentPoolProfiles] Properties of the agent pool.
     *
     * @param {object} [parameters.windowsProfile] Profile for Windows VMs in the
     * container service cluster.
     *
     * @param {string} parameters.windowsProfile.adminUsername The administrator
     * username to use for Windows VMs.
     *
     * @param {string} parameters.windowsProfile.adminPassword The administrator
     * password to use for Windows VMs.
     *
     * @param {object} parameters.linuxProfile Profile for Linux VMs in the
     * container service cluster.
     *
     * @param {string} parameters.linuxProfile.adminUsername The administrator
     * username to use for Linux VMs.
     *
     * @param {object} parameters.linuxProfile.ssh SSH configuration for
     * Linux-based VMs running on Azure.
     *
     * @param {array} parameters.linuxProfile.ssh.publicKeys The list of SSH public
     * keys used to authenticate with Linux-based VMs. Only expect one key
     * specified.
     *
     * @param {object} [parameters.diagnosticsProfile] Profile for diagnostics in
     * the container service cluster.
     *
     * @param {object} parameters.diagnosticsProfile.vmDiagnostics Profile for
     * diagnostics on the container service VMs.
     *
     * @param {boolean} parameters.diagnosticsProfile.vmDiagnostics.enabled Whether
     * the VM diagnostic agent is provisioned on the VM.
     *
     * @param {string} parameters.location Resource location
     *
     * @param {object} [parameters.tags] Resource tags
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ContainerService} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ContainerService} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ContainerService} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, containerServiceName: string, parameters: models.ContainerService, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ContainerService>;
    createOrUpdate(resourceGroupName: string, containerServiceName: string, parameters: models.ContainerService, callback: ServiceCallback<models.ContainerService>): void;
    createOrUpdate(resourceGroupName: string, containerServiceName: string, parameters: models.ContainerService, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ContainerService>): void;


    /**
     * @summary Gets the properties of the specified container service.
     *
     * Gets the properties of the specified container service in the specified
     * subscription and resource group. The operation returns the properties
     * including state, orchestrator, number of masters and agents, and FQDNs of
     * masters and agents.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} containerServiceName The name of the container service in
     * the specified subscription and resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ContainerService>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, containerServiceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ContainerService>>;

    /**
     * @summary Gets the properties of the specified container service.
     *
     * Gets the properties of the specified container service in the specified
     * subscription and resource group. The operation returns the properties
     * including state, orchestrator, number of masters and agents, and FQDNs of
     * masters and agents.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} containerServiceName The name of the container service in
     * the specified subscription and resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ContainerService} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ContainerService} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ContainerService} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, containerServiceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ContainerService>;
    get(resourceGroupName: string, containerServiceName: string, callback: ServiceCallback<models.ContainerService>): void;
    get(resourceGroupName: string, containerServiceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ContainerService>): void;


    /**
     * @summary Deletes the specified container service.
     *
     * Deletes the specified container service in the specified subscription and
     * resource group. The operation does not delete other resources created as
     * part of creating a container service, including storage accounts, VMs, and
     * availability sets. All the other resources created with the container
     * service are part of the same resource group and can be deleted individually.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} containerServiceName The name of the container service in
     * the specified subscription and resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, containerServiceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Deletes the specified container service.
     *
     * Deletes the specified container service in the specified subscription and
     * resource group. The operation does not delete other resources created as
     * part of creating a container service, including storage accounts, VMs, and
     * availability sets. All the other resources created with the container
     * service are part of the same resource group and can be deleted individually.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} containerServiceName The name of the container service in
     * the specified subscription and resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, containerServiceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, containerServiceName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, containerServiceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Gets a list of container services in the specified resource group.
     *
     * Gets a list of container services in the specified subscription and resource
     * group. The operation returns properties of each container service including
     * state, orchestrator, number of masters and agents, and FQDNs of masters and
     * agents.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ContainerServiceListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupWithHttpOperationResponse(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ContainerServiceListResult>>;

    /**
     * @summary Gets a list of container services in the specified resource group.
     *
     * Gets a list of container services in the specified subscription and resource
     * group. The operation returns properties of each container service including
     * state, orchestrator, number of masters and agents, and FQDNs of masters and
     * agents.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ContainerServiceListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ContainerServiceListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ContainerServiceListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroup(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ContainerServiceListResult>;
    listByResourceGroup(resourceGroupName: string, callback: ServiceCallback<models.ContainerServiceListResult>): void;
    listByResourceGroup(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ContainerServiceListResult>): void;


    /**
     * @summary Gets a list of supported orchestrators in the specified
     * subscription.
     *
     * Gets a list of supported orchestrators in the specified subscription. The
     * operation returns properties of each orchestrator including version and
     * available upgrades.
     *
     * @param {string} location The name of a supported Azure region.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.resourceType] resource type for which the list of
     * orchestrators needs to be returned
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OrchestratorVersionProfileListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listOrchestratorsWithHttpOperationResponse(location: string, options?: { resourceType? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OrchestratorVersionProfileListResult>>;

    /**
     * @summary Gets a list of supported orchestrators in the specified
     * subscription.
     *
     * Gets a list of supported orchestrators in the specified subscription. The
     * operation returns properties of each orchestrator including version and
     * available upgrades.
     *
     * @param {string} location The name of a supported Azure region.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.resourceType] resource type for which the list of
     * orchestrators needs to be returned
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OrchestratorVersionProfileListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OrchestratorVersionProfileListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OrchestratorVersionProfileListResult} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listOrchestrators(location: string, options?: { resourceType? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.OrchestratorVersionProfileListResult>;
    listOrchestrators(location: string, callback: ServiceCallback<models.OrchestratorVersionProfileListResult>): void;
    listOrchestrators(location: string, options: { resourceType? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OrchestratorVersionProfileListResult>): void;


    /**
     * @summary Creates or updates a container service.
     *
     * Creates or updates a container service with the specified configuration of
     * orchestrator, masters, and agents.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} containerServiceName The name of the container service in
     * the specified subscription and resource group.
     *
     * @param {object} parameters Parameters supplied to the Create or Update a
     * Container Service operation.
     *
     * @param {object} parameters.orchestratorProfile Profile for the container
     * service orchestrator.
     *
     * @param {string} parameters.orchestratorProfile.orchestratorType The
     * orchestrator to use to manage container service cluster resources. Valid
     * values are Kubernetes, Swarm, DCOS, DockerCE and Custom. Possible values
     * include: 'Kubernetes', 'Swarm', 'DCOS', 'DockerCE', 'Custom'
     *
     * @param {string} [parameters.orchestratorProfile.orchestratorVersion] The
     * version of the orchestrator to use. You can specify the major.minor.patch
     * part of the actual version.For example, you can specify version as "1.6.11".
     *
     * @param {object} [parameters.customProfile] Properties to configure a custom
     * container service cluster.
     *
     * @param {string} parameters.customProfile.orchestrator The name of the custom
     * orchestrator to use.
     *
     * @param {object} [parameters.servicePrincipalProfile] Information about a
     * service principal identity for the cluster to use for manipulating Azure
     * APIs. Exact one of secret or keyVaultSecretRef need to be specified.
     *
     * @param {string} parameters.servicePrincipalProfile.clientId The ID for the
     * service principal.
     *
     * @param {string} [parameters.servicePrincipalProfile.secret] The secret
     * password associated with the service principal in plain text.
     *
     * @param {object} [parameters.servicePrincipalProfile.keyVaultSecretRef]
     * Reference to a secret stored in Azure Key Vault.
     *
     * @param {string} parameters.servicePrincipalProfile.keyVaultSecretRef.vaultID
     * Key vault identifier.
     *
     * @param {string}
     * parameters.servicePrincipalProfile.keyVaultSecretRef.secretName The secret
     * name.
     *
     * @param {string}
     * [parameters.servicePrincipalProfile.keyVaultSecretRef.version] The secret
     * version.
     *
     * @param {object} parameters.masterProfile Profile for the container service
     * master.
     *
     * @param {number} [parameters.masterProfile.count] Number of masters (VMs) in
     * the container service cluster. Allowed values are 1, 3, and 5. The default
     * value is 1.
     *
     * @param {string} parameters.masterProfile.dnsPrefix DNS prefix to be used to
     * create the FQDN for the master pool.
     *
     * @param {string} parameters.masterProfile.vmSize Size of agent VMs. Possible
     * values include: 'Standard_A1', 'Standard_A10', 'Standard_A11',
     * 'Standard_A1_v2', 'Standard_A2', 'Standard_A2_v2', 'Standard_A2m_v2',
     * 'Standard_A3', 'Standard_A4', 'Standard_A4_v2', 'Standard_A4m_v2',
     * 'Standard_A5', 'Standard_A6', 'Standard_A7', 'Standard_A8',
     * 'Standard_A8_v2', 'Standard_A8m_v2', 'Standard_A9', 'Standard_B2ms',
     * 'Standard_B2s', 'Standard_B4ms', 'Standard_B8ms', 'Standard_D1',
     * 'Standard_D11', 'Standard_D11_v2', 'Standard_D11_v2_Promo', 'Standard_D12',
     * 'Standard_D12_v2', 'Standard_D12_v2_Promo', 'Standard_D13',
     * 'Standard_D13_v2', 'Standard_D13_v2_Promo', 'Standard_D14',
     * 'Standard_D14_v2', 'Standard_D14_v2_Promo', 'Standard_D15_v2',
     * 'Standard_D16_v3', 'Standard_D16s_v3', 'Standard_D1_v2', 'Standard_D2',
     * 'Standard_D2_v2', 'Standard_D2_v2_Promo', 'Standard_D2_v3',
     * 'Standard_D2s_v3', 'Standard_D3', 'Standard_D32_v3', 'Standard_D32s_v3',
     * 'Standard_D3_v2', 'Standard_D3_v2_Promo', 'Standard_D4', 'Standard_D4_v2',
     * 'Standard_D4_v2_Promo', 'Standard_D4_v3', 'Standard_D4s_v3',
     * 'Standard_D5_v2', 'Standard_D5_v2_Promo', 'Standard_D64_v3',
     * 'Standard_D64s_v3', 'Standard_D8_v3', 'Standard_D8s_v3', 'Standard_DS1',
     * 'Standard_DS11', 'Standard_DS11_v2', 'Standard_DS11_v2_Promo',
     * 'Standard_DS12', 'Standard_DS12_v2', 'Standard_DS12_v2_Promo',
     * 'Standard_DS13', 'Standard_DS13-2_v2', 'Standard_DS13-4_v2',
     * 'Standard_DS13_v2', 'Standard_DS13_v2_Promo', 'Standard_DS14',
     * 'Standard_DS14-4_v2', 'Standard_DS14-8_v2', 'Standard_DS14_v2',
     * 'Standard_DS14_v2_Promo', 'Standard_DS15_v2', 'Standard_DS1_v2',
     * 'Standard_DS2', 'Standard_DS2_v2', 'Standard_DS2_v2_Promo', 'Standard_DS3',
     * 'Standard_DS3_v2', 'Standard_DS3_v2_Promo', 'Standard_DS4',
     * 'Standard_DS4_v2', 'Standard_DS4_v2_Promo', 'Standard_DS5_v2',
     * 'Standard_DS5_v2_Promo', 'Standard_E16_v3', 'Standard_E16s_v3',
     * 'Standard_E2_v3', 'Standard_E2s_v3', 'Standard_E32-16s_v3',
     * 'Standard_E32-8s_v3', 'Standard_E32_v3', 'Standard_E32s_v3',
     * 'Standard_E4_v3', 'Standard_E4s_v3', 'Standard_E64-16s_v3',
     * 'Standard_E64-32s_v3', 'Standard_E64_v3', 'Standard_E64s_v3',
     * 'Standard_E8_v3', 'Standard_E8s_v3', 'Standard_F1', 'Standard_F16',
     * 'Standard_F16s', 'Standard_F16s_v2', 'Standard_F1s', 'Standard_F2',
     * 'Standard_F2s', 'Standard_F2s_v2', 'Standard_F32s_v2', 'Standard_F4',
     * 'Standard_F4s', 'Standard_F4s_v2', 'Standard_F64s_v2', 'Standard_F72s_v2',
     * 'Standard_F8', 'Standard_F8s', 'Standard_F8s_v2', 'Standard_G1',
     * 'Standard_G2', 'Standard_G3', 'Standard_G4', 'Standard_G5', 'Standard_GS1',
     * 'Standard_GS2', 'Standard_GS3', 'Standard_GS4', 'Standard_GS4-4',
     * 'Standard_GS4-8', 'Standard_GS5', 'Standard_GS5-16', 'Standard_GS5-8',
     * 'Standard_H16', 'Standard_H16m', 'Standard_H16mr', 'Standard_H16r',
     * 'Standard_H8', 'Standard_H8m', 'Standard_L16s', 'Standard_L32s',
     * 'Standard_L4s', 'Standard_L8s', 'Standard_M128-32ms', 'Standard_M128-64ms',
     * 'Standard_M128ms', 'Standard_M128s', 'Standard_M64-16ms',
     * 'Standard_M64-32ms', 'Standard_M64ms', 'Standard_M64s', 'Standard_NC12',
     * 'Standard_NC12s_v2', 'Standard_NC12s_v3', 'Standard_NC24', 'Standard_NC24r',
     * 'Standard_NC24rs_v2', 'Standard_NC24rs_v3', 'Standard_NC24s_v2',
     * 'Standard_NC24s_v3', 'Standard_NC6', 'Standard_NC6s_v2', 'Standard_NC6s_v3',
     * 'Standard_ND12s', 'Standard_ND24rs', 'Standard_ND24s', 'Standard_ND6s',
     * 'Standard_NV12', 'Standard_NV24', 'Standard_NV6'
     *
     * @param {number} [parameters.masterProfile.osDiskSizeGB] OS Disk Size in GB
     * to be used to specify the disk size for every machine in this master/agent
     * pool. If you specify 0, it will apply the default osDisk size according to
     * the vmSize specified.
     *
     * @param {string} [parameters.masterProfile.vnetSubnetID] VNet SubnetID
     * specifies the VNet's subnet identifier.
     *
     * @param {string} [parameters.masterProfile.firstConsecutiveStaticIP]
     * FirstConsecutiveStaticIP used to specify the first static ip of masters.
     *
     * @param {string} [parameters.masterProfile.storageProfile] Storage profile
     * specifies what kind of storage used. Choose from StorageAccount and
     * ManagedDisks. Leave it empty, we will choose for you based on the
     * orchestrator choice. Possible values include: 'StorageAccount',
     * 'ManagedDisks'
     *
     * @param {array} [parameters.agentPoolProfiles] Properties of the agent pool.
     *
     * @param {object} [parameters.windowsProfile] Profile for Windows VMs in the
     * container service cluster.
     *
     * @param {string} parameters.windowsProfile.adminUsername The administrator
     * username to use for Windows VMs.
     *
     * @param {string} parameters.windowsProfile.adminPassword The administrator
     * password to use for Windows VMs.
     *
     * @param {object} parameters.linuxProfile Profile for Linux VMs in the
     * container service cluster.
     *
     * @param {string} parameters.linuxProfile.adminUsername The administrator
     * username to use for Linux VMs.
     *
     * @param {object} parameters.linuxProfile.ssh SSH configuration for
     * Linux-based VMs running on Azure.
     *
     * @param {array} parameters.linuxProfile.ssh.publicKeys The list of SSH public
     * keys used to authenticate with Linux-based VMs. Only expect one key
     * specified.
     *
     * @param {object} [parameters.diagnosticsProfile] Profile for diagnostics in
     * the container service cluster.
     *
     * @param {object} parameters.diagnosticsProfile.vmDiagnostics Profile for
     * diagnostics on the container service VMs.
     *
     * @param {boolean} parameters.diagnosticsProfile.vmDiagnostics.enabled Whether
     * the VM diagnostic agent is provisioned on the VM.
     *
     * @param {string} parameters.location Resource location
     *
     * @param {object} [parameters.tags] Resource tags
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ContainerService>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, containerServiceName: string, parameters: models.ContainerService, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ContainerService>>;

    /**
     * @summary Creates or updates a container service.
     *
     * Creates or updates a container service with the specified configuration of
     * orchestrator, masters, and agents.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} containerServiceName The name of the container service in
     * the specified subscription and resource group.
     *
     * @param {object} parameters Parameters supplied to the Create or Update a
     * Container Service operation.
     *
     * @param {object} parameters.orchestratorProfile Profile for the container
     * service orchestrator.
     *
     * @param {string} parameters.orchestratorProfile.orchestratorType The
     * orchestrator to use to manage container service cluster resources. Valid
     * values are Kubernetes, Swarm, DCOS, DockerCE and Custom. Possible values
     * include: 'Kubernetes', 'Swarm', 'DCOS', 'DockerCE', 'Custom'
     *
     * @param {string} [parameters.orchestratorProfile.orchestratorVersion] The
     * version of the orchestrator to use. You can specify the major.minor.patch
     * part of the actual version.For example, you can specify version as "1.6.11".
     *
     * @param {object} [parameters.customProfile] Properties to configure a custom
     * container service cluster.
     *
     * @param {string} parameters.customProfile.orchestrator The name of the custom
     * orchestrator to use.
     *
     * @param {object} [parameters.servicePrincipalProfile] Information about a
     * service principal identity for the cluster to use for manipulating Azure
     * APIs. Exact one of secret or keyVaultSecretRef need to be specified.
     *
     * @param {string} parameters.servicePrincipalProfile.clientId The ID for the
     * service principal.
     *
     * @param {string} [parameters.servicePrincipalProfile.secret] The secret
     * password associated with the service principal in plain text.
     *
     * @param {object} [parameters.servicePrincipalProfile.keyVaultSecretRef]
     * Reference to a secret stored in Azure Key Vault.
     *
     * @param {string} parameters.servicePrincipalProfile.keyVaultSecretRef.vaultID
     * Key vault identifier.
     *
     * @param {string}
     * parameters.servicePrincipalProfile.keyVaultSecretRef.secretName The secret
     * name.
     *
     * @param {string}
     * [parameters.servicePrincipalProfile.keyVaultSecretRef.version] The secret
     * version.
     *
     * @param {object} parameters.masterProfile Profile for the container service
     * master.
     *
     * @param {number} [parameters.masterProfile.count] Number of masters (VMs) in
     * the container service cluster. Allowed values are 1, 3, and 5. The default
     * value is 1.
     *
     * @param {string} parameters.masterProfile.dnsPrefix DNS prefix to be used to
     * create the FQDN for the master pool.
     *
     * @param {string} parameters.masterProfile.vmSize Size of agent VMs. Possible
     * values include: 'Standard_A1', 'Standard_A10', 'Standard_A11',
     * 'Standard_A1_v2', 'Standard_A2', 'Standard_A2_v2', 'Standard_A2m_v2',
     * 'Standard_A3', 'Standard_A4', 'Standard_A4_v2', 'Standard_A4m_v2',
     * 'Standard_A5', 'Standard_A6', 'Standard_A7', 'Standard_A8',
     * 'Standard_A8_v2', 'Standard_A8m_v2', 'Standard_A9', 'Standard_B2ms',
     * 'Standard_B2s', 'Standard_B4ms', 'Standard_B8ms', 'Standard_D1',
     * 'Standard_D11', 'Standard_D11_v2', 'Standard_D11_v2_Promo', 'Standard_D12',
     * 'Standard_D12_v2', 'Standard_D12_v2_Promo', 'Standard_D13',
     * 'Standard_D13_v2', 'Standard_D13_v2_Promo', 'Standard_D14',
     * 'Standard_D14_v2', 'Standard_D14_v2_Promo', 'Standard_D15_v2',
     * 'Standard_D16_v3', 'Standard_D16s_v3', 'Standard_D1_v2', 'Standard_D2',
     * 'Standard_D2_v2', 'Standard_D2_v2_Promo', 'Standard_D2_v3',
     * 'Standard_D2s_v3', 'Standard_D3', 'Standard_D32_v3', 'Standard_D32s_v3',
     * 'Standard_D3_v2', 'Standard_D3_v2_Promo', 'Standard_D4', 'Standard_D4_v2',
     * 'Standard_D4_v2_Promo', 'Standard_D4_v3', 'Standard_D4s_v3',
     * 'Standard_D5_v2', 'Standard_D5_v2_Promo', 'Standard_D64_v3',
     * 'Standard_D64s_v3', 'Standard_D8_v3', 'Standard_D8s_v3', 'Standard_DS1',
     * 'Standard_DS11', 'Standard_DS11_v2', 'Standard_DS11_v2_Promo',
     * 'Standard_DS12', 'Standard_DS12_v2', 'Standard_DS12_v2_Promo',
     * 'Standard_DS13', 'Standard_DS13-2_v2', 'Standard_DS13-4_v2',
     * 'Standard_DS13_v2', 'Standard_DS13_v2_Promo', 'Standard_DS14',
     * 'Standard_DS14-4_v2', 'Standard_DS14-8_v2', 'Standard_DS14_v2',
     * 'Standard_DS14_v2_Promo', 'Standard_DS15_v2', 'Standard_DS1_v2',
     * 'Standard_DS2', 'Standard_DS2_v2', 'Standard_DS2_v2_Promo', 'Standard_DS3',
     * 'Standard_DS3_v2', 'Standard_DS3_v2_Promo', 'Standard_DS4',
     * 'Standard_DS4_v2', 'Standard_DS4_v2_Promo', 'Standard_DS5_v2',
     * 'Standard_DS5_v2_Promo', 'Standard_E16_v3', 'Standard_E16s_v3',
     * 'Standard_E2_v3', 'Standard_E2s_v3', 'Standard_E32-16s_v3',
     * 'Standard_E32-8s_v3', 'Standard_E32_v3', 'Standard_E32s_v3',
     * 'Standard_E4_v3', 'Standard_E4s_v3', 'Standard_E64-16s_v3',
     * 'Standard_E64-32s_v3', 'Standard_E64_v3', 'Standard_E64s_v3',
     * 'Standard_E8_v3', 'Standard_E8s_v3', 'Standard_F1', 'Standard_F16',
     * 'Standard_F16s', 'Standard_F16s_v2', 'Standard_F1s', 'Standard_F2',
     * 'Standard_F2s', 'Standard_F2s_v2', 'Standard_F32s_v2', 'Standard_F4',
     * 'Standard_F4s', 'Standard_F4s_v2', 'Standard_F64s_v2', 'Standard_F72s_v2',
     * 'Standard_F8', 'Standard_F8s', 'Standard_F8s_v2', 'Standard_G1',
     * 'Standard_G2', 'Standard_G3', 'Standard_G4', 'Standard_G5', 'Standard_GS1',
     * 'Standard_GS2', 'Standard_GS3', 'Standard_GS4', 'Standard_GS4-4',
     * 'Standard_GS4-8', 'Standard_GS5', 'Standard_GS5-16', 'Standard_GS5-8',
     * 'Standard_H16', 'Standard_H16m', 'Standard_H16mr', 'Standard_H16r',
     * 'Standard_H8', 'Standard_H8m', 'Standard_L16s', 'Standard_L32s',
     * 'Standard_L4s', 'Standard_L8s', 'Standard_M128-32ms', 'Standard_M128-64ms',
     * 'Standard_M128ms', 'Standard_M128s', 'Standard_M64-16ms',
     * 'Standard_M64-32ms', 'Standard_M64ms', 'Standard_M64s', 'Standard_NC12',
     * 'Standard_NC12s_v2', 'Standard_NC12s_v3', 'Standard_NC24', 'Standard_NC24r',
     * 'Standard_NC24rs_v2', 'Standard_NC24rs_v3', 'Standard_NC24s_v2',
     * 'Standard_NC24s_v3', 'Standard_NC6', 'Standard_NC6s_v2', 'Standard_NC6s_v3',
     * 'Standard_ND12s', 'Standard_ND24rs', 'Standard_ND24s', 'Standard_ND6s',
     * 'Standard_NV12', 'Standard_NV24', 'Standard_NV6'
     *
     * @param {number} [parameters.masterProfile.osDiskSizeGB] OS Disk Size in GB
     * to be used to specify the disk size for every machine in this master/agent
     * pool. If you specify 0, it will apply the default osDisk size according to
     * the vmSize specified.
     *
     * @param {string} [parameters.masterProfile.vnetSubnetID] VNet SubnetID
     * specifies the VNet's subnet identifier.
     *
     * @param {string} [parameters.masterProfile.firstConsecutiveStaticIP]
     * FirstConsecutiveStaticIP used to specify the first static ip of masters.
     *
     * @param {string} [parameters.masterProfile.storageProfile] Storage profile
     * specifies what kind of storage used. Choose from StorageAccount and
     * ManagedDisks. Leave it empty, we will choose for you based on the
     * orchestrator choice. Possible values include: 'StorageAccount',
     * 'ManagedDisks'
     *
     * @param {array} [parameters.agentPoolProfiles] Properties of the agent pool.
     *
     * @param {object} [parameters.windowsProfile] Profile for Windows VMs in the
     * container service cluster.
     *
     * @param {string} parameters.windowsProfile.adminUsername The administrator
     * username to use for Windows VMs.
     *
     * @param {string} parameters.windowsProfile.adminPassword The administrator
     * password to use for Windows VMs.
     *
     * @param {object} parameters.linuxProfile Profile for Linux VMs in the
     * container service cluster.
     *
     * @param {string} parameters.linuxProfile.adminUsername The administrator
     * username to use for Linux VMs.
     *
     * @param {object} parameters.linuxProfile.ssh SSH configuration for
     * Linux-based VMs running on Azure.
     *
     * @param {array} parameters.linuxProfile.ssh.publicKeys The list of SSH public
     * keys used to authenticate with Linux-based VMs. Only expect one key
     * specified.
     *
     * @param {object} [parameters.diagnosticsProfile] Profile for diagnostics in
     * the container service cluster.
     *
     * @param {object} parameters.diagnosticsProfile.vmDiagnostics Profile for
     * diagnostics on the container service VMs.
     *
     * @param {boolean} parameters.diagnosticsProfile.vmDiagnostics.enabled Whether
     * the VM diagnostic agent is provisioned on the VM.
     *
     * @param {string} parameters.location Resource location
     *
     * @param {object} [parameters.tags] Resource tags
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ContainerService} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ContainerService} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ContainerService} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(resourceGroupName: string, containerServiceName: string, parameters: models.ContainerService, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ContainerService>;
    beginCreateOrUpdate(resourceGroupName: string, containerServiceName: string, parameters: models.ContainerService, callback: ServiceCallback<models.ContainerService>): void;
    beginCreateOrUpdate(resourceGroupName: string, containerServiceName: string, parameters: models.ContainerService, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ContainerService>): void;


    /**
     * @summary Deletes the specified container service.
     *
     * Deletes the specified container service in the specified subscription and
     * resource group. The operation does not delete other resources created as
     * part of creating a container service, including storage accounts, VMs, and
     * availability sets. All the other resources created with the container
     * service are part of the same resource group and can be deleted individually.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} containerServiceName The name of the container service in
     * the specified subscription and resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, containerServiceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Deletes the specified container service.
     *
     * Deletes the specified container service in the specified subscription and
     * resource group. The operation does not delete other resources created as
     * part of creating a container service, including storage accounts, VMs, and
     * availability sets. All the other resources created with the container
     * service are part of the same resource group and can be deleted individually.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} containerServiceName The name of the container service in
     * the specified subscription and resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(resourceGroupName: string, containerServiceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(resourceGroupName: string, containerServiceName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, containerServiceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Gets a list of container services in the specified subscription.
     *
     * Gets a list of container services in the specified subscription. The
     * operation returns properties of each container service including state,
     * orchestrator, number of masters and agents, and FQDNs of masters and agents.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ContainerServiceListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ContainerServiceListResult>>;

    /**
     * @summary Gets a list of container services in the specified subscription.
     *
     * Gets a list of container services in the specified subscription. The
     * operation returns properties of each container service including state,
     * orchestrator, number of masters and agents, and FQDNs of masters and agents.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ContainerServiceListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ContainerServiceListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ContainerServiceListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ContainerServiceListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.ContainerServiceListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ContainerServiceListResult>): void;


    /**
     * @summary Gets a list of container services in the specified resource group.
     *
     * Gets a list of container services in the specified subscription and resource
     * group. The operation returns properties of each container service including
     * state, orchestrator, number of masters and agents, and FQDNs of masters and
     * agents.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ContainerServiceListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ContainerServiceListResult>>;

    /**
     * @summary Gets a list of container services in the specified resource group.
     *
     * Gets a list of container services in the specified subscription and resource
     * group. The operation returns properties of each container service including
     * state, orchestrator, number of masters and agents, and FQDNs of masters and
     * agents.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ContainerServiceListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ContainerServiceListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ContainerServiceListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroupNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ContainerServiceListResult>;
    listByResourceGroupNext(nextPageLink: string, callback: ServiceCallback<models.ContainerServiceListResult>): void;
    listByResourceGroupNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ContainerServiceListResult>): void;
}

/**
 * @class
 * Operations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ContainerServiceClient.
 */
export interface Operations {


    /**
     * Gets a list of compute operations.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OperationListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OperationListResult>>;

    /**
     * Gets a list of compute operations.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OperationListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OperationListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OperationListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.OperationListResult>;
    list(callback: ServiceCallback<models.OperationListResult>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OperationListResult>): void;
}

/**
 * @class
 * ManagedClusters
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ContainerServiceClient.
 */
export interface ManagedClusters {


    /**
     * @summary Gets a list of managed clusters in the specified subscription.
     *
     * Gets a list of managed clusters in the specified subscription. The operation
     * returns properties of each managed cluster.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ManagedClusterListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ManagedClusterListResult>>;

    /**
     * @summary Gets a list of managed clusters in the specified subscription.
     *
     * Gets a list of managed clusters in the specified subscription. The operation
     * returns properties of each managed cluster.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ManagedClusterListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ManagedClusterListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ManagedClusterListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ManagedClusterListResult>;
    list(callback: ServiceCallback<models.ManagedClusterListResult>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ManagedClusterListResult>): void;


    /**
     * @summary Lists managed clusters in the specified subscription and resource
     * group.
     *
     * Lists managed clusters in the specified subscription and resource group. The
     * operation returns properties of each managed cluster.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ManagedClusterListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupWithHttpOperationResponse(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ManagedClusterListResult>>;

    /**
     * @summary Lists managed clusters in the specified subscription and resource
     * group.
     *
     * Lists managed clusters in the specified subscription and resource group. The
     * operation returns properties of each managed cluster.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ManagedClusterListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ManagedClusterListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ManagedClusterListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroup(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ManagedClusterListResult>;
    listByResourceGroup(resourceGroupName: string, callback: ServiceCallback<models.ManagedClusterListResult>): void;
    listByResourceGroup(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ManagedClusterListResult>): void;


    /**
     * @summary Gets upgrade profile for a managed cluster.
     *
     * Gets the details of the upgrade profile for a managed cluster with a
     * specified resource group and name.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} resourceName The name of the managed cluster resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ManagedClusterUpgradeProfile>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getUpgradeProfileWithHttpOperationResponse(resourceGroupName: string, resourceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ManagedClusterUpgradeProfile>>;

    /**
     * @summary Gets upgrade profile for a managed cluster.
     *
     * Gets the details of the upgrade profile for a managed cluster with a
     * specified resource group and name.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} resourceName The name of the managed cluster resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ManagedClusterUpgradeProfile} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ManagedClusterUpgradeProfile} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ManagedClusterUpgradeProfile} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getUpgradeProfile(resourceGroupName: string, resourceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ManagedClusterUpgradeProfile>;
    getUpgradeProfile(resourceGroupName: string, resourceName: string, callback: ServiceCallback<models.ManagedClusterUpgradeProfile>): void;
    getUpgradeProfile(resourceGroupName: string, resourceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ManagedClusterUpgradeProfile>): void;


    /**
     * @summary Gets an access profile of a managed cluster.
     *
     * Gets the accessProfile for the specified role name of the managed cluster
     * with a specified resource group and name.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} resourceName The name of the managed cluster resource.
     *
     * @param {string} roleName The name of the role for managed cluster
     * accessProfile resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ManagedClusterAccessProfile>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getAccessProfileWithHttpOperationResponse(resourceGroupName: string, resourceName: string, roleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ManagedClusterAccessProfile>>;

    /**
     * @summary Gets an access profile of a managed cluster.
     *
     * Gets the accessProfile for the specified role name of the managed cluster
     * with a specified resource group and name.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} resourceName The name of the managed cluster resource.
     *
     * @param {string} roleName The name of the role for managed cluster
     * accessProfile resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ManagedClusterAccessProfile} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ManagedClusterAccessProfile} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ManagedClusterAccessProfile} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getAccessProfile(resourceGroupName: string, resourceName: string, roleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ManagedClusterAccessProfile>;
    getAccessProfile(resourceGroupName: string, resourceName: string, roleName: string, callback: ServiceCallback<models.ManagedClusterAccessProfile>): void;
    getAccessProfile(resourceGroupName: string, resourceName: string, roleName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ManagedClusterAccessProfile>): void;


    /**
     * @summary Gets cluster admin credential of a managed cluster.
     *
     * Gets cluster admin credential of the managed cluster with a specified
     * resource group and name.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} resourceName The name of the managed cluster resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<CredentialResults>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listClusterAdminCredentialsWithHttpOperationResponse(resourceGroupName: string, resourceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CredentialResults>>;

    /**
     * @summary Gets cluster admin credential of a managed cluster.
     *
     * Gets cluster admin credential of the managed cluster with a specified
     * resource group and name.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} resourceName The name of the managed cluster resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {CredentialResults} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {CredentialResults} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link CredentialResults} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listClusterAdminCredentials(resourceGroupName: string, resourceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.CredentialResults>;
    listClusterAdminCredentials(resourceGroupName: string, resourceName: string, callback: ServiceCallback<models.CredentialResults>): void;
    listClusterAdminCredentials(resourceGroupName: string, resourceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CredentialResults>): void;


    /**
     * @summary Gets cluster user credential of a managed cluster.
     *
     * Gets cluster user credential of the managed cluster with a specified
     * resource group and name.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} resourceName The name of the managed cluster resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<CredentialResults>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listClusterUserCredentialsWithHttpOperationResponse(resourceGroupName: string, resourceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CredentialResults>>;

    /**
     * @summary Gets cluster user credential of a managed cluster.
     *
     * Gets cluster user credential of the managed cluster with a specified
     * resource group and name.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} resourceName The name of the managed cluster resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {CredentialResults} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {CredentialResults} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link CredentialResults} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listClusterUserCredentials(resourceGroupName: string, resourceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.CredentialResults>;
    listClusterUserCredentials(resourceGroupName: string, resourceName: string, callback: ServiceCallback<models.CredentialResults>): void;
    listClusterUserCredentials(resourceGroupName: string, resourceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CredentialResults>): void;


    /**
     * @summary Gets a managed cluster.
     *
     * Gets the details of the managed cluster with a specified resource group and
     * name.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} resourceName The name of the managed cluster resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ManagedCluster>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, resourceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ManagedCluster>>;

    /**
     * @summary Gets a managed cluster.
     *
     * Gets the details of the managed cluster with a specified resource group and
     * name.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} resourceName The name of the managed cluster resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ManagedCluster} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ManagedCluster} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ManagedCluster} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, resourceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ManagedCluster>;
    get(resourceGroupName: string, resourceName: string, callback: ServiceCallback<models.ManagedCluster>): void;
    get(resourceGroupName: string, resourceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ManagedCluster>): void;


    /**
     * @summary Creates or updates a managed cluster.
     *
     * Creates or updates a managed cluster with the specified configuration for
     * agents and Kubernetes version.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} resourceName The name of the managed cluster resource.
     *
     * @param {object} parameters Parameters supplied to the Create or Update a
     * Managed Cluster operation.
     *
     * @param {string} [parameters.kubernetesVersion] Version of Kubernetes
     * specified when creating the managed cluster.
     *
     * @param {string} [parameters.dnsPrefix] DNS prefix specified when creating
     * the managed cluster.
     *
     * @param {array} [parameters.agentPoolProfiles] Properties of the agent pool.
     *
     * @param {object} [parameters.linuxProfile] Profile for Linux VMs in the
     * container service cluster.
     *
     * @param {string} parameters.linuxProfile.adminUsername The administrator
     * username to use for Linux VMs.
     *
     * @param {object} parameters.linuxProfile.ssh SSH configuration for
     * Linux-based VMs running on Azure.
     *
     * @param {array} parameters.linuxProfile.ssh.publicKeys The list of SSH public
     * keys used to authenticate with Linux-based VMs. Only expect one key
     * specified.
     *
     * @param {object} [parameters.servicePrincipalProfile] Information about a
     * service principal identity for the cluster to use for manipulating Azure
     * APIs.
     *
     * @param {string} parameters.servicePrincipalProfile.clientId The ID for the
     * service principal.
     *
     * @param {string} [parameters.servicePrincipalProfile.secret] The secret
     * password associated with the service principal in plain text.
     *
     * @param {object} [parameters.addonProfiles] Profile of managed cluster
     * add-on.
     *
     * @param {boolean} [parameters.enableRBAC] Whether to enable Kubernetes
     * Role-Based Access Control.
     *
     * @param {object} [parameters.networkProfile] Profile of network
     * configuration.
     *
     * @param {string} [parameters.networkProfile.networkPlugin] Network plugin
     * used for building Kubernetes network. Possible values include: 'azure',
     * 'kubenet'
     *
     * @param {string} [parameters.networkProfile.networkPolicy] Network policy
     * used for building Kubernetes network. Possible values include: 'calico'
     *
     * @param {string} [parameters.networkProfile.podCidr] A CIDR notation IP range
     * from which to assign pod IPs when kubenet is used.
     *
     * @param {string} [parameters.networkProfile.serviceCidr] A CIDR notation IP
     * range from which to assign service cluster IPs. It must not overlap with any
     * Subnet IP ranges.
     *
     * @param {string} [parameters.networkProfile.dnsServiceIP] An IP address
     * assigned to the Kubernetes DNS service. It must be within the Kubernetes
     * service address range specified in serviceCidr.
     *
     * @param {string} [parameters.networkProfile.dockerBridgeCidr] A CIDR notation
     * IP range assigned to the Docker bridge network. It must not overlap with any
     * Subnet IP ranges or the Kubernetes service address range.
     *
     * @param {object} [parameters.aadProfile] Profile of Azure Active Directory
     * configuration.
     *
     * @param {string} parameters.aadProfile.clientAppID The client AAD application
     * ID.
     *
     * @param {string} parameters.aadProfile.serverAppID The server AAD application
     * ID.
     *
     * @param {string} [parameters.aadProfile.serverAppSecret] The server AAD
     * application secret.
     *
     * @param {string} [parameters.aadProfile.tenantID] The AAD tenant ID to use
     * for authentication. If not specified, will use the tenant of the deployment
     * subscription.
     *
     * @param {string} parameters.location Resource location
     *
     * @param {object} [parameters.tags] Resource tags
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ManagedCluster>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, resourceName: string, parameters: models.ManagedCluster, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ManagedCluster>>;

    /**
     * @summary Creates or updates a managed cluster.
     *
     * Creates or updates a managed cluster with the specified configuration for
     * agents and Kubernetes version.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} resourceName The name of the managed cluster resource.
     *
     * @param {object} parameters Parameters supplied to the Create or Update a
     * Managed Cluster operation.
     *
     * @param {string} [parameters.kubernetesVersion] Version of Kubernetes
     * specified when creating the managed cluster.
     *
     * @param {string} [parameters.dnsPrefix] DNS prefix specified when creating
     * the managed cluster.
     *
     * @param {array} [parameters.agentPoolProfiles] Properties of the agent pool.
     *
     * @param {object} [parameters.linuxProfile] Profile for Linux VMs in the
     * container service cluster.
     *
     * @param {string} parameters.linuxProfile.adminUsername The administrator
     * username to use for Linux VMs.
     *
     * @param {object} parameters.linuxProfile.ssh SSH configuration for
     * Linux-based VMs running on Azure.
     *
     * @param {array} parameters.linuxProfile.ssh.publicKeys The list of SSH public
     * keys used to authenticate with Linux-based VMs. Only expect one key
     * specified.
     *
     * @param {object} [parameters.servicePrincipalProfile] Information about a
     * service principal identity for the cluster to use for manipulating Azure
     * APIs.
     *
     * @param {string} parameters.servicePrincipalProfile.clientId The ID for the
     * service principal.
     *
     * @param {string} [parameters.servicePrincipalProfile.secret] The secret
     * password associated with the service principal in plain text.
     *
     * @param {object} [parameters.addonProfiles] Profile of managed cluster
     * add-on.
     *
     * @param {boolean} [parameters.enableRBAC] Whether to enable Kubernetes
     * Role-Based Access Control.
     *
     * @param {object} [parameters.networkProfile] Profile of network
     * configuration.
     *
     * @param {string} [parameters.networkProfile.networkPlugin] Network plugin
     * used for building Kubernetes network. Possible values include: 'azure',
     * 'kubenet'
     *
     * @param {string} [parameters.networkProfile.networkPolicy] Network policy
     * used for building Kubernetes network. Possible values include: 'calico'
     *
     * @param {string} [parameters.networkProfile.podCidr] A CIDR notation IP range
     * from which to assign pod IPs when kubenet is used.
     *
     * @param {string} [parameters.networkProfile.serviceCidr] A CIDR notation IP
     * range from which to assign service cluster IPs. It must not overlap with any
     * Subnet IP ranges.
     *
     * @param {string} [parameters.networkProfile.dnsServiceIP] An IP address
     * assigned to the Kubernetes DNS service. It must be within the Kubernetes
     * service address range specified in serviceCidr.
     *
     * @param {string} [parameters.networkProfile.dockerBridgeCidr] A CIDR notation
     * IP range assigned to the Docker bridge network. It must not overlap with any
     * Subnet IP ranges or the Kubernetes service address range.
     *
     * @param {object} [parameters.aadProfile] Profile of Azure Active Directory
     * configuration.
     *
     * @param {string} parameters.aadProfile.clientAppID The client AAD application
     * ID.
     *
     * @param {string} parameters.aadProfile.serverAppID The server AAD application
     * ID.
     *
     * @param {string} [parameters.aadProfile.serverAppSecret] The server AAD
     * application secret.
     *
     * @param {string} [parameters.aadProfile.tenantID] The AAD tenant ID to use
     * for authentication. If not specified, will use the tenant of the deployment
     * subscription.
     *
     * @param {string} parameters.location Resource location
     *
     * @param {object} [parameters.tags] Resource tags
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ManagedCluster} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ManagedCluster} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ManagedCluster} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, resourceName: string, parameters: models.ManagedCluster, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ManagedCluster>;
    createOrUpdate(resourceGroupName: string, resourceName: string, parameters: models.ManagedCluster, callback: ServiceCallback<models.ManagedCluster>): void;
    createOrUpdate(resourceGroupName: string, resourceName: string, parameters: models.ManagedCluster, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ManagedCluster>): void;


    /**
     * @summary Updates tags on a managed cluster.
     *
     * Updates a managed cluster with the specified tags.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} resourceName The name of the managed cluster resource.
     *
     * @param {object} parameters Parameters supplied to the Update Managed Cluster
     * Tags operation.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ManagedCluster>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateTagsWithHttpOperationResponse(resourceGroupName: string, resourceName: string, parameters: models.TagsObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ManagedCluster>>;

    /**
     * @summary Updates tags on a managed cluster.
     *
     * Updates a managed cluster with the specified tags.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} resourceName The name of the managed cluster resource.
     *
     * @param {object} parameters Parameters supplied to the Update Managed Cluster
     * Tags operation.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ManagedCluster} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ManagedCluster} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ManagedCluster} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updateTags(resourceGroupName: string, resourceName: string, parameters: models.TagsObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ManagedCluster>;
    updateTags(resourceGroupName: string, resourceName: string, parameters: models.TagsObject, callback: ServiceCallback<models.ManagedCluster>): void;
    updateTags(resourceGroupName: string, resourceName: string, parameters: models.TagsObject, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ManagedCluster>): void;


    /**
     * @summary Deletes a managed cluster.
     *
     * Deletes the managed cluster with a specified resource group and name.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} resourceName The name of the managed cluster resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, resourceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Deletes a managed cluster.
     *
     * Deletes the managed cluster with a specified resource group and name.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} resourceName The name of the managed cluster resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, resourceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, resourceName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, resourceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Reset Service Principal Profile of a managed cluster.
     *
     * Update the service principal Profile for a managed cluster.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} resourceName The name of the managed cluster resource.
     *
     * @param {object} parameters Parameters supplied to the Reset Service
     * Principal Profile operation for a Managed Cluster.
     *
     * @param {string} parameters.clientId The ID for the service principal.
     *
     * @param {string} [parameters.secret] The secret password associated with the
     * service principal in plain text.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    resetServicePrincipalProfileWithHttpOperationResponse(resourceGroupName: string, resourceName: string, parameters: models.ManagedClusterServicePrincipalProfile, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Reset Service Principal Profile of a managed cluster.
     *
     * Update the service principal Profile for a managed cluster.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} resourceName The name of the managed cluster resource.
     *
     * @param {object} parameters Parameters supplied to the Reset Service
     * Principal Profile operation for a Managed Cluster.
     *
     * @param {string} parameters.clientId The ID for the service principal.
     *
     * @param {string} [parameters.secret] The secret password associated with the
     * service principal in plain text.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    resetServicePrincipalProfile(resourceGroupName: string, resourceName: string, parameters: models.ManagedClusterServicePrincipalProfile, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    resetServicePrincipalProfile(resourceGroupName: string, resourceName: string, parameters: models.ManagedClusterServicePrincipalProfile, callback: ServiceCallback<void>): void;
    resetServicePrincipalProfile(resourceGroupName: string, resourceName: string, parameters: models.ManagedClusterServicePrincipalProfile, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Reset AAD Profile of a managed cluster.
     *
     * Update the AAD Profile for a managed cluster.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} resourceName The name of the managed cluster resource.
     *
     * @param {object} parameters Parameters supplied to the Reset AAD Profile
     * operation for a Managed Cluster.
     *
     * @param {string} parameters.clientAppID The client AAD application ID.
     *
     * @param {string} parameters.serverAppID The server AAD application ID.
     *
     * @param {string} [parameters.serverAppSecret] The server AAD application
     * secret.
     *
     * @param {string} [parameters.tenantID] The AAD tenant ID to use for
     * authentication. If not specified, will use the tenant of the deployment
     * subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    resetAADProfileWithHttpOperationResponse(resourceGroupName: string, resourceName: string, parameters: models.ManagedClusterAADProfile, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Reset AAD Profile of a managed cluster.
     *
     * Update the AAD Profile for a managed cluster.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} resourceName The name of the managed cluster resource.
     *
     * @param {object} parameters Parameters supplied to the Reset AAD Profile
     * operation for a Managed Cluster.
     *
     * @param {string} parameters.clientAppID The client AAD application ID.
     *
     * @param {string} parameters.serverAppID The server AAD application ID.
     *
     * @param {string} [parameters.serverAppSecret] The server AAD application
     * secret.
     *
     * @param {string} [parameters.tenantID] The AAD tenant ID to use for
     * authentication. If not specified, will use the tenant of the deployment
     * subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    resetAADProfile(resourceGroupName: string, resourceName: string, parameters: models.ManagedClusterAADProfile, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    resetAADProfile(resourceGroupName: string, resourceName: string, parameters: models.ManagedClusterAADProfile, callback: ServiceCallback<void>): void;
    resetAADProfile(resourceGroupName: string, resourceName: string, parameters: models.ManagedClusterAADProfile, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Creates or updates a managed cluster.
     *
     * Creates or updates a managed cluster with the specified configuration for
     * agents and Kubernetes version.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} resourceName The name of the managed cluster resource.
     *
     * @param {object} parameters Parameters supplied to the Create or Update a
     * Managed Cluster operation.
     *
     * @param {string} [parameters.kubernetesVersion] Version of Kubernetes
     * specified when creating the managed cluster.
     *
     * @param {string} [parameters.dnsPrefix] DNS prefix specified when creating
     * the managed cluster.
     *
     * @param {array} [parameters.agentPoolProfiles] Properties of the agent pool.
     *
     * @param {object} [parameters.linuxProfile] Profile for Linux VMs in the
     * container service cluster.
     *
     * @param {string} parameters.linuxProfile.adminUsername The administrator
     * username to use for Linux VMs.
     *
     * @param {object} parameters.linuxProfile.ssh SSH configuration for
     * Linux-based VMs running on Azure.
     *
     * @param {array} parameters.linuxProfile.ssh.publicKeys The list of SSH public
     * keys used to authenticate with Linux-based VMs. Only expect one key
     * specified.
     *
     * @param {object} [parameters.servicePrincipalProfile] Information about a
     * service principal identity for the cluster to use for manipulating Azure
     * APIs.
     *
     * @param {string} parameters.servicePrincipalProfile.clientId The ID for the
     * service principal.
     *
     * @param {string} [parameters.servicePrincipalProfile.secret] The secret
     * password associated with the service principal in plain text.
     *
     * @param {object} [parameters.addonProfiles] Profile of managed cluster
     * add-on.
     *
     * @param {boolean} [parameters.enableRBAC] Whether to enable Kubernetes
     * Role-Based Access Control.
     *
     * @param {object} [parameters.networkProfile] Profile of network
     * configuration.
     *
     * @param {string} [parameters.networkProfile.networkPlugin] Network plugin
     * used for building Kubernetes network. Possible values include: 'azure',
     * 'kubenet'
     *
     * @param {string} [parameters.networkProfile.networkPolicy] Network policy
     * used for building Kubernetes network. Possible values include: 'calico'
     *
     * @param {string} [parameters.networkProfile.podCidr] A CIDR notation IP range
     * from which to assign pod IPs when kubenet is used.
     *
     * @param {string} [parameters.networkProfile.serviceCidr] A CIDR notation IP
     * range from which to assign service cluster IPs. It must not overlap with any
     * Subnet IP ranges.
     *
     * @param {string} [parameters.networkProfile.dnsServiceIP] An IP address
     * assigned to the Kubernetes DNS service. It must be within the Kubernetes
     * service address range specified in serviceCidr.
     *
     * @param {string} [parameters.networkProfile.dockerBridgeCidr] A CIDR notation
     * IP range assigned to the Docker bridge network. It must not overlap with any
     * Subnet IP ranges or the Kubernetes service address range.
     *
     * @param {object} [parameters.aadProfile] Profile of Azure Active Directory
     * configuration.
     *
     * @param {string} parameters.aadProfile.clientAppID The client AAD application
     * ID.
     *
     * @param {string} parameters.aadProfile.serverAppID The server AAD application
     * ID.
     *
     * @param {string} [parameters.aadProfile.serverAppSecret] The server AAD
     * application secret.
     *
     * @param {string} [parameters.aadProfile.tenantID] The AAD tenant ID to use
     * for authentication. If not specified, will use the tenant of the deployment
     * subscription.
     *
     * @param {string} parameters.location Resource location
     *
     * @param {object} [parameters.tags] Resource tags
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ManagedCluster>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, resourceName: string, parameters: models.ManagedCluster, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ManagedCluster>>;

    /**
     * @summary Creates or updates a managed cluster.
     *
     * Creates or updates a managed cluster with the specified configuration for
     * agents and Kubernetes version.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} resourceName The name of the managed cluster resource.
     *
     * @param {object} parameters Parameters supplied to the Create or Update a
     * Managed Cluster operation.
     *
     * @param {string} [parameters.kubernetesVersion] Version of Kubernetes
     * specified when creating the managed cluster.
     *
     * @param {string} [parameters.dnsPrefix] DNS prefix specified when creating
     * the managed cluster.
     *
     * @param {array} [parameters.agentPoolProfiles] Properties of the agent pool.
     *
     * @param {object} [parameters.linuxProfile] Profile for Linux VMs in the
     * container service cluster.
     *
     * @param {string} parameters.linuxProfile.adminUsername The administrator
     * username to use for Linux VMs.
     *
     * @param {object} parameters.linuxProfile.ssh SSH configuration for
     * Linux-based VMs running on Azure.
     *
     * @param {array} parameters.linuxProfile.ssh.publicKeys The list of SSH public
     * keys used to authenticate with Linux-based VMs. Only expect one key
     * specified.
     *
     * @param {object} [parameters.servicePrincipalProfile] Information about a
     * service principal identity for the cluster to use for manipulating Azure
     * APIs.
     *
     * @param {string} parameters.servicePrincipalProfile.clientId The ID for the
     * service principal.
     *
     * @param {string} [parameters.servicePrincipalProfile.secret] The secret
     * password associated with the service principal in plain text.
     *
     * @param {object} [parameters.addonProfiles] Profile of managed cluster
     * add-on.
     *
     * @param {boolean} [parameters.enableRBAC] Whether to enable Kubernetes
     * Role-Based Access Control.
     *
     * @param {object} [parameters.networkProfile] Profile of network
     * configuration.
     *
     * @param {string} [parameters.networkProfile.networkPlugin] Network plugin
     * used for building Kubernetes network. Possible values include: 'azure',
     * 'kubenet'
     *
     * @param {string} [parameters.networkProfile.networkPolicy] Network policy
     * used for building Kubernetes network. Possible values include: 'calico'
     *
     * @param {string} [parameters.networkProfile.podCidr] A CIDR notation IP range
     * from which to assign pod IPs when kubenet is used.
     *
     * @param {string} [parameters.networkProfile.serviceCidr] A CIDR notation IP
     * range from which to assign service cluster IPs. It must not overlap with any
     * Subnet IP ranges.
     *
     * @param {string} [parameters.networkProfile.dnsServiceIP] An IP address
     * assigned to the Kubernetes DNS service. It must be within the Kubernetes
     * service address range specified in serviceCidr.
     *
     * @param {string} [parameters.networkProfile.dockerBridgeCidr] A CIDR notation
     * IP range assigned to the Docker bridge network. It must not overlap with any
     * Subnet IP ranges or the Kubernetes service address range.
     *
     * @param {object} [parameters.aadProfile] Profile of Azure Active Directory
     * configuration.
     *
     * @param {string} parameters.aadProfile.clientAppID The client AAD application
     * ID.
     *
     * @param {string} parameters.aadProfile.serverAppID The server AAD application
     * ID.
     *
     * @param {string} [parameters.aadProfile.serverAppSecret] The server AAD
     * application secret.
     *
     * @param {string} [parameters.aadProfile.tenantID] The AAD tenant ID to use
     * for authentication. If not specified, will use the tenant of the deployment
     * subscription.
     *
     * @param {string} parameters.location Resource location
     *
     * @param {object} [parameters.tags] Resource tags
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ManagedCluster} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ManagedCluster} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ManagedCluster} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(resourceGroupName: string, resourceName: string, parameters: models.ManagedCluster, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ManagedCluster>;
    beginCreateOrUpdate(resourceGroupName: string, resourceName: string, parameters: models.ManagedCluster, callback: ServiceCallback<models.ManagedCluster>): void;
    beginCreateOrUpdate(resourceGroupName: string, resourceName: string, parameters: models.ManagedCluster, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ManagedCluster>): void;


    /**
     * @summary Updates tags on a managed cluster.
     *
     * Updates a managed cluster with the specified tags.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} resourceName The name of the managed cluster resource.
     *
     * @param {object} parameters Parameters supplied to the Update Managed Cluster
     * Tags operation.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ManagedCluster>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginUpdateTagsWithHttpOperationResponse(resourceGroupName: string, resourceName: string, parameters: models.TagsObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ManagedCluster>>;

    /**
     * @summary Updates tags on a managed cluster.
     *
     * Updates a managed cluster with the specified tags.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} resourceName The name of the managed cluster resource.
     *
     * @param {object} parameters Parameters supplied to the Update Managed Cluster
     * Tags operation.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ManagedCluster} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ManagedCluster} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ManagedCluster} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginUpdateTags(resourceGroupName: string, resourceName: string, parameters: models.TagsObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ManagedCluster>;
    beginUpdateTags(resourceGroupName: string, resourceName: string, parameters: models.TagsObject, callback: ServiceCallback<models.ManagedCluster>): void;
    beginUpdateTags(resourceGroupName: string, resourceName: string, parameters: models.TagsObject, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ManagedCluster>): void;


    /**
     * @summary Deletes a managed cluster.
     *
     * Deletes the managed cluster with a specified resource group and name.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} resourceName The name of the managed cluster resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, resourceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Deletes a managed cluster.
     *
     * Deletes the managed cluster with a specified resource group and name.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} resourceName The name of the managed cluster resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(resourceGroupName: string, resourceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(resourceGroupName: string, resourceName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, resourceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Reset Service Principal Profile of a managed cluster.
     *
     * Update the service principal Profile for a managed cluster.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} resourceName The name of the managed cluster resource.
     *
     * @param {object} parameters Parameters supplied to the Reset Service
     * Principal Profile operation for a Managed Cluster.
     *
     * @param {string} parameters.clientId The ID for the service principal.
     *
     * @param {string} [parameters.secret] The secret password associated with the
     * service principal in plain text.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginResetServicePrincipalProfileWithHttpOperationResponse(resourceGroupName: string, resourceName: string, parameters: models.ManagedClusterServicePrincipalProfile, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Reset Service Principal Profile of a managed cluster.
     *
     * Update the service principal Profile for a managed cluster.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} resourceName The name of the managed cluster resource.
     *
     * @param {object} parameters Parameters supplied to the Reset Service
     * Principal Profile operation for a Managed Cluster.
     *
     * @param {string} parameters.clientId The ID for the service principal.
     *
     * @param {string} [parameters.secret] The secret password associated with the
     * service principal in plain text.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginResetServicePrincipalProfile(resourceGroupName: string, resourceName: string, parameters: models.ManagedClusterServicePrincipalProfile, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginResetServicePrincipalProfile(resourceGroupName: string, resourceName: string, parameters: models.ManagedClusterServicePrincipalProfile, callback: ServiceCallback<void>): void;
    beginResetServicePrincipalProfile(resourceGroupName: string, resourceName: string, parameters: models.ManagedClusterServicePrincipalProfile, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Reset AAD Profile of a managed cluster.
     *
     * Update the AAD Profile for a managed cluster.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} resourceName The name of the managed cluster resource.
     *
     * @param {object} parameters Parameters supplied to the Reset AAD Profile
     * operation for a Managed Cluster.
     *
     * @param {string} parameters.clientAppID The client AAD application ID.
     *
     * @param {string} parameters.serverAppID The server AAD application ID.
     *
     * @param {string} [parameters.serverAppSecret] The server AAD application
     * secret.
     *
     * @param {string} [parameters.tenantID] The AAD tenant ID to use for
     * authentication. If not specified, will use the tenant of the deployment
     * subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginResetAADProfileWithHttpOperationResponse(resourceGroupName: string, resourceName: string, parameters: models.ManagedClusterAADProfile, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Reset AAD Profile of a managed cluster.
     *
     * Update the AAD Profile for a managed cluster.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} resourceName The name of the managed cluster resource.
     *
     * @param {object} parameters Parameters supplied to the Reset AAD Profile
     * operation for a Managed Cluster.
     *
     * @param {string} parameters.clientAppID The client AAD application ID.
     *
     * @param {string} parameters.serverAppID The server AAD application ID.
     *
     * @param {string} [parameters.serverAppSecret] The server AAD application
     * secret.
     *
     * @param {string} [parameters.tenantID] The AAD tenant ID to use for
     * authentication. If not specified, will use the tenant of the deployment
     * subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginResetAADProfile(resourceGroupName: string, resourceName: string, parameters: models.ManagedClusterAADProfile, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginResetAADProfile(resourceGroupName: string, resourceName: string, parameters: models.ManagedClusterAADProfile, callback: ServiceCallback<void>): void;
    beginResetAADProfile(resourceGroupName: string, resourceName: string, parameters: models.ManagedClusterAADProfile, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Gets a list of managed clusters in the specified subscription.
     *
     * Gets a list of managed clusters in the specified subscription. The operation
     * returns properties of each managed cluster.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ManagedClusterListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ManagedClusterListResult>>;

    /**
     * @summary Gets a list of managed clusters in the specified subscription.
     *
     * Gets a list of managed clusters in the specified subscription. The operation
     * returns properties of each managed cluster.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ManagedClusterListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ManagedClusterListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ManagedClusterListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ManagedClusterListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.ManagedClusterListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ManagedClusterListResult>): void;


    /**
     * @summary Lists managed clusters in the specified subscription and resource
     * group.
     *
     * Lists managed clusters in the specified subscription and resource group. The
     * operation returns properties of each managed cluster.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ManagedClusterListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ManagedClusterListResult>>;

    /**
     * @summary Lists managed clusters in the specified subscription and resource
     * group.
     *
     * Lists managed clusters in the specified subscription and resource group. The
     * operation returns properties of each managed cluster.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ManagedClusterListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ManagedClusterListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ManagedClusterListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroupNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ManagedClusterListResult>;
    listByResourceGroupNext(nextPageLink: string, callback: ServiceCallback<models.ManagedClusterListResult>): void;
    listByResourceGroupNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ManagedClusterListResult>): void;
}
