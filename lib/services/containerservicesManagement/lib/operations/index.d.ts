/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback, HttpOperationResponse } from 'ms-rest';
import * as models from '../models';


/**
 * @class
 * Operations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ContainerServiceClient.
 */
export interface Operations {


    /**
     * Gets a list of compute operations.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OperationListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OperationListResult>>;

    /**
     * Gets a list of compute operations.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OperationListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OperationListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OperationListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.OperationListResult>;
    list(callback: ServiceCallback<models.OperationListResult>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OperationListResult>): void;
}

/**
 * @class
 * ManagedClusters
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ContainerServiceClient.
 */
export interface ManagedClusters {


    /**
     * @summary Gets a list of managed clusters in the specified subscription.
     *
     * Gets a list of managed clusters in the specified subscription. The operation
     * returns properties of each managed cluster.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ManagedClusterListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ManagedClusterListResult>>;

    /**
     * @summary Gets a list of managed clusters in the specified subscription.
     *
     * Gets a list of managed clusters in the specified subscription. The operation
     * returns properties of each managed cluster.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ManagedClusterListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ManagedClusterListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ManagedClusterListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ManagedClusterListResult>;
    list(callback: ServiceCallback<models.ManagedClusterListResult>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ManagedClusterListResult>): void;


    /**
     * @summary Lists managed clusters in the specified subscription and resource
     * group.
     *
     * Lists managed clusters in the specified subscription and resource group. The
     * operation returns properties of each managed cluster.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ManagedClusterListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupWithHttpOperationResponse(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ManagedClusterListResult>>;

    /**
     * @summary Lists managed clusters in the specified subscription and resource
     * group.
     *
     * Lists managed clusters in the specified subscription and resource group. The
     * operation returns properties of each managed cluster.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ManagedClusterListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ManagedClusterListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ManagedClusterListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroup(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ManagedClusterListResult>;
    listByResourceGroup(resourceGroupName: string, callback: ServiceCallback<models.ManagedClusterListResult>): void;
    listByResourceGroup(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ManagedClusterListResult>): void;


    /**
     * @summary Gets upgrade profile for a managed cluster.
     *
     * Gets the details of the upgrade profile for a managed cluster with a
     * specified resource group and name.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} resourceName The name of the managed cluster resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ManagedClusterUpgradeProfile>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getUpgradeProfileWithHttpOperationResponse(resourceGroupName: string, resourceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ManagedClusterUpgradeProfile>>;

    /**
     * @summary Gets upgrade profile for a managed cluster.
     *
     * Gets the details of the upgrade profile for a managed cluster with a
     * specified resource group and name.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} resourceName The name of the managed cluster resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ManagedClusterUpgradeProfile} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ManagedClusterUpgradeProfile} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ManagedClusterUpgradeProfile} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getUpgradeProfile(resourceGroupName: string, resourceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ManagedClusterUpgradeProfile>;
    getUpgradeProfile(resourceGroupName: string, resourceName: string, callback: ServiceCallback<models.ManagedClusterUpgradeProfile>): void;
    getUpgradeProfile(resourceGroupName: string, resourceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ManagedClusterUpgradeProfile>): void;


    /**
     * @summary Gets an access profile of a managed cluster.
     *
     * Gets the accessProfile for the specified role name of the managed cluster
     * with a specified resource group and name.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} resourceName The name of the managed cluster resource.
     *
     * @param {string} roleName The name of the role for managed cluster
     * accessProfile resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ManagedClusterAccessProfile>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getAccessProfileWithHttpOperationResponse(resourceGroupName: string, resourceName: string, roleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ManagedClusterAccessProfile>>;

    /**
     * @summary Gets an access profile of a managed cluster.
     *
     * Gets the accessProfile for the specified role name of the managed cluster
     * with a specified resource group and name.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} resourceName The name of the managed cluster resource.
     *
     * @param {string} roleName The name of the role for managed cluster
     * accessProfile resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ManagedClusterAccessProfile} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ManagedClusterAccessProfile} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ManagedClusterAccessProfile} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getAccessProfile(resourceGroupName: string, resourceName: string, roleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ManagedClusterAccessProfile>;
    getAccessProfile(resourceGroupName: string, resourceName: string, roleName: string, callback: ServiceCallback<models.ManagedClusterAccessProfile>): void;
    getAccessProfile(resourceGroupName: string, resourceName: string, roleName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ManagedClusterAccessProfile>): void;


    /**
     * @summary Gets cluster admin credential of a managed cluster.
     *
     * Gets cluster admin credential of the managed cluster with a specified
     * resource group and name.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} resourceName The name of the managed cluster resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<CredentialResults>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listClusterAdminCredentialsWithHttpOperationResponse(resourceGroupName: string, resourceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CredentialResults>>;

    /**
     * @summary Gets cluster admin credential of a managed cluster.
     *
     * Gets cluster admin credential of the managed cluster with a specified
     * resource group and name.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} resourceName The name of the managed cluster resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {CredentialResults} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {CredentialResults} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link CredentialResults} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listClusterAdminCredentials(resourceGroupName: string, resourceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.CredentialResults>;
    listClusterAdminCredentials(resourceGroupName: string, resourceName: string, callback: ServiceCallback<models.CredentialResults>): void;
    listClusterAdminCredentials(resourceGroupName: string, resourceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CredentialResults>): void;


    /**
     * @summary Gets cluster user credential of a managed cluster.
     *
     * Gets cluster user credential of the managed cluster with a specified
     * resource group and name.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} resourceName The name of the managed cluster resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<CredentialResults>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listClusterUserCredentialsWithHttpOperationResponse(resourceGroupName: string, resourceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CredentialResults>>;

    /**
     * @summary Gets cluster user credential of a managed cluster.
     *
     * Gets cluster user credential of the managed cluster with a specified
     * resource group and name.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} resourceName The name of the managed cluster resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {CredentialResults} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {CredentialResults} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link CredentialResults} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listClusterUserCredentials(resourceGroupName: string, resourceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.CredentialResults>;
    listClusterUserCredentials(resourceGroupName: string, resourceName: string, callback: ServiceCallback<models.CredentialResults>): void;
    listClusterUserCredentials(resourceGroupName: string, resourceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CredentialResults>): void;


    /**
     * @summary Gets a managed cluster.
     *
     * Gets the details of the managed cluster with a specified resource group and
     * name.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} resourceName The name of the managed cluster resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ManagedCluster>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, resourceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ManagedCluster>>;

    /**
     * @summary Gets a managed cluster.
     *
     * Gets the details of the managed cluster with a specified resource group and
     * name.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} resourceName The name of the managed cluster resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ManagedCluster} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ManagedCluster} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ManagedCluster} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, resourceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ManagedCluster>;
    get(resourceGroupName: string, resourceName: string, callback: ServiceCallback<models.ManagedCluster>): void;
    get(resourceGroupName: string, resourceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ManagedCluster>): void;


    /**
     * @summary Creates or updates a managed cluster.
     *
     * Creates or updates a managed cluster with the specified configuration for
     * agents and Kubernetes version.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} resourceName The name of the managed cluster resource.
     *
     * @param {object} parameters Parameters supplied to the Create or Update a
     * Managed Cluster operation.
     *
     * @param {string} [parameters.kubernetesVersion] Version of Kubernetes
     * specified when creating the managed cluster.
     *
     * @param {string} [parameters.dnsPrefix] DNS prefix specified when creating
     * the managed cluster.
     *
     * @param {array} [parameters.agentPoolProfiles] Properties of the agent pool.
     *
     * @param {object} [parameters.linuxProfile] Profile for Linux VMs in the
     * container service cluster.
     *
     * @param {string} parameters.linuxProfile.adminUsername The administrator
     * username to use for Linux VMs.
     *
     * @param {object} parameters.linuxProfile.ssh SSH configuration for
     * Linux-based VMs running on Azure.
     *
     * @param {array} parameters.linuxProfile.ssh.publicKeys The list of SSH public
     * keys used to authenticate with Linux-based VMs. Only expect one key
     * specified.
     *
     * @param {object} [parameters.servicePrincipalProfile] Information about a
     * service principal identity for the cluster to use for manipulating Azure
     * APIs.
     *
     * @param {string} parameters.servicePrincipalProfile.clientId The ID for the
     * service principal.
     *
     * @param {string} [parameters.servicePrincipalProfile.secret] The secret
     * password associated with the service principal in plain text.
     *
     * @param {object} [parameters.addonProfiles] Profile of managed cluster
     * add-on.
     *
     * @param {boolean} [parameters.enableRBAC] Whether to enable Kubernetes
     * Role-Based Access Control.
     *
     * @param {boolean} [parameters.enablePodSecurityPolicy] (PREVIEW) Whether to
     * enable Kubernetes Pod security policy.
     *
     * @param {object} [parameters.networkProfile] Profile of network
     * configuration.
     *
     * @param {string} [parameters.networkProfile.networkPlugin] Network plugin
     * used for building Kubernetes network. Possible values include: 'azure',
     * 'kubenet'
     *
     * @param {string} [parameters.networkProfile.networkPolicy] Network policy
     * used for building Kubernetes network. Possible values include: 'calico',
     * 'azure'
     *
     * @param {string} [parameters.networkProfile.podCidr] A CIDR notation IP range
     * from which to assign pod IPs when kubenet is used.
     *
     * @param {string} [parameters.networkProfile.serviceCidr] A CIDR notation IP
     * range from which to assign service cluster IPs. It must not overlap with any
     * Subnet IP ranges.
     *
     * @param {string} [parameters.networkProfile.dnsServiceIP] An IP address
     * assigned to the Kubernetes DNS service. It must be within the Kubernetes
     * service address range specified in serviceCidr.
     *
     * @param {string} [parameters.networkProfile.dockerBridgeCidr] A CIDR notation
     * IP range assigned to the Docker bridge network. It must not overlap with any
     * Subnet IP ranges or the Kubernetes service address range.
     *
     * @param {object} [parameters.aadProfile] Profile of Azure Active Directory
     * configuration.
     *
     * @param {string} parameters.aadProfile.clientAppID The client AAD application
     * ID.
     *
     * @param {string} parameters.aadProfile.serverAppID The server AAD application
     * ID.
     *
     * @param {string} [parameters.aadProfile.serverAppSecret] The server AAD
     * application secret.
     *
     * @param {string} [parameters.aadProfile.tenantID] The AAD tenant ID to use
     * for authentication. If not specified, will use the tenant of the deployment
     * subscription.
     *
     * @param {array} [parameters.apiServerAuthorizedIPRanges] (PREVIEW) Authorized
     * IP Ranges to kubernetes API server.
     *
     * @param {string} parameters.location Resource location
     *
     * @param {object} [parameters.tags] Resource tags
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ManagedCluster>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, resourceName: string, parameters: models.ManagedCluster, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ManagedCluster>>;

    /**
     * @summary Creates or updates a managed cluster.
     *
     * Creates or updates a managed cluster with the specified configuration for
     * agents and Kubernetes version.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} resourceName The name of the managed cluster resource.
     *
     * @param {object} parameters Parameters supplied to the Create or Update a
     * Managed Cluster operation.
     *
     * @param {string} [parameters.kubernetesVersion] Version of Kubernetes
     * specified when creating the managed cluster.
     *
     * @param {string} [parameters.dnsPrefix] DNS prefix specified when creating
     * the managed cluster.
     *
     * @param {array} [parameters.agentPoolProfiles] Properties of the agent pool.
     *
     * @param {object} [parameters.linuxProfile] Profile for Linux VMs in the
     * container service cluster.
     *
     * @param {string} parameters.linuxProfile.adminUsername The administrator
     * username to use for Linux VMs.
     *
     * @param {object} parameters.linuxProfile.ssh SSH configuration for
     * Linux-based VMs running on Azure.
     *
     * @param {array} parameters.linuxProfile.ssh.publicKeys The list of SSH public
     * keys used to authenticate with Linux-based VMs. Only expect one key
     * specified.
     *
     * @param {object} [parameters.servicePrincipalProfile] Information about a
     * service principal identity for the cluster to use for manipulating Azure
     * APIs.
     *
     * @param {string} parameters.servicePrincipalProfile.clientId The ID for the
     * service principal.
     *
     * @param {string} [parameters.servicePrincipalProfile.secret] The secret
     * password associated with the service principal in plain text.
     *
     * @param {object} [parameters.addonProfiles] Profile of managed cluster
     * add-on.
     *
     * @param {boolean} [parameters.enableRBAC] Whether to enable Kubernetes
     * Role-Based Access Control.
     *
     * @param {boolean} [parameters.enablePodSecurityPolicy] (PREVIEW) Whether to
     * enable Kubernetes Pod security policy.
     *
     * @param {object} [parameters.networkProfile] Profile of network
     * configuration.
     *
     * @param {string} [parameters.networkProfile.networkPlugin] Network plugin
     * used for building Kubernetes network. Possible values include: 'azure',
     * 'kubenet'
     *
     * @param {string} [parameters.networkProfile.networkPolicy] Network policy
     * used for building Kubernetes network. Possible values include: 'calico',
     * 'azure'
     *
     * @param {string} [parameters.networkProfile.podCidr] A CIDR notation IP range
     * from which to assign pod IPs when kubenet is used.
     *
     * @param {string} [parameters.networkProfile.serviceCidr] A CIDR notation IP
     * range from which to assign service cluster IPs. It must not overlap with any
     * Subnet IP ranges.
     *
     * @param {string} [parameters.networkProfile.dnsServiceIP] An IP address
     * assigned to the Kubernetes DNS service. It must be within the Kubernetes
     * service address range specified in serviceCidr.
     *
     * @param {string} [parameters.networkProfile.dockerBridgeCidr] A CIDR notation
     * IP range assigned to the Docker bridge network. It must not overlap with any
     * Subnet IP ranges or the Kubernetes service address range.
     *
     * @param {object} [parameters.aadProfile] Profile of Azure Active Directory
     * configuration.
     *
     * @param {string} parameters.aadProfile.clientAppID The client AAD application
     * ID.
     *
     * @param {string} parameters.aadProfile.serverAppID The server AAD application
     * ID.
     *
     * @param {string} [parameters.aadProfile.serverAppSecret] The server AAD
     * application secret.
     *
     * @param {string} [parameters.aadProfile.tenantID] The AAD tenant ID to use
     * for authentication. If not specified, will use the tenant of the deployment
     * subscription.
     *
     * @param {array} [parameters.apiServerAuthorizedIPRanges] (PREVIEW) Authorized
     * IP Ranges to kubernetes API server.
     *
     * @param {string} parameters.location Resource location
     *
     * @param {object} [parameters.tags] Resource tags
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ManagedCluster} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ManagedCluster} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ManagedCluster} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, resourceName: string, parameters: models.ManagedCluster, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ManagedCluster>;
    createOrUpdate(resourceGroupName: string, resourceName: string, parameters: models.ManagedCluster, callback: ServiceCallback<models.ManagedCluster>): void;
    createOrUpdate(resourceGroupName: string, resourceName: string, parameters: models.ManagedCluster, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ManagedCluster>): void;


    /**
     * @summary Updates tags on a managed cluster.
     *
     * Updates a managed cluster with the specified tags.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} resourceName The name of the managed cluster resource.
     *
     * @param {object} parameters Parameters supplied to the Update Managed Cluster
     * Tags operation.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ManagedCluster>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateTagsWithHttpOperationResponse(resourceGroupName: string, resourceName: string, parameters: models.TagsObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ManagedCluster>>;

    /**
     * @summary Updates tags on a managed cluster.
     *
     * Updates a managed cluster with the specified tags.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} resourceName The name of the managed cluster resource.
     *
     * @param {object} parameters Parameters supplied to the Update Managed Cluster
     * Tags operation.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ManagedCluster} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ManagedCluster} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ManagedCluster} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updateTags(resourceGroupName: string, resourceName: string, parameters: models.TagsObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ManagedCluster>;
    updateTags(resourceGroupName: string, resourceName: string, parameters: models.TagsObject, callback: ServiceCallback<models.ManagedCluster>): void;
    updateTags(resourceGroupName: string, resourceName: string, parameters: models.TagsObject, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ManagedCluster>): void;


    /**
     * @summary Deletes a managed cluster.
     *
     * Deletes the managed cluster with a specified resource group and name.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} resourceName The name of the managed cluster resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, resourceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Deletes a managed cluster.
     *
     * Deletes the managed cluster with a specified resource group and name.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} resourceName The name of the managed cluster resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, resourceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, resourceName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, resourceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Reset Service Principal Profile of a managed cluster.
     *
     * Update the service principal Profile for a managed cluster.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} resourceName The name of the managed cluster resource.
     *
     * @param {object} parameters Parameters supplied to the Reset Service
     * Principal Profile operation for a Managed Cluster.
     *
     * @param {string} parameters.clientId The ID for the service principal.
     *
     * @param {string} [parameters.secret] The secret password associated with the
     * service principal in plain text.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    resetServicePrincipalProfileWithHttpOperationResponse(resourceGroupName: string, resourceName: string, parameters: models.ManagedClusterServicePrincipalProfile, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Reset Service Principal Profile of a managed cluster.
     *
     * Update the service principal Profile for a managed cluster.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} resourceName The name of the managed cluster resource.
     *
     * @param {object} parameters Parameters supplied to the Reset Service
     * Principal Profile operation for a Managed Cluster.
     *
     * @param {string} parameters.clientId The ID for the service principal.
     *
     * @param {string} [parameters.secret] The secret password associated with the
     * service principal in plain text.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    resetServicePrincipalProfile(resourceGroupName: string, resourceName: string, parameters: models.ManagedClusterServicePrincipalProfile, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    resetServicePrincipalProfile(resourceGroupName: string, resourceName: string, parameters: models.ManagedClusterServicePrincipalProfile, callback: ServiceCallback<void>): void;
    resetServicePrincipalProfile(resourceGroupName: string, resourceName: string, parameters: models.ManagedClusterServicePrincipalProfile, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Reset AAD Profile of a managed cluster.
     *
     * Update the AAD Profile for a managed cluster.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} resourceName The name of the managed cluster resource.
     *
     * @param {object} parameters Parameters supplied to the Reset AAD Profile
     * operation for a Managed Cluster.
     *
     * @param {string} parameters.clientAppID The client AAD application ID.
     *
     * @param {string} parameters.serverAppID The server AAD application ID.
     *
     * @param {string} [parameters.serverAppSecret] The server AAD application
     * secret.
     *
     * @param {string} [parameters.tenantID] The AAD tenant ID to use for
     * authentication. If not specified, will use the tenant of the deployment
     * subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    resetAADProfileWithHttpOperationResponse(resourceGroupName: string, resourceName: string, parameters: models.ManagedClusterAADProfile, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Reset AAD Profile of a managed cluster.
     *
     * Update the AAD Profile for a managed cluster.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} resourceName The name of the managed cluster resource.
     *
     * @param {object} parameters Parameters supplied to the Reset AAD Profile
     * operation for a Managed Cluster.
     *
     * @param {string} parameters.clientAppID The client AAD application ID.
     *
     * @param {string} parameters.serverAppID The server AAD application ID.
     *
     * @param {string} [parameters.serverAppSecret] The server AAD application
     * secret.
     *
     * @param {string} [parameters.tenantID] The AAD tenant ID to use for
     * authentication. If not specified, will use the tenant of the deployment
     * subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    resetAADProfile(resourceGroupName: string, resourceName: string, parameters: models.ManagedClusterAADProfile, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    resetAADProfile(resourceGroupName: string, resourceName: string, parameters: models.ManagedClusterAADProfile, callback: ServiceCallback<void>): void;
    resetAADProfile(resourceGroupName: string, resourceName: string, parameters: models.ManagedClusterAADProfile, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Creates or updates a managed cluster.
     *
     * Creates or updates a managed cluster with the specified configuration for
     * agents and Kubernetes version.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} resourceName The name of the managed cluster resource.
     *
     * @param {object} parameters Parameters supplied to the Create or Update a
     * Managed Cluster operation.
     *
     * @param {string} [parameters.kubernetesVersion] Version of Kubernetes
     * specified when creating the managed cluster.
     *
     * @param {string} [parameters.dnsPrefix] DNS prefix specified when creating
     * the managed cluster.
     *
     * @param {array} [parameters.agentPoolProfiles] Properties of the agent pool.
     *
     * @param {object} [parameters.linuxProfile] Profile for Linux VMs in the
     * container service cluster.
     *
     * @param {string} parameters.linuxProfile.adminUsername The administrator
     * username to use for Linux VMs.
     *
     * @param {object} parameters.linuxProfile.ssh SSH configuration for
     * Linux-based VMs running on Azure.
     *
     * @param {array} parameters.linuxProfile.ssh.publicKeys The list of SSH public
     * keys used to authenticate with Linux-based VMs. Only expect one key
     * specified.
     *
     * @param {object} [parameters.servicePrincipalProfile] Information about a
     * service principal identity for the cluster to use for manipulating Azure
     * APIs.
     *
     * @param {string} parameters.servicePrincipalProfile.clientId The ID for the
     * service principal.
     *
     * @param {string} [parameters.servicePrincipalProfile.secret] The secret
     * password associated with the service principal in plain text.
     *
     * @param {object} [parameters.addonProfiles] Profile of managed cluster
     * add-on.
     *
     * @param {boolean} [parameters.enableRBAC] Whether to enable Kubernetes
     * Role-Based Access Control.
     *
     * @param {boolean} [parameters.enablePodSecurityPolicy] (PREVIEW) Whether to
     * enable Kubernetes Pod security policy.
     *
     * @param {object} [parameters.networkProfile] Profile of network
     * configuration.
     *
     * @param {string} [parameters.networkProfile.networkPlugin] Network plugin
     * used for building Kubernetes network. Possible values include: 'azure',
     * 'kubenet'
     *
     * @param {string} [parameters.networkProfile.networkPolicy] Network policy
     * used for building Kubernetes network. Possible values include: 'calico',
     * 'azure'
     *
     * @param {string} [parameters.networkProfile.podCidr] A CIDR notation IP range
     * from which to assign pod IPs when kubenet is used.
     *
     * @param {string} [parameters.networkProfile.serviceCidr] A CIDR notation IP
     * range from which to assign service cluster IPs. It must not overlap with any
     * Subnet IP ranges.
     *
     * @param {string} [parameters.networkProfile.dnsServiceIP] An IP address
     * assigned to the Kubernetes DNS service. It must be within the Kubernetes
     * service address range specified in serviceCidr.
     *
     * @param {string} [parameters.networkProfile.dockerBridgeCidr] A CIDR notation
     * IP range assigned to the Docker bridge network. It must not overlap with any
     * Subnet IP ranges or the Kubernetes service address range.
     *
     * @param {object} [parameters.aadProfile] Profile of Azure Active Directory
     * configuration.
     *
     * @param {string} parameters.aadProfile.clientAppID The client AAD application
     * ID.
     *
     * @param {string} parameters.aadProfile.serverAppID The server AAD application
     * ID.
     *
     * @param {string} [parameters.aadProfile.serverAppSecret] The server AAD
     * application secret.
     *
     * @param {string} [parameters.aadProfile.tenantID] The AAD tenant ID to use
     * for authentication. If not specified, will use the tenant of the deployment
     * subscription.
     *
     * @param {array} [parameters.apiServerAuthorizedIPRanges] (PREVIEW) Authorized
     * IP Ranges to kubernetes API server.
     *
     * @param {string} parameters.location Resource location
     *
     * @param {object} [parameters.tags] Resource tags
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ManagedCluster>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, resourceName: string, parameters: models.ManagedCluster, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ManagedCluster>>;

    /**
     * @summary Creates or updates a managed cluster.
     *
     * Creates or updates a managed cluster with the specified configuration for
     * agents and Kubernetes version.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} resourceName The name of the managed cluster resource.
     *
     * @param {object} parameters Parameters supplied to the Create or Update a
     * Managed Cluster operation.
     *
     * @param {string} [parameters.kubernetesVersion] Version of Kubernetes
     * specified when creating the managed cluster.
     *
     * @param {string} [parameters.dnsPrefix] DNS prefix specified when creating
     * the managed cluster.
     *
     * @param {array} [parameters.agentPoolProfiles] Properties of the agent pool.
     *
     * @param {object} [parameters.linuxProfile] Profile for Linux VMs in the
     * container service cluster.
     *
     * @param {string} parameters.linuxProfile.adminUsername The administrator
     * username to use for Linux VMs.
     *
     * @param {object} parameters.linuxProfile.ssh SSH configuration for
     * Linux-based VMs running on Azure.
     *
     * @param {array} parameters.linuxProfile.ssh.publicKeys The list of SSH public
     * keys used to authenticate with Linux-based VMs. Only expect one key
     * specified.
     *
     * @param {object} [parameters.servicePrincipalProfile] Information about a
     * service principal identity for the cluster to use for manipulating Azure
     * APIs.
     *
     * @param {string} parameters.servicePrincipalProfile.clientId The ID for the
     * service principal.
     *
     * @param {string} [parameters.servicePrincipalProfile.secret] The secret
     * password associated with the service principal in plain text.
     *
     * @param {object} [parameters.addonProfiles] Profile of managed cluster
     * add-on.
     *
     * @param {boolean} [parameters.enableRBAC] Whether to enable Kubernetes
     * Role-Based Access Control.
     *
     * @param {boolean} [parameters.enablePodSecurityPolicy] (PREVIEW) Whether to
     * enable Kubernetes Pod security policy.
     *
     * @param {object} [parameters.networkProfile] Profile of network
     * configuration.
     *
     * @param {string} [parameters.networkProfile.networkPlugin] Network plugin
     * used for building Kubernetes network. Possible values include: 'azure',
     * 'kubenet'
     *
     * @param {string} [parameters.networkProfile.networkPolicy] Network policy
     * used for building Kubernetes network. Possible values include: 'calico',
     * 'azure'
     *
     * @param {string} [parameters.networkProfile.podCidr] A CIDR notation IP range
     * from which to assign pod IPs when kubenet is used.
     *
     * @param {string} [parameters.networkProfile.serviceCidr] A CIDR notation IP
     * range from which to assign service cluster IPs. It must not overlap with any
     * Subnet IP ranges.
     *
     * @param {string} [parameters.networkProfile.dnsServiceIP] An IP address
     * assigned to the Kubernetes DNS service. It must be within the Kubernetes
     * service address range specified in serviceCidr.
     *
     * @param {string} [parameters.networkProfile.dockerBridgeCidr] A CIDR notation
     * IP range assigned to the Docker bridge network. It must not overlap with any
     * Subnet IP ranges or the Kubernetes service address range.
     *
     * @param {object} [parameters.aadProfile] Profile of Azure Active Directory
     * configuration.
     *
     * @param {string} parameters.aadProfile.clientAppID The client AAD application
     * ID.
     *
     * @param {string} parameters.aadProfile.serverAppID The server AAD application
     * ID.
     *
     * @param {string} [parameters.aadProfile.serverAppSecret] The server AAD
     * application secret.
     *
     * @param {string} [parameters.aadProfile.tenantID] The AAD tenant ID to use
     * for authentication. If not specified, will use the tenant of the deployment
     * subscription.
     *
     * @param {array} [parameters.apiServerAuthorizedIPRanges] (PREVIEW) Authorized
     * IP Ranges to kubernetes API server.
     *
     * @param {string} parameters.location Resource location
     *
     * @param {object} [parameters.tags] Resource tags
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ManagedCluster} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ManagedCluster} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ManagedCluster} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(resourceGroupName: string, resourceName: string, parameters: models.ManagedCluster, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ManagedCluster>;
    beginCreateOrUpdate(resourceGroupName: string, resourceName: string, parameters: models.ManagedCluster, callback: ServiceCallback<models.ManagedCluster>): void;
    beginCreateOrUpdate(resourceGroupName: string, resourceName: string, parameters: models.ManagedCluster, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ManagedCluster>): void;


    /**
     * @summary Updates tags on a managed cluster.
     *
     * Updates a managed cluster with the specified tags.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} resourceName The name of the managed cluster resource.
     *
     * @param {object} parameters Parameters supplied to the Update Managed Cluster
     * Tags operation.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ManagedCluster>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginUpdateTagsWithHttpOperationResponse(resourceGroupName: string, resourceName: string, parameters: models.TagsObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ManagedCluster>>;

    /**
     * @summary Updates tags on a managed cluster.
     *
     * Updates a managed cluster with the specified tags.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} resourceName The name of the managed cluster resource.
     *
     * @param {object} parameters Parameters supplied to the Update Managed Cluster
     * Tags operation.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ManagedCluster} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ManagedCluster} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ManagedCluster} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginUpdateTags(resourceGroupName: string, resourceName: string, parameters: models.TagsObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ManagedCluster>;
    beginUpdateTags(resourceGroupName: string, resourceName: string, parameters: models.TagsObject, callback: ServiceCallback<models.ManagedCluster>): void;
    beginUpdateTags(resourceGroupName: string, resourceName: string, parameters: models.TagsObject, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ManagedCluster>): void;


    /**
     * @summary Deletes a managed cluster.
     *
     * Deletes the managed cluster with a specified resource group and name.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} resourceName The name of the managed cluster resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, resourceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Deletes a managed cluster.
     *
     * Deletes the managed cluster with a specified resource group and name.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} resourceName The name of the managed cluster resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(resourceGroupName: string, resourceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(resourceGroupName: string, resourceName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, resourceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Reset Service Principal Profile of a managed cluster.
     *
     * Update the service principal Profile for a managed cluster.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} resourceName The name of the managed cluster resource.
     *
     * @param {object} parameters Parameters supplied to the Reset Service
     * Principal Profile operation for a Managed Cluster.
     *
     * @param {string} parameters.clientId The ID for the service principal.
     *
     * @param {string} [parameters.secret] The secret password associated with the
     * service principal in plain text.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginResetServicePrincipalProfileWithHttpOperationResponse(resourceGroupName: string, resourceName: string, parameters: models.ManagedClusterServicePrincipalProfile, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Reset Service Principal Profile of a managed cluster.
     *
     * Update the service principal Profile for a managed cluster.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} resourceName The name of the managed cluster resource.
     *
     * @param {object} parameters Parameters supplied to the Reset Service
     * Principal Profile operation for a Managed Cluster.
     *
     * @param {string} parameters.clientId The ID for the service principal.
     *
     * @param {string} [parameters.secret] The secret password associated with the
     * service principal in plain text.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginResetServicePrincipalProfile(resourceGroupName: string, resourceName: string, parameters: models.ManagedClusterServicePrincipalProfile, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginResetServicePrincipalProfile(resourceGroupName: string, resourceName: string, parameters: models.ManagedClusterServicePrincipalProfile, callback: ServiceCallback<void>): void;
    beginResetServicePrincipalProfile(resourceGroupName: string, resourceName: string, parameters: models.ManagedClusterServicePrincipalProfile, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Reset AAD Profile of a managed cluster.
     *
     * Update the AAD Profile for a managed cluster.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} resourceName The name of the managed cluster resource.
     *
     * @param {object} parameters Parameters supplied to the Reset AAD Profile
     * operation for a Managed Cluster.
     *
     * @param {string} parameters.clientAppID The client AAD application ID.
     *
     * @param {string} parameters.serverAppID The server AAD application ID.
     *
     * @param {string} [parameters.serverAppSecret] The server AAD application
     * secret.
     *
     * @param {string} [parameters.tenantID] The AAD tenant ID to use for
     * authentication. If not specified, will use the tenant of the deployment
     * subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginResetAADProfileWithHttpOperationResponse(resourceGroupName: string, resourceName: string, parameters: models.ManagedClusterAADProfile, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Reset AAD Profile of a managed cluster.
     *
     * Update the AAD Profile for a managed cluster.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} resourceName The name of the managed cluster resource.
     *
     * @param {object} parameters Parameters supplied to the Reset AAD Profile
     * operation for a Managed Cluster.
     *
     * @param {string} parameters.clientAppID The client AAD application ID.
     *
     * @param {string} parameters.serverAppID The server AAD application ID.
     *
     * @param {string} [parameters.serverAppSecret] The server AAD application
     * secret.
     *
     * @param {string} [parameters.tenantID] The AAD tenant ID to use for
     * authentication. If not specified, will use the tenant of the deployment
     * subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginResetAADProfile(resourceGroupName: string, resourceName: string, parameters: models.ManagedClusterAADProfile, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginResetAADProfile(resourceGroupName: string, resourceName: string, parameters: models.ManagedClusterAADProfile, callback: ServiceCallback<void>): void;
    beginResetAADProfile(resourceGroupName: string, resourceName: string, parameters: models.ManagedClusterAADProfile, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Gets a list of managed clusters in the specified subscription.
     *
     * Gets a list of managed clusters in the specified subscription. The operation
     * returns properties of each managed cluster.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ManagedClusterListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ManagedClusterListResult>>;

    /**
     * @summary Gets a list of managed clusters in the specified subscription.
     *
     * Gets a list of managed clusters in the specified subscription. The operation
     * returns properties of each managed cluster.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ManagedClusterListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ManagedClusterListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ManagedClusterListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ManagedClusterListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.ManagedClusterListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ManagedClusterListResult>): void;


    /**
     * @summary Lists managed clusters in the specified subscription and resource
     * group.
     *
     * Lists managed clusters in the specified subscription and resource group. The
     * operation returns properties of each managed cluster.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ManagedClusterListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ManagedClusterListResult>>;

    /**
     * @summary Lists managed clusters in the specified subscription and resource
     * group.
     *
     * Lists managed clusters in the specified subscription and resource group. The
     * operation returns properties of each managed cluster.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ManagedClusterListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ManagedClusterListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ManagedClusterListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroupNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ManagedClusterListResult>;
    listByResourceGroupNext(nextPageLink: string, callback: ServiceCallback<models.ManagedClusterListResult>): void;
    listByResourceGroupNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ManagedClusterListResult>): void;
}
