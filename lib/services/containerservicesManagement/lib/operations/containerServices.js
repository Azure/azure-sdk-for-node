/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const msRest = require('ms-rest');
const msRestAzure = require('ms-rest-azure');
const WebResource = msRest.WebResource;

/**
 * @summary Gets a list of container services in the specified subscription.
 *
 * Gets a list of container services in the specified subscription. The
 * operation returns properties of each container service including state,
 * orchestrator, number of masters and agents, and FQDNs of masters and agents.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link ContainerServiceListResult} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _list(options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let apiVersion = '2017-07-01';
  // Validate
  try {
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/providers/Microsoft.ContainerService/containerServices';
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ContainerServiceListResult']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}


/**
 * @summary Creates or updates a container service.
 *
 * Creates or updates a container service with the specified configuration of
 * orchestrator, masters, and agents.
 *
 * @param {string} resourceGroupName The name of the resource group.
 *
 * @param {string} containerServiceName The name of the container service in
 * the specified subscription and resource group.
 *
 * @param {object} parameters Parameters supplied to the Create or Update a
 * Container Service operation.
 *
 * @param {object} parameters.orchestratorProfile Profile for the container
 * service orchestrator.
 *
 * @param {string} parameters.orchestratorProfile.orchestratorType The
 * orchestrator to use to manage container service cluster resources. Valid
 * values are Kubernetes, Swarm, DCOS, DockerCE and Custom. Possible values
 * include: 'Kubernetes', 'Swarm', 'DCOS', 'DockerCE', 'Custom'
 *
 * @param {string} [parameters.orchestratorProfile.orchestratorVersion] The
 * version of the orchestrator to use. You can specify the major.minor.patch
 * part of the actual version.For example, you can specify version as "1.6.11".
 *
 * @param {object} [parameters.customProfile] Properties to configure a custom
 * container service cluster.
 *
 * @param {string} parameters.customProfile.orchestrator The name of the custom
 * orchestrator to use.
 *
 * @param {object} [parameters.servicePrincipalProfile] Information about a
 * service principal identity for the cluster to use for manipulating Azure
 * APIs. Exact one of secret or keyVaultSecretRef need to be specified.
 *
 * @param {string} parameters.servicePrincipalProfile.clientId The ID for the
 * service principal.
 *
 * @param {string} [parameters.servicePrincipalProfile.secret] The secret
 * password associated with the service principal in plain text.
 *
 * @param {object} [parameters.servicePrincipalProfile.keyVaultSecretRef]
 * Reference to a secret stored in Azure Key Vault.
 *
 * @param {string} parameters.servicePrincipalProfile.keyVaultSecretRef.vaultID
 * Key vault identifier.
 *
 * @param {string}
 * parameters.servicePrincipalProfile.keyVaultSecretRef.secretName The secret
 * name.
 *
 * @param {string}
 * [parameters.servicePrincipalProfile.keyVaultSecretRef.version] The secret
 * version.
 *
 * @param {object} parameters.masterProfile Profile for the container service
 * master.
 *
 * @param {number} [parameters.masterProfile.count] Number of masters (VMs) in
 * the container service cluster. Allowed values are 1, 3, and 5. The default
 * value is 1.
 *
 * @param {string} parameters.masterProfile.dnsPrefix DNS prefix to be used to
 * create the FQDN for the master pool.
 *
 * @param {string} parameters.masterProfile.vmSize Size of agent VMs. Possible
 * values include: 'Standard_A1', 'Standard_A10', 'Standard_A11',
 * 'Standard_A1_v2', 'Standard_A2', 'Standard_A2_v2', 'Standard_A2m_v2',
 * 'Standard_A3', 'Standard_A4', 'Standard_A4_v2', 'Standard_A4m_v2',
 * 'Standard_A5', 'Standard_A6', 'Standard_A7', 'Standard_A8',
 * 'Standard_A8_v2', 'Standard_A8m_v2', 'Standard_A9', 'Standard_B2ms',
 * 'Standard_B2s', 'Standard_B4ms', 'Standard_B8ms', 'Standard_D1',
 * 'Standard_D11', 'Standard_D11_v2', 'Standard_D11_v2_Promo', 'Standard_D12',
 * 'Standard_D12_v2', 'Standard_D12_v2_Promo', 'Standard_D13',
 * 'Standard_D13_v2', 'Standard_D13_v2_Promo', 'Standard_D14',
 * 'Standard_D14_v2', 'Standard_D14_v2_Promo', 'Standard_D15_v2',
 * 'Standard_D16_v3', 'Standard_D16s_v3', 'Standard_D1_v2', 'Standard_D2',
 * 'Standard_D2_v2', 'Standard_D2_v2_Promo', 'Standard_D2_v3',
 * 'Standard_D2s_v3', 'Standard_D3', 'Standard_D32_v3', 'Standard_D32s_v3',
 * 'Standard_D3_v2', 'Standard_D3_v2_Promo', 'Standard_D4', 'Standard_D4_v2',
 * 'Standard_D4_v2_Promo', 'Standard_D4_v3', 'Standard_D4s_v3',
 * 'Standard_D5_v2', 'Standard_D5_v2_Promo', 'Standard_D64_v3',
 * 'Standard_D64s_v3', 'Standard_D8_v3', 'Standard_D8s_v3', 'Standard_DS1',
 * 'Standard_DS11', 'Standard_DS11_v2', 'Standard_DS11_v2_Promo',
 * 'Standard_DS12', 'Standard_DS12_v2', 'Standard_DS12_v2_Promo',
 * 'Standard_DS13', 'Standard_DS13-2_v2', 'Standard_DS13-4_v2',
 * 'Standard_DS13_v2', 'Standard_DS13_v2_Promo', 'Standard_DS14',
 * 'Standard_DS14-4_v2', 'Standard_DS14-8_v2', 'Standard_DS14_v2',
 * 'Standard_DS14_v2_Promo', 'Standard_DS15_v2', 'Standard_DS1_v2',
 * 'Standard_DS2', 'Standard_DS2_v2', 'Standard_DS2_v2_Promo', 'Standard_DS3',
 * 'Standard_DS3_v2', 'Standard_DS3_v2_Promo', 'Standard_DS4',
 * 'Standard_DS4_v2', 'Standard_DS4_v2_Promo', 'Standard_DS5_v2',
 * 'Standard_DS5_v2_Promo', 'Standard_E16_v3', 'Standard_E16s_v3',
 * 'Standard_E2_v3', 'Standard_E2s_v3', 'Standard_E32-16s_v3',
 * 'Standard_E32-8s_v3', 'Standard_E32_v3', 'Standard_E32s_v3',
 * 'Standard_E4_v3', 'Standard_E4s_v3', 'Standard_E64-16s_v3',
 * 'Standard_E64-32s_v3', 'Standard_E64_v3', 'Standard_E64s_v3',
 * 'Standard_E8_v3', 'Standard_E8s_v3', 'Standard_F1', 'Standard_F16',
 * 'Standard_F16s', 'Standard_F16s_v2', 'Standard_F1s', 'Standard_F2',
 * 'Standard_F2s', 'Standard_F2s_v2', 'Standard_F32s_v2', 'Standard_F4',
 * 'Standard_F4s', 'Standard_F4s_v2', 'Standard_F64s_v2', 'Standard_F72s_v2',
 * 'Standard_F8', 'Standard_F8s', 'Standard_F8s_v2', 'Standard_G1',
 * 'Standard_G2', 'Standard_G3', 'Standard_G4', 'Standard_G5', 'Standard_GS1',
 * 'Standard_GS2', 'Standard_GS3', 'Standard_GS4', 'Standard_GS4-4',
 * 'Standard_GS4-8', 'Standard_GS5', 'Standard_GS5-16', 'Standard_GS5-8',
 * 'Standard_H16', 'Standard_H16m', 'Standard_H16mr', 'Standard_H16r',
 * 'Standard_H8', 'Standard_H8m', 'Standard_L16s', 'Standard_L32s',
 * 'Standard_L4s', 'Standard_L8s', 'Standard_M128-32ms', 'Standard_M128-64ms',
 * 'Standard_M128ms', 'Standard_M128s', 'Standard_M64-16ms',
 * 'Standard_M64-32ms', 'Standard_M64ms', 'Standard_M64s', 'Standard_NC12',
 * 'Standard_NC12s_v2', 'Standard_NC12s_v3', 'Standard_NC24', 'Standard_NC24r',
 * 'Standard_NC24rs_v2', 'Standard_NC24rs_v3', 'Standard_NC24s_v2',
 * 'Standard_NC24s_v3', 'Standard_NC6', 'Standard_NC6s_v2', 'Standard_NC6s_v3',
 * 'Standard_ND12s', 'Standard_ND24rs', 'Standard_ND24s', 'Standard_ND6s',
 * 'Standard_NV12', 'Standard_NV24', 'Standard_NV6'
 *
 * @param {number} [parameters.masterProfile.osDiskSizeGB] OS Disk Size in GB
 * to be used to specify the disk size for every machine in this master/agent
 * pool. If you specify 0, it will apply the default osDisk size according to
 * the vmSize specified.
 *
 * @param {string} [parameters.masterProfile.vnetSubnetID] VNet SubnetID
 * specifies the VNet's subnet identifier.
 *
 * @param {string} [parameters.masterProfile.firstConsecutiveStaticIP]
 * FirstConsecutiveStaticIP used to specify the first static ip of masters.
 *
 * @param {string} [parameters.masterProfile.storageProfile] Storage profile
 * specifies what kind of storage used. Choose from StorageAccount and
 * ManagedDisks. Leave it empty, we will choose for you based on the
 * orchestrator choice. Possible values include: 'StorageAccount',
 * 'ManagedDisks'
 *
 * @param {array} [parameters.agentPoolProfiles] Properties of the agent pool.
 *
 * @param {object} [parameters.windowsProfile] Profile for Windows VMs in the
 * container service cluster.
 *
 * @param {string} parameters.windowsProfile.adminUsername The administrator
 * username to use for Windows VMs.
 *
 * @param {string} parameters.windowsProfile.adminPassword The administrator
 * password to use for Windows VMs.
 *
 * @param {object} parameters.linuxProfile Profile for Linux VMs in the
 * container service cluster.
 *
 * @param {string} parameters.linuxProfile.adminUsername The administrator
 * username to use for Linux VMs.
 *
 * @param {object} parameters.linuxProfile.ssh SSH configuration for
 * Linux-based VMs running on Azure.
 *
 * @param {array} parameters.linuxProfile.ssh.publicKeys The list of SSH public
 * keys used to authenticate with Linux-based VMs. Only expect one key
 * specified.
 *
 * @param {object} [parameters.diagnosticsProfile] Profile for diagnostics in
 * the container service cluster.
 *
 * @param {object} parameters.diagnosticsProfile.vmDiagnostics Profile for
 * diagnostics on the container service VMs.
 *
 * @param {boolean} parameters.diagnosticsProfile.vmDiagnostics.enabled Whether
 * the VM diagnostic agent is provisioned on the VM.
 *
 * @param {string} parameters.location Resource location
 *
 * @param {object} [parameters.tags] Resource tags
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link ContainerService} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _createOrUpdate(resourceGroupName, containerServiceName, parameters, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }

  if (!callback) {
    throw new Error('callback cannot be null.');
  }

  // Send request
  this.beginCreateOrUpdate(resourceGroupName, containerServiceName, parameters, options, (err, parsedResult, httpRequest, response) => {
    if (err) return callback(err);

    let initialResult = new msRest.HttpOperationResponse();
    initialResult.request = httpRequest;
    initialResult.response = response;
    initialResult.body = response.body;
    client.getLongRunningOperationResult(initialResult, options, (err, pollingResult) => {
      if (err) return callback(err);

      // Create Result
      let result = null;

      httpRequest = pollingResult.request;
      response = pollingResult.response;
      let responseBody = pollingResult.body;
      if (responseBody === '') responseBody = null;

      // Deserialize Response
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ContainerService']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }

      return callback(null, result, httpRequest, response);
    });
  });
}

/**
 * @summary Gets the properties of the specified container service.
 *
 * Gets the properties of the specified container service in the specified
 * subscription and resource group. The operation returns the properties
 * including state, orchestrator, number of masters and agents, and FQDNs of
 * masters and agents.
 *
 * @param {string} resourceGroupName The name of the resource group.
 *
 * @param {string} containerServiceName The name of the container service in
 * the specified subscription and resource group.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link ContainerService} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _get(resourceGroupName, containerServiceName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let apiVersion = '2017-07-01';
  // Validate
  try {
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (containerServiceName === null || containerServiceName === undefined || typeof containerServiceName.valueOf() !== 'string') {
      throw new Error('containerServiceName cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/containerServices/{containerServiceName}';
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{containerServiceName}', encodeURIComponent(containerServiceName));
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ContainerService']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}


/**
 * @summary Deletes the specified container service.
 *
 * Deletes the specified container service in the specified subscription and
 * resource group. The operation does not delete other resources created as
 * part of creating a container service, including storage accounts, VMs, and
 * availability sets. All the other resources created with the container
 * service are part of the same resource group and can be deleted individually.
 *
 * @param {string} resourceGroupName The name of the resource group.
 *
 * @param {string} containerServiceName The name of the container service in
 * the specified subscription and resource group.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _deleteMethod(resourceGroupName, containerServiceName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }

  if (!callback) {
    throw new Error('callback cannot be null.');
  }

  // Send request
  this.beginDeleteMethod(resourceGroupName, containerServiceName, options, (err, parsedResult, httpRequest, response) => {
    if (err) return callback(err);

    let initialResult = new msRest.HttpOperationResponse();
    initialResult.request = httpRequest;
    initialResult.response = response;
    initialResult.body = response.body;
    client.getLongRunningOperationResult(initialResult, options, (err, pollingResult) => {
      if (err) return callback(err);

      // Create Result
      let result = null;

      httpRequest = pollingResult.request;
      response = pollingResult.response;
      let responseBody = pollingResult.body;
      if (responseBody === '') responseBody = null;

      // Deserialize Response

      return callback(null, result, httpRequest, response);
    });
  });
}

/**
 * @summary Gets a list of container services in the specified resource group.
 *
 * Gets a list of container services in the specified subscription and resource
 * group. The operation returns properties of each container service including
 * state, orchestrator, number of masters and agents, and FQDNs of masters and
 * agents.
 *
 * @param {string} resourceGroupName The name of the resource group.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link ContainerServiceListResult} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _listByResourceGroup(resourceGroupName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let apiVersion = '2017-07-01';
  // Validate
  try {
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/containerServices';
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ContainerServiceListResult']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Gets a list of supported orchestrators in the specified
 * subscription.
 *
 * Gets a list of supported orchestrators in the specified subscription. The
 * operation returns properties of each orchestrator including version and
 * available upgrades.
 *
 * @param {string} location The name of a supported Azure region.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {string} [options.resourceType] resource type for which the list of
 * orchestrators needs to be returned
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link OrchestratorVersionProfileListResult} for
 *                      more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _listOrchestrators(location, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let resourceType = (options && options.resourceType !== undefined) ? options.resourceType : undefined;
  let apiVersion = '2017-09-30';
  // Validate
  try {
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (location === null || location === undefined || typeof location.valueOf() !== 'string') {
      throw new Error('location cannot be null or undefined and it must be of type string.');
    }
    if (resourceType !== null && resourceType !== undefined && typeof resourceType.valueOf() !== 'string') {
      throw new Error('resourceType must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/providers/Microsoft.ContainerService/locations/{location}/orchestrators';
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  requestUrl = requestUrl.replace('{location}', encodeURIComponent(location));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(apiVersion));
  if (resourceType !== null && resourceType !== undefined) {
    queryParameters.push('resource-type=' + encodeURIComponent(resourceType));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['OrchestratorVersionProfileListResult']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Creates or updates a container service.
 *
 * Creates or updates a container service with the specified configuration of
 * orchestrator, masters, and agents.
 *
 * @param {string} resourceGroupName The name of the resource group.
 *
 * @param {string} containerServiceName The name of the container service in
 * the specified subscription and resource group.
 *
 * @param {object} parameters Parameters supplied to the Create or Update a
 * Container Service operation.
 *
 * @param {object} parameters.orchestratorProfile Profile for the container
 * service orchestrator.
 *
 * @param {string} parameters.orchestratorProfile.orchestratorType The
 * orchestrator to use to manage container service cluster resources. Valid
 * values are Kubernetes, Swarm, DCOS, DockerCE and Custom. Possible values
 * include: 'Kubernetes', 'Swarm', 'DCOS', 'DockerCE', 'Custom'
 *
 * @param {string} [parameters.orchestratorProfile.orchestratorVersion] The
 * version of the orchestrator to use. You can specify the major.minor.patch
 * part of the actual version.For example, you can specify version as "1.6.11".
 *
 * @param {object} [parameters.customProfile] Properties to configure a custom
 * container service cluster.
 *
 * @param {string} parameters.customProfile.orchestrator The name of the custom
 * orchestrator to use.
 *
 * @param {object} [parameters.servicePrincipalProfile] Information about a
 * service principal identity for the cluster to use for manipulating Azure
 * APIs. Exact one of secret or keyVaultSecretRef need to be specified.
 *
 * @param {string} parameters.servicePrincipalProfile.clientId The ID for the
 * service principal.
 *
 * @param {string} [parameters.servicePrincipalProfile.secret] The secret
 * password associated with the service principal in plain text.
 *
 * @param {object} [parameters.servicePrincipalProfile.keyVaultSecretRef]
 * Reference to a secret stored in Azure Key Vault.
 *
 * @param {string} parameters.servicePrincipalProfile.keyVaultSecretRef.vaultID
 * Key vault identifier.
 *
 * @param {string}
 * parameters.servicePrincipalProfile.keyVaultSecretRef.secretName The secret
 * name.
 *
 * @param {string}
 * [parameters.servicePrincipalProfile.keyVaultSecretRef.version] The secret
 * version.
 *
 * @param {object} parameters.masterProfile Profile for the container service
 * master.
 *
 * @param {number} [parameters.masterProfile.count] Number of masters (VMs) in
 * the container service cluster. Allowed values are 1, 3, and 5. The default
 * value is 1.
 *
 * @param {string} parameters.masterProfile.dnsPrefix DNS prefix to be used to
 * create the FQDN for the master pool.
 *
 * @param {string} parameters.masterProfile.vmSize Size of agent VMs. Possible
 * values include: 'Standard_A1', 'Standard_A10', 'Standard_A11',
 * 'Standard_A1_v2', 'Standard_A2', 'Standard_A2_v2', 'Standard_A2m_v2',
 * 'Standard_A3', 'Standard_A4', 'Standard_A4_v2', 'Standard_A4m_v2',
 * 'Standard_A5', 'Standard_A6', 'Standard_A7', 'Standard_A8',
 * 'Standard_A8_v2', 'Standard_A8m_v2', 'Standard_A9', 'Standard_B2ms',
 * 'Standard_B2s', 'Standard_B4ms', 'Standard_B8ms', 'Standard_D1',
 * 'Standard_D11', 'Standard_D11_v2', 'Standard_D11_v2_Promo', 'Standard_D12',
 * 'Standard_D12_v2', 'Standard_D12_v2_Promo', 'Standard_D13',
 * 'Standard_D13_v2', 'Standard_D13_v2_Promo', 'Standard_D14',
 * 'Standard_D14_v2', 'Standard_D14_v2_Promo', 'Standard_D15_v2',
 * 'Standard_D16_v3', 'Standard_D16s_v3', 'Standard_D1_v2', 'Standard_D2',
 * 'Standard_D2_v2', 'Standard_D2_v2_Promo', 'Standard_D2_v3',
 * 'Standard_D2s_v3', 'Standard_D3', 'Standard_D32_v3', 'Standard_D32s_v3',
 * 'Standard_D3_v2', 'Standard_D3_v2_Promo', 'Standard_D4', 'Standard_D4_v2',
 * 'Standard_D4_v2_Promo', 'Standard_D4_v3', 'Standard_D4s_v3',
 * 'Standard_D5_v2', 'Standard_D5_v2_Promo', 'Standard_D64_v3',
 * 'Standard_D64s_v3', 'Standard_D8_v3', 'Standard_D8s_v3', 'Standard_DS1',
 * 'Standard_DS11', 'Standard_DS11_v2', 'Standard_DS11_v2_Promo',
 * 'Standard_DS12', 'Standard_DS12_v2', 'Standard_DS12_v2_Promo',
 * 'Standard_DS13', 'Standard_DS13-2_v2', 'Standard_DS13-4_v2',
 * 'Standard_DS13_v2', 'Standard_DS13_v2_Promo', 'Standard_DS14',
 * 'Standard_DS14-4_v2', 'Standard_DS14-8_v2', 'Standard_DS14_v2',
 * 'Standard_DS14_v2_Promo', 'Standard_DS15_v2', 'Standard_DS1_v2',
 * 'Standard_DS2', 'Standard_DS2_v2', 'Standard_DS2_v2_Promo', 'Standard_DS3',
 * 'Standard_DS3_v2', 'Standard_DS3_v2_Promo', 'Standard_DS4',
 * 'Standard_DS4_v2', 'Standard_DS4_v2_Promo', 'Standard_DS5_v2',
 * 'Standard_DS5_v2_Promo', 'Standard_E16_v3', 'Standard_E16s_v3',
 * 'Standard_E2_v3', 'Standard_E2s_v3', 'Standard_E32-16s_v3',
 * 'Standard_E32-8s_v3', 'Standard_E32_v3', 'Standard_E32s_v3',
 * 'Standard_E4_v3', 'Standard_E4s_v3', 'Standard_E64-16s_v3',
 * 'Standard_E64-32s_v3', 'Standard_E64_v3', 'Standard_E64s_v3',
 * 'Standard_E8_v3', 'Standard_E8s_v3', 'Standard_F1', 'Standard_F16',
 * 'Standard_F16s', 'Standard_F16s_v2', 'Standard_F1s', 'Standard_F2',
 * 'Standard_F2s', 'Standard_F2s_v2', 'Standard_F32s_v2', 'Standard_F4',
 * 'Standard_F4s', 'Standard_F4s_v2', 'Standard_F64s_v2', 'Standard_F72s_v2',
 * 'Standard_F8', 'Standard_F8s', 'Standard_F8s_v2', 'Standard_G1',
 * 'Standard_G2', 'Standard_G3', 'Standard_G4', 'Standard_G5', 'Standard_GS1',
 * 'Standard_GS2', 'Standard_GS3', 'Standard_GS4', 'Standard_GS4-4',
 * 'Standard_GS4-8', 'Standard_GS5', 'Standard_GS5-16', 'Standard_GS5-8',
 * 'Standard_H16', 'Standard_H16m', 'Standard_H16mr', 'Standard_H16r',
 * 'Standard_H8', 'Standard_H8m', 'Standard_L16s', 'Standard_L32s',
 * 'Standard_L4s', 'Standard_L8s', 'Standard_M128-32ms', 'Standard_M128-64ms',
 * 'Standard_M128ms', 'Standard_M128s', 'Standard_M64-16ms',
 * 'Standard_M64-32ms', 'Standard_M64ms', 'Standard_M64s', 'Standard_NC12',
 * 'Standard_NC12s_v2', 'Standard_NC12s_v3', 'Standard_NC24', 'Standard_NC24r',
 * 'Standard_NC24rs_v2', 'Standard_NC24rs_v3', 'Standard_NC24s_v2',
 * 'Standard_NC24s_v3', 'Standard_NC6', 'Standard_NC6s_v2', 'Standard_NC6s_v3',
 * 'Standard_ND12s', 'Standard_ND24rs', 'Standard_ND24s', 'Standard_ND6s',
 * 'Standard_NV12', 'Standard_NV24', 'Standard_NV6'
 *
 * @param {number} [parameters.masterProfile.osDiskSizeGB] OS Disk Size in GB
 * to be used to specify the disk size for every machine in this master/agent
 * pool. If you specify 0, it will apply the default osDisk size according to
 * the vmSize specified.
 *
 * @param {string} [parameters.masterProfile.vnetSubnetID] VNet SubnetID
 * specifies the VNet's subnet identifier.
 *
 * @param {string} [parameters.masterProfile.firstConsecutiveStaticIP]
 * FirstConsecutiveStaticIP used to specify the first static ip of masters.
 *
 * @param {string} [parameters.masterProfile.storageProfile] Storage profile
 * specifies what kind of storage used. Choose from StorageAccount and
 * ManagedDisks. Leave it empty, we will choose for you based on the
 * orchestrator choice. Possible values include: 'StorageAccount',
 * 'ManagedDisks'
 *
 * @param {array} [parameters.agentPoolProfiles] Properties of the agent pool.
 *
 * @param {object} [parameters.windowsProfile] Profile for Windows VMs in the
 * container service cluster.
 *
 * @param {string} parameters.windowsProfile.adminUsername The administrator
 * username to use for Windows VMs.
 *
 * @param {string} parameters.windowsProfile.adminPassword The administrator
 * password to use for Windows VMs.
 *
 * @param {object} parameters.linuxProfile Profile for Linux VMs in the
 * container service cluster.
 *
 * @param {string} parameters.linuxProfile.adminUsername The administrator
 * username to use for Linux VMs.
 *
 * @param {object} parameters.linuxProfile.ssh SSH configuration for
 * Linux-based VMs running on Azure.
 *
 * @param {array} parameters.linuxProfile.ssh.publicKeys The list of SSH public
 * keys used to authenticate with Linux-based VMs. Only expect one key
 * specified.
 *
 * @param {object} [parameters.diagnosticsProfile] Profile for diagnostics in
 * the container service cluster.
 *
 * @param {object} parameters.diagnosticsProfile.vmDiagnostics Profile for
 * diagnostics on the container service VMs.
 *
 * @param {boolean} parameters.diagnosticsProfile.vmDiagnostics.enabled Whether
 * the VM diagnostic agent is provisioned on the VM.
 *
 * @param {string} parameters.location Resource location
 *
 * @param {object} [parameters.tags] Resource tags
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link ContainerService} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _beginCreateOrUpdate(resourceGroupName, containerServiceName, parameters, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let apiVersion = '2017-07-01';
  // Validate
  try {
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (containerServiceName === null || containerServiceName === undefined || typeof containerServiceName.valueOf() !== 'string') {
      throw new Error('containerServiceName cannot be null or undefined and it must be of type string.');
    }
    if (parameters === null || parameters === undefined) {
      throw new Error('parameters cannot be null or undefined.');
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/containerServices/{containerServiceName}';
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{containerServiceName}', encodeURIComponent(containerServiceName));
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PUT';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (parameters !== null && parameters !== undefined) {
      let requestModelMapper = new client.models['ContainerService']().mapper();
      requestModel = client.serialize(requestModelMapper, parameters, 'parameters');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(parameters, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200 && statusCode !== 201 && statusCode !== 202) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ContainerService']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }
    // Deserialize Response
    if (statusCode === 201) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ContainerService']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError1 = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError1.request = msRest.stripRequest(httpRequest);
        deserializationError1.response = msRest.stripResponse(response);
        return callback(deserializationError1);
      }
    }
    // Deserialize Response
    if (statusCode === 202) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ContainerService']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError2 = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError2.request = msRest.stripRequest(httpRequest);
        deserializationError2.response = msRest.stripResponse(response);
        return callback(deserializationError2);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Deletes the specified container service.
 *
 * Deletes the specified container service in the specified subscription and
 * resource group. The operation does not delete other resources created as
 * part of creating a container service, including storage accounts, VMs, and
 * availability sets. All the other resources created with the container
 * service are part of the same resource group and can be deleted individually.
 *
 * @param {string} resourceGroupName The name of the resource group.
 *
 * @param {string} containerServiceName The name of the container service in
 * the specified subscription and resource group.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _beginDeleteMethod(resourceGroupName, containerServiceName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let apiVersion = '2017-07-01';
  // Validate
  try {
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (containerServiceName === null || containerServiceName === undefined || typeof containerServiceName.valueOf() !== 'string') {
      throw new Error('containerServiceName cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/containerServices/{containerServiceName}';
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{containerServiceName}', encodeURIComponent(containerServiceName));
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'DELETE';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 202 && statusCode !== 204) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Gets a list of container services in the specified subscription.
 *
 * Gets a list of container services in the specified subscription. The
 * operation returns properties of each container service including state,
 * orchestrator, number of masters and agents, and FQDNs of masters and agents.
 *
 * @param {string} nextPageLink The NextLink from the previous successful call
 * to List operation.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link ContainerServiceListResult} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _listNext(nextPageLink, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {
      throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let requestUrl = '{nextLink}';
  requestUrl = requestUrl.replace('{nextLink}', nextPageLink);

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ContainerServiceListResult']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Gets a list of container services in the specified resource group.
 *
 * Gets a list of container services in the specified subscription and resource
 * group. The operation returns properties of each container service including
 * state, orchestrator, number of masters and agents, and FQDNs of masters and
 * agents.
 *
 * @param {string} nextPageLink The NextLink from the previous successful call
 * to List operation.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link ContainerServiceListResult} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _listByResourceGroupNext(nextPageLink, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {
      throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let requestUrl = '{nextLink}';
  requestUrl = requestUrl.replace('{nextLink}', nextPageLink);

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ContainerServiceListResult']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/** Class representing a ContainerServices. */
class ContainerServices {
  /**
   * Create a ContainerServices.
   * @param {ContainerServiceClient} client Reference to the service client.
   */
  constructor(client) {
    this.client = client;
    this._list = _list;
    this._createOrUpdate = _createOrUpdate;
    this._get = _get;
    this._deleteMethod = _deleteMethod;
    this._listByResourceGroup = _listByResourceGroup;
    this._listOrchestrators = _listOrchestrators;
    this._beginCreateOrUpdate = _beginCreateOrUpdate;
    this._beginDeleteMethod = _beginDeleteMethod;
    this._listNext = _listNext;
    this._listByResourceGroupNext = _listByResourceGroupNext;
  }

  /**
   * @summary Gets a list of container services in the specified subscription.
   *
   * Gets a list of container services in the specified subscription. The
   * operation returns properties of each container service including state,
   * orchestrator, number of masters and agents, and FQDNs of masters and agents.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ContainerServiceListResult>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  listWithHttpOperationResponse(options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._list(options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Gets a list of container services in the specified subscription.
   *
   * Gets a list of container services in the specified subscription. The
   * operation returns properties of each container service including state,
   * orchestrator, number of masters and agents, and FQDNs of masters and agents.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {ContainerServiceListResult} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ContainerServiceListResult} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  list(options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._list(options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._list(options, optionalCallback);
    }
  }

  /**
   * @summary Creates or updates a container service.
   *
   * Creates or updates a container service with the specified configuration of
   * orchestrator, masters, and agents.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} containerServiceName The name of the container service in
   * the specified subscription and resource group.
   *
   * @param {object} parameters Parameters supplied to the Create or Update a
   * Container Service operation.
   *
   * @param {object} parameters.orchestratorProfile Profile for the container
   * service orchestrator.
   *
   * @param {string} parameters.orchestratorProfile.orchestratorType The
   * orchestrator to use to manage container service cluster resources. Valid
   * values are Kubernetes, Swarm, DCOS, DockerCE and Custom. Possible values
   * include: 'Kubernetes', 'Swarm', 'DCOS', 'DockerCE', 'Custom'
   *
   * @param {string} [parameters.orchestratorProfile.orchestratorVersion] The
   * version of the orchestrator to use. You can specify the major.minor.patch
   * part of the actual version.For example, you can specify version as "1.6.11".
   *
   * @param {object} [parameters.customProfile] Properties to configure a custom
   * container service cluster.
   *
   * @param {string} parameters.customProfile.orchestrator The name of the custom
   * orchestrator to use.
   *
   * @param {object} [parameters.servicePrincipalProfile] Information about a
   * service principal identity for the cluster to use for manipulating Azure
   * APIs. Exact one of secret or keyVaultSecretRef need to be specified.
   *
   * @param {string} parameters.servicePrincipalProfile.clientId The ID for the
   * service principal.
   *
   * @param {string} [parameters.servicePrincipalProfile.secret] The secret
   * password associated with the service principal in plain text.
   *
   * @param {object} [parameters.servicePrincipalProfile.keyVaultSecretRef]
   * Reference to a secret stored in Azure Key Vault.
   *
   * @param {string} parameters.servicePrincipalProfile.keyVaultSecretRef.vaultID
   * Key vault identifier.
   *
   * @param {string}
   * parameters.servicePrincipalProfile.keyVaultSecretRef.secretName The secret
   * name.
   *
   * @param {string}
   * [parameters.servicePrincipalProfile.keyVaultSecretRef.version] The secret
   * version.
   *
   * @param {object} parameters.masterProfile Profile for the container service
   * master.
   *
   * @param {number} [parameters.masterProfile.count] Number of masters (VMs) in
   * the container service cluster. Allowed values are 1, 3, and 5. The default
   * value is 1.
   *
   * @param {string} parameters.masterProfile.dnsPrefix DNS prefix to be used to
   * create the FQDN for the master pool.
   *
   * @param {string} parameters.masterProfile.vmSize Size of agent VMs. Possible
   * values include: 'Standard_A1', 'Standard_A10', 'Standard_A11',
   * 'Standard_A1_v2', 'Standard_A2', 'Standard_A2_v2', 'Standard_A2m_v2',
   * 'Standard_A3', 'Standard_A4', 'Standard_A4_v2', 'Standard_A4m_v2',
   * 'Standard_A5', 'Standard_A6', 'Standard_A7', 'Standard_A8',
   * 'Standard_A8_v2', 'Standard_A8m_v2', 'Standard_A9', 'Standard_B2ms',
   * 'Standard_B2s', 'Standard_B4ms', 'Standard_B8ms', 'Standard_D1',
   * 'Standard_D11', 'Standard_D11_v2', 'Standard_D11_v2_Promo', 'Standard_D12',
   * 'Standard_D12_v2', 'Standard_D12_v2_Promo', 'Standard_D13',
   * 'Standard_D13_v2', 'Standard_D13_v2_Promo', 'Standard_D14',
   * 'Standard_D14_v2', 'Standard_D14_v2_Promo', 'Standard_D15_v2',
   * 'Standard_D16_v3', 'Standard_D16s_v3', 'Standard_D1_v2', 'Standard_D2',
   * 'Standard_D2_v2', 'Standard_D2_v2_Promo', 'Standard_D2_v3',
   * 'Standard_D2s_v3', 'Standard_D3', 'Standard_D32_v3', 'Standard_D32s_v3',
   * 'Standard_D3_v2', 'Standard_D3_v2_Promo', 'Standard_D4', 'Standard_D4_v2',
   * 'Standard_D4_v2_Promo', 'Standard_D4_v3', 'Standard_D4s_v3',
   * 'Standard_D5_v2', 'Standard_D5_v2_Promo', 'Standard_D64_v3',
   * 'Standard_D64s_v3', 'Standard_D8_v3', 'Standard_D8s_v3', 'Standard_DS1',
   * 'Standard_DS11', 'Standard_DS11_v2', 'Standard_DS11_v2_Promo',
   * 'Standard_DS12', 'Standard_DS12_v2', 'Standard_DS12_v2_Promo',
   * 'Standard_DS13', 'Standard_DS13-2_v2', 'Standard_DS13-4_v2',
   * 'Standard_DS13_v2', 'Standard_DS13_v2_Promo', 'Standard_DS14',
   * 'Standard_DS14-4_v2', 'Standard_DS14-8_v2', 'Standard_DS14_v2',
   * 'Standard_DS14_v2_Promo', 'Standard_DS15_v2', 'Standard_DS1_v2',
   * 'Standard_DS2', 'Standard_DS2_v2', 'Standard_DS2_v2_Promo', 'Standard_DS3',
   * 'Standard_DS3_v2', 'Standard_DS3_v2_Promo', 'Standard_DS4',
   * 'Standard_DS4_v2', 'Standard_DS4_v2_Promo', 'Standard_DS5_v2',
   * 'Standard_DS5_v2_Promo', 'Standard_E16_v3', 'Standard_E16s_v3',
   * 'Standard_E2_v3', 'Standard_E2s_v3', 'Standard_E32-16s_v3',
   * 'Standard_E32-8s_v3', 'Standard_E32_v3', 'Standard_E32s_v3',
   * 'Standard_E4_v3', 'Standard_E4s_v3', 'Standard_E64-16s_v3',
   * 'Standard_E64-32s_v3', 'Standard_E64_v3', 'Standard_E64s_v3',
   * 'Standard_E8_v3', 'Standard_E8s_v3', 'Standard_F1', 'Standard_F16',
   * 'Standard_F16s', 'Standard_F16s_v2', 'Standard_F1s', 'Standard_F2',
   * 'Standard_F2s', 'Standard_F2s_v2', 'Standard_F32s_v2', 'Standard_F4',
   * 'Standard_F4s', 'Standard_F4s_v2', 'Standard_F64s_v2', 'Standard_F72s_v2',
   * 'Standard_F8', 'Standard_F8s', 'Standard_F8s_v2', 'Standard_G1',
   * 'Standard_G2', 'Standard_G3', 'Standard_G4', 'Standard_G5', 'Standard_GS1',
   * 'Standard_GS2', 'Standard_GS3', 'Standard_GS4', 'Standard_GS4-4',
   * 'Standard_GS4-8', 'Standard_GS5', 'Standard_GS5-16', 'Standard_GS5-8',
   * 'Standard_H16', 'Standard_H16m', 'Standard_H16mr', 'Standard_H16r',
   * 'Standard_H8', 'Standard_H8m', 'Standard_L16s', 'Standard_L32s',
   * 'Standard_L4s', 'Standard_L8s', 'Standard_M128-32ms', 'Standard_M128-64ms',
   * 'Standard_M128ms', 'Standard_M128s', 'Standard_M64-16ms',
   * 'Standard_M64-32ms', 'Standard_M64ms', 'Standard_M64s', 'Standard_NC12',
   * 'Standard_NC12s_v2', 'Standard_NC12s_v3', 'Standard_NC24', 'Standard_NC24r',
   * 'Standard_NC24rs_v2', 'Standard_NC24rs_v3', 'Standard_NC24s_v2',
   * 'Standard_NC24s_v3', 'Standard_NC6', 'Standard_NC6s_v2', 'Standard_NC6s_v3',
   * 'Standard_ND12s', 'Standard_ND24rs', 'Standard_ND24s', 'Standard_ND6s',
   * 'Standard_NV12', 'Standard_NV24', 'Standard_NV6'
   *
   * @param {number} [parameters.masterProfile.osDiskSizeGB] OS Disk Size in GB
   * to be used to specify the disk size for every machine in this master/agent
   * pool. If you specify 0, it will apply the default osDisk size according to
   * the vmSize specified.
   *
   * @param {string} [parameters.masterProfile.vnetSubnetID] VNet SubnetID
   * specifies the VNet's subnet identifier.
   *
   * @param {string} [parameters.masterProfile.firstConsecutiveStaticIP]
   * FirstConsecutiveStaticIP used to specify the first static ip of masters.
   *
   * @param {string} [parameters.masterProfile.storageProfile] Storage profile
   * specifies what kind of storage used. Choose from StorageAccount and
   * ManagedDisks. Leave it empty, we will choose for you based on the
   * orchestrator choice. Possible values include: 'StorageAccount',
   * 'ManagedDisks'
   *
   * @param {array} [parameters.agentPoolProfiles] Properties of the agent pool.
   *
   * @param {object} [parameters.windowsProfile] Profile for Windows VMs in the
   * container service cluster.
   *
   * @param {string} parameters.windowsProfile.adminUsername The administrator
   * username to use for Windows VMs.
   *
   * @param {string} parameters.windowsProfile.adminPassword The administrator
   * password to use for Windows VMs.
   *
   * @param {object} parameters.linuxProfile Profile for Linux VMs in the
   * container service cluster.
   *
   * @param {string} parameters.linuxProfile.adminUsername The administrator
   * username to use for Linux VMs.
   *
   * @param {object} parameters.linuxProfile.ssh SSH configuration for
   * Linux-based VMs running on Azure.
   *
   * @param {array} parameters.linuxProfile.ssh.publicKeys The list of SSH public
   * keys used to authenticate with Linux-based VMs. Only expect one key
   * specified.
   *
   * @param {object} [parameters.diagnosticsProfile] Profile for diagnostics in
   * the container service cluster.
   *
   * @param {object} parameters.diagnosticsProfile.vmDiagnostics Profile for
   * diagnostics on the container service VMs.
   *
   * @param {boolean} parameters.diagnosticsProfile.vmDiagnostics.enabled Whether
   * the VM diagnostic agent is provisioned on the VM.
   *
   * @param {string} parameters.location Resource location
   *
   * @param {object} [parameters.tags] Resource tags
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ContainerService>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  createOrUpdateWithHttpOperationResponse(resourceGroupName, containerServiceName, parameters, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._createOrUpdate(resourceGroupName, containerServiceName, parameters, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Creates or updates a container service.
   *
   * Creates or updates a container service with the specified configuration of
   * orchestrator, masters, and agents.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} containerServiceName The name of the container service in
   * the specified subscription and resource group.
   *
   * @param {object} parameters Parameters supplied to the Create or Update a
   * Container Service operation.
   *
   * @param {object} parameters.orchestratorProfile Profile for the container
   * service orchestrator.
   *
   * @param {string} parameters.orchestratorProfile.orchestratorType The
   * orchestrator to use to manage container service cluster resources. Valid
   * values are Kubernetes, Swarm, DCOS, DockerCE and Custom. Possible values
   * include: 'Kubernetes', 'Swarm', 'DCOS', 'DockerCE', 'Custom'
   *
   * @param {string} [parameters.orchestratorProfile.orchestratorVersion] The
   * version of the orchestrator to use. You can specify the major.minor.patch
   * part of the actual version.For example, you can specify version as "1.6.11".
   *
   * @param {object} [parameters.customProfile] Properties to configure a custom
   * container service cluster.
   *
   * @param {string} parameters.customProfile.orchestrator The name of the custom
   * orchestrator to use.
   *
   * @param {object} [parameters.servicePrincipalProfile] Information about a
   * service principal identity for the cluster to use for manipulating Azure
   * APIs. Exact one of secret or keyVaultSecretRef need to be specified.
   *
   * @param {string} parameters.servicePrincipalProfile.clientId The ID for the
   * service principal.
   *
   * @param {string} [parameters.servicePrincipalProfile.secret] The secret
   * password associated with the service principal in plain text.
   *
   * @param {object} [parameters.servicePrincipalProfile.keyVaultSecretRef]
   * Reference to a secret stored in Azure Key Vault.
   *
   * @param {string} parameters.servicePrincipalProfile.keyVaultSecretRef.vaultID
   * Key vault identifier.
   *
   * @param {string}
   * parameters.servicePrincipalProfile.keyVaultSecretRef.secretName The secret
   * name.
   *
   * @param {string}
   * [parameters.servicePrincipalProfile.keyVaultSecretRef.version] The secret
   * version.
   *
   * @param {object} parameters.masterProfile Profile for the container service
   * master.
   *
   * @param {number} [parameters.masterProfile.count] Number of masters (VMs) in
   * the container service cluster. Allowed values are 1, 3, and 5. The default
   * value is 1.
   *
   * @param {string} parameters.masterProfile.dnsPrefix DNS prefix to be used to
   * create the FQDN for the master pool.
   *
   * @param {string} parameters.masterProfile.vmSize Size of agent VMs. Possible
   * values include: 'Standard_A1', 'Standard_A10', 'Standard_A11',
   * 'Standard_A1_v2', 'Standard_A2', 'Standard_A2_v2', 'Standard_A2m_v2',
   * 'Standard_A3', 'Standard_A4', 'Standard_A4_v2', 'Standard_A4m_v2',
   * 'Standard_A5', 'Standard_A6', 'Standard_A7', 'Standard_A8',
   * 'Standard_A8_v2', 'Standard_A8m_v2', 'Standard_A9', 'Standard_B2ms',
   * 'Standard_B2s', 'Standard_B4ms', 'Standard_B8ms', 'Standard_D1',
   * 'Standard_D11', 'Standard_D11_v2', 'Standard_D11_v2_Promo', 'Standard_D12',
   * 'Standard_D12_v2', 'Standard_D12_v2_Promo', 'Standard_D13',
   * 'Standard_D13_v2', 'Standard_D13_v2_Promo', 'Standard_D14',
   * 'Standard_D14_v2', 'Standard_D14_v2_Promo', 'Standard_D15_v2',
   * 'Standard_D16_v3', 'Standard_D16s_v3', 'Standard_D1_v2', 'Standard_D2',
   * 'Standard_D2_v2', 'Standard_D2_v2_Promo', 'Standard_D2_v3',
   * 'Standard_D2s_v3', 'Standard_D3', 'Standard_D32_v3', 'Standard_D32s_v3',
   * 'Standard_D3_v2', 'Standard_D3_v2_Promo', 'Standard_D4', 'Standard_D4_v2',
   * 'Standard_D4_v2_Promo', 'Standard_D4_v3', 'Standard_D4s_v3',
   * 'Standard_D5_v2', 'Standard_D5_v2_Promo', 'Standard_D64_v3',
   * 'Standard_D64s_v3', 'Standard_D8_v3', 'Standard_D8s_v3', 'Standard_DS1',
   * 'Standard_DS11', 'Standard_DS11_v2', 'Standard_DS11_v2_Promo',
   * 'Standard_DS12', 'Standard_DS12_v2', 'Standard_DS12_v2_Promo',
   * 'Standard_DS13', 'Standard_DS13-2_v2', 'Standard_DS13-4_v2',
   * 'Standard_DS13_v2', 'Standard_DS13_v2_Promo', 'Standard_DS14',
   * 'Standard_DS14-4_v2', 'Standard_DS14-8_v2', 'Standard_DS14_v2',
   * 'Standard_DS14_v2_Promo', 'Standard_DS15_v2', 'Standard_DS1_v2',
   * 'Standard_DS2', 'Standard_DS2_v2', 'Standard_DS2_v2_Promo', 'Standard_DS3',
   * 'Standard_DS3_v2', 'Standard_DS3_v2_Promo', 'Standard_DS4',
   * 'Standard_DS4_v2', 'Standard_DS4_v2_Promo', 'Standard_DS5_v2',
   * 'Standard_DS5_v2_Promo', 'Standard_E16_v3', 'Standard_E16s_v3',
   * 'Standard_E2_v3', 'Standard_E2s_v3', 'Standard_E32-16s_v3',
   * 'Standard_E32-8s_v3', 'Standard_E32_v3', 'Standard_E32s_v3',
   * 'Standard_E4_v3', 'Standard_E4s_v3', 'Standard_E64-16s_v3',
   * 'Standard_E64-32s_v3', 'Standard_E64_v3', 'Standard_E64s_v3',
   * 'Standard_E8_v3', 'Standard_E8s_v3', 'Standard_F1', 'Standard_F16',
   * 'Standard_F16s', 'Standard_F16s_v2', 'Standard_F1s', 'Standard_F2',
   * 'Standard_F2s', 'Standard_F2s_v2', 'Standard_F32s_v2', 'Standard_F4',
   * 'Standard_F4s', 'Standard_F4s_v2', 'Standard_F64s_v2', 'Standard_F72s_v2',
   * 'Standard_F8', 'Standard_F8s', 'Standard_F8s_v2', 'Standard_G1',
   * 'Standard_G2', 'Standard_G3', 'Standard_G4', 'Standard_G5', 'Standard_GS1',
   * 'Standard_GS2', 'Standard_GS3', 'Standard_GS4', 'Standard_GS4-4',
   * 'Standard_GS4-8', 'Standard_GS5', 'Standard_GS5-16', 'Standard_GS5-8',
   * 'Standard_H16', 'Standard_H16m', 'Standard_H16mr', 'Standard_H16r',
   * 'Standard_H8', 'Standard_H8m', 'Standard_L16s', 'Standard_L32s',
   * 'Standard_L4s', 'Standard_L8s', 'Standard_M128-32ms', 'Standard_M128-64ms',
   * 'Standard_M128ms', 'Standard_M128s', 'Standard_M64-16ms',
   * 'Standard_M64-32ms', 'Standard_M64ms', 'Standard_M64s', 'Standard_NC12',
   * 'Standard_NC12s_v2', 'Standard_NC12s_v3', 'Standard_NC24', 'Standard_NC24r',
   * 'Standard_NC24rs_v2', 'Standard_NC24rs_v3', 'Standard_NC24s_v2',
   * 'Standard_NC24s_v3', 'Standard_NC6', 'Standard_NC6s_v2', 'Standard_NC6s_v3',
   * 'Standard_ND12s', 'Standard_ND24rs', 'Standard_ND24s', 'Standard_ND6s',
   * 'Standard_NV12', 'Standard_NV24', 'Standard_NV6'
   *
   * @param {number} [parameters.masterProfile.osDiskSizeGB] OS Disk Size in GB
   * to be used to specify the disk size for every machine in this master/agent
   * pool. If you specify 0, it will apply the default osDisk size according to
   * the vmSize specified.
   *
   * @param {string} [parameters.masterProfile.vnetSubnetID] VNet SubnetID
   * specifies the VNet's subnet identifier.
   *
   * @param {string} [parameters.masterProfile.firstConsecutiveStaticIP]
   * FirstConsecutiveStaticIP used to specify the first static ip of masters.
   *
   * @param {string} [parameters.masterProfile.storageProfile] Storage profile
   * specifies what kind of storage used. Choose from StorageAccount and
   * ManagedDisks. Leave it empty, we will choose for you based on the
   * orchestrator choice. Possible values include: 'StorageAccount',
   * 'ManagedDisks'
   *
   * @param {array} [parameters.agentPoolProfiles] Properties of the agent pool.
   *
   * @param {object} [parameters.windowsProfile] Profile for Windows VMs in the
   * container service cluster.
   *
   * @param {string} parameters.windowsProfile.adminUsername The administrator
   * username to use for Windows VMs.
   *
   * @param {string} parameters.windowsProfile.adminPassword The administrator
   * password to use for Windows VMs.
   *
   * @param {object} parameters.linuxProfile Profile for Linux VMs in the
   * container service cluster.
   *
   * @param {string} parameters.linuxProfile.adminUsername The administrator
   * username to use for Linux VMs.
   *
   * @param {object} parameters.linuxProfile.ssh SSH configuration for
   * Linux-based VMs running on Azure.
   *
   * @param {array} parameters.linuxProfile.ssh.publicKeys The list of SSH public
   * keys used to authenticate with Linux-based VMs. Only expect one key
   * specified.
   *
   * @param {object} [parameters.diagnosticsProfile] Profile for diagnostics in
   * the container service cluster.
   *
   * @param {object} parameters.diagnosticsProfile.vmDiagnostics Profile for
   * diagnostics on the container service VMs.
   *
   * @param {boolean} parameters.diagnosticsProfile.vmDiagnostics.enabled Whether
   * the VM diagnostic agent is provisioned on the VM.
   *
   * @param {string} parameters.location Resource location
   *
   * @param {object} [parameters.tags] Resource tags
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {ContainerService} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ContainerService} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  createOrUpdate(resourceGroupName, containerServiceName, parameters, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._createOrUpdate(resourceGroupName, containerServiceName, parameters, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._createOrUpdate(resourceGroupName, containerServiceName, parameters, options, optionalCallback);
    }
  }

  /**
   * @summary Gets the properties of the specified container service.
   *
   * Gets the properties of the specified container service in the specified
   * subscription and resource group. The operation returns the properties
   * including state, orchestrator, number of masters and agents, and FQDNs of
   * masters and agents.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} containerServiceName The name of the container service in
   * the specified subscription and resource group.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ContainerService>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getWithHttpOperationResponse(resourceGroupName, containerServiceName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._get(resourceGroupName, containerServiceName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Gets the properties of the specified container service.
   *
   * Gets the properties of the specified container service in the specified
   * subscription and resource group. The operation returns the properties
   * including state, orchestrator, number of masters and agents, and FQDNs of
   * masters and agents.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} containerServiceName The name of the container service in
   * the specified subscription and resource group.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {ContainerService} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ContainerService} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  get(resourceGroupName, containerServiceName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._get(resourceGroupName, containerServiceName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._get(resourceGroupName, containerServiceName, options, optionalCallback);
    }
  }

  /**
   * @summary Deletes the specified container service.
   *
   * Deletes the specified container service in the specified subscription and
   * resource group. The operation does not delete other resources created as
   * part of creating a container service, including storage accounts, VMs, and
   * availability sets. All the other resources created with the container
   * service are part of the same resource group and can be deleted individually.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} containerServiceName The name of the container service in
   * the specified subscription and resource group.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  deleteMethodWithHttpOperationResponse(resourceGroupName, containerServiceName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._deleteMethod(resourceGroupName, containerServiceName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Deletes the specified container service.
   *
   * Deletes the specified container service in the specified subscription and
   * resource group. The operation does not delete other resources created as
   * part of creating a container service, including storage accounts, VMs, and
   * availability sets. All the other resources created with the container
   * service are part of the same resource group and can be deleted individually.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} containerServiceName The name of the container service in
   * the specified subscription and resource group.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteMethod(resourceGroupName, containerServiceName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._deleteMethod(resourceGroupName, containerServiceName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._deleteMethod(resourceGroupName, containerServiceName, options, optionalCallback);
    }
  }

  /**
   * @summary Gets a list of container services in the specified resource group.
   *
   * Gets a list of container services in the specified subscription and resource
   * group. The operation returns properties of each container service including
   * state, orchestrator, number of masters and agents, and FQDNs of masters and
   * agents.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ContainerServiceListResult>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  listByResourceGroupWithHttpOperationResponse(resourceGroupName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._listByResourceGroup(resourceGroupName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Gets a list of container services in the specified resource group.
   *
   * Gets a list of container services in the specified subscription and resource
   * group. The operation returns properties of each container service including
   * state, orchestrator, number of masters and agents, and FQDNs of masters and
   * agents.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {ContainerServiceListResult} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ContainerServiceListResult} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  listByResourceGroup(resourceGroupName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._listByResourceGroup(resourceGroupName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._listByResourceGroup(resourceGroupName, options, optionalCallback);
    }
  }

  /**
   * @summary Gets a list of supported orchestrators in the specified
   * subscription.
   *
   * Gets a list of supported orchestrators in the specified subscription. The
   * operation returns properties of each orchestrator including version and
   * available upgrades.
   *
   * @param {string} location The name of a supported Azure region.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.resourceType] resource type for which the list of
   * orchestrators needs to be returned
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<OrchestratorVersionProfileListResult>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  listOrchestratorsWithHttpOperationResponse(location, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._listOrchestrators(location, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Gets a list of supported orchestrators in the specified
   * subscription.
   *
   * Gets a list of supported orchestrators in the specified subscription. The
   * operation returns properties of each orchestrator including version and
   * available upgrades.
   *
   * @param {string} location The name of a supported Azure region.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.resourceType] resource type for which the list of
   * orchestrators needs to be returned
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {OrchestratorVersionProfileListResult} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link OrchestratorVersionProfileListResult} for
   *                      more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  listOrchestrators(location, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._listOrchestrators(location, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._listOrchestrators(location, options, optionalCallback);
    }
  }

  /**
   * @summary Creates or updates a container service.
   *
   * Creates or updates a container service with the specified configuration of
   * orchestrator, masters, and agents.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} containerServiceName The name of the container service in
   * the specified subscription and resource group.
   *
   * @param {object} parameters Parameters supplied to the Create or Update a
   * Container Service operation.
   *
   * @param {object} parameters.orchestratorProfile Profile for the container
   * service orchestrator.
   *
   * @param {string} parameters.orchestratorProfile.orchestratorType The
   * orchestrator to use to manage container service cluster resources. Valid
   * values are Kubernetes, Swarm, DCOS, DockerCE and Custom. Possible values
   * include: 'Kubernetes', 'Swarm', 'DCOS', 'DockerCE', 'Custom'
   *
   * @param {string} [parameters.orchestratorProfile.orchestratorVersion] The
   * version of the orchestrator to use. You can specify the major.minor.patch
   * part of the actual version.For example, you can specify version as "1.6.11".
   *
   * @param {object} [parameters.customProfile] Properties to configure a custom
   * container service cluster.
   *
   * @param {string} parameters.customProfile.orchestrator The name of the custom
   * orchestrator to use.
   *
   * @param {object} [parameters.servicePrincipalProfile] Information about a
   * service principal identity for the cluster to use for manipulating Azure
   * APIs. Exact one of secret or keyVaultSecretRef need to be specified.
   *
   * @param {string} parameters.servicePrincipalProfile.clientId The ID for the
   * service principal.
   *
   * @param {string} [parameters.servicePrincipalProfile.secret] The secret
   * password associated with the service principal in plain text.
   *
   * @param {object} [parameters.servicePrincipalProfile.keyVaultSecretRef]
   * Reference to a secret stored in Azure Key Vault.
   *
   * @param {string} parameters.servicePrincipalProfile.keyVaultSecretRef.vaultID
   * Key vault identifier.
   *
   * @param {string}
   * parameters.servicePrincipalProfile.keyVaultSecretRef.secretName The secret
   * name.
   *
   * @param {string}
   * [parameters.servicePrincipalProfile.keyVaultSecretRef.version] The secret
   * version.
   *
   * @param {object} parameters.masterProfile Profile for the container service
   * master.
   *
   * @param {number} [parameters.masterProfile.count] Number of masters (VMs) in
   * the container service cluster. Allowed values are 1, 3, and 5. The default
   * value is 1.
   *
   * @param {string} parameters.masterProfile.dnsPrefix DNS prefix to be used to
   * create the FQDN for the master pool.
   *
   * @param {string} parameters.masterProfile.vmSize Size of agent VMs. Possible
   * values include: 'Standard_A1', 'Standard_A10', 'Standard_A11',
   * 'Standard_A1_v2', 'Standard_A2', 'Standard_A2_v2', 'Standard_A2m_v2',
   * 'Standard_A3', 'Standard_A4', 'Standard_A4_v2', 'Standard_A4m_v2',
   * 'Standard_A5', 'Standard_A6', 'Standard_A7', 'Standard_A8',
   * 'Standard_A8_v2', 'Standard_A8m_v2', 'Standard_A9', 'Standard_B2ms',
   * 'Standard_B2s', 'Standard_B4ms', 'Standard_B8ms', 'Standard_D1',
   * 'Standard_D11', 'Standard_D11_v2', 'Standard_D11_v2_Promo', 'Standard_D12',
   * 'Standard_D12_v2', 'Standard_D12_v2_Promo', 'Standard_D13',
   * 'Standard_D13_v2', 'Standard_D13_v2_Promo', 'Standard_D14',
   * 'Standard_D14_v2', 'Standard_D14_v2_Promo', 'Standard_D15_v2',
   * 'Standard_D16_v3', 'Standard_D16s_v3', 'Standard_D1_v2', 'Standard_D2',
   * 'Standard_D2_v2', 'Standard_D2_v2_Promo', 'Standard_D2_v3',
   * 'Standard_D2s_v3', 'Standard_D3', 'Standard_D32_v3', 'Standard_D32s_v3',
   * 'Standard_D3_v2', 'Standard_D3_v2_Promo', 'Standard_D4', 'Standard_D4_v2',
   * 'Standard_D4_v2_Promo', 'Standard_D4_v3', 'Standard_D4s_v3',
   * 'Standard_D5_v2', 'Standard_D5_v2_Promo', 'Standard_D64_v3',
   * 'Standard_D64s_v3', 'Standard_D8_v3', 'Standard_D8s_v3', 'Standard_DS1',
   * 'Standard_DS11', 'Standard_DS11_v2', 'Standard_DS11_v2_Promo',
   * 'Standard_DS12', 'Standard_DS12_v2', 'Standard_DS12_v2_Promo',
   * 'Standard_DS13', 'Standard_DS13-2_v2', 'Standard_DS13-4_v2',
   * 'Standard_DS13_v2', 'Standard_DS13_v2_Promo', 'Standard_DS14',
   * 'Standard_DS14-4_v2', 'Standard_DS14-8_v2', 'Standard_DS14_v2',
   * 'Standard_DS14_v2_Promo', 'Standard_DS15_v2', 'Standard_DS1_v2',
   * 'Standard_DS2', 'Standard_DS2_v2', 'Standard_DS2_v2_Promo', 'Standard_DS3',
   * 'Standard_DS3_v2', 'Standard_DS3_v2_Promo', 'Standard_DS4',
   * 'Standard_DS4_v2', 'Standard_DS4_v2_Promo', 'Standard_DS5_v2',
   * 'Standard_DS5_v2_Promo', 'Standard_E16_v3', 'Standard_E16s_v3',
   * 'Standard_E2_v3', 'Standard_E2s_v3', 'Standard_E32-16s_v3',
   * 'Standard_E32-8s_v3', 'Standard_E32_v3', 'Standard_E32s_v3',
   * 'Standard_E4_v3', 'Standard_E4s_v3', 'Standard_E64-16s_v3',
   * 'Standard_E64-32s_v3', 'Standard_E64_v3', 'Standard_E64s_v3',
   * 'Standard_E8_v3', 'Standard_E8s_v3', 'Standard_F1', 'Standard_F16',
   * 'Standard_F16s', 'Standard_F16s_v2', 'Standard_F1s', 'Standard_F2',
   * 'Standard_F2s', 'Standard_F2s_v2', 'Standard_F32s_v2', 'Standard_F4',
   * 'Standard_F4s', 'Standard_F4s_v2', 'Standard_F64s_v2', 'Standard_F72s_v2',
   * 'Standard_F8', 'Standard_F8s', 'Standard_F8s_v2', 'Standard_G1',
   * 'Standard_G2', 'Standard_G3', 'Standard_G4', 'Standard_G5', 'Standard_GS1',
   * 'Standard_GS2', 'Standard_GS3', 'Standard_GS4', 'Standard_GS4-4',
   * 'Standard_GS4-8', 'Standard_GS5', 'Standard_GS5-16', 'Standard_GS5-8',
   * 'Standard_H16', 'Standard_H16m', 'Standard_H16mr', 'Standard_H16r',
   * 'Standard_H8', 'Standard_H8m', 'Standard_L16s', 'Standard_L32s',
   * 'Standard_L4s', 'Standard_L8s', 'Standard_M128-32ms', 'Standard_M128-64ms',
   * 'Standard_M128ms', 'Standard_M128s', 'Standard_M64-16ms',
   * 'Standard_M64-32ms', 'Standard_M64ms', 'Standard_M64s', 'Standard_NC12',
   * 'Standard_NC12s_v2', 'Standard_NC12s_v3', 'Standard_NC24', 'Standard_NC24r',
   * 'Standard_NC24rs_v2', 'Standard_NC24rs_v3', 'Standard_NC24s_v2',
   * 'Standard_NC24s_v3', 'Standard_NC6', 'Standard_NC6s_v2', 'Standard_NC6s_v3',
   * 'Standard_ND12s', 'Standard_ND24rs', 'Standard_ND24s', 'Standard_ND6s',
   * 'Standard_NV12', 'Standard_NV24', 'Standard_NV6'
   *
   * @param {number} [parameters.masterProfile.osDiskSizeGB] OS Disk Size in GB
   * to be used to specify the disk size for every machine in this master/agent
   * pool. If you specify 0, it will apply the default osDisk size according to
   * the vmSize specified.
   *
   * @param {string} [parameters.masterProfile.vnetSubnetID] VNet SubnetID
   * specifies the VNet's subnet identifier.
   *
   * @param {string} [parameters.masterProfile.firstConsecutiveStaticIP]
   * FirstConsecutiveStaticIP used to specify the first static ip of masters.
   *
   * @param {string} [parameters.masterProfile.storageProfile] Storage profile
   * specifies what kind of storage used. Choose from StorageAccount and
   * ManagedDisks. Leave it empty, we will choose for you based on the
   * orchestrator choice. Possible values include: 'StorageAccount',
   * 'ManagedDisks'
   *
   * @param {array} [parameters.agentPoolProfiles] Properties of the agent pool.
   *
   * @param {object} [parameters.windowsProfile] Profile for Windows VMs in the
   * container service cluster.
   *
   * @param {string} parameters.windowsProfile.adminUsername The administrator
   * username to use for Windows VMs.
   *
   * @param {string} parameters.windowsProfile.adminPassword The administrator
   * password to use for Windows VMs.
   *
   * @param {object} parameters.linuxProfile Profile for Linux VMs in the
   * container service cluster.
   *
   * @param {string} parameters.linuxProfile.adminUsername The administrator
   * username to use for Linux VMs.
   *
   * @param {object} parameters.linuxProfile.ssh SSH configuration for
   * Linux-based VMs running on Azure.
   *
   * @param {array} parameters.linuxProfile.ssh.publicKeys The list of SSH public
   * keys used to authenticate with Linux-based VMs. Only expect one key
   * specified.
   *
   * @param {object} [parameters.diagnosticsProfile] Profile for diagnostics in
   * the container service cluster.
   *
   * @param {object} parameters.diagnosticsProfile.vmDiagnostics Profile for
   * diagnostics on the container service VMs.
   *
   * @param {boolean} parameters.diagnosticsProfile.vmDiagnostics.enabled Whether
   * the VM diagnostic agent is provisioned on the VM.
   *
   * @param {string} parameters.location Resource location
   *
   * @param {object} [parameters.tags] Resource tags
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ContainerService>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName, containerServiceName, parameters, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._beginCreateOrUpdate(resourceGroupName, containerServiceName, parameters, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Creates or updates a container service.
   *
   * Creates or updates a container service with the specified configuration of
   * orchestrator, masters, and agents.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} containerServiceName The name of the container service in
   * the specified subscription and resource group.
   *
   * @param {object} parameters Parameters supplied to the Create or Update a
   * Container Service operation.
   *
   * @param {object} parameters.orchestratorProfile Profile for the container
   * service orchestrator.
   *
   * @param {string} parameters.orchestratorProfile.orchestratorType The
   * orchestrator to use to manage container service cluster resources. Valid
   * values are Kubernetes, Swarm, DCOS, DockerCE and Custom. Possible values
   * include: 'Kubernetes', 'Swarm', 'DCOS', 'DockerCE', 'Custom'
   *
   * @param {string} [parameters.orchestratorProfile.orchestratorVersion] The
   * version of the orchestrator to use. You can specify the major.minor.patch
   * part of the actual version.For example, you can specify version as "1.6.11".
   *
   * @param {object} [parameters.customProfile] Properties to configure a custom
   * container service cluster.
   *
   * @param {string} parameters.customProfile.orchestrator The name of the custom
   * orchestrator to use.
   *
   * @param {object} [parameters.servicePrincipalProfile] Information about a
   * service principal identity for the cluster to use for manipulating Azure
   * APIs. Exact one of secret or keyVaultSecretRef need to be specified.
   *
   * @param {string} parameters.servicePrincipalProfile.clientId The ID for the
   * service principal.
   *
   * @param {string} [parameters.servicePrincipalProfile.secret] The secret
   * password associated with the service principal in plain text.
   *
   * @param {object} [parameters.servicePrincipalProfile.keyVaultSecretRef]
   * Reference to a secret stored in Azure Key Vault.
   *
   * @param {string} parameters.servicePrincipalProfile.keyVaultSecretRef.vaultID
   * Key vault identifier.
   *
   * @param {string}
   * parameters.servicePrincipalProfile.keyVaultSecretRef.secretName The secret
   * name.
   *
   * @param {string}
   * [parameters.servicePrincipalProfile.keyVaultSecretRef.version] The secret
   * version.
   *
   * @param {object} parameters.masterProfile Profile for the container service
   * master.
   *
   * @param {number} [parameters.masterProfile.count] Number of masters (VMs) in
   * the container service cluster. Allowed values are 1, 3, and 5. The default
   * value is 1.
   *
   * @param {string} parameters.masterProfile.dnsPrefix DNS prefix to be used to
   * create the FQDN for the master pool.
   *
   * @param {string} parameters.masterProfile.vmSize Size of agent VMs. Possible
   * values include: 'Standard_A1', 'Standard_A10', 'Standard_A11',
   * 'Standard_A1_v2', 'Standard_A2', 'Standard_A2_v2', 'Standard_A2m_v2',
   * 'Standard_A3', 'Standard_A4', 'Standard_A4_v2', 'Standard_A4m_v2',
   * 'Standard_A5', 'Standard_A6', 'Standard_A7', 'Standard_A8',
   * 'Standard_A8_v2', 'Standard_A8m_v2', 'Standard_A9', 'Standard_B2ms',
   * 'Standard_B2s', 'Standard_B4ms', 'Standard_B8ms', 'Standard_D1',
   * 'Standard_D11', 'Standard_D11_v2', 'Standard_D11_v2_Promo', 'Standard_D12',
   * 'Standard_D12_v2', 'Standard_D12_v2_Promo', 'Standard_D13',
   * 'Standard_D13_v2', 'Standard_D13_v2_Promo', 'Standard_D14',
   * 'Standard_D14_v2', 'Standard_D14_v2_Promo', 'Standard_D15_v2',
   * 'Standard_D16_v3', 'Standard_D16s_v3', 'Standard_D1_v2', 'Standard_D2',
   * 'Standard_D2_v2', 'Standard_D2_v2_Promo', 'Standard_D2_v3',
   * 'Standard_D2s_v3', 'Standard_D3', 'Standard_D32_v3', 'Standard_D32s_v3',
   * 'Standard_D3_v2', 'Standard_D3_v2_Promo', 'Standard_D4', 'Standard_D4_v2',
   * 'Standard_D4_v2_Promo', 'Standard_D4_v3', 'Standard_D4s_v3',
   * 'Standard_D5_v2', 'Standard_D5_v2_Promo', 'Standard_D64_v3',
   * 'Standard_D64s_v3', 'Standard_D8_v3', 'Standard_D8s_v3', 'Standard_DS1',
   * 'Standard_DS11', 'Standard_DS11_v2', 'Standard_DS11_v2_Promo',
   * 'Standard_DS12', 'Standard_DS12_v2', 'Standard_DS12_v2_Promo',
   * 'Standard_DS13', 'Standard_DS13-2_v2', 'Standard_DS13-4_v2',
   * 'Standard_DS13_v2', 'Standard_DS13_v2_Promo', 'Standard_DS14',
   * 'Standard_DS14-4_v2', 'Standard_DS14-8_v2', 'Standard_DS14_v2',
   * 'Standard_DS14_v2_Promo', 'Standard_DS15_v2', 'Standard_DS1_v2',
   * 'Standard_DS2', 'Standard_DS2_v2', 'Standard_DS2_v2_Promo', 'Standard_DS3',
   * 'Standard_DS3_v2', 'Standard_DS3_v2_Promo', 'Standard_DS4',
   * 'Standard_DS4_v2', 'Standard_DS4_v2_Promo', 'Standard_DS5_v2',
   * 'Standard_DS5_v2_Promo', 'Standard_E16_v3', 'Standard_E16s_v3',
   * 'Standard_E2_v3', 'Standard_E2s_v3', 'Standard_E32-16s_v3',
   * 'Standard_E32-8s_v3', 'Standard_E32_v3', 'Standard_E32s_v3',
   * 'Standard_E4_v3', 'Standard_E4s_v3', 'Standard_E64-16s_v3',
   * 'Standard_E64-32s_v3', 'Standard_E64_v3', 'Standard_E64s_v3',
   * 'Standard_E8_v3', 'Standard_E8s_v3', 'Standard_F1', 'Standard_F16',
   * 'Standard_F16s', 'Standard_F16s_v2', 'Standard_F1s', 'Standard_F2',
   * 'Standard_F2s', 'Standard_F2s_v2', 'Standard_F32s_v2', 'Standard_F4',
   * 'Standard_F4s', 'Standard_F4s_v2', 'Standard_F64s_v2', 'Standard_F72s_v2',
   * 'Standard_F8', 'Standard_F8s', 'Standard_F8s_v2', 'Standard_G1',
   * 'Standard_G2', 'Standard_G3', 'Standard_G4', 'Standard_G5', 'Standard_GS1',
   * 'Standard_GS2', 'Standard_GS3', 'Standard_GS4', 'Standard_GS4-4',
   * 'Standard_GS4-8', 'Standard_GS5', 'Standard_GS5-16', 'Standard_GS5-8',
   * 'Standard_H16', 'Standard_H16m', 'Standard_H16mr', 'Standard_H16r',
   * 'Standard_H8', 'Standard_H8m', 'Standard_L16s', 'Standard_L32s',
   * 'Standard_L4s', 'Standard_L8s', 'Standard_M128-32ms', 'Standard_M128-64ms',
   * 'Standard_M128ms', 'Standard_M128s', 'Standard_M64-16ms',
   * 'Standard_M64-32ms', 'Standard_M64ms', 'Standard_M64s', 'Standard_NC12',
   * 'Standard_NC12s_v2', 'Standard_NC12s_v3', 'Standard_NC24', 'Standard_NC24r',
   * 'Standard_NC24rs_v2', 'Standard_NC24rs_v3', 'Standard_NC24s_v2',
   * 'Standard_NC24s_v3', 'Standard_NC6', 'Standard_NC6s_v2', 'Standard_NC6s_v3',
   * 'Standard_ND12s', 'Standard_ND24rs', 'Standard_ND24s', 'Standard_ND6s',
   * 'Standard_NV12', 'Standard_NV24', 'Standard_NV6'
   *
   * @param {number} [parameters.masterProfile.osDiskSizeGB] OS Disk Size in GB
   * to be used to specify the disk size for every machine in this master/agent
   * pool. If you specify 0, it will apply the default osDisk size according to
   * the vmSize specified.
   *
   * @param {string} [parameters.masterProfile.vnetSubnetID] VNet SubnetID
   * specifies the VNet's subnet identifier.
   *
   * @param {string} [parameters.masterProfile.firstConsecutiveStaticIP]
   * FirstConsecutiveStaticIP used to specify the first static ip of masters.
   *
   * @param {string} [parameters.masterProfile.storageProfile] Storage profile
   * specifies what kind of storage used. Choose from StorageAccount and
   * ManagedDisks. Leave it empty, we will choose for you based on the
   * orchestrator choice. Possible values include: 'StorageAccount',
   * 'ManagedDisks'
   *
   * @param {array} [parameters.agentPoolProfiles] Properties of the agent pool.
   *
   * @param {object} [parameters.windowsProfile] Profile for Windows VMs in the
   * container service cluster.
   *
   * @param {string} parameters.windowsProfile.adminUsername The administrator
   * username to use for Windows VMs.
   *
   * @param {string} parameters.windowsProfile.adminPassword The administrator
   * password to use for Windows VMs.
   *
   * @param {object} parameters.linuxProfile Profile for Linux VMs in the
   * container service cluster.
   *
   * @param {string} parameters.linuxProfile.adminUsername The administrator
   * username to use for Linux VMs.
   *
   * @param {object} parameters.linuxProfile.ssh SSH configuration for
   * Linux-based VMs running on Azure.
   *
   * @param {array} parameters.linuxProfile.ssh.publicKeys The list of SSH public
   * keys used to authenticate with Linux-based VMs. Only expect one key
   * specified.
   *
   * @param {object} [parameters.diagnosticsProfile] Profile for diagnostics in
   * the container service cluster.
   *
   * @param {object} parameters.diagnosticsProfile.vmDiagnostics Profile for
   * diagnostics on the container service VMs.
   *
   * @param {boolean} parameters.diagnosticsProfile.vmDiagnostics.enabled Whether
   * the VM diagnostic agent is provisioned on the VM.
   *
   * @param {string} parameters.location Resource location
   *
   * @param {object} [parameters.tags] Resource tags
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {ContainerService} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ContainerService} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  beginCreateOrUpdate(resourceGroupName, containerServiceName, parameters, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._beginCreateOrUpdate(resourceGroupName, containerServiceName, parameters, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._beginCreateOrUpdate(resourceGroupName, containerServiceName, parameters, options, optionalCallback);
    }
  }

  /**
   * @summary Deletes the specified container service.
   *
   * Deletes the specified container service in the specified subscription and
   * resource group. The operation does not delete other resources created as
   * part of creating a container service, including storage accounts, VMs, and
   * availability sets. All the other resources created with the container
   * service are part of the same resource group and can be deleted individually.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} containerServiceName The name of the container service in
   * the specified subscription and resource group.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  beginDeleteMethodWithHttpOperationResponse(resourceGroupName, containerServiceName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._beginDeleteMethod(resourceGroupName, containerServiceName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Deletes the specified container service.
   *
   * Deletes the specified container service in the specified subscription and
   * resource group. The operation does not delete other resources created as
   * part of creating a container service, including storage accounts, VMs, and
   * availability sets. All the other resources created with the container
   * service are part of the same resource group and can be deleted individually.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} containerServiceName The name of the container service in
   * the specified subscription and resource group.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  beginDeleteMethod(resourceGroupName, containerServiceName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._beginDeleteMethod(resourceGroupName, containerServiceName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._beginDeleteMethod(resourceGroupName, containerServiceName, options, optionalCallback);
    }
  }

  /**
   * @summary Gets a list of container services in the specified subscription.
   *
   * Gets a list of container services in the specified subscription. The
   * operation returns properties of each container service including state,
   * orchestrator, number of masters and agents, and FQDNs of masters and agents.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ContainerServiceListResult>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  listNextWithHttpOperationResponse(nextPageLink, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._listNext(nextPageLink, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Gets a list of container services in the specified subscription.
   *
   * Gets a list of container services in the specified subscription. The
   * operation returns properties of each container service including state,
   * orchestrator, number of masters and agents, and FQDNs of masters and agents.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {ContainerServiceListResult} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ContainerServiceListResult} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  listNext(nextPageLink, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._listNext(nextPageLink, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._listNext(nextPageLink, options, optionalCallback);
    }
  }

  /**
   * @summary Gets a list of container services in the specified resource group.
   *
   * Gets a list of container services in the specified subscription and resource
   * group. The operation returns properties of each container service including
   * state, orchestrator, number of masters and agents, and FQDNs of masters and
   * agents.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ContainerServiceListResult>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  listByResourceGroupNextWithHttpOperationResponse(nextPageLink, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._listByResourceGroupNext(nextPageLink, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Gets a list of container services in the specified resource group.
   *
   * Gets a list of container services in the specified subscription and resource
   * group. The operation returns properties of each container service including
   * state, orchestrator, number of masters and agents, and FQDNs of masters and
   * agents.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {ContainerServiceListResult} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ContainerServiceListResult} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  listByResourceGroupNext(nextPageLink, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._listByResourceGroupNext(nextPageLink, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._listByResourceGroupNext(nextPageLink, options, optionalCallback);
    }
  }

}

module.exports = ContainerServices;
