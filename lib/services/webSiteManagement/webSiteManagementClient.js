/* jshint latedef:false */

// Warning: Autogenerated code.  Do not modify by hand.

var xml = require('xml2js');
var request = require('request');
var js2xml = require('../../util/js2xml');

/**
 * The Windows Azure Web Sites management API provides a RESTful set of web
 * services that interact with Windows Azure Web Sites service to manage your
 * web sites. The API has entities that capture the relationship between an
 * end user and the Windows Azure Web Sites service.  (see
 * http://msdn.microsoft.com/en-us/library/windowsazure/dn166981.aspx for more
 * information)
 */
var WebSiteManagementClient = (function() {
  /**
   * Initializes a new instance of the WebSiteManagementClient class.
   *
   * @constructor
   *
   * @param {SubscriptionCloudCredentials} credentials - When you create a
   * Windows Azure subscription, it is uniquely identified by a subscription
   * ID. The subscription ID forms part of the URI for every call that you
   * make to the Service Management API.  The Windows Azure Service
   * ManagementAPI use mutual authentication of management certificates over
   * SSL to ensure that a request made to the service is secure.  No anonymous
   * requests are allowed.
   *
   * @param {String} baseUri - The URI used as the base for all Service
   * Management requests.
   */
  function WebSiteManagementClient(credentials, baseUri) {
    if (credentials === null || credentials === undefined) {
      throw new Error('credentials cannot be null.');
    }
    this.credentials = credentials;
    this.baseUri = baseUri;
    if (this.baseUri === null || this.baseUri === undefined) {
      this.baseUri = 'https://management.core.windows.net';
    }
    this.serverFarms = new ServerFarmOperations(this);
    this.webSpaces = new WebSpaceOperations(this);
    this.webSites = new WebSiteOperations(this);
  }
  
  /**
   * Register your subscription to use Windows Azure Web Sites.
   *
   * @param {Function} callback
   *
   * @returns {OperationResponse} - A standard service response including an
   * HTTP status code and request ID.
   */
  WebSiteManagementClient.prototype.registerSubscription = function(callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = this.baseUri + '/' + this.credentials.subscriptionId + '/services?service=website&action=register';
    
    // Create HTTP transport objects
    var httpRequest = {};
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2013-03-01';
    httpRequest.headers['Content-Type'] = 'application/xml';
    
    // Set Credentials
    httpRequest.key = this.credentials.keyvalue;
    httpRequest.cert = this.credentials.certvalue;
    
    // Send Request
    return request(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 202) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Unregister your subscription to use Windows Azure Web Sites.
   *
   * @param {Function} callback
   *
   * @returns {OperationResponse} - A standard service response including an
   * HTTP status code and request ID.
   */
  WebSiteManagementClient.prototype.unregisterSubscription = function(callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = this.baseUri + '/' + this.credentials.subscriptionId + '/services?service=website&action=unregister';
    
    // Create HTTP transport objects
    var httpRequest = {};
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2013-03-01';
    httpRequest.headers['Content-Type'] = 'application/xml';
    
    // Set Credentials
    httpRequest.key = this.credentials.keyvalue;
    httpRequest.cert = this.credentials.certvalue;
    
    // Send Request
    return request(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 202) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  return WebSiteManagementClient;
})();
exports.WebSiteManagementClient = WebSiteManagementClient;

/**
 * Operations for managing the server farm in a web space.  (see
 * http://msdn.microsoft.com/en-us/library/windowsazure/dn194277.aspx for more
 * information)
 */
var ServerFarmOperations = (function() {
  /**
   * Initializes a new instance of the ServerFarmOperations class.
   *
   * @constructor
   *
   * @param {WebSiteManagementClient} client - Reference to the service client.
   */
  function ServerFarmOperations(client) {
    this.client = client;
  }
  
  /**
   * You can create a server farm by issuing an HTTP POST request. Only one
   * server farm per webspace is permitted. You can retrieve server farm
   * details by using HTTP GET, change server farm properties by using HTTP
   * PUT, and delete a server farm by using HTTP DELETE. A request body is
   * required for server farm creation (HTTP POST) and server farm update
   * (HTTP PUT).  Warning: Creating a server farm changes your webspaceâ€™s
   * Compute Mode from Shared to Dedicated. You will be charged from the
   * moment the server farm is created, even if all your sites are still
   * running in Free mode.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/dn194277.aspx for
   * more information)
   *
   * @param {String} webSpaceName - The name of the web space.
   *
   * @param {ServerFarmCreateParameters} parameters - Parameters supplied to
   * the Create Server Farm operation.
   *
   * @param {Function} callback
   *
   * @returns {ServerFarmCreateResponse} - The Create Server Farm operation
   * response.
   */
  ServerFarmOperations.prototype.create = function(webSpaceName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (webSpaceName === null || webSpaceName === undefined) {
      return callback(new Error('webSpaceName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/WebSpaces/' + webSpaceName + '/ServerFarms';
    
    // Create HTTP transport objects
    var httpRequest = {};
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2013-03-01';
    httpRequest.headers['Content-Type'] = 'application/xml';
    
    // Set Credentials
    httpRequest.key = this.client.credentials.keyvalue;
    httpRequest.cert = this.client.credentials.certvalue;
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = {};
    
    var serverFarmElement = js2xml.createElement('ServerFarm', 'http://schemas.microsoft.com/windowsazure');
    js2xml.addChildElement(requestDoc, serverFarmElement);
    
    var currentNumberOfWorkersElement = js2xml.createElement('CurrentNumberOfWorkers', 'http://schemas.microsoft.com/windowsazure');
    js2xml.setElementValue(currentNumberOfWorkersElement, parameters.currentNumberOfWorkers.toString());
    js2xml.addChildElement(serverFarmElement, currentNumberOfWorkersElement);
    
    var currentWorkerSizeElement = js2xml.createElement('CurrentWorkerSize', 'http://schemas.microsoft.com/windowsazure');
    js2xml.setElementValue(currentWorkerSizeElement, parameters.currentWorkerSize.toString());
    js2xml.addChildElement(serverFarmElement, currentWorkerSizeElement);
    
    var nameElement = js2xml.createElement('Name', 'http://schemas.microsoft.com/windowsazure');
    js2xml.setElementValue(nameElement, 'DefaultServerFarm');
    js2xml.addChildElement(serverFarmElement, nameElement);
    
    var numberOfWorkersElement = js2xml.createElement('NumberOfWorkers', 'http://schemas.microsoft.com/windowsazure');
    js2xml.setElementValue(numberOfWorkersElement, parameters.numberOfWorkers.toString());
    js2xml.addChildElement(serverFarmElement, numberOfWorkersElement);
    
    var workerSizeElement = js2xml.createElement('WorkerSize', 'http://schemas.microsoft.com/windowsazure');
    js2xml.setElementValue(workerSizeElement, parameters.workerSize.toString());
    js2xml.addChildElement(serverFarmElement, workerSizeElement);
    
    var statusElement = js2xml.createElement('Status', 'http://schemas.microsoft.com/windowsazure');
    js2xml.setElementValue(statusElement, parameters.status.toString());
    js2xml.addChildElement(serverFarmElement, statusElement);
    
    requestContent = js2xml.serializeDocument(requestDoc);
    httpRequest.body = requestContent;
    // Send Request
    return request(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var serverFarmElement2 = responseDoc.SERVERFARM ? responseDoc.SERVERFARM.length === 1 ? responseDoc.SERVERFARM[0] : responseDoc.SERVERFARM : null;
        if (serverFarmElement2) {
          
          var currentNumberOfWorkersElement2 = serverFarmElement2.CURRENTNUMBEROFWORKERS ? serverFarmElement2.CURRENTNUMBEROFWORKERS.length === 1 ? serverFarmElement2.CURRENTNUMBEROFWORKERS[0] : serverFarmElement2.CURRENTNUMBEROFWORKERS : null;
          if (currentNumberOfWorkersElement2) {
            var currentNumberOfWorkersInstance;
            currentNumberOfWorkersInstance = parseInt(currentNumberOfWorkersElement2, 10);
            result.currentNumberOfWorkers = currentNumberOfWorkersInstance;
          }
          
          var currentWorkerSizeElement2 = serverFarmElement2.CURRENTWORKERSIZE ? serverFarmElement2.CURRENTWORKERSIZE.length === 1 ? serverFarmElement2.CURRENTWORKERSIZE[0] : serverFarmElement2.CURRENTWORKERSIZE : null;
          if (currentWorkerSizeElement2) {
            var currentWorkerSizeInstance;
            currentWorkerSizeInstance = currentWorkerSizeElement2;
            result.currentWorkerSize = currentWorkerSizeInstance;
          }
          
          var nameElement2 = serverFarmElement2.NAME ? serverFarmElement2.NAME.length === 1 ? serverFarmElement2.NAME[0] : serverFarmElement2.NAME : null;
          if (nameElement2) {
            var nameInstance;
            nameInstance = nameElement2;
            result.name = nameInstance;
          }
          
          var numberOfWorkersElement2 = serverFarmElement2.NUMBEROFWORKERS ? serverFarmElement2.NUMBEROFWORKERS.length === 1 ? serverFarmElement2.NUMBEROFWORKERS[0] : serverFarmElement2.NUMBEROFWORKERS : null;
          if (numberOfWorkersElement2) {
            var numberOfWorkersInstance;
            numberOfWorkersInstance = parseInt(numberOfWorkersElement2, 10);
            result.numberOfWorkers = numberOfWorkersInstance;
          }
          
          var workerSizeElement2 = serverFarmElement2.WORKERSIZE ? serverFarmElement2.WORKERSIZE.length === 1 ? serverFarmElement2.WORKERSIZE[0] : serverFarmElement2.WORKERSIZE : null;
          if (workerSizeElement2) {
            var workerSizeInstance;
            workerSizeInstance = workerSizeElement2;
            result.workerSize = workerSizeInstance;
          }
          
          var statusElement2 = serverFarmElement2.STATUS ? serverFarmElement2.STATUS.length === 1 ? serverFarmElement2.STATUS[0] : serverFarmElement2.STATUS : null;
          if (statusElement2) {
            var statusInstance;
            statusInstance = statusElement2;
            result.status = statusInstance;
          }
        }
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * You can create a server farm by issuing an HTTP POST request. Only one
   * server farm per webspace is permitted. You can retrieve server farm
   * details by using HTTP GET, change server farm properties by using HTTP
   * PUT, and delete a server farm by using HTTP DELETE. A request body is
   * required for server farm creation (HTTP POST) and server farm update
   * (HTTP PUT).  Warning: Creating a server farm changes your webspaceâ€™s
   * Compute Mode from Shared to Dedicated. You will be charged from the
   * moment the server farm is created, even if all your sites are still
   * running in Free mode.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/dn194277.aspx for
   * more information)
   *
   * @param {String} webSpaceName - The name of the web space.
   *
   * @param {ServerFarmUpdateParameters} parameters - Parameters supplied to
   * the Update Server Farm operation.
   *
   * @param {Function} callback
   *
   * @returns {ServerFarmUpdateResponse} - The Update Server Farm operation
   * response.
   */
  ServerFarmOperations.prototype.update = function(webSpaceName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (webSpaceName === null || webSpaceName === undefined) {
      return callback(new Error('webSpaceName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/WebSpaces/' + webSpaceName + '/ServerFarms/DefaultServerFarm';
    
    // Create HTTP transport objects
    var httpRequest = {};
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2013-03-01';
    httpRequest.headers['Content-Type'] = 'application/xml';
    
    // Set Credentials
    httpRequest.key = this.client.credentials.keyvalue;
    httpRequest.cert = this.client.credentials.certvalue;
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = {};
    
    var serverFarmElement = js2xml.createElement('ServerFarm', 'http://schemas.microsoft.com/windowsazure');
    js2xml.addChildElement(requestDoc, serverFarmElement);
    
    var currentNumberOfWorkersElement = js2xml.createElement('CurrentNumberOfWorkers', 'http://schemas.microsoft.com/windowsazure');
    js2xml.setElementValue(currentNumberOfWorkersElement, parameters.currentNumberOfWorkers.toString());
    js2xml.addChildElement(serverFarmElement, currentNumberOfWorkersElement);
    
    var currentWorkerSizeElement = js2xml.createElement('CurrentWorkerSize', 'http://schemas.microsoft.com/windowsazure');
    js2xml.setElementValue(currentWorkerSizeElement, parameters.currentWorkerSize.toString());
    js2xml.addChildElement(serverFarmElement, currentWorkerSizeElement);
    
    var nameElement = js2xml.createElement('Name', 'http://schemas.microsoft.com/windowsazure');
    js2xml.setElementValue(nameElement, 'DefaultServerFarm');
    js2xml.addChildElement(serverFarmElement, nameElement);
    
    var numberOfWorkersElement = js2xml.createElement('NumberOfWorkers', 'http://schemas.microsoft.com/windowsazure');
    js2xml.setElementValue(numberOfWorkersElement, parameters.numberOfWorkers.toString());
    js2xml.addChildElement(serverFarmElement, numberOfWorkersElement);
    
    var workerSizeElement = js2xml.createElement('WorkerSize', 'http://schemas.microsoft.com/windowsazure');
    js2xml.setElementValue(workerSizeElement, parameters.workerSize.toString());
    js2xml.addChildElement(serverFarmElement, workerSizeElement);
    
    var statusElement = js2xml.createElement('Status', 'http://schemas.microsoft.com/windowsazure');
    js2xml.setElementValue(statusElement, parameters.status.toString());
    js2xml.addChildElement(serverFarmElement, statusElement);
    
    requestContent = js2xml.serializeDocument(requestDoc);
    httpRequest.body = requestContent;
    // Send Request
    return request(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var serverFarmElement2 = responseDoc.SERVERFARM ? responseDoc.SERVERFARM.length === 1 ? responseDoc.SERVERFARM[0] : responseDoc.SERVERFARM : null;
        if (serverFarmElement2) {
          
          var currentNumberOfWorkersElement2 = serverFarmElement2.CURRENTNUMBEROFWORKERS ? serverFarmElement2.CURRENTNUMBEROFWORKERS.length === 1 ? serverFarmElement2.CURRENTNUMBEROFWORKERS[0] : serverFarmElement2.CURRENTNUMBEROFWORKERS : null;
          if (currentNumberOfWorkersElement2) {
            var currentNumberOfWorkersInstance;
            currentNumberOfWorkersInstance = parseInt(currentNumberOfWorkersElement2, 10);
            result.currentNumberOfWorkers = currentNumberOfWorkersInstance;
          }
          
          var currentWorkerSizeElement2 = serverFarmElement2.CURRENTWORKERSIZE ? serverFarmElement2.CURRENTWORKERSIZE.length === 1 ? serverFarmElement2.CURRENTWORKERSIZE[0] : serverFarmElement2.CURRENTWORKERSIZE : null;
          if (currentWorkerSizeElement2) {
            var currentWorkerSizeInstance;
            currentWorkerSizeInstance = currentWorkerSizeElement2;
            result.currentWorkerSize = currentWorkerSizeInstance;
          }
          
          var nameElement2 = serverFarmElement2.NAME ? serverFarmElement2.NAME.length === 1 ? serverFarmElement2.NAME[0] : serverFarmElement2.NAME : null;
          if (nameElement2) {
            var nameInstance;
            nameInstance = nameElement2;
            result.name = nameInstance;
          }
          
          var numberOfWorkersElement2 = serverFarmElement2.NUMBEROFWORKERS ? serverFarmElement2.NUMBEROFWORKERS.length === 1 ? serverFarmElement2.NUMBEROFWORKERS[0] : serverFarmElement2.NUMBEROFWORKERS : null;
          if (numberOfWorkersElement2) {
            var numberOfWorkersInstance;
            numberOfWorkersInstance = parseInt(numberOfWorkersElement2, 10);
            result.numberOfWorkers = numberOfWorkersInstance;
          }
          
          var workerSizeElement2 = serverFarmElement2.WORKERSIZE ? serverFarmElement2.WORKERSIZE.length === 1 ? serverFarmElement2.WORKERSIZE[0] : serverFarmElement2.WORKERSIZE : null;
          if (workerSizeElement2) {
            var workerSizeInstance;
            workerSizeInstance = workerSizeElement2;
            result.workerSize = workerSizeInstance;
          }
          
          var statusElement2 = serverFarmElement2.STATUS ? serverFarmElement2.STATUS.length === 1 ? serverFarmElement2.STATUS[0] : serverFarmElement2.STATUS : null;
          if (statusElement2) {
            var statusInstance;
            statusInstance = statusElement2;
            result.status = statusInstance;
          }
        }
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * You can create a server farm by issuing an HTTP POST request. Only one
   * server farm per webspace is permitted. You can retrieve server farm
   * details by using HTTP GET, change server farm properties by using HTTP
   * PUT, and delete a server farm by using HTTP DELETE. A request body is
   * required for server farm creation (HTTP POST) and server farm update
   * (HTTP PUT).  Warning: Creating a server farm changes your webspaceâ€™s
   * Compute Mode from Shared to Dedicated. You will be charged from the
   * moment the server farm is created, even if all your sites are still
   * running in Free mode.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/dn194277.aspx for
   * more information)
   *
   * @param {String} webSpaceName - The name of the web space.
   *
   * @param {Function} callback
   *
   * @returns {ServerFarmGetResponse} - The Get Server Farm operation response.
   */
  ServerFarmOperations.prototype.get = function(webSpaceName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (webSpaceName === null || webSpaceName === undefined) {
      return callback(new Error('webSpaceName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/WebSpaces/' + webSpaceName + '/ServerFarms';
    
    // Create HTTP transport objects
    var httpRequest = {};
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2013-03-01';
    
    // Set Credentials
    httpRequest.key = this.client.credentials.keyvalue;
    httpRequest.cert = this.client.credentials.certvalue;
    
    // Send Request
    return request(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var serverFarmElement = responseDoc.SERVERFARM ? responseDoc.SERVERFARM.length === 1 ? responseDoc.SERVERFARM[0] : responseDoc.SERVERFARM : null;
        if (serverFarmElement) {
          
          var currentNumberOfWorkersElement = serverFarmElement.CURRENTNUMBEROFWORKERS ? serverFarmElement.CURRENTNUMBEROFWORKERS.length === 1 ? serverFarmElement.CURRENTNUMBEROFWORKERS[0] : serverFarmElement.CURRENTNUMBEROFWORKERS : null;
          if (currentNumberOfWorkersElement) {
            var currentNumberOfWorkersInstance;
            currentNumberOfWorkersInstance = parseInt(currentNumberOfWorkersElement, 10);
            result.currentNumberOfWorkers = currentNumberOfWorkersInstance;
          }
          
          var currentWorkerSizeElement = serverFarmElement.CURRENTWORKERSIZE ? serverFarmElement.CURRENTWORKERSIZE.length === 1 ? serverFarmElement.CURRENTWORKERSIZE[0] : serverFarmElement.CURRENTWORKERSIZE : null;
          if (currentWorkerSizeElement) {
            var currentWorkerSizeInstance;
            currentWorkerSizeInstance = currentWorkerSizeElement;
            result.currentWorkerSize = currentWorkerSizeInstance;
          }
          
          var nameElement = serverFarmElement.NAME ? serverFarmElement.NAME.length === 1 ? serverFarmElement.NAME[0] : serverFarmElement.NAME : null;
          if (nameElement) {
            var nameInstance;
            nameInstance = nameElement;
            result.name = nameInstance;
          }
          
          var numberOfWorkersElement = serverFarmElement.NUMBEROFWORKERS ? serverFarmElement.NUMBEROFWORKERS.length === 1 ? serverFarmElement.NUMBEROFWORKERS[0] : serverFarmElement.NUMBEROFWORKERS : null;
          if (numberOfWorkersElement) {
            var numberOfWorkersInstance;
            numberOfWorkersInstance = parseInt(numberOfWorkersElement, 10);
            result.numberOfWorkers = numberOfWorkersInstance;
          }
          
          var workerSizeElement = serverFarmElement.WORKERSIZE ? serverFarmElement.WORKERSIZE.length === 1 ? serverFarmElement.WORKERSIZE[0] : serverFarmElement.WORKERSIZE : null;
          if (workerSizeElement) {
            var workerSizeInstance;
            workerSizeInstance = workerSizeElement;
            result.workerSize = workerSizeInstance;
          }
          
          var statusElement = serverFarmElement.STATUS ? serverFarmElement.STATUS.length === 1 ? serverFarmElement.STATUS[0] : serverFarmElement.STATUS : null;
          if (statusElement) {
            var statusInstance;
            statusInstance = statusElement;
            result.status = statusInstance;
          }
        }
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * You can create a server farm by issuing an HTTP POST request. Only one
   * server farm per webspace is permitted. You can retrieve server farm
   * details by using HTTP GET, change server farm properties by using HTTP
   * PUT, and delete a server farm by using HTTP DELETE. A request body is
   * required for server farm creation (HTTP POST) and server farm update
   * (HTTP PUT).  Warning: Creating a server farm changes your webspaceâ€™s
   * Compute Mode from Shared to Dedicated. You will be charged from the
   * moment the server farm is created, even if all your sites are still
   * running in Free mode.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/dn194277.aspx for
   * more information)
   *
   * @param {String} webSpaceName - The name of the web space.
   *
   * @param {Function} callback
   *
   * @returns {OperationResponse} - A standard service response including an
   * HTTP status code and request ID.
   */
  ServerFarmOperations.prototype.delete = function(webSpaceName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (webSpaceName === null || webSpaceName === undefined) {
      return callback(new Error('webSpaceName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/WebSpaces/' + webSpaceName + '/ServerFarms/DefaultServerFarm';
    
    // Create HTTP transport objects
    var httpRequest = {};
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2013-03-01';
    
    // Set Credentials
    httpRequest.key = this.client.credentials.keyvalue;
    httpRequest.cert = this.client.credentials.certvalue;
    
    // Send Request
    return request(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  return ServerFarmOperations;
})();

/**
 * Operations for managing web spaces beneath your subscription.
 */
var WebSpaceOperations = (function() {
  /**
   * Initializes a new instance of the WebSpaceOperations class.
   *
   * @constructor
   *
   * @param {WebSiteManagementClient} client - Reference to the service client.
   */
  function WebSpaceOperations(client) {
    this.client = client;
  }
  
  /**
   * Get the dns suffix for this subscription.
   *
   * @param {Function} callback
   *
   * @returns {WebSpacesGetDnsSuffixResponse} - The Get DNS Suffix operation
   * response.
   */
  WebSpaceOperations.prototype.getDnsSuffix = function(callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/WebSpaces?properties=dnssuffix';
    
    // Create HTTP transport objects
    var httpRequest = {};
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2013-03-01';
    
    // Set Credentials
    httpRequest.key = this.client.credentials.keyvalue;
    httpRequest.cert = this.client.credentials.certvalue;
    
    // Send Request
    return request(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var stringElement = responseDoc.STRING ? responseDoc.STRING.length === 1 ? responseDoc.STRING[0] : responseDoc.STRING : null;
        if (stringElement) {
          
          result.DnsSuffix = stringElement;
        }
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * You can list the webspaces under the current subscription by issuing a GET
   * request.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/dn166961.aspx for
   * more information)
   *
   * @param {Function} callback
   *
   * @returns {WebSpacesListResponse} - The List Web Spaces operation response.
   */
  WebSpaceOperations.prototype.list = function(callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/WebSpaces';
    
    // Create HTTP transport objects
    var httpRequest = {};
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2013-03-01';
    
    // Set Credentials
    httpRequest.key = this.client.credentials.keyvalue;
    httpRequest.cert = this.client.credentials.certvalue;
    
    // Send Request
    return request(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = { webSpaces: [] };
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        
        var webSpacesSequenceElement = responseDoc.WEBSPACES ? responseDoc.WEBSPACES.length === 1 ? responseDoc.WEBSPACES[0] : responseDoc.WEBSPACES : null;
        if (webSpacesSequenceElement) {
          for (var loweredIndex1 = 0; loweredIndex1 < webSpacesSequenceElement.WEBSPACE.length; loweredIndex1 = loweredIndex1 + 1) {
            var webSpacesElement = webSpacesSequenceElement.WEBSPACE[loweredIndex1];
            var webSpaceInstance = {};
            result.webSpaces.push(webSpaceInstance);
            
            var availabilityStateElement = webSpacesElement.AVAILABILITYSTATE ? webSpacesElement.AVAILABILITYSTATE.length === 1 ? webSpacesElement.AVAILABILITYSTATE[0] : webSpacesElement.AVAILABILITYSTATE : null;
            if (availabilityStateElement) {
              var availabilityStateInstance;
              availabilityStateInstance = availabilityStateElement;
              webSpaceInstance.availabilityState = availabilityStateInstance;
            }
            
            var currentNumberOfWorkersElement = webSpacesElement.CURRENTNUMBEROFWORKERS ? webSpacesElement.CURRENTNUMBEROFWORKERS.length === 1 ? webSpacesElement.CURRENTNUMBEROFWORKERS[0] : webSpacesElement.CURRENTNUMBEROFWORKERS : null;
            if (currentNumberOfWorkersElement && (currentNumberOfWorkersElement === null || currentNumberOfWorkersElement === undefined || currentNumberOfWorkersElement.length === 0) === false) {
              var currentNumberOfWorkersInstance;
              currentNumberOfWorkersInstance = parseInt(currentNumberOfWorkersElement, 10);
              webSpaceInstance.currentNumberOfWorkers = currentNumberOfWorkersInstance;
            }
            
            var currentWorkerSizeElement = webSpacesElement.CURRENTWORKERSIZE ? webSpacesElement.CURRENTWORKERSIZE.length === 1 ? webSpacesElement.CURRENTWORKERSIZE[0] : webSpacesElement.CURRENTWORKERSIZE : null;
            if (currentWorkerSizeElement && (currentWorkerSizeElement === null || currentWorkerSizeElement === undefined || currentWorkerSizeElement.length === 0) === false) {
              var currentWorkerSizeInstance;
              currentWorkerSizeInstance = currentWorkerSizeElement;
              webSpaceInstance.currentWorkerSize = currentWorkerSizeInstance;
            }
            
            var geoLocationElement = webSpacesElement.GEOLOCATION ? webSpacesElement.GEOLOCATION.length === 1 ? webSpacesElement.GEOLOCATION[0] : webSpacesElement.GEOLOCATION : null;
            if (geoLocationElement) {
              var geoLocationInstance;
              geoLocationInstance = geoLocationElement;
              webSpaceInstance.geoLocation = geoLocationInstance;
            }
            
            var geoRegionElement = webSpacesElement.GEOREGION ? webSpacesElement.GEOREGION.length === 1 ? webSpacesElement.GEOREGION[0] : webSpacesElement.GEOREGION : null;
            if (geoRegionElement) {
              var geoRegionInstance;
              geoRegionInstance = geoRegionElement;
              webSpaceInstance.geoRegion = geoRegionInstance;
            }
            
            var nameElement = webSpacesElement.NAME ? webSpacesElement.NAME.length === 1 ? webSpacesElement.NAME[0] : webSpacesElement.NAME : null;
            if (nameElement) {
              var nameInstance;
              nameInstance = nameElement;
              webSpaceInstance.name = nameInstance;
            }
            
            var planElement = webSpacesElement.PLAN ? webSpacesElement.PLAN.length === 1 ? webSpacesElement.PLAN[0] : webSpacesElement.PLAN : null;
            if (planElement) {
              var planInstance;
              planInstance = planElement;
              webSpaceInstance.plan = planInstance;
            }
            
            var statusElement = webSpacesElement.STATUS ? webSpacesElement.STATUS.length === 1 ? webSpacesElement.STATUS[0] : webSpacesElement.STATUS : null;
            if (statusElement) {
              var statusInstance;
              statusInstance = statusElement;
              webSpaceInstance.status = statusInstance;
            }
            
            var subscriptionElement = webSpacesElement.SUBSCRIPTION ? webSpacesElement.SUBSCRIPTION.length === 1 ? webSpacesElement.SUBSCRIPTION[0] : webSpacesElement.SUBSCRIPTION : null;
            if (subscriptionElement) {
              var subscriptionInstance;
              subscriptionInstance = subscriptionElement;
              webSpaceInstance.subscription = subscriptionInstance;
            }
            
            var workerSizeElement = webSpacesElement.WORKERSIZE ? webSpacesElement.WORKERSIZE.length === 1 ? webSpacesElement.WORKERSIZE[0] : webSpacesElement.WORKERSIZE : null;
            if (workerSizeElement && (workerSizeElement === null || workerSizeElement === undefined || workerSizeElement.length === 0) === false) {
              var workerSizeInstance;
              workerSizeInstance = workerSizeElement;
              webSpaceInstance.workerSize = workerSizeInstance;
            }
          }
        }
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * You can retrieve details for a specified webspace name by issuing an HTTP
   * GET request.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/dn167017.aspx for
   * more information)
   *
   * @param {String} webSpaceName - The name of the web space.
   *
   * @param {Function} callback
   *
   * @returns {WebSpacesGetResponse} - The Get Web Space Details operation
   * response.
   */
  WebSpaceOperations.prototype.get = function(webSpaceName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (webSpaceName === null || webSpaceName === undefined) {
      return callback(new Error('webSpaceName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/WebSpaces/' + webSpaceName;
    
    // Create HTTP transport objects
    var httpRequest = {};
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2013-03-01';
    
    // Set Credentials
    httpRequest.key = this.client.credentials.keyvalue;
    httpRequest.cert = this.client.credentials.certvalue;
    
    // Send Request
    return request(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var webSpacesElement = responseDoc.WEBSPACES ? responseDoc.WEBSPACES.length === 1 ? responseDoc.WEBSPACES[0] : responseDoc.WEBSPACES : null;
        if (webSpacesElement) {
          
          var availabilityStateElement = webSpacesElement.AVAILABILITYSTATE ? webSpacesElement.AVAILABILITYSTATE.length === 1 ? webSpacesElement.AVAILABILITYSTATE[0] : webSpacesElement.AVAILABILITYSTATE : null;
          if (availabilityStateElement) {
            var availabilityStateInstance;
            availabilityStateInstance = availabilityStateElement;
            result.availabilityState = availabilityStateInstance;
          }
          
          var currentNumberOfWorkersElement = webSpacesElement.CURRENTNUMBEROFWORKERS ? webSpacesElement.CURRENTNUMBEROFWORKERS.length === 1 ? webSpacesElement.CURRENTNUMBEROFWORKERS[0] : webSpacesElement.CURRENTNUMBEROFWORKERS : null;
          if (currentNumberOfWorkersElement && (currentNumberOfWorkersElement === null || currentNumberOfWorkersElement === undefined || currentNumberOfWorkersElement.length === 0) === false) {
            var currentNumberOfWorkersInstance;
            currentNumberOfWorkersInstance = parseInt(currentNumberOfWorkersElement, 10);
            result.currentNumberOfWorkers = currentNumberOfWorkersInstance;
          }
          
          var currentWorkerSizeElement = webSpacesElement.CURRENTWORKERSIZE ? webSpacesElement.CURRENTWORKERSIZE.length === 1 ? webSpacesElement.CURRENTWORKERSIZE[0] : webSpacesElement.CURRENTWORKERSIZE : null;
          if (currentWorkerSizeElement && (currentWorkerSizeElement === null || currentWorkerSizeElement === undefined || currentWorkerSizeElement.length === 0) === false) {
            var currentWorkerSizeInstance;
            currentWorkerSizeInstance = currentWorkerSizeElement;
            result.currentWorkerSize = currentWorkerSizeInstance;
          }
          
          var geoLocationElement = webSpacesElement.GEOLOCATION ? webSpacesElement.GEOLOCATION.length === 1 ? webSpacesElement.GEOLOCATION[0] : webSpacesElement.GEOLOCATION : null;
          if (geoLocationElement) {
            var geoLocationInstance;
            geoLocationInstance = geoLocationElement;
            result.geoLocation = geoLocationInstance;
          }
          
          var geoRegionElement = webSpacesElement.GEOREGION ? webSpacesElement.GEOREGION.length === 1 ? webSpacesElement.GEOREGION[0] : webSpacesElement.GEOREGION : null;
          if (geoRegionElement) {
            var geoRegionInstance;
            geoRegionInstance = geoRegionElement;
            result.geoRegion = geoRegionInstance;
          }
          
          var nameElement = webSpacesElement.NAME ? webSpacesElement.NAME.length === 1 ? webSpacesElement.NAME[0] : webSpacesElement.NAME : null;
          if (nameElement) {
            var nameInstance;
            nameInstance = nameElement;
            result.name = nameInstance;
          }
          
          var planElement = webSpacesElement.PLAN ? webSpacesElement.PLAN.length === 1 ? webSpacesElement.PLAN[0] : webSpacesElement.PLAN : null;
          if (planElement) {
            var planInstance;
            planInstance = planElement;
            result.plan = planInstance;
          }
          
          var statusElement = webSpacesElement.STATUS ? webSpacesElement.STATUS.length === 1 ? webSpacesElement.STATUS[0] : webSpacesElement.STATUS : null;
          if (statusElement) {
            var statusInstance;
            statusInstance = statusElement;
            result.status = statusInstance;
          }
          
          var subscriptionElement = webSpacesElement.SUBSCRIPTION ? webSpacesElement.SUBSCRIPTION.length === 1 ? webSpacesElement.SUBSCRIPTION[0] : webSpacesElement.SUBSCRIPTION : null;
          if (subscriptionElement) {
            var subscriptionInstance;
            subscriptionInstance = subscriptionElement;
            result.subscription = subscriptionInstance;
          }
          
          var workerSizeElement = webSpacesElement.WORKERSIZE ? webSpacesElement.WORKERSIZE.length === 1 ? webSpacesElement.WORKERSIZE[0] : webSpacesElement.WORKERSIZE : null;
          if (workerSizeElement && (workerSizeElement === null || workerSizeElement === undefined || workerSizeElement.length === 0) === false) {
            var workerSizeInstance;
            workerSizeInstance = workerSizeElement;
            result.workerSize = workerSizeInstance;
          }
        }
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * Get the source control users allowed to publish to this web space.
   *
   * @param {Function} callback
   *
   * @returns {WebSpacesListPublishingUsersResponse} - The List Publishing
   * Users operation response.
   */
  WebSpaceOperations.prototype.listPublishingUsers = function(callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/WebSpaces?properties=publishingUsers';
    
    // Create HTTP transport objects
    var httpRequest = {};
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2013-03-01';
    
    // Set Credentials
    httpRequest.key = this.client.credentials.keyvalue;
    httpRequest.cert = this.client.credentials.certvalue;
    
    // Send Request
    return request(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = { users: [] };
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        
        var arrayOfstringSequenceElement = responseDoc.ARRAYOFSTRING ? responseDoc.ARRAYOFSTRING.length === 1 ? responseDoc.ARRAYOFSTRING[0] : responseDoc.ARRAYOFSTRING : null;
        if (arrayOfstringSequenceElement) {
          for (var loweredIndex1 = 0; loweredIndex1 < arrayOfstringSequenceElement.STRING.length; loweredIndex1 = loweredIndex1 + 1) {
            var arrayOfstringElement = arrayOfstringSequenceElement.STRING[loweredIndex1];
            var stringInstance = {};
            result.users.push(stringInstance);
            
            var stringInstance2;
            stringInstance2 = arrayOfstringElement;
            stringInstance.name = stringInstance2;
          }
        }
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * You can retrieve a list of all web sites in a web space by issuing an HTTP
   * GET request.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/dn236429.aspx for
   * more information)
   *
   * @param {String} webSpaceName - The name of the web space.
   *
   * @param {Function} callback
   *
   * @returns {WebSpacesListWebsitesResponse} - The List Web Sites operation
   * response.
   */
  WebSpaceOperations.prototype.listWebsites = function(webSpaceName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (webSpaceName === null || webSpaceName === undefined) {
      return callback(new Error('webSpaceName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/WebSpaces/' + webSpaceName + '/sites';
    
    // Create HTTP transport objects
    var httpRequest = {};
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2013-03-01';
    
    // Set Credentials
    httpRequest.key = this.client.credentials.keyvalue;
    httpRequest.cert = this.client.credentials.certvalue;
    
    // Send Request
    return request(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = { webSites: [] };
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        
        var sitesSequenceElement = responseDoc.SITES ? responseDoc.SITES.length === 1 ? responseDoc.SITES[0] : responseDoc.SITES : null;
        if (sitesSequenceElement) {
          for (var loweredIndex1 = 0; loweredIndex1 < sitesSequenceElement.SITE.length; loweredIndex1 = loweredIndex1 + 1) {
            var sitesElement = sitesSequenceElement.SITE[loweredIndex1];
            var siteInstance = { enabledHostNames: [], hostNameSslStates: [], hostNames: [], sslCertificates: [] };
            result.webSites.push(siteInstance);
            
            var adminEnabledElement = sitesElement.ADMINENABLED ? sitesElement.ADMINENABLED.length === 1 ? sitesElement.ADMINENABLED[0] : sitesElement.ADMINENABLED : null;
            if (adminEnabledElement) {
              var adminEnabledInstance;
              adminEnabledInstance = adminEnabledElement;
              siteInstance.adminEnabled = adminEnabledInstance;
            }
            
            var availabilityStateElement = sitesElement.AVAILABILITYSTATE ? sitesElement.AVAILABILITYSTATE.length === 1 ? sitesElement.AVAILABILITYSTATE[0] : sitesElement.AVAILABILITYSTATE : null;
            if (availabilityStateElement) {
              var availabilityStateInstance;
              availabilityStateInstance = availabilityStateElement;
              siteInstance.availabilityState = availabilityStateInstance;
            }
            
            var computeModeElement = sitesElement.COMPUTEMODE ? sitesElement.COMPUTEMODE.length === 1 ? sitesElement.COMPUTEMODE[0] : sitesElement.COMPUTEMODE : null;
            if (computeModeElement) {
              var computeModeInstance;
              computeModeInstance = computeModeElement;
              siteInstance.computeMode = computeModeInstance;
            }
            
            var enabledElement = sitesElement.ENABLED ? sitesElement.ENABLED.length === 1 ? sitesElement.ENABLED[0] : sitesElement.ENABLED : null;
            if (enabledElement) {
              var enabledInstance;
              enabledInstance = enabledElement;
              siteInstance.enabled = enabledInstance;
            }
            
            var enabledHostNamesSequenceElement = sitesElement.ENABLEDHOSTNAMES ? sitesElement.ENABLEDHOSTNAMES.length === 1 ? sitesElement.ENABLEDHOSTNAMES[0] : sitesElement.ENABLEDHOSTNAMES : null;
            if (enabledHostNamesSequenceElement) {
              for (var loweredIndex2 = 0; loweredIndex2 < enabledHostNamesSequenceElement.STRING.length; loweredIndex2 = loweredIndex2 + 1) {
                var enabledHostNamesElement = enabledHostNamesSequenceElement.STRING[loweredIndex2];
                siteInstance.enabledHostNames.push(enabledHostNamesElement);
              }
            }
            
            var hostNameSslStatesSequenceElement = sitesElement.HOSTNAMESSLSTATES ? sitesElement.HOSTNAMESSLSTATES.length === 1 ? sitesElement.HOSTNAMESSLSTATES[0] : sitesElement.HOSTNAMESSLSTATES : null;
            if (hostNameSslStatesSequenceElement) {
              for (var loweredIndex3 = 0; loweredIndex3 < hostNameSslStatesSequenceElement.WEBSITEHOSTNAMESSLSTATE.length; loweredIndex3 = loweredIndex3 + 1) {
                var hostNameSslStatesElement = hostNameSslStatesSequenceElement.WEBSITEHOSTNAMESSLSTATE[loweredIndex3];
                var webSiteHostNameSslStateInstance = {};
                siteInstance.hostNameSslStates.push(webSiteHostNameSslStateInstance);
                
                var nameElement = hostNameSslStatesElement.NAME ? hostNameSslStatesElement.NAME.length === 1 ? hostNameSslStatesElement.NAME[0] : hostNameSslStatesElement.NAME : null;
                if (nameElement) {
                  var nameInstance;
                  nameInstance = nameElement;
                  webSiteHostNameSslStateInstance.name = nameInstance;
                }
                
                var sslStateElement = hostNameSslStatesElement.SSLSTATE ? hostNameSslStatesElement.SSLSTATE.length === 1 ? hostNameSslStatesElement.SSLSTATE[0] : hostNameSslStatesElement.SSLSTATE : null;
                if (sslStateElement) {
                  var sslStateInstance;
                  sslStateInstance = sslStateElement;
                  webSiteHostNameSslStateInstance.sslState = sslStateInstance;
                }
                
                var thumbprintElement = hostNameSslStatesElement.THUMBPRINT ? hostNameSslStatesElement.THUMBPRINT.length === 1 ? hostNameSslStatesElement.THUMBPRINT[0] : hostNameSslStatesElement.THUMBPRINT : null;
                if (thumbprintElement) {
                  var thumbprintInstance;
                  thumbprintInstance = thumbprintElement;
                  webSiteHostNameSslStateInstance.thumbprint = thumbprintInstance;
                }
                
                var virtualIPElement = hostNameSslStatesElement.VIRTUALIP ? hostNameSslStatesElement.VIRTUALIP.length === 1 ? hostNameSslStatesElement.VIRTUALIP[0] : hostNameSslStatesElement.VIRTUALIP : null;
                if (virtualIPElement) {
                  var virtualIPInstance;
                  virtualIPInstance = virtualIPElement;
                  webSiteHostNameSslStateInstance.virtualIP = virtualIPInstance;
                }
              }
            }
            
            var hostNamesSequenceElement = sitesElement.HOSTNAMES ? sitesElement.HOSTNAMES.length === 1 ? sitesElement.HOSTNAMES[0] : sitesElement.HOSTNAMES : null;
            if (hostNamesSequenceElement) {
              for (var loweredIndex4 = 0; loweredIndex4 < hostNamesSequenceElement.STRING.length; loweredIndex4 = loweredIndex4 + 1) {
                var hostNamesElement = hostNamesSequenceElement.STRING[loweredIndex4];
                siteInstance.hostNames.push(hostNamesElement);
              }
            }
            
            var lastModifiedTimeUtcElement = sitesElement.LASTMODIFIEDTIMEUTC ? sitesElement.LASTMODIFIEDTIMEUTC.length === 1 ? sitesElement.LASTMODIFIEDTIMEUTC[0] : sitesElement.LASTMODIFIEDTIMEUTC : null;
            if (lastModifiedTimeUtcElement) {
              var lastModifiedTimeUtcInstance;
              lastModifiedTimeUtcInstance = new Date(lastModifiedTimeUtcElement);
              siteInstance.lastModifiedTimeUtc = lastModifiedTimeUtcInstance;
            }
            
            var nameElement2 = sitesElement.NAME ? sitesElement.NAME.length === 1 ? sitesElement.NAME[0] : sitesElement.NAME : null;
            if (nameElement2) {
              var nameInstance2;
              nameInstance2 = nameElement2;
              siteInstance.name = nameInstance2;
            }
            
            var ownerElement = sitesElement.OWNER ? sitesElement.OWNER.length === 1 ? sitesElement.OWNER[0] : sitesElement.OWNER : null;
            if (ownerElement) {
              var ownerInstance;
              ownerInstance = ownerElement;
              siteInstance.owner = ownerInstance;
            }
            
            var repositorySiteNameElement = sitesElement.REPOSITORYSITENAME ? sitesElement.REPOSITORYSITENAME.length === 1 ? sitesElement.REPOSITORYSITENAME[0] : sitesElement.REPOSITORYSITENAME : null;
            if (repositorySiteNameElement) {
              var repositorySiteNameInstance;
              repositorySiteNameInstance = repositorySiteNameElement;
              siteInstance.repositorySiteName = repositorySiteNameInstance;
            }
            
            var runtimeAvailabilityStateElement = sitesElement.RUNTIMEAVAILABILITYSTATE ? sitesElement.RUNTIMEAVAILABILITYSTATE.length === 1 ? sitesElement.RUNTIMEAVAILABILITYSTATE[0] : sitesElement.RUNTIMEAVAILABILITYSTATE : null;
            if (runtimeAvailabilityStateElement) {
              var runtimeAvailabilityStateInstance;
              runtimeAvailabilityStateInstance = runtimeAvailabilityStateElement;
              siteInstance.runtimeAvailabilityState = runtimeAvailabilityStateInstance;
            }
            
            var sSLCertificatesSequenceElement = sitesElement.SSLCERTIFICATES ? sitesElement.SSLCERTIFICATES.length === 1 ? sitesElement.SSLCERTIFICATES[0] : sitesElement.SSLCERTIFICATES : null;
            if (sSLCertificatesSequenceElement) {
              for (var loweredIndex5 = 0; loweredIndex5 < sSLCertificatesSequenceElement.CERTIFICATE.length; loweredIndex5 = loweredIndex5 + 1) {
                var sSLCertificatesElement = sSLCertificatesSequenceElement.CERTIFICATE[loweredIndex5];
                var certificateInstance = { hostNames: [] };
                siteInstance.sslCertificates.push(certificateInstance);
                
                var expirationDateElement = sSLCertificatesElement.EXPIRATIONDATE ? sSLCertificatesElement.EXPIRATIONDATE.length === 1 ? sSLCertificatesElement.EXPIRATIONDATE[0] : sSLCertificatesElement.EXPIRATIONDATE : null;
                if (expirationDateElement) {
                  var expirationDateInstance;
                  expirationDateInstance = new Date(expirationDateElement);
                  certificateInstance.expirationDate = expirationDateInstance;
                }
                
                var friendlyNameElement = sSLCertificatesElement.FRIENDLYNAME ? sSLCertificatesElement.FRIENDLYNAME.length === 1 ? sSLCertificatesElement.FRIENDLYNAME[0] : sSLCertificatesElement.FRIENDLYNAME : null;
                if (friendlyNameElement) {
                  var friendlyNameInstance;
                  friendlyNameInstance = friendlyNameElement;
                  certificateInstance.friendlyName = friendlyNameInstance;
                }
                
                var hostNamesSequenceElement2 = sSLCertificatesElement.HOSTNAMES ? sSLCertificatesElement.HOSTNAMES.length === 1 ? sSLCertificatesElement.HOSTNAMES[0] : sSLCertificatesElement.HOSTNAMES : null;
                if (hostNamesSequenceElement2) {
                  for (var loweredIndex6 = 0; loweredIndex6 < hostNamesSequenceElement2.STRING.length; loweredIndex6 = loweredIndex6 + 1) {
                    var hostNamesElement2 = hostNamesSequenceElement2.STRING[loweredIndex6];
                    certificateInstance.hostNames.push(hostNamesElement2);
                  }
                }
                
                var issueDateElement = sSLCertificatesElement.ISSUEDATE ? sSLCertificatesElement.ISSUEDATE.length === 1 ? sSLCertificatesElement.ISSUEDATE[0] : sSLCertificatesElement.ISSUEDATE : null;
                if (issueDateElement) {
                  var issueDateInstance;
                  issueDateInstance = new Date(issueDateElement);
                  certificateInstance.issueDate = issueDateInstance;
                }
                
                var issuerElement = sSLCertificatesElement.ISSUER ? sSLCertificatesElement.ISSUER.length === 1 ? sSLCertificatesElement.ISSUER[0] : sSLCertificatesElement.ISSUER : null;
                if (issuerElement) {
                  var issuerInstance;
                  issuerInstance = issuerElement;
                  certificateInstance.issuer = issuerInstance;
                }
                
                var passwordElement = sSLCertificatesElement.PASSWORD ? sSLCertificatesElement.PASSWORD.length === 1 ? sSLCertificatesElement.PASSWORD[0] : sSLCertificatesElement.PASSWORD : null;
                if (passwordElement) {
                  var passwordInstance;
                  passwordInstance = passwordElement;
                  certificateInstance.password = passwordInstance;
                }
                
                var pfxBlobElement = sSLCertificatesElement.PFXBLOB ? sSLCertificatesElement.PFXBLOB.length === 1 ? sSLCertificatesElement.PFXBLOB[0] : sSLCertificatesElement.PFXBLOB : null;
                if (pfxBlobElement) {
                  var pfxBlobInstance;
                  pfxBlobInstance = new Buffer(pfxBlobElement, 'base64').toString('ascii');
                  certificateInstance.pfxBlob = pfxBlobInstance;
                }
                
                var selfLinkElement = sSLCertificatesElement.SELFLINK ? sSLCertificatesElement.SELFLINK.length === 1 ? sSLCertificatesElement.SELFLINK[0] : sSLCertificatesElement.SELFLINK : null;
                if (selfLinkElement) {
                  var selfLinkInstance;
                  selfLinkInstance = selfLinkElement;
                  certificateInstance.selfLinkUri = selfLinkInstance;
                }
                
                var siteNameElement = sSLCertificatesElement.SITENAME ? sSLCertificatesElement.SITENAME.length === 1 ? sSLCertificatesElement.SITENAME[0] : sSLCertificatesElement.SITENAME : null;
                if (siteNameElement) {
                  var siteNameInstance;
                  siteNameInstance = siteNameElement;
                  certificateInstance.siteName = siteNameInstance;
                }
                
                var subjectNameElement = sSLCertificatesElement.SUBJECTNAME ? sSLCertificatesElement.SUBJECTNAME.length === 1 ? sSLCertificatesElement.SUBJECTNAME[0] : sSLCertificatesElement.SUBJECTNAME : null;
                if (subjectNameElement) {
                  var subjectNameInstance;
                  subjectNameInstance = subjectNameElement;
                  certificateInstance.subjectName = subjectNameInstance;
                }
                
                var thumbprintElement2 = sSLCertificatesElement.THUMBPRINT ? sSLCertificatesElement.THUMBPRINT.length === 1 ? sSLCertificatesElement.THUMBPRINT[0] : sSLCertificatesElement.THUMBPRINT : null;
                if (thumbprintElement2) {
                  var thumbprintInstance2;
                  thumbprintInstance2 = thumbprintElement2;
                  certificateInstance.thumbprint = thumbprintInstance2;
                }
                
                var toDeleteElement = sSLCertificatesElement.TODELETE ? sSLCertificatesElement.TODELETE.length === 1 ? sSLCertificatesElement.TODELETE[0] : sSLCertificatesElement.TODELETE : null;
                if (toDeleteElement) {
                  var toDeleteInstance;
                  toDeleteInstance = toDeleteElement;
                  certificateInstance.isToBeDeleted = toDeleteInstance;
                }
                
                var validElement = sSLCertificatesElement.VALID ? sSLCertificatesElement.VALID.length === 1 ? sSLCertificatesElement.VALID[0] : sSLCertificatesElement.VALID : null;
                if (validElement) {
                  var validInstance;
                  validInstance = validElement;
                  certificateInstance.isValid = validInstance;
                }
              }
            }
            
            var selfLinkElement2 = sitesElement.SELFLINK ? sitesElement.SELFLINK.length === 1 ? sitesElement.SELFLINK[0] : sitesElement.SELFLINK : null;
            if (selfLinkElement2) {
              var selfLinkInstance2;
              selfLinkInstance2 = selfLinkElement2;
              siteInstance.uri = selfLinkInstance2;
            }
            
            var serverFarmElement = sitesElement.SERVERFARM ? sitesElement.SERVERFARM.length === 1 ? sitesElement.SERVERFARM[0] : sitesElement.SERVERFARM : null;
            if (serverFarmElement) {
              var serverFarmInstance;
              serverFarmInstance = serverFarmElement;
              siteInstance.serverFarm = serverFarmInstance;
            }
            
            var siteModeElement = sitesElement.SITEMODE ? sitesElement.SITEMODE.length === 1 ? sitesElement.SITEMODE[0] : sitesElement.SITEMODE : null;
            if (siteModeElement) {
              var siteModeInstance;
              siteModeInstance = siteModeElement;
              siteInstance.siteMode = siteModeInstance;
            }
            
            var sitePropertiesElement = sitesElement.SITEPROPERTIES ? sitesElement.SITEPROPERTIES.length === 1 ? sitesElement.SITEPROPERTIES[0] : sitesElement.SITEPROPERTIES : null;
            if (sitePropertiesElement) {
              var sitePropertiesInstance = { appSettings: {}, metadata: {}, properties: {} };
              siteInstance.siteProperties = sitePropertiesInstance;
              
              var appSettingsSequenceElement = sitePropertiesElement.APPSETTINGS ? sitePropertiesElement.APPSETTINGS.length === 1 ? sitePropertiesElement.APPSETTINGS[0] : sitePropertiesElement.APPSETTINGS : null;
              if (appSettingsSequenceElement) {
                for (var loweredIndex7 = 0; loweredIndex7 < appSettingsSequenceElement.NAMEVALUEPAIR.length; loweredIndex7 = loweredIndex7 + 1) {
                  var appSettingsElement = appSettingsSequenceElement.NAMEVALUEPAIR[loweredIndex7];
                  var appSettingsKey = appSettingsElement.NAME ? appSettingsElement.NAME.length === 1 ? appSettingsElement.NAME[0] : appSettingsElement.NAME : null;
                  var appSettingsValue = appSettingsElement.VALUE ? appSettingsElement.VALUE.length === 1 ? appSettingsElement.VALUE[0] : appSettingsElement.VALUE : null;
                  sitePropertiesInstance.appSettings[appSettingsKey] = appSettingsValue;
                }
              }
              
              var appSettingsSequenceElement2 = sitePropertiesElement.APPSETTINGS ? sitePropertiesElement.APPSETTINGS.length === 1 ? sitePropertiesElement.APPSETTINGS[0] : sitePropertiesElement.APPSETTINGS : null;
              if (appSettingsSequenceElement2) {
                for (var loweredIndex8 = 0; loweredIndex8 < appSettingsSequenceElement2.NAMEVALUEPAIR.length; loweredIndex8 = loweredIndex8 + 1) {
                  var appSettingsElement2 = appSettingsSequenceElement2.NAMEVALUEPAIR[loweredIndex8];
                  var appSettingsKey2 = appSettingsElement2.NAME ? appSettingsElement2.NAME.length === 1 ? appSettingsElement2.NAME[0] : appSettingsElement2.NAME : null;
                  var appSettingsValue2 = appSettingsElement2.VALUE ? appSettingsElement2.VALUE.length === 1 ? appSettingsElement2.VALUE[0] : appSettingsElement2.VALUE : null;
                  sitePropertiesInstance.metadata[appSettingsKey2] = appSettingsValue2;
                }
              }
              
              var appSettingsSequenceElement3 = sitePropertiesElement.APPSETTINGS ? sitePropertiesElement.APPSETTINGS.length === 1 ? sitePropertiesElement.APPSETTINGS[0] : sitePropertiesElement.APPSETTINGS : null;
              if (appSettingsSequenceElement3) {
                for (var loweredIndex9 = 0; loweredIndex9 < appSettingsSequenceElement3.NAMEVALUEPAIR.length; loweredIndex9 = loweredIndex9 + 1) {
                  var appSettingsElement3 = appSettingsSequenceElement3.NAMEVALUEPAIR[loweredIndex9];
                  var appSettingsKey3 = appSettingsElement3.NAME ? appSettingsElement3.NAME.length === 1 ? appSettingsElement3.NAME[0] : appSettingsElement3.NAME : null;
                  var appSettingsValue3 = appSettingsElement3.VALUE ? appSettingsElement3.VALUE.length === 1 ? appSettingsElement3.VALUE[0] : appSettingsElement3.VALUE : null;
                  sitePropertiesInstance.properties[appSettingsKey3] = appSettingsValue3;
                }
              }
            }
            
            var stateElement = sitesElement.STATE ? sitesElement.STATE.length === 1 ? sitesElement.STATE[0] : sitesElement.STATE : null;
            if (stateElement) {
              var stateInstance;
              stateInstance = stateElement;
              siteInstance.state = stateInstance;
            }
            
            var usageStateElement = sitesElement.USAGESTATE ? sitesElement.USAGESTATE.length === 1 ? sitesElement.USAGESTATE[0] : sitesElement.USAGESTATE : null;
            if (usageStateElement) {
              var usageStateInstance;
              usageStateInstance = usageStateElement;
              siteInstance.usageState = usageStateInstance;
            }
            
            var webSpaceElement = sitesElement.WEBSPACE ? sitesElement.WEBSPACE.length === 1 ? sitesElement.WEBSPACE[0] : sitesElement.WEBSPACE : null;
            if (webSpaceElement) {
              var webSpaceInstance;
              webSpaceInstance = webSpaceElement;
              siteInstance.webSpace = webSpaceInstance;
            }
          }
        }
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * Get the available geo regions for this webspace.
   *
   * @param {Function} callback
   *
   * @returns {WebSpacesListGeoRegionsResponse} - The Get DNS Suffix operation
   * response.
   */
  WebSpaceOperations.prototype.listGeoRegions = function(callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/WebSpaces?properties=georegions';
    
    // Create HTTP transport objects
    var httpRequest = {};
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2013-03-01';
    
    // Set Credentials
    httpRequest.key = this.client.credentials.keyvalue;
    httpRequest.cert = this.client.credentials.certvalue;
    
    // Send Request
    return request(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = { geoRegions: [] };
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        
        var geoRegionsSequenceElement = responseDoc.GEOREGIONS ? responseDoc.GEOREGIONS.length === 1 ? responseDoc.GEOREGIONS[0] : responseDoc.GEOREGIONS : null;
        if (geoRegionsSequenceElement) {
          for (var loweredIndex1 = 0; loweredIndex1 < geoRegionsSequenceElement.GEOREGION.length; loweredIndex1 = loweredIndex1 + 1) {
            var geoRegionsElement = geoRegionsSequenceElement.GEOREGION[loweredIndex1];
            var geoRegionInstance = {};
            result.geoRegions.push(geoRegionInstance);
            
            var descriptionElement = geoRegionsElement.DESCRIPTION ? geoRegionsElement.DESCRIPTION.length === 1 ? geoRegionsElement.DESCRIPTION[0] : geoRegionsElement.DESCRIPTION : null;
            if (descriptionElement) {
              var descriptionInstance;
              descriptionInstance = descriptionElement;
              geoRegionInstance.description = descriptionInstance;
            }
            
            var nameElement = geoRegionsElement.NAME ? geoRegionsElement.NAME.length === 1 ? geoRegionsElement.NAME[0] : geoRegionsElement.NAME : null;
            if (nameElement) {
              var nameInstance;
              nameInstance = nameElement;
              geoRegionInstance.name = nameInstance;
            }
            
            var sortOrderElement = geoRegionsElement.SORTORDER ? geoRegionsElement.SORTORDER.length === 1 ? geoRegionsElement.SORTORDER[0] : geoRegionsElement.SORTORDER : null;
            if (sortOrderElement) {
              var sortOrderInstance;
              sortOrderInstance = parseInt(sortOrderElement, 10);
              geoRegionInstance.sortOrder = sortOrderInstance;
            }
          }
        }
        
        return callback(null, result);
      });
    });
  };
  
  return WebSpaceOperations;
})();

/**
 * Operations for managing the web sites in a web space.
 */
var WebSiteOperations = (function() {
  /**
   * Initializes a new instance of the WebSiteOperations class.
   *
   * @constructor
   *
   * @param {WebSiteManagementClient} client - Reference to the service client.
   */
  function WebSiteOperations(client) {
    this.client = client;
  }
  
  /**
   * You can update the settings for a web site by using the HTTP PUT method
   * and by specifying the settings in the request body.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/dn167005.aspx for
   * more information)
   *
   * @param {String} webSpaceName - The name of the web space.
   *
   * @param {String} webSiteName - The name of the web site.
   *
   * @param {WebSiteUpdateHostNamesParameters} parameters - Parameters supplied
   * to the Update Web Site Host Names operation.
   *
   * @param {Function} callback
   *
   * @returns {WebSiteUpdateHostNamesResponse} - The Update Web Site operation
   * response.
   */
  WebSiteOperations.prototype.updateHostNames = function(webSpaceName, webSiteName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (webSpaceName === null || webSpaceName === undefined) {
      return callback(new Error('webSpaceName cannot be null.'));
    }
    if (webSiteName === null || webSiteName === undefined) {
      return callback(new Error('webSiteName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.hostNames === null || parameters.hostNames === undefined) {
      return callback(new Error('parameters.hostNames cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/WebSpaces/' + webSpaceName + '/sites/' + webSiteName;
    
    // Create HTTP transport objects
    var httpRequest = {};
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2013-03-01';
    httpRequest.headers['Content-Type'] = 'application/xml';
    
    // Set Credentials
    httpRequest.key = this.client.credentials.keyvalue;
    httpRequest.cert = this.client.credentials.certvalue;
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = {};
    
    var siteElement = js2xml.createElement('Site', 'http://schemas.microsoft.com/windowsazure');
    js2xml.addChildElement(requestDoc, siteElement);
    
    var hostNamesSequenceElement = js2xml.createElement('HostNames', 'http://schemas.microsoft.com/windowsazure');
    for (var loweredIndex1 = 0; loweredIndex1 < parameters.hostNames.length; loweredIndex1 = loweredIndex1 + 1) {
      var hostNamesItem = parameters.hostNames[loweredIndex1];
      var hostNamesItemElement = js2xml.createElement('string', 'http://schemas.microsoft.com/2003/10/Serialization/Arrays');
      js2xml.setElementValue(hostNamesItemElement, hostNamesItem);
      js2xml.addChildElement(hostNamesSequenceElement, hostNamesItemElement);
    }
    js2xml.addChildElement(siteElement, hostNamesSequenceElement);
    
    requestContent = js2xml.serializeDocument(requestDoc);
    httpRequest.body = requestContent;
    // Send Request
    return request(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var siteElement2 = responseDoc.SITE ? responseDoc.SITE.length === 1 ? responseDoc.SITE[0] : responseDoc.SITE : null;
        if (siteElement2) {
          
          var webSiteInstance = { enabledHostNames: [], hostNameSslStates: [], hostNames: [], sslCertificates: [] };
          result.webSite = webSiteInstance;
          
          var adminEnabledElement = siteElement2.ADMINENABLED ? siteElement2.ADMINENABLED.length === 1 ? siteElement2.ADMINENABLED[0] : siteElement2.ADMINENABLED : null;
          if (adminEnabledElement) {
            var adminEnabledInstance;
            adminEnabledInstance = adminEnabledElement;
            webSiteInstance.adminEnabled = adminEnabledInstance;
          }
          
          var availabilityStateElement = siteElement2.AVAILABILITYSTATE ? siteElement2.AVAILABILITYSTATE.length === 1 ? siteElement2.AVAILABILITYSTATE[0] : siteElement2.AVAILABILITYSTATE : null;
          if (availabilityStateElement) {
            var availabilityStateInstance;
            availabilityStateInstance = availabilityStateElement;
            webSiteInstance.availabilityState = availabilityStateInstance;
          }
          
          var computeModeElement = siteElement2.COMPUTEMODE ? siteElement2.COMPUTEMODE.length === 1 ? siteElement2.COMPUTEMODE[0] : siteElement2.COMPUTEMODE : null;
          if (computeModeElement) {
            var computeModeInstance;
            computeModeInstance = computeModeElement;
            webSiteInstance.computeMode = computeModeInstance;
          }
          
          var enabledElement = siteElement2.ENABLED ? siteElement2.ENABLED.length === 1 ? siteElement2.ENABLED[0] : siteElement2.ENABLED : null;
          if (enabledElement) {
            var enabledInstance;
            enabledInstance = enabledElement;
            webSiteInstance.enabled = enabledInstance;
          }
          
          var enabledHostNamesSequenceElement = siteElement2.ENABLEDHOSTNAMES ? siteElement2.ENABLEDHOSTNAMES.length === 1 ? siteElement2.ENABLEDHOSTNAMES[0] : siteElement2.ENABLEDHOSTNAMES : null;
          if (enabledHostNamesSequenceElement) {
            for (var loweredIndex2 = 0; loweredIndex2 < enabledHostNamesSequenceElement.STRING.length; loweredIndex2 = loweredIndex2 + 1) {
              var enabledHostNamesElement = enabledHostNamesSequenceElement.STRING[loweredIndex2];
              webSiteInstance.enabledHostNames.push(enabledHostNamesElement);
            }
          }
          
          var hostNameSslStatesSequenceElement = siteElement2.HOSTNAMESSLSTATES ? siteElement2.HOSTNAMESSLSTATES.length === 1 ? siteElement2.HOSTNAMESSLSTATES[0] : siteElement2.HOSTNAMESSLSTATES : null;
          if (hostNameSslStatesSequenceElement) {
            for (var loweredIndex3 = 0; loweredIndex3 < hostNameSslStatesSequenceElement.WEBSITEHOSTNAMESSLSTATE.length; loweredIndex3 = loweredIndex3 + 1) {
              var hostNameSslStatesElement = hostNameSslStatesSequenceElement.WEBSITEHOSTNAMESSLSTATE[loweredIndex3];
              var webSiteHostNameSslStateInstance = {};
              webSiteInstance.hostNameSslStates.push(webSiteHostNameSslStateInstance);
              
              var nameElement = hostNameSslStatesElement.NAME ? hostNameSslStatesElement.NAME.length === 1 ? hostNameSslStatesElement.NAME[0] : hostNameSslStatesElement.NAME : null;
              if (nameElement) {
                var nameInstance;
                nameInstance = nameElement;
                webSiteHostNameSslStateInstance.name = nameInstance;
              }
              
              var sslStateElement = hostNameSslStatesElement.SSLSTATE ? hostNameSslStatesElement.SSLSTATE.length === 1 ? hostNameSslStatesElement.SSLSTATE[0] : hostNameSslStatesElement.SSLSTATE : null;
              if (sslStateElement) {
                var sslStateInstance;
                sslStateInstance = sslStateElement;
                webSiteHostNameSslStateInstance.sslState = sslStateInstance;
              }
              
              var thumbprintElement = hostNameSslStatesElement.THUMBPRINT ? hostNameSslStatesElement.THUMBPRINT.length === 1 ? hostNameSslStatesElement.THUMBPRINT[0] : hostNameSslStatesElement.THUMBPRINT : null;
              if (thumbprintElement) {
                var thumbprintInstance;
                thumbprintInstance = thumbprintElement;
                webSiteHostNameSslStateInstance.thumbprint = thumbprintInstance;
              }
              
              var virtualIPElement = hostNameSslStatesElement.VIRTUALIP ? hostNameSslStatesElement.VIRTUALIP.length === 1 ? hostNameSslStatesElement.VIRTUALIP[0] : hostNameSslStatesElement.VIRTUALIP : null;
              if (virtualIPElement) {
                var virtualIPInstance;
                virtualIPInstance = virtualIPElement;
                webSiteHostNameSslStateInstance.virtualIP = virtualIPInstance;
              }
            }
          }
          
          var hostNamesSequenceElement2 = siteElement2.HOSTNAMES ? siteElement2.HOSTNAMES.length === 1 ? siteElement2.HOSTNAMES[0] : siteElement2.HOSTNAMES : null;
          if (hostNamesSequenceElement2) {
            for (var loweredIndex4 = 0; loweredIndex4 < hostNamesSequenceElement2.STRING.length; loweredIndex4 = loweredIndex4 + 1) {
              var hostNamesElement = hostNamesSequenceElement2.STRING[loweredIndex4];
              webSiteInstance.hostNames.push(hostNamesElement);
            }
          }
          
          var lastModifiedTimeUtcElement = siteElement2.LASTMODIFIEDTIMEUTC ? siteElement2.LASTMODIFIEDTIMEUTC.length === 1 ? siteElement2.LASTMODIFIEDTIMEUTC[0] : siteElement2.LASTMODIFIEDTIMEUTC : null;
          if (lastModifiedTimeUtcElement) {
            var lastModifiedTimeUtcInstance;
            lastModifiedTimeUtcInstance = new Date(lastModifiedTimeUtcElement);
            webSiteInstance.lastModifiedTimeUtc = lastModifiedTimeUtcInstance;
          }
          
          var nameElement2 = siteElement2.NAME ? siteElement2.NAME.length === 1 ? siteElement2.NAME[0] : siteElement2.NAME : null;
          if (nameElement2) {
            var nameInstance2;
            nameInstance2 = nameElement2;
            webSiteInstance.name = nameInstance2;
          }
          
          var ownerElement = siteElement2.OWNER ? siteElement2.OWNER.length === 1 ? siteElement2.OWNER[0] : siteElement2.OWNER : null;
          if (ownerElement) {
            var ownerInstance;
            ownerInstance = ownerElement;
            webSiteInstance.owner = ownerInstance;
          }
          
          var repositorySiteNameElement = siteElement2.REPOSITORYSITENAME ? siteElement2.REPOSITORYSITENAME.length === 1 ? siteElement2.REPOSITORYSITENAME[0] : siteElement2.REPOSITORYSITENAME : null;
          if (repositorySiteNameElement) {
            var repositorySiteNameInstance;
            repositorySiteNameInstance = repositorySiteNameElement;
            webSiteInstance.repositorySiteName = repositorySiteNameInstance;
          }
          
          var runtimeAvailabilityStateElement = siteElement2.RUNTIMEAVAILABILITYSTATE ? siteElement2.RUNTIMEAVAILABILITYSTATE.length === 1 ? siteElement2.RUNTIMEAVAILABILITYSTATE[0] : siteElement2.RUNTIMEAVAILABILITYSTATE : null;
          if (runtimeAvailabilityStateElement) {
            var runtimeAvailabilityStateInstance;
            runtimeAvailabilityStateInstance = runtimeAvailabilityStateElement;
            webSiteInstance.runtimeAvailabilityState = runtimeAvailabilityStateInstance;
          }
          
          var sSLCertificatesSequenceElement = siteElement2.SSLCERTIFICATES ? siteElement2.SSLCERTIFICATES.length === 1 ? siteElement2.SSLCERTIFICATES[0] : siteElement2.SSLCERTIFICATES : null;
          if (sSLCertificatesSequenceElement) {
            for (var loweredIndex5 = 0; loweredIndex5 < sSLCertificatesSequenceElement.CERTIFICATE.length; loweredIndex5 = loweredIndex5 + 1) {
              var sSLCertificatesElement = sSLCertificatesSequenceElement.CERTIFICATE[loweredIndex5];
              var certificateInstance = { hostNames: [] };
              webSiteInstance.sslCertificates.push(certificateInstance);
              
              var expirationDateElement = sSLCertificatesElement.EXPIRATIONDATE ? sSLCertificatesElement.EXPIRATIONDATE.length === 1 ? sSLCertificatesElement.EXPIRATIONDATE[0] : sSLCertificatesElement.EXPIRATIONDATE : null;
              if (expirationDateElement) {
                var expirationDateInstance;
                expirationDateInstance = new Date(expirationDateElement);
                certificateInstance.expirationDate = expirationDateInstance;
              }
              
              var friendlyNameElement = sSLCertificatesElement.FRIENDLYNAME ? sSLCertificatesElement.FRIENDLYNAME.length === 1 ? sSLCertificatesElement.FRIENDLYNAME[0] : sSLCertificatesElement.FRIENDLYNAME : null;
              if (friendlyNameElement) {
                var friendlyNameInstance;
                friendlyNameInstance = friendlyNameElement;
                certificateInstance.friendlyName = friendlyNameInstance;
              }
              
              var hostNamesSequenceElement3 = sSLCertificatesElement.HOSTNAMES ? sSLCertificatesElement.HOSTNAMES.length === 1 ? sSLCertificatesElement.HOSTNAMES[0] : sSLCertificatesElement.HOSTNAMES : null;
              if (hostNamesSequenceElement3) {
                for (var loweredIndex6 = 0; loweredIndex6 < hostNamesSequenceElement3.STRING.length; loweredIndex6 = loweredIndex6 + 1) {
                  var hostNamesElement2 = hostNamesSequenceElement3.STRING[loweredIndex6];
                  certificateInstance.hostNames.push(hostNamesElement2);
                }
              }
              
              var issueDateElement = sSLCertificatesElement.ISSUEDATE ? sSLCertificatesElement.ISSUEDATE.length === 1 ? sSLCertificatesElement.ISSUEDATE[0] : sSLCertificatesElement.ISSUEDATE : null;
              if (issueDateElement) {
                var issueDateInstance;
                issueDateInstance = new Date(issueDateElement);
                certificateInstance.issueDate = issueDateInstance;
              }
              
              var issuerElement = sSLCertificatesElement.ISSUER ? sSLCertificatesElement.ISSUER.length === 1 ? sSLCertificatesElement.ISSUER[0] : sSLCertificatesElement.ISSUER : null;
              if (issuerElement) {
                var issuerInstance;
                issuerInstance = issuerElement;
                certificateInstance.issuer = issuerInstance;
              }
              
              var passwordElement = sSLCertificatesElement.PASSWORD ? sSLCertificatesElement.PASSWORD.length === 1 ? sSLCertificatesElement.PASSWORD[0] : sSLCertificatesElement.PASSWORD : null;
              if (passwordElement) {
                var passwordInstance;
                passwordInstance = passwordElement;
                certificateInstance.password = passwordInstance;
              }
              
              var pfxBlobElement = sSLCertificatesElement.PFXBLOB ? sSLCertificatesElement.PFXBLOB.length === 1 ? sSLCertificatesElement.PFXBLOB[0] : sSLCertificatesElement.PFXBLOB : null;
              if (pfxBlobElement) {
                var pfxBlobInstance;
                pfxBlobInstance = new Buffer(pfxBlobElement, 'base64').toString('ascii');
                certificateInstance.pfxBlob = pfxBlobInstance;
              }
              
              var selfLinkElement = sSLCertificatesElement.SELFLINK ? sSLCertificatesElement.SELFLINK.length === 1 ? sSLCertificatesElement.SELFLINK[0] : sSLCertificatesElement.SELFLINK : null;
              if (selfLinkElement) {
                var selfLinkInstance;
                selfLinkInstance = selfLinkElement;
                certificateInstance.selfLinkUri = selfLinkInstance;
              }
              
              var siteNameElement = sSLCertificatesElement.SITENAME ? sSLCertificatesElement.SITENAME.length === 1 ? sSLCertificatesElement.SITENAME[0] : sSLCertificatesElement.SITENAME : null;
              if (siteNameElement) {
                var siteNameInstance;
                siteNameInstance = siteNameElement;
                certificateInstance.siteName = siteNameInstance;
              }
              
              var subjectNameElement = sSLCertificatesElement.SUBJECTNAME ? sSLCertificatesElement.SUBJECTNAME.length === 1 ? sSLCertificatesElement.SUBJECTNAME[0] : sSLCertificatesElement.SUBJECTNAME : null;
              if (subjectNameElement) {
                var subjectNameInstance;
                subjectNameInstance = subjectNameElement;
                certificateInstance.subjectName = subjectNameInstance;
              }
              
              var thumbprintElement2 = sSLCertificatesElement.THUMBPRINT ? sSLCertificatesElement.THUMBPRINT.length === 1 ? sSLCertificatesElement.THUMBPRINT[0] : sSLCertificatesElement.THUMBPRINT : null;
              if (thumbprintElement2) {
                var thumbprintInstance2;
                thumbprintInstance2 = thumbprintElement2;
                certificateInstance.thumbprint = thumbprintInstance2;
              }
              
              var toDeleteElement = sSLCertificatesElement.TODELETE ? sSLCertificatesElement.TODELETE.length === 1 ? sSLCertificatesElement.TODELETE[0] : sSLCertificatesElement.TODELETE : null;
              if (toDeleteElement) {
                var toDeleteInstance;
                toDeleteInstance = toDeleteElement;
                certificateInstance.isToBeDeleted = toDeleteInstance;
              }
              
              var validElement = sSLCertificatesElement.VALID ? sSLCertificatesElement.VALID.length === 1 ? sSLCertificatesElement.VALID[0] : sSLCertificatesElement.VALID : null;
              if (validElement) {
                var validInstance;
                validInstance = validElement;
                certificateInstance.isValid = validInstance;
              }
            }
          }
          
          var selfLinkElement2 = siteElement2.SELFLINK ? siteElement2.SELFLINK.length === 1 ? siteElement2.SELFLINK[0] : siteElement2.SELFLINK : null;
          if (selfLinkElement2) {
            var selfLinkInstance2;
            selfLinkInstance2 = selfLinkElement2;
            webSiteInstance.uri = selfLinkInstance2;
          }
          
          var serverFarmElement = siteElement2.SERVERFARM ? siteElement2.SERVERFARM.length === 1 ? siteElement2.SERVERFARM[0] : siteElement2.SERVERFARM : null;
          if (serverFarmElement) {
            var serverFarmInstance;
            serverFarmInstance = serverFarmElement;
            webSiteInstance.serverFarm = serverFarmInstance;
          }
          
          var siteModeElement = siteElement2.SITEMODE ? siteElement2.SITEMODE.length === 1 ? siteElement2.SITEMODE[0] : siteElement2.SITEMODE : null;
          if (siteModeElement) {
            var siteModeInstance;
            siteModeInstance = siteModeElement;
            webSiteInstance.siteMode = siteModeInstance;
          }
          
          var sitePropertiesElement = siteElement2.SITEPROPERTIES ? siteElement2.SITEPROPERTIES.length === 1 ? siteElement2.SITEPROPERTIES[0] : siteElement2.SITEPROPERTIES : null;
          if (sitePropertiesElement) {
            var sitePropertiesInstance = { appSettings: {}, metadata: {}, properties: {} };
            webSiteInstance.siteProperties = sitePropertiesInstance;
            
            var appSettingsSequenceElement = sitePropertiesElement.APPSETTINGS ? sitePropertiesElement.APPSETTINGS.length === 1 ? sitePropertiesElement.APPSETTINGS[0] : sitePropertiesElement.APPSETTINGS : null;
            if (appSettingsSequenceElement) {
              for (var loweredIndex7 = 0; loweredIndex7 < appSettingsSequenceElement.NAMEVALUEPAIR.length; loweredIndex7 = loweredIndex7 + 1) {
                var appSettingsElement = appSettingsSequenceElement.NAMEVALUEPAIR[loweredIndex7];
                var appSettingsKey = appSettingsElement.NAME ? appSettingsElement.NAME.length === 1 ? appSettingsElement.NAME[0] : appSettingsElement.NAME : null;
                var appSettingsValue = appSettingsElement.VALUE ? appSettingsElement.VALUE.length === 1 ? appSettingsElement.VALUE[0] : appSettingsElement.VALUE : null;
                sitePropertiesInstance.appSettings[appSettingsKey] = appSettingsValue;
              }
            }
            
            var appSettingsSequenceElement2 = sitePropertiesElement.APPSETTINGS ? sitePropertiesElement.APPSETTINGS.length === 1 ? sitePropertiesElement.APPSETTINGS[0] : sitePropertiesElement.APPSETTINGS : null;
            if (appSettingsSequenceElement2) {
              for (var loweredIndex8 = 0; loweredIndex8 < appSettingsSequenceElement2.NAMEVALUEPAIR.length; loweredIndex8 = loweredIndex8 + 1) {
                var appSettingsElement2 = appSettingsSequenceElement2.NAMEVALUEPAIR[loweredIndex8];
                var appSettingsKey2 = appSettingsElement2.NAME ? appSettingsElement2.NAME.length === 1 ? appSettingsElement2.NAME[0] : appSettingsElement2.NAME : null;
                var appSettingsValue2 = appSettingsElement2.VALUE ? appSettingsElement2.VALUE.length === 1 ? appSettingsElement2.VALUE[0] : appSettingsElement2.VALUE : null;
                sitePropertiesInstance.metadata[appSettingsKey2] = appSettingsValue2;
              }
            }
            
            var appSettingsSequenceElement3 = sitePropertiesElement.APPSETTINGS ? sitePropertiesElement.APPSETTINGS.length === 1 ? sitePropertiesElement.APPSETTINGS[0] : sitePropertiesElement.APPSETTINGS : null;
            if (appSettingsSequenceElement3) {
              for (var loweredIndex9 = 0; loweredIndex9 < appSettingsSequenceElement3.NAMEVALUEPAIR.length; loweredIndex9 = loweredIndex9 + 1) {
                var appSettingsElement3 = appSettingsSequenceElement3.NAMEVALUEPAIR[loweredIndex9];
                var appSettingsKey3 = appSettingsElement3.NAME ? appSettingsElement3.NAME.length === 1 ? appSettingsElement3.NAME[0] : appSettingsElement3.NAME : null;
                var appSettingsValue3 = appSettingsElement3.VALUE ? appSettingsElement3.VALUE.length === 1 ? appSettingsElement3.VALUE[0] : appSettingsElement3.VALUE : null;
                sitePropertiesInstance.properties[appSettingsKey3] = appSettingsValue3;
              }
            }
          }
          
          var stateElement = siteElement2.STATE ? siteElement2.STATE.length === 1 ? siteElement2.STATE[0] : siteElement2.STATE : null;
          if (stateElement) {
            var stateInstance;
            stateInstance = stateElement;
            webSiteInstance.state = stateInstance;
          }
          
          var usageStateElement = siteElement2.USAGESTATE ? siteElement2.USAGESTATE.length === 1 ? siteElement2.USAGESTATE[0] : siteElement2.USAGESTATE : null;
          if (usageStateElement) {
            var usageStateInstance;
            usageStateInstance = usageStateElement;
            webSiteInstance.usageState = usageStateInstance;
          }
          
          var webSpaceElement = siteElement2.WEBSPACE ? siteElement2.WEBSPACE.length === 1 ? siteElement2.WEBSPACE[0] : siteElement2.WEBSPACE : null;
          if (webSpaceElement) {
            var webSpaceInstance;
            webSpaceInstance = webSpaceElement;
            webSiteInstance.webSpace = webSpaceInstance;
          }
        }
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * You can create a web site by using a POST request that includes the name
   * of the web site and other information in the request body.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/dn166986.aspx for
   * more information)
   *
   * @param {String} webSpaceName - The name of the web space.
   *
   * @param {WebSiteCreateParameters} parameters - Parameters supplied to the
   * Create Web Site operation.
   *
   * @param {Function} callback
   *
   * @returns {WebSiteCreateResponse} - The Create Web Space operation response.
   */
  WebSiteOperations.prototype.create = function(webSpaceName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (webSpaceName === null || webSpaceName === undefined) {
      return callback(new Error('webSpaceName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.hostNames === null || parameters.hostNames === undefined) {
      return callback(new Error('parameters.hostNames cannot be null.'));
    }
    if (parameters.name === null || parameters.name === undefined) {
      return callback(new Error('parameters.name cannot be null.'));
    }
    if (parameters.webSpace) {
      if (parameters.webSpace.geoRegion === null || parameters.webSpace.geoRegion === undefined) {
        return callback(new Error('parameters.webSpace.geoRegion cannot be null.'));
      }
      if (parameters.webSpace.name === null || parameters.webSpace.name === undefined) {
        return callback(new Error('parameters.webSpace.name cannot be null.'));
      }
      if (parameters.webSpace.plan === null || parameters.webSpace.plan === undefined) {
        return callback(new Error('parameters.webSpace.plan cannot be null.'));
      }
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/WebSpaces/' + webSpaceName + '/sites';
    
    // Create HTTP transport objects
    var httpRequest = {};
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2013-03-01';
    httpRequest.headers['Content-Type'] = 'application/xml';
    
    // Set Credentials
    httpRequest.key = this.client.credentials.keyvalue;
    httpRequest.cert = this.client.credentials.certvalue;
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = {};
    
    var siteElement = js2xml.createElement('Site', 'http://schemas.microsoft.com/windowsazure');
    js2xml.addChildElement(requestDoc, siteElement);
    
    var hostNamesSequenceElement = js2xml.createElement('HostNames', 'http://schemas.microsoft.com/windowsazure');
    for (var loweredIndex1 = 0; loweredIndex1 < parameters.hostNames.length; loweredIndex1 = loweredIndex1 + 1) {
      var hostNamesItem = parameters.hostNames[loweredIndex1];
      var hostNamesItemElement = js2xml.createElement('string', 'http://schemas.microsoft.com/2003/10/Serialization/Arrays');
      js2xml.setElementValue(hostNamesItemElement, hostNamesItem);
      js2xml.addChildElement(hostNamesSequenceElement, hostNamesItemElement);
    }
    js2xml.addChildElement(siteElement, hostNamesSequenceElement);
    
    var nameElement = js2xml.createElement('Name', 'http://schemas.microsoft.com/windowsazure');
    js2xml.setElementValue(nameElement, parameters.name);
    js2xml.addChildElement(siteElement, nameElement);
    
    var computeModeElement = js2xml.createElement('ComputeMode', 'http://schemas.microsoft.com/windowsazure');
    js2xml.setElementValue(computeModeElement, parameters.computeMode.toString());
    js2xml.addChildElement(siteElement, computeModeElement);
    
    if (parameters.serverFarm) {
      var serverFarmElement = js2xml.createElement('ServerFarm', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(serverFarmElement, parameters.serverFarm);
      js2xml.addChildElement(siteElement, serverFarmElement);
    }
    
    var siteModeElement = js2xml.createElement('SiteMode', 'http://schemas.microsoft.com/windowsazure');
    js2xml.setElementValue(siteModeElement, parameters.siteMode.toString());
    js2xml.addChildElement(siteElement, siteModeElement);
    
    if (parameters.webSpace) {
      var webspaceToCreateElement = js2xml.createElement('WebspaceToCreate', 'http://schemas.microsoft.com/windowsazure');
      js2xml.addChildElement(siteElement, webspaceToCreateElement);
      
      var geoRegionElement = js2xml.createElement('GeoRegion', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(geoRegionElement, parameters.webSpace.geoRegion);
      js2xml.addChildElement(webspaceToCreateElement, geoRegionElement);
      
      var nameElement2 = js2xml.createElement('Name', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(nameElement2, parameters.webSpace.name);
      js2xml.addChildElement(webspaceToCreateElement, nameElement2);
      
      var planElement = js2xml.createElement('Plan', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(planElement, parameters.webSpace.plan);
      js2xml.addChildElement(webspaceToCreateElement, planElement);
    }
    
    requestContent = js2xml.serializeDocument(requestDoc);
    httpRequest.body = requestContent;
    // Send Request
    return request(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var siteElement2 = responseDoc.SITE ? responseDoc.SITE.length === 1 ? responseDoc.SITE[0] : responseDoc.SITE : null;
        if (siteElement2) {
          
          var webSiteInstance = { enabledHostNames: [], hostNameSslStates: [], hostNames: [], sslCertificates: [] };
          result.webSite = webSiteInstance;
          
          var adminEnabledElement = siteElement2.ADMINENABLED ? siteElement2.ADMINENABLED.length === 1 ? siteElement2.ADMINENABLED[0] : siteElement2.ADMINENABLED : null;
          if (adminEnabledElement) {
            var adminEnabledInstance;
            adminEnabledInstance = adminEnabledElement;
            webSiteInstance.adminEnabled = adminEnabledInstance;
          }
          
          var availabilityStateElement = siteElement2.AVAILABILITYSTATE ? siteElement2.AVAILABILITYSTATE.length === 1 ? siteElement2.AVAILABILITYSTATE[0] : siteElement2.AVAILABILITYSTATE : null;
          if (availabilityStateElement) {
            var availabilityStateInstance;
            availabilityStateInstance = availabilityStateElement;
            webSiteInstance.availabilityState = availabilityStateInstance;
          }
          
          var computeModeElement2 = siteElement2.COMPUTEMODE ? siteElement2.COMPUTEMODE.length === 1 ? siteElement2.COMPUTEMODE[0] : siteElement2.COMPUTEMODE : null;
          if (computeModeElement2) {
            var computeModeInstance;
            computeModeInstance = computeModeElement2;
            webSiteInstance.computeMode = computeModeInstance;
          }
          
          var enabledElement = siteElement2.ENABLED ? siteElement2.ENABLED.length === 1 ? siteElement2.ENABLED[0] : siteElement2.ENABLED : null;
          if (enabledElement) {
            var enabledInstance;
            enabledInstance = enabledElement;
            webSiteInstance.enabled = enabledInstance;
          }
          
          var enabledHostNamesSequenceElement = siteElement2.ENABLEDHOSTNAMES ? siteElement2.ENABLEDHOSTNAMES.length === 1 ? siteElement2.ENABLEDHOSTNAMES[0] : siteElement2.ENABLEDHOSTNAMES : null;
          if (enabledHostNamesSequenceElement) {
            for (var loweredIndex2 = 0; loweredIndex2 < enabledHostNamesSequenceElement.STRING.length; loweredIndex2 = loweredIndex2 + 1) {
              var enabledHostNamesElement = enabledHostNamesSequenceElement.STRING[loweredIndex2];
              webSiteInstance.enabledHostNames.push(enabledHostNamesElement);
            }
          }
          
          var hostNameSslStatesSequenceElement = siteElement2.HOSTNAMESSLSTATES ? siteElement2.HOSTNAMESSLSTATES.length === 1 ? siteElement2.HOSTNAMESSLSTATES[0] : siteElement2.HOSTNAMESSLSTATES : null;
          if (hostNameSslStatesSequenceElement) {
            for (var loweredIndex3 = 0; loweredIndex3 < hostNameSslStatesSequenceElement.WEBSITEHOSTNAMESSLSTATE.length; loweredIndex3 = loweredIndex3 + 1) {
              var hostNameSslStatesElement = hostNameSslStatesSequenceElement.WEBSITEHOSTNAMESSLSTATE[loweredIndex3];
              var webSiteHostNameSslStateInstance = {};
              webSiteInstance.hostNameSslStates.push(webSiteHostNameSslStateInstance);
              
              var nameElement3 = hostNameSslStatesElement.NAME ? hostNameSslStatesElement.NAME.length === 1 ? hostNameSslStatesElement.NAME[0] : hostNameSslStatesElement.NAME : null;
              if (nameElement3) {
                var nameInstance;
                nameInstance = nameElement3;
                webSiteHostNameSslStateInstance.name = nameInstance;
              }
              
              var sslStateElement = hostNameSslStatesElement.SSLSTATE ? hostNameSslStatesElement.SSLSTATE.length === 1 ? hostNameSslStatesElement.SSLSTATE[0] : hostNameSslStatesElement.SSLSTATE : null;
              if (sslStateElement) {
                var sslStateInstance;
                sslStateInstance = sslStateElement;
                webSiteHostNameSslStateInstance.sslState = sslStateInstance;
              }
              
              var thumbprintElement = hostNameSslStatesElement.THUMBPRINT ? hostNameSslStatesElement.THUMBPRINT.length === 1 ? hostNameSslStatesElement.THUMBPRINT[0] : hostNameSslStatesElement.THUMBPRINT : null;
              if (thumbprintElement) {
                var thumbprintInstance;
                thumbprintInstance = thumbprintElement;
                webSiteHostNameSslStateInstance.thumbprint = thumbprintInstance;
              }
              
              var virtualIPElement = hostNameSslStatesElement.VIRTUALIP ? hostNameSslStatesElement.VIRTUALIP.length === 1 ? hostNameSslStatesElement.VIRTUALIP[0] : hostNameSslStatesElement.VIRTUALIP : null;
              if (virtualIPElement) {
                var virtualIPInstance;
                virtualIPInstance = virtualIPElement;
                webSiteHostNameSslStateInstance.virtualIP = virtualIPInstance;
              }
            }
          }
          
          var hostNamesSequenceElement2 = siteElement2.HOSTNAMES ? siteElement2.HOSTNAMES.length === 1 ? siteElement2.HOSTNAMES[0] : siteElement2.HOSTNAMES : null;
          if (hostNamesSequenceElement2) {
            for (var loweredIndex4 = 0; loweredIndex4 < hostNamesSequenceElement2.STRING.length; loweredIndex4 = loweredIndex4 + 1) {
              var hostNamesElement = hostNamesSequenceElement2.STRING[loweredIndex4];
              webSiteInstance.hostNames.push(hostNamesElement);
            }
          }
          
          var lastModifiedTimeUtcElement = siteElement2.LASTMODIFIEDTIMEUTC ? siteElement2.LASTMODIFIEDTIMEUTC.length === 1 ? siteElement2.LASTMODIFIEDTIMEUTC[0] : siteElement2.LASTMODIFIEDTIMEUTC : null;
          if (lastModifiedTimeUtcElement) {
            var lastModifiedTimeUtcInstance;
            lastModifiedTimeUtcInstance = new Date(lastModifiedTimeUtcElement);
            webSiteInstance.lastModifiedTimeUtc = lastModifiedTimeUtcInstance;
          }
          
          var nameElement4 = siteElement2.NAME ? siteElement2.NAME.length === 1 ? siteElement2.NAME[0] : siteElement2.NAME : null;
          if (nameElement4) {
            var nameInstance2;
            nameInstance2 = nameElement4;
            webSiteInstance.name = nameInstance2;
          }
          
          var ownerElement = siteElement2.OWNER ? siteElement2.OWNER.length === 1 ? siteElement2.OWNER[0] : siteElement2.OWNER : null;
          if (ownerElement) {
            var ownerInstance;
            ownerInstance = ownerElement;
            webSiteInstance.owner = ownerInstance;
          }
          
          var repositorySiteNameElement = siteElement2.REPOSITORYSITENAME ? siteElement2.REPOSITORYSITENAME.length === 1 ? siteElement2.REPOSITORYSITENAME[0] : siteElement2.REPOSITORYSITENAME : null;
          if (repositorySiteNameElement) {
            var repositorySiteNameInstance;
            repositorySiteNameInstance = repositorySiteNameElement;
            webSiteInstance.repositorySiteName = repositorySiteNameInstance;
          }
          
          var runtimeAvailabilityStateElement = siteElement2.RUNTIMEAVAILABILITYSTATE ? siteElement2.RUNTIMEAVAILABILITYSTATE.length === 1 ? siteElement2.RUNTIMEAVAILABILITYSTATE[0] : siteElement2.RUNTIMEAVAILABILITYSTATE : null;
          if (runtimeAvailabilityStateElement) {
            var runtimeAvailabilityStateInstance;
            runtimeAvailabilityStateInstance = runtimeAvailabilityStateElement;
            webSiteInstance.runtimeAvailabilityState = runtimeAvailabilityStateInstance;
          }
          
          var sSLCertificatesSequenceElement = siteElement2.SSLCERTIFICATES ? siteElement2.SSLCERTIFICATES.length === 1 ? siteElement2.SSLCERTIFICATES[0] : siteElement2.SSLCERTIFICATES : null;
          if (sSLCertificatesSequenceElement) {
            for (var loweredIndex5 = 0; loweredIndex5 < sSLCertificatesSequenceElement.CERTIFICATE.length; loweredIndex5 = loweredIndex5 + 1) {
              var sSLCertificatesElement = sSLCertificatesSequenceElement.CERTIFICATE[loweredIndex5];
              var certificateInstance = { hostNames: [] };
              webSiteInstance.sslCertificates.push(certificateInstance);
              
              var expirationDateElement = sSLCertificatesElement.EXPIRATIONDATE ? sSLCertificatesElement.EXPIRATIONDATE.length === 1 ? sSLCertificatesElement.EXPIRATIONDATE[0] : sSLCertificatesElement.EXPIRATIONDATE : null;
              if (expirationDateElement) {
                var expirationDateInstance;
                expirationDateInstance = new Date(expirationDateElement);
                certificateInstance.expirationDate = expirationDateInstance;
              }
              
              var friendlyNameElement = sSLCertificatesElement.FRIENDLYNAME ? sSLCertificatesElement.FRIENDLYNAME.length === 1 ? sSLCertificatesElement.FRIENDLYNAME[0] : sSLCertificatesElement.FRIENDLYNAME : null;
              if (friendlyNameElement) {
                var friendlyNameInstance;
                friendlyNameInstance = friendlyNameElement;
                certificateInstance.friendlyName = friendlyNameInstance;
              }
              
              var hostNamesSequenceElement3 = sSLCertificatesElement.HOSTNAMES ? sSLCertificatesElement.HOSTNAMES.length === 1 ? sSLCertificatesElement.HOSTNAMES[0] : sSLCertificatesElement.HOSTNAMES : null;
              if (hostNamesSequenceElement3) {
                for (var loweredIndex6 = 0; loweredIndex6 < hostNamesSequenceElement3.STRING.length; loweredIndex6 = loweredIndex6 + 1) {
                  var hostNamesElement2 = hostNamesSequenceElement3.STRING[loweredIndex6];
                  certificateInstance.hostNames.push(hostNamesElement2);
                }
              }
              
              var issueDateElement = sSLCertificatesElement.ISSUEDATE ? sSLCertificatesElement.ISSUEDATE.length === 1 ? sSLCertificatesElement.ISSUEDATE[0] : sSLCertificatesElement.ISSUEDATE : null;
              if (issueDateElement) {
                var issueDateInstance;
                issueDateInstance = new Date(issueDateElement);
                certificateInstance.issueDate = issueDateInstance;
              }
              
              var issuerElement = sSLCertificatesElement.ISSUER ? sSLCertificatesElement.ISSUER.length === 1 ? sSLCertificatesElement.ISSUER[0] : sSLCertificatesElement.ISSUER : null;
              if (issuerElement) {
                var issuerInstance;
                issuerInstance = issuerElement;
                certificateInstance.issuer = issuerInstance;
              }
              
              var passwordElement = sSLCertificatesElement.PASSWORD ? sSLCertificatesElement.PASSWORD.length === 1 ? sSLCertificatesElement.PASSWORD[0] : sSLCertificatesElement.PASSWORD : null;
              if (passwordElement) {
                var passwordInstance;
                passwordInstance = passwordElement;
                certificateInstance.password = passwordInstance;
              }
              
              var pfxBlobElement = sSLCertificatesElement.PFXBLOB ? sSLCertificatesElement.PFXBLOB.length === 1 ? sSLCertificatesElement.PFXBLOB[0] : sSLCertificatesElement.PFXBLOB : null;
              if (pfxBlobElement) {
                var pfxBlobInstance;
                pfxBlobInstance = new Buffer(pfxBlobElement, 'base64').toString('ascii');
                certificateInstance.pfxBlob = pfxBlobInstance;
              }
              
              var selfLinkElement = sSLCertificatesElement.SELFLINK ? sSLCertificatesElement.SELFLINK.length === 1 ? sSLCertificatesElement.SELFLINK[0] : sSLCertificatesElement.SELFLINK : null;
              if (selfLinkElement) {
                var selfLinkInstance;
                selfLinkInstance = selfLinkElement;
                certificateInstance.selfLinkUri = selfLinkInstance;
              }
              
              var siteNameElement = sSLCertificatesElement.SITENAME ? sSLCertificatesElement.SITENAME.length === 1 ? sSLCertificatesElement.SITENAME[0] : sSLCertificatesElement.SITENAME : null;
              if (siteNameElement) {
                var siteNameInstance;
                siteNameInstance = siteNameElement;
                certificateInstance.siteName = siteNameInstance;
              }
              
              var subjectNameElement = sSLCertificatesElement.SUBJECTNAME ? sSLCertificatesElement.SUBJECTNAME.length === 1 ? sSLCertificatesElement.SUBJECTNAME[0] : sSLCertificatesElement.SUBJECTNAME : null;
              if (subjectNameElement) {
                var subjectNameInstance;
                subjectNameInstance = subjectNameElement;
                certificateInstance.subjectName = subjectNameInstance;
              }
              
              var thumbprintElement2 = sSLCertificatesElement.THUMBPRINT ? sSLCertificatesElement.THUMBPRINT.length === 1 ? sSLCertificatesElement.THUMBPRINT[0] : sSLCertificatesElement.THUMBPRINT : null;
              if (thumbprintElement2) {
                var thumbprintInstance2;
                thumbprintInstance2 = thumbprintElement2;
                certificateInstance.thumbprint = thumbprintInstance2;
              }
              
              var toDeleteElement = sSLCertificatesElement.TODELETE ? sSLCertificatesElement.TODELETE.length === 1 ? sSLCertificatesElement.TODELETE[0] : sSLCertificatesElement.TODELETE : null;
              if (toDeleteElement) {
                var toDeleteInstance;
                toDeleteInstance = toDeleteElement;
                certificateInstance.isToBeDeleted = toDeleteInstance;
              }
              
              var validElement = sSLCertificatesElement.VALID ? sSLCertificatesElement.VALID.length === 1 ? sSLCertificatesElement.VALID[0] : sSLCertificatesElement.VALID : null;
              if (validElement) {
                var validInstance;
                validInstance = validElement;
                certificateInstance.isValid = validInstance;
              }
            }
          }
          
          var selfLinkElement2 = siteElement2.SELFLINK ? siteElement2.SELFLINK.length === 1 ? siteElement2.SELFLINK[0] : siteElement2.SELFLINK : null;
          if (selfLinkElement2) {
            var selfLinkInstance2;
            selfLinkInstance2 = selfLinkElement2;
            webSiteInstance.uri = selfLinkInstance2;
          }
          
          var serverFarmElement2 = siteElement2.SERVERFARM ? siteElement2.SERVERFARM.length === 1 ? siteElement2.SERVERFARM[0] : siteElement2.SERVERFARM : null;
          if (serverFarmElement2) {
            var serverFarmInstance;
            serverFarmInstance = serverFarmElement2;
            webSiteInstance.serverFarm = serverFarmInstance;
          }
          
          var siteModeElement2 = siteElement2.SITEMODE ? siteElement2.SITEMODE.length === 1 ? siteElement2.SITEMODE[0] : siteElement2.SITEMODE : null;
          if (siteModeElement2) {
            var siteModeInstance;
            siteModeInstance = siteModeElement2;
            webSiteInstance.siteMode = siteModeInstance;
          }
          
          var sitePropertiesElement = siteElement2.SITEPROPERTIES ? siteElement2.SITEPROPERTIES.length === 1 ? siteElement2.SITEPROPERTIES[0] : siteElement2.SITEPROPERTIES : null;
          if (sitePropertiesElement) {
            var sitePropertiesInstance = { appSettings: {}, metadata: {}, properties: {} };
            webSiteInstance.siteProperties = sitePropertiesInstance;
            
            var appSettingsSequenceElement = sitePropertiesElement.APPSETTINGS ? sitePropertiesElement.APPSETTINGS.length === 1 ? sitePropertiesElement.APPSETTINGS[0] : sitePropertiesElement.APPSETTINGS : null;
            if (appSettingsSequenceElement) {
              for (var loweredIndex7 = 0; loweredIndex7 < appSettingsSequenceElement.NAMEVALUEPAIR.length; loweredIndex7 = loweredIndex7 + 1) {
                var appSettingsElement = appSettingsSequenceElement.NAMEVALUEPAIR[loweredIndex7];
                var appSettingsKey = appSettingsElement.NAME ? appSettingsElement.NAME.length === 1 ? appSettingsElement.NAME[0] : appSettingsElement.NAME : null;
                var appSettingsValue = appSettingsElement.VALUE ? appSettingsElement.VALUE.length === 1 ? appSettingsElement.VALUE[0] : appSettingsElement.VALUE : null;
                sitePropertiesInstance.appSettings[appSettingsKey] = appSettingsValue;
              }
            }
            
            var appSettingsSequenceElement2 = sitePropertiesElement.APPSETTINGS ? sitePropertiesElement.APPSETTINGS.length === 1 ? sitePropertiesElement.APPSETTINGS[0] : sitePropertiesElement.APPSETTINGS : null;
            if (appSettingsSequenceElement2) {
              for (var loweredIndex8 = 0; loweredIndex8 < appSettingsSequenceElement2.NAMEVALUEPAIR.length; loweredIndex8 = loweredIndex8 + 1) {
                var appSettingsElement2 = appSettingsSequenceElement2.NAMEVALUEPAIR[loweredIndex8];
                var appSettingsKey2 = appSettingsElement2.NAME ? appSettingsElement2.NAME.length === 1 ? appSettingsElement2.NAME[0] : appSettingsElement2.NAME : null;
                var appSettingsValue2 = appSettingsElement2.VALUE ? appSettingsElement2.VALUE.length === 1 ? appSettingsElement2.VALUE[0] : appSettingsElement2.VALUE : null;
                sitePropertiesInstance.metadata[appSettingsKey2] = appSettingsValue2;
              }
            }
            
            var appSettingsSequenceElement3 = sitePropertiesElement.APPSETTINGS ? sitePropertiesElement.APPSETTINGS.length === 1 ? sitePropertiesElement.APPSETTINGS[0] : sitePropertiesElement.APPSETTINGS : null;
            if (appSettingsSequenceElement3) {
              for (var loweredIndex9 = 0; loweredIndex9 < appSettingsSequenceElement3.NAMEVALUEPAIR.length; loweredIndex9 = loweredIndex9 + 1) {
                var appSettingsElement3 = appSettingsSequenceElement3.NAMEVALUEPAIR[loweredIndex9];
                var appSettingsKey3 = appSettingsElement3.NAME ? appSettingsElement3.NAME.length === 1 ? appSettingsElement3.NAME[0] : appSettingsElement3.NAME : null;
                var appSettingsValue3 = appSettingsElement3.VALUE ? appSettingsElement3.VALUE.length === 1 ? appSettingsElement3.VALUE[0] : appSettingsElement3.VALUE : null;
                sitePropertiesInstance.properties[appSettingsKey3] = appSettingsValue3;
              }
            }
          }
          
          var stateElement = siteElement2.STATE ? siteElement2.STATE.length === 1 ? siteElement2.STATE[0] : siteElement2.STATE : null;
          if (stateElement) {
            var stateInstance;
            stateInstance = stateElement;
            webSiteInstance.state = stateInstance;
          }
          
          var usageStateElement = siteElement2.USAGESTATE ? siteElement2.USAGESTATE.length === 1 ? siteElement2.USAGESTATE[0] : siteElement2.USAGESTATE : null;
          if (usageStateElement) {
            var usageStateInstance;
            usageStateInstance = usageStateElement;
            webSiteInstance.usageState = usageStateInstance;
          }
          
          var webSpaceElement = siteElement2.WEBSPACE ? siteElement2.WEBSPACE.length === 1 ? siteElement2.WEBSPACE[0] : siteElement2.WEBSPACE : null;
          if (webSpaceElement) {
            var webSpaceInstance;
            webSpaceInstance = webSpaceElement;
            webSiteInstance.webSpace = webSpaceInstance;
          }
        }
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * You can retrieve details for a web site by issuing an HTTP GET request.
   * (see http://msdn.microsoft.com/en-us/library/windowsazure/dn167007.aspx
   * for more information)
   *
   * @param {String} webSpaceName - The name of the web space.
   *
   * @param {String} webSiteName - The name of the web site.
   *
   * @param {Function} callback
   *
   * @returns {WebSiteGetResponse} - The Get Web Space Details operation
   * response.
   */
  WebSiteOperations.prototype.get = function(webSpaceName, webSiteName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (webSpaceName === null || webSpaceName === undefined) {
      return callback(new Error('webSpaceName cannot be null.'));
    }
    if (webSiteName === null || webSiteName === undefined) {
      return callback(new Error('webSiteName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/WebSpaces/' + webSpaceName + '/sites/' + webSiteName;
    
    // Create HTTP transport objects
    var httpRequest = {};
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2013-03-01';
    
    // Set Credentials
    httpRequest.key = this.client.credentials.keyvalue;
    httpRequest.cert = this.client.credentials.certvalue;
    
    // Send Request
    return request(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var siteElement = responseDoc.SITE ? responseDoc.SITE.length === 1 ? responseDoc.SITE[0] : responseDoc.SITE : null;
        if (siteElement) {
          
          var webSiteInstance = { enabledHostNames: [], hostNameSslStates: [], hostNames: [], sslCertificates: [] };
          result.webSite = webSiteInstance;
          
          var adminEnabledElement = siteElement.ADMINENABLED ? siteElement.ADMINENABLED.length === 1 ? siteElement.ADMINENABLED[0] : siteElement.ADMINENABLED : null;
          if (adminEnabledElement) {
            var adminEnabledInstance;
            adminEnabledInstance = adminEnabledElement;
            webSiteInstance.adminEnabled = adminEnabledInstance;
          }
          
          var availabilityStateElement = siteElement.AVAILABILITYSTATE ? siteElement.AVAILABILITYSTATE.length === 1 ? siteElement.AVAILABILITYSTATE[0] : siteElement.AVAILABILITYSTATE : null;
          if (availabilityStateElement) {
            var availabilityStateInstance;
            availabilityStateInstance = availabilityStateElement;
            webSiteInstance.availabilityState = availabilityStateInstance;
          }
          
          var computeModeElement = siteElement.COMPUTEMODE ? siteElement.COMPUTEMODE.length === 1 ? siteElement.COMPUTEMODE[0] : siteElement.COMPUTEMODE : null;
          if (computeModeElement) {
            var computeModeInstance;
            computeModeInstance = computeModeElement;
            webSiteInstance.computeMode = computeModeInstance;
          }
          
          var enabledElement = siteElement.ENABLED ? siteElement.ENABLED.length === 1 ? siteElement.ENABLED[0] : siteElement.ENABLED : null;
          if (enabledElement) {
            var enabledInstance;
            enabledInstance = enabledElement;
            webSiteInstance.enabled = enabledInstance;
          }
          
          var enabledHostNamesSequenceElement = siteElement.ENABLEDHOSTNAMES ? siteElement.ENABLEDHOSTNAMES.length === 1 ? siteElement.ENABLEDHOSTNAMES[0] : siteElement.ENABLEDHOSTNAMES : null;
          if (enabledHostNamesSequenceElement) {
            for (var loweredIndex1 = 0; loweredIndex1 < enabledHostNamesSequenceElement.STRING.length; loweredIndex1 = loweredIndex1 + 1) {
              var enabledHostNamesElement = enabledHostNamesSequenceElement.STRING[loweredIndex1];
              webSiteInstance.enabledHostNames.push(enabledHostNamesElement);
            }
          }
          
          var hostNameSslStatesSequenceElement = siteElement.HOSTNAMESSLSTATES ? siteElement.HOSTNAMESSLSTATES.length === 1 ? siteElement.HOSTNAMESSLSTATES[0] : siteElement.HOSTNAMESSLSTATES : null;
          if (hostNameSslStatesSequenceElement) {
            for (var loweredIndex2 = 0; loweredIndex2 < hostNameSslStatesSequenceElement.WEBSITEHOSTNAMESSLSTATE.length; loweredIndex2 = loweredIndex2 + 1) {
              var hostNameSslStatesElement = hostNameSslStatesSequenceElement.WEBSITEHOSTNAMESSLSTATE[loweredIndex2];
              var webSiteHostNameSslStateInstance = {};
              webSiteInstance.hostNameSslStates.push(webSiteHostNameSslStateInstance);
              
              var nameElement = hostNameSslStatesElement.NAME ? hostNameSslStatesElement.NAME.length === 1 ? hostNameSslStatesElement.NAME[0] : hostNameSslStatesElement.NAME : null;
              if (nameElement) {
                var nameInstance;
                nameInstance = nameElement;
                webSiteHostNameSslStateInstance.name = nameInstance;
              }
              
              var sslStateElement = hostNameSslStatesElement.SSLSTATE ? hostNameSslStatesElement.SSLSTATE.length === 1 ? hostNameSslStatesElement.SSLSTATE[0] : hostNameSslStatesElement.SSLSTATE : null;
              if (sslStateElement) {
                var sslStateInstance;
                sslStateInstance = sslStateElement;
                webSiteHostNameSslStateInstance.sslState = sslStateInstance;
              }
              
              var thumbprintElement = hostNameSslStatesElement.THUMBPRINT ? hostNameSslStatesElement.THUMBPRINT.length === 1 ? hostNameSslStatesElement.THUMBPRINT[0] : hostNameSslStatesElement.THUMBPRINT : null;
              if (thumbprintElement) {
                var thumbprintInstance;
                thumbprintInstance = thumbprintElement;
                webSiteHostNameSslStateInstance.thumbprint = thumbprintInstance;
              }
              
              var virtualIPElement = hostNameSslStatesElement.VIRTUALIP ? hostNameSslStatesElement.VIRTUALIP.length === 1 ? hostNameSslStatesElement.VIRTUALIP[0] : hostNameSslStatesElement.VIRTUALIP : null;
              if (virtualIPElement) {
                var virtualIPInstance;
                virtualIPInstance = virtualIPElement;
                webSiteHostNameSslStateInstance.virtualIP = virtualIPInstance;
              }
            }
          }
          
          var hostNamesSequenceElement = siteElement.HOSTNAMES ? siteElement.HOSTNAMES.length === 1 ? siteElement.HOSTNAMES[0] : siteElement.HOSTNAMES : null;
          if (hostNamesSequenceElement) {
            for (var loweredIndex3 = 0; loweredIndex3 < hostNamesSequenceElement.STRING.length; loweredIndex3 = loweredIndex3 + 1) {
              var hostNamesElement = hostNamesSequenceElement.STRING[loweredIndex3];
              webSiteInstance.hostNames.push(hostNamesElement);
            }
          }
          
          var lastModifiedTimeUtcElement = siteElement.LASTMODIFIEDTIMEUTC ? siteElement.LASTMODIFIEDTIMEUTC.length === 1 ? siteElement.LASTMODIFIEDTIMEUTC[0] : siteElement.LASTMODIFIEDTIMEUTC : null;
          if (lastModifiedTimeUtcElement) {
            var lastModifiedTimeUtcInstance;
            lastModifiedTimeUtcInstance = new Date(lastModifiedTimeUtcElement);
            webSiteInstance.lastModifiedTimeUtc = lastModifiedTimeUtcInstance;
          }
          
          var nameElement2 = siteElement.NAME ? siteElement.NAME.length === 1 ? siteElement.NAME[0] : siteElement.NAME : null;
          if (nameElement2) {
            var nameInstance2;
            nameInstance2 = nameElement2;
            webSiteInstance.name = nameInstance2;
          }
          
          var ownerElement = siteElement.OWNER ? siteElement.OWNER.length === 1 ? siteElement.OWNER[0] : siteElement.OWNER : null;
          if (ownerElement) {
            var ownerInstance;
            ownerInstance = ownerElement;
            webSiteInstance.owner = ownerInstance;
          }
          
          var repositorySiteNameElement = siteElement.REPOSITORYSITENAME ? siteElement.REPOSITORYSITENAME.length === 1 ? siteElement.REPOSITORYSITENAME[0] : siteElement.REPOSITORYSITENAME : null;
          if (repositorySiteNameElement) {
            var repositorySiteNameInstance;
            repositorySiteNameInstance = repositorySiteNameElement;
            webSiteInstance.repositorySiteName = repositorySiteNameInstance;
          }
          
          var runtimeAvailabilityStateElement = siteElement.RUNTIMEAVAILABILITYSTATE ? siteElement.RUNTIMEAVAILABILITYSTATE.length === 1 ? siteElement.RUNTIMEAVAILABILITYSTATE[0] : siteElement.RUNTIMEAVAILABILITYSTATE : null;
          if (runtimeAvailabilityStateElement) {
            var runtimeAvailabilityStateInstance;
            runtimeAvailabilityStateInstance = runtimeAvailabilityStateElement;
            webSiteInstance.runtimeAvailabilityState = runtimeAvailabilityStateInstance;
          }
          
          var sSLCertificatesSequenceElement = siteElement.SSLCERTIFICATES ? siteElement.SSLCERTIFICATES.length === 1 ? siteElement.SSLCERTIFICATES[0] : siteElement.SSLCERTIFICATES : null;
          if (sSLCertificatesSequenceElement) {
            for (var loweredIndex4 = 0; loweredIndex4 < sSLCertificatesSequenceElement.CERTIFICATE.length; loweredIndex4 = loweredIndex4 + 1) {
              var sSLCertificatesElement = sSLCertificatesSequenceElement.CERTIFICATE[loweredIndex4];
              var certificateInstance = { hostNames: [] };
              webSiteInstance.sslCertificates.push(certificateInstance);
              
              var expirationDateElement = sSLCertificatesElement.EXPIRATIONDATE ? sSLCertificatesElement.EXPIRATIONDATE.length === 1 ? sSLCertificatesElement.EXPIRATIONDATE[0] : sSLCertificatesElement.EXPIRATIONDATE : null;
              if (expirationDateElement) {
                var expirationDateInstance;
                expirationDateInstance = new Date(expirationDateElement);
                certificateInstance.expirationDate = expirationDateInstance;
              }
              
              var friendlyNameElement = sSLCertificatesElement.FRIENDLYNAME ? sSLCertificatesElement.FRIENDLYNAME.length === 1 ? sSLCertificatesElement.FRIENDLYNAME[0] : sSLCertificatesElement.FRIENDLYNAME : null;
              if (friendlyNameElement) {
                var friendlyNameInstance;
                friendlyNameInstance = friendlyNameElement;
                certificateInstance.friendlyName = friendlyNameInstance;
              }
              
              var hostNamesSequenceElement2 = sSLCertificatesElement.HOSTNAMES ? sSLCertificatesElement.HOSTNAMES.length === 1 ? sSLCertificatesElement.HOSTNAMES[0] : sSLCertificatesElement.HOSTNAMES : null;
              if (hostNamesSequenceElement2) {
                for (var loweredIndex5 = 0; loweredIndex5 < hostNamesSequenceElement2.STRING.length; loweredIndex5 = loweredIndex5 + 1) {
                  var hostNamesElement2 = hostNamesSequenceElement2.STRING[loweredIndex5];
                  certificateInstance.hostNames.push(hostNamesElement2);
                }
              }
              
              var issueDateElement = sSLCertificatesElement.ISSUEDATE ? sSLCertificatesElement.ISSUEDATE.length === 1 ? sSLCertificatesElement.ISSUEDATE[0] : sSLCertificatesElement.ISSUEDATE : null;
              if (issueDateElement) {
                var issueDateInstance;
                issueDateInstance = new Date(issueDateElement);
                certificateInstance.issueDate = issueDateInstance;
              }
              
              var issuerElement = sSLCertificatesElement.ISSUER ? sSLCertificatesElement.ISSUER.length === 1 ? sSLCertificatesElement.ISSUER[0] : sSLCertificatesElement.ISSUER : null;
              if (issuerElement) {
                var issuerInstance;
                issuerInstance = issuerElement;
                certificateInstance.issuer = issuerInstance;
              }
              
              var passwordElement = sSLCertificatesElement.PASSWORD ? sSLCertificatesElement.PASSWORD.length === 1 ? sSLCertificatesElement.PASSWORD[0] : sSLCertificatesElement.PASSWORD : null;
              if (passwordElement) {
                var passwordInstance;
                passwordInstance = passwordElement;
                certificateInstance.password = passwordInstance;
              }
              
              var pfxBlobElement = sSLCertificatesElement.PFXBLOB ? sSLCertificatesElement.PFXBLOB.length === 1 ? sSLCertificatesElement.PFXBLOB[0] : sSLCertificatesElement.PFXBLOB : null;
              if (pfxBlobElement) {
                var pfxBlobInstance;
                pfxBlobInstance = new Buffer(pfxBlobElement, 'base64').toString('ascii');
                certificateInstance.pfxBlob = pfxBlobInstance;
              }
              
              var selfLinkElement = sSLCertificatesElement.SELFLINK ? sSLCertificatesElement.SELFLINK.length === 1 ? sSLCertificatesElement.SELFLINK[0] : sSLCertificatesElement.SELFLINK : null;
              if (selfLinkElement) {
                var selfLinkInstance;
                selfLinkInstance = selfLinkElement;
                certificateInstance.selfLinkUri = selfLinkInstance;
              }
              
              var siteNameElement = sSLCertificatesElement.SITENAME ? sSLCertificatesElement.SITENAME.length === 1 ? sSLCertificatesElement.SITENAME[0] : sSLCertificatesElement.SITENAME : null;
              if (siteNameElement) {
                var siteNameInstance;
                siteNameInstance = siteNameElement;
                certificateInstance.siteName = siteNameInstance;
              }
              
              var subjectNameElement = sSLCertificatesElement.SUBJECTNAME ? sSLCertificatesElement.SUBJECTNAME.length === 1 ? sSLCertificatesElement.SUBJECTNAME[0] : sSLCertificatesElement.SUBJECTNAME : null;
              if (subjectNameElement) {
                var subjectNameInstance;
                subjectNameInstance = subjectNameElement;
                certificateInstance.subjectName = subjectNameInstance;
              }
              
              var thumbprintElement2 = sSLCertificatesElement.THUMBPRINT ? sSLCertificatesElement.THUMBPRINT.length === 1 ? sSLCertificatesElement.THUMBPRINT[0] : sSLCertificatesElement.THUMBPRINT : null;
              if (thumbprintElement2) {
                var thumbprintInstance2;
                thumbprintInstance2 = thumbprintElement2;
                certificateInstance.thumbprint = thumbprintInstance2;
              }
              
              var toDeleteElement = sSLCertificatesElement.TODELETE ? sSLCertificatesElement.TODELETE.length === 1 ? sSLCertificatesElement.TODELETE[0] : sSLCertificatesElement.TODELETE : null;
              if (toDeleteElement) {
                var toDeleteInstance;
                toDeleteInstance = toDeleteElement;
                certificateInstance.isToBeDeleted = toDeleteInstance;
              }
              
              var validElement = sSLCertificatesElement.VALID ? sSLCertificatesElement.VALID.length === 1 ? sSLCertificatesElement.VALID[0] : sSLCertificatesElement.VALID : null;
              if (validElement) {
                var validInstance;
                validInstance = validElement;
                certificateInstance.isValid = validInstance;
              }
            }
          }
          
          var selfLinkElement2 = siteElement.SELFLINK ? siteElement.SELFLINK.length === 1 ? siteElement.SELFLINK[0] : siteElement.SELFLINK : null;
          if (selfLinkElement2) {
            var selfLinkInstance2;
            selfLinkInstance2 = selfLinkElement2;
            webSiteInstance.uri = selfLinkInstance2;
          }
          
          var serverFarmElement = siteElement.SERVERFARM ? siteElement.SERVERFARM.length === 1 ? siteElement.SERVERFARM[0] : siteElement.SERVERFARM : null;
          if (serverFarmElement) {
            var serverFarmInstance;
            serverFarmInstance = serverFarmElement;
            webSiteInstance.serverFarm = serverFarmInstance;
          }
          
          var siteModeElement = siteElement.SITEMODE ? siteElement.SITEMODE.length === 1 ? siteElement.SITEMODE[0] : siteElement.SITEMODE : null;
          if (siteModeElement) {
            var siteModeInstance;
            siteModeInstance = siteModeElement;
            webSiteInstance.siteMode = siteModeInstance;
          }
          
          var sitePropertiesElement = siteElement.SITEPROPERTIES ? siteElement.SITEPROPERTIES.length === 1 ? siteElement.SITEPROPERTIES[0] : siteElement.SITEPROPERTIES : null;
          if (sitePropertiesElement) {
            var sitePropertiesInstance = { appSettings: {}, metadata: {}, properties: {} };
            webSiteInstance.siteProperties = sitePropertiesInstance;
            
            var appSettingsSequenceElement = sitePropertiesElement.APPSETTINGS ? sitePropertiesElement.APPSETTINGS.length === 1 ? sitePropertiesElement.APPSETTINGS[0] : sitePropertiesElement.APPSETTINGS : null;
            if (appSettingsSequenceElement) {
              for (var loweredIndex6 = 0; loweredIndex6 < appSettingsSequenceElement.NAMEVALUEPAIR.length; loweredIndex6 = loweredIndex6 + 1) {
                var appSettingsElement = appSettingsSequenceElement.NAMEVALUEPAIR[loweredIndex6];
                var appSettingsKey = appSettingsElement.NAME ? appSettingsElement.NAME.length === 1 ? appSettingsElement.NAME[0] : appSettingsElement.NAME : null;
                var appSettingsValue = appSettingsElement.VALUE ? appSettingsElement.VALUE.length === 1 ? appSettingsElement.VALUE[0] : appSettingsElement.VALUE : null;
                sitePropertiesInstance.appSettings[appSettingsKey] = appSettingsValue;
              }
            }
            
            var appSettingsSequenceElement2 = sitePropertiesElement.APPSETTINGS ? sitePropertiesElement.APPSETTINGS.length === 1 ? sitePropertiesElement.APPSETTINGS[0] : sitePropertiesElement.APPSETTINGS : null;
            if (appSettingsSequenceElement2) {
              for (var loweredIndex7 = 0; loweredIndex7 < appSettingsSequenceElement2.NAMEVALUEPAIR.length; loweredIndex7 = loweredIndex7 + 1) {
                var appSettingsElement2 = appSettingsSequenceElement2.NAMEVALUEPAIR[loweredIndex7];
                var appSettingsKey2 = appSettingsElement2.NAME ? appSettingsElement2.NAME.length === 1 ? appSettingsElement2.NAME[0] : appSettingsElement2.NAME : null;
                var appSettingsValue2 = appSettingsElement2.VALUE ? appSettingsElement2.VALUE.length === 1 ? appSettingsElement2.VALUE[0] : appSettingsElement2.VALUE : null;
                sitePropertiesInstance.metadata[appSettingsKey2] = appSettingsValue2;
              }
            }
            
            var appSettingsSequenceElement3 = sitePropertiesElement.APPSETTINGS ? sitePropertiesElement.APPSETTINGS.length === 1 ? sitePropertiesElement.APPSETTINGS[0] : sitePropertiesElement.APPSETTINGS : null;
            if (appSettingsSequenceElement3) {
              for (var loweredIndex8 = 0; loweredIndex8 < appSettingsSequenceElement3.NAMEVALUEPAIR.length; loweredIndex8 = loweredIndex8 + 1) {
                var appSettingsElement3 = appSettingsSequenceElement3.NAMEVALUEPAIR[loweredIndex8];
                var appSettingsKey3 = appSettingsElement3.NAME ? appSettingsElement3.NAME.length === 1 ? appSettingsElement3.NAME[0] : appSettingsElement3.NAME : null;
                var appSettingsValue3 = appSettingsElement3.VALUE ? appSettingsElement3.VALUE.length === 1 ? appSettingsElement3.VALUE[0] : appSettingsElement3.VALUE : null;
                sitePropertiesInstance.properties[appSettingsKey3] = appSettingsValue3;
              }
            }
          }
          
          var stateElement = siteElement.STATE ? siteElement.STATE.length === 1 ? siteElement.STATE[0] : siteElement.STATE : null;
          if (stateElement) {
            var stateInstance;
            stateInstance = stateElement;
            webSiteInstance.state = stateInstance;
          }
          
          var usageStateElement = siteElement.USAGESTATE ? siteElement.USAGESTATE.length === 1 ? siteElement.USAGESTATE[0] : siteElement.USAGESTATE : null;
          if (usageStateElement) {
            var usageStateInstance;
            usageStateInstance = usageStateElement;
            webSiteInstance.usageState = usageStateInstance;
          }
          
          var webSpaceElement = siteElement.WEBSPACE ? siteElement.WEBSPACE.length === 1 ? siteElement.WEBSPACE[0] : siteElement.WEBSPACE : null;
          if (webSpaceElement) {
            var webSpaceInstance;
            webSpaceInstance = webSpaceElement;
            webSiteInstance.webSpace = webSpaceInstance;
          }
        }
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * You can update the settings for a web site by using the HTTP PUT method
   * and by specifying the settings in the request body.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/dn167005.aspx for
   * more information)
   *
   * @param {String} webSpaceName - The name of the web space.
   *
   * @param {String} webSiteName - The name of the web site.
   *
   * @param {WebSiteUpdateParameters} parameters - Parameters supplied to the
   * Update Web Site operation.
   *
   * @param {Function} callback
   *
   * @returns {WebSiteUpdateResponse} - The Update Web Site operation response.
   */
  WebSiteOperations.prototype.update = function(webSpaceName, webSiteName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (webSpaceName === null || webSpaceName === undefined) {
      return callback(new Error('webSpaceName cannot be null.'));
    }
    if (webSiteName === null || webSiteName === undefined) {
      return callback(new Error('webSiteName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/WebSpaces/' + webSpaceName + '/sites/' + webSiteName;
    
    // Create HTTP transport objects
    var httpRequest = {};
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2013-03-01';
    httpRequest.headers['Content-Type'] = 'application/xml';
    
    // Set Credentials
    httpRequest.key = this.client.credentials.keyvalue;
    httpRequest.cert = this.client.credentials.certvalue;
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = {};
    
    var siteElement = js2xml.createElement('Site', 'http://schemas.microsoft.com/windowsazure');
    js2xml.addChildElement(requestDoc, siteElement);
    
    var stateElement = js2xml.createElement('State', 'http://schemas.microsoft.com/windowsazure');
    js2xml.setElementValue(stateElement, parameters.state.toString());
    js2xml.addChildElement(siteElement, stateElement);
    
    requestContent = js2xml.serializeDocument(requestDoc);
    httpRequest.body = requestContent;
    // Send Request
    return request(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var siteElement2 = responseDoc.SITE ? responseDoc.SITE.length === 1 ? responseDoc.SITE[0] : responseDoc.SITE : null;
        if (siteElement2) {
          
          var webSiteInstance = { enabledHostNames: [], hostNameSslStates: [], hostNames: [], sslCertificates: [] };
          result.webSite = webSiteInstance;
          
          var adminEnabledElement = siteElement2.ADMINENABLED ? siteElement2.ADMINENABLED.length === 1 ? siteElement2.ADMINENABLED[0] : siteElement2.ADMINENABLED : null;
          if (adminEnabledElement) {
            var adminEnabledInstance;
            adminEnabledInstance = adminEnabledElement;
            webSiteInstance.adminEnabled = adminEnabledInstance;
          }
          
          var availabilityStateElement = siteElement2.AVAILABILITYSTATE ? siteElement2.AVAILABILITYSTATE.length === 1 ? siteElement2.AVAILABILITYSTATE[0] : siteElement2.AVAILABILITYSTATE : null;
          if (availabilityStateElement) {
            var availabilityStateInstance;
            availabilityStateInstance = availabilityStateElement;
            webSiteInstance.availabilityState = availabilityStateInstance;
          }
          
          var computeModeElement = siteElement2.COMPUTEMODE ? siteElement2.COMPUTEMODE.length === 1 ? siteElement2.COMPUTEMODE[0] : siteElement2.COMPUTEMODE : null;
          if (computeModeElement) {
            var computeModeInstance;
            computeModeInstance = computeModeElement;
            webSiteInstance.computeMode = computeModeInstance;
          }
          
          var enabledElement = siteElement2.ENABLED ? siteElement2.ENABLED.length === 1 ? siteElement2.ENABLED[0] : siteElement2.ENABLED : null;
          if (enabledElement) {
            var enabledInstance;
            enabledInstance = enabledElement;
            webSiteInstance.enabled = enabledInstance;
          }
          
          var enabledHostNamesSequenceElement = siteElement2.ENABLEDHOSTNAMES ? siteElement2.ENABLEDHOSTNAMES.length === 1 ? siteElement2.ENABLEDHOSTNAMES[0] : siteElement2.ENABLEDHOSTNAMES : null;
          if (enabledHostNamesSequenceElement) {
            for (var loweredIndex1 = 0; loweredIndex1 < enabledHostNamesSequenceElement.STRING.length; loweredIndex1 = loweredIndex1 + 1) {
              var enabledHostNamesElement = enabledHostNamesSequenceElement.STRING[loweredIndex1];
              webSiteInstance.enabledHostNames.push(enabledHostNamesElement);
            }
          }
          
          var hostNameSslStatesSequenceElement = siteElement2.HOSTNAMESSLSTATES ? siteElement2.HOSTNAMESSLSTATES.length === 1 ? siteElement2.HOSTNAMESSLSTATES[0] : siteElement2.HOSTNAMESSLSTATES : null;
          if (hostNameSslStatesSequenceElement) {
            for (var loweredIndex2 = 0; loweredIndex2 < hostNameSslStatesSequenceElement.WEBSITEHOSTNAMESSLSTATE.length; loweredIndex2 = loweredIndex2 + 1) {
              var hostNameSslStatesElement = hostNameSslStatesSequenceElement.WEBSITEHOSTNAMESSLSTATE[loweredIndex2];
              var webSiteHostNameSslStateInstance = {};
              webSiteInstance.hostNameSslStates.push(webSiteHostNameSslStateInstance);
              
              var nameElement = hostNameSslStatesElement.NAME ? hostNameSslStatesElement.NAME.length === 1 ? hostNameSslStatesElement.NAME[0] : hostNameSslStatesElement.NAME : null;
              if (nameElement) {
                var nameInstance;
                nameInstance = nameElement;
                webSiteHostNameSslStateInstance.name = nameInstance;
              }
              
              var sslStateElement = hostNameSslStatesElement.SSLSTATE ? hostNameSslStatesElement.SSLSTATE.length === 1 ? hostNameSslStatesElement.SSLSTATE[0] : hostNameSslStatesElement.SSLSTATE : null;
              if (sslStateElement) {
                var sslStateInstance;
                sslStateInstance = sslStateElement;
                webSiteHostNameSslStateInstance.sslState = sslStateInstance;
              }
              
              var thumbprintElement = hostNameSslStatesElement.THUMBPRINT ? hostNameSslStatesElement.THUMBPRINT.length === 1 ? hostNameSslStatesElement.THUMBPRINT[0] : hostNameSslStatesElement.THUMBPRINT : null;
              if (thumbprintElement) {
                var thumbprintInstance;
                thumbprintInstance = thumbprintElement;
                webSiteHostNameSslStateInstance.thumbprint = thumbprintInstance;
              }
              
              var virtualIPElement = hostNameSslStatesElement.VIRTUALIP ? hostNameSslStatesElement.VIRTUALIP.length === 1 ? hostNameSslStatesElement.VIRTUALIP[0] : hostNameSslStatesElement.VIRTUALIP : null;
              if (virtualIPElement) {
                var virtualIPInstance;
                virtualIPInstance = virtualIPElement;
                webSiteHostNameSslStateInstance.virtualIP = virtualIPInstance;
              }
            }
          }
          
          var hostNamesSequenceElement = siteElement2.HOSTNAMES ? siteElement2.HOSTNAMES.length === 1 ? siteElement2.HOSTNAMES[0] : siteElement2.HOSTNAMES : null;
          if (hostNamesSequenceElement) {
            for (var loweredIndex3 = 0; loweredIndex3 < hostNamesSequenceElement.STRING.length; loweredIndex3 = loweredIndex3 + 1) {
              var hostNamesElement = hostNamesSequenceElement.STRING[loweredIndex3];
              webSiteInstance.hostNames.push(hostNamesElement);
            }
          }
          
          var lastModifiedTimeUtcElement = siteElement2.LASTMODIFIEDTIMEUTC ? siteElement2.LASTMODIFIEDTIMEUTC.length === 1 ? siteElement2.LASTMODIFIEDTIMEUTC[0] : siteElement2.LASTMODIFIEDTIMEUTC : null;
          if (lastModifiedTimeUtcElement) {
            var lastModifiedTimeUtcInstance;
            lastModifiedTimeUtcInstance = new Date(lastModifiedTimeUtcElement);
            webSiteInstance.lastModifiedTimeUtc = lastModifiedTimeUtcInstance;
          }
          
          var nameElement2 = siteElement2.NAME ? siteElement2.NAME.length === 1 ? siteElement2.NAME[0] : siteElement2.NAME : null;
          if (nameElement2) {
            var nameInstance2;
            nameInstance2 = nameElement2;
            webSiteInstance.name = nameInstance2;
          }
          
          var ownerElement = siteElement2.OWNER ? siteElement2.OWNER.length === 1 ? siteElement2.OWNER[0] : siteElement2.OWNER : null;
          if (ownerElement) {
            var ownerInstance;
            ownerInstance = ownerElement;
            webSiteInstance.owner = ownerInstance;
          }
          
          var repositorySiteNameElement = siteElement2.REPOSITORYSITENAME ? siteElement2.REPOSITORYSITENAME.length === 1 ? siteElement2.REPOSITORYSITENAME[0] : siteElement2.REPOSITORYSITENAME : null;
          if (repositorySiteNameElement) {
            var repositorySiteNameInstance;
            repositorySiteNameInstance = repositorySiteNameElement;
            webSiteInstance.repositorySiteName = repositorySiteNameInstance;
          }
          
          var runtimeAvailabilityStateElement = siteElement2.RUNTIMEAVAILABILITYSTATE ? siteElement2.RUNTIMEAVAILABILITYSTATE.length === 1 ? siteElement2.RUNTIMEAVAILABILITYSTATE[0] : siteElement2.RUNTIMEAVAILABILITYSTATE : null;
          if (runtimeAvailabilityStateElement) {
            var runtimeAvailabilityStateInstance;
            runtimeAvailabilityStateInstance = runtimeAvailabilityStateElement;
            webSiteInstance.runtimeAvailabilityState = runtimeAvailabilityStateInstance;
          }
          
          var sSLCertificatesSequenceElement = siteElement2.SSLCERTIFICATES ? siteElement2.SSLCERTIFICATES.length === 1 ? siteElement2.SSLCERTIFICATES[0] : siteElement2.SSLCERTIFICATES : null;
          if (sSLCertificatesSequenceElement) {
            for (var loweredIndex4 = 0; loweredIndex4 < sSLCertificatesSequenceElement.CERTIFICATE.length; loweredIndex4 = loweredIndex4 + 1) {
              var sSLCertificatesElement = sSLCertificatesSequenceElement.CERTIFICATE[loweredIndex4];
              var certificateInstance = { hostNames: [] };
              webSiteInstance.sslCertificates.push(certificateInstance);
              
              var expirationDateElement = sSLCertificatesElement.EXPIRATIONDATE ? sSLCertificatesElement.EXPIRATIONDATE.length === 1 ? sSLCertificatesElement.EXPIRATIONDATE[0] : sSLCertificatesElement.EXPIRATIONDATE : null;
              if (expirationDateElement) {
                var expirationDateInstance;
                expirationDateInstance = new Date(expirationDateElement);
                certificateInstance.expirationDate = expirationDateInstance;
              }
              
              var friendlyNameElement = sSLCertificatesElement.FRIENDLYNAME ? sSLCertificatesElement.FRIENDLYNAME.length === 1 ? sSLCertificatesElement.FRIENDLYNAME[0] : sSLCertificatesElement.FRIENDLYNAME : null;
              if (friendlyNameElement) {
                var friendlyNameInstance;
                friendlyNameInstance = friendlyNameElement;
                certificateInstance.friendlyName = friendlyNameInstance;
              }
              
              var hostNamesSequenceElement2 = sSLCertificatesElement.HOSTNAMES ? sSLCertificatesElement.HOSTNAMES.length === 1 ? sSLCertificatesElement.HOSTNAMES[0] : sSLCertificatesElement.HOSTNAMES : null;
              if (hostNamesSequenceElement2) {
                for (var loweredIndex5 = 0; loweredIndex5 < hostNamesSequenceElement2.STRING.length; loweredIndex5 = loweredIndex5 + 1) {
                  var hostNamesElement2 = hostNamesSequenceElement2.STRING[loweredIndex5];
                  certificateInstance.hostNames.push(hostNamesElement2);
                }
              }
              
              var issueDateElement = sSLCertificatesElement.ISSUEDATE ? sSLCertificatesElement.ISSUEDATE.length === 1 ? sSLCertificatesElement.ISSUEDATE[0] : sSLCertificatesElement.ISSUEDATE : null;
              if (issueDateElement) {
                var issueDateInstance;
                issueDateInstance = new Date(issueDateElement);
                certificateInstance.issueDate = issueDateInstance;
              }
              
              var issuerElement = sSLCertificatesElement.ISSUER ? sSLCertificatesElement.ISSUER.length === 1 ? sSLCertificatesElement.ISSUER[0] : sSLCertificatesElement.ISSUER : null;
              if (issuerElement) {
                var issuerInstance;
                issuerInstance = issuerElement;
                certificateInstance.issuer = issuerInstance;
              }
              
              var passwordElement = sSLCertificatesElement.PASSWORD ? sSLCertificatesElement.PASSWORD.length === 1 ? sSLCertificatesElement.PASSWORD[0] : sSLCertificatesElement.PASSWORD : null;
              if (passwordElement) {
                var passwordInstance;
                passwordInstance = passwordElement;
                certificateInstance.password = passwordInstance;
              }
              
              var pfxBlobElement = sSLCertificatesElement.PFXBLOB ? sSLCertificatesElement.PFXBLOB.length === 1 ? sSLCertificatesElement.PFXBLOB[0] : sSLCertificatesElement.PFXBLOB : null;
              if (pfxBlobElement) {
                var pfxBlobInstance;
                pfxBlobInstance = new Buffer(pfxBlobElement, 'base64').toString('ascii');
                certificateInstance.pfxBlob = pfxBlobInstance;
              }
              
              var selfLinkElement = sSLCertificatesElement.SELFLINK ? sSLCertificatesElement.SELFLINK.length === 1 ? sSLCertificatesElement.SELFLINK[0] : sSLCertificatesElement.SELFLINK : null;
              if (selfLinkElement) {
                var selfLinkInstance;
                selfLinkInstance = selfLinkElement;
                certificateInstance.selfLinkUri = selfLinkInstance;
              }
              
              var siteNameElement = sSLCertificatesElement.SITENAME ? sSLCertificatesElement.SITENAME.length === 1 ? sSLCertificatesElement.SITENAME[0] : sSLCertificatesElement.SITENAME : null;
              if (siteNameElement) {
                var siteNameInstance;
                siteNameInstance = siteNameElement;
                certificateInstance.siteName = siteNameInstance;
              }
              
              var subjectNameElement = sSLCertificatesElement.SUBJECTNAME ? sSLCertificatesElement.SUBJECTNAME.length === 1 ? sSLCertificatesElement.SUBJECTNAME[0] : sSLCertificatesElement.SUBJECTNAME : null;
              if (subjectNameElement) {
                var subjectNameInstance;
                subjectNameInstance = subjectNameElement;
                certificateInstance.subjectName = subjectNameInstance;
              }
              
              var thumbprintElement2 = sSLCertificatesElement.THUMBPRINT ? sSLCertificatesElement.THUMBPRINT.length === 1 ? sSLCertificatesElement.THUMBPRINT[0] : sSLCertificatesElement.THUMBPRINT : null;
              if (thumbprintElement2) {
                var thumbprintInstance2;
                thumbprintInstance2 = thumbprintElement2;
                certificateInstance.thumbprint = thumbprintInstance2;
              }
              
              var toDeleteElement = sSLCertificatesElement.TODELETE ? sSLCertificatesElement.TODELETE.length === 1 ? sSLCertificatesElement.TODELETE[0] : sSLCertificatesElement.TODELETE : null;
              if (toDeleteElement) {
                var toDeleteInstance;
                toDeleteInstance = toDeleteElement;
                certificateInstance.isToBeDeleted = toDeleteInstance;
              }
              
              var validElement = sSLCertificatesElement.VALID ? sSLCertificatesElement.VALID.length === 1 ? sSLCertificatesElement.VALID[0] : sSLCertificatesElement.VALID : null;
              if (validElement) {
                var validInstance;
                validInstance = validElement;
                certificateInstance.isValid = validInstance;
              }
            }
          }
          
          var selfLinkElement2 = siteElement2.SELFLINK ? siteElement2.SELFLINK.length === 1 ? siteElement2.SELFLINK[0] : siteElement2.SELFLINK : null;
          if (selfLinkElement2) {
            var selfLinkInstance2;
            selfLinkInstance2 = selfLinkElement2;
            webSiteInstance.uri = selfLinkInstance2;
          }
          
          var serverFarmElement = siteElement2.SERVERFARM ? siteElement2.SERVERFARM.length === 1 ? siteElement2.SERVERFARM[0] : siteElement2.SERVERFARM : null;
          if (serverFarmElement) {
            var serverFarmInstance;
            serverFarmInstance = serverFarmElement;
            webSiteInstance.serverFarm = serverFarmInstance;
          }
          
          var siteModeElement = siteElement2.SITEMODE ? siteElement2.SITEMODE.length === 1 ? siteElement2.SITEMODE[0] : siteElement2.SITEMODE : null;
          if (siteModeElement) {
            var siteModeInstance;
            siteModeInstance = siteModeElement;
            webSiteInstance.siteMode = siteModeInstance;
          }
          
          var sitePropertiesElement = siteElement2.SITEPROPERTIES ? siteElement2.SITEPROPERTIES.length === 1 ? siteElement2.SITEPROPERTIES[0] : siteElement2.SITEPROPERTIES : null;
          if (sitePropertiesElement) {
            var sitePropertiesInstance = { appSettings: {}, metadata: {}, properties: {} };
            webSiteInstance.siteProperties = sitePropertiesInstance;
            
            var appSettingsSequenceElement = sitePropertiesElement.APPSETTINGS ? sitePropertiesElement.APPSETTINGS.length === 1 ? sitePropertiesElement.APPSETTINGS[0] : sitePropertiesElement.APPSETTINGS : null;
            if (appSettingsSequenceElement) {
              for (var loweredIndex6 = 0; loweredIndex6 < appSettingsSequenceElement.NAMEVALUEPAIR.length; loweredIndex6 = loweredIndex6 + 1) {
                var appSettingsElement = appSettingsSequenceElement.NAMEVALUEPAIR[loweredIndex6];
                var appSettingsKey = appSettingsElement.NAME ? appSettingsElement.NAME.length === 1 ? appSettingsElement.NAME[0] : appSettingsElement.NAME : null;
                var appSettingsValue = appSettingsElement.VALUE ? appSettingsElement.VALUE.length === 1 ? appSettingsElement.VALUE[0] : appSettingsElement.VALUE : null;
                sitePropertiesInstance.appSettings[appSettingsKey] = appSettingsValue;
              }
            }
            
            var appSettingsSequenceElement2 = sitePropertiesElement.APPSETTINGS ? sitePropertiesElement.APPSETTINGS.length === 1 ? sitePropertiesElement.APPSETTINGS[0] : sitePropertiesElement.APPSETTINGS : null;
            if (appSettingsSequenceElement2) {
              for (var loweredIndex7 = 0; loweredIndex7 < appSettingsSequenceElement2.NAMEVALUEPAIR.length; loweredIndex7 = loweredIndex7 + 1) {
                var appSettingsElement2 = appSettingsSequenceElement2.NAMEVALUEPAIR[loweredIndex7];
                var appSettingsKey2 = appSettingsElement2.NAME ? appSettingsElement2.NAME.length === 1 ? appSettingsElement2.NAME[0] : appSettingsElement2.NAME : null;
                var appSettingsValue2 = appSettingsElement2.VALUE ? appSettingsElement2.VALUE.length === 1 ? appSettingsElement2.VALUE[0] : appSettingsElement2.VALUE : null;
                sitePropertiesInstance.metadata[appSettingsKey2] = appSettingsValue2;
              }
            }
            
            var appSettingsSequenceElement3 = sitePropertiesElement.APPSETTINGS ? sitePropertiesElement.APPSETTINGS.length === 1 ? sitePropertiesElement.APPSETTINGS[0] : sitePropertiesElement.APPSETTINGS : null;
            if (appSettingsSequenceElement3) {
              for (var loweredIndex8 = 0; loweredIndex8 < appSettingsSequenceElement3.NAMEVALUEPAIR.length; loweredIndex8 = loweredIndex8 + 1) {
                var appSettingsElement3 = appSettingsSequenceElement3.NAMEVALUEPAIR[loweredIndex8];
                var appSettingsKey3 = appSettingsElement3.NAME ? appSettingsElement3.NAME.length === 1 ? appSettingsElement3.NAME[0] : appSettingsElement3.NAME : null;
                var appSettingsValue3 = appSettingsElement3.VALUE ? appSettingsElement3.VALUE.length === 1 ? appSettingsElement3.VALUE[0] : appSettingsElement3.VALUE : null;
                sitePropertiesInstance.properties[appSettingsKey3] = appSettingsValue3;
              }
            }
          }
          
          var stateElement2 = siteElement2.STATE ? siteElement2.STATE.length === 1 ? siteElement2.STATE[0] : siteElement2.STATE : null;
          if (stateElement2) {
            var stateInstance;
            stateInstance = stateElement2;
            webSiteInstance.state = stateInstance;
          }
          
          var usageStateElement = siteElement2.USAGESTATE ? siteElement2.USAGESTATE.length === 1 ? siteElement2.USAGESTATE[0] : siteElement2.USAGESTATE : null;
          if (usageStateElement) {
            var usageStateInstance;
            usageStateInstance = usageStateElement;
            webSiteInstance.usageState = usageStateInstance;
          }
          
          var webSpaceElement = siteElement2.WEBSPACE ? siteElement2.WEBSPACE.length === 1 ? siteElement2.WEBSPACE[0] : siteElement2.WEBSPACE : null;
          if (webSpaceElement) {
            var webSpaceInstance;
            webSpaceInstance = webSpaceElement;
            webSiteInstance.webSpace = webSpaceInstance;
          }
        }
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * You can enable or disable SSL for a web site by using the HTTP PUT method
   * and by specifying the settings in the request body. This operation is
   * similar to Update Web Site Settings, but the request body is
   * SSL-specific.  Important: For Windows Azure Websites, SSL support is
   * available only in Reserved mode.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/dn166983.aspx for
   * more information)
   *
   * @param {String} webSpaceName - The name of the web space.
   *
   * @param {String} webSiteName - The name of the web site.
   *
   * @param {WebSiteUpdateSslParameters} parameters - Parameters supplied to
   * the Update Web Site SSL operation.
   *
   * @param {Function} callback
   *
   * @returns {WebSiteUpdateResponse} - The Update Web Site operation response.
   */
  WebSiteOperations.prototype.updateSsl = function(webSpaceName, webSiteName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (webSpaceName === null || webSpaceName === undefined) {
      return callback(new Error('webSpaceName cannot be null.'));
    }
    if (webSiteName === null || webSiteName === undefined) {
      return callback(new Error('webSiteName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/WebSpaces/' + webSpaceName + '/sites/' + webSiteName;
    
    // Create HTTP transport objects
    var httpRequest = {};
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2013-03-01';
    httpRequest.headers['Content-Type'] = 'application/xml';
    
    // Set Credentials
    httpRequest.key = this.client.credentials.keyvalue;
    httpRequest.cert = this.client.credentials.certvalue;
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = {};
    
    var siteElement = js2xml.createElement('Site', 'http://schemas.microsoft.com/windowsazure');
    js2xml.addChildElement(requestDoc, siteElement);
    
    var hostNameSslStatesSequenceElement = js2xml.createElement('HostNameSslStates', 'http://schemas.microsoft.com/windowsazure');
    for (var loweredIndex1 = 0; loweredIndex1 < parameters.hostNameSslStates.length; loweredIndex1 = loweredIndex1 + 1) {
      var hostNameSslStatesItem = parameters.hostNameSslStates[loweredIndex1];
      var hostNameSslStateElement = js2xml.createElement('HostNameSslState', 'http://schemas.microsoft.com/windowsazure');
      js2xml.addChildElement(hostNameSslStatesSequenceElement, hostNameSslStateElement);
      
      if (hostNameSslStatesItem.name) {
        var nameElement = js2xml.createElement('Name', 'http://schemas.microsoft.com/windowsazure');
        js2xml.setElementValue(nameElement, hostNameSslStatesItem.name);
        js2xml.addChildElement(hostNameSslStateElement, nameElement);
      }
      
      var sslStateElement = js2xml.createElement('SslState', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(sslStateElement, hostNameSslStatesItem.sslState.toString());
      js2xml.addChildElement(hostNameSslStateElement, sslStateElement);
      
      if (hostNameSslStatesItem.thumbprint) {
        var thumbprintElement = js2xml.createElement('Thumbprint', 'http://schemas.microsoft.com/windowsazure');
        js2xml.setElementValue(thumbprintElement, hostNameSslStatesItem.thumbprint);
        js2xml.addChildElement(hostNameSslStateElement, thumbprintElement);
      }
      
      var toUpdateElement = js2xml.createElement('ToUpdate', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(toUpdateElement, hostNameSslStatesItem.toUpdate.toString());
      js2xml.addChildElement(hostNameSslStateElement, toUpdateElement);
    }
    js2xml.addChildElement(siteElement, hostNameSslStatesSequenceElement);
    
    requestContent = js2xml.serializeDocument(requestDoc);
    httpRequest.body = requestContent;
    // Send Request
    return request(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var siteElement2 = responseDoc.SITE ? responseDoc.SITE.length === 1 ? responseDoc.SITE[0] : responseDoc.SITE : null;
        if (siteElement2) {
          
          var webSiteInstance = { enabledHostNames: [], hostNameSslStates: [], hostNames: [], sslCertificates: [] };
          result.WebSite = webSiteInstance;
          
          var adminEnabledElement = siteElement2.ADMINENABLED ? siteElement2.ADMINENABLED.length === 1 ? siteElement2.ADMINENABLED[0] : siteElement2.ADMINENABLED : null;
          if (adminEnabledElement) {
            var adminEnabledInstance;
            adminEnabledInstance = adminEnabledElement;
            webSiteInstance.adminEnabled = adminEnabledInstance;
          }
          
          var availabilityStateElement = siteElement2.AVAILABILITYSTATE ? siteElement2.AVAILABILITYSTATE.length === 1 ? siteElement2.AVAILABILITYSTATE[0] : siteElement2.AVAILABILITYSTATE : null;
          if (availabilityStateElement) {
            var availabilityStateInstance;
            availabilityStateInstance = availabilityStateElement;
            webSiteInstance.availabilityState = availabilityStateInstance;
          }
          
          var computeModeElement = siteElement2.COMPUTEMODE ? siteElement2.COMPUTEMODE.length === 1 ? siteElement2.COMPUTEMODE[0] : siteElement2.COMPUTEMODE : null;
          if (computeModeElement) {
            var computeModeInstance;
            computeModeInstance = computeModeElement;
            webSiteInstance.computeMode = computeModeInstance;
          }
          
          var enabledElement = siteElement2.ENABLED ? siteElement2.ENABLED.length === 1 ? siteElement2.ENABLED[0] : siteElement2.ENABLED : null;
          if (enabledElement) {
            var enabledInstance;
            enabledInstance = enabledElement;
            webSiteInstance.enabled = enabledInstance;
          }
          
          var enabledHostNamesSequenceElement = siteElement2.ENABLEDHOSTNAMES ? siteElement2.ENABLEDHOSTNAMES.length === 1 ? siteElement2.ENABLEDHOSTNAMES[0] : siteElement2.ENABLEDHOSTNAMES : null;
          if (enabledHostNamesSequenceElement) {
            for (var loweredIndex2 = 0; loweredIndex2 < enabledHostNamesSequenceElement.STRING.length; loweredIndex2 = loweredIndex2 + 1) {
              var enabledHostNamesElement = enabledHostNamesSequenceElement.STRING[loweredIndex2];
              webSiteInstance.enabledHostNames.push(enabledHostNamesElement);
            }
          }
          
          var hostNameSslStatesSequenceElement2 = siteElement2.HOSTNAMESSLSTATES ? siteElement2.HOSTNAMESSLSTATES.length === 1 ? siteElement2.HOSTNAMESSLSTATES[0] : siteElement2.HOSTNAMESSLSTATES : null;
          if (hostNameSslStatesSequenceElement2) {
            for (var loweredIndex3 = 0; loweredIndex3 < hostNameSslStatesSequenceElement2.WEBSITEHOSTNAMESSLSTATE.length; loweredIndex3 = loweredIndex3 + 1) {
              var hostNameSslStatesElement = hostNameSslStatesSequenceElement2.WEBSITEHOSTNAMESSLSTATE[loweredIndex3];
              var webSiteHostNameSslStateInstance = {};
              webSiteInstance.hostNameSslStates.push(webSiteHostNameSslStateInstance);
              
              var nameElement2 = hostNameSslStatesElement.NAME ? hostNameSslStatesElement.NAME.length === 1 ? hostNameSslStatesElement.NAME[0] : hostNameSslStatesElement.NAME : null;
              if (nameElement2) {
                var nameInstance;
                nameInstance = nameElement2;
                webSiteHostNameSslStateInstance.name = nameInstance;
              }
              
              var sslStateElement2 = hostNameSslStatesElement.SSLSTATE ? hostNameSslStatesElement.SSLSTATE.length === 1 ? hostNameSslStatesElement.SSLSTATE[0] : hostNameSslStatesElement.SSLSTATE : null;
              if (sslStateElement2) {
                var sslStateInstance;
                sslStateInstance = sslStateElement2;
                webSiteHostNameSslStateInstance.sslState = sslStateInstance;
              }
              
              var thumbprintElement2 = hostNameSslStatesElement.THUMBPRINT ? hostNameSslStatesElement.THUMBPRINT.length === 1 ? hostNameSslStatesElement.THUMBPRINT[0] : hostNameSslStatesElement.THUMBPRINT : null;
              if (thumbprintElement2) {
                var thumbprintInstance;
                thumbprintInstance = thumbprintElement2;
                webSiteHostNameSslStateInstance.thumbprint = thumbprintInstance;
              }
              
              var virtualIPElement = hostNameSslStatesElement.VIRTUALIP ? hostNameSslStatesElement.VIRTUALIP.length === 1 ? hostNameSslStatesElement.VIRTUALIP[0] : hostNameSslStatesElement.VIRTUALIP : null;
              if (virtualIPElement) {
                var virtualIPInstance;
                virtualIPInstance = virtualIPElement;
                webSiteHostNameSslStateInstance.virtualIP = virtualIPInstance;
              }
            }
          }
          
          var hostNamesSequenceElement = siteElement2.HOSTNAMES ? siteElement2.HOSTNAMES.length === 1 ? siteElement2.HOSTNAMES[0] : siteElement2.HOSTNAMES : null;
          if (hostNamesSequenceElement) {
            for (var loweredIndex4 = 0; loweredIndex4 < hostNamesSequenceElement.STRING.length; loweredIndex4 = loweredIndex4 + 1) {
              var hostNamesElement = hostNamesSequenceElement.STRING[loweredIndex4];
              webSiteInstance.hostNames.push(hostNamesElement);
            }
          }
          
          var lastModifiedTimeUtcElement = siteElement2.LASTMODIFIEDTIMEUTC ? siteElement2.LASTMODIFIEDTIMEUTC.length === 1 ? siteElement2.LASTMODIFIEDTIMEUTC[0] : siteElement2.LASTMODIFIEDTIMEUTC : null;
          if (lastModifiedTimeUtcElement) {
            var lastModifiedTimeUtcInstance;
            lastModifiedTimeUtcInstance = new Date(lastModifiedTimeUtcElement);
            webSiteInstance.lastModifiedTimeUtc = lastModifiedTimeUtcInstance;
          }
          
          var nameElement3 = siteElement2.NAME ? siteElement2.NAME.length === 1 ? siteElement2.NAME[0] : siteElement2.NAME : null;
          if (nameElement3) {
            var nameInstance2;
            nameInstance2 = nameElement3;
            webSiteInstance.name = nameInstance2;
          }
          
          var ownerElement = siteElement2.OWNER ? siteElement2.OWNER.length === 1 ? siteElement2.OWNER[0] : siteElement2.OWNER : null;
          if (ownerElement) {
            var ownerInstance;
            ownerInstance = ownerElement;
            webSiteInstance.owner = ownerInstance;
          }
          
          var repositorySiteNameElement = siteElement2.REPOSITORYSITENAME ? siteElement2.REPOSITORYSITENAME.length === 1 ? siteElement2.REPOSITORYSITENAME[0] : siteElement2.REPOSITORYSITENAME : null;
          if (repositorySiteNameElement) {
            var repositorySiteNameInstance;
            repositorySiteNameInstance = repositorySiteNameElement;
            webSiteInstance.repositorySiteName = repositorySiteNameInstance;
          }
          
          var runtimeAvailabilityStateElement = siteElement2.RUNTIMEAVAILABILITYSTATE ? siteElement2.RUNTIMEAVAILABILITYSTATE.length === 1 ? siteElement2.RUNTIMEAVAILABILITYSTATE[0] : siteElement2.RUNTIMEAVAILABILITYSTATE : null;
          if (runtimeAvailabilityStateElement) {
            var runtimeAvailabilityStateInstance;
            runtimeAvailabilityStateInstance = runtimeAvailabilityStateElement;
            webSiteInstance.runtimeAvailabilityState = runtimeAvailabilityStateInstance;
          }
          
          var sSLCertificatesSequenceElement = siteElement2.SSLCERTIFICATES ? siteElement2.SSLCERTIFICATES.length === 1 ? siteElement2.SSLCERTIFICATES[0] : siteElement2.SSLCERTIFICATES : null;
          if (sSLCertificatesSequenceElement) {
            for (var loweredIndex5 = 0; loweredIndex5 < sSLCertificatesSequenceElement.CERTIFICATE.length; loweredIndex5 = loweredIndex5 + 1) {
              var sSLCertificatesElement = sSLCertificatesSequenceElement.CERTIFICATE[loweredIndex5];
              var certificateInstance = { hostNames: [] };
              webSiteInstance.sslCertificates.push(certificateInstance);
              
              var expirationDateElement = sSLCertificatesElement.EXPIRATIONDATE ? sSLCertificatesElement.EXPIRATIONDATE.length === 1 ? sSLCertificatesElement.EXPIRATIONDATE[0] : sSLCertificatesElement.EXPIRATIONDATE : null;
              if (expirationDateElement) {
                var expirationDateInstance;
                expirationDateInstance = new Date(expirationDateElement);
                certificateInstance.expirationDate = expirationDateInstance;
              }
              
              var friendlyNameElement = sSLCertificatesElement.FRIENDLYNAME ? sSLCertificatesElement.FRIENDLYNAME.length === 1 ? sSLCertificatesElement.FRIENDLYNAME[0] : sSLCertificatesElement.FRIENDLYNAME : null;
              if (friendlyNameElement) {
                var friendlyNameInstance;
                friendlyNameInstance = friendlyNameElement;
                certificateInstance.friendlyName = friendlyNameInstance;
              }
              
              var hostNamesSequenceElement2 = sSLCertificatesElement.HOSTNAMES ? sSLCertificatesElement.HOSTNAMES.length === 1 ? sSLCertificatesElement.HOSTNAMES[0] : sSLCertificatesElement.HOSTNAMES : null;
              if (hostNamesSequenceElement2) {
                for (var loweredIndex6 = 0; loweredIndex6 < hostNamesSequenceElement2.STRING.length; loweredIndex6 = loweredIndex6 + 1) {
                  var hostNamesElement2 = hostNamesSequenceElement2.STRING[loweredIndex6];
                  certificateInstance.hostNames.push(hostNamesElement2);
                }
              }
              
              var issueDateElement = sSLCertificatesElement.ISSUEDATE ? sSLCertificatesElement.ISSUEDATE.length === 1 ? sSLCertificatesElement.ISSUEDATE[0] : sSLCertificatesElement.ISSUEDATE : null;
              if (issueDateElement) {
                var issueDateInstance;
                issueDateInstance = new Date(issueDateElement);
                certificateInstance.issueDate = issueDateInstance;
              }
              
              var issuerElement = sSLCertificatesElement.ISSUER ? sSLCertificatesElement.ISSUER.length === 1 ? sSLCertificatesElement.ISSUER[0] : sSLCertificatesElement.ISSUER : null;
              if (issuerElement) {
                var issuerInstance;
                issuerInstance = issuerElement;
                certificateInstance.issuer = issuerInstance;
              }
              
              var passwordElement = sSLCertificatesElement.PASSWORD ? sSLCertificatesElement.PASSWORD.length === 1 ? sSLCertificatesElement.PASSWORD[0] : sSLCertificatesElement.PASSWORD : null;
              if (passwordElement) {
                var passwordInstance;
                passwordInstance = passwordElement;
                certificateInstance.password = passwordInstance;
              }
              
              var pfxBlobElement = sSLCertificatesElement.PFXBLOB ? sSLCertificatesElement.PFXBLOB.length === 1 ? sSLCertificatesElement.PFXBLOB[0] : sSLCertificatesElement.PFXBLOB : null;
              if (pfxBlobElement) {
                var pfxBlobInstance;
                pfxBlobInstance = new Buffer(pfxBlobElement, 'base64').toString('ascii');
                certificateInstance.pfxBlob = pfxBlobInstance;
              }
              
              var selfLinkElement = sSLCertificatesElement.SELFLINK ? sSLCertificatesElement.SELFLINK.length === 1 ? sSLCertificatesElement.SELFLINK[0] : sSLCertificatesElement.SELFLINK : null;
              if (selfLinkElement) {
                var selfLinkInstance;
                selfLinkInstance = selfLinkElement;
                certificateInstance.selfLinkUri = selfLinkInstance;
              }
              
              var siteNameElement = sSLCertificatesElement.SITENAME ? sSLCertificatesElement.SITENAME.length === 1 ? sSLCertificatesElement.SITENAME[0] : sSLCertificatesElement.SITENAME : null;
              if (siteNameElement) {
                var siteNameInstance;
                siteNameInstance = siteNameElement;
                certificateInstance.siteName = siteNameInstance;
              }
              
              var subjectNameElement = sSLCertificatesElement.SUBJECTNAME ? sSLCertificatesElement.SUBJECTNAME.length === 1 ? sSLCertificatesElement.SUBJECTNAME[0] : sSLCertificatesElement.SUBJECTNAME : null;
              if (subjectNameElement) {
                var subjectNameInstance;
                subjectNameInstance = subjectNameElement;
                certificateInstance.subjectName = subjectNameInstance;
              }
              
              var thumbprintElement3 = sSLCertificatesElement.THUMBPRINT ? sSLCertificatesElement.THUMBPRINT.length === 1 ? sSLCertificatesElement.THUMBPRINT[0] : sSLCertificatesElement.THUMBPRINT : null;
              if (thumbprintElement3) {
                var thumbprintInstance2;
                thumbprintInstance2 = thumbprintElement3;
                certificateInstance.thumbprint = thumbprintInstance2;
              }
              
              var toDeleteElement = sSLCertificatesElement.TODELETE ? sSLCertificatesElement.TODELETE.length === 1 ? sSLCertificatesElement.TODELETE[0] : sSLCertificatesElement.TODELETE : null;
              if (toDeleteElement) {
                var toDeleteInstance;
                toDeleteInstance = toDeleteElement;
                certificateInstance.isToBeDeleted = toDeleteInstance;
              }
              
              var validElement = sSLCertificatesElement.VALID ? sSLCertificatesElement.VALID.length === 1 ? sSLCertificatesElement.VALID[0] : sSLCertificatesElement.VALID : null;
              if (validElement) {
                var validInstance;
                validInstance = validElement;
                certificateInstance.isValid = validInstance;
              }
            }
          }
          
          var selfLinkElement2 = siteElement2.SELFLINK ? siteElement2.SELFLINK.length === 1 ? siteElement2.SELFLINK[0] : siteElement2.SELFLINK : null;
          if (selfLinkElement2) {
            var selfLinkInstance2;
            selfLinkInstance2 = selfLinkElement2;
            webSiteInstance.uri = selfLinkInstance2;
          }
          
          var serverFarmElement = siteElement2.SERVERFARM ? siteElement2.SERVERFARM.length === 1 ? siteElement2.SERVERFARM[0] : siteElement2.SERVERFARM : null;
          if (serverFarmElement) {
            var serverFarmInstance;
            serverFarmInstance = serverFarmElement;
            webSiteInstance.serverFarm = serverFarmInstance;
          }
          
          var siteModeElement = siteElement2.SITEMODE ? siteElement2.SITEMODE.length === 1 ? siteElement2.SITEMODE[0] : siteElement2.SITEMODE : null;
          if (siteModeElement) {
            var siteModeInstance;
            siteModeInstance = siteModeElement;
            webSiteInstance.siteMode = siteModeInstance;
          }
          
          var sitePropertiesElement = siteElement2.SITEPROPERTIES ? siteElement2.SITEPROPERTIES.length === 1 ? siteElement2.SITEPROPERTIES[0] : siteElement2.SITEPROPERTIES : null;
          if (sitePropertiesElement) {
            var sitePropertiesInstance = { appSettings: {}, metadata: {}, properties: {} };
            webSiteInstance.siteProperties = sitePropertiesInstance;
            
            var appSettingsSequenceElement = sitePropertiesElement.APPSETTINGS ? sitePropertiesElement.APPSETTINGS.length === 1 ? sitePropertiesElement.APPSETTINGS[0] : sitePropertiesElement.APPSETTINGS : null;
            if (appSettingsSequenceElement) {
              for (var loweredIndex7 = 0; loweredIndex7 < appSettingsSequenceElement.NAMEVALUEPAIR.length; loweredIndex7 = loweredIndex7 + 1) {
                var appSettingsElement = appSettingsSequenceElement.NAMEVALUEPAIR[loweredIndex7];
                var appSettingsKey = appSettingsElement.NAME ? appSettingsElement.NAME.length === 1 ? appSettingsElement.NAME[0] : appSettingsElement.NAME : null;
                var appSettingsValue = appSettingsElement.VALUE ? appSettingsElement.VALUE.length === 1 ? appSettingsElement.VALUE[0] : appSettingsElement.VALUE : null;
                sitePropertiesInstance.appSettings[appSettingsKey] = appSettingsValue;
              }
            }
            
            var appSettingsSequenceElement2 = sitePropertiesElement.APPSETTINGS ? sitePropertiesElement.APPSETTINGS.length === 1 ? sitePropertiesElement.APPSETTINGS[0] : sitePropertiesElement.APPSETTINGS : null;
            if (appSettingsSequenceElement2) {
              for (var loweredIndex8 = 0; loweredIndex8 < appSettingsSequenceElement2.NAMEVALUEPAIR.length; loweredIndex8 = loweredIndex8 + 1) {
                var appSettingsElement2 = appSettingsSequenceElement2.NAMEVALUEPAIR[loweredIndex8];
                var appSettingsKey2 = appSettingsElement2.NAME ? appSettingsElement2.NAME.length === 1 ? appSettingsElement2.NAME[0] : appSettingsElement2.NAME : null;
                var appSettingsValue2 = appSettingsElement2.VALUE ? appSettingsElement2.VALUE.length === 1 ? appSettingsElement2.VALUE[0] : appSettingsElement2.VALUE : null;
                sitePropertiesInstance.metadata[appSettingsKey2] = appSettingsValue2;
              }
            }
            
            var appSettingsSequenceElement3 = sitePropertiesElement.APPSETTINGS ? sitePropertiesElement.APPSETTINGS.length === 1 ? sitePropertiesElement.APPSETTINGS[0] : sitePropertiesElement.APPSETTINGS : null;
            if (appSettingsSequenceElement3) {
              for (var loweredIndex9 = 0; loweredIndex9 < appSettingsSequenceElement3.NAMEVALUEPAIR.length; loweredIndex9 = loweredIndex9 + 1) {
                var appSettingsElement3 = appSettingsSequenceElement3.NAMEVALUEPAIR[loweredIndex9];
                var appSettingsKey3 = appSettingsElement3.NAME ? appSettingsElement3.NAME.length === 1 ? appSettingsElement3.NAME[0] : appSettingsElement3.NAME : null;
                var appSettingsValue3 = appSettingsElement3.VALUE ? appSettingsElement3.VALUE.length === 1 ? appSettingsElement3.VALUE[0] : appSettingsElement3.VALUE : null;
                sitePropertiesInstance.properties[appSettingsKey3] = appSettingsValue3;
              }
            }
          }
          
          var stateElement = siteElement2.STATE ? siteElement2.STATE.length === 1 ? siteElement2.STATE[0] : siteElement2.STATE : null;
          if (stateElement) {
            var stateInstance;
            stateInstance = stateElement;
            webSiteInstance.state = stateInstance;
          }
          
          var usageStateElement = siteElement2.USAGESTATE ? siteElement2.USAGESTATE.length === 1 ? siteElement2.USAGESTATE[0] : siteElement2.USAGESTATE : null;
          if (usageStateElement) {
            var usageStateInstance;
            usageStateInstance = usageStateElement;
            webSiteInstance.usageState = usageStateInstance;
          }
          
          var webSpaceElement = siteElement2.WEBSPACE ? siteElement2.WEBSPACE.length === 1 ? siteElement2.WEBSPACE[0] : siteElement2.WEBSPACE : null;
          if (webSpaceElement) {
            var webSpaceInstance;
            webSpaceInstance = webSpaceElement;
            webSiteInstance.webSpace = webSpaceInstance;
          }
        }
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * You can restart a web site by issuing an HTTP POST request.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/dn236425.aspx for
   * more information)
   *
   * @param {String} webSpaceName - The name of the web space.
   *
   * @param {String} webSiteName - The name of the web site.
   *
   * @param {Function} callback
   *
   * @returns {OperationResponse} - A standard service response including an
   * HTTP status code and request ID.
   */
  WebSiteOperations.prototype.restart = function(webSpaceName, webSiteName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (webSpaceName === null || webSpaceName === undefined) {
      return callback(new Error('webSpaceName cannot be null.'));
    }
    if (webSiteName === null || webSiteName === undefined) {
      return callback(new Error('webSiteName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/WebSpaces/' + webSpaceName + '/sites/' + webSiteName + '/restart';
    
    // Create HTTP transport objects
    var httpRequest = {};
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['Content-Length'] = '0';
    httpRequest.headers['x-ms-version'] = '2013-03-01';
    
    // Set Credentials
    httpRequest.key = this.client.credentials.keyvalue;
    httpRequest.cert = this.client.credentials.certvalue;
    
    // Send Request
    return request(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * You can delete a web site by issuing an HTTP DELETE request. If the web
   * site being deleted is the only site remaining in a server farm, you can
   * optionally delete the server farm as well by using the
   * deleteEmptyServerFarm parameter.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/dn236430.aspx for
   * more information)
   *
   * @param {String} webSpaceName - The name of the web space.
   *
   * @param {String} webSiteName - The name of the web site.
   *
   * @param {Boolean} deleteEmptyServerFarm - If the site being deleted is the
   * last web site in a server farm, you can delete the server farm.
   *
   * @param {Boolean} deleteMetrics - Delete the metrics for the site that you
   * are deleting
   *
   * @param {Function} callback
   *
   * @returns {OperationResponse} - A standard service response including an
   * HTTP status code and request ID.
   */
  WebSiteOperations.prototype.delete = function(webSpaceName, webSiteName, deleteEmptyServerFarm, deleteMetrics, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (webSpaceName === null || webSpaceName === undefined) {
      return callback(new Error('webSpaceName cannot be null.'));
    }
    if (webSiteName === null || webSiteName === undefined) {
      return callback(new Error('webSiteName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/WebSpaces/' + webSpaceName + '/sites/' + webSiteName + '?';
    url2 = url2 + '&deleteEmptyServerFarm=' + null.encodeURIComponent(deleteEmptyServerFarm.toString());
    url2 = url2 + '&deleteMetrics=' + null.encodeURIComponent(deleteMetrics.toString());
    
    // Create HTTP transport objects
    var httpRequest = {};
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2013-03-01';
    
    // Set Credentials
    httpRequest.key = this.client.credentials.keyvalue;
    httpRequest.cert = this.client.credentials.certvalue;
    
    // Send Request
    return request(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * You can upgrade a site to Shared mode or Standard mode, or downgrade a
   * site to Shared mode or Free mode, by issuing an HTTP PUT request and
   * providing a request body.  Note: The instance size and instance count for
   * a web site are determined by the server farm to which a site belongs. To
   * change these values, you must change the server farm WorkerSize and
   * NumberOfWorkers attributes, respectively. For more information, see
   * Create, Manage, or Delete a Server Farm.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/dn167003.aspx for
   * more information)
   *
   * @param {String} webSpaceName - The name of the web space.
   *
   * @param {String} webSiteName - The name of the web site.
   *
   * @param {WebSiteUpgradeParameters} parameters - Parameters supplied to the
   * Upgrade Web Site operation.
   *
   * @param {Function} callback
   *
   * @returns {WebSiteUpgradeResponse} - The Upgrade Web Site operation
   * response.
   */
  WebSiteOperations.prototype.upgrade = function(webSpaceName, webSiteName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (webSpaceName === null || webSpaceName === undefined) {
      return callback(new Error('webSpaceName cannot be null.'));
    }
    if (webSiteName === null || webSiteName === undefined) {
      return callback(new Error('webSiteName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/WebSpaces/' + webSpaceName + '/sites/' + webSiteName;
    
    // Create HTTP transport objects
    var httpRequest = {};
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2013-03-01';
    httpRequest.headers['Content-Type'] = 'application/xml';
    
    // Set Credentials
    httpRequest.key = this.client.credentials.keyvalue;
    httpRequest.cert = this.client.credentials.certvalue;
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = {};
    
    var siteElement = js2xml.createElement('Site', 'http://schemas.microsoft.com/windowsazure');
    js2xml.addChildElement(requestDoc, siteElement);
    
    var computeModeElement = js2xml.createElement('ComputeMode', 'http://schemas.microsoft.com/windowsazure');
    js2xml.setElementValue(computeModeElement, parameters.computeMode.toString());
    js2xml.addChildElement(siteElement, computeModeElement);
    
    var siteModeElement = js2xml.createElement('SiteMode', 'http://schemas.microsoft.com/windowsazure');
    js2xml.setElementValue(siteModeElement, parameters.siteMode.toString());
    js2xml.addChildElement(siteElement, siteModeElement);
    
    if (parameters.serverFarm) {
      var serverFarmElement = js2xml.createElement('ServerFarm', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(serverFarmElement, parameters.serverFarm);
      js2xml.addChildElement(siteElement, serverFarmElement);
    }
    
    requestContent = js2xml.serializeDocument(requestDoc);
    httpRequest.body = requestContent;
    // Send Request
    return request(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var siteElement2 = responseDoc.SITE ? responseDoc.SITE.length === 1 ? responseDoc.SITE[0] : responseDoc.SITE : null;
        if (siteElement2) {
          
          var webSiteInstance = { enabledHostNames: [], hostNameSslStates: [], hostNames: [], sslCertificates: [] };
          result.webSite = webSiteInstance;
          
          var adminEnabledElement = siteElement2.ADMINENABLED ? siteElement2.ADMINENABLED.length === 1 ? siteElement2.ADMINENABLED[0] : siteElement2.ADMINENABLED : null;
          if (adminEnabledElement) {
            var adminEnabledInstance;
            adminEnabledInstance = adminEnabledElement;
            webSiteInstance.adminEnabled = adminEnabledInstance;
          }
          
          var availabilityStateElement = siteElement2.AVAILABILITYSTATE ? siteElement2.AVAILABILITYSTATE.length === 1 ? siteElement2.AVAILABILITYSTATE[0] : siteElement2.AVAILABILITYSTATE : null;
          if (availabilityStateElement) {
            var availabilityStateInstance;
            availabilityStateInstance = availabilityStateElement;
            webSiteInstance.availabilityState = availabilityStateInstance;
          }
          
          var computeModeElement2 = siteElement2.COMPUTEMODE ? siteElement2.COMPUTEMODE.length === 1 ? siteElement2.COMPUTEMODE[0] : siteElement2.COMPUTEMODE : null;
          if (computeModeElement2) {
            var computeModeInstance;
            computeModeInstance = computeModeElement2;
            webSiteInstance.computeMode = computeModeInstance;
          }
          
          var enabledElement = siteElement2.ENABLED ? siteElement2.ENABLED.length === 1 ? siteElement2.ENABLED[0] : siteElement2.ENABLED : null;
          if (enabledElement) {
            var enabledInstance;
            enabledInstance = enabledElement;
            webSiteInstance.enabled = enabledInstance;
          }
          
          var enabledHostNamesSequenceElement = siteElement2.ENABLEDHOSTNAMES ? siteElement2.ENABLEDHOSTNAMES.length === 1 ? siteElement2.ENABLEDHOSTNAMES[0] : siteElement2.ENABLEDHOSTNAMES : null;
          if (enabledHostNamesSequenceElement) {
            for (var loweredIndex1 = 0; loweredIndex1 < enabledHostNamesSequenceElement.STRING.length; loweredIndex1 = loweredIndex1 + 1) {
              var enabledHostNamesElement = enabledHostNamesSequenceElement.STRING[loweredIndex1];
              webSiteInstance.enabledHostNames.push(enabledHostNamesElement);
            }
          }
          
          var hostNameSslStatesSequenceElement = siteElement2.HOSTNAMESSLSTATES ? siteElement2.HOSTNAMESSLSTATES.length === 1 ? siteElement2.HOSTNAMESSLSTATES[0] : siteElement2.HOSTNAMESSLSTATES : null;
          if (hostNameSslStatesSequenceElement) {
            for (var loweredIndex2 = 0; loweredIndex2 < hostNameSslStatesSequenceElement.WEBSITEHOSTNAMESSLSTATE.length; loweredIndex2 = loweredIndex2 + 1) {
              var hostNameSslStatesElement = hostNameSslStatesSequenceElement.WEBSITEHOSTNAMESSLSTATE[loweredIndex2];
              var webSiteHostNameSslStateInstance = {};
              webSiteInstance.hostNameSslStates.push(webSiteHostNameSslStateInstance);
              
              var nameElement = hostNameSslStatesElement.NAME ? hostNameSslStatesElement.NAME.length === 1 ? hostNameSslStatesElement.NAME[0] : hostNameSslStatesElement.NAME : null;
              if (nameElement) {
                var nameInstance;
                nameInstance = nameElement;
                webSiteHostNameSslStateInstance.name = nameInstance;
              }
              
              var sslStateElement = hostNameSslStatesElement.SSLSTATE ? hostNameSslStatesElement.SSLSTATE.length === 1 ? hostNameSslStatesElement.SSLSTATE[0] : hostNameSslStatesElement.SSLSTATE : null;
              if (sslStateElement) {
                var sslStateInstance;
                sslStateInstance = sslStateElement;
                webSiteHostNameSslStateInstance.sslState = sslStateInstance;
              }
              
              var thumbprintElement = hostNameSslStatesElement.THUMBPRINT ? hostNameSslStatesElement.THUMBPRINT.length === 1 ? hostNameSslStatesElement.THUMBPRINT[0] : hostNameSslStatesElement.THUMBPRINT : null;
              if (thumbprintElement) {
                var thumbprintInstance;
                thumbprintInstance = thumbprintElement;
                webSiteHostNameSslStateInstance.thumbprint = thumbprintInstance;
              }
              
              var virtualIPElement = hostNameSslStatesElement.VIRTUALIP ? hostNameSslStatesElement.VIRTUALIP.length === 1 ? hostNameSslStatesElement.VIRTUALIP[0] : hostNameSslStatesElement.VIRTUALIP : null;
              if (virtualIPElement) {
                var virtualIPInstance;
                virtualIPInstance = virtualIPElement;
                webSiteHostNameSslStateInstance.virtualIP = virtualIPInstance;
              }
            }
          }
          
          var hostNamesSequenceElement = siteElement2.HOSTNAMES ? siteElement2.HOSTNAMES.length === 1 ? siteElement2.HOSTNAMES[0] : siteElement2.HOSTNAMES : null;
          if (hostNamesSequenceElement) {
            for (var loweredIndex3 = 0; loweredIndex3 < hostNamesSequenceElement.STRING.length; loweredIndex3 = loweredIndex3 + 1) {
              var hostNamesElement = hostNamesSequenceElement.STRING[loweredIndex3];
              webSiteInstance.hostNames.push(hostNamesElement);
            }
          }
          
          var lastModifiedTimeUtcElement = siteElement2.LASTMODIFIEDTIMEUTC ? siteElement2.LASTMODIFIEDTIMEUTC.length === 1 ? siteElement2.LASTMODIFIEDTIMEUTC[0] : siteElement2.LASTMODIFIEDTIMEUTC : null;
          if (lastModifiedTimeUtcElement) {
            var lastModifiedTimeUtcInstance;
            lastModifiedTimeUtcInstance = new Date(lastModifiedTimeUtcElement);
            webSiteInstance.lastModifiedTimeUtc = lastModifiedTimeUtcInstance;
          }
          
          var nameElement2 = siteElement2.NAME ? siteElement2.NAME.length === 1 ? siteElement2.NAME[0] : siteElement2.NAME : null;
          if (nameElement2) {
            var nameInstance2;
            nameInstance2 = nameElement2;
            webSiteInstance.name = nameInstance2;
          }
          
          var ownerElement = siteElement2.OWNER ? siteElement2.OWNER.length === 1 ? siteElement2.OWNER[0] : siteElement2.OWNER : null;
          if (ownerElement) {
            var ownerInstance;
            ownerInstance = ownerElement;
            webSiteInstance.owner = ownerInstance;
          }
          
          var repositorySiteNameElement = siteElement2.REPOSITORYSITENAME ? siteElement2.REPOSITORYSITENAME.length === 1 ? siteElement2.REPOSITORYSITENAME[0] : siteElement2.REPOSITORYSITENAME : null;
          if (repositorySiteNameElement) {
            var repositorySiteNameInstance;
            repositorySiteNameInstance = repositorySiteNameElement;
            webSiteInstance.repositorySiteName = repositorySiteNameInstance;
          }
          
          var runtimeAvailabilityStateElement = siteElement2.RUNTIMEAVAILABILITYSTATE ? siteElement2.RUNTIMEAVAILABILITYSTATE.length === 1 ? siteElement2.RUNTIMEAVAILABILITYSTATE[0] : siteElement2.RUNTIMEAVAILABILITYSTATE : null;
          if (runtimeAvailabilityStateElement) {
            var runtimeAvailabilityStateInstance;
            runtimeAvailabilityStateInstance = runtimeAvailabilityStateElement;
            webSiteInstance.runtimeAvailabilityState = runtimeAvailabilityStateInstance;
          }
          
          var sSLCertificatesSequenceElement = siteElement2.SSLCERTIFICATES ? siteElement2.SSLCERTIFICATES.length === 1 ? siteElement2.SSLCERTIFICATES[0] : siteElement2.SSLCERTIFICATES : null;
          if (sSLCertificatesSequenceElement) {
            for (var loweredIndex4 = 0; loweredIndex4 < sSLCertificatesSequenceElement.CERTIFICATE.length; loweredIndex4 = loweredIndex4 + 1) {
              var sSLCertificatesElement = sSLCertificatesSequenceElement.CERTIFICATE[loweredIndex4];
              var certificateInstance = { hostNames: [] };
              webSiteInstance.sslCertificates.push(certificateInstance);
              
              var expirationDateElement = sSLCertificatesElement.EXPIRATIONDATE ? sSLCertificatesElement.EXPIRATIONDATE.length === 1 ? sSLCertificatesElement.EXPIRATIONDATE[0] : sSLCertificatesElement.EXPIRATIONDATE : null;
              if (expirationDateElement) {
                var expirationDateInstance;
                expirationDateInstance = new Date(expirationDateElement);
                certificateInstance.expirationDate = expirationDateInstance;
              }
              
              var friendlyNameElement = sSLCertificatesElement.FRIENDLYNAME ? sSLCertificatesElement.FRIENDLYNAME.length === 1 ? sSLCertificatesElement.FRIENDLYNAME[0] : sSLCertificatesElement.FRIENDLYNAME : null;
              if (friendlyNameElement) {
                var friendlyNameInstance;
                friendlyNameInstance = friendlyNameElement;
                certificateInstance.friendlyName = friendlyNameInstance;
              }
              
              var hostNamesSequenceElement2 = sSLCertificatesElement.HOSTNAMES ? sSLCertificatesElement.HOSTNAMES.length === 1 ? sSLCertificatesElement.HOSTNAMES[0] : sSLCertificatesElement.HOSTNAMES : null;
              if (hostNamesSequenceElement2) {
                for (var loweredIndex5 = 0; loweredIndex5 < hostNamesSequenceElement2.STRING.length; loweredIndex5 = loweredIndex5 + 1) {
                  var hostNamesElement2 = hostNamesSequenceElement2.STRING[loweredIndex5];
                  certificateInstance.hostNames.push(hostNamesElement2);
                }
              }
              
              var issueDateElement = sSLCertificatesElement.ISSUEDATE ? sSLCertificatesElement.ISSUEDATE.length === 1 ? sSLCertificatesElement.ISSUEDATE[0] : sSLCertificatesElement.ISSUEDATE : null;
              if (issueDateElement) {
                var issueDateInstance;
                issueDateInstance = new Date(issueDateElement);
                certificateInstance.issueDate = issueDateInstance;
              }
              
              var issuerElement = sSLCertificatesElement.ISSUER ? sSLCertificatesElement.ISSUER.length === 1 ? sSLCertificatesElement.ISSUER[0] : sSLCertificatesElement.ISSUER : null;
              if (issuerElement) {
                var issuerInstance;
                issuerInstance = issuerElement;
                certificateInstance.issuer = issuerInstance;
              }
              
              var passwordElement = sSLCertificatesElement.PASSWORD ? sSLCertificatesElement.PASSWORD.length === 1 ? sSLCertificatesElement.PASSWORD[0] : sSLCertificatesElement.PASSWORD : null;
              if (passwordElement) {
                var passwordInstance;
                passwordInstance = passwordElement;
                certificateInstance.password = passwordInstance;
              }
              
              var pfxBlobElement = sSLCertificatesElement.PFXBLOB ? sSLCertificatesElement.PFXBLOB.length === 1 ? sSLCertificatesElement.PFXBLOB[0] : sSLCertificatesElement.PFXBLOB : null;
              if (pfxBlobElement) {
                var pfxBlobInstance;
                pfxBlobInstance = new Buffer(pfxBlobElement, 'base64').toString('ascii');
                certificateInstance.pfxBlob = pfxBlobInstance;
              }
              
              var selfLinkElement = sSLCertificatesElement.SELFLINK ? sSLCertificatesElement.SELFLINK.length === 1 ? sSLCertificatesElement.SELFLINK[0] : sSLCertificatesElement.SELFLINK : null;
              if (selfLinkElement) {
                var selfLinkInstance;
                selfLinkInstance = selfLinkElement;
                certificateInstance.selfLinkUri = selfLinkInstance;
              }
              
              var siteNameElement = sSLCertificatesElement.SITENAME ? sSLCertificatesElement.SITENAME.length === 1 ? sSLCertificatesElement.SITENAME[0] : sSLCertificatesElement.SITENAME : null;
              if (siteNameElement) {
                var siteNameInstance;
                siteNameInstance = siteNameElement;
                certificateInstance.siteName = siteNameInstance;
              }
              
              var subjectNameElement = sSLCertificatesElement.SUBJECTNAME ? sSLCertificatesElement.SUBJECTNAME.length === 1 ? sSLCertificatesElement.SUBJECTNAME[0] : sSLCertificatesElement.SUBJECTNAME : null;
              if (subjectNameElement) {
                var subjectNameInstance;
                subjectNameInstance = subjectNameElement;
                certificateInstance.subjectName = subjectNameInstance;
              }
              
              var thumbprintElement2 = sSLCertificatesElement.THUMBPRINT ? sSLCertificatesElement.THUMBPRINT.length === 1 ? sSLCertificatesElement.THUMBPRINT[0] : sSLCertificatesElement.THUMBPRINT : null;
              if (thumbprintElement2) {
                var thumbprintInstance2;
                thumbprintInstance2 = thumbprintElement2;
                certificateInstance.thumbprint = thumbprintInstance2;
              }
              
              var toDeleteElement = sSLCertificatesElement.TODELETE ? sSLCertificatesElement.TODELETE.length === 1 ? sSLCertificatesElement.TODELETE[0] : sSLCertificatesElement.TODELETE : null;
              if (toDeleteElement) {
                var toDeleteInstance;
                toDeleteInstance = toDeleteElement;
                certificateInstance.isToBeDeleted = toDeleteInstance;
              }
              
              var validElement = sSLCertificatesElement.VALID ? sSLCertificatesElement.VALID.length === 1 ? sSLCertificatesElement.VALID[0] : sSLCertificatesElement.VALID : null;
              if (validElement) {
                var validInstance;
                validInstance = validElement;
                certificateInstance.isValid = validInstance;
              }
            }
          }
          
          var selfLinkElement2 = siteElement2.SELFLINK ? siteElement2.SELFLINK.length === 1 ? siteElement2.SELFLINK[0] : siteElement2.SELFLINK : null;
          if (selfLinkElement2) {
            var selfLinkInstance2;
            selfLinkInstance2 = selfLinkElement2;
            webSiteInstance.uri = selfLinkInstance2;
          }
          
          var serverFarmElement2 = siteElement2.SERVERFARM ? siteElement2.SERVERFARM.length === 1 ? siteElement2.SERVERFARM[0] : siteElement2.SERVERFARM : null;
          if (serverFarmElement2) {
            var serverFarmInstance;
            serverFarmInstance = serverFarmElement2;
            webSiteInstance.serverFarm = serverFarmInstance;
          }
          
          var siteModeElement2 = siteElement2.SITEMODE ? siteElement2.SITEMODE.length === 1 ? siteElement2.SITEMODE[0] : siteElement2.SITEMODE : null;
          if (siteModeElement2) {
            var siteModeInstance;
            siteModeInstance = siteModeElement2;
            webSiteInstance.siteMode = siteModeInstance;
          }
          
          var sitePropertiesElement = siteElement2.SITEPROPERTIES ? siteElement2.SITEPROPERTIES.length === 1 ? siteElement2.SITEPROPERTIES[0] : siteElement2.SITEPROPERTIES : null;
          if (sitePropertiesElement) {
            var sitePropertiesInstance = { appSettings: {}, metadata: {}, properties: {} };
            webSiteInstance.siteProperties = sitePropertiesInstance;
            
            var appSettingsSequenceElement = sitePropertiesElement.APPSETTINGS ? sitePropertiesElement.APPSETTINGS.length === 1 ? sitePropertiesElement.APPSETTINGS[0] : sitePropertiesElement.APPSETTINGS : null;
            if (appSettingsSequenceElement) {
              for (var loweredIndex6 = 0; loweredIndex6 < appSettingsSequenceElement.NAMEVALUEPAIR.length; loweredIndex6 = loweredIndex6 + 1) {
                var appSettingsElement = appSettingsSequenceElement.NAMEVALUEPAIR[loweredIndex6];
                var appSettingsKey = appSettingsElement.NAME ? appSettingsElement.NAME.length === 1 ? appSettingsElement.NAME[0] : appSettingsElement.NAME : null;
                var appSettingsValue = appSettingsElement.VALUE ? appSettingsElement.VALUE.length === 1 ? appSettingsElement.VALUE[0] : appSettingsElement.VALUE : null;
                sitePropertiesInstance.appSettings[appSettingsKey] = appSettingsValue;
              }
            }
            
            var appSettingsSequenceElement2 = sitePropertiesElement.APPSETTINGS ? sitePropertiesElement.APPSETTINGS.length === 1 ? sitePropertiesElement.APPSETTINGS[0] : sitePropertiesElement.APPSETTINGS : null;
            if (appSettingsSequenceElement2) {
              for (var loweredIndex7 = 0; loweredIndex7 < appSettingsSequenceElement2.NAMEVALUEPAIR.length; loweredIndex7 = loweredIndex7 + 1) {
                var appSettingsElement2 = appSettingsSequenceElement2.NAMEVALUEPAIR[loweredIndex7];
                var appSettingsKey2 = appSettingsElement2.NAME ? appSettingsElement2.NAME.length === 1 ? appSettingsElement2.NAME[0] : appSettingsElement2.NAME : null;
                var appSettingsValue2 = appSettingsElement2.VALUE ? appSettingsElement2.VALUE.length === 1 ? appSettingsElement2.VALUE[0] : appSettingsElement2.VALUE : null;
                sitePropertiesInstance.metadata[appSettingsKey2] = appSettingsValue2;
              }
            }
            
            var appSettingsSequenceElement3 = sitePropertiesElement.APPSETTINGS ? sitePropertiesElement.APPSETTINGS.length === 1 ? sitePropertiesElement.APPSETTINGS[0] : sitePropertiesElement.APPSETTINGS : null;
            if (appSettingsSequenceElement3) {
              for (var loweredIndex8 = 0; loweredIndex8 < appSettingsSequenceElement3.NAMEVALUEPAIR.length; loweredIndex8 = loweredIndex8 + 1) {
                var appSettingsElement3 = appSettingsSequenceElement3.NAMEVALUEPAIR[loweredIndex8];
                var appSettingsKey3 = appSettingsElement3.NAME ? appSettingsElement3.NAME.length === 1 ? appSettingsElement3.NAME[0] : appSettingsElement3.NAME : null;
                var appSettingsValue3 = appSettingsElement3.VALUE ? appSettingsElement3.VALUE.length === 1 ? appSettingsElement3.VALUE[0] : appSettingsElement3.VALUE : null;
                sitePropertiesInstance.properties[appSettingsKey3] = appSettingsValue3;
              }
            }
          }
          
          var stateElement = siteElement2.STATE ? siteElement2.STATE.length === 1 ? siteElement2.STATE[0] : siteElement2.STATE : null;
          if (stateElement) {
            var stateInstance;
            stateInstance = stateElement;
            webSiteInstance.state = stateInstance;
          }
          
          var usageStateElement = siteElement2.USAGESTATE ? siteElement2.USAGESTATE.length === 1 ? siteElement2.USAGESTATE[0] : siteElement2.USAGESTATE : null;
          if (usageStateElement) {
            var usageStateInstance;
            usageStateInstance = usageStateElement;
            webSiteInstance.usageState = usageStateInstance;
          }
          
          var webSpaceElement = siteElement2.WEBSPACE ? siteElement2.WEBSPACE.length === 1 ? siteElement2.WEBSPACE[0] : siteElement2.WEBSPACE : null;
          if (webSpaceElement) {
            var webSpaceInstance;
            webSpaceInstance = webSpaceElement;
            webSiteInstance.webSpace = webSpaceInstance;
          }
        }
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * A web site repository is essentially a GIT repository that you can use to
   * manage your web site content. By using GIT source control tools, you can
   * push or pull version controlled changes to your site. You can create a
   * repository for your web site by issuing an HTTP POST request, or retrieve
   * information about the repository by using HTTP GET.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/dn166967.aspx for
   * more information)
   *
   * @param {String} webSpaceName - The name of the web space.
   *
   * @param {String} webSiteName - The name of the web site.
   *
   * @param {Function} callback
   *
   * @returns {WebSiteCreateRepositoryResponse} - The Create Web Site
   * Repository operation response.
   */
  WebSiteOperations.prototype.createRepository = function(webSpaceName, webSiteName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (webSpaceName === null || webSpaceName === undefined) {
      return callback(new Error('webSpaceName cannot be null.'));
    }
    if (webSiteName === null || webSiteName === undefined) {
      return callback(new Error('webSiteName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/WebSpaces/' + webSpaceName + '/sites/' + webSiteName + '/repository';
    
    // Create HTTP transport objects
    var httpRequest = {};
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['Content-Length'] = '0';
    httpRequest.headers['x-ms-version'] = '2013-03-01';
    
    // Set Credentials
    httpRequest.key = this.client.credentials.keyvalue;
    httpRequest.cert = this.client.credentials.certvalue;
    
    // Send Request
    return request(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var anyURIElement = responseDoc.ANYURI ? responseDoc.ANYURI.length === 1 ? responseDoc.ANYURI[0] : responseDoc.ANYURI : null;
        if (anyURIElement) {
          
          result.Uri = anyURIElement;
        }
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * A web site repository is essentially a GIT repository that you can use to
   * manage your web site content. By using GIT source control tools, you can
   * push or pull version controlled changes to your site. You can create a
   * repository for your web site by issuing an HTTP POST request, or retrieve
   * information about the repository by using HTTP GET.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/dn166967.aspx for
   * more information)
   *
   * @param {String} webSpaceName - The name of the web space.
   *
   * @param {String} webSiteName - The name of the web site.
   *
   * @param {Function} callback
   *
   * @returns {WebSiteGetRepositoryResponse} - The Get Web Site Repository
   * operation response.
   */
  WebSiteOperations.prototype.getRepository = function(webSpaceName, webSiteName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (webSpaceName === null || webSpaceName === undefined) {
      return callback(new Error('webSpaceName cannot be null.'));
    }
    if (webSiteName === null || webSiteName === undefined) {
      return callback(new Error('webSiteName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/WebSpaces/' + webSpaceName + '/sites/' + webSiteName + '/repository';
    
    // Create HTTP transport objects
    var httpRequest = {};
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2013-03-01';
    
    // Set Credentials
    httpRequest.key = this.client.credentials.keyvalue;
    httpRequest.cert = this.client.credentials.certvalue;
    
    // Send Request
    return request(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var anyURIElement = responseDoc.ANYURI ? responseDoc.ANYURI.length === 1 ? responseDoc.ANYURI[0] : responseDoc.ANYURI : null;
        if (anyURIElement) {
          
          result.Uri = anyURIElement;
        }
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * You can generate a new random password for publishing a site by issuing an
   * HTTP POST request.  Tip: If you want to verify that the publish password
   * has changed, call HTTP GET on /publishxml before calling /newpassword. In
   * the publish XML, note the hash value in the userPWD attribute. After
   * calling /newpassword, call /publishxml again. You can then compare the
   * new value of userPWD in the Publish XML with the one you noted earlier.
   * (see http://msdn.microsoft.com/en-us/library/windowsazure/dn236428.aspx
   * for more information)
   *
   * @param {String} webSpaceName - The name of the web space.
   *
   * @param {String} webSiteName - The name of the web site.
   *
   * @param {Function} callback
   *
   * @returns {OperationResponse} - A standard service response including an
   * HTTP status code and request ID.
   */
  WebSiteOperations.prototype.generatePassword = function(webSpaceName, webSiteName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (webSpaceName === null || webSpaceName === undefined) {
      return callback(new Error('webSpaceName cannot be null.'));
    }
    if (webSiteName === null || webSiteName === undefined) {
      return callback(new Error('webSiteName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/WebSpaces/' + webSpaceName + '/sites/' + webSiteName + '/newpassword';
    
    // Create HTTP transport objects
    var httpRequest = {};
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['Content-Length'] = '0';
    httpRequest.headers['x-ms-version'] = '2013-03-01';
    
    // Set Credentials
    httpRequest.key = this.client.credentials.keyvalue;
    httpRequest.cert = this.client.credentials.certvalue;
    
    // Send Request
    return request(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * You can retrieve the publish settings information for a web site by
   * issuing an HTTP GET request.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/dn166996.aspx for
   * more information)
   *
   * @param {String} webSpaceName - The name of the web space.
   *
   * @param {String} webSiteName - The name of the web site.
   *
   * @param {Function} callback
   *
   * @returns {WebSiteGetPublishProfileResponse} - The Get Web Site Publish
   * Profile operation response.
   */
  WebSiteOperations.prototype.getPublishProfile = function(webSpaceName, webSiteName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (webSpaceName === null || webSpaceName === undefined) {
      return callback(new Error('webSpaceName cannot be null.'));
    }
    if (webSiteName === null || webSiteName === undefined) {
      return callback(new Error('webSiteName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/WebSpaces/' + webSpaceName + '/sites/' + webSiteName + '/publishxml';
    
    // Create HTTP transport objects
    var httpRequest = {};
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2013-03-01';
    
    // Set Credentials
    httpRequest.key = this.client.credentials.keyvalue;
    httpRequest.cert = this.client.credentials.certvalue;
    
    // Send Request
    return request(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = { publishProfiles: [] };
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var publishDataElement = responseDoc.PUBLISHDATA ? responseDoc.PUBLISHDATA.length === 1 ? responseDoc.PUBLISHDATA[0] : responseDoc.PUBLISHDATA : null;
        if (publishDataElement) {
          
          if (publishDataElement) {
            for (var loweredIndex1 = 0; loweredIndex1 < publishDataElement.PUBLISHPROFILE.length; loweredIndex1 = loweredIndex1 + 1) {
              var publishProfilesElement = publishDataElement.PUBLISHPROFILE[loweredIndex1];
              var publishProfileInstance = { databases: [] };
              result.publishProfiles.push(publishProfileInstance);
              
              var profileNameAttribute = publishProfilesElement.$.PROFILENAME;
              if (profileNameAttribute) {
                publishProfileInstance.profileName = profileNameAttribute;
              }
              
              var publishMethodAttribute = publishProfilesElement.$.PUBLISHMETHOD;
              if (publishMethodAttribute) {
                publishProfileInstance.publishMethod = publishMethodAttribute;
              }
              
              var publishUrlAttribute = publishProfilesElement.$.PUBLISHURL;
              if (publishUrlAttribute) {
                publishProfileInstance.publishUrl = publishUrlAttribute;
              }
              
              var msdeploySiteAttribute = publishProfilesElement.$.MSDEPLOYSITE;
              if (msdeploySiteAttribute) {
                publishProfileInstance.mSDeploySite = msdeploySiteAttribute;
              }
              
              var ftpPassiveModeAttribute = publishProfilesElement.$.FTPPASSIVEMODE;
              if (ftpPassiveModeAttribute) {
                publishProfileInstance.ftpPassiveMode = ftpPassiveModeAttribute;
              }
              
              var userNameAttribute = publishProfilesElement.$.USERNAME;
              if (userNameAttribute) {
                publishProfileInstance.userName = userNameAttribute;
              }
              
              var userPWDAttribute = publishProfilesElement.$.USERPWD;
              if (userPWDAttribute) {
                publishProfileInstance.userPassword = userPWDAttribute;
              }
              
              var destinationAppUrlAttribute = publishProfilesElement.$.DESTINATIONAPPURL;
              if (destinationAppUrlAttribute) {
                publishProfileInstance.destinationAppUri = destinationAppUrlAttribute;
              }
              
              var sQLServerDBConnectionStringAttribute = publishProfilesElement.$.SQLSERVERDBCONNECTIONSTRING;
              if (sQLServerDBConnectionStringAttribute) {
                publishProfileInstance.sqlServerConnectionString = sQLServerDBConnectionStringAttribute;
              }
              
              var mySQLDBConnectionStringAttribute = publishProfilesElement.$.MYSQLDBCONNECTIONSTRING;
              if (mySQLDBConnectionStringAttribute) {
                publishProfileInstance.mySqlConnectionString = mySQLDBConnectionStringAttribute;
              }
              
              var hostingProviderForumLinkAttribute = publishProfilesElement.$.HOSTINGPROVIDERFORUMLINK;
              if (hostingProviderForumLinkAttribute) {
                publishProfileInstance.hostingProviderForumUri = hostingProviderForumLinkAttribute;
              }
              
              var controlPanelLinkAttribute = publishProfilesElement.$.CONTROLPANELLINK;
              if (controlPanelLinkAttribute) {
                publishProfileInstance.controlPanelUri = controlPanelLinkAttribute;
              }
              
              var databasesSequenceElement = publishProfilesElement.DATABASES ? publishProfilesElement.DATABASES.length === 1 ? publishProfilesElement.DATABASES[0] : publishProfilesElement.DATABASES : null;
              if (databasesSequenceElement) {
                for (var loweredIndex2 = 0; loweredIndex2 < databasesSequenceElement.ADD.length; loweredIndex2 = loweredIndex2 + 1) {
                  var databasesElement = databasesSequenceElement.ADD[loweredIndex2];
                  var addInstance = {};
                  publishProfileInstance.databases.push(addInstance);
                  
                  var nameAttribute = databasesElement.$.NAME;
                  if (nameAttribute) {
                    addInstance.name = nameAttribute;
                  }
                  
                  var connectionStringAttribute = databasesElement.$.CONNECTIONSTRING;
                  if (connectionStringAttribute) {
                    addInstance.connectionString = connectionStringAttribute;
                  }
                  
                  var providerNameAttribute = databasesElement.$.PROVIDERNAME;
                  if (providerNameAttribute) {
                    addInstance.providerName = providerNameAttribute;
                  }
                  
                  var typeAttribute = databasesElement.$.TYPE;
                  if (typeAttribute) {
                    addInstance.type = typeAttribute;
                  }
                }
              }
            }
          }
        }
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * You can retrieve the config settings for a web site by issuing an HTTP GET
   * request, or update them by using HTTP PUT with a request body that
   * contains the settings to be updated.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/dn166985.aspx for
   * more information)
   *
   * @param {String} webSpaceName - The name of the web space.
   *
   * @param {String} webSiteName - The name of the web site.
   *
   * @param {Function} callback
   *
   * @returns {WebSiteGetConfigurationResponse} - The Get Web Site
   * Configuration operation response.
   */
  WebSiteOperations.prototype.getConfiguration = function(webSpaceName, webSiteName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (webSpaceName === null || webSpaceName === undefined) {
      return callback(new Error('webSpaceName cannot be null.'));
    }
    if (webSiteName === null || webSiteName === undefined) {
      return callback(new Error('webSiteName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/WebSpaces/' + webSpaceName + '/sites/' + webSiteName + '/config';
    
    // Create HTTP transport objects
    var httpRequest = {};
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2013-03-01';
    
    // Set Credentials
    httpRequest.key = this.client.credentials.keyvalue;
    httpRequest.cert = this.client.credentials.certvalue;
    
    // Send Request
    return request(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = { connectionStrings: [], defaultDocuments: [], handlerMappings: [], appSettings: {}, metadata: {} };
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var siteConfigElement = responseDoc.SITECONFIG ? responseDoc.SITECONFIG.length === 1 ? responseDoc.SITECONFIG[0] : responseDoc.SITECONFIG : null;
        if (siteConfigElement) {
          
          var appSettingsSequenceElement = siteConfigElement.APPSETTINGS ? siteConfigElement.APPSETTINGS.length === 1 ? siteConfigElement.APPSETTINGS[0] : siteConfigElement.APPSETTINGS : null;
          if (appSettingsSequenceElement) {
            for (var loweredIndex1 = 0; loweredIndex1 < appSettingsSequenceElement.NAMEVALUEPAIR.length; loweredIndex1 = loweredIndex1 + 1) {
              var appSettingsElement = appSettingsSequenceElement.NAMEVALUEPAIR[loweredIndex1];
              var appSettingsKey = appSettingsElement.NAME ? appSettingsElement.NAME.length === 1 ? appSettingsElement.NAME[0] : appSettingsElement.NAME : null;
              var appSettingsValue = appSettingsElement.VALUE ? appSettingsElement.VALUE.length === 1 ? appSettingsElement.VALUE[0] : appSettingsElement.VALUE : null;
              result.appSettings[appSettingsKey] = appSettingsValue;
            }
          }
          
          var connectionStringsSequenceElement = siteConfigElement.CONNECTIONSTRINGS ? siteConfigElement.CONNECTIONSTRINGS.length === 1 ? siteConfigElement.CONNECTIONSTRINGS[0] : siteConfigElement.CONNECTIONSTRINGS : null;
          if (connectionStringsSequenceElement) {
            for (var loweredIndex2 = 0; loweredIndex2 < connectionStringsSequenceElement.CONNSTRINGINFO.length; loweredIndex2 = loweredIndex2 + 1) {
              var connectionStringsElement = connectionStringsSequenceElement.CONNSTRINGINFO[loweredIndex2];
              var connStringInfoInstance = {};
              result.connectionStrings.push(connStringInfoInstance);
              
              var connectionStringElement = connectionStringsElement.CONNECTIONSTRING ? connectionStringsElement.CONNECTIONSTRING.length === 1 ? connectionStringsElement.CONNECTIONSTRING[0] : connectionStringsElement.CONNECTIONSTRING : null;
              if (connectionStringElement) {
                var connectionStringInstance;
                connectionStringInstance = connectionStringElement;
                connStringInfoInstance.connectionString = connectionStringInstance;
              }
              
              var nameElement = connectionStringsElement.NAME ? connectionStringsElement.NAME.length === 1 ? connectionStringsElement.NAME[0] : connectionStringsElement.NAME : null;
              if (nameElement) {
                var nameInstance;
                nameInstance = nameElement;
                connStringInfoInstance.name = nameInstance;
              }
              
              var typeElement = connectionStringsElement.TYPE ? connectionStringsElement.TYPE.length === 1 ? connectionStringsElement.TYPE[0] : connectionStringsElement.TYPE : null;
              if (typeElement) {
                var typeInstance;
                typeInstance = typeElement;
                connStringInfoInstance.type = typeInstance;
              }
            }
          }
          
          var defaultDocumentsSequenceElement = siteConfigElement.DEFAULTDOCUMENTS ? siteConfigElement.DEFAULTDOCUMENTS.length === 1 ? siteConfigElement.DEFAULTDOCUMENTS[0] : siteConfigElement.DEFAULTDOCUMENTS : null;
          if (defaultDocumentsSequenceElement) {
            for (var loweredIndex3 = 0; loweredIndex3 < defaultDocumentsSequenceElement.STRING.length; loweredIndex3 = loweredIndex3 + 1) {
              var defaultDocumentsElement = defaultDocumentsSequenceElement.STRING[loweredIndex3];
              result.defaultDocuments.push(defaultDocumentsElement);
            }
          }
          
          var detailedErrorLoggingEnabledElement = siteConfigElement.DETAILEDERRORLOGGINGENABLED ? siteConfigElement.DETAILEDERRORLOGGINGENABLED.length === 1 ? siteConfigElement.DETAILEDERRORLOGGINGENABLED[0] : siteConfigElement.DETAILEDERRORLOGGINGENABLED : null;
          if (detailedErrorLoggingEnabledElement) {
            var detailedErrorLoggingEnabledInstance;
            detailedErrorLoggingEnabledInstance = detailedErrorLoggingEnabledElement;
            result.detailedErrorLoggingEnabled = detailedErrorLoggingEnabledInstance;
          }
          
          var handlerMappingsSequenceElement = siteConfigElement.HANDLERMAPPINGS ? siteConfigElement.HANDLERMAPPINGS.length === 1 ? siteConfigElement.HANDLERMAPPINGS[0] : siteConfigElement.HANDLERMAPPINGS : null;
          if (handlerMappingsSequenceElement) {
            for (var loweredIndex4 = 0; loweredIndex4 < handlerMappingsSequenceElement.HANDLERMAPPING.length; loweredIndex4 = loweredIndex4 + 1) {
              var handlerMappingsElement = handlerMappingsSequenceElement.HANDLERMAPPING[loweredIndex4];
              var handlerMappingInstance = {};
              result.handlerMappings.push(handlerMappingInstance);
              
              var argumentsElement = handlerMappingsElement.ARGUMENTS ? handlerMappingsElement.ARGUMENTS.length === 1 ? handlerMappingsElement.ARGUMENTS[0] : handlerMappingsElement.ARGUMENTS : null;
              if (argumentsElement) {
                var argumentsInstance;
                argumentsInstance = argumentsElement;
                handlerMappingInstance.arguments = argumentsInstance;
              }
              
              var extensionElement = handlerMappingsElement.EXTENSION ? handlerMappingsElement.EXTENSION.length === 1 ? handlerMappingsElement.EXTENSION[0] : handlerMappingsElement.EXTENSION : null;
              if (extensionElement) {
                var extensionInstance;
                extensionInstance = extensionElement;
                handlerMappingInstance.extension = extensionInstance;
              }
              
              var scriptProcessorElement = handlerMappingsElement.SCRIPTPROCESSOR ? handlerMappingsElement.SCRIPTPROCESSOR.length === 1 ? handlerMappingsElement.SCRIPTPROCESSOR[0] : handlerMappingsElement.SCRIPTPROCESSOR : null;
              if (scriptProcessorElement) {
                var scriptProcessorInstance;
                scriptProcessorInstance = scriptProcessorElement;
                handlerMappingInstance.scriptProcessor = scriptProcessorInstance;
              }
            }
          }
          
          var httpLoggingEnabledElement = siteConfigElement.HTTPLOGGINGENABLED ? siteConfigElement.HTTPLOGGINGENABLED.length === 1 ? siteConfigElement.HTTPLOGGINGENABLED[0] : siteConfigElement.HTTPLOGGINGENABLED : null;
          if (httpLoggingEnabledElement) {
            var httpLoggingEnabledInstance;
            httpLoggingEnabledInstance = httpLoggingEnabledElement;
            result.httpLoggingEnabled = httpLoggingEnabledInstance;
          }
          
          var metadataSequenceElement = siteConfigElement.METADATA ? siteConfigElement.METADATA.length === 1 ? siteConfigElement.METADATA[0] : siteConfigElement.METADATA : null;
          if (metadataSequenceElement) {
            for (var loweredIndex5 = 0; loweredIndex5 < metadataSequenceElement.NAMEVALUEPAIR.length; loweredIndex5 = loweredIndex5 + 1) {
              var metadataElement = metadataSequenceElement.NAMEVALUEPAIR[loweredIndex5];
              var metadataKey = metadataElement.NAME ? metadataElement.NAME.length === 1 ? metadataElement.NAME[0] : metadataElement.NAME : null;
              var metadataValue = metadataElement.VALUE ? metadataElement.VALUE.length === 1 ? metadataElement.VALUE[0] : metadataElement.VALUE : null;
              result.metadata[metadataKey] = metadataValue;
            }
          }
          
          var netFrameworkVersionElement = siteConfigElement.NETFRAMEWORKVERSION ? siteConfigElement.NETFRAMEWORKVERSION.length === 1 ? siteConfigElement.NETFRAMEWORKVERSION[0] : siteConfigElement.NETFRAMEWORKVERSION : null;
          if (netFrameworkVersionElement) {
            var netFrameworkVersionInstance;
            netFrameworkVersionInstance = netFrameworkVersionElement;
            result.netFrameworkVersion = netFrameworkVersionInstance;
          }
          
          var numberOfWorkersElement = siteConfigElement.NUMBEROFWORKERS ? siteConfigElement.NUMBEROFWORKERS.length === 1 ? siteConfigElement.NUMBEROFWORKERS[0] : siteConfigElement.NUMBEROFWORKERS : null;
          if (numberOfWorkersElement) {
            var numberOfWorkersInstance;
            numberOfWorkersInstance = parseInt(numberOfWorkersElement, 10);
            result.numberOfWorkers = numberOfWorkersInstance;
          }
          
          var phpVersionElement = siteConfigElement.PHPVERSION ? siteConfigElement.PHPVERSION.length === 1 ? siteConfigElement.PHPVERSION[0] : siteConfigElement.PHPVERSION : null;
          if (phpVersionElement) {
            var phpVersionInstance;
            phpVersionInstance = phpVersionElement;
            result.phpVersion = phpVersionInstance;
          }
          
          var publishingPasswordElement = siteConfigElement.PUBLISHINGPASSWORD ? siteConfigElement.PUBLISHINGPASSWORD.length === 1 ? siteConfigElement.PUBLISHINGPASSWORD[0] : siteConfigElement.PUBLISHINGPASSWORD : null;
          if (publishingPasswordElement) {
            var publishingPasswordInstance;
            publishingPasswordInstance = publishingPasswordElement;
            result.publishingPassword = publishingPasswordInstance;
          }
          
          var publishingUsernameElement = siteConfigElement.PUBLISHINGUSERNAME ? siteConfigElement.PUBLISHINGUSERNAME.length === 1 ? siteConfigElement.PUBLISHINGUSERNAME[0] : siteConfigElement.PUBLISHINGUSERNAME : null;
          if (publishingUsernameElement) {
            var publishingUsernameInstance;
            publishingUsernameInstance = publishingUsernameElement;
            result.publishingUsername = publishingUsernameInstance;
          }
          
          var requestTracingEnabledElement = siteConfigElement.REQUESTTRACINGENABLED ? siteConfigElement.REQUESTTRACINGENABLED.length === 1 ? siteConfigElement.REQUESTTRACINGENABLED[0] : siteConfigElement.REQUESTTRACINGENABLED : null;
          if (requestTracingEnabledElement) {
            var requestTracingEnabledInstance;
            requestTracingEnabledInstance = requestTracingEnabledElement;
            result.requestTracingEnabled = requestTracingEnabledInstance;
          }
          
          var requestTracingExpirationTimeElement = siteConfigElement.REQUESTTRACINGEXPIRATIONTIME ? siteConfigElement.REQUESTTRACINGEXPIRATIONTIME.length === 1 ? siteConfigElement.REQUESTTRACINGEXPIRATIONTIME[0] : siteConfigElement.REQUESTTRACINGEXPIRATIONTIME : null;
          if (requestTracingExpirationTimeElement && (requestTracingExpirationTimeElement === null || requestTracingExpirationTimeElement === undefined || requestTracingExpirationTimeElement.length === 0) === false) {
            var requestTracingExpirationTimeInstance;
            requestTracingExpirationTimeInstance = new Date(requestTracingExpirationTimeElement);
            result.requestTracingExpirationTime = requestTracingExpirationTimeInstance;
          }
          
          var scmTypeElement = siteConfigElement.SCMTYPE ? siteConfigElement.SCMTYPE.length === 1 ? siteConfigElement.SCMTYPE[0] : siteConfigElement.SCMTYPE : null;
          if (scmTypeElement) {
            var scmTypeInstance;
            scmTypeInstance = scmTypeElement;
            result.scmType = scmTypeInstance;
          }
          
          var use32BitWorkerProcessElement = siteConfigElement.USE32BITWORKERPROCESS ? siteConfigElement.USE32BITWORKERPROCESS.length === 1 ? siteConfigElement.USE32BITWORKERPROCESS[0] : siteConfigElement.USE32BITWORKERPROCESS : null;
          if (use32BitWorkerProcessElement) {
            var use32BitWorkerProcessInstance;
            use32BitWorkerProcessInstance = use32BitWorkerProcessElement;
            result.use32BitWorkerProcess = use32BitWorkerProcessInstance;
          }
        }
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * You can retrieve the config settings for a web site by issuing an HTTP GET
   * request, or update them by using HTTP PUT with a request body that
   * contains the settings to be updated.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/dn166985.aspx for
   * more information)
   *
   * @param {String} webSpaceName - The name of the web space.
   *
   * @param {String} webSiteName - The name of the web site.
   *
   * @param {WebSiteUpdateConfigurationParameters} parameters - The Update Web
   * Site Configuration parameters.
   *
   * @param {Function} callback
   *
   * @returns {WebSiteUpdateConfigurationResponse} - The Update Web Site
   * Configuration operation response.
   */
  WebSiteOperations.prototype.updateConfiguration = function(webSpaceName, webSiteName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (webSpaceName === null || webSpaceName === undefined) {
      return callback(new Error('webSpaceName cannot be null.'));
    }
    if (webSiteName === null || webSiteName === undefined) {
      return callback(new Error('webSiteName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/WebSpaces/' + webSpaceName + '/sites/' + webSiteName + '/config';
    
    // Create HTTP transport objects
    var httpRequest = {};
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2013-03-01';
    httpRequest.headers['Content-Type'] = 'application/xml';
    
    // Set Credentials
    httpRequest.key = this.client.credentials.keyvalue;
    httpRequest.cert = this.client.credentials.certvalue;
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = {};
    
    var siteConfigElement = js2xml.createElement('SiteConfig', 'http://schemas.microsoft.com/windowsazure');
    js2xml.addChildElement(requestDoc, siteConfigElement);
    
    var appSettingsDictionaryElement = js2xml.createElement('AppSettings', 'http://schemas.microsoft.com/windowsazure');
    for (var loweredIndex1 = 0; loweredIndex1 < parameters.appSettings.length; loweredIndex1 = loweredIndex1 + 1) {
      var appSettingsKey = parameters.appSettings[loweredIndex1];
      var appSettingsValue = parameters.appSettings[appSettingsKey];
      var appSettingsElement = js2xml.createElement('NameValuePair', 'http://schemas.microsoft.com/windowsazure');
      js2xml.addChildElement(appSettingsDictionaryElement, appSettingsElement);
      
      var appSettingsKeyElement = js2xml.createElement('Name', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(appSettingsKeyElement, appSettingsKey);
      js2xml.addChildElement(appSettingsElement, appSettingsKeyElement);
      
      var appSettingsValueElement = js2xml.createElement('Value', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(appSettingsValueElement, appSettingsValue);
      js2xml.addChildElement(appSettingsElement, appSettingsValueElement);
    }
    js2xml.addChildElement(siteConfigElement, appSettingsDictionaryElement);
    
    var connectionStringsSequenceElement = js2xml.createElement('ConnectionStrings', 'http://schemas.microsoft.com/windowsazure');
    for (var loweredIndex2 = 0; loweredIndex2 < parameters.connectionStrings.length; loweredIndex2 = loweredIndex2 + 1) {
      var connectionStringsItem = parameters.connectionStrings[loweredIndex2];
      var connStringInfoElement = js2xml.createElement('ConnStringInfo', 'http://schemas.microsoft.com/windowsazure');
      js2xml.addChildElement(connectionStringsSequenceElement, connStringInfoElement);
      
      if (connectionStringsItem.connectionString) {
        var connectionStringElement = js2xml.createElement('ConnectionString', 'http://schemas.microsoft.com/windowsazure');
        js2xml.setElementValue(connectionStringElement, connectionStringsItem.connectionString);
        js2xml.addChildElement(connStringInfoElement, connectionStringElement);
      }
      
      if (connectionStringsItem.name) {
        var nameElement = js2xml.createElement('Name', 'http://schemas.microsoft.com/windowsazure');
        js2xml.setElementValue(nameElement, connectionStringsItem.name);
        js2xml.addChildElement(connStringInfoElement, nameElement);
      }
      
      if (connectionStringsItem.type) {
        var typeElement = js2xml.createElement('Type', 'http://schemas.microsoft.com/windowsazure');
        js2xml.setElementValue(typeElement, connectionStringsItem.type);
        js2xml.addChildElement(connStringInfoElement, typeElement);
      }
    }
    js2xml.addChildElement(siteConfigElement, connectionStringsSequenceElement);
    
    var defaultDocumentsSequenceElement = js2xml.createElement('DefaultDocuments', 'http://schemas.microsoft.com/windowsazure');
    for (var loweredIndex3 = 0; loweredIndex3 < parameters.defaultDocuments.length; loweredIndex3 = loweredIndex3 + 1) {
      var defaultDocumentsItem = parameters.defaultDocuments[loweredIndex3];
      var defaultDocumentsItemElement = js2xml.createElement('string', 'http://schemas.microsoft.com/2003/10/Serialization/Arrays');
      js2xml.setElementValue(defaultDocumentsItemElement, defaultDocumentsItem);
      js2xml.addChildElement(defaultDocumentsSequenceElement, defaultDocumentsItemElement);
    }
    js2xml.addChildElement(siteConfigElement, defaultDocumentsSequenceElement);
    
    if (parameters.detailedErrorLoggingEnabled) {
      var detailedErrorLoggingEnabledElement = js2xml.createElement('DetailedErrorLoggingEnabled', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(detailedErrorLoggingEnabledElement, parameters.detailedErrorLoggingEnabled.toString());
      js2xml.addChildElement(siteConfigElement, detailedErrorLoggingEnabledElement);
    }
    
    var handlerMappingsSequenceElement = js2xml.createElement('HandlerMappings', 'http://schemas.microsoft.com/windowsazure');
    for (var loweredIndex4 = 0; loweredIndex4 < parameters.handlerMappings.length; loweredIndex4 = loweredIndex4 + 1) {
      var handlerMappingsItem = parameters.handlerMappings[loweredIndex4];
      var handlerMappingElement = js2xml.createElement('HandlerMapping', 'http://schemas.microsoft.com/windowsazure');
      js2xml.addChildElement(handlerMappingsSequenceElement, handlerMappingElement);
      
      if (handlerMappingsItem.arguments) {
        var argumentsElement = js2xml.createElement('Arguments', 'http://schemas.microsoft.com/windowsazure');
        js2xml.setElementValue(argumentsElement, handlerMappingsItem.arguments);
        js2xml.addChildElement(handlerMappingElement, argumentsElement);
      }
      
      if (handlerMappingsItem.extension) {
        var extensionElement = js2xml.createElement('Extension', 'http://schemas.microsoft.com/windowsazure');
        js2xml.setElementValue(extensionElement, handlerMappingsItem.extension);
        js2xml.addChildElement(handlerMappingElement, extensionElement);
      }
      
      if (handlerMappingsItem.scriptProcessor) {
        var scriptProcessorElement = js2xml.createElement('ScriptProcessor', 'http://schemas.microsoft.com/windowsazure');
        js2xml.setElementValue(scriptProcessorElement, handlerMappingsItem.scriptProcessor);
        js2xml.addChildElement(handlerMappingElement, scriptProcessorElement);
      }
    }
    js2xml.addChildElement(siteConfigElement, handlerMappingsSequenceElement);
    
    if (parameters.httpLoggingEnabled) {
      var httpLoggingEnabledElement = js2xml.createElement('HttpLoggingEnabled', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(httpLoggingEnabledElement, parameters.httpLoggingEnabled.toString());
      js2xml.addChildElement(siteConfigElement, httpLoggingEnabledElement);
    }
    
    var metadataDictionaryElement = js2xml.createElement('Metadata', 'http://schemas.microsoft.com/windowsazure');
    for (var loweredIndex5 = 0; loweredIndex5 < parameters.metadata.length; loweredIndex5 = loweredIndex5 + 1) {
      var metadataKey = parameters.metadata[loweredIndex5];
      var metadataValue = parameters.metadata[metadataKey];
      var metadataElement = js2xml.createElement('NameValuePair', 'http://schemas.microsoft.com/windowsazure');
      js2xml.addChildElement(metadataDictionaryElement, metadataElement);
      
      var metadataKeyElement = js2xml.createElement('Name', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(metadataKeyElement, metadataKey);
      js2xml.addChildElement(metadataElement, metadataKeyElement);
      
      var metadataValueElement = js2xml.createElement('Value', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(metadataValueElement, metadataValue);
      js2xml.addChildElement(metadataElement, metadataValueElement);
    }
    js2xml.addChildElement(siteConfigElement, metadataDictionaryElement);
    
    if (parameters.netFrameworkVersion) {
      var netFrameworkVersionElement = js2xml.createElement('NetFrameworkVersion', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(netFrameworkVersionElement, parameters.netFrameworkVersion);
      js2xml.addChildElement(siteConfigElement, netFrameworkVersionElement);
    }
    
    if (parameters.numberOfWorkers) {
      var numberOfWorkersElement = js2xml.createElement('NumberOfWorkers', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(numberOfWorkersElement, parameters.numberOfWorkers.toString());
      js2xml.addChildElement(siteConfigElement, numberOfWorkersElement);
    }
    
    if (parameters.phpVersion) {
      var phpVersionElement = js2xml.createElement('PhpVersion', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(phpVersionElement, parameters.phpVersion);
      js2xml.addChildElement(siteConfigElement, phpVersionElement);
    }
    
    if (parameters.publishingPassword) {
      var publishingPasswordElement = js2xml.createElement('PublishingPassword', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(publishingPasswordElement, parameters.publishingPassword);
      js2xml.addChildElement(siteConfigElement, publishingPasswordElement);
    }
    
    if (parameters.publishingUserName) {
      var publishingUsernameElement = js2xml.createElement('PublishingUsername', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(publishingUsernameElement, parameters.publishingUserName);
      js2xml.addChildElement(siteConfigElement, publishingUsernameElement);
    }
    
    if (parameters.requestTracingEnabled) {
      var requestTracingEnabledElement = js2xml.createElement('RequestTracingEnabled', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(requestTracingEnabledElement, parameters.requestTracingEnabled.toString());
      js2xml.addChildElement(siteConfigElement, requestTracingEnabledElement);
    }
    
    if (parameters.requestTracingExpirationTime) {
      var requestTracingExpirationTimeElement = js2xml.createElement('RequestTracingExpirationTime', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(requestTracingExpirationTimeElement, parameters.requestTracingExpirationTime.toString());
      js2xml.addChildElement(siteConfigElement, requestTracingExpirationTimeElement);
    }
    
    if (parameters.scmType) {
      var scmTypeElement = js2xml.createElement('ScmType', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(scmTypeElement, parameters.scmType);
      js2xml.addChildElement(siteConfigElement, scmTypeElement);
    }
    
    if (parameters.use32BitWorkerProcess) {
      var use32BitWorkerProcessElement = js2xml.createElement('Use32BitWorkerProcess', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(use32BitWorkerProcessElement, parameters.use32BitWorkerProcess.toString());
      js2xml.addChildElement(siteConfigElement, use32BitWorkerProcessElement);
    }
    
    requestContent = js2xml.serializeDocument(requestDoc);
    httpRequest.body = requestContent;
    // Send Request
    return request(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = { connectionStrings: [], defaultDocuments: [], handlerMappings: [], appSettings: {}, metadata: {} };
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var siteConfigElement2 = responseDoc.SITECONFIG ? responseDoc.SITECONFIG.length === 1 ? responseDoc.SITECONFIG[0] : responseDoc.SITECONFIG : null;
        if (siteConfigElement2) {
          
          var appSettingsSequenceElement = siteConfigElement2.APPSETTINGS ? siteConfigElement2.APPSETTINGS.length === 1 ? siteConfigElement2.APPSETTINGS[0] : siteConfigElement2.APPSETTINGS : null;
          if (appSettingsSequenceElement) {
            for (var loweredIndex6 = 0; loweredIndex6 < appSettingsSequenceElement.NAMEVALUEPAIR.length; loweredIndex6 = loweredIndex6 + 1) {
              var appSettingsElement2 = appSettingsSequenceElement.NAMEVALUEPAIR[loweredIndex6];
              var appSettingsKey2 = appSettingsElement2.NAME ? appSettingsElement2.NAME.length === 1 ? appSettingsElement2.NAME[0] : appSettingsElement2.NAME : null;
              var appSettingsValue2 = appSettingsElement2.VALUE ? appSettingsElement2.VALUE.length === 1 ? appSettingsElement2.VALUE[0] : appSettingsElement2.VALUE : null;
              result.appSettings[appSettingsKey2] = appSettingsValue2;
            }
          }
          
          var connectionStringsSequenceElement2 = siteConfigElement2.CONNECTIONSTRINGS ? siteConfigElement2.CONNECTIONSTRINGS.length === 1 ? siteConfigElement2.CONNECTIONSTRINGS[0] : siteConfigElement2.CONNECTIONSTRINGS : null;
          if (connectionStringsSequenceElement2) {
            for (var loweredIndex7 = 0; loweredIndex7 < connectionStringsSequenceElement2.CONNSTRINGINFO.length; loweredIndex7 = loweredIndex7 + 1) {
              var connectionStringsElement = connectionStringsSequenceElement2.CONNSTRINGINFO[loweredIndex7];
              var connStringInfoInstance = {};
              result.connectionStrings.push(connStringInfoInstance);
              
              var connectionStringElement2 = connectionStringsElement.CONNECTIONSTRING ? connectionStringsElement.CONNECTIONSTRING.length === 1 ? connectionStringsElement.CONNECTIONSTRING[0] : connectionStringsElement.CONNECTIONSTRING : null;
              if (connectionStringElement2) {
                var connectionStringInstance;
                connectionStringInstance = connectionStringElement2;
                connStringInfoInstance.connectionString = connectionStringInstance;
              }
              
              var nameElement2 = connectionStringsElement.NAME ? connectionStringsElement.NAME.length === 1 ? connectionStringsElement.NAME[0] : connectionStringsElement.NAME : null;
              if (nameElement2) {
                var nameInstance;
                nameInstance = nameElement2;
                connStringInfoInstance.name = nameInstance;
              }
              
              var typeElement2 = connectionStringsElement.TYPE ? connectionStringsElement.TYPE.length === 1 ? connectionStringsElement.TYPE[0] : connectionStringsElement.TYPE : null;
              if (typeElement2) {
                var typeInstance;
                typeInstance = typeElement2;
                connStringInfoInstance.type = typeInstance;
              }
            }
          }
          
          var defaultDocumentsSequenceElement2 = siteConfigElement2.DEFAULTDOCUMENTS ? siteConfigElement2.DEFAULTDOCUMENTS.length === 1 ? siteConfigElement2.DEFAULTDOCUMENTS[0] : siteConfigElement2.DEFAULTDOCUMENTS : null;
          if (defaultDocumentsSequenceElement2) {
            for (var loweredIndex8 = 0; loweredIndex8 < defaultDocumentsSequenceElement2.STRING.length; loweredIndex8 = loweredIndex8 + 1) {
              var defaultDocumentsElement = defaultDocumentsSequenceElement2.STRING[loweredIndex8];
              result.defaultDocuments.push(defaultDocumentsElement);
            }
          }
          
          var detailedErrorLoggingEnabledElement2 = siteConfigElement2.DETAILEDERRORLOGGINGENABLED ? siteConfigElement2.DETAILEDERRORLOGGINGENABLED.length === 1 ? siteConfigElement2.DETAILEDERRORLOGGINGENABLED[0] : siteConfigElement2.DETAILEDERRORLOGGINGENABLED : null;
          if (detailedErrorLoggingEnabledElement2) {
            var detailedErrorLoggingEnabledInstance;
            detailedErrorLoggingEnabledInstance = detailedErrorLoggingEnabledElement2;
            result.detailedErrorLoggingEnabled = detailedErrorLoggingEnabledInstance;
          }
          
          var handlerMappingsSequenceElement2 = siteConfigElement2.HANDLERMAPPINGS ? siteConfigElement2.HANDLERMAPPINGS.length === 1 ? siteConfigElement2.HANDLERMAPPINGS[0] : siteConfigElement2.HANDLERMAPPINGS : null;
          if (handlerMappingsSequenceElement2) {
            for (var loweredIndex9 = 0; loweredIndex9 < handlerMappingsSequenceElement2.HANDLERMAPPING.length; loweredIndex9 = loweredIndex9 + 1) {
              var handlerMappingsElement = handlerMappingsSequenceElement2.HANDLERMAPPING[loweredIndex9];
              var handlerMappingInstance = {};
              result.handlerMappings.push(handlerMappingInstance);
              
              var argumentsElement2 = handlerMappingsElement.ARGUMENTS ? handlerMappingsElement.ARGUMENTS.length === 1 ? handlerMappingsElement.ARGUMENTS[0] : handlerMappingsElement.ARGUMENTS : null;
              if (argumentsElement2) {
                var argumentsInstance;
                argumentsInstance = argumentsElement2;
                handlerMappingInstance.arguments = argumentsInstance;
              }
              
              var extensionElement2 = handlerMappingsElement.EXTENSION ? handlerMappingsElement.EXTENSION.length === 1 ? handlerMappingsElement.EXTENSION[0] : handlerMappingsElement.EXTENSION : null;
              if (extensionElement2) {
                var extensionInstance;
                extensionInstance = extensionElement2;
                handlerMappingInstance.extension = extensionInstance;
              }
              
              var scriptProcessorElement2 = handlerMappingsElement.SCRIPTPROCESSOR ? handlerMappingsElement.SCRIPTPROCESSOR.length === 1 ? handlerMappingsElement.SCRIPTPROCESSOR[0] : handlerMappingsElement.SCRIPTPROCESSOR : null;
              if (scriptProcessorElement2) {
                var scriptProcessorInstance;
                scriptProcessorInstance = scriptProcessorElement2;
                handlerMappingInstance.scriptProcessor = scriptProcessorInstance;
              }
            }
          }
          
          var httpLoggingEnabledElement2 = siteConfigElement2.HTTPLOGGINGENABLED ? siteConfigElement2.HTTPLOGGINGENABLED.length === 1 ? siteConfigElement2.HTTPLOGGINGENABLED[0] : siteConfigElement2.HTTPLOGGINGENABLED : null;
          if (httpLoggingEnabledElement2) {
            var httpLoggingEnabledInstance;
            httpLoggingEnabledInstance = httpLoggingEnabledElement2;
            result.httpLoggingEnabled = httpLoggingEnabledInstance;
          }
          
          var metadataSequenceElement = siteConfigElement2.METADATA ? siteConfigElement2.METADATA.length === 1 ? siteConfigElement2.METADATA[0] : siteConfigElement2.METADATA : null;
          if (metadataSequenceElement) {
            for (var loweredIndex10 = 0; loweredIndex10 < metadataSequenceElement.NAMEVALUEPAIR.length; loweredIndex10 = loweredIndex10 + 1) {
              var metadataElement2 = metadataSequenceElement.NAMEVALUEPAIR[loweredIndex10];
              var metadataKey2 = metadataElement2.NAME ? metadataElement2.NAME.length === 1 ? metadataElement2.NAME[0] : metadataElement2.NAME : null;
              var metadataValue2 = metadataElement2.VALUE ? metadataElement2.VALUE.length === 1 ? metadataElement2.VALUE[0] : metadataElement2.VALUE : null;
              result.metadata[metadataKey2] = metadataValue2;
            }
          }
          
          var netFrameworkVersionElement2 = siteConfigElement2.NETFRAMEWORKVERSION ? siteConfigElement2.NETFRAMEWORKVERSION.length === 1 ? siteConfigElement2.NETFRAMEWORKVERSION[0] : siteConfigElement2.NETFRAMEWORKVERSION : null;
          if (netFrameworkVersionElement2) {
            var netFrameworkVersionInstance;
            netFrameworkVersionInstance = netFrameworkVersionElement2;
            result.netFrameworkVersion = netFrameworkVersionInstance;
          }
          
          var numberOfWorkersElement2 = siteConfigElement2.NUMBEROFWORKERS ? siteConfigElement2.NUMBEROFWORKERS.length === 1 ? siteConfigElement2.NUMBEROFWORKERS[0] : siteConfigElement2.NUMBEROFWORKERS : null;
          if (numberOfWorkersElement2) {
            var numberOfWorkersInstance;
            numberOfWorkersInstance = parseInt(numberOfWorkersElement2, 10);
            result.numberOfWorkers = numberOfWorkersInstance;
          }
          
          var phpVersionElement2 = siteConfigElement2.PHPVERSION ? siteConfigElement2.PHPVERSION.length === 1 ? siteConfigElement2.PHPVERSION[0] : siteConfigElement2.PHPVERSION : null;
          if (phpVersionElement2) {
            var phpVersionInstance;
            phpVersionInstance = phpVersionElement2;
            result.phpVersion = phpVersionInstance;
          }
          
          var publishingPasswordElement2 = siteConfigElement2.PUBLISHINGPASSWORD ? siteConfigElement2.PUBLISHINGPASSWORD.length === 1 ? siteConfigElement2.PUBLISHINGPASSWORD[0] : siteConfigElement2.PUBLISHINGPASSWORD : null;
          if (publishingPasswordElement2) {
            var publishingPasswordInstance;
            publishingPasswordInstance = publishingPasswordElement2;
            result.publishingPassword = publishingPasswordInstance;
          }
          
          var publishingUsernameElement2 = siteConfigElement2.PUBLISHINGUSERNAME ? siteConfigElement2.PUBLISHINGUSERNAME.length === 1 ? siteConfigElement2.PUBLISHINGUSERNAME[0] : siteConfigElement2.PUBLISHINGUSERNAME : null;
          if (publishingUsernameElement2) {
            var publishingUsernameInstance;
            publishingUsernameInstance = publishingUsernameElement2;
            result.publishingUsername = publishingUsernameInstance;
          }
          
          var requestTracingEnabledElement2 = siteConfigElement2.REQUESTTRACINGENABLED ? siteConfigElement2.REQUESTTRACINGENABLED.length === 1 ? siteConfigElement2.REQUESTTRACINGENABLED[0] : siteConfigElement2.REQUESTTRACINGENABLED : null;
          if (requestTracingEnabledElement2) {
            var requestTracingEnabledInstance;
            requestTracingEnabledInstance = requestTracingEnabledElement2;
            result.requestTracingEnabled = requestTracingEnabledInstance;
          }
          
          var requestTracingExpirationTimeElement2 = siteConfigElement2.REQUESTTRACINGEXPIRATIONTIME ? siteConfigElement2.REQUESTTRACINGEXPIRATIONTIME.length === 1 ? siteConfigElement2.REQUESTTRACINGEXPIRATIONTIME[0] : siteConfigElement2.REQUESTTRACINGEXPIRATIONTIME : null;
          if (requestTracingExpirationTimeElement2) {
            var requestTracingExpirationTimeInstance;
            requestTracingExpirationTimeInstance = new Date(requestTracingExpirationTimeElement2);
            result.requestTracingExpirationTime = requestTracingExpirationTimeInstance;
          }
          
          var scmTypeElement2 = siteConfigElement2.SCMTYPE ? siteConfigElement2.SCMTYPE.length === 1 ? siteConfigElement2.SCMTYPE[0] : siteConfigElement2.SCMTYPE : null;
          if (scmTypeElement2) {
            var scmTypeInstance;
            scmTypeInstance = scmTypeElement2;
            result.scmType = scmTypeInstance;
          }
          
          var use32BitWorkerProcessElement2 = siteConfigElement2.USE32BITWORKERPROCESS ? siteConfigElement2.USE32BITWORKERPROCESS.length === 1 ? siteConfigElement2.USE32BITWORKERPROCESS[0] : siteConfigElement2.USE32BITWORKERPROCESS : null;
          if (use32BitWorkerProcessElement2) {
            var use32BitWorkerProcessInstance;
            use32BitWorkerProcessInstance = use32BitWorkerProcessElement2;
            result.use32BitWorkerProcess = use32BitWorkerProcessInstance;
          }
        }
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * You can retrieve a site's current usage metrics by issuing an HTTP GET
   * request. The metrics returned include CPU Time, Data In, Data Out, Local
   * bytes read, Local bytes written, Network bytes read, Network bytes
   * written, WP stop requests, Memory Usage, CPU Time - Minute Limit, and
   * File System Storage.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/dn166991.aspx for
   * more information)
   *
   * @param {String} webSpaceName - The name of the web space.
   *
   * @param {String} webSiteName - The name of the web site.
   *
   * @param {Function} callback
   *
   * @returns {WebSiteGetUsageMetricsResponse} - The Get Web Site Usage Metrics
   * operation response.
   */
  WebSiteOperations.prototype.getUsageMetrics = function(webSpaceName, webSiteName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (webSpaceName === null || webSpaceName === undefined) {
      return callback(new Error('webSpaceName cannot be null.'));
    }
    if (webSiteName === null || webSiteName === undefined) {
      return callback(new Error('webSiteName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/WebSpaces/' + webSpaceName + '/sites/' + webSiteName + '/usages';
    
    // Create HTTP transport objects
    var httpRequest = {};
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2013-03-01';
    
    // Set Credentials
    httpRequest.key = this.client.credentials.keyvalue;
    httpRequest.cert = this.client.credentials.certvalue;
    
    // Send Request
    return request(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = { usageMetrics: [] };
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var usagesElement = responseDoc.USAGES ? responseDoc.USAGES.length === 1 ? responseDoc.USAGES[0] : responseDoc.USAGES : null;
        if (usagesElement) {
          
          if (usagesElement) {
            for (var loweredIndex1 = 0; loweredIndex1 < usagesElement.USAGE.length; loweredIndex1 = loweredIndex1 + 1) {
              var usageMetricsElement = usagesElement.USAGE[loweredIndex1];
              var usageInstance = {};
              result.usageMetrics.push(usageInstance);
              
              var computeModeElement = usageMetricsElement.COMPUTEMODE ? usageMetricsElement.COMPUTEMODE.length === 1 ? usageMetricsElement.COMPUTEMODE[0] : usageMetricsElement.COMPUTEMODE : null;
              if (computeModeElement) {
                var computeModeInstance;
                computeModeInstance = computeModeElement;
                usageInstance.computeMode = computeModeInstance;
              }
              
              var currentValueElement = usageMetricsElement.CURRENTVALUE ? usageMetricsElement.CURRENTVALUE.length === 1 ? usageMetricsElement.CURRENTVALUE[0] : usageMetricsElement.CURRENTVALUE : null;
              if (currentValueElement) {
                var currentValueInstance;
                currentValueInstance = currentValueElement;
                usageInstance.currentValue = currentValueInstance;
              }
              
              var displayNameElement = usageMetricsElement.DISPLAYNAME ? usageMetricsElement.DISPLAYNAME.length === 1 ? usageMetricsElement.DISPLAYNAME[0] : usageMetricsElement.DISPLAYNAME : null;
              if (displayNameElement) {
                var displayNameInstance;
                displayNameInstance = displayNameElement;
                usageInstance.displayName = displayNameInstance;
              }
              
              var limitElement = usageMetricsElement.LIMIT ? usageMetricsElement.LIMIT.length === 1 ? usageMetricsElement.LIMIT[0] : usageMetricsElement.LIMIT : null;
              if (limitElement) {
                var limitInstance;
                limitInstance = limitElement;
                usageInstance.limit = limitInstance;
              }
              
              var nameElement = usageMetricsElement.NAME ? usageMetricsElement.NAME.length === 1 ? usageMetricsElement.NAME[0] : usageMetricsElement.NAME : null;
              if (nameElement) {
                var nameInstance;
                nameInstance = nameElement;
                usageInstance.name = nameInstance;
              }
              
              var nextResetTimeElement = usageMetricsElement.NEXTRESETTIME ? usageMetricsElement.NEXTRESETTIME.length === 1 ? usageMetricsElement.NEXTRESETTIME[0] : usageMetricsElement.NEXTRESETTIME : null;
              if (nextResetTimeElement) {
                var nextResetTimeInstance;
                nextResetTimeInstance = new Date(nextResetTimeElement);
                usageInstance.nextResetTime = nextResetTimeInstance;
              }
              
              var resourceNameElement = usageMetricsElement.RESOURCENAME ? usageMetricsElement.RESOURCENAME.length === 1 ? usageMetricsElement.RESOURCENAME[0] : usageMetricsElement.RESOURCENAME : null;
              if (resourceNameElement) {
                var resourceNameInstance;
                resourceNameInstance = resourceNameElement;
                usageInstance.resourceName = resourceNameInstance;
              }
              
              var siteModeElement = usageMetricsElement.SITEMODE ? usageMetricsElement.SITEMODE.length === 1 ? usageMetricsElement.SITEMODE[0] : usageMetricsElement.SITEMODE : null;
              if (siteModeElement) {
                var siteModeInstance;
                siteModeInstance = siteModeElement;
                usageInstance.siteMode = siteModeInstance;
              }
              
              var unitElement = usageMetricsElement.UNIT ? usageMetricsElement.UNIT.length === 1 ? usageMetricsElement.UNIT[0] : usageMetricsElement.UNIT : null;
              if (unitElement) {
                var unitInstance;
                unitInstance = unitElement;
                usageInstance.unit = unitInstance;
              }
            }
          }
        }
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * You can retrieve historical usage metrics for a site by issuing an HTTP
   * GET request.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/dn166964.aspx for
   * more information)
   *
   * @param {String} webSpaceName - The name of the web space.
   *
   * @param {String} webSiteName - The name of the web site.
   *
   * @param {WebSiteGetHistoricalUsageMetricsParameters} parameters - The Get
   * Web Site Historical Usage Metrics parameters.
   *
   * @param {Function} callback
   *
   * @returns {WebSiteGetHistoricalUsageMetricsResponse} - The Get Web Site
   * Historical Usage Metrics operation response.
   */
  WebSiteOperations.prototype.getHistoricalUsageMetrics = function(webSpaceName, webSiteName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (webSpaceName === null || webSpaceName === undefined) {
      return callback(new Error('webSpaceName cannot be null.'));
    }
    if (webSiteName === null || webSiteName === undefined) {
      return callback(new Error('webSiteName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/WebSpaces/' + webSpaceName + '/sites/' + webSiteName + '/metrics?';
    if (parameters.metricNames && parameters.metricNames.length > 0) {
      url2 = url2 + '&names=' + null.encodeURIComponent(parameters.metricNames.join(','));
    }
    if (parameters.startTime) {
      url2 = url2 + '&StartTime=' + null.encodeURIComponent(parameters.startTime.toString());
    }
    if (parameters.endTime) {
      url2 = url2 + '&EndTime=' + null.encodeURIComponent(parameters.endTime.toString());
    }
    
    // Create HTTP transport objects
    var httpRequest = {};
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2013-03-01';
    
    // Set Credentials
    httpRequest.key = this.client.credentials.keyvalue;
    httpRequest.cert = this.client.credentials.certvalue;
    
    // Send Request
    return request(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = { usageMetrics: [] };
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var metricResponsesElement = responseDoc.METRICRESPONSES ? responseDoc.METRICRESPONSES.length === 1 ? responseDoc.METRICRESPONSES[0] : responseDoc.METRICRESPONSES : null;
        if (metricResponsesElement) {
          
          if (metricResponsesElement) {
            for (var loweredIndex1 = 0; loweredIndex1 < metricResponsesElement.METRICRESPONSE.length; loweredIndex1 = loweredIndex1 + 1) {
              var usageMetricsElement = metricResponsesElement.METRICRESPONSE[loweredIndex1];
              var metricResponseInstance = {};
              result.usageMetrics.push(metricResponseInstance);
              
              var codeElement = usageMetricsElement.CODE ? usageMetricsElement.CODE.length === 1 ? usageMetricsElement.CODE[0] : usageMetricsElement.CODE : null;
              if (codeElement) {
                var codeInstance;
                codeInstance = codeElement;
                metricResponseInstance.code = codeInstance;
              }
              
              var dataElement = usageMetricsElement.DATA ? usageMetricsElement.DATA.length === 1 ? usageMetricsElement.DATA[0] : usageMetricsElement.DATA : null;
              if (dataElement) {
                var dataInstance = { values: [] };
                metricResponseInstance.data = dataInstance;
                
                var displayNameElement = dataElement.DISPLAYNAME ? dataElement.DISPLAYNAME.length === 1 ? dataElement.DISPLAYNAME[0] : dataElement.DISPLAYNAME : null;
                if (displayNameElement) {
                  var displayNameInstance;
                  displayNameInstance = displayNameElement;
                  dataInstance.displayName = displayNameInstance;
                }
                
                var endTimeElement = dataElement.ENDTIME ? dataElement.ENDTIME.length === 1 ? dataElement.ENDTIME[0] : dataElement.ENDTIME : null;
                if (endTimeElement) {
                  var endTimeInstance;
                  endTimeInstance = new Date(endTimeElement);
                  dataInstance.endTime = endTimeInstance;
                }
                
                var nameElement = dataElement.NAME ? dataElement.NAME.length === 1 ? dataElement.NAME[0] : dataElement.NAME : null;
                if (nameElement) {
                  var nameInstance;
                  nameInstance = nameElement;
                  dataInstance.name = nameInstance;
                }
                
                var primaryAggregationTypeElement = dataElement.PRIMARYAGGREGATIONTYPE ? dataElement.PRIMARYAGGREGATIONTYPE.length === 1 ? dataElement.PRIMARYAGGREGATIONTYPE[0] : dataElement.PRIMARYAGGREGATIONTYPE : null;
                if (primaryAggregationTypeElement) {
                  var primaryAggregationTypeInstance;
                  primaryAggregationTypeInstance = primaryAggregationTypeElement;
                  dataInstance.primaryAggregationType = primaryAggregationTypeInstance;
                }
                
                var startTimeElement = dataElement.STARTTIME ? dataElement.STARTTIME.length === 1 ? dataElement.STARTTIME[0] : dataElement.STARTTIME : null;
                if (startTimeElement) {
                  var startTimeInstance;
                  startTimeInstance = new Date(startTimeElement);
                  dataInstance.startTime = startTimeInstance;
                }
                
                var timeGrainElement = dataElement.TIMEGRAIN ? dataElement.TIMEGRAIN.length === 1 ? dataElement.TIMEGRAIN[0] : dataElement.TIMEGRAIN : null;
                if (timeGrainElement) {
                  var timeGrainInstance;
                  timeGrainInstance = timeGrainElement;
                  dataInstance.timeGrain = timeGrainInstance;
                }
                
                var unitElement = dataElement.UNIT ? dataElement.UNIT.length === 1 ? dataElement.UNIT[0] : dataElement.UNIT : null;
                if (unitElement) {
                  var unitInstance;
                  unitInstance = unitElement;
                  dataInstance.unit = unitInstance;
                }
                
                var valuesSequenceElement = dataElement.VALUES ? dataElement.VALUES.length === 1 ? dataElement.VALUES[0] : dataElement.VALUES : null;
                if (valuesSequenceElement) {
                  for (var loweredIndex2 = 0; loweredIndex2 < valuesSequenceElement.METRICSAMPLE.length; loweredIndex2 = loweredIndex2 + 1) {
                    var valuesElement = valuesSequenceElement.METRICSAMPLE[loweredIndex2];
                    var metricSampleInstance = {};
                    dataInstance.values.push(metricSampleInstance);
                    
                    var countElement = valuesElement.COUNT ? valuesElement.COUNT.length === 1 ? valuesElement.COUNT[0] : valuesElement.COUNT : null;
                    if (countElement) {
                      var countInstance;
                      countInstance = parseInt(countElement, 10);
                      metricSampleInstance.count = countInstance;
                    }
                    
                    var maximumElement = valuesElement.MAXIMUM ? valuesElement.MAXIMUM.length === 1 ? valuesElement.MAXIMUM[0] : valuesElement.MAXIMUM : null;
                    if (maximumElement) {
                      var maximumInstance;
                      maximumInstance = maximumElement;
                      metricSampleInstance.maximum = maximumInstance;
                    }
                    
                    var minimumElement = valuesElement.MINIMUM ? valuesElement.MINIMUM.length === 1 ? valuesElement.MINIMUM[0] : valuesElement.MINIMUM : null;
                    if (minimumElement) {
                      var minimumInstance;
                      minimumInstance = minimumElement;
                      metricSampleInstance.minimum = minimumInstance;
                    }
                    
                    var timeCreatedElement = valuesElement.TIMECREATED ? valuesElement.TIMECREATED.length === 1 ? valuesElement.TIMECREATED[0] : valuesElement.TIMECREATED : null;
                    if (timeCreatedElement) {
                      var timeCreatedInstance;
                      timeCreatedInstance = new Date(timeCreatedElement);
                      metricSampleInstance.timeCreated = timeCreatedInstance;
                    }
                    
                    var totalElement = valuesElement.TOTAL ? valuesElement.TOTAL.length === 1 ? valuesElement.TOTAL[0] : valuesElement.TOTAL : null;
                    if (totalElement) {
                      var totalInstance;
                      totalInstance = totalElement;
                      metricSampleInstance.total = totalInstance;
                    }
                  }
                }
              }
              
              var messageElement = usageMetricsElement.MESSAGE ? usageMetricsElement.MESSAGE.length === 1 ? usageMetricsElement.MESSAGE[0] : usageMetricsElement.MESSAGE : null;
              if (messageElement) {
                var messageInstance;
                messageInstance = messageElement;
                metricResponseInstance.message = messageInstance;
              }
            }
          }
        }
        
        return callback(null, result);
      });
    });
  };
  
  return WebSiteOperations;
})();
