/* jshint latedef:false */
/* jshint forin:false */

// 
// Copyright (c) Microsoft.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

var xml = require('xml2js');
var _ = require('underscore');
var js2xml = require('../../util/js2xml');
var requestPipeline = require('../../http/request-pipeline');
var errorHandlingFilter = require('../core/filters/errorhandlingfilter');

/**
 * The Windows Azure Web Sites management API provides a RESTful set of web
 * services that interact with Windows Azure Web Sites service to manage your
 * web sites. The API has entities that capture the relationship between an
 * end user and the Windows Azure Web Sites service.  (see
 * http://msdn.microsoft.com/en-us/library/windowsazure/dn166981.aspx for more
 * information)
 */
var WebSiteManagementClient = (function() {
  /**
   * Initializes a new instance of the WebSiteManagementClient class.
   *
   * @constructor
   *
   * @param {SubscriptionCloudCredentials} credentials - When you create a
   * Windows Azure subscription, it is uniquely identified by a subscription
   * ID. The subscription ID forms part of the URI for every call that you
   * make to the Service Management API.  The Windows Azure Service
   * ManagementAPI use mutual authentication of management certificates over
   * SSL to ensure that a request made to the service is secure.  No anonymous
   * requests are allowed.
   *
   * @param {String} baseUri - The URI used as the base for all Service
   * Management requests.
   */
  function WebSiteManagementClient(credentials, baseUri) {
    if (credentials === null || credentials === undefined) {
      throw new Error('credentials cannot be null.');
    }
    this.credentials = credentials;
    this.baseUri = baseUri;
    if (this.baseUri === null || this.baseUri === undefined) {
      this.baseUri = 'https://management.core.windows.net';
    }
    this.serverFarms = new ServerFarmOperations(this);
    this.webSites = new WebSiteOperations(this);
    this.webSpaces = new WebSpaceOperations(this);
    this.pipeline = requestPipeline.create(errorHandlingFilter);
  }
  
  /**
   * Register your subscription to use Windows Azure Web Sites.
   *
   * @param {Function} callback
   *
   * @returns {OperationResponse} - A standard service response including an
   * HTTP status code and request ID.
   */
  WebSiteManagementClient.prototype.registerSubscription = function(callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = this.baseUri + '/' + this.credentials.subscriptionId + '/services?service=website&action=register';
    
    // Create HTTP transport objects
    var httpRequest = {};
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2013-03-01';
    httpRequest.headers['Content-Type'] = 'application/xml';
    
    // Set Credentials
    httpRequest.key = this.credentials.keyvalue;
    httpRequest.cert = this.credentials.certvalue;
    
    // Send Request
    return this.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 202) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Unregister your subscription to use Windows Azure Web Sites.
   *
   * @param {Function} callback
   *
   * @returns {OperationResponse} - A standard service response including an
   * HTTP status code and request ID.
   */
  WebSiteManagementClient.prototype.unregisterSubscription = function(callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = this.baseUri + '/' + this.credentials.subscriptionId + '/services?service=website&action=unregister';
    
    // Create HTTP transport objects
    var httpRequest = {};
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2013-03-01';
    httpRequest.headers['Content-Type'] = 'application/xml';
    
    // Set Credentials
    httpRequest.key = this.credentials.keyvalue;
    httpRequest.cert = this.credentials.certvalue;
    
    // Send Request
    return this.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 202) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  return WebSiteManagementClient;
})();
exports.WebSiteManagementClient = WebSiteManagementClient;

/**
 * Operations for managing the server farm in a web space.  (see
 * http://msdn.microsoft.com/en-us/library/windowsazure/dn194277.aspx for more
 * information)
 */
var ServerFarmOperations = (function() {
  /**
   * Initializes a new instance of the ServerFarmOperations class.
   *
   * @constructor
   *
   * @param {WebSiteManagementClient} client - Reference to the service client.
   */
  function ServerFarmOperations(client) {
    this.client = client;
  }
  
  /**
   * You can create a server farm by issuing an HTTP POST request. Only one
   * server farm per webspace is permitted. You can retrieve server farm
   * details by using HTTP GET, change server farm properties by using HTTP
   * PUT, and delete a server farm by using HTTP DELETE. A request body is
   * required for server farm creation (HTTP POST) and server farm update
   * (HTTP PUT).  Warning: Creating a server farm changes your webspaceâ€™s
   * Compute Mode from Shared to Dedicated. You will be charged from the
   * moment the server farm is created, even if all your sites are still
   * running in Free mode.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/dn194277.aspx for
   * more information)
   *
   * @param {String} webSpaceName - The name of the web space.
   *
   * @param {ServerFarmCreateParameters} parameters - Parameters supplied to
   * the Create Server Farm operation.
   *
   * @param {Function} callback
   *
   * @returns {ServerFarmCreateResponse} - The Create Server Farm operation
   * response.
   */
  ServerFarmOperations.prototype.create = function(webSpaceName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (webSpaceName === null || webSpaceName === undefined) {
      return callback(new Error('webSpaceName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/WebSpaces/' + webSpaceName + '/ServerFarms';
    
    // Create HTTP transport objects
    var httpRequest = {};
    httpRequest.method = 'POST';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2013-03-01';
    httpRequest.headers['Content-Type'] = 'application/xml';
    
    // Set Credentials
    httpRequest.key = this.client.credentials.keyvalue;
    httpRequest.cert = this.client.credentials.certvalue;
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = {};
    
    var serverFarmElement = js2xml.createElement('ServerFarm', 'http://schemas.microsoft.com/windowsazure');
    js2xml.addChildElement(requestDoc, serverFarmElement);
    
    if (parameters.currentNumberOfWorkers) {
      var currentNumberOfWorkersElement = js2xml.createElement('CurrentNumberOfWorkers', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(currentNumberOfWorkersElement, parameters.currentNumberOfWorkers.toString());
      js2xml.addChildElement(serverFarmElement, currentNumberOfWorkersElement);
    }
    
    if (parameters.currentWorkerSize) {
      var currentWorkerSizeElement = js2xml.createElement('CurrentWorkerSize', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(currentWorkerSizeElement, parameters.currentWorkerSize ? parameters.currentWorkerSize.toString() : 'Small');
      js2xml.addChildElement(serverFarmElement, currentWorkerSizeElement);
    }
    
    var nameElement = js2xml.createElement('Name', 'http://schemas.microsoft.com/windowsazure');
    js2xml.setElementValue(nameElement, 'DefaultServerFarm');
    js2xml.addChildElement(serverFarmElement, nameElement);
    
    var numberOfWorkersElement = js2xml.createElement('NumberOfWorkers', 'http://schemas.microsoft.com/windowsazure');
    js2xml.setElementValue(numberOfWorkersElement, parameters.numberOfWorkers.toString());
    js2xml.addChildElement(serverFarmElement, numberOfWorkersElement);
    
    var workerSizeElement = js2xml.createElement('WorkerSize', 'http://schemas.microsoft.com/windowsazure');
    js2xml.setElementValue(workerSizeElement, parameters.workerSize ? parameters.workerSize.toString() : 'Small');
    js2xml.addChildElement(serverFarmElement, workerSizeElement);
    
    if (parameters.status) {
      var statusElement = js2xml.createElement('Status', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(statusElement, parameters.status ? parameters.status.toString() : 'Ready');
      js2xml.addChildElement(serverFarmElement, statusElement);
    }
    
    requestContent = js2xml.serializeDocument(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var serverFarmElement2 = js2xml.getElement(responseDoc, responseDoc, 'SERVERFARM', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
        if (serverFarmElement2) {
          var currentNumberOfWorkersElement2 = js2xml.getElement(responseDoc, serverFarmElement2, 'CURRENTNUMBEROFWORKERS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (currentNumberOfWorkersElement2) {
            var currentNumberOfWorkersInstance = parseInt(currentNumberOfWorkersElement2, 10);
            result.currentNumberOfWorkers = currentNumberOfWorkersInstance;
          }
          
          var currentWorkerSizeElement2 = js2xml.getElement(responseDoc, serverFarmElement2, 'CURRENTWORKERSIZE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (currentWorkerSizeElement2) {
            var currentWorkerSizeInstance = currentWorkerSizeElement2;
            result.currentWorkerSize = currentWorkerSizeInstance;
          }
          
          var nameElement2 = js2xml.getElement(responseDoc, serverFarmElement2, 'NAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (nameElement2) {
            var nameInstance = nameElement2;
            result.name = nameInstance;
          }
          
          var numberOfWorkersElement2 = js2xml.getElement(responseDoc, serverFarmElement2, 'NUMBEROFWORKERS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (numberOfWorkersElement2) {
            var numberOfWorkersInstance = parseInt(numberOfWorkersElement2, 10);
            result.numberOfWorkers = numberOfWorkersInstance;
          }
          
          var workerSizeElement2 = js2xml.getElement(responseDoc, serverFarmElement2, 'WORKERSIZE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (workerSizeElement2) {
            var workerSizeInstance = workerSizeElement2;
            result.workerSize = workerSizeInstance;
          }
          
          var statusElement2 = js2xml.getElement(responseDoc, serverFarmElement2, 'STATUS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (statusElement2) {
            var statusInstance = statusElement2;
            result.status = statusInstance;
          }
        }
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * You can create a server farm by issuing an HTTP POST request. Only one
   * server farm per webspace is permitted. You can retrieve server farm
   * details by using HTTP GET, change server farm properties by using HTTP
   * PUT, and delete a server farm by using HTTP DELETE. A request body is
   * required for server farm creation (HTTP POST) and server farm update
   * (HTTP PUT).  Warning: Creating a server farm changes your webspaceâ€™s
   * Compute Mode from Shared to Dedicated. You will be charged from the
   * moment the server farm is created, even if all your sites are still
   * running in Free mode.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/dn194277.aspx for
   * more information)
   *
   * @param {String} webSpaceName - The name of the web space.
   *
   * @param {ServerFarmUpdateParameters} parameters - Parameters supplied to
   * the Update Server Farm operation.
   *
   * @param {Function} callback
   *
   * @returns {ServerFarmUpdateResponse} - The Update Server Farm operation
   * response.
   */
  ServerFarmOperations.prototype.update = function(webSpaceName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (webSpaceName === null || webSpaceName === undefined) {
      return callback(new Error('webSpaceName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/WebSpaces/' + webSpaceName + '/ServerFarms/DefaultServerFarm';
    
    // Create HTTP transport objects
    var httpRequest = {};
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2013-03-01';
    httpRequest.headers['Content-Type'] = 'application/xml';
    
    // Set Credentials
    httpRequest.key = this.client.credentials.keyvalue;
    httpRequest.cert = this.client.credentials.certvalue;
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = {};
    
    var serverFarmElement = js2xml.createElement('ServerFarm', 'http://schemas.microsoft.com/windowsazure');
    js2xml.addChildElement(requestDoc, serverFarmElement);
    
    if (parameters.currentNumberOfWorkers) {
      var currentNumberOfWorkersElement = js2xml.createElement('CurrentNumberOfWorkers', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(currentNumberOfWorkersElement, parameters.currentNumberOfWorkers.toString());
      js2xml.addChildElement(serverFarmElement, currentNumberOfWorkersElement);
    }
    
    if (parameters.currentWorkerSize) {
      var currentWorkerSizeElement = js2xml.createElement('CurrentWorkerSize', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(currentWorkerSizeElement, parameters.currentWorkerSize ? parameters.currentWorkerSize.toString() : 'Small');
      js2xml.addChildElement(serverFarmElement, currentWorkerSizeElement);
    }
    
    var nameElement = js2xml.createElement('Name', 'http://schemas.microsoft.com/windowsazure');
    js2xml.setElementValue(nameElement, 'DefaultServerFarm');
    js2xml.addChildElement(serverFarmElement, nameElement);
    
    var numberOfWorkersElement = js2xml.createElement('NumberOfWorkers', 'http://schemas.microsoft.com/windowsazure');
    js2xml.setElementValue(numberOfWorkersElement, parameters.numberOfWorkers.toString());
    js2xml.addChildElement(serverFarmElement, numberOfWorkersElement);
    
    var workerSizeElement = js2xml.createElement('WorkerSize', 'http://schemas.microsoft.com/windowsazure');
    js2xml.setElementValue(workerSizeElement, parameters.workerSize ? parameters.workerSize.toString() : 'Small');
    js2xml.addChildElement(serverFarmElement, workerSizeElement);
    
    if (parameters.status) {
      var statusElement = js2xml.createElement('Status', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(statusElement, parameters.status ? parameters.status.toString() : 'Ready');
      js2xml.addChildElement(serverFarmElement, statusElement);
    }
    
    requestContent = js2xml.serializeDocument(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var serverFarmElement2 = js2xml.getElement(responseDoc, responseDoc, 'SERVERFARM', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
        if (serverFarmElement2) {
          var currentNumberOfWorkersElement2 = js2xml.getElement(responseDoc, serverFarmElement2, 'CURRENTNUMBEROFWORKERS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (currentNumberOfWorkersElement2) {
            var currentNumberOfWorkersInstance = parseInt(currentNumberOfWorkersElement2, 10);
            result.currentNumberOfWorkers = currentNumberOfWorkersInstance;
          }
          
          var currentWorkerSizeElement2 = js2xml.getElement(responseDoc, serverFarmElement2, 'CURRENTWORKERSIZE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (currentWorkerSizeElement2) {
            var currentWorkerSizeInstance = currentWorkerSizeElement2;
            result.currentWorkerSize = currentWorkerSizeInstance;
          }
          
          var nameElement2 = js2xml.getElement(responseDoc, serverFarmElement2, 'NAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (nameElement2) {
            var nameInstance = nameElement2;
            result.name = nameInstance;
          }
          
          var numberOfWorkersElement2 = js2xml.getElement(responseDoc, serverFarmElement2, 'NUMBEROFWORKERS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (numberOfWorkersElement2) {
            var numberOfWorkersInstance = parseInt(numberOfWorkersElement2, 10);
            result.numberOfWorkers = numberOfWorkersInstance;
          }
          
          var workerSizeElement2 = js2xml.getElement(responseDoc, serverFarmElement2, 'WORKERSIZE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (workerSizeElement2) {
            var workerSizeInstance = workerSizeElement2;
            result.workerSize = workerSizeInstance;
          }
          
          var statusElement2 = js2xml.getElement(responseDoc, serverFarmElement2, 'STATUS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (statusElement2) {
            var statusInstance = statusElement2;
            result.status = statusInstance;
          }
        }
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * You can create a server farm by issuing an HTTP POST request. Only one
   * server farm per webspace is permitted. You can retrieve server farm
   * details by using HTTP GET, change server farm properties by using HTTP
   * PUT, and delete a server farm by using HTTP DELETE. A request body is
   * required for server farm creation (HTTP POST) and server farm update
   * (HTTP PUT).  Warning: Creating a server farm changes your webspaceâ€™s
   * Compute Mode from Shared to Dedicated. You will be charged from the
   * moment the server farm is created, even if all your sites are still
   * running in Free mode.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/dn194277.aspx for
   * more information)
   *
   * @param {String} webSpaceName - The name of the web space.
   *
   * @param {String} serverFarmName - The name of the server farm.
   *
   * @param {Function} callback
   *
   * @returns {ServerFarmGetResponse} - The Get Server Farm operation response.
   */
  ServerFarmOperations.prototype.get = function(webSpaceName, serverFarmName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (webSpaceName === null || webSpaceName === undefined) {
      return callback(new Error('webSpaceName cannot be null.'));
    }
    if (serverFarmName === null || serverFarmName === undefined) {
      return callback(new Error('serverFarmName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/WebSpaces/' + webSpaceName + '/ServerFarms/' + serverFarmName;
    
    // Create HTTP transport objects
    var httpRequest = {};
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2013-03-01';
    
    // Set Credentials
    httpRequest.key = this.client.credentials.keyvalue;
    httpRequest.cert = this.client.credentials.certvalue;
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var serverFarmElement = js2xml.getElement(responseDoc, responseDoc, 'SERVERFARM', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
        if (serverFarmElement) {
          var currentNumberOfWorkersElement = js2xml.getElement(responseDoc, serverFarmElement, 'CURRENTNUMBEROFWORKERS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (currentNumberOfWorkersElement) {
            var currentNumberOfWorkersInstance = parseInt(currentNumberOfWorkersElement, 10);
            result.currentNumberOfWorkers = currentNumberOfWorkersInstance;
          }
          
          var currentWorkerSizeElement = js2xml.getElement(responseDoc, serverFarmElement, 'CURRENTWORKERSIZE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (currentWorkerSizeElement) {
            var currentWorkerSizeInstance = currentWorkerSizeElement;
            result.currentWorkerSize = currentWorkerSizeInstance;
          }
          
          var nameElement = js2xml.getElement(responseDoc, serverFarmElement, 'NAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (nameElement) {
            var nameInstance = nameElement;
            result.name = nameInstance;
          }
          
          var numberOfWorkersElement = js2xml.getElement(responseDoc, serverFarmElement, 'NUMBEROFWORKERS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (numberOfWorkersElement) {
            var numberOfWorkersInstance = parseInt(numberOfWorkersElement, 10);
            result.numberOfWorkers = numberOfWorkersInstance;
          }
          
          var workerSizeElement = js2xml.getElement(responseDoc, serverFarmElement, 'WORKERSIZE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (workerSizeElement) {
            var workerSizeInstance = workerSizeElement;
            result.workerSize = workerSizeInstance;
          }
          
          var statusElement = js2xml.getElement(responseDoc, serverFarmElement, 'STATUS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (statusElement) {
            var statusInstance = statusElement;
            result.status = statusInstance;
          }
        }
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * You can create a server farm by issuing an HTTP POST request. Only one
   * server farm per webspace is permitted. You can retrieve server farm
   * details by using HTTP GET, change server farm properties by using HTTP
   * PUT, and delete a server farm by using HTTP DELETE. A request body is
   * required for server farm creation (HTTP POST) and server farm update
   * (HTTP PUT).  Warning: Creating a server farm changes your webspaceâ€™s
   * Compute Mode from Shared to Dedicated. You will be charged from the
   * moment the server farm is created, even if all your sites are still
   * running in Free mode.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/dn194277.aspx for
   * more information)
   *
   * @param {String} webSpaceName - The name of the web space.
   *
   * @param {Function} callback
   *
   * @returns {OperationResponse} - A standard service response including an
   * HTTP status code and request ID.
   */
  ServerFarmOperations.prototype.delete = function(webSpaceName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (webSpaceName === null || webSpaceName === undefined) {
      return callback(new Error('webSpaceName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/WebSpaces/' + webSpaceName + '/ServerFarms/DefaultServerFarm';
    
    // Create HTTP transport objects
    var httpRequest = {};
    httpRequest.method = 'DELETE';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2013-03-01';
    
    // Set Credentials
    httpRequest.key = this.client.credentials.keyvalue;
    httpRequest.cert = this.client.credentials.certvalue;
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * You can create a server farm by issuing an HTTP POST request. Only one
   * server farm per webspace is permitted. You can retrieve server farm
   * details by using HTTP GET, change server farm properties by using HTTP
   * PUT, and delete a server farm by using HTTP DELETE. A request body is
   * required for server farm creation (HTTP POST) and server farm update
   * (HTTP PUT).  Warning: Creating a server farm changes your webspaceâ€™s
   * Compute Mode from Shared to Dedicated. You will be charged from the
   * moment the server farm is created, even if all your sites are still
   * running in Free mode.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/dn194277.aspx for
   * more information)
   *
   * @param {String} webSpaceName - The name of the web space.
   *
   * @param {Function} callback
   *
   * @returns {ServerFarmListResponse} - The List Server Farm operation
   * response.
   */
  ServerFarmOperations.prototype.list = function(webSpaceName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (webSpaceName === null || webSpaceName === undefined) {
      return callback(new Error('webSpaceName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/WebSpaces/' + webSpaceName + '/ServerFarms';
    
    // Create HTTP transport objects
    var httpRequest = {};
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2013-03-01';
    
    // Set Credentials
    httpRequest.key = this.client.credentials.keyvalue;
    httpRequest.cert = this.client.credentials.certvalue;
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = { serverFarms: [] };
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var serverFarmsSequenceElement = js2xml.getElement(responseDoc, responseDoc, 'SERVERFARMS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
        if (serverFarmsSequenceElement) {
          for (var loweredIndex1 = 0; loweredIndex1 < js2xml.getElements(responseDoc, serverFarmsSequenceElement, 'SERVERFARM', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex1 = loweredIndex1 + 1) {
            var serverFarmsElement = js2xml.getElements(responseDoc, serverFarmsSequenceElement, 'SERVERFARM', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex1];
            var serverFarmInstance = {};
            result.serverFarms.push(serverFarmInstance);
            
            var currentNumberOfWorkersElement = js2xml.getElement(responseDoc, serverFarmsElement, 'CURRENTNUMBEROFWORKERS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (currentNumberOfWorkersElement) {
              var currentNumberOfWorkersInstance = parseInt(currentNumberOfWorkersElement, 10);
              serverFarmInstance.currentNumberOfWorkers = currentNumberOfWorkersInstance;
            }
            
            var currentWorkerSizeElement = js2xml.getElement(responseDoc, serverFarmsElement, 'CURRENTWORKERSIZE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (currentWorkerSizeElement) {
              var currentWorkerSizeInstance = currentWorkerSizeElement;
              serverFarmInstance.currentWorkerSize = currentWorkerSizeInstance;
            }
            
            var nameElement = js2xml.getElement(responseDoc, serverFarmsElement, 'NAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (nameElement) {
              var nameInstance = nameElement;
              serverFarmInstance.name = nameInstance;
            }
            
            var numberOfWorkersElement = js2xml.getElement(responseDoc, serverFarmsElement, 'NUMBEROFWORKERS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (numberOfWorkersElement) {
              var numberOfWorkersInstance = parseInt(numberOfWorkersElement, 10);
              serverFarmInstance.numberOfWorkers = numberOfWorkersInstance;
            }
            
            var workerSizeElement = js2xml.getElement(responseDoc, serverFarmsElement, 'WORKERSIZE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (workerSizeElement) {
              var workerSizeInstance = workerSizeElement;
              serverFarmInstance.workerSize = workerSizeInstance;
            }
            
            var statusElement = js2xml.getElement(responseDoc, serverFarmsElement, 'STATUS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (statusElement) {
              var statusInstance = statusElement;
              serverFarmInstance.status = statusInstance;
            }
          }
        }
        
        return callback(null, result);
      });
    });
  };
  
  return ServerFarmOperations;
})();

/**
 * Operations for managing the web sites in a web space.
 */
var WebSiteOperations = (function() {
  /**
   * Initializes a new instance of the WebSiteOperations class.
   *
   * @constructor
   *
   * @param {WebSiteManagementClient} client - Reference to the service client.
   */
  function WebSiteOperations(client) {
    this.client = client;
  }
  
  /**
   * You can create a web site by using a POST request that includes the name
   * of the web site and other information in the request body.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/dn166986.aspx for
   * more information)
   *
   * @param {String} webSpaceName - The name of the web space.
   *
   * @param {WebSiteCreateParameters} parameters - Parameters supplied to the
   * Create Web Site operation.
   *
   * @param {Function} callback
   *
   * @returns {WebSiteCreateResponse} - The Create Web Space operation response.
   */
  WebSiteOperations.prototype.create = function(webSpaceName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (webSpaceName === null || webSpaceName === undefined) {
      return callback(new Error('webSpaceName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.hostNames === null || parameters.hostNames === undefined) {
      return callback(new Error('parameters.hostNames cannot be null.'));
    }
    if (parameters.name === null || parameters.name === undefined) {
      return callback(new Error('parameters.name cannot be null.'));
    }
    if (parameters.webSpace) {
      if (parameters.webSpace.geoRegion === null || parameters.webSpace.geoRegion === undefined) {
        return callback(new Error('parameters.webSpace.geoRegion cannot be null.'));
      }
      if (parameters.webSpace.name === null || parameters.webSpace.name === undefined) {
        return callback(new Error('parameters.webSpace.name cannot be null.'));
      }
      if (parameters.webSpace.plan === null || parameters.webSpace.plan === undefined) {
        return callback(new Error('parameters.webSpace.plan cannot be null.'));
      }
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/WebSpaces/' + webSpaceName + '/sites';
    
    // Create HTTP transport objects
    var httpRequest = {};
    httpRequest.method = 'POST';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2013-03-01';
    httpRequest.headers['Content-Type'] = 'application/xml';
    
    // Set Credentials
    httpRequest.key = this.client.credentials.keyvalue;
    httpRequest.cert = this.client.credentials.certvalue;
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = {};
    
    var siteElement = js2xml.createElement('Site', 'http://schemas.microsoft.com/windowsazure');
    js2xml.addChildElement(requestDoc, siteElement);
    
    var hostNamesSequenceElement = js2xml.createElement('HostNames', 'http://schemas.microsoft.com/windowsazure');
    for (var loweredIndex1 = 0; loweredIndex1 < parameters.hostNames.length; loweredIndex1 = loweredIndex1 + 1) {
      var hostNamesItem = parameters.hostNames[loweredIndex1];
      var hostNamesItemElement = js2xml.createElement('string', 'http://schemas.microsoft.com/2003/10/Serialization/Arrays');
      js2xml.setElementValue(hostNamesItemElement, hostNamesItem);
      js2xml.addChildElement(hostNamesSequenceElement, hostNamesItemElement);
    }
    js2xml.addChildElement(siteElement, hostNamesSequenceElement);
    
    var nameElement = js2xml.createElement('Name', 'http://schemas.microsoft.com/windowsazure');
    js2xml.setElementValue(nameElement, parameters.name);
    js2xml.addChildElement(siteElement, nameElement);
    
    if (parameters.computeMode) {
      var computeModeElement = js2xml.createElement('ComputeMode', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(computeModeElement, parameters.computeMode ? parameters.computeMode.toString() : 'Shared');
      js2xml.addChildElement(siteElement, computeModeElement);
    }
    
    if (parameters.serverFarm) {
      var serverFarmElement = js2xml.createElement('ServerFarm', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(serverFarmElement, parameters.serverFarm);
      js2xml.addChildElement(siteElement, serverFarmElement);
    }
    
    if (parameters.siteMode) {
      var siteModeElement = js2xml.createElement('SiteMode', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(siteModeElement, parameters.siteMode ? parameters.siteMode.toString() : 'Limited');
      js2xml.addChildElement(siteElement, siteModeElement);
    }
    
    if (parameters.webSpace) {
      var webspaceToCreateElement = js2xml.createElement('WebspaceToCreate', 'http://schemas.microsoft.com/windowsazure');
      js2xml.addChildElement(siteElement, webspaceToCreateElement);
      
      var geoRegionElement = js2xml.createElement('GeoRegion', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(geoRegionElement, parameters.webSpace.geoRegion);
      js2xml.addChildElement(webspaceToCreateElement, geoRegionElement);
      
      var nameElement2 = js2xml.createElement('Name', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(nameElement2, parameters.webSpace.name);
      js2xml.addChildElement(webspaceToCreateElement, nameElement2);
      
      var planElement = js2xml.createElement('Plan', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(planElement, parameters.webSpace.plan);
      js2xml.addChildElement(webspaceToCreateElement, planElement);
    }
    
    requestContent = js2xml.serializeDocument(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 201 && statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var siteElement2 = js2xml.getElement(responseDoc, responseDoc, 'SITE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
        if (siteElement2) {
          var webSiteInstance = { enabledHostNames: [], hostNameSslStates: [], hostNames: [], sslCertificates: [] };
          result.webSite = webSiteInstance;
          
          var adminEnabledElement = js2xml.getElement(responseDoc, siteElement2, 'ADMINENABLED', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (adminEnabledElement) {
            var adminEnabledInstance = adminEnabledElement;
            webSiteInstance.adminEnabled = adminEnabledInstance;
          }
          
          var availabilityStateElement = js2xml.getElement(responseDoc, siteElement2, 'AVAILABILITYSTATE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (availabilityStateElement) {
            var availabilityStateInstance = availabilityStateElement;
            webSiteInstance.availabilityState = availabilityStateInstance;
          }
          
          var computeModeElement2 = js2xml.getElement(responseDoc, siteElement2, 'COMPUTEMODE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (computeModeElement2) {
            var computeModeInstance = computeModeElement2;
            webSiteInstance.computeMode = computeModeInstance;
          }
          
          var enabledElement = js2xml.getElement(responseDoc, siteElement2, 'ENABLED', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (enabledElement) {
            var enabledInstance = enabledElement;
            webSiteInstance.enabled = enabledInstance;
          }
          
          var enabledHostNamesSequenceElement = js2xml.getElement(responseDoc, siteElement2, 'ENABLEDHOSTNAMES', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (enabledHostNamesSequenceElement) {
            for (var loweredIndex2 = 0; loweredIndex2 < js2xml.getElements(responseDoc, enabledHostNamesSequenceElement, 'STRING', 'HTTP://SCHEMAS.MICROSOFT.COM/2003/10/SERIALIZATION/ARRAYS').length; loweredIndex2 = loweredIndex2 + 1) {
              var enabledHostNamesElement = js2xml.getElements(responseDoc, enabledHostNamesSequenceElement, 'STRING', 'HTTP://SCHEMAS.MICROSOFT.COM/2003/10/SERIALIZATION/ARRAYS')[loweredIndex2];
              webSiteInstance.enabledHostNames.push(enabledHostNamesElement);
            }
          }
          
          var hostNameSslStatesSequenceElement = js2xml.getElement(responseDoc, siteElement2, 'HOSTNAMESSLSTATES', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (hostNameSslStatesSequenceElement) {
            for (var loweredIndex3 = 0; loweredIndex3 < js2xml.getElements(responseDoc, hostNameSslStatesSequenceElement, 'WEBSITEHOSTNAMESSLSTATE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex3 = loweredIndex3 + 1) {
              var hostNameSslStatesElement = js2xml.getElements(responseDoc, hostNameSslStatesSequenceElement, 'WEBSITEHOSTNAMESSLSTATE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex3];
              var webSiteHostNameSslStateInstance = {};
              webSiteInstance.hostNameSslStates.push(webSiteHostNameSslStateInstance);
              
              var nameElement3 = js2xml.getElement(responseDoc, hostNameSslStatesElement, 'NAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (nameElement3) {
                var nameInstance = nameElement3;
                webSiteHostNameSslStateInstance.name = nameInstance;
              }
              
              var sslStateElement = js2xml.getElement(responseDoc, hostNameSslStatesElement, 'SSLSTATE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (sslStateElement) {
                var sslStateInstance = sslStateElement;
                webSiteHostNameSslStateInstance.sslState = sslStateInstance;
              }
              
              var thumbprintElement = js2xml.getElement(responseDoc, hostNameSslStatesElement, 'THUMBPRINT', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (thumbprintElement) {
                var thumbprintInstance = thumbprintElement;
                webSiteHostNameSslStateInstance.thumbprint = thumbprintInstance;
              }
              
              var virtualIPElement = js2xml.getElement(responseDoc, hostNameSslStatesElement, 'VIRTUALIP', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (virtualIPElement) {
                var virtualIPInstance = virtualIPElement;
                webSiteHostNameSslStateInstance.virtualIP = virtualIPInstance;
              }
            }
          }
          
          var hostNamesSequenceElement2 = js2xml.getElement(responseDoc, siteElement2, 'HOSTNAMES', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (hostNamesSequenceElement2) {
            for (var loweredIndex4 = 0; loweredIndex4 < js2xml.getElements(responseDoc, hostNamesSequenceElement2, 'STRING', 'HTTP://SCHEMAS.MICROSOFT.COM/2003/10/SERIALIZATION/ARRAYS').length; loweredIndex4 = loweredIndex4 + 1) {
              var hostNamesElement = js2xml.getElements(responseDoc, hostNamesSequenceElement2, 'STRING', 'HTTP://SCHEMAS.MICROSOFT.COM/2003/10/SERIALIZATION/ARRAYS')[loweredIndex4];
              webSiteInstance.hostNames.push(hostNamesElement);
            }
          }
          
          var lastModifiedTimeUtcElement = js2xml.getElement(responseDoc, siteElement2, 'LASTMODIFIEDTIMEUTC', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (lastModifiedTimeUtcElement) {
            var lastModifiedTimeUtcInstance = new Date(lastModifiedTimeUtcElement);
            webSiteInstance.lastModifiedTimeUtc = lastModifiedTimeUtcInstance;
          }
          
          var nameElement4 = js2xml.getElement(responseDoc, siteElement2, 'NAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (nameElement4) {
            var nameInstance2 = nameElement4;
            webSiteInstance.name = nameInstance2;
          }
          
          var ownerElement = js2xml.getElement(responseDoc, siteElement2, 'OWNER', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (ownerElement) {
            var ownerInstance = ownerElement;
            webSiteInstance.owner = ownerInstance;
          }
          
          var repositorySiteNameElement = js2xml.getElement(responseDoc, siteElement2, 'REPOSITORYSITENAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (repositorySiteNameElement) {
            var repositorySiteNameInstance = repositorySiteNameElement;
            webSiteInstance.repositorySiteName = repositorySiteNameInstance;
          }
          
          var runtimeAvailabilityStateElement = js2xml.getElement(responseDoc, siteElement2, 'RUNTIMEAVAILABILITYSTATE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (runtimeAvailabilityStateElement) {
            var runtimeAvailabilityStateInstance = runtimeAvailabilityStateElement;
            webSiteInstance.runtimeAvailabilityState = runtimeAvailabilityStateInstance;
          }
          
          var sSLCertificatesSequenceElement = js2xml.getElement(responseDoc, siteElement2, 'SSLCERTIFICATES', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (sSLCertificatesSequenceElement) {
            for (var loweredIndex5 = 0; loweredIndex5 < js2xml.getElements(responseDoc, sSLCertificatesSequenceElement, 'CERTIFICATE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex5 = loweredIndex5 + 1) {
              var sSLCertificatesElement = js2xml.getElements(responseDoc, sSLCertificatesSequenceElement, 'CERTIFICATE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex5];
              var certificateInstance = { hostNames: [] };
              webSiteInstance.sslCertificates.push(certificateInstance);
              
              var expirationDateElement = js2xml.getElement(responseDoc, sSLCertificatesElement, 'EXPIRATIONDATE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (expirationDateElement) {
                var expirationDateInstance = new Date(expirationDateElement);
                certificateInstance.expirationDate = expirationDateInstance;
              }
              
              var friendlyNameElement = js2xml.getElement(responseDoc, sSLCertificatesElement, 'FRIENDLYNAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (friendlyNameElement) {
                var friendlyNameInstance = friendlyNameElement;
                certificateInstance.friendlyName = friendlyNameInstance;
              }
              
              var hostNamesSequenceElement3 = js2xml.getElement(responseDoc, sSLCertificatesElement, 'HOSTNAMES', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (hostNamesSequenceElement3) {
                for (var loweredIndex6 = 0; loweredIndex6 < js2xml.getElements(responseDoc, hostNamesSequenceElement3, 'STRING', 'HTTP://SCHEMAS.MICROSOFT.COM/2003/10/SERIALIZATION/ARRAYS').length; loweredIndex6 = loweredIndex6 + 1) {
                  var hostNamesElement2 = js2xml.getElements(responseDoc, hostNamesSequenceElement3, 'STRING', 'HTTP://SCHEMAS.MICROSOFT.COM/2003/10/SERIALIZATION/ARRAYS')[loweredIndex6];
                  certificateInstance.hostNames.push(hostNamesElement2);
                }
              }
              
              var issueDateElement = js2xml.getElement(responseDoc, sSLCertificatesElement, 'ISSUEDATE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (issueDateElement) {
                var issueDateInstance = new Date(issueDateElement);
                certificateInstance.issueDate = issueDateInstance;
              }
              
              var issuerElement = js2xml.getElement(responseDoc, sSLCertificatesElement, 'ISSUER', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (issuerElement) {
                var issuerInstance = issuerElement;
                certificateInstance.issuer = issuerInstance;
              }
              
              var passwordElement = js2xml.getElement(responseDoc, sSLCertificatesElement, 'PASSWORD', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (passwordElement) {
                var passwordInstance = passwordElement;
                certificateInstance.password = passwordInstance;
              }
              
              var pfxBlobElement = js2xml.getElement(responseDoc, sSLCertificatesElement, 'PFXBLOB', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (pfxBlobElement) {
                var pfxBlobInstance = new Buffer(pfxBlobElement, 'base64').toString('ascii');
                certificateInstance.pfxBlob = pfxBlobInstance;
              }
              
              var selfLinkElement = js2xml.getElement(responseDoc, sSLCertificatesElement, 'SELFLINK', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (selfLinkElement) {
                var selfLinkInstance = selfLinkElement;
                certificateInstance.selfLinkUri = selfLinkInstance;
              }
              
              var siteNameElement = js2xml.getElement(responseDoc, sSLCertificatesElement, 'SITENAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (siteNameElement) {
                var siteNameInstance = siteNameElement;
                certificateInstance.siteName = siteNameInstance;
              }
              
              var subjectNameElement = js2xml.getElement(responseDoc, sSLCertificatesElement, 'SUBJECTNAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (subjectNameElement) {
                var subjectNameInstance = subjectNameElement;
                certificateInstance.subjectName = subjectNameInstance;
              }
              
              var thumbprintElement2 = js2xml.getElement(responseDoc, sSLCertificatesElement, 'THUMBPRINT', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (thumbprintElement2) {
                var thumbprintInstance2 = thumbprintElement2;
                certificateInstance.thumbprint = thumbprintInstance2;
              }
              
              var toDeleteElement = js2xml.getElement(responseDoc, sSLCertificatesElement, 'TODELETE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (toDeleteElement) {
                var toDeleteInstance = toDeleteElement;
                certificateInstance.isToBeDeleted = toDeleteInstance;
              }
              
              var validElement = js2xml.getElement(responseDoc, sSLCertificatesElement, 'VALID', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (validElement) {
                var validInstance = validElement;
                certificateInstance.isValid = validInstance;
              }
            }
          }
          
          var selfLinkElement2 = js2xml.getElement(responseDoc, siteElement2, 'SELFLINK', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (selfLinkElement2) {
            var selfLinkInstance2 = selfLinkElement2;
            webSiteInstance.uri = selfLinkInstance2;
          }
          
          var serverFarmElement2 = js2xml.getElement(responseDoc, siteElement2, 'SERVERFARM', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (serverFarmElement2) {
            var serverFarmInstance = serverFarmElement2;
            webSiteInstance.serverFarm = serverFarmInstance;
          }
          
          var siteModeElement2 = js2xml.getElement(responseDoc, siteElement2, 'SITEMODE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (siteModeElement2) {
            var siteModeInstance = siteModeElement2;
            webSiteInstance.siteMode = siteModeInstance;
          }
          
          var sitePropertiesElement = js2xml.getElement(responseDoc, siteElement2, 'SITEPROPERTIES', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (sitePropertiesElement) {
            var sitePropertiesInstance = { appSettings: {}, metadata: {}, properties: {} };
            webSiteInstance.siteProperties = sitePropertiesInstance;
            
            var appSettingsSequenceElement = js2xml.getElement(responseDoc, sitePropertiesElement, 'APPSETTINGS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (appSettingsSequenceElement) {
              for (var loweredIndex7 = 0; loweredIndex7 < js2xml.getElements(responseDoc, appSettingsSequenceElement, 'NAMEVALUEPAIR', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex7 = loweredIndex7 + 1) {
                var appSettingsElement = js2xml.getElements(responseDoc, appSettingsSequenceElement, 'NAMEVALUEPAIR', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex7];
                var appSettingsKey = js2xml.getElement(responseDoc, appSettingsElement, 'NAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                var appSettingsValue = js2xml.getElement(responseDoc, appSettingsElement, 'VALUE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                sitePropertiesInstance.appSettings[appSettingsKey] = appSettingsValue;
              }
            }
            
            var metadataSequenceElement = js2xml.getElement(responseDoc, sitePropertiesElement, 'METADATA', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (metadataSequenceElement) {
              for (var loweredIndex8 = 0; loweredIndex8 < js2xml.getElements(responseDoc, metadataSequenceElement, 'NAMEVALUEPAIR', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex8 = loweredIndex8 + 1) {
                var metadataElement = js2xml.getElements(responseDoc, metadataSequenceElement, 'NAMEVALUEPAIR', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex8];
                var metadataKey = js2xml.getElement(responseDoc, metadataElement, 'NAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                var metadataValue = js2xml.getElement(responseDoc, metadataElement, 'VALUE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                sitePropertiesInstance.metadata[metadataKey] = metadataValue;
              }
            }
            
            var propertiesSequenceElement = js2xml.getElement(responseDoc, sitePropertiesElement, 'PROPERTIES', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (propertiesSequenceElement) {
              for (var loweredIndex9 = 0; loweredIndex9 < js2xml.getElements(responseDoc, propertiesSequenceElement, 'NAMEVALUEPAIR', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex9 = loweredIndex9 + 1) {
                var propertiesElement = js2xml.getElements(responseDoc, propertiesSequenceElement, 'NAMEVALUEPAIR', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex9];
                var propertiesKey = js2xml.getElement(responseDoc, propertiesElement, 'NAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                var propertiesValue = js2xml.getElement(responseDoc, propertiesElement, 'VALUE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                sitePropertiesInstance.properties[propertiesKey] = propertiesValue;
              }
            }
          }
          
          var stateElement = js2xml.getElement(responseDoc, siteElement2, 'STATE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (stateElement) {
            var stateInstance = stateElement;
            webSiteInstance.state = stateInstance;
          }
          
          var usageStateElement = js2xml.getElement(responseDoc, siteElement2, 'USAGESTATE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (usageStateElement) {
            var usageStateInstance = usageStateElement;
            webSiteInstance.usageState = usageStateInstance;
          }
          
          var webSpaceElement = js2xml.getElement(responseDoc, siteElement2, 'WEBSPACE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (webSpaceElement) {
            var webSpaceInstance = webSpaceElement;
            webSiteInstance.webSpace = webSpaceInstance;
          }
        }
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * You can retrieve details for a web site by issuing an HTTP GET request.
   * (see http://msdn.microsoft.com/en-us/library/windowsazure/dn167007.aspx
   * for more information)
   *
   * @param {String} webSpaceName - The name of the web space.
   *
   * @param {String} webSiteName - The name of the web site.
   *
   * @param {WebSiteGetParameters} parametersOrCallback - Additional parameters
   *
   * @param {Function} callback
   *
   * @returns {WebSiteGetResponse} - The Get Web Site Details operation
   * response.
   */
  WebSiteOperations.prototype.get = function(webSpaceName, webSiteName, parametersOrCallback, callback) {
    var parameters = parametersOrCallback;
    if (_.isFunction(parameters)) {
      callback = parameters;
      parameters = null;
    }
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (webSpaceName === null || webSpaceName === undefined) {
      return callback(new Error('webSpaceName cannot be null.'));
    }
    if (webSiteName === null || webSiteName === undefined) {
      return callback(new Error('webSiteName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/WebSpaces/' + webSpaceName + '/sites/' + webSiteName + '?';
    if (parameters.propertiesToInclude && parameters.propertiesToInclude.length > 0) {
      url2 = url2 + '&propertiesToInclude=' + encodeURIComponent(parameters.propertiesToInclude.join(','));
    }
    
    // Create HTTP transport objects
    var httpRequest = {};
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2013-03-01';
    
    // Set Credentials
    httpRequest.key = this.client.credentials.keyvalue;
    httpRequest.cert = this.client.credentials.certvalue;
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var siteElement = js2xml.getElement(responseDoc, responseDoc, 'SITE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
        if (siteElement) {
          var webSiteInstance = { enabledHostNames: [], hostNameSslStates: [], hostNames: [], sslCertificates: [] };
          result.webSite = webSiteInstance;
          
          var adminEnabledElement = js2xml.getElement(responseDoc, siteElement, 'ADMINENABLED', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (adminEnabledElement) {
            var adminEnabledInstance = adminEnabledElement;
            webSiteInstance.adminEnabled = adminEnabledInstance;
          }
          
          var availabilityStateElement = js2xml.getElement(responseDoc, siteElement, 'AVAILABILITYSTATE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (availabilityStateElement) {
            var availabilityStateInstance = availabilityStateElement;
            webSiteInstance.availabilityState = availabilityStateInstance;
          }
          
          var computeModeElement = js2xml.getElement(responseDoc, siteElement, 'COMPUTEMODE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (computeModeElement) {
            var computeModeInstance = computeModeElement;
            webSiteInstance.computeMode = computeModeInstance;
          }
          
          var enabledElement = js2xml.getElement(responseDoc, siteElement, 'ENABLED', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (enabledElement) {
            var enabledInstance = enabledElement;
            webSiteInstance.enabled = enabledInstance;
          }
          
          var enabledHostNamesSequenceElement = js2xml.getElement(responseDoc, siteElement, 'ENABLEDHOSTNAMES', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (enabledHostNamesSequenceElement) {
            for (var loweredIndex1 = 0; loweredIndex1 < js2xml.getElements(responseDoc, enabledHostNamesSequenceElement, 'STRING', 'HTTP://SCHEMAS.MICROSOFT.COM/2003/10/SERIALIZATION/ARRAYS').length; loweredIndex1 = loweredIndex1 + 1) {
              var enabledHostNamesElement = js2xml.getElements(responseDoc, enabledHostNamesSequenceElement, 'STRING', 'HTTP://SCHEMAS.MICROSOFT.COM/2003/10/SERIALIZATION/ARRAYS')[loweredIndex1];
              webSiteInstance.enabledHostNames.push(enabledHostNamesElement);
            }
          }
          
          var hostNameSslStatesSequenceElement = js2xml.getElement(responseDoc, siteElement, 'HOSTNAMESSLSTATES', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (hostNameSslStatesSequenceElement) {
            for (var loweredIndex2 = 0; loweredIndex2 < js2xml.getElements(responseDoc, hostNameSslStatesSequenceElement, 'WEBSITEHOSTNAMESSLSTATE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex2 = loweredIndex2 + 1) {
              var hostNameSslStatesElement = js2xml.getElements(responseDoc, hostNameSslStatesSequenceElement, 'WEBSITEHOSTNAMESSLSTATE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex2];
              var webSiteHostNameSslStateInstance = {};
              webSiteInstance.hostNameSslStates.push(webSiteHostNameSslStateInstance);
              
              var nameElement = js2xml.getElement(responseDoc, hostNameSslStatesElement, 'NAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (nameElement) {
                var nameInstance = nameElement;
                webSiteHostNameSslStateInstance.name = nameInstance;
              }
              
              var sslStateElement = js2xml.getElement(responseDoc, hostNameSslStatesElement, 'SSLSTATE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (sslStateElement) {
                var sslStateInstance = sslStateElement;
                webSiteHostNameSslStateInstance.sslState = sslStateInstance;
              }
              
              var thumbprintElement = js2xml.getElement(responseDoc, hostNameSslStatesElement, 'THUMBPRINT', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (thumbprintElement) {
                var thumbprintInstance = thumbprintElement;
                webSiteHostNameSslStateInstance.thumbprint = thumbprintInstance;
              }
              
              var virtualIPElement = js2xml.getElement(responseDoc, hostNameSslStatesElement, 'VIRTUALIP', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (virtualIPElement) {
                var virtualIPInstance = virtualIPElement;
                webSiteHostNameSslStateInstance.virtualIP = virtualIPInstance;
              }
            }
          }
          
          var hostNamesSequenceElement = js2xml.getElement(responseDoc, siteElement, 'HOSTNAMES', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (hostNamesSequenceElement) {
            for (var loweredIndex3 = 0; loweredIndex3 < js2xml.getElements(responseDoc, hostNamesSequenceElement, 'STRING', 'HTTP://SCHEMAS.MICROSOFT.COM/2003/10/SERIALIZATION/ARRAYS').length; loweredIndex3 = loweredIndex3 + 1) {
              var hostNamesElement = js2xml.getElements(responseDoc, hostNamesSequenceElement, 'STRING', 'HTTP://SCHEMAS.MICROSOFT.COM/2003/10/SERIALIZATION/ARRAYS')[loweredIndex3];
              webSiteInstance.hostNames.push(hostNamesElement);
            }
          }
          
          var lastModifiedTimeUtcElement = js2xml.getElement(responseDoc, siteElement, 'LASTMODIFIEDTIMEUTC', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (lastModifiedTimeUtcElement) {
            var lastModifiedTimeUtcInstance = new Date(lastModifiedTimeUtcElement);
            webSiteInstance.lastModifiedTimeUtc = lastModifiedTimeUtcInstance;
          }
          
          var nameElement2 = js2xml.getElement(responseDoc, siteElement, 'NAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (nameElement2) {
            var nameInstance2 = nameElement2;
            webSiteInstance.name = nameInstance2;
          }
          
          var ownerElement = js2xml.getElement(responseDoc, siteElement, 'OWNER', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (ownerElement) {
            var ownerInstance = ownerElement;
            webSiteInstance.owner = ownerInstance;
          }
          
          var repositorySiteNameElement = js2xml.getElement(responseDoc, siteElement, 'REPOSITORYSITENAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (repositorySiteNameElement) {
            var repositorySiteNameInstance = repositorySiteNameElement;
            webSiteInstance.repositorySiteName = repositorySiteNameInstance;
          }
          
          var runtimeAvailabilityStateElement = js2xml.getElement(responseDoc, siteElement, 'RUNTIMEAVAILABILITYSTATE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (runtimeAvailabilityStateElement) {
            var runtimeAvailabilityStateInstance = runtimeAvailabilityStateElement;
            webSiteInstance.runtimeAvailabilityState = runtimeAvailabilityStateInstance;
          }
          
          var sSLCertificatesSequenceElement = js2xml.getElement(responseDoc, siteElement, 'SSLCERTIFICATES', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (sSLCertificatesSequenceElement) {
            for (var loweredIndex4 = 0; loweredIndex4 < js2xml.getElements(responseDoc, sSLCertificatesSequenceElement, 'CERTIFICATE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex4 = loweredIndex4 + 1) {
              var sSLCertificatesElement = js2xml.getElements(responseDoc, sSLCertificatesSequenceElement, 'CERTIFICATE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex4];
              var certificateInstance = { hostNames: [] };
              webSiteInstance.sslCertificates.push(certificateInstance);
              
              var expirationDateElement = js2xml.getElement(responseDoc, sSLCertificatesElement, 'EXPIRATIONDATE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (expirationDateElement) {
                var expirationDateInstance = new Date(expirationDateElement);
                certificateInstance.expirationDate = expirationDateInstance;
              }
              
              var friendlyNameElement = js2xml.getElement(responseDoc, sSLCertificatesElement, 'FRIENDLYNAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (friendlyNameElement) {
                var friendlyNameInstance = friendlyNameElement;
                certificateInstance.friendlyName = friendlyNameInstance;
              }
              
              var hostNamesSequenceElement2 = js2xml.getElement(responseDoc, sSLCertificatesElement, 'HOSTNAMES', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (hostNamesSequenceElement2) {
                for (var loweredIndex5 = 0; loweredIndex5 < js2xml.getElements(responseDoc, hostNamesSequenceElement2, 'STRING', 'HTTP://SCHEMAS.MICROSOFT.COM/2003/10/SERIALIZATION/ARRAYS').length; loweredIndex5 = loweredIndex5 + 1) {
                  var hostNamesElement2 = js2xml.getElements(responseDoc, hostNamesSequenceElement2, 'STRING', 'HTTP://SCHEMAS.MICROSOFT.COM/2003/10/SERIALIZATION/ARRAYS')[loweredIndex5];
                  certificateInstance.hostNames.push(hostNamesElement2);
                }
              }
              
              var issueDateElement = js2xml.getElement(responseDoc, sSLCertificatesElement, 'ISSUEDATE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (issueDateElement) {
                var issueDateInstance = new Date(issueDateElement);
                certificateInstance.issueDate = issueDateInstance;
              }
              
              var issuerElement = js2xml.getElement(responseDoc, sSLCertificatesElement, 'ISSUER', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (issuerElement) {
                var issuerInstance = issuerElement;
                certificateInstance.issuer = issuerInstance;
              }
              
              var passwordElement = js2xml.getElement(responseDoc, sSLCertificatesElement, 'PASSWORD', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (passwordElement) {
                var passwordInstance = passwordElement;
                certificateInstance.password = passwordInstance;
              }
              
              var pfxBlobElement = js2xml.getElement(responseDoc, sSLCertificatesElement, 'PFXBLOB', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (pfxBlobElement) {
                var pfxBlobInstance = new Buffer(pfxBlobElement, 'base64').toString('ascii');
                certificateInstance.pfxBlob = pfxBlobInstance;
              }
              
              var selfLinkElement = js2xml.getElement(responseDoc, sSLCertificatesElement, 'SELFLINK', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (selfLinkElement) {
                var selfLinkInstance = selfLinkElement;
                certificateInstance.selfLinkUri = selfLinkInstance;
              }
              
              var siteNameElement = js2xml.getElement(responseDoc, sSLCertificatesElement, 'SITENAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (siteNameElement) {
                var siteNameInstance = siteNameElement;
                certificateInstance.siteName = siteNameInstance;
              }
              
              var subjectNameElement = js2xml.getElement(responseDoc, sSLCertificatesElement, 'SUBJECTNAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (subjectNameElement) {
                var subjectNameInstance = subjectNameElement;
                certificateInstance.subjectName = subjectNameInstance;
              }
              
              var thumbprintElement2 = js2xml.getElement(responseDoc, sSLCertificatesElement, 'THUMBPRINT', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (thumbprintElement2) {
                var thumbprintInstance2 = thumbprintElement2;
                certificateInstance.thumbprint = thumbprintInstance2;
              }
              
              var toDeleteElement = js2xml.getElement(responseDoc, sSLCertificatesElement, 'TODELETE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (toDeleteElement) {
                var toDeleteInstance = toDeleteElement;
                certificateInstance.isToBeDeleted = toDeleteInstance;
              }
              
              var validElement = js2xml.getElement(responseDoc, sSLCertificatesElement, 'VALID', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (validElement) {
                var validInstance = validElement;
                certificateInstance.isValid = validInstance;
              }
            }
          }
          
          var selfLinkElement2 = js2xml.getElement(responseDoc, siteElement, 'SELFLINK', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (selfLinkElement2) {
            var selfLinkInstance2 = selfLinkElement2;
            webSiteInstance.uri = selfLinkInstance2;
          }
          
          var serverFarmElement = js2xml.getElement(responseDoc, siteElement, 'SERVERFARM', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (serverFarmElement) {
            var serverFarmInstance = serverFarmElement;
            webSiteInstance.serverFarm = serverFarmInstance;
          }
          
          var siteModeElement = js2xml.getElement(responseDoc, siteElement, 'SITEMODE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (siteModeElement) {
            var siteModeInstance = siteModeElement;
            webSiteInstance.siteMode = siteModeInstance;
          }
          
          var sitePropertiesElement = js2xml.getElement(responseDoc, siteElement, 'SITEPROPERTIES', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (sitePropertiesElement) {
            var sitePropertiesInstance = { appSettings: {}, metadata: {}, properties: {} };
            webSiteInstance.siteProperties = sitePropertiesInstance;
            
            var appSettingsSequenceElement = js2xml.getElement(responseDoc, sitePropertiesElement, 'APPSETTINGS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (appSettingsSequenceElement) {
              for (var loweredIndex6 = 0; loweredIndex6 < js2xml.getElements(responseDoc, appSettingsSequenceElement, 'NAMEVALUEPAIR', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex6 = loweredIndex6 + 1) {
                var appSettingsElement = js2xml.getElements(responseDoc, appSettingsSequenceElement, 'NAMEVALUEPAIR', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex6];
                var appSettingsKey = js2xml.getElement(responseDoc, appSettingsElement, 'NAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                var appSettingsValue = js2xml.getElement(responseDoc, appSettingsElement, 'VALUE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                sitePropertiesInstance.appSettings[appSettingsKey] = appSettingsValue;
              }
            }
            
            var metadataSequenceElement = js2xml.getElement(responseDoc, sitePropertiesElement, 'METADATA', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (metadataSequenceElement) {
              for (var loweredIndex7 = 0; loweredIndex7 < js2xml.getElements(responseDoc, metadataSequenceElement, 'NAMEVALUEPAIR', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex7 = loweredIndex7 + 1) {
                var metadataElement = js2xml.getElements(responseDoc, metadataSequenceElement, 'NAMEVALUEPAIR', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex7];
                var metadataKey = js2xml.getElement(responseDoc, metadataElement, 'NAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                var metadataValue = js2xml.getElement(responseDoc, metadataElement, 'VALUE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                sitePropertiesInstance.metadata[metadataKey] = metadataValue;
              }
            }
            
            var propertiesSequenceElement = js2xml.getElement(responseDoc, sitePropertiesElement, 'PROPERTIES', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (propertiesSequenceElement) {
              for (var loweredIndex8 = 0; loweredIndex8 < js2xml.getElements(responseDoc, propertiesSequenceElement, 'NAMEVALUEPAIR', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex8 = loweredIndex8 + 1) {
                var propertiesElement = js2xml.getElements(responseDoc, propertiesSequenceElement, 'NAMEVALUEPAIR', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex8];
                var propertiesKey = js2xml.getElement(responseDoc, propertiesElement, 'NAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                var propertiesValue = js2xml.getElement(responseDoc, propertiesElement, 'VALUE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                sitePropertiesInstance.properties[propertiesKey] = propertiesValue;
              }
            }
          }
          
          var stateElement = js2xml.getElement(responseDoc, siteElement, 'STATE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (stateElement) {
            var stateInstance = stateElement;
            webSiteInstance.state = stateInstance;
          }
          
          var usageStateElement = js2xml.getElement(responseDoc, siteElement, 'USAGESTATE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (usageStateElement) {
            var usageStateInstance = usageStateElement;
            webSiteInstance.usageState = usageStateInstance;
          }
          
          var webSpaceElement = js2xml.getElement(responseDoc, siteElement, 'WEBSPACE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (webSpaceElement) {
            var webSpaceInstance = webSpaceElement;
            webSiteInstance.webSpace = webSpaceInstance;
          }
        }
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * You can update the settings for a web site by using the HTTP PUT method
   * and by specifying the settings in the request body.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/dn167005.aspx for
   * more information)
   *
   * @param {String} webSpaceName - The name of the web space.
   *
   * @param {String} webSiteName - The name of the web site.
   *
   * @param {WebSiteUpdateParameters} parameters - Parameters supplied to the
   * Update Web Site operation.
   *
   * @param {Function} callback
   *
   * @returns {WebSiteUpdateResponse} - The Update Web Site operation response.
   */
  WebSiteOperations.prototype.update = function(webSpaceName, webSiteName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (webSpaceName === null || webSpaceName === undefined) {
      return callback(new Error('webSpaceName cannot be null.'));
    }
    if (webSiteName === null || webSiteName === undefined) {
      return callback(new Error('webSiteName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/WebSpaces/' + webSpaceName + '/sites/' + webSiteName;
    
    // Create HTTP transport objects
    var httpRequest = {};
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2013-03-01';
    httpRequest.headers['Content-Type'] = 'application/xml';
    
    // Set Credentials
    httpRequest.key = this.client.credentials.keyvalue;
    httpRequest.cert = this.client.credentials.certvalue;
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = {};
    
    var siteElement = js2xml.createElement('Site', 'http://schemas.microsoft.com/windowsazure');
    js2xml.addChildElement(requestDoc, siteElement);
    
    if (parameters.availabilityState) {
      var availabilityStateElement = js2xml.createElement('AvailabilityState', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(availabilityStateElement, parameters.availabilityState ? parameters.availabilityState.toString() : 'Normal');
      js2xml.addChildElement(siteElement, availabilityStateElement);
    }
    
    if (parameters.computeMode) {
      var computeModeElement = js2xml.createElement('ComputeMode', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(computeModeElement, parameters.computeMode ? parameters.computeMode.toString() : 'Shared');
      js2xml.addChildElement(siteElement, computeModeElement);
    }
    
    if (parameters.enabled) {
      var enabledElement = js2xml.createElement('Enabled', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(enabledElement, parameters.enabled.toString());
      js2xml.addChildElement(siteElement, enabledElement);
    }
    
    if (parameters.hostNameSslStates) {
      var hostNameSslStatesSequenceElement = js2xml.createElement('HostNameSslStates', 'http://schemas.microsoft.com/windowsazure');
      for (var loweredIndex1 = 0; loweredIndex1 < parameters.hostNameSslStates.length; loweredIndex1 = loweredIndex1 + 1) {
        var hostNameSslStatesItem = parameters.hostNameSslStates[loweredIndex1];
        var webSiteHostNameSslStateElement = js2xml.createElement('WebSiteHostNameSslState', 'http://schemas.microsoft.com/windowsazure');
        js2xml.addChildElement(hostNameSslStatesSequenceElement, webSiteHostNameSslStateElement);
        
        if (hostNameSslStatesItem.sslState) {
          var sslStateElement = js2xml.createElement('SslState', 'http://schemas.microsoft.com/windowsazure');
          js2xml.setElementValue(sslStateElement, hostNameSslStatesItem.sslState ? hostNameSslStatesItem.sslState.toString() : 'Disabled');
          js2xml.addChildElement(webSiteHostNameSslStateElement, sslStateElement);
        }
        
        if (hostNameSslStatesItem.thumbprint) {
          var thumbprintElement = js2xml.createElement('Thumbprint', 'http://schemas.microsoft.com/windowsazure');
          js2xml.setElementValue(thumbprintElement, hostNameSslStatesItem.thumbprint);
          js2xml.addChildElement(webSiteHostNameSslStateElement, thumbprintElement);
        }
        
        if (hostNameSslStatesItem.toUpdate) {
          var toUpdateElement = js2xml.createElement('ToUpdate', 'http://schemas.microsoft.com/windowsazure');
          js2xml.setElementValue(toUpdateElement, hostNameSslStatesItem.toUpdate.toString());
          js2xml.addChildElement(webSiteHostNameSslStateElement, toUpdateElement);
        }
      }
      js2xml.addChildElement(siteElement, hostNameSslStatesSequenceElement);
    }
    
    if (parameters.hostNames) {
      var hostNamesSequenceElement = js2xml.createElement('HostNames', 'http://schemas.microsoft.com/windowsazure');
      for (var loweredIndex2 = 0; loweredIndex2 < parameters.hostNames.length; loweredIndex2 = loweredIndex2 + 1) {
        var hostNamesItem = parameters.hostNames[loweredIndex2];
        var hostNamesItemElement = js2xml.createElement('string', 'http://schemas.microsoft.com/2003/10/Serialization/Arrays');
        js2xml.setElementValue(hostNamesItemElement, hostNamesItem);
        js2xml.addChildElement(hostNamesSequenceElement, hostNamesItemElement);
      }
      js2xml.addChildElement(siteElement, hostNamesSequenceElement);
    }
    
    if (parameters.runtimeAvailabilityState) {
      var runtimeAvailabilityStateElement = js2xml.createElement('RuntimeAvailabilityState', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(runtimeAvailabilityStateElement, parameters.runtimeAvailabilityState ? parameters.runtimeAvailabilityState.toString() : 'Normal');
      js2xml.addChildElement(siteElement, runtimeAvailabilityStateElement);
    }
    
    if (parameters.sslCertificates) {
      var sSLCertificatesSequenceElement = js2xml.createElement('SSLCertificates', 'http://schemas.microsoft.com/windowsazure');
      for (var loweredIndex3 = 0; loweredIndex3 < parameters.sslCertificates.length; loweredIndex3 = loweredIndex3 + 1) {
        var sSLCertificatesItem = parameters.sslCertificates[loweredIndex3];
        var certificateElement = js2xml.createElement('Certificate', 'http://schemas.microsoft.com/windowsazure');
        js2xml.addChildElement(sSLCertificatesSequenceElement, certificateElement);
        
        if (sSLCertificatesItem.password) {
          var passwordElement = js2xml.createElement('Password', 'http://schemas.microsoft.com/windowsazure');
          js2xml.setElementValue(passwordElement, sSLCertificatesItem.password);
          js2xml.addChildElement(certificateElement, passwordElement);
        }
        
        if (sSLCertificatesItem.pfxBlob) {
          var pfxBlobElement = js2xml.createElement('PfxBlob', 'http://schemas.microsoft.com/windowsazure');
          js2xml.setElementValue(pfxBlobElement, sSLCertificatesItem.pfxBlob.toString('base64'));
          js2xml.addChildElement(certificateElement, pfxBlobElement);
        }
        
        if (sSLCertificatesItem.thumbprint) {
          var thumbprintElement2 = js2xml.createElement('Thumbprint', 'http://schemas.microsoft.com/windowsazure');
          js2xml.setElementValue(thumbprintElement2, sSLCertificatesItem.thumbprint);
          js2xml.addChildElement(certificateElement, thumbprintElement2);
        }
        
        if (sSLCertificatesItem.isToBeDeleted) {
          var toDeleteElement = js2xml.createElement('ToDelete', 'http://schemas.microsoft.com/windowsazure');
          js2xml.setElementValue(toDeleteElement, sSLCertificatesItem.isToBeDeleted.toString());
          js2xml.addChildElement(certificateElement, toDeleteElement);
        }
      }
      js2xml.addChildElement(siteElement, sSLCertificatesSequenceElement);
    }
    
    if (parameters.serverFarm) {
      var serverFarmElement = js2xml.createElement('ServerFarm', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(serverFarmElement, parameters.serverFarm);
      js2xml.addChildElement(siteElement, serverFarmElement);
    }
    
    if (parameters.siteMode) {
      var siteModeElement = js2xml.createElement('SiteMode', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(siteModeElement, parameters.siteMode ? parameters.siteMode.toString() : 'Limited');
      js2xml.addChildElement(siteElement, siteModeElement);
    }
    
    if (parameters.state) {
      var stateElement = js2xml.createElement('State', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(stateElement, parameters.state ? parameters.state.toString() : 'Stopped');
      js2xml.addChildElement(siteElement, stateElement);
    }
    
    requestContent = js2xml.serializeDocument(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var siteElement2 = js2xml.getElement(responseDoc, responseDoc, 'SITE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
        if (siteElement2) {
          var webSiteInstance = { enabledHostNames: [], hostNameSslStates: [], hostNames: [], sslCertificates: [] };
          result.webSite = webSiteInstance;
          
          var adminEnabledElement = js2xml.getElement(responseDoc, siteElement2, 'ADMINENABLED', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (adminEnabledElement) {
            var adminEnabledInstance = adminEnabledElement;
            webSiteInstance.adminEnabled = adminEnabledInstance;
          }
          
          var availabilityStateElement2 = js2xml.getElement(responseDoc, siteElement2, 'AVAILABILITYSTATE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (availabilityStateElement2) {
            var availabilityStateInstance = availabilityStateElement2;
            webSiteInstance.availabilityState = availabilityStateInstance;
          }
          
          var computeModeElement2 = js2xml.getElement(responseDoc, siteElement2, 'COMPUTEMODE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (computeModeElement2) {
            var computeModeInstance = computeModeElement2;
            webSiteInstance.computeMode = computeModeInstance;
          }
          
          var enabledElement2 = js2xml.getElement(responseDoc, siteElement2, 'ENABLED', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (enabledElement2) {
            var enabledInstance = enabledElement2;
            webSiteInstance.enabled = enabledInstance;
          }
          
          var enabledHostNamesSequenceElement = js2xml.getElement(responseDoc, siteElement2, 'ENABLEDHOSTNAMES', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (enabledHostNamesSequenceElement) {
            for (var loweredIndex4 = 0; loweredIndex4 < js2xml.getElements(responseDoc, enabledHostNamesSequenceElement, 'STRING', 'HTTP://SCHEMAS.MICROSOFT.COM/2003/10/SERIALIZATION/ARRAYS').length; loweredIndex4 = loweredIndex4 + 1) {
              var enabledHostNamesElement = js2xml.getElements(responseDoc, enabledHostNamesSequenceElement, 'STRING', 'HTTP://SCHEMAS.MICROSOFT.COM/2003/10/SERIALIZATION/ARRAYS')[loweredIndex4];
              webSiteInstance.enabledHostNames.push(enabledHostNamesElement);
            }
          }
          
          var hostNameSslStatesSequenceElement2 = js2xml.getElement(responseDoc, siteElement2, 'HOSTNAMESSLSTATES', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (hostNameSslStatesSequenceElement2) {
            for (var loweredIndex5 = 0; loweredIndex5 < js2xml.getElements(responseDoc, hostNameSslStatesSequenceElement2, 'WEBSITEHOSTNAMESSLSTATE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex5 = loweredIndex5 + 1) {
              var hostNameSslStatesElement = js2xml.getElements(responseDoc, hostNameSslStatesSequenceElement2, 'WEBSITEHOSTNAMESSLSTATE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex5];
              var webSiteHostNameSslStateInstance = {};
              webSiteInstance.hostNameSslStates.push(webSiteHostNameSslStateInstance);
              
              var nameElement = js2xml.getElement(responseDoc, hostNameSslStatesElement, 'NAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (nameElement) {
                var nameInstance = nameElement;
                webSiteHostNameSslStateInstance.name = nameInstance;
              }
              
              var sslStateElement2 = js2xml.getElement(responseDoc, hostNameSslStatesElement, 'SSLSTATE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (sslStateElement2) {
                var sslStateInstance = sslStateElement2;
                webSiteHostNameSslStateInstance.sslState = sslStateInstance;
              }
              
              var thumbprintElement3 = js2xml.getElement(responseDoc, hostNameSslStatesElement, 'THUMBPRINT', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (thumbprintElement3) {
                var thumbprintInstance = thumbprintElement3;
                webSiteHostNameSslStateInstance.thumbprint = thumbprintInstance;
              }
              
              var virtualIPElement = js2xml.getElement(responseDoc, hostNameSslStatesElement, 'VIRTUALIP', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (virtualIPElement) {
                var virtualIPInstance = virtualIPElement;
                webSiteHostNameSslStateInstance.virtualIP = virtualIPInstance;
              }
            }
          }
          
          var hostNamesSequenceElement2 = js2xml.getElement(responseDoc, siteElement2, 'HOSTNAMES', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (hostNamesSequenceElement2) {
            for (var loweredIndex6 = 0; loweredIndex6 < js2xml.getElements(responseDoc, hostNamesSequenceElement2, 'STRING', 'HTTP://SCHEMAS.MICROSOFT.COM/2003/10/SERIALIZATION/ARRAYS').length; loweredIndex6 = loweredIndex6 + 1) {
              var hostNamesElement = js2xml.getElements(responseDoc, hostNamesSequenceElement2, 'STRING', 'HTTP://SCHEMAS.MICROSOFT.COM/2003/10/SERIALIZATION/ARRAYS')[loweredIndex6];
              webSiteInstance.hostNames.push(hostNamesElement);
            }
          }
          
          var lastModifiedTimeUtcElement = js2xml.getElement(responseDoc, siteElement2, 'LASTMODIFIEDTIMEUTC', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (lastModifiedTimeUtcElement) {
            var lastModifiedTimeUtcInstance = new Date(lastModifiedTimeUtcElement);
            webSiteInstance.lastModifiedTimeUtc = lastModifiedTimeUtcInstance;
          }
          
          var nameElement2 = js2xml.getElement(responseDoc, siteElement2, 'NAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (nameElement2) {
            var nameInstance2 = nameElement2;
            webSiteInstance.name = nameInstance2;
          }
          
          var ownerElement = js2xml.getElement(responseDoc, siteElement2, 'OWNER', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (ownerElement) {
            var ownerInstance = ownerElement;
            webSiteInstance.owner = ownerInstance;
          }
          
          var repositorySiteNameElement = js2xml.getElement(responseDoc, siteElement2, 'REPOSITORYSITENAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (repositorySiteNameElement) {
            var repositorySiteNameInstance = repositorySiteNameElement;
            webSiteInstance.repositorySiteName = repositorySiteNameInstance;
          }
          
          var runtimeAvailabilityStateElement2 = js2xml.getElement(responseDoc, siteElement2, 'RUNTIMEAVAILABILITYSTATE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (runtimeAvailabilityStateElement2) {
            var runtimeAvailabilityStateInstance = runtimeAvailabilityStateElement2;
            webSiteInstance.runtimeAvailabilityState = runtimeAvailabilityStateInstance;
          }
          
          var sSLCertificatesSequenceElement2 = js2xml.getElement(responseDoc, siteElement2, 'SSLCERTIFICATES', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (sSLCertificatesSequenceElement2) {
            for (var loweredIndex7 = 0; loweredIndex7 < js2xml.getElements(responseDoc, sSLCertificatesSequenceElement2, 'CERTIFICATE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex7 = loweredIndex7 + 1) {
              var sSLCertificatesElement = js2xml.getElements(responseDoc, sSLCertificatesSequenceElement2, 'CERTIFICATE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex7];
              var certificateInstance = { hostNames: [] };
              webSiteInstance.sslCertificates.push(certificateInstance);
              
              var expirationDateElement = js2xml.getElement(responseDoc, sSLCertificatesElement, 'EXPIRATIONDATE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (expirationDateElement) {
                var expirationDateInstance = new Date(expirationDateElement);
                certificateInstance.expirationDate = expirationDateInstance;
              }
              
              var friendlyNameElement = js2xml.getElement(responseDoc, sSLCertificatesElement, 'FRIENDLYNAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (friendlyNameElement) {
                var friendlyNameInstance = friendlyNameElement;
                certificateInstance.friendlyName = friendlyNameInstance;
              }
              
              var hostNamesSequenceElement3 = js2xml.getElement(responseDoc, sSLCertificatesElement, 'HOSTNAMES', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (hostNamesSequenceElement3) {
                for (var loweredIndex8 = 0; loweredIndex8 < js2xml.getElements(responseDoc, hostNamesSequenceElement3, 'STRING', 'HTTP://SCHEMAS.MICROSOFT.COM/2003/10/SERIALIZATION/ARRAYS').length; loweredIndex8 = loweredIndex8 + 1) {
                  var hostNamesElement2 = js2xml.getElements(responseDoc, hostNamesSequenceElement3, 'STRING', 'HTTP://SCHEMAS.MICROSOFT.COM/2003/10/SERIALIZATION/ARRAYS')[loweredIndex8];
                  certificateInstance.hostNames.push(hostNamesElement2);
                }
              }
              
              var issueDateElement = js2xml.getElement(responseDoc, sSLCertificatesElement, 'ISSUEDATE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (issueDateElement) {
                var issueDateInstance = new Date(issueDateElement);
                certificateInstance.issueDate = issueDateInstance;
              }
              
              var issuerElement = js2xml.getElement(responseDoc, sSLCertificatesElement, 'ISSUER', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (issuerElement) {
                var issuerInstance = issuerElement;
                certificateInstance.issuer = issuerInstance;
              }
              
              var passwordElement2 = js2xml.getElement(responseDoc, sSLCertificatesElement, 'PASSWORD', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (passwordElement2) {
                var passwordInstance = passwordElement2;
                certificateInstance.password = passwordInstance;
              }
              
              var pfxBlobElement2 = js2xml.getElement(responseDoc, sSLCertificatesElement, 'PFXBLOB', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (pfxBlobElement2) {
                var pfxBlobInstance = new Buffer(pfxBlobElement2, 'base64').toString('ascii');
                certificateInstance.pfxBlob = pfxBlobInstance;
              }
              
              var selfLinkElement = js2xml.getElement(responseDoc, sSLCertificatesElement, 'SELFLINK', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (selfLinkElement) {
                var selfLinkInstance = selfLinkElement;
                certificateInstance.selfLinkUri = selfLinkInstance;
              }
              
              var siteNameElement = js2xml.getElement(responseDoc, sSLCertificatesElement, 'SITENAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (siteNameElement) {
                var siteNameInstance = siteNameElement;
                certificateInstance.siteName = siteNameInstance;
              }
              
              var subjectNameElement = js2xml.getElement(responseDoc, sSLCertificatesElement, 'SUBJECTNAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (subjectNameElement) {
                var subjectNameInstance = subjectNameElement;
                certificateInstance.subjectName = subjectNameInstance;
              }
              
              var thumbprintElement4 = js2xml.getElement(responseDoc, sSLCertificatesElement, 'THUMBPRINT', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (thumbprintElement4) {
                var thumbprintInstance2 = thumbprintElement4;
                certificateInstance.thumbprint = thumbprintInstance2;
              }
              
              var toDeleteElement2 = js2xml.getElement(responseDoc, sSLCertificatesElement, 'TODELETE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (toDeleteElement2) {
                var toDeleteInstance = toDeleteElement2;
                certificateInstance.isToBeDeleted = toDeleteInstance;
              }
              
              var validElement = js2xml.getElement(responseDoc, sSLCertificatesElement, 'VALID', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (validElement) {
                var validInstance = validElement;
                certificateInstance.isValid = validInstance;
              }
            }
          }
          
          var selfLinkElement2 = js2xml.getElement(responseDoc, siteElement2, 'SELFLINK', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (selfLinkElement2) {
            var selfLinkInstance2 = selfLinkElement2;
            webSiteInstance.uri = selfLinkInstance2;
          }
          
          var serverFarmElement2 = js2xml.getElement(responseDoc, siteElement2, 'SERVERFARM', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (serverFarmElement2) {
            var serverFarmInstance = serverFarmElement2;
            webSiteInstance.serverFarm = serverFarmInstance;
          }
          
          var siteModeElement2 = js2xml.getElement(responseDoc, siteElement2, 'SITEMODE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (siteModeElement2) {
            var siteModeInstance = siteModeElement2;
            webSiteInstance.siteMode = siteModeInstance;
          }
          
          var sitePropertiesElement = js2xml.getElement(responseDoc, siteElement2, 'SITEPROPERTIES', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (sitePropertiesElement) {
            var sitePropertiesInstance = { appSettings: {}, metadata: {}, properties: {} };
            webSiteInstance.siteProperties = sitePropertiesInstance;
            
            var appSettingsSequenceElement = js2xml.getElement(responseDoc, sitePropertiesElement, 'APPSETTINGS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (appSettingsSequenceElement) {
              for (var loweredIndex9 = 0; loweredIndex9 < js2xml.getElements(responseDoc, appSettingsSequenceElement, 'NAMEVALUEPAIR', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex9 = loweredIndex9 + 1) {
                var appSettingsElement = js2xml.getElements(responseDoc, appSettingsSequenceElement, 'NAMEVALUEPAIR', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex9];
                var appSettingsKey = js2xml.getElement(responseDoc, appSettingsElement, 'NAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                var appSettingsValue = js2xml.getElement(responseDoc, appSettingsElement, 'VALUE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                sitePropertiesInstance.appSettings[appSettingsKey] = appSettingsValue;
              }
            }
            
            var metadataSequenceElement = js2xml.getElement(responseDoc, sitePropertiesElement, 'METADATA', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (metadataSequenceElement) {
              for (var loweredIndex10 = 0; loweredIndex10 < js2xml.getElements(responseDoc, metadataSequenceElement, 'NAMEVALUEPAIR', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex10 = loweredIndex10 + 1) {
                var metadataElement = js2xml.getElements(responseDoc, metadataSequenceElement, 'NAMEVALUEPAIR', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex10];
                var metadataKey = js2xml.getElement(responseDoc, metadataElement, 'NAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                var metadataValue = js2xml.getElement(responseDoc, metadataElement, 'VALUE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                sitePropertiesInstance.metadata[metadataKey] = metadataValue;
              }
            }
            
            var propertiesSequenceElement = js2xml.getElement(responseDoc, sitePropertiesElement, 'PROPERTIES', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (propertiesSequenceElement) {
              for (var loweredIndex11 = 0; loweredIndex11 < js2xml.getElements(responseDoc, propertiesSequenceElement, 'NAMEVALUEPAIR', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex11 = loweredIndex11 + 1) {
                var propertiesElement = js2xml.getElements(responseDoc, propertiesSequenceElement, 'NAMEVALUEPAIR', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex11];
                var propertiesKey = js2xml.getElement(responseDoc, propertiesElement, 'NAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                var propertiesValue = js2xml.getElement(responseDoc, propertiesElement, 'VALUE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                sitePropertiesInstance.properties[propertiesKey] = propertiesValue;
              }
            }
          }
          
          var stateElement2 = js2xml.getElement(responseDoc, siteElement2, 'STATE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (stateElement2) {
            var stateInstance = stateElement2;
            webSiteInstance.state = stateInstance;
          }
          
          var usageStateElement = js2xml.getElement(responseDoc, siteElement2, 'USAGESTATE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (usageStateElement) {
            var usageStateInstance = usageStateElement;
            webSiteInstance.usageState = usageStateInstance;
          }
          
          var webSpaceElement = js2xml.getElement(responseDoc, siteElement2, 'WEBSPACE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (webSpaceElement) {
            var webSpaceInstance = webSpaceElement;
            webSiteInstance.webSpace = webSpaceInstance;
          }
        }
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * You can restart a web site by issuing an HTTP POST request.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/dn236425.aspx for
   * more information)
   *
   * @param {String} webSpaceName - The name of the web space.
   *
   * @param {String} webSiteName - The name of the web site.
   *
   * @param {Function} callback
   *
   * @returns {OperationResponse} - A standard service response including an
   * HTTP status code and request ID.
   */
  WebSiteOperations.prototype.restart = function(webSpaceName, webSiteName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (webSpaceName === null || webSpaceName === undefined) {
      return callback(new Error('webSpaceName cannot be null.'));
    }
    if (webSiteName === null || webSiteName === undefined) {
      return callback(new Error('webSiteName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/WebSpaces/' + webSpaceName + '/sites/' + webSiteName + '/restart';
    
    // Create HTTP transport objects
    var httpRequest = {};
    httpRequest.method = 'POST';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['Content-Length'] = '0';
    httpRequest.headers['x-ms-version'] = '2013-03-01';
    
    // Set Credentials
    httpRequest.key = this.client.credentials.keyvalue;
    httpRequest.cert = this.client.credentials.certvalue;
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * You can delete a web site by issuing an HTTP DELETE request. If the web
   * site being deleted is the only site remaining in a server farm, you can
   * optionally delete the server farm as well by using the
   * deleteEmptyServerFarm parameter.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/dn236430.aspx for
   * more information)
   *
   * @param {String} webSpaceName - The name of the web space.
   *
   * @param {String} webSiteName - The name of the web site.
   *
   * @param {Boolean} deleteEmptyServerFarm - If the site being deleted is the
   * last web site in a server farm, you can delete the server farm.
   *
   * @param {Boolean} deleteMetrics - Delete the metrics for the site that you
   * are deleting
   *
   * @param {Function} callback
   *
   * @returns {OperationResponse} - A standard service response including an
   * HTTP status code and request ID.
   */
  WebSiteOperations.prototype.delete = function(webSpaceName, webSiteName, deleteEmptyServerFarm, deleteMetrics, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (webSpaceName === null || webSpaceName === undefined) {
      return callback(new Error('webSpaceName cannot be null.'));
    }
    if (webSiteName === null || webSiteName === undefined) {
      return callback(new Error('webSiteName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/WebSpaces/' + webSpaceName + '/sites/' + webSiteName + '?';
    url2 = url2 + '&deleteEmptyServerFarm=' + encodeURIComponent(deleteEmptyServerFarm.toString());
    url2 = url2 + '&deleteMetrics=' + encodeURIComponent(deleteMetrics.toString());
    
    // Create HTTP transport objects
    var httpRequest = {};
    httpRequest.method = 'DELETE';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2013-03-01';
    
    // Set Credentials
    httpRequest.key = this.client.credentials.keyvalue;
    httpRequest.cert = this.client.credentials.certvalue;
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * A web site repository is essentially a GIT repository that you can use to
   * manage your web site content. By using GIT source control tools, you can
   * push or pull version controlled changes to your site. You can create a
   * repository for your web site by issuing an HTTP POST request, or retrieve
   * information about the repository by using HTTP GET.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/dn166967.aspx for
   * more information)
   *
   * @param {String} webSpaceName - The name of the web space.
   *
   * @param {String} webSiteName - The name of the web site.
   *
   * @param {Function} callback
   *
   * @returns {WebSiteCreateRepositoryResponse} - The Create Web Site
   * Repository operation response.
   */
  WebSiteOperations.prototype.createRepository = function(webSpaceName, webSiteName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (webSpaceName === null || webSpaceName === undefined) {
      return callback(new Error('webSpaceName cannot be null.'));
    }
    if (webSiteName === null || webSiteName === undefined) {
      return callback(new Error('webSiteName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/WebSpaces/' + webSpaceName + '/sites/' + webSiteName + '/repository';
    
    // Create HTTP transport objects
    var httpRequest = {};
    httpRequest.method = 'POST';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['Content-Length'] = '0';
    httpRequest.headers['x-ms-version'] = '2013-03-01';
    
    // Set Credentials
    httpRequest.key = this.client.credentials.keyvalue;
    httpRequest.cert = this.client.credentials.certvalue;
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var anyURIElement = js2xml.getElement(responseDoc, responseDoc, 'ANYURI', 'HTTP://SCHEMAS.MICROSOFT.COM/2003/10/SERIALIZATION/');
        if (anyURIElement) {
          result.Uri = anyURIElement;
        }
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * A web site repository is essentially a GIT repository that you can use to
   * manage your web site content. By using GIT source control tools, you can
   * push or pull version controlled changes to your site. You can create a
   * repository for your web site by issuing an HTTP POST request, or retrieve
   * information about the repository by using HTTP GET.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/dn166967.aspx for
   * more information)
   *
   * @param {String} webSpaceName - The name of the web space.
   *
   * @param {String} webSiteName - The name of the web site.
   *
   * @param {Function} callback
   *
   * @returns {WebSiteGetRepositoryResponse} - The Get Web Site Repository
   * operation response.
   */
  WebSiteOperations.prototype.getRepository = function(webSpaceName, webSiteName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (webSpaceName === null || webSpaceName === undefined) {
      return callback(new Error('webSpaceName cannot be null.'));
    }
    if (webSiteName === null || webSiteName === undefined) {
      return callback(new Error('webSiteName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/WebSpaces/' + webSpaceName + '/sites/' + webSiteName + '/repository';
    
    // Create HTTP transport objects
    var httpRequest = {};
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2013-03-01';
    
    // Set Credentials
    httpRequest.key = this.client.credentials.keyvalue;
    httpRequest.cert = this.client.credentials.certvalue;
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var anyURIElement = js2xml.getElement(responseDoc, responseDoc, 'ANYURI', 'HTTP://SCHEMAS.MICROSOFT.COM/2003/10/SERIALIZATION/');
        if (anyURIElement) {
          result.Uri = anyURIElement;
        }
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * You can generate a new random password for publishing a site by issuing an
   * HTTP POST request.  Tip: If you want to verify that the publish password
   * has changed, call HTTP GET on /publishxml before calling /newpassword. In
   * the publish XML, note the hash value in the userPWD attribute. After
   * calling /newpassword, call /publishxml again. You can then compare the
   * new value of userPWD in the Publish XML with the one you noted earlier.
   * (see http://msdn.microsoft.com/en-us/library/windowsazure/dn236428.aspx
   * for more information)
   *
   * @param {String} webSpaceName - The name of the web space.
   *
   * @param {String} webSiteName - The name of the web site.
   *
   * @param {Function} callback
   *
   * @returns {OperationResponse} - A standard service response including an
   * HTTP status code and request ID.
   */
  WebSiteOperations.prototype.generatePassword = function(webSpaceName, webSiteName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (webSpaceName === null || webSpaceName === undefined) {
      return callback(new Error('webSpaceName cannot be null.'));
    }
    if (webSiteName === null || webSiteName === undefined) {
      return callback(new Error('webSiteName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/WebSpaces/' + webSpaceName + '/sites/' + webSiteName + '/newpassword';
    
    // Create HTTP transport objects
    var httpRequest = {};
    httpRequest.method = 'POST';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['Content-Length'] = '0';
    httpRequest.headers['x-ms-version'] = '2013-03-01';
    
    // Set Credentials
    httpRequest.key = this.client.credentials.keyvalue;
    httpRequest.cert = this.client.credentials.certvalue;
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * You can retrieve the publish settings information for a web site by
   * issuing an HTTP GET request.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/dn166996.aspx for
   * more information)
   *
   * @param {String} webSpaceName - The name of the web space.
   *
   * @param {String} webSiteName - The name of the web site.
   *
   * @param {Function} callback
   *
   * @returns {WebSiteGetPublishProfileResponse} - The Get Web Site Publish
   * Profile operation response.
   */
  WebSiteOperations.prototype.getPublishProfile = function(webSpaceName, webSiteName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (webSpaceName === null || webSpaceName === undefined) {
      return callback(new Error('webSpaceName cannot be null.'));
    }
    if (webSiteName === null || webSiteName === undefined) {
      return callback(new Error('webSiteName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/WebSpaces/' + webSpaceName + '/sites/' + webSiteName + '/publishxml';
    
    // Create HTTP transport objects
    var httpRequest = {};
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2013-03-01';
    
    // Set Credentials
    httpRequest.key = this.client.credentials.keyvalue;
    httpRequest.cert = this.client.credentials.certvalue;
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = { publishProfiles: [] };
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var publishDataElement = js2xml.getElement(responseDoc, responseDoc, 'PUBLISHDATA', '');
        if (publishDataElement) {
          if (publishDataElement) {
            for (var loweredIndex1 = 0; loweredIndex1 < js2xml.getElements(responseDoc, publishDataElement, 'PUBLISHPROFILE', '').length; loweredIndex1 = loweredIndex1 + 1) {
              var publishProfilesElement = js2xml.getElements(responseDoc, publishDataElement, 'PUBLISHPROFILE', '')[loweredIndex1];
              var publishProfileInstance = { databases: [] };
              result.publishProfiles.push(publishProfileInstance);
              
              var profileNameAttribute = js2xml.getAttribute(responseDoc, publishProfilesElement, 'PROFILENAME', '');
              if (profileNameAttribute) {
                publishProfileInstance.profileName = profileNameAttribute;
              }
              
              var publishMethodAttribute = js2xml.getAttribute(responseDoc, publishProfilesElement, 'PUBLISHMETHOD', '');
              if (publishMethodAttribute) {
                publishProfileInstance.publishMethod = publishMethodAttribute;
              }
              
              var publishUrlAttribute = js2xml.getAttribute(responseDoc, publishProfilesElement, 'PUBLISHURL', '');
              if (publishUrlAttribute) {
                publishProfileInstance.publishUrl = publishUrlAttribute;
              }
              
              var msdeploySiteAttribute = js2xml.getAttribute(responseDoc, publishProfilesElement, 'MSDEPLOYSITE', '');
              if (msdeploySiteAttribute) {
                publishProfileInstance.mSDeploySite = msdeploySiteAttribute;
              }
              
              var ftpPassiveModeAttribute = js2xml.getAttribute(responseDoc, publishProfilesElement, 'FTPPASSIVEMODE', '');
              if (ftpPassiveModeAttribute) {
                publishProfileInstance.ftpPassiveMode = ftpPassiveModeAttribute;
              }
              
              var userNameAttribute = js2xml.getAttribute(responseDoc, publishProfilesElement, 'USERNAME', '');
              if (userNameAttribute) {
                publishProfileInstance.userName = userNameAttribute;
              }
              
              var userPWDAttribute = js2xml.getAttribute(responseDoc, publishProfilesElement, 'USERPWD', '');
              if (userPWDAttribute) {
                publishProfileInstance.userPassword = userPWDAttribute;
              }
              
              var destinationAppUrlAttribute = js2xml.getAttribute(responseDoc, publishProfilesElement, 'DESTINATIONAPPURL', '');
              if (destinationAppUrlAttribute) {
                publishProfileInstance.destinationAppUri = destinationAppUrlAttribute;
              }
              
              var sQLServerDBConnectionStringAttribute = js2xml.getAttribute(responseDoc, publishProfilesElement, 'SQLSERVERDBCONNECTIONSTRING', '');
              if (sQLServerDBConnectionStringAttribute) {
                publishProfileInstance.sqlServerConnectionString = sQLServerDBConnectionStringAttribute;
              }
              
              var mySQLDBConnectionStringAttribute = js2xml.getAttribute(responseDoc, publishProfilesElement, 'MYSQLDBCONNECTIONSTRING', '');
              if (mySQLDBConnectionStringAttribute) {
                publishProfileInstance.mySqlConnectionString = mySQLDBConnectionStringAttribute;
              }
              
              var hostingProviderForumLinkAttribute = js2xml.getAttribute(responseDoc, publishProfilesElement, 'HOSTINGPROVIDERFORUMLINK', '');
              if (hostingProviderForumLinkAttribute) {
                publishProfileInstance.hostingProviderForumUri = hostingProviderForumLinkAttribute;
              }
              
              var controlPanelLinkAttribute = js2xml.getAttribute(responseDoc, publishProfilesElement, 'CONTROLPANELLINK', '');
              if (controlPanelLinkAttribute) {
                publishProfileInstance.controlPanelUri = controlPanelLinkAttribute;
              }
              
              var databasesSequenceElement = js2xml.getElement(responseDoc, publishProfilesElement, 'DATABASES', '');
              if (databasesSequenceElement) {
                for (var loweredIndex2 = 0; loweredIndex2 < js2xml.getElements(responseDoc, databasesSequenceElement, 'ADD', '').length; loweredIndex2 = loweredIndex2 + 1) {
                  var databasesElement = js2xml.getElements(responseDoc, databasesSequenceElement, 'ADD', '')[loweredIndex2];
                  var addInstance = {};
                  publishProfileInstance.databases.push(addInstance);
                  
                  var nameAttribute = js2xml.getAttribute(responseDoc, databasesElement, 'NAME', '');
                  if (nameAttribute) {
                    addInstance.name = nameAttribute;
                  }
                  
                  var connectionStringAttribute = js2xml.getAttribute(responseDoc, databasesElement, 'CONNECTIONSTRING', '');
                  if (connectionStringAttribute) {
                    addInstance.connectionString = connectionStringAttribute;
                  }
                  
                  var providerNameAttribute = js2xml.getAttribute(responseDoc, databasesElement, 'PROVIDERNAME', '');
                  if (providerNameAttribute) {
                    addInstance.providerName = providerNameAttribute;
                  }
                  
                  var typeAttribute = js2xml.getAttribute(responseDoc, databasesElement, 'TYPE', '');
                  if (typeAttribute) {
                    addInstance.type = typeAttribute;
                  }
                }
              }
            }
          }
        }
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * You can retrieve the config settings for a web site by issuing an HTTP GET
   * request, or update them by using HTTP PUT with a request body that
   * contains the settings to be updated.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/dn166985.aspx for
   * more information)
   *
   * @param {String} webSpaceName - The name of the web space.
   *
   * @param {String} webSiteName - The name of the web site.
   *
   * @param {Function} callback
   *
   * @returns {WebSiteGetConfigurationResponse} - The Get Web Site
   * Configuration operation response.
   */
  WebSiteOperations.prototype.getConfiguration = function(webSpaceName, webSiteName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (webSpaceName === null || webSpaceName === undefined) {
      return callback(new Error('webSpaceName cannot be null.'));
    }
    if (webSiteName === null || webSiteName === undefined) {
      return callback(new Error('webSiteName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/WebSpaces/' + webSpaceName + '/sites/' + webSiteName + '/config';
    
    // Create HTTP transport objects
    var httpRequest = {};
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2013-03-01';
    
    // Set Credentials
    httpRequest.key = this.client.credentials.keyvalue;
    httpRequest.cert = this.client.credentials.certvalue;
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = { connectionStrings: [], defaultDocuments: [], handlerMappings: [], appSettings: {}, metadata: {} };
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var siteConfigElement = js2xml.getElement(responseDoc, responseDoc, 'SITECONFIG', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
        if (siteConfigElement) {
          var appSettingsSequenceElement = js2xml.getElement(responseDoc, siteConfigElement, 'APPSETTINGS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (appSettingsSequenceElement) {
            for (var loweredIndex1 = 0; loweredIndex1 < js2xml.getElements(responseDoc, appSettingsSequenceElement, 'NAMEVALUEPAIR', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex1 = loweredIndex1 + 1) {
              var appSettingsElement = js2xml.getElements(responseDoc, appSettingsSequenceElement, 'NAMEVALUEPAIR', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex1];
              var appSettingsKey = js2xml.getElement(responseDoc, appSettingsElement, 'NAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              var appSettingsValue = js2xml.getElement(responseDoc, appSettingsElement, 'VALUE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              result.appSettings[appSettingsKey] = appSettingsValue;
            }
          }
          
          var connectionStringsSequenceElement = js2xml.getElement(responseDoc, siteConfigElement, 'CONNECTIONSTRINGS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (connectionStringsSequenceElement) {
            for (var loweredIndex2 = 0; loweredIndex2 < js2xml.getElements(responseDoc, connectionStringsSequenceElement, 'CONNSTRINGINFO', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex2 = loweredIndex2 + 1) {
              var connectionStringsElement = js2xml.getElements(responseDoc, connectionStringsSequenceElement, 'CONNSTRINGINFO', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex2];
              var connStringInfoInstance = {};
              result.connectionStrings.push(connStringInfoInstance);
              
              var connectionStringElement = js2xml.getElement(responseDoc, connectionStringsElement, 'CONNECTIONSTRING', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (connectionStringElement) {
                var connectionStringInstance = connectionStringElement;
                connStringInfoInstance.connectionString = connectionStringInstance;
              }
              
              var nameElement = js2xml.getElement(responseDoc, connectionStringsElement, 'NAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (nameElement) {
                var nameInstance = nameElement;
                connStringInfoInstance.name = nameInstance;
              }
              
              var typeElement = js2xml.getElement(responseDoc, connectionStringsElement, 'TYPE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (typeElement) {
                var typeInstance = typeElement;
                connStringInfoInstance.type = typeInstance;
              }
            }
          }
          
          var defaultDocumentsSequenceElement = js2xml.getElement(responseDoc, siteConfigElement, 'DEFAULTDOCUMENTS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (defaultDocumentsSequenceElement) {
            for (var loweredIndex3 = 0; loweredIndex3 < js2xml.getElements(responseDoc, defaultDocumentsSequenceElement, 'STRING', 'HTTP://SCHEMAS.MICROSOFT.COM/2003/10/SERIALIZATION/ARRAYS').length; loweredIndex3 = loweredIndex3 + 1) {
              var defaultDocumentsElement = js2xml.getElements(responseDoc, defaultDocumentsSequenceElement, 'STRING', 'HTTP://SCHEMAS.MICROSOFT.COM/2003/10/SERIALIZATION/ARRAYS')[loweredIndex3];
              result.defaultDocuments.push(defaultDocumentsElement);
            }
          }
          
          var detailedErrorLoggingEnabledElement = js2xml.getElement(responseDoc, siteConfigElement, 'DETAILEDERRORLOGGINGENABLED', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (detailedErrorLoggingEnabledElement) {
            var detailedErrorLoggingEnabledInstance = detailedErrorLoggingEnabledElement;
            result.detailedErrorLoggingEnabled = detailedErrorLoggingEnabledInstance;
          }
          
          var handlerMappingsSequenceElement = js2xml.getElement(responseDoc, siteConfigElement, 'HANDLERMAPPINGS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (handlerMappingsSequenceElement) {
            for (var loweredIndex4 = 0; loweredIndex4 < js2xml.getElements(responseDoc, handlerMappingsSequenceElement, 'HANDLERMAPPING', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex4 = loweredIndex4 + 1) {
              var handlerMappingsElement = js2xml.getElements(responseDoc, handlerMappingsSequenceElement, 'HANDLERMAPPING', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex4];
              var handlerMappingInstance = {};
              result.handlerMappings.push(handlerMappingInstance);
              
              var argumentsElement = js2xml.getElement(responseDoc, handlerMappingsElement, 'ARGUMENTS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (argumentsElement) {
                var argumentsInstance = argumentsElement;
                handlerMappingInstance.arguments = argumentsInstance;
              }
              
              var extensionElement = js2xml.getElement(responseDoc, handlerMappingsElement, 'EXTENSION', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (extensionElement) {
                var extensionInstance = extensionElement;
                handlerMappingInstance.extension = extensionInstance;
              }
              
              var scriptProcessorElement = js2xml.getElement(responseDoc, handlerMappingsElement, 'SCRIPTPROCESSOR', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (scriptProcessorElement) {
                var scriptProcessorInstance = scriptProcessorElement;
                handlerMappingInstance.scriptProcessor = scriptProcessorInstance;
              }
            }
          }
          
          var httpLoggingEnabledElement = js2xml.getElement(responseDoc, siteConfigElement, 'HTTPLOGGINGENABLED', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (httpLoggingEnabledElement) {
            var httpLoggingEnabledInstance = httpLoggingEnabledElement;
            result.httpLoggingEnabled = httpLoggingEnabledInstance;
          }
          
          var metadataSequenceElement = js2xml.getElement(responseDoc, siteConfigElement, 'METADATA', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (metadataSequenceElement) {
            for (var loweredIndex5 = 0; loweredIndex5 < js2xml.getElements(responseDoc, metadataSequenceElement, 'NAMEVALUEPAIR', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex5 = loweredIndex5 + 1) {
              var metadataElement = js2xml.getElements(responseDoc, metadataSequenceElement, 'NAMEVALUEPAIR', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex5];
              var metadataKey = js2xml.getElement(responseDoc, metadataElement, 'NAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              var metadataValue = js2xml.getElement(responseDoc, metadataElement, 'VALUE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              result.metadata[metadataKey] = metadataValue;
            }
          }
          
          var netFrameworkVersionElement = js2xml.getElement(responseDoc, siteConfigElement, 'NETFRAMEWORKVERSION', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (netFrameworkVersionElement) {
            var netFrameworkVersionInstance = netFrameworkVersionElement;
            result.netFrameworkVersion = netFrameworkVersionInstance;
          }
          
          var numberOfWorkersElement = js2xml.getElement(responseDoc, siteConfigElement, 'NUMBEROFWORKERS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (numberOfWorkersElement) {
            var numberOfWorkersInstance = parseInt(numberOfWorkersElement, 10);
            result.numberOfWorkers = numberOfWorkersInstance;
          }
          
          var phpVersionElement = js2xml.getElement(responseDoc, siteConfigElement, 'PHPVERSION', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (phpVersionElement) {
            var phpVersionInstance = phpVersionElement;
            result.phpVersion = phpVersionInstance;
          }
          
          var publishingPasswordElement = js2xml.getElement(responseDoc, siteConfigElement, 'PUBLISHINGPASSWORD', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (publishingPasswordElement) {
            var publishingPasswordInstance = publishingPasswordElement;
            result.publishingPassword = publishingPasswordInstance;
          }
          
          var publishingUserNameElement = js2xml.getElement(responseDoc, siteConfigElement, 'PUBLISHINGUSERNAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (publishingUserNameElement) {
            var publishingUserNameInstance = publishingUserNameElement;
            result.publishingUserName = publishingUserNameInstance;
          }
          
          var requestTracingEnabledElement = js2xml.getElement(responseDoc, siteConfigElement, 'REQUESTTRACINGENABLED', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (requestTracingEnabledElement) {
            var requestTracingEnabledInstance = requestTracingEnabledElement;
            result.requestTracingEnabled = requestTracingEnabledInstance;
          }
          
          var requestTracingExpirationTimeElement = js2xml.getElement(responseDoc, siteConfigElement, 'REQUESTTRACINGEXPIRATIONTIME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (requestTracingExpirationTimeElement && (requestTracingExpirationTimeElement === null || requestTracingExpirationTimeElement === undefined || requestTracingExpirationTimeElement.length === 0) === false) {
            var requestTracingExpirationTimeInstance = new Date(requestTracingExpirationTimeElement);
            result.requestTracingExpirationTime = requestTracingExpirationTimeInstance;
          }
          
          var scmTypeElement = js2xml.getElement(responseDoc, siteConfigElement, 'SCMTYPE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (scmTypeElement) {
            var scmTypeInstance = scmTypeElement;
            result.scmType = scmTypeInstance;
          }
          
          var use32BitWorkerProcessElement = js2xml.getElement(responseDoc, siteConfigElement, 'USE32BITWORKERPROCESS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (use32BitWorkerProcessElement) {
            var use32BitWorkerProcessInstance = use32BitWorkerProcessElement;
            result.use32BitWorkerProcess = use32BitWorkerProcessInstance;
          }
        }
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * You can retrieve the config settings for a web site by issuing an HTTP GET
   * request, or update them by using HTTP PUT with a request body that
   * contains the settings to be updated.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/dn166985.aspx for
   * more information)
   *
   * @param {String} webSpaceName - The name of the web space.
   *
   * @param {String} webSiteName - The name of the web site.
   *
   * @param {WebSiteUpdateConfigurationParameters} parameters - The Update Web
   * Site Configuration parameters.
   *
   * @param {Function} callback
   *
   * @returns {OperationResponse} - A standard service response including an
   * HTTP status code and request ID.
   */
  WebSiteOperations.prototype.updateConfiguration = function(webSpaceName, webSiteName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (webSpaceName === null || webSpaceName === undefined) {
      return callback(new Error('webSpaceName cannot be null.'));
    }
    if (webSiteName === null || webSiteName === undefined) {
      return callback(new Error('webSiteName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/WebSpaces/' + webSpaceName + '/sites/' + webSiteName + '/config';
    
    // Create HTTP transport objects
    var httpRequest = {};
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2013-03-01';
    httpRequest.headers['Content-Type'] = 'application/xml';
    
    // Set Credentials
    httpRequest.key = this.client.credentials.keyvalue;
    httpRequest.cert = this.client.credentials.certvalue;
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = {};
    
    var siteConfigElement = js2xml.createElement('SiteConfig', 'http://schemas.microsoft.com/windowsazure');
    js2xml.addChildElement(requestDoc, siteConfigElement);
    
    if (parameters.appSettings) {
      var appSettingsDictionaryElement = js2xml.createElement('AppSettings', 'http://schemas.microsoft.com/windowsazure');
      for (var appSettingsKey in parameters.appSettings) {
        var appSettingsValue = parameters.appSettings[appSettingsKey];
        var appSettingsElement = js2xml.createElement('NameValuePair', 'http://schemas.microsoft.com/windowsazure');
        js2xml.addChildElement(appSettingsDictionaryElement, appSettingsElement);
        
        var appSettingsKeyElement = js2xml.createElement('Name', 'http://schemas.microsoft.com/windowsazure');
        js2xml.setElementValue(appSettingsKeyElement, appSettingsKey);
        js2xml.addChildElement(appSettingsElement, appSettingsKeyElement);
        
        var appSettingsValueElement = js2xml.createElement('Value', 'http://schemas.microsoft.com/windowsazure');
        js2xml.setElementValue(appSettingsValueElement, appSettingsValue);
        js2xml.addChildElement(appSettingsElement, appSettingsValueElement);
      }
      js2xml.addChildElement(siteConfigElement, appSettingsDictionaryElement);
    }
    
    if (parameters.connectionStrings) {
      var connectionStringsSequenceElement = js2xml.createElement('ConnectionStrings', 'http://schemas.microsoft.com/windowsazure');
      for (var loweredIndex1 = 0; loweredIndex1 < parameters.connectionStrings.length; loweredIndex1 = loweredIndex1 + 1) {
        var connectionStringsItem = parameters.connectionStrings[loweredIndex1];
        var connStringInfoElement = js2xml.createElement('ConnStringInfo', 'http://schemas.microsoft.com/windowsazure');
        js2xml.addChildElement(connectionStringsSequenceElement, connStringInfoElement);
        
        if (connectionStringsItem.connectionString) {
          var connectionStringElement = js2xml.createElement('ConnectionString', 'http://schemas.microsoft.com/windowsazure');
          js2xml.setElementValue(connectionStringElement, connectionStringsItem.connectionString);
          js2xml.addChildElement(connStringInfoElement, connectionStringElement);
        }
        
        if (connectionStringsItem.name) {
          var nameElement = js2xml.createElement('Name', 'http://schemas.microsoft.com/windowsazure');
          js2xml.setElementValue(nameElement, connectionStringsItem.name);
          js2xml.addChildElement(connStringInfoElement, nameElement);
        }
        
        if (connectionStringsItem.type) {
          var typeElement = js2xml.createElement('Type', 'http://schemas.microsoft.com/windowsazure');
          js2xml.setElementValue(typeElement, connectionStringsItem.type);
          js2xml.addChildElement(connStringInfoElement, typeElement);
        }
      }
      js2xml.addChildElement(siteConfigElement, connectionStringsSequenceElement);
    }
    
    if (parameters.defaultDocuments) {
      var defaultDocumentsSequenceElement = js2xml.createElement('DefaultDocuments', 'http://schemas.microsoft.com/windowsazure');
      for (var loweredIndex2 = 0; loweredIndex2 < parameters.defaultDocuments.length; loweredIndex2 = loweredIndex2 + 1) {
        var defaultDocumentsItem = parameters.defaultDocuments[loweredIndex2];
        var defaultDocumentsItemElement = js2xml.createElement('string', 'http://schemas.microsoft.com/2003/10/Serialization/Arrays');
        js2xml.setElementValue(defaultDocumentsItemElement, defaultDocumentsItem);
        js2xml.addChildElement(defaultDocumentsSequenceElement, defaultDocumentsItemElement);
      }
      js2xml.addChildElement(siteConfigElement, defaultDocumentsSequenceElement);
    }
    
    if (parameters.detailedErrorLoggingEnabled) {
      var detailedErrorLoggingEnabledElement = js2xml.createElement('DetailedErrorLoggingEnabled', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(detailedErrorLoggingEnabledElement, parameters.detailedErrorLoggingEnabled.toString());
      js2xml.addChildElement(siteConfigElement, detailedErrorLoggingEnabledElement);
    }
    
    if (parameters.handlerMappings) {
      var handlerMappingsSequenceElement = js2xml.createElement('HandlerMappings', 'http://schemas.microsoft.com/windowsazure');
      for (var loweredIndex3 = 0; loweredIndex3 < parameters.handlerMappings.length; loweredIndex3 = loweredIndex3 + 1) {
        var handlerMappingsItem = parameters.handlerMappings[loweredIndex3];
        var handlerMappingElement = js2xml.createElement('HandlerMapping', 'http://schemas.microsoft.com/windowsazure');
        js2xml.addChildElement(handlerMappingsSequenceElement, handlerMappingElement);
        
        if (handlerMappingsItem.arguments) {
          var argumentsElement = js2xml.createElement('Arguments', 'http://schemas.microsoft.com/windowsazure');
          js2xml.setElementValue(argumentsElement, handlerMappingsItem.arguments);
          js2xml.addChildElement(handlerMappingElement, argumentsElement);
        }
        
        if (handlerMappingsItem.extension) {
          var extensionElement = js2xml.createElement('Extension', 'http://schemas.microsoft.com/windowsazure');
          js2xml.setElementValue(extensionElement, handlerMappingsItem.extension);
          js2xml.addChildElement(handlerMappingElement, extensionElement);
        }
        
        if (handlerMappingsItem.scriptProcessor) {
          var scriptProcessorElement = js2xml.createElement('ScriptProcessor', 'http://schemas.microsoft.com/windowsazure');
          js2xml.setElementValue(scriptProcessorElement, handlerMappingsItem.scriptProcessor);
          js2xml.addChildElement(handlerMappingElement, scriptProcessorElement);
        }
      }
      js2xml.addChildElement(siteConfigElement, handlerMappingsSequenceElement);
    }
    
    if (parameters.httpLoggingEnabled) {
      var httpLoggingEnabledElement = js2xml.createElement('HttpLoggingEnabled', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(httpLoggingEnabledElement, parameters.httpLoggingEnabled.toString());
      js2xml.addChildElement(siteConfigElement, httpLoggingEnabledElement);
    }
    
    if (parameters.metadata) {
      var metadataDictionaryElement = js2xml.createElement('Metadata', 'http://schemas.microsoft.com/windowsazure');
      for (var metadataKey in parameters.metadata) {
        var metadataValue = parameters.metadata[metadataKey];
        var metadataElement = js2xml.createElement('NameValuePair', 'http://schemas.microsoft.com/windowsazure');
        js2xml.addChildElement(metadataDictionaryElement, metadataElement);
        
        var metadataKeyElement = js2xml.createElement('Name', 'http://schemas.microsoft.com/windowsazure');
        js2xml.setElementValue(metadataKeyElement, metadataKey);
        js2xml.addChildElement(metadataElement, metadataKeyElement);
        
        var metadataValueElement = js2xml.createElement('Value', 'http://schemas.microsoft.com/windowsazure');
        js2xml.setElementValue(metadataValueElement, metadataValue);
        js2xml.addChildElement(metadataElement, metadataValueElement);
      }
      js2xml.addChildElement(siteConfigElement, metadataDictionaryElement);
    }
    
    if (parameters.netFrameworkVersion) {
      var netFrameworkVersionElement = js2xml.createElement('NetFrameworkVersion', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(netFrameworkVersionElement, parameters.netFrameworkVersion);
      js2xml.addChildElement(siteConfigElement, netFrameworkVersionElement);
    }
    
    if (parameters.numberOfWorkers) {
      var numberOfWorkersElement = js2xml.createElement('NumberOfWorkers', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(numberOfWorkersElement, parameters.numberOfWorkers.toString());
      js2xml.addChildElement(siteConfigElement, numberOfWorkersElement);
    }
    
    if (parameters.phpVersion) {
      var phpVersionElement = js2xml.createElement('PhpVersion', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(phpVersionElement, parameters.phpVersion);
      js2xml.addChildElement(siteConfigElement, phpVersionElement);
    }
    
    if (parameters.publishingPassword) {
      var publishingPasswordElement = js2xml.createElement('PublishingPassword', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(publishingPasswordElement, parameters.publishingPassword);
      js2xml.addChildElement(siteConfigElement, publishingPasswordElement);
    }
    
    if (parameters.publishingUserName) {
      var publishingUsernameElement = js2xml.createElement('PublishingUsername', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(publishingUsernameElement, parameters.publishingUserName);
      js2xml.addChildElement(siteConfigElement, publishingUsernameElement);
    }
    
    if (parameters.requestTracingEnabled) {
      var requestTracingEnabledElement = js2xml.createElement('RequestTracingEnabled', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(requestTracingEnabledElement, parameters.requestTracingEnabled.toString());
      js2xml.addChildElement(siteConfigElement, requestTracingEnabledElement);
    }
    
    if (parameters.requestTracingExpirationTime) {
      var requestTracingExpirationTimeElement = js2xml.createElement('RequestTracingExpirationTime', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(requestTracingExpirationTimeElement, parameters.requestTracingExpirationTime.toString());
      js2xml.addChildElement(siteConfigElement, requestTracingExpirationTimeElement);
    }
    
    if (parameters.scmType) {
      var scmTypeElement = js2xml.createElement('ScmType', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(scmTypeElement, parameters.scmType);
      js2xml.addChildElement(siteConfigElement, scmTypeElement);
    }
    
    if (parameters.use32BitWorkerProcess) {
      var use32BitWorkerProcessElement = js2xml.createElement('Use32BitWorkerProcess', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(use32BitWorkerProcessElement, parameters.use32BitWorkerProcess.toString());
      js2xml.addChildElement(siteConfigElement, use32BitWorkerProcessElement);
    }
    
    requestContent = js2xml.serializeDocument(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * You can retrieve a site's current usage metrics by issuing an HTTP GET
   * request. The metrics returned include CPU Time, Data In, Data Out, Local
   * bytes read, Local bytes written, Network bytes read, Network bytes
   * written, WP stop requests, Memory Usage, CPU Time - Minute Limit, and
   * File System Storage.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/dn166991.aspx for
   * more information)
   *
   * @param {String} webSpaceName - The name of the web space.
   *
   * @param {String} webSiteName - The name of the web site.
   *
   * @param {Function} callback
   *
   * @returns {WebSiteGetUsageMetricsResponse} - The Get Web Site Usage Metrics
   * operation response.
   */
  WebSiteOperations.prototype.getUsageMetrics = function(webSpaceName, webSiteName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (webSpaceName === null || webSpaceName === undefined) {
      return callback(new Error('webSpaceName cannot be null.'));
    }
    if (webSiteName === null || webSiteName === undefined) {
      return callback(new Error('webSiteName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/WebSpaces/' + webSpaceName + '/sites/' + webSiteName + '/usages';
    
    // Create HTTP transport objects
    var httpRequest = {};
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2013-03-01';
    
    // Set Credentials
    httpRequest.key = this.client.credentials.keyvalue;
    httpRequest.cert = this.client.credentials.certvalue;
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = { usageMetrics: [] };
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var usagesElement = js2xml.getElement(responseDoc, responseDoc, 'USAGES', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
        if (usagesElement) {
          if (usagesElement) {
            for (var loweredIndex1 = 0; loweredIndex1 < js2xml.getElements(responseDoc, usagesElement, 'USAGE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex1 = loweredIndex1 + 1) {
              var usageMetricsElement = js2xml.getElements(responseDoc, usagesElement, 'USAGE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex1];
              var usageInstance = {};
              result.usageMetrics.push(usageInstance);
              
              var computeModeElement = js2xml.getElement(responseDoc, usageMetricsElement, 'COMPUTEMODE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (computeModeElement) {
                var computeModeInstance = computeModeElement;
                usageInstance.computeMode = computeModeInstance;
              }
              
              var currentValueElement = js2xml.getElement(responseDoc, usageMetricsElement, 'CURRENTVALUE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (currentValueElement) {
                var currentValueInstance = currentValueElement;
                usageInstance.currentValue = currentValueInstance;
              }
              
              var displayNameElement = js2xml.getElement(responseDoc, usageMetricsElement, 'DISPLAYNAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (displayNameElement) {
                var displayNameInstance = displayNameElement;
                usageInstance.displayName = displayNameInstance;
              }
              
              var limitElement = js2xml.getElement(responseDoc, usageMetricsElement, 'LIMIT', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (limitElement) {
                var limitInstance = limitElement;
                usageInstance.limit = limitInstance;
              }
              
              var nameElement = js2xml.getElement(responseDoc, usageMetricsElement, 'NAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (nameElement) {
                var nameInstance = nameElement;
                usageInstance.name = nameInstance;
              }
              
              var nextResetTimeElement = js2xml.getElement(responseDoc, usageMetricsElement, 'NEXTRESETTIME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (nextResetTimeElement) {
                var nextResetTimeInstance = new Date(nextResetTimeElement);
                usageInstance.nextResetTime = nextResetTimeInstance;
              }
              
              var resourceNameElement = js2xml.getElement(responseDoc, usageMetricsElement, 'RESOURCENAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (resourceNameElement) {
                var resourceNameInstance = resourceNameElement;
                usageInstance.resourceName = resourceNameInstance;
              }
              
              var siteModeElement = js2xml.getElement(responseDoc, usageMetricsElement, 'SITEMODE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (siteModeElement) {
                var siteModeInstance = siteModeElement;
                usageInstance.siteMode = siteModeInstance;
              }
              
              var unitElement = js2xml.getElement(responseDoc, usageMetricsElement, 'UNIT', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (unitElement) {
                var unitInstance = unitElement;
                usageInstance.unit = unitInstance;
              }
            }
          }
        }
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * You can retrieve historical usage metrics for a site by issuing an HTTP
   * GET request.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/dn166964.aspx for
   * more information)
   *
   * @param {String} webSpaceName - The name of the web space.
   *
   * @param {String} webSiteName - The name of the web site.
   *
   * @param {WebSiteGetHistoricalUsageMetricsParameters} parameters - The Get
   * Web Site Historical Usage Metrics parameters.
   *
   * @param {Function} callback
   *
   * @returns {WebSiteGetHistoricalUsageMetricsResponse} - The Get Web Site
   * Historical Usage Metrics operation response.
   */
  WebSiteOperations.prototype.getHistoricalUsageMetrics = function(webSpaceName, webSiteName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (webSpaceName === null || webSpaceName === undefined) {
      return callback(new Error('webSpaceName cannot be null.'));
    }
    if (webSiteName === null || webSiteName === undefined) {
      return callback(new Error('webSiteName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/WebSpaces/' + webSpaceName + '/sites/' + webSiteName + '/metrics?';
    if (parameters.metricNames && parameters.metricNames.length > 0) {
      url2 = url2 + '&names=' + encodeURIComponent(parameters.metricNames.join(','));
    }
    if (parameters.startTime) {
      url2 = url2 + '&StartTime=' + encodeURIComponent(parameters.startTime.toString());
    }
    if (parameters.endTime) {
      url2 = url2 + '&EndTime=' + encodeURIComponent(parameters.endTime.toString());
    }
    
    // Create HTTP transport objects
    var httpRequest = {};
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2013-03-01';
    
    // Set Credentials
    httpRequest.key = this.client.credentials.keyvalue;
    httpRequest.cert = this.client.credentials.certvalue;
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = { usageMetrics: [] };
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var metricResponsesElement = js2xml.getElement(responseDoc, responseDoc, 'METRICRESPONSES', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
        if (metricResponsesElement) {
          if (metricResponsesElement) {
            for (var loweredIndex1 = 0; loweredIndex1 < js2xml.getElements(responseDoc, metricResponsesElement, 'METRICRESPONSE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex1 = loweredIndex1 + 1) {
              var usageMetricsElement = js2xml.getElements(responseDoc, metricResponsesElement, 'METRICRESPONSE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex1];
              var metricResponseInstance = {};
              result.usageMetrics.push(metricResponseInstance);
              
              var codeElement = js2xml.getElement(responseDoc, usageMetricsElement, 'CODE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (codeElement) {
                var codeInstance = codeElement;
                metricResponseInstance.code = codeInstance;
              }
              
              var dataElement = js2xml.getElement(responseDoc, usageMetricsElement, 'DATA', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (dataElement) {
                var dataInstance = { values: [] };
                metricResponseInstance.data = dataInstance;
                
                var displayNameElement = js2xml.getElement(responseDoc, dataElement, 'DISPLAYNAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                if (displayNameElement) {
                  var displayNameInstance = displayNameElement;
                  dataInstance.displayName = displayNameInstance;
                }
                
                var endTimeElement = js2xml.getElement(responseDoc, dataElement, 'ENDTIME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                if (endTimeElement) {
                  var endTimeInstance = new Date(endTimeElement);
                  dataInstance.endTime = endTimeInstance;
                }
                
                var nameElement = js2xml.getElement(responseDoc, dataElement, 'NAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                if (nameElement) {
                  var nameInstance = nameElement;
                  dataInstance.name = nameInstance;
                }
                
                var primaryAggregationTypeElement = js2xml.getElement(responseDoc, dataElement, 'PRIMARYAGGREGATIONTYPE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                if (primaryAggregationTypeElement) {
                  var primaryAggregationTypeInstance = primaryAggregationTypeElement;
                  dataInstance.primaryAggregationType = primaryAggregationTypeInstance;
                }
                
                var startTimeElement = js2xml.getElement(responseDoc, dataElement, 'STARTTIME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                if (startTimeElement) {
                  var startTimeInstance = new Date(startTimeElement);
                  dataInstance.startTime = startTimeInstance;
                }
                
                var timeGrainElement = js2xml.getElement(responseDoc, dataElement, 'TIMEGRAIN', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                if (timeGrainElement) {
                  var timeGrainInstance = timeGrainElement;
                  dataInstance.timeGrain = timeGrainInstance;
                }
                
                var unitElement = js2xml.getElement(responseDoc, dataElement, 'UNIT', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                if (unitElement) {
                  var unitInstance = unitElement;
                  dataInstance.unit = unitInstance;
                }
                
                var valuesSequenceElement = js2xml.getElement(responseDoc, dataElement, 'VALUES', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                if (valuesSequenceElement) {
                  for (var loweredIndex2 = 0; loweredIndex2 < js2xml.getElements(responseDoc, valuesSequenceElement, 'METRICSAMPLE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex2 = loweredIndex2 + 1) {
                    var valuesElement = js2xml.getElements(responseDoc, valuesSequenceElement, 'METRICSAMPLE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex2];
                    var metricSampleInstance = {};
                    dataInstance.values.push(metricSampleInstance);
                    
                    var countElement = js2xml.getElement(responseDoc, valuesElement, 'COUNT', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                    if (countElement) {
                      var countInstance = parseInt(countElement, 10);
                      metricSampleInstance.count = countInstance;
                    }
                    
                    var maximumElement = js2xml.getElement(responseDoc, valuesElement, 'MAXIMUM', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                    if (maximumElement) {
                      var maximumInstance = maximumElement;
                      metricSampleInstance.maximum = maximumInstance;
                    }
                    
                    var minimumElement = js2xml.getElement(responseDoc, valuesElement, 'MINIMUM', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                    if (minimumElement) {
                      var minimumInstance = minimumElement;
                      metricSampleInstance.minimum = minimumInstance;
                    }
                    
                    var timeCreatedElement = js2xml.getElement(responseDoc, valuesElement, 'TIMECREATED', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                    if (timeCreatedElement) {
                      var timeCreatedInstance = new Date(timeCreatedElement);
                      metricSampleInstance.timeCreated = timeCreatedInstance;
                    }
                    
                    var totalElement = js2xml.getElement(responseDoc, valuesElement, 'TOTAL', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                    if (totalElement) {
                      var totalInstance = totalElement;
                      metricSampleInstance.total = totalInstance;
                    }
                  }
                }
              }
              
              var messageElement = js2xml.getElement(responseDoc, usageMetricsElement, 'MESSAGE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (messageElement) {
                var messageInstance = messageElement;
                metricResponseInstance.message = messageInstance;
              }
            }
          }
        }
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * A web site repository is essentially a GIT repository that you can use to
   * manage your web site content. By using GIT source control tools, you can
   * push or pull version controlled changes to your site. You can create a
   * repository for your web site by issuing an HTTP POST request, or retrieve
   * information about the repository by using HTTP GET.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/dn166967.aspx for
   * more information)
   *
   * @param {String} webSpaceName - The name of the web space.
   *
   * @param {String} webSiteName - The name of the web site.
   *
   * @param {Function} callback
   *
   * @returns {WebSiteDeleteRepositoryResponse} - The Delete Web Site
   * Repository operation response.
   */
  WebSiteOperations.prototype.deleteRepository = function(webSpaceName, webSiteName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (webSpaceName === null || webSpaceName === undefined) {
      return callback(new Error('webSpaceName cannot be null.'));
    }
    if (webSiteName === null || webSiteName === undefined) {
      return callback(new Error('webSiteName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/WebSpaces/' + webSpaceName + '/sites/' + webSiteName + '/repository';
    
    // Create HTTP transport objects
    var httpRequest = {};
    httpRequest.method = 'DELETE';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2013-03-01';
    
    // Set Credentials
    httpRequest.key = this.client.credentials.keyvalue;
    httpRequest.cert = this.client.credentials.certvalue;
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var anyURIElement = js2xml.getElement(responseDoc, responseDoc, 'ANYURI', 'HTTP://SCHEMAS.MICROSOFT.COM/2003/10/SERIALIZATION/');
        if (anyURIElement) {
          result.Uri = anyURIElement;
        }
        
        return callback(null, result);
      });
    });
  };
  
  return WebSiteOperations;
})();

/**
 * Operations for managing web spaces beneath your subscription.
 */
var WebSpaceOperations = (function() {
  /**
   * Initializes a new instance of the WebSpaceOperations class.
   *
   * @constructor
   *
   * @param {WebSiteManagementClient} client - Reference to the service client.
   */
  function WebSpaceOperations(client) {
    this.client = client;
  }
  
  /**
   * Get the dns suffix for this subscription.
   *
   * @param {Function} callback
   *
   * @returns {WebSpacesGetDnsSuffixResponse} - The Get DNS Suffix operation
   * response.
   */
  WebSpaceOperations.prototype.getDnsSuffix = function(callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/WebSpaces?properties=dnssuffix';
    
    // Create HTTP transport objects
    var httpRequest = {};
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2013-03-01';
    
    // Set Credentials
    httpRequest.key = this.client.credentials.keyvalue;
    httpRequest.cert = this.client.credentials.certvalue;
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var stringElement = js2xml.getElement(responseDoc, responseDoc, 'STRING', 'HTTP://SCHEMAS.MICROSOFT.COM/2003/10/SERIALIZATION/');
        if (stringElement) {
          result.DnsSuffix = stringElement;
        }
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * You can list the webspaces under the current subscription by issuing a GET
   * request.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/dn166961.aspx for
   * more information)
   *
   * @param {Function} callback
   *
   * @returns {WebSpacesListResponse} - The List Web Spaces operation response.
   */
  WebSpaceOperations.prototype.list = function(callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/WebSpaces';
    
    // Create HTTP transport objects
    var httpRequest = {};
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2013-03-01';
    
    // Set Credentials
    httpRequest.key = this.client.credentials.keyvalue;
    httpRequest.cert = this.client.credentials.certvalue;
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = { webSpaces: [] };
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var webSpacesSequenceElement = js2xml.getElement(responseDoc, responseDoc, 'WEBSPACES', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
        if (webSpacesSequenceElement) {
          for (var loweredIndex1 = 0; loweredIndex1 < js2xml.getElements(responseDoc, webSpacesSequenceElement, 'WEBSPACE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex1 = loweredIndex1 + 1) {
            var webSpacesElement = js2xml.getElements(responseDoc, webSpacesSequenceElement, 'WEBSPACE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex1];
            var webSpaceInstance = {};
            result.webSpaces.push(webSpaceInstance);
            
            var availabilityStateElement = js2xml.getElement(responseDoc, webSpacesElement, 'AVAILABILITYSTATE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (availabilityStateElement) {
              var availabilityStateInstance = availabilityStateElement;
              webSpaceInstance.availabilityState = availabilityStateInstance;
            }
            
            var currentNumberOfWorkersElement = js2xml.getElement(responseDoc, webSpacesElement, 'CURRENTNUMBEROFWORKERS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (currentNumberOfWorkersElement && (currentNumberOfWorkersElement === null || currentNumberOfWorkersElement === undefined || currentNumberOfWorkersElement.length === 0) === false) {
              var currentNumberOfWorkersInstance = parseInt(currentNumberOfWorkersElement, 10);
              webSpaceInstance.currentNumberOfWorkers = currentNumberOfWorkersInstance;
            }
            
            var currentWorkerSizeElement = js2xml.getElement(responseDoc, webSpacesElement, 'CURRENTWORKERSIZE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (currentWorkerSizeElement && (currentWorkerSizeElement === null || currentWorkerSizeElement === undefined || currentWorkerSizeElement.length === 0) === false) {
              var currentWorkerSizeInstance = currentWorkerSizeElement;
              webSpaceInstance.currentWorkerSize = currentWorkerSizeInstance;
            }
            
            var geoLocationElement = js2xml.getElement(responseDoc, webSpacesElement, 'GEOLOCATION', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (geoLocationElement) {
              var geoLocationInstance = geoLocationElement;
              webSpaceInstance.geoLocation = geoLocationInstance;
            }
            
            var geoRegionElement = js2xml.getElement(responseDoc, webSpacesElement, 'GEOREGION', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (geoRegionElement) {
              var geoRegionInstance = geoRegionElement;
              webSpaceInstance.geoRegion = geoRegionInstance;
            }
            
            var nameElement = js2xml.getElement(responseDoc, webSpacesElement, 'NAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (nameElement) {
              var nameInstance = nameElement;
              webSpaceInstance.name = nameInstance;
            }
            
            var planElement = js2xml.getElement(responseDoc, webSpacesElement, 'PLAN', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (planElement) {
              var planInstance = planElement;
              webSpaceInstance.plan = planInstance;
            }
            
            var statusElement = js2xml.getElement(responseDoc, webSpacesElement, 'STATUS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (statusElement) {
              var statusInstance = statusElement;
              webSpaceInstance.status = statusInstance;
            }
            
            var subscriptionElement = js2xml.getElement(responseDoc, webSpacesElement, 'SUBSCRIPTION', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (subscriptionElement) {
              var subscriptionInstance = subscriptionElement;
              webSpaceInstance.subscription = subscriptionInstance;
            }
            
            var workerSizeElement = js2xml.getElement(responseDoc, webSpacesElement, 'WORKERSIZE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (workerSizeElement && (workerSizeElement === null || workerSizeElement === undefined || workerSizeElement.length === 0) === false) {
              var workerSizeInstance = workerSizeElement;
              webSpaceInstance.workerSize = workerSizeInstance;
            }
          }
        }
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * You can retrieve details for a specified webspace name by issuing an HTTP
   * GET request.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/dn167017.aspx for
   * more information)
   *
   * @param {String} webSpaceName - The name of the web space.
   *
   * @param {Function} callback
   *
   * @returns {WebSpacesGetResponse} - The Get Web Space Details operation
   * response.
   */
  WebSpaceOperations.prototype.get = function(webSpaceName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (webSpaceName === null || webSpaceName === undefined) {
      return callback(new Error('webSpaceName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/WebSpaces/' + webSpaceName;
    
    // Create HTTP transport objects
    var httpRequest = {};
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2013-03-01';
    
    // Set Credentials
    httpRequest.key = this.client.credentials.keyvalue;
    httpRequest.cert = this.client.credentials.certvalue;
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var webSpacesElement = js2xml.getElement(responseDoc, responseDoc, 'WEBSPACES', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
        if (webSpacesElement) {
          var availabilityStateElement = js2xml.getElement(responseDoc, webSpacesElement, 'AVAILABILITYSTATE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (availabilityStateElement) {
            var availabilityStateInstance = availabilityStateElement;
            result.availabilityState = availabilityStateInstance;
          }
          
          var currentNumberOfWorkersElement = js2xml.getElement(responseDoc, webSpacesElement, 'CURRENTNUMBEROFWORKERS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (currentNumberOfWorkersElement && (currentNumberOfWorkersElement === null || currentNumberOfWorkersElement === undefined || currentNumberOfWorkersElement.length === 0) === false) {
            var currentNumberOfWorkersInstance = parseInt(currentNumberOfWorkersElement, 10);
            result.currentNumberOfWorkers = currentNumberOfWorkersInstance;
          }
          
          var currentWorkerSizeElement = js2xml.getElement(responseDoc, webSpacesElement, 'CURRENTWORKERSIZE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (currentWorkerSizeElement && (currentWorkerSizeElement === null || currentWorkerSizeElement === undefined || currentWorkerSizeElement.length === 0) === false) {
            var currentWorkerSizeInstance = currentWorkerSizeElement;
            result.currentWorkerSize = currentWorkerSizeInstance;
          }
          
          var geoLocationElement = js2xml.getElement(responseDoc, webSpacesElement, 'GEOLOCATION', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (geoLocationElement) {
            var geoLocationInstance = geoLocationElement;
            result.geoLocation = geoLocationInstance;
          }
          
          var geoRegionElement = js2xml.getElement(responseDoc, webSpacesElement, 'GEOREGION', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (geoRegionElement) {
            var geoRegionInstance = geoRegionElement;
            result.geoRegion = geoRegionInstance;
          }
          
          var nameElement = js2xml.getElement(responseDoc, webSpacesElement, 'NAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (nameElement) {
            var nameInstance = nameElement;
            result.name = nameInstance;
          }
          
          var planElement = js2xml.getElement(responseDoc, webSpacesElement, 'PLAN', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (planElement) {
            var planInstance = planElement;
            result.plan = planInstance;
          }
          
          var statusElement = js2xml.getElement(responseDoc, webSpacesElement, 'STATUS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (statusElement) {
            var statusInstance = statusElement;
            result.status = statusInstance;
          }
          
          var subscriptionElement = js2xml.getElement(responseDoc, webSpacesElement, 'SUBSCRIPTION', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (subscriptionElement) {
            var subscriptionInstance = subscriptionElement;
            result.subscription = subscriptionInstance;
          }
          
          var workerSizeElement = js2xml.getElement(responseDoc, webSpacesElement, 'WORKERSIZE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (workerSizeElement && (workerSizeElement === null || workerSizeElement === undefined || workerSizeElement.length === 0) === false) {
            var workerSizeInstance = workerSizeElement;
            result.workerSize = workerSizeInstance;
          }
        }
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * Get the source control users allowed to publish to this web space.
   *
   * @param {Function} callback
   *
   * @returns {WebSpacesListPublishingUsersResponse} - The List Publishing
   * Users operation response.
   */
  WebSpaceOperations.prototype.listPublishingUsers = function(callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/WebSpaces?properties=publishingUsers';
    
    // Create HTTP transport objects
    var httpRequest = {};
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2013-03-01';
    
    // Set Credentials
    httpRequest.key = this.client.credentials.keyvalue;
    httpRequest.cert = this.client.credentials.certvalue;
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = { users: [] };
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var arrayOfstringSequenceElement = js2xml.getElement(responseDoc, responseDoc, 'ARRAYOFSTRING', 'HTTP://SCHEMAS.MICROSOFT.COM/2003/10/SERIALIZATION/ARRAYS');
        if (arrayOfstringSequenceElement) {
          for (var loweredIndex1 = 0; loweredIndex1 < js2xml.getElements(responseDoc, arrayOfstringSequenceElement, 'STRING', 'HTTP://SCHEMAS.MICROSOFT.COM/2003/10/SERIALIZATION/ARRAYS').length; loweredIndex1 = loweredIndex1 + 1) {
            var arrayOfstringElement = js2xml.getElements(responseDoc, arrayOfstringSequenceElement, 'STRING', 'HTTP://SCHEMAS.MICROSOFT.COM/2003/10/SERIALIZATION/ARRAYS')[loweredIndex1];
            var stringInstance = {};
            result.users.push(stringInstance);
            
            var stringInstance2 = arrayOfstringElement;
            stringInstance.name = stringInstance2;
          }
        }
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * You can retrieve a list of all web sites in a web space by issuing an HTTP
   * GET request.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/dn236429.aspx for
   * more information)
   *
   * @param {String} webSpaceName - The name of the web space.
   *
   * @param {WebSiteListParameters} parametersOrCallback - Additional parameters
   *
   * @param {Function} callback
   *
   * @returns {WebSpacesListWebSitesResponse} - The List Web Sites operation
   * response.
   */
  WebSpaceOperations.prototype.listWebSites = function(webSpaceName, parametersOrCallback, callback) {
    var parameters = parametersOrCallback;
    if (_.isFunction(parameters)) {
      callback = parameters;
      parameters = null;
    }
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (webSpaceName === null || webSpaceName === undefined) {
      return callback(new Error('webSpaceName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/WebSpaces/' + webSpaceName + '/sites?';
    if (parameters.propertiesToInclude && parameters.propertiesToInclude.length > 0) {
      url2 = url2 + '&propertiesToInclude=' + encodeURIComponent(parameters.propertiesToInclude.join(','));
    }
    
    // Create HTTP transport objects
    var httpRequest = {};
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2013-03-01';
    
    // Set Credentials
    httpRequest.key = this.client.credentials.keyvalue;
    httpRequest.cert = this.client.credentials.certvalue;
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = { webSites: [] };
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var sitesSequenceElement = js2xml.getElement(responseDoc, responseDoc, 'SITES', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
        if (sitesSequenceElement) {
          for (var loweredIndex1 = 0; loweredIndex1 < js2xml.getElements(responseDoc, sitesSequenceElement, 'SITE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex1 = loweredIndex1 + 1) {
            var sitesElement = js2xml.getElements(responseDoc, sitesSequenceElement, 'SITE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex1];
            var siteInstance = { enabledHostNames: [], hostNameSslStates: [], hostNames: [], sslCertificates: [] };
            result.webSites.push(siteInstance);
            
            var adminEnabledElement = js2xml.getElement(responseDoc, sitesElement, 'ADMINENABLED', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (adminEnabledElement) {
              var adminEnabledInstance = adminEnabledElement;
              siteInstance.adminEnabled = adminEnabledInstance;
            }
            
            var availabilityStateElement = js2xml.getElement(responseDoc, sitesElement, 'AVAILABILITYSTATE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (availabilityStateElement) {
              var availabilityStateInstance = availabilityStateElement;
              siteInstance.availabilityState = availabilityStateInstance;
            }
            
            var computeModeElement = js2xml.getElement(responseDoc, sitesElement, 'COMPUTEMODE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (computeModeElement) {
              var computeModeInstance = computeModeElement;
              siteInstance.computeMode = computeModeInstance;
            }
            
            var enabledElement = js2xml.getElement(responseDoc, sitesElement, 'ENABLED', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (enabledElement) {
              var enabledInstance = enabledElement;
              siteInstance.enabled = enabledInstance;
            }
            
            var enabledHostNamesSequenceElement = js2xml.getElement(responseDoc, sitesElement, 'ENABLEDHOSTNAMES', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (enabledHostNamesSequenceElement) {
              for (var loweredIndex2 = 0; loweredIndex2 < js2xml.getElements(responseDoc, enabledHostNamesSequenceElement, 'STRING', 'HTTP://SCHEMAS.MICROSOFT.COM/2003/10/SERIALIZATION/ARRAYS').length; loweredIndex2 = loweredIndex2 + 1) {
                var enabledHostNamesElement = js2xml.getElements(responseDoc, enabledHostNamesSequenceElement, 'STRING', 'HTTP://SCHEMAS.MICROSOFT.COM/2003/10/SERIALIZATION/ARRAYS')[loweredIndex2];
                siteInstance.enabledHostNames.push(enabledHostNamesElement);
              }
            }
            
            var hostNameSslStatesSequenceElement = js2xml.getElement(responseDoc, sitesElement, 'HOSTNAMESSLSTATES', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (hostNameSslStatesSequenceElement) {
              for (var loweredIndex3 = 0; loweredIndex3 < js2xml.getElements(responseDoc, hostNameSslStatesSequenceElement, 'WEBSITEHOSTNAMESSLSTATE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex3 = loweredIndex3 + 1) {
                var hostNameSslStatesElement = js2xml.getElements(responseDoc, hostNameSslStatesSequenceElement, 'WEBSITEHOSTNAMESSLSTATE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex3];
                var webSiteHostNameSslStateInstance = {};
                siteInstance.hostNameSslStates.push(webSiteHostNameSslStateInstance);
                
                var nameElement = js2xml.getElement(responseDoc, hostNameSslStatesElement, 'NAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                if (nameElement) {
                  var nameInstance = nameElement;
                  webSiteHostNameSslStateInstance.name = nameInstance;
                }
                
                var sslStateElement = js2xml.getElement(responseDoc, hostNameSslStatesElement, 'SSLSTATE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                if (sslStateElement) {
                  var sslStateInstance = sslStateElement;
                  webSiteHostNameSslStateInstance.sslState = sslStateInstance;
                }
                
                var thumbprintElement = js2xml.getElement(responseDoc, hostNameSslStatesElement, 'THUMBPRINT', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                if (thumbprintElement) {
                  var thumbprintInstance = thumbprintElement;
                  webSiteHostNameSslStateInstance.thumbprint = thumbprintInstance;
                }
                
                var virtualIPElement = js2xml.getElement(responseDoc, hostNameSslStatesElement, 'VIRTUALIP', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                if (virtualIPElement) {
                  var virtualIPInstance = virtualIPElement;
                  webSiteHostNameSslStateInstance.virtualIP = virtualIPInstance;
                }
              }
            }
            
            var hostNamesSequenceElement = js2xml.getElement(responseDoc, sitesElement, 'HOSTNAMES', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (hostNamesSequenceElement) {
              for (var loweredIndex4 = 0; loweredIndex4 < js2xml.getElements(responseDoc, hostNamesSequenceElement, 'STRING', 'HTTP://SCHEMAS.MICROSOFT.COM/2003/10/SERIALIZATION/ARRAYS').length; loweredIndex4 = loweredIndex4 + 1) {
                var hostNamesElement = js2xml.getElements(responseDoc, hostNamesSequenceElement, 'STRING', 'HTTP://SCHEMAS.MICROSOFT.COM/2003/10/SERIALIZATION/ARRAYS')[loweredIndex4];
                siteInstance.hostNames.push(hostNamesElement);
              }
            }
            
            var lastModifiedTimeUtcElement = js2xml.getElement(responseDoc, sitesElement, 'LASTMODIFIEDTIMEUTC', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (lastModifiedTimeUtcElement) {
              var lastModifiedTimeUtcInstance = new Date(lastModifiedTimeUtcElement);
              siteInstance.lastModifiedTimeUtc = lastModifiedTimeUtcInstance;
            }
            
            var nameElement2 = js2xml.getElement(responseDoc, sitesElement, 'NAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (nameElement2) {
              var nameInstance2 = nameElement2;
              siteInstance.name = nameInstance2;
            }
            
            var ownerElement = js2xml.getElement(responseDoc, sitesElement, 'OWNER', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (ownerElement) {
              var ownerInstance = ownerElement;
              siteInstance.owner = ownerInstance;
            }
            
            var repositorySiteNameElement = js2xml.getElement(responseDoc, sitesElement, 'REPOSITORYSITENAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (repositorySiteNameElement) {
              var repositorySiteNameInstance = repositorySiteNameElement;
              siteInstance.repositorySiteName = repositorySiteNameInstance;
            }
            
            var runtimeAvailabilityStateElement = js2xml.getElement(responseDoc, sitesElement, 'RUNTIMEAVAILABILITYSTATE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (runtimeAvailabilityStateElement) {
              var runtimeAvailabilityStateInstance = runtimeAvailabilityStateElement;
              siteInstance.runtimeAvailabilityState = runtimeAvailabilityStateInstance;
            }
            
            var sSLCertificatesSequenceElement = js2xml.getElement(responseDoc, sitesElement, 'SSLCERTIFICATES', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (sSLCertificatesSequenceElement) {
              for (var loweredIndex5 = 0; loweredIndex5 < js2xml.getElements(responseDoc, sSLCertificatesSequenceElement, 'CERTIFICATE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex5 = loweredIndex5 + 1) {
                var sSLCertificatesElement = js2xml.getElements(responseDoc, sSLCertificatesSequenceElement, 'CERTIFICATE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex5];
                var certificateInstance = { hostNames: [] };
                siteInstance.sslCertificates.push(certificateInstance);
                
                var expirationDateElement = js2xml.getElement(responseDoc, sSLCertificatesElement, 'EXPIRATIONDATE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                if (expirationDateElement) {
                  var expirationDateInstance = new Date(expirationDateElement);
                  certificateInstance.expirationDate = expirationDateInstance;
                }
                
                var friendlyNameElement = js2xml.getElement(responseDoc, sSLCertificatesElement, 'FRIENDLYNAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                if (friendlyNameElement) {
                  var friendlyNameInstance = friendlyNameElement;
                  certificateInstance.friendlyName = friendlyNameInstance;
                }
                
                var hostNamesSequenceElement2 = js2xml.getElement(responseDoc, sSLCertificatesElement, 'HOSTNAMES', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                if (hostNamesSequenceElement2) {
                  for (var loweredIndex6 = 0; loweredIndex6 < js2xml.getElements(responseDoc, hostNamesSequenceElement2, 'STRING', 'HTTP://SCHEMAS.MICROSOFT.COM/2003/10/SERIALIZATION/ARRAYS').length; loweredIndex6 = loweredIndex6 + 1) {
                    var hostNamesElement2 = js2xml.getElements(responseDoc, hostNamesSequenceElement2, 'STRING', 'HTTP://SCHEMAS.MICROSOFT.COM/2003/10/SERIALIZATION/ARRAYS')[loweredIndex6];
                    certificateInstance.hostNames.push(hostNamesElement2);
                  }
                }
                
                var issueDateElement = js2xml.getElement(responseDoc, sSLCertificatesElement, 'ISSUEDATE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                if (issueDateElement) {
                  var issueDateInstance = new Date(issueDateElement);
                  certificateInstance.issueDate = issueDateInstance;
                }
                
                var issuerElement = js2xml.getElement(responseDoc, sSLCertificatesElement, 'ISSUER', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                if (issuerElement) {
                  var issuerInstance = issuerElement;
                  certificateInstance.issuer = issuerInstance;
                }
                
                var passwordElement = js2xml.getElement(responseDoc, sSLCertificatesElement, 'PASSWORD', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                if (passwordElement) {
                  var passwordInstance = passwordElement;
                  certificateInstance.password = passwordInstance;
                }
                
                var pfxBlobElement = js2xml.getElement(responseDoc, sSLCertificatesElement, 'PFXBLOB', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                if (pfxBlobElement) {
                  var pfxBlobInstance = new Buffer(pfxBlobElement, 'base64').toString('ascii');
                  certificateInstance.pfxBlob = pfxBlobInstance;
                }
                
                var selfLinkElement = js2xml.getElement(responseDoc, sSLCertificatesElement, 'SELFLINK', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                if (selfLinkElement) {
                  var selfLinkInstance = selfLinkElement;
                  certificateInstance.selfLinkUri = selfLinkInstance;
                }
                
                var siteNameElement = js2xml.getElement(responseDoc, sSLCertificatesElement, 'SITENAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                if (siteNameElement) {
                  var siteNameInstance = siteNameElement;
                  certificateInstance.siteName = siteNameInstance;
                }
                
                var subjectNameElement = js2xml.getElement(responseDoc, sSLCertificatesElement, 'SUBJECTNAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                if (subjectNameElement) {
                  var subjectNameInstance = subjectNameElement;
                  certificateInstance.subjectName = subjectNameInstance;
                }
                
                var thumbprintElement2 = js2xml.getElement(responseDoc, sSLCertificatesElement, 'THUMBPRINT', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                if (thumbprintElement2) {
                  var thumbprintInstance2 = thumbprintElement2;
                  certificateInstance.thumbprint = thumbprintInstance2;
                }
                
                var toDeleteElement = js2xml.getElement(responseDoc, sSLCertificatesElement, 'TODELETE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                if (toDeleteElement) {
                  var toDeleteInstance = toDeleteElement;
                  certificateInstance.isToBeDeleted = toDeleteInstance;
                }
                
                var validElement = js2xml.getElement(responseDoc, sSLCertificatesElement, 'VALID', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                if (validElement) {
                  var validInstance = validElement;
                  certificateInstance.isValid = validInstance;
                }
              }
            }
            
            var selfLinkElement2 = js2xml.getElement(responseDoc, sitesElement, 'SELFLINK', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (selfLinkElement2) {
              var selfLinkInstance2 = selfLinkElement2;
              siteInstance.uri = selfLinkInstance2;
            }
            
            var serverFarmElement = js2xml.getElement(responseDoc, sitesElement, 'SERVERFARM', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (serverFarmElement) {
              var serverFarmInstance = serverFarmElement;
              siteInstance.serverFarm = serverFarmInstance;
            }
            
            var siteModeElement = js2xml.getElement(responseDoc, sitesElement, 'SITEMODE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (siteModeElement) {
              var siteModeInstance = siteModeElement;
              siteInstance.siteMode = siteModeInstance;
            }
            
            var sitePropertiesElement = js2xml.getElement(responseDoc, sitesElement, 'SITEPROPERTIES', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (sitePropertiesElement) {
              var sitePropertiesInstance = { appSettings: {}, metadata: {}, properties: {} };
              siteInstance.siteProperties = sitePropertiesInstance;
              
              var appSettingsSequenceElement = js2xml.getElement(responseDoc, sitePropertiesElement, 'APPSETTINGS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (appSettingsSequenceElement) {
                for (var loweredIndex7 = 0; loweredIndex7 < js2xml.getElements(responseDoc, appSettingsSequenceElement, 'NAMEVALUEPAIR', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex7 = loweredIndex7 + 1) {
                  var appSettingsElement = js2xml.getElements(responseDoc, appSettingsSequenceElement, 'NAMEVALUEPAIR', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex7];
                  var appSettingsKey = js2xml.getElement(responseDoc, appSettingsElement, 'NAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  var appSettingsValue = js2xml.getElement(responseDoc, appSettingsElement, 'VALUE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  sitePropertiesInstance.appSettings[appSettingsKey] = appSettingsValue;
                }
              }
              
              var metadataSequenceElement = js2xml.getElement(responseDoc, sitePropertiesElement, 'METADATA', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (metadataSequenceElement) {
                for (var loweredIndex8 = 0; loweredIndex8 < js2xml.getElements(responseDoc, metadataSequenceElement, 'NAMEVALUEPAIR', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex8 = loweredIndex8 + 1) {
                  var metadataElement = js2xml.getElements(responseDoc, metadataSequenceElement, 'NAMEVALUEPAIR', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex8];
                  var metadataKey = js2xml.getElement(responseDoc, metadataElement, 'NAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  var metadataValue = js2xml.getElement(responseDoc, metadataElement, 'VALUE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  sitePropertiesInstance.metadata[metadataKey] = metadataValue;
                }
              }
              
              var propertiesSequenceElement = js2xml.getElement(responseDoc, sitePropertiesElement, 'PROPERTIES', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (propertiesSequenceElement) {
                for (var loweredIndex9 = 0; loweredIndex9 < js2xml.getElements(responseDoc, propertiesSequenceElement, 'NAMEVALUEPAIR', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex9 = loweredIndex9 + 1) {
                  var propertiesElement = js2xml.getElements(responseDoc, propertiesSequenceElement, 'NAMEVALUEPAIR', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex9];
                  var propertiesKey = js2xml.getElement(responseDoc, propertiesElement, 'NAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  var propertiesValue = js2xml.getElement(responseDoc, propertiesElement, 'VALUE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  sitePropertiesInstance.properties[propertiesKey] = propertiesValue;
                }
              }
            }
            
            var stateElement = js2xml.getElement(responseDoc, sitesElement, 'STATE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (stateElement) {
              var stateInstance = stateElement;
              siteInstance.state = stateInstance;
            }
            
            var usageStateElement = js2xml.getElement(responseDoc, sitesElement, 'USAGESTATE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (usageStateElement) {
              var usageStateInstance = usageStateElement;
              siteInstance.usageState = usageStateInstance;
            }
            
            var webSpaceElement = js2xml.getElement(responseDoc, sitesElement, 'WEBSPACE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (webSpaceElement) {
              var webSpaceInstance = webSpaceElement;
              siteInstance.webSpace = webSpaceInstance;
            }
          }
        }
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * Creates a source control user allowed to publish to this web space.
   *
   * @param {String} username - The user name.
   *
   * @param {String} password - The user password.
   *
   * @param {WebSpacesCreatePublishingUserParameters} parametersOrCallback -
   * Parameters supplied to the Create Publishing User operation.
   *
   * @param {Function} callback
   *
   * @returns {WebSpacesCreatePublishingUserResponse} - The Create Publishing
   * User operation response.
   */
  WebSpaceOperations.prototype.createPublishingUser = function(username, password, parametersOrCallback, callback) {
    var parameters = parametersOrCallback;
    if (_.isFunction(parameters)) {
      callback = parameters;
      parameters = null;
    }
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (username === null || username === undefined) {
      return callback(new Error('username cannot be null.'));
    }
    if (password === null || password === undefined) {
      return callback(new Error('password cannot be null.'));
    }
    if (parameters) {
      if (parameters.publishingPassword === null || parameters.publishingPassword === undefined) {
        return callback(new Error('parameters.publishingPassword cannot be null.'));
      }
      if (parameters.publishingUserName === null || parameters.publishingUserName === undefined) {
        return callback(new Error('parameters.publishingUserName cannot be null.'));
      }
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/WebSpaces?properties=publishingCredentials';
    
    // Create HTTP transport objects
    var httpRequest = {};
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2013-03-01';
    httpRequest.headers['Content-Type'] = 'application/xml';
    
    // Set Credentials
    httpRequest.key = this.client.credentials.keyvalue;
    httpRequest.cert = this.client.credentials.certvalue;
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = {};
    
    if (parameters) {
      var userElement = js2xml.createElement('User', 'http://schemas.microsoft.com/windowsazure');
      js2xml.addChildElement(requestDoc, userElement);
      
      if (parameters.name) {
        var nameElement = js2xml.createElement('Name', 'http://schemas.microsoft.com/windowsazure');
        js2xml.setElementValue(nameElement, parameters.name);
        js2xml.addChildElement(userElement, nameElement);
      }
      
      var publishingPasswordElement = js2xml.createElement('PublishingPassword', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(publishingPasswordElement, parameters.publishingPassword);
      js2xml.addChildElement(userElement, publishingPasswordElement);
      
      var publishingUserNameElement = js2xml.createElement('PublishingUserName', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(publishingUserNameElement, parameters.publishingUserName);
      js2xml.addChildElement(userElement, publishingUserNameElement);
    }
    
    requestContent = js2xml.serializeDocument(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 201) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var userElement2 = js2xml.getElement(responseDoc, responseDoc, 'USER', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
        if (userElement2) {
          var nameElement2 = js2xml.getElement(responseDoc, userElement2, 'NAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (nameElement2) {
            var nameInstance = nameElement2;
            result.name = nameInstance;
          }
          
          var publishingPasswordElement2 = js2xml.getElement(responseDoc, userElement2, 'PUBLISHINGPASSWORD', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (publishingPasswordElement2) {
            var publishingPasswordInstance = publishingPasswordElement2;
            result.publishingPassword = publishingPasswordInstance;
          }
          
          var publishingUserNameElement2 = js2xml.getElement(responseDoc, userElement2, 'PUBLISHINGUSERNAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (publishingUserNameElement2) {
            var publishingUserNameInstance = publishingUserNameElement2;
            result.publishingUserName = publishingUserNameInstance;
          }
        }
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * Get the available geo regions for this webspace.
   *
   * @param {Function} callback
   *
   * @returns {WebSpacesListGeoRegionsResponse} - The Get DNS Suffix operation
   * response.
   */
  WebSpaceOperations.prototype.listGeoRegions = function(callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/WebSpaces?properties=georegions';
    
    // Create HTTP transport objects
    var httpRequest = {};
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2013-03-01';
    
    // Set Credentials
    httpRequest.key = this.client.credentials.keyvalue;
    httpRequest.cert = this.client.credentials.certvalue;
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = { geoRegions: [] };
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var geoRegionsSequenceElement = js2xml.getElement(responseDoc, responseDoc, 'GEOREGIONS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
        if (geoRegionsSequenceElement) {
          for (var loweredIndex1 = 0; loweredIndex1 < js2xml.getElements(responseDoc, geoRegionsSequenceElement, 'GEOREGION', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex1 = loweredIndex1 + 1) {
            var geoRegionsElement = js2xml.getElements(responseDoc, geoRegionsSequenceElement, 'GEOREGION', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex1];
            var geoRegionInstance = {};
            result.geoRegions.push(geoRegionInstance);
            
            var descriptionElement = js2xml.getElement(responseDoc, geoRegionsElement, 'DESCRIPTION', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (descriptionElement) {
              var descriptionInstance = descriptionElement;
              geoRegionInstance.description = descriptionInstance;
            }
            
            var nameElement = js2xml.getElement(responseDoc, geoRegionsElement, 'NAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (nameElement) {
              var nameInstance = nameElement;
              geoRegionInstance.name = nameInstance;
            }
            
            var sortOrderElement = js2xml.getElement(responseDoc, geoRegionsElement, 'SORTORDER', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (sortOrderElement) {
              var sortOrderInstance = parseInt(sortOrderElement, 10);
              geoRegionInstance.sortOrder = sortOrderInstance;
            }
          }
        }
        
        return callback(null, result);
      });
    });
  };
  
  return WebSpaceOperations;
})();