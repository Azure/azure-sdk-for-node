/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Properties specific to a Graph based web service.
 *
 * @extends models['WebServiceProperties']
 */
class WebServicePropertiesForGraph extends models['WebServiceProperties'] {
  /**
   * Create a WebServicePropertiesForGraph.
   * @member {object} [packageProperty] The definition of the graph package
   * making up this web service.
   * @member {object} [packageProperty.nodes] The set of nodes making up the
   * graph, provided as a nodeId to GraphNode map
   * @member {array} [packageProperty.edges] The list of edges making up the
   * graph.
   * @member {object} [packageProperty.graphParameters] The collection of
   * global parameters for the graph, given as a global parameter name to
   * GraphParameter map. Each parameter here has a 1:1 match with the global
   * parameters values map declared at the WebServiceProperties level.
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of WebServicePropertiesForGraph
   *
   * @returns {object} metadata of WebServicePropertiesForGraph
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'Graph',
      type: {
        name: 'Composite',
        className: 'WebServicePropertiesForGraph',
        modelProperties: {
          title: {
            required: false,
            serializedName: 'title',
            type: {
              name: 'String'
            }
          },
          description: {
            required: false,
            serializedName: 'description',
            type: {
              name: 'String'
            }
          },
          createdOn: {
            required: false,
            readOnly: true,
            serializedName: 'createdOn',
            type: {
              name: 'DateTime'
            }
          },
          modifiedOn: {
            required: false,
            readOnly: true,
            serializedName: 'modifiedOn',
            type: {
              name: 'DateTime'
            }
          },
          provisioningState: {
            required: false,
            readOnly: true,
            serializedName: 'provisioningState',
            type: {
              name: 'String'
            }
          },
          keys: {
            required: false,
            serializedName: 'keys',
            type: {
              name: 'Composite',
              className: 'WebServiceKeys'
            }
          },
          readOnly: {
            required: false,
            serializedName: 'readOnly',
            type: {
              name: 'Boolean'
            }
          },
          swaggerLocation: {
            required: false,
            readOnly: true,
            serializedName: 'swaggerLocation',
            type: {
              name: 'String'
            }
          },
          exposeSampleData: {
            required: false,
            serializedName: 'exposeSampleData',
            type: {
              name: 'Boolean'
            }
          },
          realtimeConfiguration: {
            required: false,
            serializedName: 'realtimeConfiguration',
            type: {
              name: 'Composite',
              className: 'RealtimeConfiguration'
            }
          },
          diagnostics: {
            required: false,
            serializedName: 'diagnostics',
            type: {
              name: 'Composite',
              className: 'DiagnosticsConfiguration'
            }
          },
          storageAccount: {
            required: false,
            serializedName: 'storageAccount',
            type: {
              name: 'Composite',
              className: 'StorageAccount'
            }
          },
          machineLearningWorkspace: {
            required: false,
            serializedName: 'machineLearningWorkspace',
            type: {
              name: 'Composite',
              className: 'MachineLearningWorkspace'
            }
          },
          commitmentPlan: {
            required: false,
            serializedName: 'commitmentPlan',
            type: {
              name: 'Composite',
              className: 'CommitmentPlan'
            }
          },
          input: {
            required: false,
            serializedName: 'input',
            type: {
              name: 'Composite',
              className: 'ServiceInputOutputSpecification'
            }
          },
          output: {
            required: false,
            serializedName: 'output',
            type: {
              name: 'Composite',
              className: 'ServiceInputOutputSpecification'
            }
          },
          exampleRequest: {
            required: false,
            serializedName: 'exampleRequest',
            type: {
              name: 'Composite',
              className: 'ExampleRequest'
            }
          },
          assets: {
            required: false,
            serializedName: 'assets',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'AssetItemElementType',
                  type: {
                    name: 'Composite',
                    className: 'AssetItem'
                  }
              }
            }
          },
          parameters: {
            required: false,
            serializedName: 'parameters',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'WebServiceParameterElementType',
                  type: {
                    name: 'Composite',
                    className: 'WebServiceParameter'
                  }
              }
            }
          },
          payloadsInBlobStorage: {
            required: false,
            serializedName: 'payloadsInBlobStorage',
            type: {
              name: 'Boolean'
            }
          },
          payloadsLocation: {
            required: false,
            serializedName: 'payloadsLocation',
            type: {
              name: 'Composite',
              className: 'BlobLocation'
            }
          },
          packageType: {
            required: true,
            serializedName: 'packageType',
            type: {
              name: 'String'
            }
          },
          packageProperty: {
            required: false,
            serializedName: 'package',
            type: {
              name: 'Composite',
              className: 'GraphPackage'
            }
          }
        }
      }
    };
  }
}

module.exports = WebServicePropertiesForGraph;
