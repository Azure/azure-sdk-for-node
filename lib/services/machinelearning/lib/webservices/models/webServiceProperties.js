/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * The set of properties specific to the Azure ML web service resource.
 *
 */
class WebServiceProperties {
  /**
   * Create a WebServiceProperties.
   * @member {string} [title] The title of the web service.
   * @member {string} [description] The description of the web service.
   * @member {date} [createdOn] Read Only: The date and time when the web
   * service was created.
   * @member {date} [modifiedOn] Read Only: The date and time when the web
   * service was last modified.
   * @member {string} [provisioningState] Read Only: The provision state of the
   * web service. Valid values are Unknown, Provisioning, Succeeded, and
   * Failed. Possible values include: 'Unknown', 'Provisioning', 'Succeeded',
   * 'Failed'
   * @member {object} [keys] Contains the web service provisioning keys. If you
   * do not specify provisioning keys, the Azure Machine Learning system
   * generates them for you. Note: The keys are not returned from calls to GET
   * operations.
   * @member {string} [keys.primary] The primary access key.
   * @member {string} [keys.secondary] The secondary access key.
   * @member {boolean} [readOnly] When set to true, indicates that the web
   * service is read-only and can no longer be updated or patched, only
   * removed. Default, is false. Note: Once set to true, you cannot change its
   * value.
   * @member {string} [swaggerLocation] Read Only: Contains the URI of the
   * swagger spec associated with this web service.
   * @member {boolean} [exposeSampleData] When set to true, sample data is
   * included in the web service's swagger definition. The default value is
   * true.
   * @member {object} [realtimeConfiguration] Contains the configuration
   * settings for the web service endpoint.
   * @member {number} [realtimeConfiguration.maxConcurrentCalls] Specifies the
   * maximum concurrent calls that can be made to the web service. Minimum
   * value: 4, Maximum value: 200.
   * @member {object} [diagnostics] Settings controlling the diagnostics traces
   * collection for the web service.
   * @member {string} [diagnostics.level] Specifies the verbosity of the
   * diagnostic output. Valid values are: None - disables tracing; Error -
   * collects only error (stderr) traces; All - collects all traces (stdout and
   * stderr). Possible values include: 'None', 'Error', 'All'
   * @member {date} [diagnostics.expiry] Specifies the date and time when the
   * logging will cease. If null, diagnostic collection is not time limited.
   * @member {object} [storageAccount] Specifies the storage account that Azure
   * Machine Learning uses to store information about the web service. Only the
   * name of the storage account is returned from calls to GET operations. When
   * updating the storage account information, you must ensure that all
   * necessary assets are available in the new storage account or calls to your
   * web service will fail.
   * @member {string} [storageAccount.name] Specifies the name of the storage
   * account.
   * @member {string} [storageAccount.key] Specifies the key used to access the
   * storage account.
   * @member {object} [machineLearningWorkspace] Specifies the Machine Learning
   * workspace containing the experiment that is source for the web service.
   * @member {string} [machineLearningWorkspace.id] Specifies the workspace ID
   * of the machine learning workspace associated with the web service
   * @member {object} [commitmentPlan] Contains the commitment plan associated
   * with this web service. Set at creation time. Once set, this value cannot
   * be changed. Note: The commitment plan is not returned from calls to GET
   * operations.
   * @member {string} [commitmentPlan.id] Specifies the Azure Resource Manager
   * ID of the commitment plan associated with the web service.
   * @member {object} [input] Contains the Swagger 2.0 schema describing one or
   * more of the web service's inputs. For more information, see the Swagger
   * specification.
   * @member {string} [input.title] The title of your Swagger schema.
   * @member {string} [input.description] The description of the Swagger
   * schema.
   * @member {string} [input.type] The type of the entity described in swagger.
   * Always 'object'.
   * @member {object} [input.properties] Specifies a collection that contains
   * the column schema for each input or output of the web service. For more
   * information, see the Swagger specification.
   * @member {object} [output] Contains the Swagger 2.0 schema describing one
   * or more of the web service's outputs. For more information, see the
   * Swagger specification.
   * @member {string} [output.title] The title of your Swagger schema.
   * @member {string} [output.description] The description of the Swagger
   * schema.
   * @member {string} [output.type] The type of the entity described in
   * swagger. Always 'object'.
   * @member {object} [output.properties] Specifies a collection that contains
   * the column schema for each input or output of the web service. For more
   * information, see the Swagger specification.
   * @member {object} [exampleRequest] Defines sample input data for one or
   * more of the service's inputs.
   * @member {object} [exampleRequest.inputs] Sample input data for the web
   * service's input(s) given as an input name to sample input values matrix
   * map.
   * @member {object} [exampleRequest.globalParameters] Sample input data for
   * the web service's global parameters
   * @member {object} [assets] Contains user defined properties describing web
   * service assets. Properties are expressed as Key/Value pairs.
   * @member {object} [parameters] The set of global parameters values defined
   * for the web service, given as a global parameter name to default value
   * map. If no default value is specified, the parameter is considered to be
   * required.
   * @member {boolean} [payloadsInBlobStorage] When set to true, indicates that
   * the payload size is larger than 3 MB. Otherwise false. If the payload size
   * exceed 3 MB, the payload is stored in a blob and the PayloadsLocation
   * parameter contains the URI of the blob. Otherwise, this will be set to
   * false and Assets, Input, Output, Package, Parameters, ExampleRequest are
   * inline. The Payload sizes is determined by adding the size of the Assets,
   * Input, Output, Package, Parameters, and the ExampleRequest.
   * @member {object} [payloadsLocation] The URI of the payload blob. This
   * paramater contains a value only if the payloadsInBlobStorage parameter is
   * set to true. Otherwise is set to null.
   * @member {string} [payloadsLocation.uri] The URI from which the blob is
   * accessible from. For example, aml://abc for system assets or https://xyz
   * for user assets or payload.
   * @member {string} [payloadsLocation.credentials] Access credentials for the
   * blob, if applicable (e.g. blob specified by storage account connection
   * string + blob URI)
   * @member {string} packageType Polymorphic Discriminator
   */
  constructor() {
  }

  /**
   * Defines the metadata of WebServiceProperties
   *
   * @returns {object} metadata of WebServiceProperties
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'WebServiceProperties',
      type: {
        name: 'Composite',
        polymorphicDiscriminator: {
          serializedName: 'packageType',
          clientName: 'packageType'
        },
        uberParent: 'WebServiceProperties',
        className: 'WebServiceProperties',
        modelProperties: {
          title: {
            required: false,
            serializedName: 'title',
            type: {
              name: 'String'
            }
          },
          description: {
            required: false,
            serializedName: 'description',
            type: {
              name: 'String'
            }
          },
          createdOn: {
            required: false,
            readOnly: true,
            serializedName: 'createdOn',
            type: {
              name: 'DateTime'
            }
          },
          modifiedOn: {
            required: false,
            readOnly: true,
            serializedName: 'modifiedOn',
            type: {
              name: 'DateTime'
            }
          },
          provisioningState: {
            required: false,
            readOnly: true,
            serializedName: 'provisioningState',
            type: {
              name: 'String'
            }
          },
          keys: {
            required: false,
            serializedName: 'keys',
            type: {
              name: 'Composite',
              className: 'WebServiceKeys'
            }
          },
          readOnly: {
            required: false,
            serializedName: 'readOnly',
            type: {
              name: 'Boolean'
            }
          },
          swaggerLocation: {
            required: false,
            readOnly: true,
            serializedName: 'swaggerLocation',
            type: {
              name: 'String'
            }
          },
          exposeSampleData: {
            required: false,
            serializedName: 'exposeSampleData',
            type: {
              name: 'Boolean'
            }
          },
          realtimeConfiguration: {
            required: false,
            serializedName: 'realtimeConfiguration',
            type: {
              name: 'Composite',
              className: 'RealtimeConfiguration'
            }
          },
          diagnostics: {
            required: false,
            serializedName: 'diagnostics',
            type: {
              name: 'Composite',
              className: 'DiagnosticsConfiguration'
            }
          },
          storageAccount: {
            required: false,
            serializedName: 'storageAccount',
            type: {
              name: 'Composite',
              className: 'StorageAccount'
            }
          },
          machineLearningWorkspace: {
            required: false,
            serializedName: 'machineLearningWorkspace',
            type: {
              name: 'Composite',
              className: 'MachineLearningWorkspace'
            }
          },
          commitmentPlan: {
            required: false,
            serializedName: 'commitmentPlan',
            type: {
              name: 'Composite',
              className: 'CommitmentPlan'
            }
          },
          input: {
            required: false,
            serializedName: 'input',
            type: {
              name: 'Composite',
              className: 'ServiceInputOutputSpecification'
            }
          },
          output: {
            required: false,
            serializedName: 'output',
            type: {
              name: 'Composite',
              className: 'ServiceInputOutputSpecification'
            }
          },
          exampleRequest: {
            required: false,
            serializedName: 'exampleRequest',
            type: {
              name: 'Composite',
              className: 'ExampleRequest'
            }
          },
          assets: {
            required: false,
            serializedName: 'assets',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'AssetItemElementType',
                  type: {
                    name: 'Composite',
                    className: 'AssetItem'
                  }
              }
            }
          },
          parameters: {
            required: false,
            serializedName: 'parameters',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'WebServiceParameterElementType',
                  type: {
                    name: 'Composite',
                    className: 'WebServiceParameter'
                  }
              }
            }
          },
          payloadsInBlobStorage: {
            required: false,
            serializedName: 'payloadsInBlobStorage',
            type: {
              name: 'Boolean'
            }
          },
          payloadsLocation: {
            required: false,
            serializedName: 'payloadsLocation',
            type: {
              name: 'Composite',
              className: 'BlobLocation'
            }
          },
          packageType: {
            required: true,
            serializedName: 'packageType',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = WebServiceProperties;
