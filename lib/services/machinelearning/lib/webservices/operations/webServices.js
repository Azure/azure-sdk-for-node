/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const msRest = require('ms-rest');
const msRestAzure = require('ms-rest-azure');
const WebResource = msRest.WebResource;


/**
 * Create or update a web service. This call will overwrite an existing web
 * service. Note that there is no warning or confirmation. This is a
 * nonrecoverable operation. If your intent is to create a new web service,
 * call the Get operation first to verify that it does not exist.
 *
 * @param {string} resourceGroupName Name of the resource group in which the
 * web service is located.
 *
 * @param {string} webServiceName The name of the web service.
 *
 * @param {object} createOrUpdatePayload The payload that is used to create or
 * update the web service.
 *
 * @param {object} createOrUpdatePayload.properties Contains the property
 * payload that describes the web service.
 *
 * @param {string} [createOrUpdatePayload.properties.title] The title of the
 * web service.
 *
 * @param {string} [createOrUpdatePayload.properties.description] The
 * description of the web service.
 *
 * @param {object} [createOrUpdatePayload.properties.keys] Contains the web
 * service provisioning keys. If you do not specify provisioning keys, the
 * Azure Machine Learning system generates them for you. Note: The keys are not
 * returned from calls to GET operations.
 *
 * @param {string} [createOrUpdatePayload.properties.keys.primary] The primary
 * access key.
 *
 * @param {string} [createOrUpdatePayload.properties.keys.secondary] The
 * secondary access key.
 *
 * @param {boolean} [createOrUpdatePayload.properties.readOnly] When set to
 * true, indicates that the web service is read-only and can no longer be
 * updated or patched, only removed. Default, is false. Note: Once set to true,
 * you cannot change its value.
 *
 * @param {boolean} [createOrUpdatePayload.properties.exposeSampleData] When
 * set to true, sample data is included in the web service's swagger
 * definition. The default value is true.
 *
 * @param {object} [createOrUpdatePayload.properties.realtimeConfiguration]
 * Contains the configuration settings for the web service endpoint.
 *
 * @param {number}
 * [createOrUpdatePayload.properties.realtimeConfiguration.maxConcurrentCalls]
 * Specifies the maximum concurrent calls that can be made to the web service.
 * Minimum value: 4, Maximum value: 200.
 *
 * @param {object} [createOrUpdatePayload.properties.diagnostics] Settings
 * controlling the diagnostics traces collection for the web service.
 *
 * @param {string} createOrUpdatePayload.properties.diagnostics.level Specifies
 * the verbosity of the diagnostic output. Valid values are: None - disables
 * tracing; Error - collects only error (stderr) traces; All - collects all
 * traces (stdout and stderr). Possible values include: 'None', 'Error', 'All'
 *
 * @param {date} [createOrUpdatePayload.properties.diagnostics.expiry]
 * Specifies the date and time when the logging will cease. If null, diagnostic
 * collection is not time limited.
 *
 * @param {object} [createOrUpdatePayload.properties.storageAccount] Specifies
 * the storage account that Azure Machine Learning uses to store information
 * about the web service. Only the name of the storage account is returned from
 * calls to GET operations. When updating the storage account information, you
 * must ensure that all necessary assets are available in the new storage
 * account or calls to your web service will fail.
 *
 * @param {string} [createOrUpdatePayload.properties.storageAccount.name]
 * Specifies the name of the storage account.
 *
 * @param {string} [createOrUpdatePayload.properties.storageAccount.key]
 * Specifies the key used to access the storage account.
 *
 * @param {object} [createOrUpdatePayload.properties.machineLearningWorkspace]
 * Specifies the Machine Learning workspace containing the experiment that is
 * source for the web service.
 *
 * @param {string} createOrUpdatePayload.properties.machineLearningWorkspace.id
 * Specifies the workspace ID of the machine learning workspace associated with
 * the web service
 *
 * @param {object} [createOrUpdatePayload.properties.commitmentPlan] Contains
 * the commitment plan associated with this web service. Set at creation time.
 * Once set, this value cannot be changed. Note: The commitment plan is not
 * returned from calls to GET operations.
 *
 * @param {string} createOrUpdatePayload.properties.commitmentPlan.id Specifies
 * the Azure Resource Manager ID of the commitment plan associated with the web
 * service.
 *
 * @param {object} [createOrUpdatePayload.properties.input] Contains the
 * Swagger 2.0 schema describing one or more of the web service's inputs. For
 * more information, see the Swagger specification.
 *
 * @param {object} [createOrUpdatePayload.properties.output] Contains the
 * Swagger 2.0 schema describing one or more of the web service's outputs. For
 * more information, see the Swagger specification.
 *
 * @param {string} [createOrUpdatePayload.properties.output.title] The title of
 * your Swagger schema.
 *
 * @param {string} [createOrUpdatePayload.properties.output.description] The
 * description of the Swagger schema.
 *
 * @param {string} createOrUpdatePayload.properties.output.type The type of the
 * entity described in swagger. Always 'object'.
 *
 * @param {object} createOrUpdatePayload.properties.output.properties Specifies
 * a collection that contains the column schema for each input or output of the
 * web service. For more information, see the Swagger specification.
 *
 * @param {object} [createOrUpdatePayload.properties.exampleRequest] Defines
 * sample input data for one or more of the service's inputs.
 *
 * @param {object} [createOrUpdatePayload.properties.exampleRequest.inputs]
 * Sample input data for the web service's input(s) given as an input name to
 * sample input values matrix map.
 *
 * @param {object}
 * [createOrUpdatePayload.properties.exampleRequest.globalParameters] Sample
 * input data for the web service's global parameters
 *
 * @param {object} [createOrUpdatePayload.properties.assets] Contains user
 * defined properties describing web service assets. Properties are expressed
 * as Key/Value pairs.
 *
 * @param {object} [createOrUpdatePayload.properties.parameters] The set of
 * global parameters values defined for the web service, given as a global
 * parameter name to default value map. If no default value is specified, the
 * parameter is considered to be required.
 *
 * @param {boolean} [createOrUpdatePayload.properties.payloadsInBlobStorage]
 * When set to true, indicates that the payload size is larger than 3 MB.
 * Otherwise false. If the payload size exceed 3 MB, the payload is stored in a
 * blob and the PayloadsLocation parameter contains the URI of the blob.
 * Otherwise, this will be set to false and Assets, Input, Output, Package,
 * Parameters, ExampleRequest are inline. The Payload sizes is determined by
 * adding the size of the Assets, Input, Output, Package, Parameters, and the
 * ExampleRequest.
 *
 * @param {object} [createOrUpdatePayload.properties.payloadsLocation] The URI
 * of the payload blob. This paramater contains a value only if the
 * payloadsInBlobStorage parameter is set to true. Otherwise is set to null.
 *
 * @param {string} createOrUpdatePayload.properties.payloadsLocation.uri The
 * URI from which the blob is accessible from. For example, aml://abc for
 * system assets or https://xyz for user assets or payload.
 *
 * @param {string}
 * [createOrUpdatePayload.properties.payloadsLocation.credentials] Access
 * credentials for the blob, if applicable (e.g. blob specified by storage
 * account connection string + blob URI)
 *
 * @param {string} createOrUpdatePayload.properties.packageType Polymorphic
 * Discriminator
 *
 * @param {string} createOrUpdatePayload.location Specifies the location of the
 * resource.
 *
 * @param {object} [createOrUpdatePayload.tags] Contains resource tags defined
 * as key/value pairs.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link WebService} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _createOrUpdate(resourceGroupName, webServiceName, createOrUpdatePayload, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }

  if (!callback) {
    throw new Error('callback cannot be null.');
  }

  // Send request
  this.beginCreateOrUpdate(resourceGroupName, webServiceName, createOrUpdatePayload, options, (err, parsedResult, httpRequest, response) => {
    if (err) return callback(err);

    let initialResult = new msRest.HttpOperationResponse();
    initialResult.request = httpRequest;
    initialResult.response = response;
    initialResult.body = response.body;
    client.getLongRunningOperationResult(initialResult, options, (err, pollingResult) => {
      if (err) return callback(err);

      // Create Result
      let result = null;

      httpRequest = pollingResult.request;
      response = pollingResult.response;
      let responseBody = pollingResult.body;
      if (responseBody === '') responseBody = null;

      // Deserialize Response
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['WebService']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }

      return callback(null, result, httpRequest, response);
    });
  });
}

/**
 * Gets the Web Service Definition as specified by a subscription, resource
 * group, and name. Note that the storage credentials and web service keys are
 * not returned by this call. To get the web service access keys, call List
 * Keys.
 *
 * @param {string} resourceGroupName Name of the resource group in which the
 * web service is located.
 *
 * @param {string} webServiceName The name of the web service.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {string} [options.region] The region for which encrypted credential
 * parameters are valid.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link WebService} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _get(resourceGroupName, webServiceName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let region = (options && options.region !== undefined) ? options.region : undefined;
  // Validate
  try {
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (webServiceName === null || webServiceName === undefined || typeof webServiceName.valueOf() !== 'string') {
      throw new Error('webServiceName cannot be null or undefined and it must be of type string.');
    }
    if (region !== null && region !== undefined && typeof region.valueOf() !== 'string') {
      throw new Error('region must be of type string.');
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearning/webServices/{webServiceName}';
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{webServiceName}', encodeURIComponent(webServiceName));
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  let queryParameters = [];
  if (region !== null && region !== undefined) {
    queryParameters.push('region=' + encodeURIComponent(region));
  }
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['WebService']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}


/**
 * Modifies an existing web service resource. The PATCH API call is an
 * asynchronous operation. To determine whether it has completed successfully,
 * you must perform a Get operation.
 *
 * @param {string} resourceGroupName Name of the resource group in which the
 * web service is located.
 *
 * @param {string} webServiceName The name of the web service.
 *
 * @param {object} patchPayload The payload to use to patch the web service.
 *
 * @param {object} patchPayload.properties Contains the property payload that
 * describes the web service.
 *
 * @param {string} [patchPayload.properties.title] The title of the web
 * service.
 *
 * @param {string} [patchPayload.properties.description] The description of the
 * web service.
 *
 * @param {object} [patchPayload.properties.keys] Contains the web service
 * provisioning keys. If you do not specify provisioning keys, the Azure
 * Machine Learning system generates them for you. Note: The keys are not
 * returned from calls to GET operations.
 *
 * @param {string} [patchPayload.properties.keys.primary] The primary access
 * key.
 *
 * @param {string} [patchPayload.properties.keys.secondary] The secondary
 * access key.
 *
 * @param {boolean} [patchPayload.properties.readOnly] When set to true,
 * indicates that the web service is read-only and can no longer be updated or
 * patched, only removed. Default, is false. Note: Once set to true, you cannot
 * change its value.
 *
 * @param {boolean} [patchPayload.properties.exposeSampleData] When set to
 * true, sample data is included in the web service's swagger definition. The
 * default value is true.
 *
 * @param {object} [patchPayload.properties.realtimeConfiguration] Contains the
 * configuration settings for the web service endpoint.
 *
 * @param {number}
 * [patchPayload.properties.realtimeConfiguration.maxConcurrentCalls] Specifies
 * the maximum concurrent calls that can be made to the web service. Minimum
 * value: 4, Maximum value: 200.
 *
 * @param {object} [patchPayload.properties.diagnostics] Settings controlling
 * the diagnostics traces collection for the web service.
 *
 * @param {string} patchPayload.properties.diagnostics.level Specifies the
 * verbosity of the diagnostic output. Valid values are: None - disables
 * tracing; Error - collects only error (stderr) traces; All - collects all
 * traces (stdout and stderr). Possible values include: 'None', 'Error', 'All'
 *
 * @param {date} [patchPayload.properties.diagnostics.expiry] Specifies the
 * date and time when the logging will cease. If null, diagnostic collection is
 * not time limited.
 *
 * @param {object} [patchPayload.properties.storageAccount] Specifies the
 * storage account that Azure Machine Learning uses to store information about
 * the web service. Only the name of the storage account is returned from calls
 * to GET operations. When updating the storage account information, you must
 * ensure that all necessary assets are available in the new storage account or
 * calls to your web service will fail.
 *
 * @param {string} [patchPayload.properties.storageAccount.name] Specifies the
 * name of the storage account.
 *
 * @param {string} [patchPayload.properties.storageAccount.key] Specifies the
 * key used to access the storage account.
 *
 * @param {object} [patchPayload.properties.machineLearningWorkspace] Specifies
 * the Machine Learning workspace containing the experiment that is source for
 * the web service.
 *
 * @param {string} patchPayload.properties.machineLearningWorkspace.id
 * Specifies the workspace ID of the machine learning workspace associated with
 * the web service
 *
 * @param {object} [patchPayload.properties.commitmentPlan] Contains the
 * commitment plan associated with this web service. Set at creation time. Once
 * set, this value cannot be changed. Note: The commitment plan is not returned
 * from calls to GET operations.
 *
 * @param {string} patchPayload.properties.commitmentPlan.id Specifies the
 * Azure Resource Manager ID of the commitment plan associated with the web
 * service.
 *
 * @param {object} [patchPayload.properties.input] Contains the Swagger 2.0
 * schema describing one or more of the web service's inputs. For more
 * information, see the Swagger specification.
 *
 * @param {object} [patchPayload.properties.output] Contains the Swagger 2.0
 * schema describing one or more of the web service's outputs. For more
 * information, see the Swagger specification.
 *
 * @param {string} [patchPayload.properties.output.title] The title of your
 * Swagger schema.
 *
 * @param {string} [patchPayload.properties.output.description] The description
 * of the Swagger schema.
 *
 * @param {string} patchPayload.properties.output.type The type of the entity
 * described in swagger. Always 'object'.
 *
 * @param {object} patchPayload.properties.output.properties Specifies a
 * collection that contains the column schema for each input or output of the
 * web service. For more information, see the Swagger specification.
 *
 * @param {object} [patchPayload.properties.exampleRequest] Defines sample
 * input data for one or more of the service's inputs.
 *
 * @param {object} [patchPayload.properties.exampleRequest.inputs] Sample input
 * data for the web service's input(s) given as an input name to sample input
 * values matrix map.
 *
 * @param {object} [patchPayload.properties.exampleRequest.globalParameters]
 * Sample input data for the web service's global parameters
 *
 * @param {object} [patchPayload.properties.assets] Contains user defined
 * properties describing web service assets. Properties are expressed as
 * Key/Value pairs.
 *
 * @param {object} [patchPayload.properties.parameters] The set of global
 * parameters values defined for the web service, given as a global parameter
 * name to default value map. If no default value is specified, the parameter
 * is considered to be required.
 *
 * @param {boolean} [patchPayload.properties.payloadsInBlobStorage] When set to
 * true, indicates that the payload size is larger than 3 MB. Otherwise false.
 * If the payload size exceed 3 MB, the payload is stored in a blob and the
 * PayloadsLocation parameter contains the URI of the blob. Otherwise, this
 * will be set to false and Assets, Input, Output, Package, Parameters,
 * ExampleRequest are inline. The Payload sizes is determined by adding the
 * size of the Assets, Input, Output, Package, Parameters, and the
 * ExampleRequest.
 *
 * @param {object} [patchPayload.properties.payloadsLocation] The URI of the
 * payload blob. This paramater contains a value only if the
 * payloadsInBlobStorage parameter is set to true. Otherwise is set to null.
 *
 * @param {string} patchPayload.properties.payloadsLocation.uri The URI from
 * which the blob is accessible from. For example, aml://abc for system assets
 * or https://xyz for user assets or payload.
 *
 * @param {string} [patchPayload.properties.payloadsLocation.credentials]
 * Access credentials for the blob, if applicable (e.g. blob specified by
 * storage account connection string + blob URI)
 *
 * @param {string} patchPayload.properties.packageType Polymorphic
 * Discriminator
 *
 * @param {string} patchPayload.location Specifies the location of the
 * resource.
 *
 * @param {object} [patchPayload.tags] Contains resource tags defined as
 * key/value pairs.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link WebService} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _patch(resourceGroupName, webServiceName, patchPayload, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }

  if (!callback) {
    throw new Error('callback cannot be null.');
  }

  // Send request
  this.beginPatch(resourceGroupName, webServiceName, patchPayload, options, (err, parsedResult, httpRequest, response) => {
    if (err) return callback(err);

    let initialResult = new msRest.HttpOperationResponse();
    initialResult.request = httpRequest;
    initialResult.response = response;
    initialResult.body = response.body;
    client.getLongRunningOperationResult(initialResult, options, (err, pollingResult) => {
      if (err) return callback(err);

      // Create Result
      let result = null;

      httpRequest = pollingResult.request;
      response = pollingResult.response;
      let responseBody = pollingResult.body;
      if (responseBody === '') responseBody = null;

      // Deserialize Response
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['WebService']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }

      return callback(null, result, httpRequest, response);
    });
  });
}


/**
 * Deletes the specified web service.
 *
 * @param {string} resourceGroupName Name of the resource group in which the
 * web service is located.
 *
 * @param {string} webServiceName The name of the web service.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _remove(resourceGroupName, webServiceName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }

  if (!callback) {
    throw new Error('callback cannot be null.');
  }

  // Send request
  this.beginRemove(resourceGroupName, webServiceName, options, (err, parsedResult, httpRequest, response) => {
    if (err) return callback(err);

    let initialResult = new msRest.HttpOperationResponse();
    initialResult.request = httpRequest;
    initialResult.response = response;
    initialResult.body = response.body;
    client.getLongRunningOperationResult(initialResult, options, (err, pollingResult) => {
      if (err) return callback(err);

      // Create Result
      let result = null;

      httpRequest = pollingResult.request;
      response = pollingResult.response;
      let responseBody = pollingResult.body;
      if (responseBody === '') responseBody = null;

      // Deserialize Response

      return callback(null, result, httpRequest, response);
    });
  });
}


/**
 * Creates an encrypted credentials parameter blob for the specified region. To
 * get the web service from a region other than the region in which it has been
 * created, you must first call Create Regional Web Services Properties to
 * create a copy of the encrypted credential parameter blob in that region. You
 * only need to do this before the first time that you get the web service in
 * the new region.
 *
 * @param {string} resourceGroupName Name of the resource group in which the
 * web service is located.
 *
 * @param {string} webServiceName The name of the web service.
 *
 * @param {string} region The region for which encrypted credential parameters
 * are created.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link AsyncOperationStatus} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _createRegionalProperties(resourceGroupName, webServiceName, region, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }

  if (!callback) {
    throw new Error('callback cannot be null.');
  }

  // Send request
  this.beginCreateRegionalProperties(resourceGroupName, webServiceName, region, options, (err, parsedResult, httpRequest, response) => {
    if (err) return callback(err);

    let initialResult = new msRest.HttpOperationResponse();
    initialResult.request = httpRequest;
    initialResult.response = response;
    initialResult.body = response.body;
    client.getLongRunningOperationResult(initialResult, options, (err, pollingResult) => {
      if (err) return callback(err);

      // Create Result
      let result = null;

      httpRequest = pollingResult.request;
      response = pollingResult.response;
      let responseBody = pollingResult.body;
      if (responseBody === '') responseBody = null;

      // Deserialize Response
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['AsyncOperationStatus']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }

      return callback(null, result, httpRequest, response);
    });
  });
}

/**
 * Gets the access keys for the specified web service.
 *
 * @param {string} resourceGroupName Name of the resource group in which the
 * web service is located.
 *
 * @param {string} webServiceName The name of the web service.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link WebServiceKeys} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _listKeys(resourceGroupName, webServiceName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (webServiceName === null || webServiceName === undefined || typeof webServiceName.valueOf() !== 'string') {
      throw new Error('webServiceName cannot be null or undefined and it must be of type string.');
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearning/webServices/{webServiceName}/listKeys';
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{webServiceName}', encodeURIComponent(webServiceName));
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['WebServiceKeys']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Gets the web services in the specified resource group.
 *
 * @param {string} resourceGroupName Name of the resource group in which the
 * web service is located.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {string} [options.skiptoken] Continuation token for pagination.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link PaginatedWebServicesList} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _listByResourceGroup(resourceGroupName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let skiptoken = (options && options.skiptoken !== undefined) ? options.skiptoken : undefined;
  // Validate
  try {
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (skiptoken !== null && skiptoken !== undefined && typeof skiptoken.valueOf() !== 'string') {
      throw new Error('skiptoken must be of type string.');
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearning/webServices';
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  let queryParameters = [];
  if (skiptoken !== null && skiptoken !== undefined) {
    queryParameters.push('$skiptoken=' + encodeURIComponent(skiptoken));
  }
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['PaginatedWebServicesList']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Gets the web services in the specified subscription.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {string} [options.skiptoken] Continuation token for pagination.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link PaginatedWebServicesList} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _listBySubscriptionId(options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let skiptoken = (options && options.skiptoken !== undefined) ? options.skiptoken : undefined;
  // Validate
  try {
    if (skiptoken !== null && skiptoken !== undefined && typeof skiptoken.valueOf() !== 'string') {
      throw new Error('skiptoken must be of type string.');
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/providers/Microsoft.MachineLearning/webServices';
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  let queryParameters = [];
  if (skiptoken !== null && skiptoken !== undefined) {
    queryParameters.push('$skiptoken=' + encodeURIComponent(skiptoken));
  }
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['PaginatedWebServicesList']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Create or update a web service. This call will overwrite an existing web
 * service. Note that there is no warning or confirmation. This is a
 * nonrecoverable operation. If your intent is to create a new web service,
 * call the Get operation first to verify that it does not exist.
 *
 * @param {string} resourceGroupName Name of the resource group in which the
 * web service is located.
 *
 * @param {string} webServiceName The name of the web service.
 *
 * @param {object} createOrUpdatePayload The payload that is used to create or
 * update the web service.
 *
 * @param {object} createOrUpdatePayload.properties Contains the property
 * payload that describes the web service.
 *
 * @param {string} [createOrUpdatePayload.properties.title] The title of the
 * web service.
 *
 * @param {string} [createOrUpdatePayload.properties.description] The
 * description of the web service.
 *
 * @param {object} [createOrUpdatePayload.properties.keys] Contains the web
 * service provisioning keys. If you do not specify provisioning keys, the
 * Azure Machine Learning system generates them for you. Note: The keys are not
 * returned from calls to GET operations.
 *
 * @param {string} [createOrUpdatePayload.properties.keys.primary] The primary
 * access key.
 *
 * @param {string} [createOrUpdatePayload.properties.keys.secondary] The
 * secondary access key.
 *
 * @param {boolean} [createOrUpdatePayload.properties.readOnly] When set to
 * true, indicates that the web service is read-only and can no longer be
 * updated or patched, only removed. Default, is false. Note: Once set to true,
 * you cannot change its value.
 *
 * @param {boolean} [createOrUpdatePayload.properties.exposeSampleData] When
 * set to true, sample data is included in the web service's swagger
 * definition. The default value is true.
 *
 * @param {object} [createOrUpdatePayload.properties.realtimeConfiguration]
 * Contains the configuration settings for the web service endpoint.
 *
 * @param {number}
 * [createOrUpdatePayload.properties.realtimeConfiguration.maxConcurrentCalls]
 * Specifies the maximum concurrent calls that can be made to the web service.
 * Minimum value: 4, Maximum value: 200.
 *
 * @param {object} [createOrUpdatePayload.properties.diagnostics] Settings
 * controlling the diagnostics traces collection for the web service.
 *
 * @param {string} createOrUpdatePayload.properties.diagnostics.level Specifies
 * the verbosity of the diagnostic output. Valid values are: None - disables
 * tracing; Error - collects only error (stderr) traces; All - collects all
 * traces (stdout and stderr). Possible values include: 'None', 'Error', 'All'
 *
 * @param {date} [createOrUpdatePayload.properties.diagnostics.expiry]
 * Specifies the date and time when the logging will cease. If null, diagnostic
 * collection is not time limited.
 *
 * @param {object} [createOrUpdatePayload.properties.storageAccount] Specifies
 * the storage account that Azure Machine Learning uses to store information
 * about the web service. Only the name of the storage account is returned from
 * calls to GET operations. When updating the storage account information, you
 * must ensure that all necessary assets are available in the new storage
 * account or calls to your web service will fail.
 *
 * @param {string} [createOrUpdatePayload.properties.storageAccount.name]
 * Specifies the name of the storage account.
 *
 * @param {string} [createOrUpdatePayload.properties.storageAccount.key]
 * Specifies the key used to access the storage account.
 *
 * @param {object} [createOrUpdatePayload.properties.machineLearningWorkspace]
 * Specifies the Machine Learning workspace containing the experiment that is
 * source for the web service.
 *
 * @param {string} createOrUpdatePayload.properties.machineLearningWorkspace.id
 * Specifies the workspace ID of the machine learning workspace associated with
 * the web service
 *
 * @param {object} [createOrUpdatePayload.properties.commitmentPlan] Contains
 * the commitment plan associated with this web service. Set at creation time.
 * Once set, this value cannot be changed. Note: The commitment plan is not
 * returned from calls to GET operations.
 *
 * @param {string} createOrUpdatePayload.properties.commitmentPlan.id Specifies
 * the Azure Resource Manager ID of the commitment plan associated with the web
 * service.
 *
 * @param {object} [createOrUpdatePayload.properties.input] Contains the
 * Swagger 2.0 schema describing one or more of the web service's inputs. For
 * more information, see the Swagger specification.
 *
 * @param {object} [createOrUpdatePayload.properties.output] Contains the
 * Swagger 2.0 schema describing one or more of the web service's outputs. For
 * more information, see the Swagger specification.
 *
 * @param {string} [createOrUpdatePayload.properties.output.title] The title of
 * your Swagger schema.
 *
 * @param {string} [createOrUpdatePayload.properties.output.description] The
 * description of the Swagger schema.
 *
 * @param {string} createOrUpdatePayload.properties.output.type The type of the
 * entity described in swagger. Always 'object'.
 *
 * @param {object} createOrUpdatePayload.properties.output.properties Specifies
 * a collection that contains the column schema for each input or output of the
 * web service. For more information, see the Swagger specification.
 *
 * @param {object} [createOrUpdatePayload.properties.exampleRequest] Defines
 * sample input data for one or more of the service's inputs.
 *
 * @param {object} [createOrUpdatePayload.properties.exampleRequest.inputs]
 * Sample input data for the web service's input(s) given as an input name to
 * sample input values matrix map.
 *
 * @param {object}
 * [createOrUpdatePayload.properties.exampleRequest.globalParameters] Sample
 * input data for the web service's global parameters
 *
 * @param {object} [createOrUpdatePayload.properties.assets] Contains user
 * defined properties describing web service assets. Properties are expressed
 * as Key/Value pairs.
 *
 * @param {object} [createOrUpdatePayload.properties.parameters] The set of
 * global parameters values defined for the web service, given as a global
 * parameter name to default value map. If no default value is specified, the
 * parameter is considered to be required.
 *
 * @param {boolean} [createOrUpdatePayload.properties.payloadsInBlobStorage]
 * When set to true, indicates that the payload size is larger than 3 MB.
 * Otherwise false. If the payload size exceed 3 MB, the payload is stored in a
 * blob and the PayloadsLocation parameter contains the URI of the blob.
 * Otherwise, this will be set to false and Assets, Input, Output, Package,
 * Parameters, ExampleRequest are inline. The Payload sizes is determined by
 * adding the size of the Assets, Input, Output, Package, Parameters, and the
 * ExampleRequest.
 *
 * @param {object} [createOrUpdatePayload.properties.payloadsLocation] The URI
 * of the payload blob. This paramater contains a value only if the
 * payloadsInBlobStorage parameter is set to true. Otherwise is set to null.
 *
 * @param {string} createOrUpdatePayload.properties.payloadsLocation.uri The
 * URI from which the blob is accessible from. For example, aml://abc for
 * system assets or https://xyz for user assets or payload.
 *
 * @param {string}
 * [createOrUpdatePayload.properties.payloadsLocation.credentials] Access
 * credentials for the blob, if applicable (e.g. blob specified by storage
 * account connection string + blob URI)
 *
 * @param {string} createOrUpdatePayload.properties.packageType Polymorphic
 * Discriminator
 *
 * @param {string} createOrUpdatePayload.location Specifies the location of the
 * resource.
 *
 * @param {object} [createOrUpdatePayload.tags] Contains resource tags defined
 * as key/value pairs.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link WebService} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _beginCreateOrUpdate(resourceGroupName, webServiceName, createOrUpdatePayload, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (webServiceName === null || webServiceName === undefined || typeof webServiceName.valueOf() !== 'string') {
      throw new Error('webServiceName cannot be null or undefined and it must be of type string.');
    }
    if (createOrUpdatePayload === null || createOrUpdatePayload === undefined) {
      throw new Error('createOrUpdatePayload cannot be null or undefined.');
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearning/webServices/{webServiceName}';
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{webServiceName}', encodeURIComponent(webServiceName));
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PUT';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (createOrUpdatePayload !== null && createOrUpdatePayload !== undefined) {
      let requestModelMapper = new client.models['WebService']().mapper();
      requestModel = client.serialize(requestModelMapper, createOrUpdatePayload, 'createOrUpdatePayload');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(createOrUpdatePayload, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200 && statusCode !== 201) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['WebService']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }
    // Deserialize Response
    if (statusCode === 201) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['WebService']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError1 = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError1.request = msRest.stripRequest(httpRequest);
        deserializationError1.response = msRest.stripResponse(response);
        return callback(deserializationError1);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Modifies an existing web service resource. The PATCH API call is an
 * asynchronous operation. To determine whether it has completed successfully,
 * you must perform a Get operation.
 *
 * @param {string} resourceGroupName Name of the resource group in which the
 * web service is located.
 *
 * @param {string} webServiceName The name of the web service.
 *
 * @param {object} patchPayload The payload to use to patch the web service.
 *
 * @param {object} patchPayload.properties Contains the property payload that
 * describes the web service.
 *
 * @param {string} [patchPayload.properties.title] The title of the web
 * service.
 *
 * @param {string} [patchPayload.properties.description] The description of the
 * web service.
 *
 * @param {object} [patchPayload.properties.keys] Contains the web service
 * provisioning keys. If you do not specify provisioning keys, the Azure
 * Machine Learning system generates them for you. Note: The keys are not
 * returned from calls to GET operations.
 *
 * @param {string} [patchPayload.properties.keys.primary] The primary access
 * key.
 *
 * @param {string} [patchPayload.properties.keys.secondary] The secondary
 * access key.
 *
 * @param {boolean} [patchPayload.properties.readOnly] When set to true,
 * indicates that the web service is read-only and can no longer be updated or
 * patched, only removed. Default, is false. Note: Once set to true, you cannot
 * change its value.
 *
 * @param {boolean} [patchPayload.properties.exposeSampleData] When set to
 * true, sample data is included in the web service's swagger definition. The
 * default value is true.
 *
 * @param {object} [patchPayload.properties.realtimeConfiguration] Contains the
 * configuration settings for the web service endpoint.
 *
 * @param {number}
 * [patchPayload.properties.realtimeConfiguration.maxConcurrentCalls] Specifies
 * the maximum concurrent calls that can be made to the web service. Minimum
 * value: 4, Maximum value: 200.
 *
 * @param {object} [patchPayload.properties.diagnostics] Settings controlling
 * the diagnostics traces collection for the web service.
 *
 * @param {string} patchPayload.properties.diagnostics.level Specifies the
 * verbosity of the diagnostic output. Valid values are: None - disables
 * tracing; Error - collects only error (stderr) traces; All - collects all
 * traces (stdout and stderr). Possible values include: 'None', 'Error', 'All'
 *
 * @param {date} [patchPayload.properties.diagnostics.expiry] Specifies the
 * date and time when the logging will cease. If null, diagnostic collection is
 * not time limited.
 *
 * @param {object} [patchPayload.properties.storageAccount] Specifies the
 * storage account that Azure Machine Learning uses to store information about
 * the web service. Only the name of the storage account is returned from calls
 * to GET operations. When updating the storage account information, you must
 * ensure that all necessary assets are available in the new storage account or
 * calls to your web service will fail.
 *
 * @param {string} [patchPayload.properties.storageAccount.name] Specifies the
 * name of the storage account.
 *
 * @param {string} [patchPayload.properties.storageAccount.key] Specifies the
 * key used to access the storage account.
 *
 * @param {object} [patchPayload.properties.machineLearningWorkspace] Specifies
 * the Machine Learning workspace containing the experiment that is source for
 * the web service.
 *
 * @param {string} patchPayload.properties.machineLearningWorkspace.id
 * Specifies the workspace ID of the machine learning workspace associated with
 * the web service
 *
 * @param {object} [patchPayload.properties.commitmentPlan] Contains the
 * commitment plan associated with this web service. Set at creation time. Once
 * set, this value cannot be changed. Note: The commitment plan is not returned
 * from calls to GET operations.
 *
 * @param {string} patchPayload.properties.commitmentPlan.id Specifies the
 * Azure Resource Manager ID of the commitment plan associated with the web
 * service.
 *
 * @param {object} [patchPayload.properties.input] Contains the Swagger 2.0
 * schema describing one or more of the web service's inputs. For more
 * information, see the Swagger specification.
 *
 * @param {object} [patchPayload.properties.output] Contains the Swagger 2.0
 * schema describing one or more of the web service's outputs. For more
 * information, see the Swagger specification.
 *
 * @param {string} [patchPayload.properties.output.title] The title of your
 * Swagger schema.
 *
 * @param {string} [patchPayload.properties.output.description] The description
 * of the Swagger schema.
 *
 * @param {string} patchPayload.properties.output.type The type of the entity
 * described in swagger. Always 'object'.
 *
 * @param {object} patchPayload.properties.output.properties Specifies a
 * collection that contains the column schema for each input or output of the
 * web service. For more information, see the Swagger specification.
 *
 * @param {object} [patchPayload.properties.exampleRequest] Defines sample
 * input data for one or more of the service's inputs.
 *
 * @param {object} [patchPayload.properties.exampleRequest.inputs] Sample input
 * data for the web service's input(s) given as an input name to sample input
 * values matrix map.
 *
 * @param {object} [patchPayload.properties.exampleRequest.globalParameters]
 * Sample input data for the web service's global parameters
 *
 * @param {object} [patchPayload.properties.assets] Contains user defined
 * properties describing web service assets. Properties are expressed as
 * Key/Value pairs.
 *
 * @param {object} [patchPayload.properties.parameters] The set of global
 * parameters values defined for the web service, given as a global parameter
 * name to default value map. If no default value is specified, the parameter
 * is considered to be required.
 *
 * @param {boolean} [patchPayload.properties.payloadsInBlobStorage] When set to
 * true, indicates that the payload size is larger than 3 MB. Otherwise false.
 * If the payload size exceed 3 MB, the payload is stored in a blob and the
 * PayloadsLocation parameter contains the URI of the blob. Otherwise, this
 * will be set to false and Assets, Input, Output, Package, Parameters,
 * ExampleRequest are inline. The Payload sizes is determined by adding the
 * size of the Assets, Input, Output, Package, Parameters, and the
 * ExampleRequest.
 *
 * @param {object} [patchPayload.properties.payloadsLocation] The URI of the
 * payload blob. This paramater contains a value only if the
 * payloadsInBlobStorage parameter is set to true. Otherwise is set to null.
 *
 * @param {string} patchPayload.properties.payloadsLocation.uri The URI from
 * which the blob is accessible from. For example, aml://abc for system assets
 * or https://xyz for user assets or payload.
 *
 * @param {string} [patchPayload.properties.payloadsLocation.credentials]
 * Access credentials for the blob, if applicable (e.g. blob specified by
 * storage account connection string + blob URI)
 *
 * @param {string} patchPayload.properties.packageType Polymorphic
 * Discriminator
 *
 * @param {string} patchPayload.location Specifies the location of the
 * resource.
 *
 * @param {object} [patchPayload.tags] Contains resource tags defined as
 * key/value pairs.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link WebService} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _beginPatch(resourceGroupName, webServiceName, patchPayload, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (webServiceName === null || webServiceName === undefined || typeof webServiceName.valueOf() !== 'string') {
      throw new Error('webServiceName cannot be null or undefined and it must be of type string.');
    }
    if (patchPayload === null || patchPayload === undefined) {
      throw new Error('patchPayload cannot be null or undefined.');
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearning/webServices/{webServiceName}';
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{webServiceName}', encodeURIComponent(webServiceName));
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PATCH';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (patchPayload !== null && patchPayload !== undefined) {
      let requestModelMapper = new client.models['WebService']().mapper();
      requestModel = client.serialize(requestModelMapper, patchPayload, 'patchPayload');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(patchPayload, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['WebService']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Deletes the specified web service.
 *
 * @param {string} resourceGroupName Name of the resource group in which the
 * web service is located.
 *
 * @param {string} webServiceName The name of the web service.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _beginRemove(resourceGroupName, webServiceName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (webServiceName === null || webServiceName === undefined || typeof webServiceName.valueOf() !== 'string') {
      throw new Error('webServiceName cannot be null or undefined and it must be of type string.');
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearning/webServices/{webServiceName}';
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{webServiceName}', encodeURIComponent(webServiceName));
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'DELETE';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 202 && statusCode !== 204) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Creates an encrypted credentials parameter blob for the specified region. To
 * get the web service from a region other than the region in which it has been
 * created, you must first call Create Regional Web Services Properties to
 * create a copy of the encrypted credential parameter blob in that region. You
 * only need to do this before the first time that you get the web service in
 * the new region.
 *
 * @param {string} resourceGroupName Name of the resource group in which the
 * web service is located.
 *
 * @param {string} webServiceName The name of the web service.
 *
 * @param {string} region The region for which encrypted credential parameters
 * are created.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link AsyncOperationStatus} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _beginCreateRegionalProperties(resourceGroupName, webServiceName, region, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (webServiceName === null || webServiceName === undefined || typeof webServiceName.valueOf() !== 'string') {
      throw new Error('webServiceName cannot be null or undefined and it must be of type string.');
    }
    if (region === null || region === undefined || typeof region.valueOf() !== 'string') {
      throw new Error('region cannot be null or undefined and it must be of type string.');
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearning/webServices/{webServiceName}/CreateRegionalBlob';
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{webServiceName}', encodeURIComponent(webServiceName));
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  let queryParameters = [];
  queryParameters.push('region=' + encodeURIComponent(region));
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 202 && statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['AsyncOperationStatus']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Gets the web services in the specified resource group.
 *
 * @param {string} nextPageLink The NextLink from the previous successful call
 * to List operation.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link PaginatedWebServicesList} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _listByResourceGroupNext(nextPageLink, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {
      throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let requestUrl = '{nextLink}';
  requestUrl = requestUrl.replace('{nextLink}', nextPageLink);

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['PaginatedWebServicesList']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Gets the web services in the specified subscription.
 *
 * @param {string} nextPageLink The NextLink from the previous successful call
 * to List operation.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link PaginatedWebServicesList} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _listBySubscriptionIdNext(nextPageLink, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {
      throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let requestUrl = '{nextLink}';
  requestUrl = requestUrl.replace('{nextLink}', nextPageLink);

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['PaginatedWebServicesList']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/** Class representing a WebServices. */
class WebServices {
  /**
   * Create a WebServices.
   * @param {AzureMLWebServicesManagementClient} client Reference to the service client.
   */
  constructor(client) {
    this.client = client;
    this._createOrUpdate = _createOrUpdate;
    this._get = _get;
    this._patch = _patch;
    this._remove = _remove;
    this._createRegionalProperties = _createRegionalProperties;
    this._listKeys = _listKeys;
    this._listByResourceGroup = _listByResourceGroup;
    this._listBySubscriptionId = _listBySubscriptionId;
    this._beginCreateOrUpdate = _beginCreateOrUpdate;
    this._beginPatch = _beginPatch;
    this._beginRemove = _beginRemove;
    this._beginCreateRegionalProperties = _beginCreateRegionalProperties;
    this._listByResourceGroupNext = _listByResourceGroupNext;
    this._listBySubscriptionIdNext = _listBySubscriptionIdNext;
  }

  /**
   * Create or update a web service. This call will overwrite an existing web
   * service. Note that there is no warning or confirmation. This is a
   * nonrecoverable operation. If your intent is to create a new web service,
   * call the Get operation first to verify that it does not exist.
   *
   * @param {string} resourceGroupName Name of the resource group in which the
   * web service is located.
   *
   * @param {string} webServiceName The name of the web service.
   *
   * @param {object} createOrUpdatePayload The payload that is used to create or
   * update the web service.
   *
   * @param {object} createOrUpdatePayload.properties Contains the property
   * payload that describes the web service.
   *
   * @param {string} [createOrUpdatePayload.properties.title] The title of the
   * web service.
   *
   * @param {string} [createOrUpdatePayload.properties.description] The
   * description of the web service.
   *
   * @param {object} [createOrUpdatePayload.properties.keys] Contains the web
   * service provisioning keys. If you do not specify provisioning keys, the
   * Azure Machine Learning system generates them for you. Note: The keys are not
   * returned from calls to GET operations.
   *
   * @param {string} [createOrUpdatePayload.properties.keys.primary] The primary
   * access key.
   *
   * @param {string} [createOrUpdatePayload.properties.keys.secondary] The
   * secondary access key.
   *
   * @param {boolean} [createOrUpdatePayload.properties.readOnly] When set to
   * true, indicates that the web service is read-only and can no longer be
   * updated or patched, only removed. Default, is false. Note: Once set to true,
   * you cannot change its value.
   *
   * @param {boolean} [createOrUpdatePayload.properties.exposeSampleData] When
   * set to true, sample data is included in the web service's swagger
   * definition. The default value is true.
   *
   * @param {object} [createOrUpdatePayload.properties.realtimeConfiguration]
   * Contains the configuration settings for the web service endpoint.
   *
   * @param {number}
   * [createOrUpdatePayload.properties.realtimeConfiguration.maxConcurrentCalls]
   * Specifies the maximum concurrent calls that can be made to the web service.
   * Minimum value: 4, Maximum value: 200.
   *
   * @param {object} [createOrUpdatePayload.properties.diagnostics] Settings
   * controlling the diagnostics traces collection for the web service.
   *
   * @param {string} createOrUpdatePayload.properties.diagnostics.level Specifies
   * the verbosity of the diagnostic output. Valid values are: None - disables
   * tracing; Error - collects only error (stderr) traces; All - collects all
   * traces (stdout and stderr). Possible values include: 'None', 'Error', 'All'
   *
   * @param {date} [createOrUpdatePayload.properties.diagnostics.expiry]
   * Specifies the date and time when the logging will cease. If null, diagnostic
   * collection is not time limited.
   *
   * @param {object} [createOrUpdatePayload.properties.storageAccount] Specifies
   * the storage account that Azure Machine Learning uses to store information
   * about the web service. Only the name of the storage account is returned from
   * calls to GET operations. When updating the storage account information, you
   * must ensure that all necessary assets are available in the new storage
   * account or calls to your web service will fail.
   *
   * @param {string} [createOrUpdatePayload.properties.storageAccount.name]
   * Specifies the name of the storage account.
   *
   * @param {string} [createOrUpdatePayload.properties.storageAccount.key]
   * Specifies the key used to access the storage account.
   *
   * @param {object} [createOrUpdatePayload.properties.machineLearningWorkspace]
   * Specifies the Machine Learning workspace containing the experiment that is
   * source for the web service.
   *
   * @param {string} createOrUpdatePayload.properties.machineLearningWorkspace.id
   * Specifies the workspace ID of the machine learning workspace associated with
   * the web service
   *
   * @param {object} [createOrUpdatePayload.properties.commitmentPlan] Contains
   * the commitment plan associated with this web service. Set at creation time.
   * Once set, this value cannot be changed. Note: The commitment plan is not
   * returned from calls to GET operations.
   *
   * @param {string} createOrUpdatePayload.properties.commitmentPlan.id Specifies
   * the Azure Resource Manager ID of the commitment plan associated with the web
   * service.
   *
   * @param {object} [createOrUpdatePayload.properties.input] Contains the
   * Swagger 2.0 schema describing one or more of the web service's inputs. For
   * more information, see the Swagger specification.
   *
   * @param {object} [createOrUpdatePayload.properties.output] Contains the
   * Swagger 2.0 schema describing one or more of the web service's outputs. For
   * more information, see the Swagger specification.
   *
   * @param {string} [createOrUpdatePayload.properties.output.title] The title of
   * your Swagger schema.
   *
   * @param {string} [createOrUpdatePayload.properties.output.description] The
   * description of the Swagger schema.
   *
   * @param {string} createOrUpdatePayload.properties.output.type The type of the
   * entity described in swagger. Always 'object'.
   *
   * @param {object} createOrUpdatePayload.properties.output.properties Specifies
   * a collection that contains the column schema for each input or output of the
   * web service. For more information, see the Swagger specification.
   *
   * @param {object} [createOrUpdatePayload.properties.exampleRequest] Defines
   * sample input data for one or more of the service's inputs.
   *
   * @param {object} [createOrUpdatePayload.properties.exampleRequest.inputs]
   * Sample input data for the web service's input(s) given as an input name to
   * sample input values matrix map.
   *
   * @param {object}
   * [createOrUpdatePayload.properties.exampleRequest.globalParameters] Sample
   * input data for the web service's global parameters
   *
   * @param {object} [createOrUpdatePayload.properties.assets] Contains user
   * defined properties describing web service assets. Properties are expressed
   * as Key/Value pairs.
   *
   * @param {object} [createOrUpdatePayload.properties.parameters] The set of
   * global parameters values defined for the web service, given as a global
   * parameter name to default value map. If no default value is specified, the
   * parameter is considered to be required.
   *
   * @param {boolean} [createOrUpdatePayload.properties.payloadsInBlobStorage]
   * When set to true, indicates that the payload size is larger than 3 MB.
   * Otherwise false. If the payload size exceed 3 MB, the payload is stored in a
   * blob and the PayloadsLocation parameter contains the URI of the blob.
   * Otherwise, this will be set to false and Assets, Input, Output, Package,
   * Parameters, ExampleRequest are inline. The Payload sizes is determined by
   * adding the size of the Assets, Input, Output, Package, Parameters, and the
   * ExampleRequest.
   *
   * @param {object} [createOrUpdatePayload.properties.payloadsLocation] The URI
   * of the payload blob. This paramater contains a value only if the
   * payloadsInBlobStorage parameter is set to true. Otherwise is set to null.
   *
   * @param {string} createOrUpdatePayload.properties.payloadsLocation.uri The
   * URI from which the blob is accessible from. For example, aml://abc for
   * system assets or https://xyz for user assets or payload.
   *
   * @param {string}
   * [createOrUpdatePayload.properties.payloadsLocation.credentials] Access
   * credentials for the blob, if applicable (e.g. blob specified by storage
   * account connection string + blob URI)
   *
   * @param {string} createOrUpdatePayload.properties.packageType Polymorphic
   * Discriminator
   *
   * @param {string} createOrUpdatePayload.location Specifies the location of the
   * resource.
   *
   * @param {object} [createOrUpdatePayload.tags] Contains resource tags defined
   * as key/value pairs.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<WebService>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  createOrUpdateWithHttpOperationResponse(resourceGroupName, webServiceName, createOrUpdatePayload, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._createOrUpdate(resourceGroupName, webServiceName, createOrUpdatePayload, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Create or update a web service. This call will overwrite an existing web
   * service. Note that there is no warning or confirmation. This is a
   * nonrecoverable operation. If your intent is to create a new web service,
   * call the Get operation first to verify that it does not exist.
   *
   * @param {string} resourceGroupName Name of the resource group in which the
   * web service is located.
   *
   * @param {string} webServiceName The name of the web service.
   *
   * @param {object} createOrUpdatePayload The payload that is used to create or
   * update the web service.
   *
   * @param {object} createOrUpdatePayload.properties Contains the property
   * payload that describes the web service.
   *
   * @param {string} [createOrUpdatePayload.properties.title] The title of the
   * web service.
   *
   * @param {string} [createOrUpdatePayload.properties.description] The
   * description of the web service.
   *
   * @param {object} [createOrUpdatePayload.properties.keys] Contains the web
   * service provisioning keys. If you do not specify provisioning keys, the
   * Azure Machine Learning system generates them for you. Note: The keys are not
   * returned from calls to GET operations.
   *
   * @param {string} [createOrUpdatePayload.properties.keys.primary] The primary
   * access key.
   *
   * @param {string} [createOrUpdatePayload.properties.keys.secondary] The
   * secondary access key.
   *
   * @param {boolean} [createOrUpdatePayload.properties.readOnly] When set to
   * true, indicates that the web service is read-only and can no longer be
   * updated or patched, only removed. Default, is false. Note: Once set to true,
   * you cannot change its value.
   *
   * @param {boolean} [createOrUpdatePayload.properties.exposeSampleData] When
   * set to true, sample data is included in the web service's swagger
   * definition. The default value is true.
   *
   * @param {object} [createOrUpdatePayload.properties.realtimeConfiguration]
   * Contains the configuration settings for the web service endpoint.
   *
   * @param {number}
   * [createOrUpdatePayload.properties.realtimeConfiguration.maxConcurrentCalls]
   * Specifies the maximum concurrent calls that can be made to the web service.
   * Minimum value: 4, Maximum value: 200.
   *
   * @param {object} [createOrUpdatePayload.properties.diagnostics] Settings
   * controlling the diagnostics traces collection for the web service.
   *
   * @param {string} createOrUpdatePayload.properties.diagnostics.level Specifies
   * the verbosity of the diagnostic output. Valid values are: None - disables
   * tracing; Error - collects only error (stderr) traces; All - collects all
   * traces (stdout and stderr). Possible values include: 'None', 'Error', 'All'
   *
   * @param {date} [createOrUpdatePayload.properties.diagnostics.expiry]
   * Specifies the date and time when the logging will cease. If null, diagnostic
   * collection is not time limited.
   *
   * @param {object} [createOrUpdatePayload.properties.storageAccount] Specifies
   * the storage account that Azure Machine Learning uses to store information
   * about the web service. Only the name of the storage account is returned from
   * calls to GET operations. When updating the storage account information, you
   * must ensure that all necessary assets are available in the new storage
   * account or calls to your web service will fail.
   *
   * @param {string} [createOrUpdatePayload.properties.storageAccount.name]
   * Specifies the name of the storage account.
   *
   * @param {string} [createOrUpdatePayload.properties.storageAccount.key]
   * Specifies the key used to access the storage account.
   *
   * @param {object} [createOrUpdatePayload.properties.machineLearningWorkspace]
   * Specifies the Machine Learning workspace containing the experiment that is
   * source for the web service.
   *
   * @param {string} createOrUpdatePayload.properties.machineLearningWorkspace.id
   * Specifies the workspace ID of the machine learning workspace associated with
   * the web service
   *
   * @param {object} [createOrUpdatePayload.properties.commitmentPlan] Contains
   * the commitment plan associated with this web service. Set at creation time.
   * Once set, this value cannot be changed. Note: The commitment plan is not
   * returned from calls to GET operations.
   *
   * @param {string} createOrUpdatePayload.properties.commitmentPlan.id Specifies
   * the Azure Resource Manager ID of the commitment plan associated with the web
   * service.
   *
   * @param {object} [createOrUpdatePayload.properties.input] Contains the
   * Swagger 2.0 schema describing one or more of the web service's inputs. For
   * more information, see the Swagger specification.
   *
   * @param {object} [createOrUpdatePayload.properties.output] Contains the
   * Swagger 2.0 schema describing one or more of the web service's outputs. For
   * more information, see the Swagger specification.
   *
   * @param {string} [createOrUpdatePayload.properties.output.title] The title of
   * your Swagger schema.
   *
   * @param {string} [createOrUpdatePayload.properties.output.description] The
   * description of the Swagger schema.
   *
   * @param {string} createOrUpdatePayload.properties.output.type The type of the
   * entity described in swagger. Always 'object'.
   *
   * @param {object} createOrUpdatePayload.properties.output.properties Specifies
   * a collection that contains the column schema for each input or output of the
   * web service. For more information, see the Swagger specification.
   *
   * @param {object} [createOrUpdatePayload.properties.exampleRequest] Defines
   * sample input data for one or more of the service's inputs.
   *
   * @param {object} [createOrUpdatePayload.properties.exampleRequest.inputs]
   * Sample input data for the web service's input(s) given as an input name to
   * sample input values matrix map.
   *
   * @param {object}
   * [createOrUpdatePayload.properties.exampleRequest.globalParameters] Sample
   * input data for the web service's global parameters
   *
   * @param {object} [createOrUpdatePayload.properties.assets] Contains user
   * defined properties describing web service assets. Properties are expressed
   * as Key/Value pairs.
   *
   * @param {object} [createOrUpdatePayload.properties.parameters] The set of
   * global parameters values defined for the web service, given as a global
   * parameter name to default value map. If no default value is specified, the
   * parameter is considered to be required.
   *
   * @param {boolean} [createOrUpdatePayload.properties.payloadsInBlobStorage]
   * When set to true, indicates that the payload size is larger than 3 MB.
   * Otherwise false. If the payload size exceed 3 MB, the payload is stored in a
   * blob and the PayloadsLocation parameter contains the URI of the blob.
   * Otherwise, this will be set to false and Assets, Input, Output, Package,
   * Parameters, ExampleRequest are inline. The Payload sizes is determined by
   * adding the size of the Assets, Input, Output, Package, Parameters, and the
   * ExampleRequest.
   *
   * @param {object} [createOrUpdatePayload.properties.payloadsLocation] The URI
   * of the payload blob. This paramater contains a value only if the
   * payloadsInBlobStorage parameter is set to true. Otherwise is set to null.
   *
   * @param {string} createOrUpdatePayload.properties.payloadsLocation.uri The
   * URI from which the blob is accessible from. For example, aml://abc for
   * system assets or https://xyz for user assets or payload.
   *
   * @param {string}
   * [createOrUpdatePayload.properties.payloadsLocation.credentials] Access
   * credentials for the blob, if applicable (e.g. blob specified by storage
   * account connection string + blob URI)
   *
   * @param {string} createOrUpdatePayload.properties.packageType Polymorphic
   * Discriminator
   *
   * @param {string} createOrUpdatePayload.location Specifies the location of the
   * resource.
   *
   * @param {object} [createOrUpdatePayload.tags] Contains resource tags defined
   * as key/value pairs.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {WebService} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link WebService} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  createOrUpdate(resourceGroupName, webServiceName, createOrUpdatePayload, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._createOrUpdate(resourceGroupName, webServiceName, createOrUpdatePayload, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._createOrUpdate(resourceGroupName, webServiceName, createOrUpdatePayload, options, optionalCallback);
    }
  }

  /**
   * Gets the Web Service Definition as specified by a subscription, resource
   * group, and name. Note that the storage credentials and web service keys are
   * not returned by this call. To get the web service access keys, call List
   * Keys.
   *
   * @param {string} resourceGroupName Name of the resource group in which the
   * web service is located.
   *
   * @param {string} webServiceName The name of the web service.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.region] The region for which encrypted credential
   * parameters are valid.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<WebService>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getWithHttpOperationResponse(resourceGroupName, webServiceName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._get(resourceGroupName, webServiceName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Gets the Web Service Definition as specified by a subscription, resource
   * group, and name. Note that the storage credentials and web service keys are
   * not returned by this call. To get the web service access keys, call List
   * Keys.
   *
   * @param {string} resourceGroupName Name of the resource group in which the
   * web service is located.
   *
   * @param {string} webServiceName The name of the web service.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.region] The region for which encrypted credential
   * parameters are valid.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {WebService} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link WebService} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  get(resourceGroupName, webServiceName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._get(resourceGroupName, webServiceName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._get(resourceGroupName, webServiceName, options, optionalCallback);
    }
  }

  /**
   * Modifies an existing web service resource. The PATCH API call is an
   * asynchronous operation. To determine whether it has completed successfully,
   * you must perform a Get operation.
   *
   * @param {string} resourceGroupName Name of the resource group in which the
   * web service is located.
   *
   * @param {string} webServiceName The name of the web service.
   *
   * @param {object} patchPayload The payload to use to patch the web service.
   *
   * @param {object} patchPayload.properties Contains the property payload that
   * describes the web service.
   *
   * @param {string} [patchPayload.properties.title] The title of the web
   * service.
   *
   * @param {string} [patchPayload.properties.description] The description of the
   * web service.
   *
   * @param {object} [patchPayload.properties.keys] Contains the web service
   * provisioning keys. If you do not specify provisioning keys, the Azure
   * Machine Learning system generates them for you. Note: The keys are not
   * returned from calls to GET operations.
   *
   * @param {string} [patchPayload.properties.keys.primary] The primary access
   * key.
   *
   * @param {string} [patchPayload.properties.keys.secondary] The secondary
   * access key.
   *
   * @param {boolean} [patchPayload.properties.readOnly] When set to true,
   * indicates that the web service is read-only and can no longer be updated or
   * patched, only removed. Default, is false. Note: Once set to true, you cannot
   * change its value.
   *
   * @param {boolean} [patchPayload.properties.exposeSampleData] When set to
   * true, sample data is included in the web service's swagger definition. The
   * default value is true.
   *
   * @param {object} [patchPayload.properties.realtimeConfiguration] Contains the
   * configuration settings for the web service endpoint.
   *
   * @param {number}
   * [patchPayload.properties.realtimeConfiguration.maxConcurrentCalls] Specifies
   * the maximum concurrent calls that can be made to the web service. Minimum
   * value: 4, Maximum value: 200.
   *
   * @param {object} [patchPayload.properties.diagnostics] Settings controlling
   * the diagnostics traces collection for the web service.
   *
   * @param {string} patchPayload.properties.diagnostics.level Specifies the
   * verbosity of the diagnostic output. Valid values are: None - disables
   * tracing; Error - collects only error (stderr) traces; All - collects all
   * traces (stdout and stderr). Possible values include: 'None', 'Error', 'All'
   *
   * @param {date} [patchPayload.properties.diagnostics.expiry] Specifies the
   * date and time when the logging will cease. If null, diagnostic collection is
   * not time limited.
   *
   * @param {object} [patchPayload.properties.storageAccount] Specifies the
   * storage account that Azure Machine Learning uses to store information about
   * the web service. Only the name of the storage account is returned from calls
   * to GET operations. When updating the storage account information, you must
   * ensure that all necessary assets are available in the new storage account or
   * calls to your web service will fail.
   *
   * @param {string} [patchPayload.properties.storageAccount.name] Specifies the
   * name of the storage account.
   *
   * @param {string} [patchPayload.properties.storageAccount.key] Specifies the
   * key used to access the storage account.
   *
   * @param {object} [patchPayload.properties.machineLearningWorkspace] Specifies
   * the Machine Learning workspace containing the experiment that is source for
   * the web service.
   *
   * @param {string} patchPayload.properties.machineLearningWorkspace.id
   * Specifies the workspace ID of the machine learning workspace associated with
   * the web service
   *
   * @param {object} [patchPayload.properties.commitmentPlan] Contains the
   * commitment plan associated with this web service. Set at creation time. Once
   * set, this value cannot be changed. Note: The commitment plan is not returned
   * from calls to GET operations.
   *
   * @param {string} patchPayload.properties.commitmentPlan.id Specifies the
   * Azure Resource Manager ID of the commitment plan associated with the web
   * service.
   *
   * @param {object} [patchPayload.properties.input] Contains the Swagger 2.0
   * schema describing one or more of the web service's inputs. For more
   * information, see the Swagger specification.
   *
   * @param {object} [patchPayload.properties.output] Contains the Swagger 2.0
   * schema describing one or more of the web service's outputs. For more
   * information, see the Swagger specification.
   *
   * @param {string} [patchPayload.properties.output.title] The title of your
   * Swagger schema.
   *
   * @param {string} [patchPayload.properties.output.description] The description
   * of the Swagger schema.
   *
   * @param {string} patchPayload.properties.output.type The type of the entity
   * described in swagger. Always 'object'.
   *
   * @param {object} patchPayload.properties.output.properties Specifies a
   * collection that contains the column schema for each input or output of the
   * web service. For more information, see the Swagger specification.
   *
   * @param {object} [patchPayload.properties.exampleRequest] Defines sample
   * input data for one or more of the service's inputs.
   *
   * @param {object} [patchPayload.properties.exampleRequest.inputs] Sample input
   * data for the web service's input(s) given as an input name to sample input
   * values matrix map.
   *
   * @param {object} [patchPayload.properties.exampleRequest.globalParameters]
   * Sample input data for the web service's global parameters
   *
   * @param {object} [patchPayload.properties.assets] Contains user defined
   * properties describing web service assets. Properties are expressed as
   * Key/Value pairs.
   *
   * @param {object} [patchPayload.properties.parameters] The set of global
   * parameters values defined for the web service, given as a global parameter
   * name to default value map. If no default value is specified, the parameter
   * is considered to be required.
   *
   * @param {boolean} [patchPayload.properties.payloadsInBlobStorage] When set to
   * true, indicates that the payload size is larger than 3 MB. Otherwise false.
   * If the payload size exceed 3 MB, the payload is stored in a blob and the
   * PayloadsLocation parameter contains the URI of the blob. Otherwise, this
   * will be set to false and Assets, Input, Output, Package, Parameters,
   * ExampleRequest are inline. The Payload sizes is determined by adding the
   * size of the Assets, Input, Output, Package, Parameters, and the
   * ExampleRequest.
   *
   * @param {object} [patchPayload.properties.payloadsLocation] The URI of the
   * payload blob. This paramater contains a value only if the
   * payloadsInBlobStorage parameter is set to true. Otherwise is set to null.
   *
   * @param {string} patchPayload.properties.payloadsLocation.uri The URI from
   * which the blob is accessible from. For example, aml://abc for system assets
   * or https://xyz for user assets or payload.
   *
   * @param {string} [patchPayload.properties.payloadsLocation.credentials]
   * Access credentials for the blob, if applicable (e.g. blob specified by
   * storage account connection string + blob URI)
   *
   * @param {string} patchPayload.properties.packageType Polymorphic
   * Discriminator
   *
   * @param {string} patchPayload.location Specifies the location of the
   * resource.
   *
   * @param {object} [patchPayload.tags] Contains resource tags defined as
   * key/value pairs.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<WebService>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  patchWithHttpOperationResponse(resourceGroupName, webServiceName, patchPayload, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._patch(resourceGroupName, webServiceName, patchPayload, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Modifies an existing web service resource. The PATCH API call is an
   * asynchronous operation. To determine whether it has completed successfully,
   * you must perform a Get operation.
   *
   * @param {string} resourceGroupName Name of the resource group in which the
   * web service is located.
   *
   * @param {string} webServiceName The name of the web service.
   *
   * @param {object} patchPayload The payload to use to patch the web service.
   *
   * @param {object} patchPayload.properties Contains the property payload that
   * describes the web service.
   *
   * @param {string} [patchPayload.properties.title] The title of the web
   * service.
   *
   * @param {string} [patchPayload.properties.description] The description of the
   * web service.
   *
   * @param {object} [patchPayload.properties.keys] Contains the web service
   * provisioning keys. If you do not specify provisioning keys, the Azure
   * Machine Learning system generates them for you. Note: The keys are not
   * returned from calls to GET operations.
   *
   * @param {string} [patchPayload.properties.keys.primary] The primary access
   * key.
   *
   * @param {string} [patchPayload.properties.keys.secondary] The secondary
   * access key.
   *
   * @param {boolean} [patchPayload.properties.readOnly] When set to true,
   * indicates that the web service is read-only and can no longer be updated or
   * patched, only removed. Default, is false. Note: Once set to true, you cannot
   * change its value.
   *
   * @param {boolean} [patchPayload.properties.exposeSampleData] When set to
   * true, sample data is included in the web service's swagger definition. The
   * default value is true.
   *
   * @param {object} [patchPayload.properties.realtimeConfiguration] Contains the
   * configuration settings for the web service endpoint.
   *
   * @param {number}
   * [patchPayload.properties.realtimeConfiguration.maxConcurrentCalls] Specifies
   * the maximum concurrent calls that can be made to the web service. Minimum
   * value: 4, Maximum value: 200.
   *
   * @param {object} [patchPayload.properties.diagnostics] Settings controlling
   * the diagnostics traces collection for the web service.
   *
   * @param {string} patchPayload.properties.diagnostics.level Specifies the
   * verbosity of the diagnostic output. Valid values are: None - disables
   * tracing; Error - collects only error (stderr) traces; All - collects all
   * traces (stdout and stderr). Possible values include: 'None', 'Error', 'All'
   *
   * @param {date} [patchPayload.properties.diagnostics.expiry] Specifies the
   * date and time when the logging will cease. If null, diagnostic collection is
   * not time limited.
   *
   * @param {object} [patchPayload.properties.storageAccount] Specifies the
   * storage account that Azure Machine Learning uses to store information about
   * the web service. Only the name of the storage account is returned from calls
   * to GET operations. When updating the storage account information, you must
   * ensure that all necessary assets are available in the new storage account or
   * calls to your web service will fail.
   *
   * @param {string} [patchPayload.properties.storageAccount.name] Specifies the
   * name of the storage account.
   *
   * @param {string} [patchPayload.properties.storageAccount.key] Specifies the
   * key used to access the storage account.
   *
   * @param {object} [patchPayload.properties.machineLearningWorkspace] Specifies
   * the Machine Learning workspace containing the experiment that is source for
   * the web service.
   *
   * @param {string} patchPayload.properties.machineLearningWorkspace.id
   * Specifies the workspace ID of the machine learning workspace associated with
   * the web service
   *
   * @param {object} [patchPayload.properties.commitmentPlan] Contains the
   * commitment plan associated with this web service. Set at creation time. Once
   * set, this value cannot be changed. Note: The commitment plan is not returned
   * from calls to GET operations.
   *
   * @param {string} patchPayload.properties.commitmentPlan.id Specifies the
   * Azure Resource Manager ID of the commitment plan associated with the web
   * service.
   *
   * @param {object} [patchPayload.properties.input] Contains the Swagger 2.0
   * schema describing one or more of the web service's inputs. For more
   * information, see the Swagger specification.
   *
   * @param {object} [patchPayload.properties.output] Contains the Swagger 2.0
   * schema describing one or more of the web service's outputs. For more
   * information, see the Swagger specification.
   *
   * @param {string} [patchPayload.properties.output.title] The title of your
   * Swagger schema.
   *
   * @param {string} [patchPayload.properties.output.description] The description
   * of the Swagger schema.
   *
   * @param {string} patchPayload.properties.output.type The type of the entity
   * described in swagger. Always 'object'.
   *
   * @param {object} patchPayload.properties.output.properties Specifies a
   * collection that contains the column schema for each input or output of the
   * web service. For more information, see the Swagger specification.
   *
   * @param {object} [patchPayload.properties.exampleRequest] Defines sample
   * input data for one or more of the service's inputs.
   *
   * @param {object} [patchPayload.properties.exampleRequest.inputs] Sample input
   * data for the web service's input(s) given as an input name to sample input
   * values matrix map.
   *
   * @param {object} [patchPayload.properties.exampleRequest.globalParameters]
   * Sample input data for the web service's global parameters
   *
   * @param {object} [patchPayload.properties.assets] Contains user defined
   * properties describing web service assets. Properties are expressed as
   * Key/Value pairs.
   *
   * @param {object} [patchPayload.properties.parameters] The set of global
   * parameters values defined for the web service, given as a global parameter
   * name to default value map. If no default value is specified, the parameter
   * is considered to be required.
   *
   * @param {boolean} [patchPayload.properties.payloadsInBlobStorage] When set to
   * true, indicates that the payload size is larger than 3 MB. Otherwise false.
   * If the payload size exceed 3 MB, the payload is stored in a blob and the
   * PayloadsLocation parameter contains the URI of the blob. Otherwise, this
   * will be set to false and Assets, Input, Output, Package, Parameters,
   * ExampleRequest are inline. The Payload sizes is determined by adding the
   * size of the Assets, Input, Output, Package, Parameters, and the
   * ExampleRequest.
   *
   * @param {object} [patchPayload.properties.payloadsLocation] The URI of the
   * payload blob. This paramater contains a value only if the
   * payloadsInBlobStorage parameter is set to true. Otherwise is set to null.
   *
   * @param {string} patchPayload.properties.payloadsLocation.uri The URI from
   * which the blob is accessible from. For example, aml://abc for system assets
   * or https://xyz for user assets or payload.
   *
   * @param {string} [patchPayload.properties.payloadsLocation.credentials]
   * Access credentials for the blob, if applicable (e.g. blob specified by
   * storage account connection string + blob URI)
   *
   * @param {string} patchPayload.properties.packageType Polymorphic
   * Discriminator
   *
   * @param {string} patchPayload.location Specifies the location of the
   * resource.
   *
   * @param {object} [patchPayload.tags] Contains resource tags defined as
   * key/value pairs.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {WebService} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link WebService} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  patch(resourceGroupName, webServiceName, patchPayload, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._patch(resourceGroupName, webServiceName, patchPayload, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._patch(resourceGroupName, webServiceName, patchPayload, options, optionalCallback);
    }
  }

  /**
   * Deletes the specified web service.
   *
   * @param {string} resourceGroupName Name of the resource group in which the
   * web service is located.
   *
   * @param {string} webServiceName The name of the web service.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  removeWithHttpOperationResponse(resourceGroupName, webServiceName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._remove(resourceGroupName, webServiceName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Deletes the specified web service.
   *
   * @param {string} resourceGroupName Name of the resource group in which the
   * web service is located.
   *
   * @param {string} webServiceName The name of the web service.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  remove(resourceGroupName, webServiceName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._remove(resourceGroupName, webServiceName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._remove(resourceGroupName, webServiceName, options, optionalCallback);
    }
  }

  /**
   * Creates an encrypted credentials parameter blob for the specified region. To
   * get the web service from a region other than the region in which it has been
   * created, you must first call Create Regional Web Services Properties to
   * create a copy of the encrypted credential parameter blob in that region. You
   * only need to do this before the first time that you get the web service in
   * the new region.
   *
   * @param {string} resourceGroupName Name of the resource group in which the
   * web service is located.
   *
   * @param {string} webServiceName The name of the web service.
   *
   * @param {string} region The region for which encrypted credential parameters
   * are created.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<AsyncOperationStatus>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  createRegionalPropertiesWithHttpOperationResponse(resourceGroupName, webServiceName, region, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._createRegionalProperties(resourceGroupName, webServiceName, region, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Creates an encrypted credentials parameter blob for the specified region. To
   * get the web service from a region other than the region in which it has been
   * created, you must first call Create Regional Web Services Properties to
   * create a copy of the encrypted credential parameter blob in that region. You
   * only need to do this before the first time that you get the web service in
   * the new region.
   *
   * @param {string} resourceGroupName Name of the resource group in which the
   * web service is located.
   *
   * @param {string} webServiceName The name of the web service.
   *
   * @param {string} region The region for which encrypted credential parameters
   * are created.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {AsyncOperationStatus} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link AsyncOperationStatus} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  createRegionalProperties(resourceGroupName, webServiceName, region, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._createRegionalProperties(resourceGroupName, webServiceName, region, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._createRegionalProperties(resourceGroupName, webServiceName, region, options, optionalCallback);
    }
  }

  /**
   * Gets the access keys for the specified web service.
   *
   * @param {string} resourceGroupName Name of the resource group in which the
   * web service is located.
   *
   * @param {string} webServiceName The name of the web service.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<WebServiceKeys>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  listKeysWithHttpOperationResponse(resourceGroupName, webServiceName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._listKeys(resourceGroupName, webServiceName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Gets the access keys for the specified web service.
   *
   * @param {string} resourceGroupName Name of the resource group in which the
   * web service is located.
   *
   * @param {string} webServiceName The name of the web service.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {WebServiceKeys} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link WebServiceKeys} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  listKeys(resourceGroupName, webServiceName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._listKeys(resourceGroupName, webServiceName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._listKeys(resourceGroupName, webServiceName, options, optionalCallback);
    }
  }

  /**
   * Gets the web services in the specified resource group.
   *
   * @param {string} resourceGroupName Name of the resource group in which the
   * web service is located.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.skiptoken] Continuation token for pagination.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<PaginatedWebServicesList>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  listByResourceGroupWithHttpOperationResponse(resourceGroupName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._listByResourceGroup(resourceGroupName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Gets the web services in the specified resource group.
   *
   * @param {string} resourceGroupName Name of the resource group in which the
   * web service is located.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.skiptoken] Continuation token for pagination.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {PaginatedWebServicesList} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link PaginatedWebServicesList} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  listByResourceGroup(resourceGroupName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._listByResourceGroup(resourceGroupName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._listByResourceGroup(resourceGroupName, options, optionalCallback);
    }
  }

  /**
   * Gets the web services in the specified subscription.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.skiptoken] Continuation token for pagination.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<PaginatedWebServicesList>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  listBySubscriptionIdWithHttpOperationResponse(options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._listBySubscriptionId(options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Gets the web services in the specified subscription.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.skiptoken] Continuation token for pagination.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {PaginatedWebServicesList} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link PaginatedWebServicesList} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  listBySubscriptionId(options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._listBySubscriptionId(options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._listBySubscriptionId(options, optionalCallback);
    }
  }

  /**
   * Create or update a web service. This call will overwrite an existing web
   * service. Note that there is no warning or confirmation. This is a
   * nonrecoverable operation. If your intent is to create a new web service,
   * call the Get operation first to verify that it does not exist.
   *
   * @param {string} resourceGroupName Name of the resource group in which the
   * web service is located.
   *
   * @param {string} webServiceName The name of the web service.
   *
   * @param {object} createOrUpdatePayload The payload that is used to create or
   * update the web service.
   *
   * @param {object} createOrUpdatePayload.properties Contains the property
   * payload that describes the web service.
   *
   * @param {string} [createOrUpdatePayload.properties.title] The title of the
   * web service.
   *
   * @param {string} [createOrUpdatePayload.properties.description] The
   * description of the web service.
   *
   * @param {object} [createOrUpdatePayload.properties.keys] Contains the web
   * service provisioning keys. If you do not specify provisioning keys, the
   * Azure Machine Learning system generates them for you. Note: The keys are not
   * returned from calls to GET operations.
   *
   * @param {string} [createOrUpdatePayload.properties.keys.primary] The primary
   * access key.
   *
   * @param {string} [createOrUpdatePayload.properties.keys.secondary] The
   * secondary access key.
   *
   * @param {boolean} [createOrUpdatePayload.properties.readOnly] When set to
   * true, indicates that the web service is read-only and can no longer be
   * updated or patched, only removed. Default, is false. Note: Once set to true,
   * you cannot change its value.
   *
   * @param {boolean} [createOrUpdatePayload.properties.exposeSampleData] When
   * set to true, sample data is included in the web service's swagger
   * definition. The default value is true.
   *
   * @param {object} [createOrUpdatePayload.properties.realtimeConfiguration]
   * Contains the configuration settings for the web service endpoint.
   *
   * @param {number}
   * [createOrUpdatePayload.properties.realtimeConfiguration.maxConcurrentCalls]
   * Specifies the maximum concurrent calls that can be made to the web service.
   * Minimum value: 4, Maximum value: 200.
   *
   * @param {object} [createOrUpdatePayload.properties.diagnostics] Settings
   * controlling the diagnostics traces collection for the web service.
   *
   * @param {string} createOrUpdatePayload.properties.diagnostics.level Specifies
   * the verbosity of the diagnostic output. Valid values are: None - disables
   * tracing; Error - collects only error (stderr) traces; All - collects all
   * traces (stdout and stderr). Possible values include: 'None', 'Error', 'All'
   *
   * @param {date} [createOrUpdatePayload.properties.diagnostics.expiry]
   * Specifies the date and time when the logging will cease. If null, diagnostic
   * collection is not time limited.
   *
   * @param {object} [createOrUpdatePayload.properties.storageAccount] Specifies
   * the storage account that Azure Machine Learning uses to store information
   * about the web service. Only the name of the storage account is returned from
   * calls to GET operations. When updating the storage account information, you
   * must ensure that all necessary assets are available in the new storage
   * account or calls to your web service will fail.
   *
   * @param {string} [createOrUpdatePayload.properties.storageAccount.name]
   * Specifies the name of the storage account.
   *
   * @param {string} [createOrUpdatePayload.properties.storageAccount.key]
   * Specifies the key used to access the storage account.
   *
   * @param {object} [createOrUpdatePayload.properties.machineLearningWorkspace]
   * Specifies the Machine Learning workspace containing the experiment that is
   * source for the web service.
   *
   * @param {string} createOrUpdatePayload.properties.machineLearningWorkspace.id
   * Specifies the workspace ID of the machine learning workspace associated with
   * the web service
   *
   * @param {object} [createOrUpdatePayload.properties.commitmentPlan] Contains
   * the commitment plan associated with this web service. Set at creation time.
   * Once set, this value cannot be changed. Note: The commitment plan is not
   * returned from calls to GET operations.
   *
   * @param {string} createOrUpdatePayload.properties.commitmentPlan.id Specifies
   * the Azure Resource Manager ID of the commitment plan associated with the web
   * service.
   *
   * @param {object} [createOrUpdatePayload.properties.input] Contains the
   * Swagger 2.0 schema describing one or more of the web service's inputs. For
   * more information, see the Swagger specification.
   *
   * @param {object} [createOrUpdatePayload.properties.output] Contains the
   * Swagger 2.0 schema describing one or more of the web service's outputs. For
   * more information, see the Swagger specification.
   *
   * @param {string} [createOrUpdatePayload.properties.output.title] The title of
   * your Swagger schema.
   *
   * @param {string} [createOrUpdatePayload.properties.output.description] The
   * description of the Swagger schema.
   *
   * @param {string} createOrUpdatePayload.properties.output.type The type of the
   * entity described in swagger. Always 'object'.
   *
   * @param {object} createOrUpdatePayload.properties.output.properties Specifies
   * a collection that contains the column schema for each input or output of the
   * web service. For more information, see the Swagger specification.
   *
   * @param {object} [createOrUpdatePayload.properties.exampleRequest] Defines
   * sample input data for one or more of the service's inputs.
   *
   * @param {object} [createOrUpdatePayload.properties.exampleRequest.inputs]
   * Sample input data for the web service's input(s) given as an input name to
   * sample input values matrix map.
   *
   * @param {object}
   * [createOrUpdatePayload.properties.exampleRequest.globalParameters] Sample
   * input data for the web service's global parameters
   *
   * @param {object} [createOrUpdatePayload.properties.assets] Contains user
   * defined properties describing web service assets. Properties are expressed
   * as Key/Value pairs.
   *
   * @param {object} [createOrUpdatePayload.properties.parameters] The set of
   * global parameters values defined for the web service, given as a global
   * parameter name to default value map. If no default value is specified, the
   * parameter is considered to be required.
   *
   * @param {boolean} [createOrUpdatePayload.properties.payloadsInBlobStorage]
   * When set to true, indicates that the payload size is larger than 3 MB.
   * Otherwise false. If the payload size exceed 3 MB, the payload is stored in a
   * blob and the PayloadsLocation parameter contains the URI of the blob.
   * Otherwise, this will be set to false and Assets, Input, Output, Package,
   * Parameters, ExampleRequest are inline. The Payload sizes is determined by
   * adding the size of the Assets, Input, Output, Package, Parameters, and the
   * ExampleRequest.
   *
   * @param {object} [createOrUpdatePayload.properties.payloadsLocation] The URI
   * of the payload blob. This paramater contains a value only if the
   * payloadsInBlobStorage parameter is set to true. Otherwise is set to null.
   *
   * @param {string} createOrUpdatePayload.properties.payloadsLocation.uri The
   * URI from which the blob is accessible from. For example, aml://abc for
   * system assets or https://xyz for user assets or payload.
   *
   * @param {string}
   * [createOrUpdatePayload.properties.payloadsLocation.credentials] Access
   * credentials for the blob, if applicable (e.g. blob specified by storage
   * account connection string + blob URI)
   *
   * @param {string} createOrUpdatePayload.properties.packageType Polymorphic
   * Discriminator
   *
   * @param {string} createOrUpdatePayload.location Specifies the location of the
   * resource.
   *
   * @param {object} [createOrUpdatePayload.tags] Contains resource tags defined
   * as key/value pairs.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<WebService>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName, webServiceName, createOrUpdatePayload, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._beginCreateOrUpdate(resourceGroupName, webServiceName, createOrUpdatePayload, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Create or update a web service. This call will overwrite an existing web
   * service. Note that there is no warning or confirmation. This is a
   * nonrecoverable operation. If your intent is to create a new web service,
   * call the Get operation first to verify that it does not exist.
   *
   * @param {string} resourceGroupName Name of the resource group in which the
   * web service is located.
   *
   * @param {string} webServiceName The name of the web service.
   *
   * @param {object} createOrUpdatePayload The payload that is used to create or
   * update the web service.
   *
   * @param {object} createOrUpdatePayload.properties Contains the property
   * payload that describes the web service.
   *
   * @param {string} [createOrUpdatePayload.properties.title] The title of the
   * web service.
   *
   * @param {string} [createOrUpdatePayload.properties.description] The
   * description of the web service.
   *
   * @param {object} [createOrUpdatePayload.properties.keys] Contains the web
   * service provisioning keys. If you do not specify provisioning keys, the
   * Azure Machine Learning system generates them for you. Note: The keys are not
   * returned from calls to GET operations.
   *
   * @param {string} [createOrUpdatePayload.properties.keys.primary] The primary
   * access key.
   *
   * @param {string} [createOrUpdatePayload.properties.keys.secondary] The
   * secondary access key.
   *
   * @param {boolean} [createOrUpdatePayload.properties.readOnly] When set to
   * true, indicates that the web service is read-only and can no longer be
   * updated or patched, only removed. Default, is false. Note: Once set to true,
   * you cannot change its value.
   *
   * @param {boolean} [createOrUpdatePayload.properties.exposeSampleData] When
   * set to true, sample data is included in the web service's swagger
   * definition. The default value is true.
   *
   * @param {object} [createOrUpdatePayload.properties.realtimeConfiguration]
   * Contains the configuration settings for the web service endpoint.
   *
   * @param {number}
   * [createOrUpdatePayload.properties.realtimeConfiguration.maxConcurrentCalls]
   * Specifies the maximum concurrent calls that can be made to the web service.
   * Minimum value: 4, Maximum value: 200.
   *
   * @param {object} [createOrUpdatePayload.properties.diagnostics] Settings
   * controlling the diagnostics traces collection for the web service.
   *
   * @param {string} createOrUpdatePayload.properties.diagnostics.level Specifies
   * the verbosity of the diagnostic output. Valid values are: None - disables
   * tracing; Error - collects only error (stderr) traces; All - collects all
   * traces (stdout and stderr). Possible values include: 'None', 'Error', 'All'
   *
   * @param {date} [createOrUpdatePayload.properties.diagnostics.expiry]
   * Specifies the date and time when the logging will cease. If null, diagnostic
   * collection is not time limited.
   *
   * @param {object} [createOrUpdatePayload.properties.storageAccount] Specifies
   * the storage account that Azure Machine Learning uses to store information
   * about the web service. Only the name of the storage account is returned from
   * calls to GET operations. When updating the storage account information, you
   * must ensure that all necessary assets are available in the new storage
   * account or calls to your web service will fail.
   *
   * @param {string} [createOrUpdatePayload.properties.storageAccount.name]
   * Specifies the name of the storage account.
   *
   * @param {string} [createOrUpdatePayload.properties.storageAccount.key]
   * Specifies the key used to access the storage account.
   *
   * @param {object} [createOrUpdatePayload.properties.machineLearningWorkspace]
   * Specifies the Machine Learning workspace containing the experiment that is
   * source for the web service.
   *
   * @param {string} createOrUpdatePayload.properties.machineLearningWorkspace.id
   * Specifies the workspace ID of the machine learning workspace associated with
   * the web service
   *
   * @param {object} [createOrUpdatePayload.properties.commitmentPlan] Contains
   * the commitment plan associated with this web service. Set at creation time.
   * Once set, this value cannot be changed. Note: The commitment plan is not
   * returned from calls to GET operations.
   *
   * @param {string} createOrUpdatePayload.properties.commitmentPlan.id Specifies
   * the Azure Resource Manager ID of the commitment plan associated with the web
   * service.
   *
   * @param {object} [createOrUpdatePayload.properties.input] Contains the
   * Swagger 2.0 schema describing one or more of the web service's inputs. For
   * more information, see the Swagger specification.
   *
   * @param {object} [createOrUpdatePayload.properties.output] Contains the
   * Swagger 2.0 schema describing one or more of the web service's outputs. For
   * more information, see the Swagger specification.
   *
   * @param {string} [createOrUpdatePayload.properties.output.title] The title of
   * your Swagger schema.
   *
   * @param {string} [createOrUpdatePayload.properties.output.description] The
   * description of the Swagger schema.
   *
   * @param {string} createOrUpdatePayload.properties.output.type The type of the
   * entity described in swagger. Always 'object'.
   *
   * @param {object} createOrUpdatePayload.properties.output.properties Specifies
   * a collection that contains the column schema for each input or output of the
   * web service. For more information, see the Swagger specification.
   *
   * @param {object} [createOrUpdatePayload.properties.exampleRequest] Defines
   * sample input data for one or more of the service's inputs.
   *
   * @param {object} [createOrUpdatePayload.properties.exampleRequest.inputs]
   * Sample input data for the web service's input(s) given as an input name to
   * sample input values matrix map.
   *
   * @param {object}
   * [createOrUpdatePayload.properties.exampleRequest.globalParameters] Sample
   * input data for the web service's global parameters
   *
   * @param {object} [createOrUpdatePayload.properties.assets] Contains user
   * defined properties describing web service assets. Properties are expressed
   * as Key/Value pairs.
   *
   * @param {object} [createOrUpdatePayload.properties.parameters] The set of
   * global parameters values defined for the web service, given as a global
   * parameter name to default value map. If no default value is specified, the
   * parameter is considered to be required.
   *
   * @param {boolean} [createOrUpdatePayload.properties.payloadsInBlobStorage]
   * When set to true, indicates that the payload size is larger than 3 MB.
   * Otherwise false. If the payload size exceed 3 MB, the payload is stored in a
   * blob and the PayloadsLocation parameter contains the URI of the blob.
   * Otherwise, this will be set to false and Assets, Input, Output, Package,
   * Parameters, ExampleRequest are inline. The Payload sizes is determined by
   * adding the size of the Assets, Input, Output, Package, Parameters, and the
   * ExampleRequest.
   *
   * @param {object} [createOrUpdatePayload.properties.payloadsLocation] The URI
   * of the payload blob. This paramater contains a value only if the
   * payloadsInBlobStorage parameter is set to true. Otherwise is set to null.
   *
   * @param {string} createOrUpdatePayload.properties.payloadsLocation.uri The
   * URI from which the blob is accessible from. For example, aml://abc for
   * system assets or https://xyz for user assets or payload.
   *
   * @param {string}
   * [createOrUpdatePayload.properties.payloadsLocation.credentials] Access
   * credentials for the blob, if applicable (e.g. blob specified by storage
   * account connection string + blob URI)
   *
   * @param {string} createOrUpdatePayload.properties.packageType Polymorphic
   * Discriminator
   *
   * @param {string} createOrUpdatePayload.location Specifies the location of the
   * resource.
   *
   * @param {object} [createOrUpdatePayload.tags] Contains resource tags defined
   * as key/value pairs.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {WebService} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link WebService} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  beginCreateOrUpdate(resourceGroupName, webServiceName, createOrUpdatePayload, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._beginCreateOrUpdate(resourceGroupName, webServiceName, createOrUpdatePayload, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._beginCreateOrUpdate(resourceGroupName, webServiceName, createOrUpdatePayload, options, optionalCallback);
    }
  }

  /**
   * Modifies an existing web service resource. The PATCH API call is an
   * asynchronous operation. To determine whether it has completed successfully,
   * you must perform a Get operation.
   *
   * @param {string} resourceGroupName Name of the resource group in which the
   * web service is located.
   *
   * @param {string} webServiceName The name of the web service.
   *
   * @param {object} patchPayload The payload to use to patch the web service.
   *
   * @param {object} patchPayload.properties Contains the property payload that
   * describes the web service.
   *
   * @param {string} [patchPayload.properties.title] The title of the web
   * service.
   *
   * @param {string} [patchPayload.properties.description] The description of the
   * web service.
   *
   * @param {object} [patchPayload.properties.keys] Contains the web service
   * provisioning keys. If you do not specify provisioning keys, the Azure
   * Machine Learning system generates them for you. Note: The keys are not
   * returned from calls to GET operations.
   *
   * @param {string} [patchPayload.properties.keys.primary] The primary access
   * key.
   *
   * @param {string} [patchPayload.properties.keys.secondary] The secondary
   * access key.
   *
   * @param {boolean} [patchPayload.properties.readOnly] When set to true,
   * indicates that the web service is read-only and can no longer be updated or
   * patched, only removed. Default, is false. Note: Once set to true, you cannot
   * change its value.
   *
   * @param {boolean} [patchPayload.properties.exposeSampleData] When set to
   * true, sample data is included in the web service's swagger definition. The
   * default value is true.
   *
   * @param {object} [patchPayload.properties.realtimeConfiguration] Contains the
   * configuration settings for the web service endpoint.
   *
   * @param {number}
   * [patchPayload.properties.realtimeConfiguration.maxConcurrentCalls] Specifies
   * the maximum concurrent calls that can be made to the web service. Minimum
   * value: 4, Maximum value: 200.
   *
   * @param {object} [patchPayload.properties.diagnostics] Settings controlling
   * the diagnostics traces collection for the web service.
   *
   * @param {string} patchPayload.properties.diagnostics.level Specifies the
   * verbosity of the diagnostic output. Valid values are: None - disables
   * tracing; Error - collects only error (stderr) traces; All - collects all
   * traces (stdout and stderr). Possible values include: 'None', 'Error', 'All'
   *
   * @param {date} [patchPayload.properties.diagnostics.expiry] Specifies the
   * date and time when the logging will cease. If null, diagnostic collection is
   * not time limited.
   *
   * @param {object} [patchPayload.properties.storageAccount] Specifies the
   * storage account that Azure Machine Learning uses to store information about
   * the web service. Only the name of the storage account is returned from calls
   * to GET operations. When updating the storage account information, you must
   * ensure that all necessary assets are available in the new storage account or
   * calls to your web service will fail.
   *
   * @param {string} [patchPayload.properties.storageAccount.name] Specifies the
   * name of the storage account.
   *
   * @param {string} [patchPayload.properties.storageAccount.key] Specifies the
   * key used to access the storage account.
   *
   * @param {object} [patchPayload.properties.machineLearningWorkspace] Specifies
   * the Machine Learning workspace containing the experiment that is source for
   * the web service.
   *
   * @param {string} patchPayload.properties.machineLearningWorkspace.id
   * Specifies the workspace ID of the machine learning workspace associated with
   * the web service
   *
   * @param {object} [patchPayload.properties.commitmentPlan] Contains the
   * commitment plan associated with this web service. Set at creation time. Once
   * set, this value cannot be changed. Note: The commitment plan is not returned
   * from calls to GET operations.
   *
   * @param {string} patchPayload.properties.commitmentPlan.id Specifies the
   * Azure Resource Manager ID of the commitment plan associated with the web
   * service.
   *
   * @param {object} [patchPayload.properties.input] Contains the Swagger 2.0
   * schema describing one or more of the web service's inputs. For more
   * information, see the Swagger specification.
   *
   * @param {object} [patchPayload.properties.output] Contains the Swagger 2.0
   * schema describing one or more of the web service's outputs. For more
   * information, see the Swagger specification.
   *
   * @param {string} [patchPayload.properties.output.title] The title of your
   * Swagger schema.
   *
   * @param {string} [patchPayload.properties.output.description] The description
   * of the Swagger schema.
   *
   * @param {string} patchPayload.properties.output.type The type of the entity
   * described in swagger. Always 'object'.
   *
   * @param {object} patchPayload.properties.output.properties Specifies a
   * collection that contains the column schema for each input or output of the
   * web service. For more information, see the Swagger specification.
   *
   * @param {object} [patchPayload.properties.exampleRequest] Defines sample
   * input data for one or more of the service's inputs.
   *
   * @param {object} [patchPayload.properties.exampleRequest.inputs] Sample input
   * data for the web service's input(s) given as an input name to sample input
   * values matrix map.
   *
   * @param {object} [patchPayload.properties.exampleRequest.globalParameters]
   * Sample input data for the web service's global parameters
   *
   * @param {object} [patchPayload.properties.assets] Contains user defined
   * properties describing web service assets. Properties are expressed as
   * Key/Value pairs.
   *
   * @param {object} [patchPayload.properties.parameters] The set of global
   * parameters values defined for the web service, given as a global parameter
   * name to default value map. If no default value is specified, the parameter
   * is considered to be required.
   *
   * @param {boolean} [patchPayload.properties.payloadsInBlobStorage] When set to
   * true, indicates that the payload size is larger than 3 MB. Otherwise false.
   * If the payload size exceed 3 MB, the payload is stored in a blob and the
   * PayloadsLocation parameter contains the URI of the blob. Otherwise, this
   * will be set to false and Assets, Input, Output, Package, Parameters,
   * ExampleRequest are inline. The Payload sizes is determined by adding the
   * size of the Assets, Input, Output, Package, Parameters, and the
   * ExampleRequest.
   *
   * @param {object} [patchPayload.properties.payloadsLocation] The URI of the
   * payload blob. This paramater contains a value only if the
   * payloadsInBlobStorage parameter is set to true. Otherwise is set to null.
   *
   * @param {string} patchPayload.properties.payloadsLocation.uri The URI from
   * which the blob is accessible from. For example, aml://abc for system assets
   * or https://xyz for user assets or payload.
   *
   * @param {string} [patchPayload.properties.payloadsLocation.credentials]
   * Access credentials for the blob, if applicable (e.g. blob specified by
   * storage account connection string + blob URI)
   *
   * @param {string} patchPayload.properties.packageType Polymorphic
   * Discriminator
   *
   * @param {string} patchPayload.location Specifies the location of the
   * resource.
   *
   * @param {object} [patchPayload.tags] Contains resource tags defined as
   * key/value pairs.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<WebService>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  beginPatchWithHttpOperationResponse(resourceGroupName, webServiceName, patchPayload, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._beginPatch(resourceGroupName, webServiceName, patchPayload, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Modifies an existing web service resource. The PATCH API call is an
   * asynchronous operation. To determine whether it has completed successfully,
   * you must perform a Get operation.
   *
   * @param {string} resourceGroupName Name of the resource group in which the
   * web service is located.
   *
   * @param {string} webServiceName The name of the web service.
   *
   * @param {object} patchPayload The payload to use to patch the web service.
   *
   * @param {object} patchPayload.properties Contains the property payload that
   * describes the web service.
   *
   * @param {string} [patchPayload.properties.title] The title of the web
   * service.
   *
   * @param {string} [patchPayload.properties.description] The description of the
   * web service.
   *
   * @param {object} [patchPayload.properties.keys] Contains the web service
   * provisioning keys. If you do not specify provisioning keys, the Azure
   * Machine Learning system generates them for you. Note: The keys are not
   * returned from calls to GET operations.
   *
   * @param {string} [patchPayload.properties.keys.primary] The primary access
   * key.
   *
   * @param {string} [patchPayload.properties.keys.secondary] The secondary
   * access key.
   *
   * @param {boolean} [patchPayload.properties.readOnly] When set to true,
   * indicates that the web service is read-only and can no longer be updated or
   * patched, only removed. Default, is false. Note: Once set to true, you cannot
   * change its value.
   *
   * @param {boolean} [patchPayload.properties.exposeSampleData] When set to
   * true, sample data is included in the web service's swagger definition. The
   * default value is true.
   *
   * @param {object} [patchPayload.properties.realtimeConfiguration] Contains the
   * configuration settings for the web service endpoint.
   *
   * @param {number}
   * [patchPayload.properties.realtimeConfiguration.maxConcurrentCalls] Specifies
   * the maximum concurrent calls that can be made to the web service. Minimum
   * value: 4, Maximum value: 200.
   *
   * @param {object} [patchPayload.properties.diagnostics] Settings controlling
   * the diagnostics traces collection for the web service.
   *
   * @param {string} patchPayload.properties.diagnostics.level Specifies the
   * verbosity of the diagnostic output. Valid values are: None - disables
   * tracing; Error - collects only error (stderr) traces; All - collects all
   * traces (stdout and stderr). Possible values include: 'None', 'Error', 'All'
   *
   * @param {date} [patchPayload.properties.diagnostics.expiry] Specifies the
   * date and time when the logging will cease. If null, diagnostic collection is
   * not time limited.
   *
   * @param {object} [patchPayload.properties.storageAccount] Specifies the
   * storage account that Azure Machine Learning uses to store information about
   * the web service. Only the name of the storage account is returned from calls
   * to GET operations. When updating the storage account information, you must
   * ensure that all necessary assets are available in the new storage account or
   * calls to your web service will fail.
   *
   * @param {string} [patchPayload.properties.storageAccount.name] Specifies the
   * name of the storage account.
   *
   * @param {string} [patchPayload.properties.storageAccount.key] Specifies the
   * key used to access the storage account.
   *
   * @param {object} [patchPayload.properties.machineLearningWorkspace] Specifies
   * the Machine Learning workspace containing the experiment that is source for
   * the web service.
   *
   * @param {string} patchPayload.properties.machineLearningWorkspace.id
   * Specifies the workspace ID of the machine learning workspace associated with
   * the web service
   *
   * @param {object} [patchPayload.properties.commitmentPlan] Contains the
   * commitment plan associated with this web service. Set at creation time. Once
   * set, this value cannot be changed. Note: The commitment plan is not returned
   * from calls to GET operations.
   *
   * @param {string} patchPayload.properties.commitmentPlan.id Specifies the
   * Azure Resource Manager ID of the commitment plan associated with the web
   * service.
   *
   * @param {object} [patchPayload.properties.input] Contains the Swagger 2.0
   * schema describing one or more of the web service's inputs. For more
   * information, see the Swagger specification.
   *
   * @param {object} [patchPayload.properties.output] Contains the Swagger 2.0
   * schema describing one or more of the web service's outputs. For more
   * information, see the Swagger specification.
   *
   * @param {string} [patchPayload.properties.output.title] The title of your
   * Swagger schema.
   *
   * @param {string} [patchPayload.properties.output.description] The description
   * of the Swagger schema.
   *
   * @param {string} patchPayload.properties.output.type The type of the entity
   * described in swagger. Always 'object'.
   *
   * @param {object} patchPayload.properties.output.properties Specifies a
   * collection that contains the column schema for each input or output of the
   * web service. For more information, see the Swagger specification.
   *
   * @param {object} [patchPayload.properties.exampleRequest] Defines sample
   * input data for one or more of the service's inputs.
   *
   * @param {object} [patchPayload.properties.exampleRequest.inputs] Sample input
   * data for the web service's input(s) given as an input name to sample input
   * values matrix map.
   *
   * @param {object} [patchPayload.properties.exampleRequest.globalParameters]
   * Sample input data for the web service's global parameters
   *
   * @param {object} [patchPayload.properties.assets] Contains user defined
   * properties describing web service assets. Properties are expressed as
   * Key/Value pairs.
   *
   * @param {object} [patchPayload.properties.parameters] The set of global
   * parameters values defined for the web service, given as a global parameter
   * name to default value map. If no default value is specified, the parameter
   * is considered to be required.
   *
   * @param {boolean} [patchPayload.properties.payloadsInBlobStorage] When set to
   * true, indicates that the payload size is larger than 3 MB. Otherwise false.
   * If the payload size exceed 3 MB, the payload is stored in a blob and the
   * PayloadsLocation parameter contains the URI of the blob. Otherwise, this
   * will be set to false and Assets, Input, Output, Package, Parameters,
   * ExampleRequest are inline. The Payload sizes is determined by adding the
   * size of the Assets, Input, Output, Package, Parameters, and the
   * ExampleRequest.
   *
   * @param {object} [patchPayload.properties.payloadsLocation] The URI of the
   * payload blob. This paramater contains a value only if the
   * payloadsInBlobStorage parameter is set to true. Otherwise is set to null.
   *
   * @param {string} patchPayload.properties.payloadsLocation.uri The URI from
   * which the blob is accessible from. For example, aml://abc for system assets
   * or https://xyz for user assets or payload.
   *
   * @param {string} [patchPayload.properties.payloadsLocation.credentials]
   * Access credentials for the blob, if applicable (e.g. blob specified by
   * storage account connection string + blob URI)
   *
   * @param {string} patchPayload.properties.packageType Polymorphic
   * Discriminator
   *
   * @param {string} patchPayload.location Specifies the location of the
   * resource.
   *
   * @param {object} [patchPayload.tags] Contains resource tags defined as
   * key/value pairs.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {WebService} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link WebService} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  beginPatch(resourceGroupName, webServiceName, patchPayload, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._beginPatch(resourceGroupName, webServiceName, patchPayload, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._beginPatch(resourceGroupName, webServiceName, patchPayload, options, optionalCallback);
    }
  }

  /**
   * Deletes the specified web service.
   *
   * @param {string} resourceGroupName Name of the resource group in which the
   * web service is located.
   *
   * @param {string} webServiceName The name of the web service.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  beginRemoveWithHttpOperationResponse(resourceGroupName, webServiceName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._beginRemove(resourceGroupName, webServiceName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Deletes the specified web service.
   *
   * @param {string} resourceGroupName Name of the resource group in which the
   * web service is located.
   *
   * @param {string} webServiceName The name of the web service.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  beginRemove(resourceGroupName, webServiceName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._beginRemove(resourceGroupName, webServiceName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._beginRemove(resourceGroupName, webServiceName, options, optionalCallback);
    }
  }

  /**
   * Creates an encrypted credentials parameter blob for the specified region. To
   * get the web service from a region other than the region in which it has been
   * created, you must first call Create Regional Web Services Properties to
   * create a copy of the encrypted credential parameter blob in that region. You
   * only need to do this before the first time that you get the web service in
   * the new region.
   *
   * @param {string} resourceGroupName Name of the resource group in which the
   * web service is located.
   *
   * @param {string} webServiceName The name of the web service.
   *
   * @param {string} region The region for which encrypted credential parameters
   * are created.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<AsyncOperationStatus>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  beginCreateRegionalPropertiesWithHttpOperationResponse(resourceGroupName, webServiceName, region, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._beginCreateRegionalProperties(resourceGroupName, webServiceName, region, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Creates an encrypted credentials parameter blob for the specified region. To
   * get the web service from a region other than the region in which it has been
   * created, you must first call Create Regional Web Services Properties to
   * create a copy of the encrypted credential parameter blob in that region. You
   * only need to do this before the first time that you get the web service in
   * the new region.
   *
   * @param {string} resourceGroupName Name of the resource group in which the
   * web service is located.
   *
   * @param {string} webServiceName The name of the web service.
   *
   * @param {string} region The region for which encrypted credential parameters
   * are created.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {AsyncOperationStatus} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link AsyncOperationStatus} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  beginCreateRegionalProperties(resourceGroupName, webServiceName, region, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._beginCreateRegionalProperties(resourceGroupName, webServiceName, region, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._beginCreateRegionalProperties(resourceGroupName, webServiceName, region, options, optionalCallback);
    }
  }

  /**
   * Gets the web services in the specified resource group.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<PaginatedWebServicesList>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  listByResourceGroupNextWithHttpOperationResponse(nextPageLink, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._listByResourceGroupNext(nextPageLink, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Gets the web services in the specified resource group.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {PaginatedWebServicesList} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link PaginatedWebServicesList} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  listByResourceGroupNext(nextPageLink, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._listByResourceGroupNext(nextPageLink, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._listByResourceGroupNext(nextPageLink, options, optionalCallback);
    }
  }

  /**
   * Gets the web services in the specified subscription.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<PaginatedWebServicesList>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  listBySubscriptionIdNextWithHttpOperationResponse(nextPageLink, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._listBySubscriptionIdNext(nextPageLink, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Gets the web services in the specified subscription.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {PaginatedWebServicesList} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link PaginatedWebServicesList} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  listBySubscriptionIdNext(nextPageLink, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._listBySubscriptionIdNext(nextPageLink, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._listBySubscriptionIdNext(nextPageLink, options, optionalCallback);
    }
  }

}

module.exports = WebServices;
