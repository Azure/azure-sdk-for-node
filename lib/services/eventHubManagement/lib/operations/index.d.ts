/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback } from 'ms-rest';
import * as models from '../models';


/**
 * @class
 * Namespaces
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the EventHubManagementClient.
 */
export interface Namespaces {

    /**
     * Lists all the available namespaces within a subscription, irrespective of
     * the resource groups.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listBySubscription(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NamespaceListResult>): void;
    listBySubscription(callback: ServiceCallback<models.NamespaceListResult>): void;

    /**
     * Lists the available namespaces within a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listByResourceGroup(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NamespaceListResult>): void;
    listByResourceGroup(resourceGroupName: string, callback: ServiceCallback<models.NamespaceListResult>): void;

    /**
     * Creates or updates a namespace. Once created, this namespace's resource
     * manifest is immutable. This operation is idempotent.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} namespaceName The namespace name.
     *
     * @param {object} parameters Parameters for creating a namespace resource.
     *
     * @param {string} parameters.location Namespace location.
     *
     * @param {object} [parameters.sku]
     *
     * @param {string} [parameters.sku.name] Name of this SKU. Possible values
     * include: 'Basic', 'Standard'
     *
     * @param {string} parameters.sku.tier The billing tier of this particular SKU.
     * Possible values include: 'Basic', 'Standard', 'Premium'
     *
     * @param {number} [parameters.sku.capacity] The Event Hubs throughput units.
     *
     * @param {object} [parameters.tags] Namespace tags.
     *
     * @param {string} [parameters.provisioningState] Provisioning state of the
     * namespace.
     *
     * @param {date} [parameters.createdAt] The time the namespace was created.
     *
     * @param {date} [parameters.updatedAt] The time the namespace was updated.
     *
     * @param {string} [parameters.serviceBusEndpoint] Endpoint you can use to
     * perform Service Bus operations.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createOrUpdate(resourceGroupName: string, namespaceName: string, parameters: models.NamespaceCreateOrUpdateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NamespaceResource>): void;
    createOrUpdate(resourceGroupName: string, namespaceName: string, parameters: models.NamespaceCreateOrUpdateParameters, callback: ServiceCallback<models.NamespaceResource>): void;

    /**
     * Deletes an existing namespace. This operation also removes all associated
     * resources under the namespace.
     *
     * @param {string} resourceGroupName The name of the resource group in which
     * the namespace lives.
     *
     * @param {string} namespaceName The name of the namespace to delete.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteMethod(resourceGroupName: string, namespaceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, namespaceName: string, callback: ServiceCallback<void>): void;

    /**
     * Gets the description of the specified namespace.
     *
     * @param {string} resourceGroupName The name of the resource group in which
     * the namespace lives.
     *
     * @param {string} namespaceName The name of the specified namespace.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(resourceGroupName: string, namespaceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NamespaceResource>): void;
    get(resourceGroupName: string, namespaceName: string, callback: ServiceCallback<models.NamespaceResource>): void;

    /**
     * Gets a list of authorization rules for a namespace.
     *
     * @param {string} resourceGroupName The name of the resource group in which
     * the namespace lives.
     *
     * @param {string} namespaceName The namespace name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listAuthorizationRules(resourceGroupName: string, namespaceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SharedAccessAuthorizationRuleListResult>): void;
    listAuthorizationRules(resourceGroupName: string, namespaceName: string, callback: ServiceCallback<models.SharedAccessAuthorizationRuleListResult>): void;

    /**
     * Creates or updates an authorization rule for a namespace.
     *
     * @param {string} resourceGroupName The name of the resource group in which
     * the namespace lives.
     *
     * @param {string} namespaceName The namespace name.
     *
     * @param {string} authorizationRuleName Namespace authorization rule name.
     *
     * @param {object} parameters The shared access authorization rule.
     *
     * @param {string} [parameters.location] Data center location.
     *
     * @param {string} [parameters.name] Name of the authorization rule.
     *
     * @param {array} parameters.rights The rights associated with the rule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createOrUpdateAuthorizationRule(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, parameters: models.SharedAccessAuthorizationRuleCreateOrUpdateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SharedAccessAuthorizationRuleResource>): void;
    createOrUpdateAuthorizationRule(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, parameters: models.SharedAccessAuthorizationRuleCreateOrUpdateParameters, callback: ServiceCallback<models.SharedAccessAuthorizationRuleResource>): void;

    /**
     * Deletes an authorization rule for a namespace.
     *
     * @param {string} resourceGroupName The name of the resource group in which
     * the namespace lives.
     *
     * @param {string} namespaceName The namespace name.
     *
     * @param {string} authorizationRuleName Authorization rule name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteAuthorizationRule(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    deleteAuthorizationRule(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, callback: ServiceCallback<void>): void;

    /**
     * Gets an authorization rule for a namespace by rule name.
     *
     * @param {string} resourceGroupName The name of the resource group in which
     * the namespace lives.
     *
     * @param {string} namespaceName The namespace name.
     *
     * @param {string} authorizationRuleName Authorization rule name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getAuthorizationRule(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SharedAccessAuthorizationRuleResource>): void;
    getAuthorizationRule(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, callback: ServiceCallback<models.SharedAccessAuthorizationRuleResource>): void;

    /**
     * Gets the primary and secondary connection strings for the namespace.
     *
     * @param {string} resourceGroupName The name of the resource group in which
     * the namespace lives.
     *
     * @param {string} namespaceName The namespace name.
     *
     * @param {string} authorizationRuleName The authorization rule name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listKeys(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceListKeys>): void;
    listKeys(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, callback: ServiceCallback<models.ResourceListKeys>): void;

    /**
     * Regenerates the primary or secondary connection strings for the specified
     * namespace.
     *
     * @param {string} resourceGroupName The name of the resource group in which
     * the namespace lives.
     *
     * @param {string} namespaceName The namespace name.
     *
     * @param {string} authorizationRuleName The authorization rule name.
     *
     * @param {object} parameters Parameters required to regenerate the connection
     * string.
     *
     * @param {string} [parameters.policykey] Key that needs to be regenerated.
     * Possible values include: 'PrimaryKey', 'SecondaryKey'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    regenerateKeys(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, parameters: models.RegenerateKeysParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceListKeys>): void;
    regenerateKeys(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, parameters: models.RegenerateKeysParameters, callback: ServiceCallback<models.ResourceListKeys>): void;

    /**
     * Creates or updates a namespace. Once created, this namespace's resource
     * manifest is immutable. This operation is idempotent.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} namespaceName The namespace name.
     *
     * @param {object} parameters Parameters for creating a namespace resource.
     *
     * @param {string} parameters.location Namespace location.
     *
     * @param {object} [parameters.sku]
     *
     * @param {string} [parameters.sku.name] Name of this SKU. Possible values
     * include: 'Basic', 'Standard'
     *
     * @param {string} parameters.sku.tier The billing tier of this particular SKU.
     * Possible values include: 'Basic', 'Standard', 'Premium'
     *
     * @param {number} [parameters.sku.capacity] The Event Hubs throughput units.
     *
     * @param {object} [parameters.tags] Namespace tags.
     *
     * @param {string} [parameters.provisioningState] Provisioning state of the
     * namespace.
     *
     * @param {date} [parameters.createdAt] The time the namespace was created.
     *
     * @param {date} [parameters.updatedAt] The time the namespace was updated.
     *
     * @param {string} [parameters.serviceBusEndpoint] Endpoint you can use to
     * perform Service Bus operations.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginCreateOrUpdate(resourceGroupName: string, namespaceName: string, parameters: models.NamespaceCreateOrUpdateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NamespaceResource>): void;
    beginCreateOrUpdate(resourceGroupName: string, namespaceName: string, parameters: models.NamespaceCreateOrUpdateParameters, callback: ServiceCallback<models.NamespaceResource>): void;

    /**
     * Deletes an existing namespace. This operation also removes all associated
     * resources under the namespace.
     *
     * @param {string} resourceGroupName The name of the resource group in which
     * the namespace lives.
     *
     * @param {string} namespaceName The name of the namespace to delete.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginDeleteMethod(resourceGroupName: string, namespaceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, namespaceName: string, callback: ServiceCallback<void>): void;

    /**
     * Lists all the available namespaces within a subscription, irrespective of
     * the resource groups.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listBySubscriptionNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NamespaceListResult>): void;
    listBySubscriptionNext(nextPageLink: string, callback: ServiceCallback<models.NamespaceListResult>): void;

    /**
     * Lists the available namespaces within a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listByResourceGroupNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NamespaceListResult>): void;
    listByResourceGroupNext(nextPageLink: string, callback: ServiceCallback<models.NamespaceListResult>): void;

    /**
     * Gets a list of authorization rules for a namespace.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listAuthorizationRulesNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SharedAccessAuthorizationRuleListResult>): void;
    listAuthorizationRulesNext(nextPageLink: string, callback: ServiceCallback<models.SharedAccessAuthorizationRuleListResult>): void;
}

/**
 * @class
 * EventHubs
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the EventHubManagementClient.
 */
export interface EventHubs {

    /**
     * Gets all the Event Hubs in a namespace.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} namespaceName The namespace name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listAll(resourceGroupName: string, namespaceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EventHubListResult>): void;
    listAll(resourceGroupName: string, namespaceName: string, callback: ServiceCallback<models.EventHubListResult>): void;

    /**
     * Creates or updates a new Event Hub as a nested resource within a namespace.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} namespaceName The namespace name.
     *
     * @param {string} eventHubName The Event Hub name.
     *
     * @param {object} parameters Parameters supplied to create an Event Hub
     * resource.
     *
     * @param {string} parameters.location Location of the resource.
     *
     * @param {string} [parameters.type] ARM type of the namespace.
     *
     * @param {string} [parameters.name] Name of the Event Hub.
     *
     * @param {number} [parameters.messageRetentionInDays] Number of days to retain
     * the events for this Event Hub.
     *
     * @param {number} [parameters.partitionCount] Number of partitions created for
     * the Event Hub.
     *
     * @param {string} [parameters.status] Enumerates the possible values for the
     * status of the Event Hub. Possible values include: 'Active', 'Disabled',
     * 'Restoring', 'SendDisabled', 'ReceiveDisabled', 'Creating', 'Deleting',
     * 'Renaming', 'Unknown'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createOrUpdate(resourceGroupName: string, namespaceName: string, eventHubName: string, parameters: models.EventHubCreateOrUpdateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EventHubResource>): void;
    createOrUpdate(resourceGroupName: string, namespaceName: string, eventHubName: string, parameters: models.EventHubCreateOrUpdateParameters, callback: ServiceCallback<models.EventHubResource>): void;

    /**
     * Deletes an Event Hub from the specified namespace and resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} namespaceName The namespace name.
     *
     * @param {string} eventHubName The name of the Event Hub to delete.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteMethod(resourceGroupName: string, namespaceName: string, eventHubName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, namespaceName: string, eventHubName: string, callback: ServiceCallback<void>): void;

    /**
     * Gets an Event Hubs description for the specified Event Hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} namespaceName The namespace name.
     *
     * @param {string} eventHubName The Event Hub name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(resourceGroupName: string, namespaceName: string, eventHubName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EventHubResource>): void;
    get(resourceGroupName: string, namespaceName: string, eventHubName: string, callback: ServiceCallback<models.EventHubResource>): void;

    /**
     * Gets the authorization rules for an Event Hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} eventHubName The Event Hub name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listAuthorizationRules(resourceGroupName: string, namespaceName: string, eventHubName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SharedAccessAuthorizationRuleListResult>): void;
    listAuthorizationRules(resourceGroupName: string, namespaceName: string, eventHubName: string, callback: ServiceCallback<models.SharedAccessAuthorizationRuleListResult>): void;

    /**
     * Creates or updates an authorization rule for the specified Event Hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} namespaceName The namespace name.
     *
     * @param {string} eventHubName The Event Hub name.
     *
     * @param {string} authorizationRuleName The authorization rule name.
     *
     * @param {object} parameters The shared access authorization rule.
     *
     * @param {string} [parameters.location] Data center location.
     *
     * @param {string} [parameters.name] Name of the authorization rule.
     *
     * @param {array} parameters.rights The rights associated with the rule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createOrUpdateAuthorizationRule(resourceGroupName: string, namespaceName: string, eventHubName: string, authorizationRuleName: string, parameters: models.SharedAccessAuthorizationRuleCreateOrUpdateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SharedAccessAuthorizationRuleResource>): void;
    createOrUpdateAuthorizationRule(resourceGroupName: string, namespaceName: string, eventHubName: string, authorizationRuleName: string, parameters: models.SharedAccessAuthorizationRuleCreateOrUpdateParameters, callback: ServiceCallback<models.SharedAccessAuthorizationRuleResource>): void;

    /**
     * Gets an authorization rule for an Event Hub by rule name.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} namespaceName The namespace name.
     *
     * @param {string} eventHubName The Event Hub name.
     *
     * @param {string} authorizationRuleName The authorization rule name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getAuthorizationRule(resourceGroupName: string, namespaceName: string, eventHubName: string, authorizationRuleName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SharedAccessAuthorizationRuleResource>): void;
    getAuthorizationRule(resourceGroupName: string, namespaceName: string, eventHubName: string, authorizationRuleName: string, callback: ServiceCallback<models.SharedAccessAuthorizationRuleResource>): void;

    /**
     * Deletes an Event Hubs authorization rule.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} namespaceName The namespace name.
     *
     * @param {string} eventHubName The Event Hub name.
     *
     * @param {string} authorizationRuleName The authorization rule name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteAuthorizationRule(resourceGroupName: string, namespaceName: string, eventHubName: string, authorizationRuleName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    deleteAuthorizationRule(resourceGroupName: string, namespaceName: string, eventHubName: string, authorizationRuleName: string, callback: ServiceCallback<void>): void;

    /**
     * Gets the ACS and SAS connection strings for the Event Hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} namespaceName The namespace name.
     *
     * @param {string} eventHubName The Event Hub name.
     *
     * @param {string} authorizationRuleName The connection string of the namespace
     * for the specified authorization rule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listKeys(resourceGroupName: string, namespaceName: string, eventHubName: string, authorizationRuleName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceListKeys>): void;
    listKeys(resourceGroupName: string, namespaceName: string, eventHubName: string, authorizationRuleName: string, callback: ServiceCallback<models.ResourceListKeys>): void;

    /**
     * Regenerates the ACS and SAS connection strings for the Event Hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} namespaceName The namespace name.
     *
     * @param {string} eventHubName The Event Hub name.
     *
     * @param {string} authorizationRuleName The connection string of the Event Hub
     * for the specified authorization rule.
     *
     * @param {object} parameters Parameters supplied to regenerate the
     * authorization rule.
     *
     * @param {string} [parameters.policykey] Key that needs to be regenerated.
     * Possible values include: 'PrimaryKey', 'SecondaryKey'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    regenerateKeys(resourceGroupName: string, namespaceName: string, eventHubName: string, authorizationRuleName: string, parameters: models.RegenerateKeysParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceListKeys>): void;
    regenerateKeys(resourceGroupName: string, namespaceName: string, eventHubName: string, authorizationRuleName: string, parameters: models.RegenerateKeysParameters, callback: ServiceCallback<models.ResourceListKeys>): void;

    /**
     * Gets all the Event Hubs in a namespace.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listAllNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EventHubListResult>): void;
    listAllNext(nextPageLink: string, callback: ServiceCallback<models.EventHubListResult>): void;

    /**
     * Gets the authorization rules for an Event Hub.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listAuthorizationRulesNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SharedAccessAuthorizationRuleListResult>): void;
    listAuthorizationRulesNext(nextPageLink: string, callback: ServiceCallback<models.SharedAccessAuthorizationRuleListResult>): void;
}

/**
 * @class
 * ConsumerGroups
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the EventHubManagementClient.
 */
export interface ConsumerGroups {

    /**
     * Creates or updates an Event Hubs consumer group as a nested resource within
     * a namespace.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} namespaceName The namespace name.
     *
     * @param {string} eventHubName The Event Hub name.
     *
     * @param {string} consumerGroupName The consumer group name.
     *
     * @param {object} parameters Parameters supplied to create a consumer group
     * resource.
     *
     * @param {string} parameters.location Location of the resource.
     *
     * @param {string} [parameters.type] ARM type of the namespace.
     *
     * @param {string} [parameters.name] Name of the consumer group.
     *
     * @param {string} [parameters.userMetadata] The user metadata.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createOrUpdate(resourceGroupName: string, namespaceName: string, eventHubName: string, consumerGroupName: string, parameters: models.ConsumerGroupCreateOrUpdateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ConsumerGroupResource>): void;
    createOrUpdate(resourceGroupName: string, namespaceName: string, eventHubName: string, consumerGroupName: string, parameters: models.ConsumerGroupCreateOrUpdateParameters, callback: ServiceCallback<models.ConsumerGroupResource>): void;

    /**
     * Deletes a consumer group from the specified Event Hub and resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} namespaceName The namespace name.
     *
     * @param {string} eventHubName The Event Hub name.
     *
     * @param {string} consumerGroupName The Cconsumer group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteMethod(resourceGroupName: string, namespaceName: string, eventHubName: string, consumerGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, namespaceName: string, eventHubName: string, consumerGroupName: string, callback: ServiceCallback<void>): void;

    /**
     * Gets a description for the specified consumer group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} namespaceName The namespace name.
     *
     * @param {string} eventHubName The Event Hub name.
     *
     * @param {string} consumerGroupName The consumer group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(resourceGroupName: string, namespaceName: string, eventHubName: string, consumerGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ConsumerGroupResource>): void;
    get(resourceGroupName: string, namespaceName: string, eventHubName: string, consumerGroupName: string, callback: ServiceCallback<models.ConsumerGroupResource>): void;

    /**
     * Gets all the consumer groups in a namespace. An empty feed is returned if no
     * consumer group exists in the namespace.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} namespaceName The namespace name.
     *
     * @param {string} eventHubName The Event Hub name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listAll(resourceGroupName: string, namespaceName: string, eventHubName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ConsumerGroupListResult>): void;
    listAll(resourceGroupName: string, namespaceName: string, eventHubName: string, callback: ServiceCallback<models.ConsumerGroupListResult>): void;

    /**
     * Gets all the consumer groups in a namespace. An empty feed is returned if no
     * consumer group exists in the namespace.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listAllNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ConsumerGroupListResult>): void;
    listAllNext(nextPageLink: string, callback: ServiceCallback<models.ConsumerGroupListResult>): void;
}
