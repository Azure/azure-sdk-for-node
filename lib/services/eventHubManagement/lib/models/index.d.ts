/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { BaseResource, CloudError } from "ms-rest-azure";
import * as moment from "moment";

export {

  BaseResource,
  CloudError
};

/**
 * The Resource definition
 */
export interface Resource extends BaseResource {
  /**
   * Resource Id
   */
  readonly id?: string;
  /**
   * Resource name
   */
  readonly name?: string;
  /**
   * Resource type
   */
  readonly type?: string;
}

/**
 * Definition of Resource
 */
export interface TrackedResource extends Resource {
  /**
   * Resource location
   */
  location?: string;
  /**
   * Resource tags
   */
  tags?: { [propertyName: string]: string };
}

/**
 * SKU parameters supplied to the create namespace operation
 */
export interface Sku {
  /**
   * Name of this SKU. Possible values include: 'Basic', 'Standard'
   */
  name: string;
  /**
   * The billing tier of this particular SKU. Possible values include: 'Basic', 'Standard'
   */
  tier?: string;
  /**
   * The Event Hubs throughput units, value should be 0 to 20 throughput units.
   */
  capacity?: number;
}

/**
 * Single Namespace item in List or Get Operation
 */
export interface EHNamespace extends TrackedResource {
  /**
   * Properties of sku resource
   */
  sku?: Sku;
  /**
   * Provisioning state of the Namespace.
   */
  readonly provisioningState?: string;
  /**
   * The time the Namespace was created.
   */
  readonly createdAt?: Date;
  /**
   * The time the Namespace was updated.
   */
  readonly updatedAt?: Date;
  /**
   * Endpoint you can use to perform Service Bus operations.
   */
  readonly serviceBusEndpoint?: string;
  /**
   * Identifier for Azure Insights metrics.
   */
  readonly metricId?: string;
  /**
   * Value that indicates whether AutoInflate is enabled for eventhub namespace.
   */
  isAutoInflateEnabled?: boolean;
  /**
   * Upper limit of throughput units when AutoInflate is enabled, value should be within 0 to 20
   * throughput units. ( '0' if AutoInflateEnabled = true)
   */
  maximumThroughputUnits?: number;
  /**
   * Value that indicates whether Kafka is enabled for eventhub namespace.
   */
  kafkaEnabled?: boolean;
}

/**
 * Single item in a List or Get AuthorizationRule operation
 */
export interface AuthorizationRule extends Resource {
  /**
   * The rights associated with the rule.
   */
  rights: string[];
}

/**
 * Namespace/EventHub Connection String
 */
export interface AccessKeys {
  /**
   * Primary connection string of the created namespace AuthorizationRule.
   */
  readonly primaryConnectionString?: string;
  /**
   * Secondary connection string of the created namespace AuthorizationRule.
   */
  readonly secondaryConnectionString?: string;
  /**
   * Primary connection string of the alias if GEO DR is enabled
   */
  readonly aliasPrimaryConnectionString?: string;
  /**
   * Secondary  connection string of the alias if GEO DR is enabled
   */
  readonly aliasSecondaryConnectionString?: string;
  /**
   * A base64-encoded 256-bit primary key for signing and validating the SAS token.
   */
  readonly primaryKey?: string;
  /**
   * A base64-encoded 256-bit primary key for signing and validating the SAS token.
   */
  readonly secondaryKey?: string;
  /**
   * A string that describes the AuthorizationRule.
   */
  readonly keyName?: string;
}

/**
 * Parameters supplied to the Regenerate Authorization Rule operation, specifies which key needs to
 * be reset.
 */
export interface RegenerateAccessKeyParameters {
  /**
   * The access key to regenerate. Possible values include: 'PrimaryKey', 'SecondaryKey'
   */
  keyType: string;
  /**
   * Optional, if the key value provided, is set for KeyType or autogenerated Key value set for
   * keyType
   */
  key?: string;
}

/**
 * Capture storage details for capture description
 */
export interface Destination {
  /**
   * Name for capture destination
   */
  name?: string;
  /**
   * Resource id of the storage account to be used to create the blobs
   */
  storageAccountResourceId?: string;
  /**
   * Blob container Name
   */
  blobContainer?: string;
  /**
   * Blob naming convention for archive, e.g.
   * {Namespace}/{EventHub}/{PartitionId}/{Year}/{Month}/{Day}/{Hour}/{Minute}/{Second}. Here all
   * the parameters (Namespace,EventHub .. etc) are mandatory irrespective of order
   */
  archiveNameFormat?: string;
}

/**
 * Properties to configure capture description for eventhub
 */
export interface CaptureDescription {
  /**
   * A value that indicates whether capture description is enabled.
   */
  enabled?: boolean;
  /**
   * Enumerates the possible values for the encoding format of capture description. Note:
   * 'AvroDeflate' will be deprecated in New API Version. Possible values include: 'Avro',
   * 'AvroDeflate'
   */
  encoding?: string;
  /**
   * The time window allows you to set the frequency with which the capture to Azure Blobs will
   * happen, value should between 60 to 900 seconds
   */
  intervalInSeconds?: number;
  /**
   * The size window defines the amount of data built up in your Event Hub before an capture
   * operation, value should be between 10485760 to 524288000 bytes
   */
  sizeLimitInBytes?: number;
  /**
   * Properties of Destination where capture will be stored. (Storage Account, Blob Names)
   */
  destination?: Destination;
  /**
   * A value that indicates whether to Skip Empty Archives
   */
  skipEmptyArchives?: boolean;
}

/**
 * Single item in List or Get Event Hub operation
 */
export interface Eventhub extends Resource {
  /**
   * Current number of shards on the Event Hub.
   */
  readonly partitionIds?: string[];
  /**
   * Exact time the Event Hub was created.
   */
  readonly createdAt?: Date;
  /**
   * The exact time the message was updated.
   */
  readonly updatedAt?: Date;
  /**
   * Number of days to retain the events for this Event Hub, value should be 1 to 7 days
   */
  messageRetentionInDays?: number;
  /**
   * Number of partitions created for the Event Hub, allowed values are from 1 to 32 partitions.
   */
  partitionCount?: number;
  /**
   * Enumerates the possible values for the status of the Event Hub. Possible values include:
   * 'Active', 'Disabled', 'Restoring', 'SendDisabled', 'ReceiveDisabled', 'Creating', 'Deleting',
   * 'Renaming', 'Unknown'
   */
  status?: string;
  /**
   * Properties of capture description
   */
  captureDescription?: CaptureDescription;
}

/**
 * Single item in List or Get Consumer group operation
 */
export interface ConsumerGroup extends Resource {
  /**
   * Exact time the message was created.
   */
  readonly createdAt?: Date;
  /**
   * The exact time the message was updated.
   */
  readonly updatedAt?: Date;
  /**
   * User Metadata is a placeholder to store user-defined string data with maximum length 1024.
   * e.g. it can be used to store descriptive data, such as list of teams and their contact
   * information also user-defined configuration settings can be stored.
   */
  userMetadata?: string;
}

/**
 * Parameter supplied to check Namespace name availability operation
 */
export interface CheckNameAvailabilityParameter {
  /**
   * Name to check the namespace name availability
   */
  name: string;
}

/**
 * The Result of the CheckNameAvailability operation
 */
export interface CheckNameAvailabilityResult {
  /**
   * The detailed info regarding the reason associated with the Namespace.
   */
  readonly message?: string;
  /**
   * Value indicating Namespace is availability, true if the Namespace is available; otherwise,
   * false.
   */
  nameAvailable?: boolean;
  /**
   * The reason for unavailability of a Namespace. Possible values include: 'None', 'InvalidName',
   * 'SubscriptionIsDisabled', 'NameInUse', 'NameInLockdown',
   * 'TooManyNamespaceInCurrentSubscription'
   */
  reason?: string;
}

/**
 * The object that represents the operation.
 */
export interface OperationDisplay {
  /**
   * Service provider: Microsoft.EventHub
   */
  readonly provider?: string;
  /**
   * Resource on which the operation is performed: Invoice, etc.
   */
  readonly resource?: string;
  /**
   * Operation type: Read, write, delete, etc.
   */
  readonly operation?: string;
}

/**
 * A Event Hub REST API operation
 */
export interface Operation {
  /**
   * Operation name: {provider}/{resource}/{operation}
   */
  readonly name?: string;
  /**
   * The object that represents the operation.
   */
  display?: OperationDisplay;
}

/**
 * Error response indicates EventHub service is not able to process the incoming request. The
 * reason is provided in the error message.
 */
export interface ErrorResponse {
  /**
   * Error code.
   */
  code?: string;
  /**
   * Error message indicating why the operation failed.
   */
  message?: string;
}

/**
 * Single item in List or Get Alias(Disaster Recovery configuration) operation
 */
export interface ArmDisasterRecovery extends Resource {
  /**
   * Provisioning state of the Alias(Disaster Recovery configuration) - possible values 'Accepted'
   * or 'Succeeded' or 'Failed'. Possible values include: 'Accepted', 'Succeeded', 'Failed'
   */
  readonly provisioningState?: string;
  /**
   * ARM Id of the Primary/Secondary eventhub namespace name, which is part of GEO DR pairing
   */
  partnerNamespace?: string;
  /**
   * Alternate name specified when alias and namespace names are same.
   */
  alternateName?: string;
  /**
   * role of namespace in GEO DR - possible values 'Primary' or 'PrimaryNotReplicating' or
   * 'Secondary'. Possible values include: 'Primary', 'PrimaryNotReplicating', 'Secondary'
   */
  readonly role?: string;
  /**
   * Number of entities pending to be replicated.
   */
  readonly pendingReplicationOperationsCount?: number;
}

export interface MessagingRegionsProperties {
  /**
   * Region code
  */
  readonly code?: string;
  /**
   * Full name of the region
  */
  readonly fullName?: string;
}

/**
 * Messaging Region
*/
export interface MessagingRegions extends TrackedResource {
  properties?: MessagingRegionsProperties;
}

/**
 * Messaging Plan for the namespace
*/
export interface MessagingPlan extends TrackedResource {
  /**
   * Sku type
  */
  readonly sku?: number;
  /**
   * Selected event hub unit
  */
  readonly selectedEventHubUnit?: number;
  /**
   * The exact time the messaging plan was updated.
  */
  readonly updatedAt?: Date;
  /**
   * revision number
  */
  readonly revision?: number;
}

/**
 * Properties supplied for Subnet
*/
export interface Subnet {
  /**
   * Resource ID of Virtual Network Subnet
  */
  id?: string;
}

/**
 * The response from the List namespace operation.
*/
export interface NWRuleSetIpRules {
  /**
   * IP Mask
  */
  ipMask?: string;
  /**
   * The IP Filter Action. Possible values include: 'Allow'
  */
  action?: string;
}

/**
 * The response from the List namespace operation.
*/
export interface NWRuleSetVirtualNetworkRules {
  /**
   * Subnet properties
  */
  subnet?: Subnet;
  /**
   * Value that indicates whether to ignore missing Vnet Service Endpoint
  */
  ignoreMissingVnetServiceEndpoint?: boolean;
}

/**
 * Description of topic resource.
*/
export interface NetworkRuleSet extends Resource {
  /**
   * Default Action for Network Rule Set. Possible values include: 'Allow', 'Deny'
  */
  defaultAction?: string;
  /**
   * List VirtualNetwork Rules
  */
  virtualNetworkRules?: NWRuleSetVirtualNetworkRules[];
  /**
   * List of IpRules
  */
  ipRules?: NWRuleSetIpRules[];
}

/**
 * Result of the request to list Event Hub operations. It contains a list of operations and a URL
 * link to get the next set of results.
*/
export interface OperationListResult extends Array<Operation> {
  /**
   * URL to get the next set of operation list results if there are any.
  */
  readonly nextLink?: string;
}

/**
 * The response of the List Namespace operation
*/
export interface EHNamespaceListResult extends Array<EHNamespace> {
  /**
   * Link to the next set of results. Not empty if Value contains incomplete list of namespaces.
  */
  nextLink?: string;
}

/**
 * The response from the List namespace operation.
*/
export interface AuthorizationRuleListResult extends Array<AuthorizationRule> {
  /**
   * Link to the next set of results. Not empty if Value contains an incomplete list of
   * Authorization Rules
  */
  nextLink?: string;
}

/**
 * The result of the List Alias(Disaster Recovery configuration) operation.
*/
export interface ArmDisasterRecoveryListResult extends Array<ArmDisasterRecovery> {
  /**
   * Link to the next set of results. Not empty if Value contains incomplete list of Alias(Disaster
   * Recovery configuration)
  */
  readonly nextLink?: string;
}

/**
 * The result of the List EventHubs operation.
*/
export interface EventHubListResult extends Array<Eventhub> {
  /**
   * Link to the next set of results. Not empty if Value contains incomplete list of EventHubs.
  */
  nextLink?: string;
}

/**
 * The result to the List Consumer Group operation.
*/
export interface ConsumerGroupListResult extends Array<ConsumerGroup> {
  /**
   * Link to the next set of results. Not empty if Value contains incomplete list of Consumer Group
  */
  nextLink?: string;
}

/**
 * The response of the List MessagingRegions operation.
*/
export interface MessagingRegionsListResult extends Array<MessagingRegions> {
  /**
   * Link to the next set of results. Not empty if Value contains incomplete list of
   * MessagingRegions.
  */
  readonly nextLink?: string;
}
