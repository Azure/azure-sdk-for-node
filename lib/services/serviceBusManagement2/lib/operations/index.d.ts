/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback } from 'ms-rest';
import * as models from '../models';


/**
 * @class
 * Namespaces
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceBusManagementClient.
 */
export interface Namespaces {

    /**
     * Gets all the available namespaces within the subscription, irrespective of
     * the resource groups.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listBySubscription(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NamespaceListResult>): void;
    listBySubscription(callback: ServiceCallback<models.NamespaceListResult>): void;

    /**
     * Gets the available namespaces within a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listByResourceGroup(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NamespaceListResult>): void;
    listByResourceGroup(resourceGroupName: string, callback: ServiceCallback<models.NamespaceListResult>): void;

    /**
     * Creates or updates a service namespace. Once created, this namespace's
     * resource manifest is immutable. This operation is idempotent.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} namespaceName The namespace name.
     *
     * @param {object} parameters Parameters supplied to create a namespace
     * resource.
     *
     * @param {string} parameters.location Namespace location.
     *
     * @param {object} [parameters.sku]
     *
     * @param {string} [parameters.sku.name] Name of this SKU. Possible values
     * include: 'Basic', 'Standard', 'Premium'
     *
     * @param {string} parameters.sku.tier The billing tier of this particular SKU.
     * Possible values include: 'Basic', 'Standard', 'Premium'
     *
     * @param {number} [parameters.sku.capacity] The specified messaging units for
     * the tier.
     *
     * @param {object} [parameters.tags] Namespace tags.
     *
     * @param {string} [parameters.provisioningState] Provisioning state of the
     * namespace.
     *
     * @param {string} [parameters.status] State of the namespace. Possible values
     * include: 'Unknown', 'Creating', 'Created', 'Activating', 'Enabling',
     * 'Active', 'Disabling', 'Disabled', 'SoftDeleting', 'SoftDeleted',
     * 'Removing', 'Removed', 'Failed'
     *
     * @param {date} [parameters.createdAt] The time the namespace was created.
     *
     * @param {date} [parameters.updatedAt] The time the namespace was updated.
     *
     * @param {string} [parameters.serviceBusEndpoint] Endpoint you can use to
     * perform Service Bus operations.
     *
     * @param {boolean} [parameters.createACSNamespace] Indicates whether to create
     * an ACS namespace.
     *
     * @param {boolean} [parameters.enabled] Specifies whether this instance is
     * enabled.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createOrUpdate(resourceGroupName: string, namespaceName: string, parameters: models.NamespaceCreateOrUpdateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NamespaceResource>): void;
    createOrUpdate(resourceGroupName: string, namespaceName: string, parameters: models.NamespaceCreateOrUpdateParameters, callback: ServiceCallback<models.NamespaceResource>): void;

    /**
     * Deletes an existing namespace. This operation also removes all associated
     * resources under the namespace.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} namespaceName The namespace name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteMethod(resourceGroupName: string, namespaceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, namespaceName: string, callback: ServiceCallback<void>): void;

    /**
     * Gets a description for the specified namespace.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} namespaceName The namespace name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(resourceGroupName: string, namespaceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NamespaceResource>): void;
    get(resourceGroupName: string, namespaceName: string, callback: ServiceCallback<models.NamespaceResource>): void;

    /**
     * Gets the authorization rules for a namespace.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} namespaceName The namespace name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listAuthorizationRules(resourceGroupName: string, namespaceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SharedAccessAuthorizationRuleListResult>): void;
    listAuthorizationRules(resourceGroupName: string, namespaceName: string, callback: ServiceCallback<models.SharedAccessAuthorizationRuleListResult>): void;

    /**
     * Creates or updates an authorization rule for a namespace.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} namespaceName The namespace name.
     *
     * @param {string} authorizationRuleName Namespace authorization rule name.
     *
     * @param {object} parameters The shared access authorization rule.
     *
     * @param {string} [parameters.location] data center location.
     *
     * @param {string} [parameters.name] Name of the authorization rule.
     *
     * @param {array} parameters.rights The rights associated with the rule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createOrUpdateAuthorizationRule(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, parameters: models.SharedAccessAuthorizationRuleCreateOrUpdateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SharedAccessAuthorizationRuleResource>): void;
    createOrUpdateAuthorizationRule(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, parameters: models.SharedAccessAuthorizationRuleCreateOrUpdateParameters, callback: ServiceCallback<models.SharedAccessAuthorizationRuleResource>): void;

    /**
     * Deletes a namespace authorization rule.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} namespaceName The namespace name.
     *
     * @param {string} authorizationRuleName Authorization rule name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteAuthorizationRule(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    deleteAuthorizationRule(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, callback: ServiceCallback<void>): void;

    /**
     * Gets an authorization rule for a namespace by rule name.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} namespaceName The namespace name.
     *
     * @param {string} authorizationRuleName Authorization rule name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getAuthorizationRule(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SharedAccessAuthorizationRuleResource>): void;
    getAuthorizationRule(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, callback: ServiceCallback<models.SharedAccessAuthorizationRuleResource>): void;

    /**
     * Gets the primary and secondary connection strings for the namespace.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} namespaceName The namespace name.
     *
     * @param {string} authorizationRuleName The authorization rule name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listKeys(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceListKeys>): void;
    listKeys(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, callback: ServiceCallback<models.ResourceListKeys>): void;

    /**
     * Regenerates the primary or secondary connection strings for the namespace.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} namespaceName The namespace name.
     *
     * @param {string} authorizationRuleName The authorization rule name.
     *
     * @param {object} parameters Parameters supplied to regenerate the
     * authorization rule.
     *
     * @param {string} [parameters.policykey] Key that needs to be regenerated.
     * Possible values include: 'PrimaryKey', 'SecondaryKey'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    regenerateKeys(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, parameters: models.RegenerateKeysParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceListKeys>): void;
    regenerateKeys(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, parameters: models.RegenerateKeysParameters, callback: ServiceCallback<models.ResourceListKeys>): void;

    /**
     * Creates or updates a service namespace. Once created, this namespace's
     * resource manifest is immutable. This operation is idempotent.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} namespaceName The namespace name.
     *
     * @param {object} parameters Parameters supplied to create a namespace
     * resource.
     *
     * @param {string} parameters.location Namespace location.
     *
     * @param {object} [parameters.sku]
     *
     * @param {string} [parameters.sku.name] Name of this SKU. Possible values
     * include: 'Basic', 'Standard', 'Premium'
     *
     * @param {string} parameters.sku.tier The billing tier of this particular SKU.
     * Possible values include: 'Basic', 'Standard', 'Premium'
     *
     * @param {number} [parameters.sku.capacity] The specified messaging units for
     * the tier.
     *
     * @param {object} [parameters.tags] Namespace tags.
     *
     * @param {string} [parameters.provisioningState] Provisioning state of the
     * namespace.
     *
     * @param {string} [parameters.status] State of the namespace. Possible values
     * include: 'Unknown', 'Creating', 'Created', 'Activating', 'Enabling',
     * 'Active', 'Disabling', 'Disabled', 'SoftDeleting', 'SoftDeleted',
     * 'Removing', 'Removed', 'Failed'
     *
     * @param {date} [parameters.createdAt] The time the namespace was created.
     *
     * @param {date} [parameters.updatedAt] The time the namespace was updated.
     *
     * @param {string} [parameters.serviceBusEndpoint] Endpoint you can use to
     * perform Service Bus operations.
     *
     * @param {boolean} [parameters.createACSNamespace] Indicates whether to create
     * an ACS namespace.
     *
     * @param {boolean} [parameters.enabled] Specifies whether this instance is
     * enabled.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginCreateOrUpdate(resourceGroupName: string, namespaceName: string, parameters: models.NamespaceCreateOrUpdateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NamespaceResource>): void;
    beginCreateOrUpdate(resourceGroupName: string, namespaceName: string, parameters: models.NamespaceCreateOrUpdateParameters, callback: ServiceCallback<models.NamespaceResource>): void;

    /**
     * Deletes an existing namespace. This operation also removes all associated
     * resources under the namespace.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} namespaceName The namespace name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginDeleteMethod(resourceGroupName: string, namespaceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, namespaceName: string, callback: ServiceCallback<void>): void;

    /**
     * Gets all the available namespaces within the subscription, irrespective of
     * the resource groups.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listBySubscriptionNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NamespaceListResult>): void;
    listBySubscriptionNext(nextPageLink: string, callback: ServiceCallback<models.NamespaceListResult>): void;

    /**
     * Gets the available namespaces within a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listByResourceGroupNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NamespaceListResult>): void;
    listByResourceGroupNext(nextPageLink: string, callback: ServiceCallback<models.NamespaceListResult>): void;

    /**
     * Gets the authorization rules for a namespace.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listAuthorizationRulesNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SharedAccessAuthorizationRuleListResult>): void;
    listAuthorizationRulesNext(nextPageLink: string, callback: ServiceCallback<models.SharedAccessAuthorizationRuleListResult>): void;
}

/**
 * @class
 * Queues
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceBusManagementClient.
 */
export interface Queues {

    /**
     * Gets the queues within a namespace.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} namespaceName The namespace name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listAll(resourceGroupName: string, namespaceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.QueueListResult>): void;
    listAll(resourceGroupName: string, namespaceName: string, callback: ServiceCallback<models.QueueListResult>): void;

    /**
     * Creates or updates a Service Bus queue. This operation is idempotent.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} namespaceName The namespace name.
     *
     * @param {string} queueName The queue name.
     *
     * @param {object} parameters Parameters supplied to create or update a queue
     * resource.
     *
     * @param {string} [parameters.name] Queue name.
     *
     * @param {string} parameters.location location of the resource.
     *
     * @param {string} [parameters.lockDuration] The duration of a peek-lock; that
     * is, the amount of time that the message is locked for other receivers. The
     * maximum value for LockDuration is 5 minutes; the default value is 1 minute.
     *
     * @param {date} [parameters.accessedAt] Last time a message was sent, or the
     * last time there was a receive request to this queue.
     *
     * @param {string} [parameters.autoDeleteOnIdle] the TimeSpan idle interval
     * after which the queue is automatically deleted. The minimum duration is 5
     * minutes.
     *
     * @param {string} [parameters.entityAvailabilityStatus] Entity availability
     * status for the queue. Possible values include: 'Available', 'Limited',
     * 'Renaming', 'Restoring', 'Unknown'
     *
     * @param {date} [parameters.createdAt] The exact time the message was created.
     *
     * @param {string} [parameters.defaultMessageTimeToLive] The default message
     * time to live value. This is the duration after which the message expires,
     * starting from when the message is sent to Service Bus. This is the default
     * value used when TimeToLive is not set on a message itself.
     *
     * @param {string} [parameters.duplicateDetectionHistoryTimeWindow] TimeSpan
     * structure that defines the duration of the duplicate detection history. The
     * default value is 10 minutes.
     *
     * @param {boolean} [parameters.enableBatchedOperations] A value that indicates
     * whether server-side batched operations are enabled.
     *
     * @param {boolean} [parameters.deadLetteringOnMessageExpiration] A value that
     * indicates whether this queue has dead letter support when a message expires.
     *
     * @param {boolean} [parameters.enableExpress] A value that indicates whether
     * Express Entities are enabled. An express queue holds a message in memory
     * temporarily before writing it to persistent storage.
     *
     * @param {boolean} [parameters.enablePartitioning] A value that indicates
     * whether the queue is to be partitioned across multiple message brokers.
     *
     * @param {boolean} [parameters.isAnonymousAccessible] A value that indicates
     * whether the message is accessible anonymously.
     *
     * @param {number} [parameters.maxDeliveryCount] The maximum delivery count. A
     * message is automatically deadlettered after this number of deliveries.
     *
     * @param {number} [parameters.maxSizeInMegabytes] The maximum size of the
     * queue in megabytes, which is the size of memory allocated for the queue.
     *
     * @param {number} [parameters.messageCount] The number of messages in the
     * queue.
     *
     * @param {object} [parameters.countDetails]
     *
     * @param {number} [parameters.countDetails.activeMessageCount] Number of
     * active messages in the queue, topic, or subscription.
     *
     * @param {number} [parameters.countDetails.deadLetterMessageCount] Number of
     * messages that are dead lettered.
     *
     * @param {number} [parameters.countDetails.scheduledMessageCount] Number of
     * scheduled messages.
     *
     * @param {number} [parameters.countDetails.transferDeadLetterMessageCount]
     * Number of messages transferred into dead letters.
     *
     * @param {number} [parameters.countDetails.transferMessageCount] Number of
     * messages transferred to another queue, topic, or subscription.
     *
     * @param {boolean} [parameters.requiresDuplicateDetection] A value indicating
     * if this queue requires duplicate detection.
     *
     * @param {boolean} [parameters.requiresSession] A value that indicates whether
     * the queue supports the concept of sessions.
     *
     * @param {number} [parameters.sizeInBytes] The size of the queue, in bytes.
     *
     * @param {string} [parameters.status] Enumerates the possible values for the
     * status of a messaging entity. Possible values include: 'Active', 'Creating',
     * 'Deleting', 'Disabled', 'ReceiveDisabled', 'Renaming', 'Restoring',
     * 'SendDisabled', 'Unknown'
     *
     * @param {boolean} [parameters.supportOrdering] A value that indicates whether
     * the queue supports ordering.
     *
     * @param {date} [parameters.updatedAt] The exact time the message was updated.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createOrUpdate(resourceGroupName: string, namespaceName: string, queueName: string, parameters: models.QueueCreateOrUpdateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.QueueResource>): void;
    createOrUpdate(resourceGroupName: string, namespaceName: string, queueName: string, parameters: models.QueueCreateOrUpdateParameters, callback: ServiceCallback<models.QueueResource>): void;

    /**
     * Deletes a queue from the specified namespace in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} namespaceName The namespace name.
     *
     * @param {string} queueName The name of the queue to be deleted.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteMethod(resourceGroupName: string, namespaceName: string, queueName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, namespaceName: string, queueName: string, callback: ServiceCallback<void>): void;

    /**
     * Returns a description for the specified queue.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} namespaceName The namespace name.
     *
     * @param {string} queueName The queue name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(resourceGroupName: string, namespaceName: string, queueName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.QueueResource>): void;
    get(resourceGroupName: string, namespaceName: string, queueName: string, callback: ServiceCallback<models.QueueResource>): void;

    /**
     * Gets all authorization rules for a queue.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} queueName The queue name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listAuthorizationRules(resourceGroupName: string, namespaceName: string, queueName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SharedAccessAuthorizationRuleListResult>): void;
    listAuthorizationRules(resourceGroupName: string, namespaceName: string, queueName: string, callback: ServiceCallback<models.SharedAccessAuthorizationRuleListResult>): void;

    /**
     * Creates an authorization rule for a queue.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} namespaceName The namespace name.
     *
     * @param {string} queueName The queue name.
     *
     * @param {string} authorizationRuleName Authorization rule name.
     *
     * @param {object} parameters The shared access authorization rule.
     *
     * @param {string} [parameters.location] data center location.
     *
     * @param {string} [parameters.name] Name of the authorization rule.
     *
     * @param {array} parameters.rights The rights associated with the rule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createOrUpdateAuthorizationRule(resourceGroupName: string, namespaceName: string, queueName: string, authorizationRuleName: string, parameters: models.SharedAccessAuthorizationRuleCreateOrUpdateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SharedAccessAuthorizationRuleResource>): void;
    createOrUpdateAuthorizationRule(resourceGroupName: string, namespaceName: string, queueName: string, authorizationRuleName: string, parameters: models.SharedAccessAuthorizationRuleCreateOrUpdateParameters, callback: ServiceCallback<models.SharedAccessAuthorizationRuleResource>): void;

    /**
     * Deletes a queue authorization rule.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} namespaceName The namespace name.
     *
     * @param {string} queueName The queue name.
     *
     * @param {string} authorizationRuleName Authorization rule name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteAuthorizationRule(resourceGroupName: string, namespaceName: string, queueName: string, authorizationRuleName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    deleteAuthorizationRule(resourceGroupName: string, namespaceName: string, queueName: string, authorizationRuleName: string, callback: ServiceCallback<void>): void;

    /**
     * Gets an authorization rule for a queue by rule name.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} namespaceName The namespace name.
     *
     * @param {string} queueName The queue name.
     *
     * @param {string} authorizationRuleName Authorization rule name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getAuthorizationRule(resourceGroupName: string, namespaceName: string, queueName: string, authorizationRuleName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SharedAccessAuthorizationRuleResource>): void;
    getAuthorizationRule(resourceGroupName: string, namespaceName: string, queueName: string, authorizationRuleName: string, callback: ServiceCallback<models.SharedAccessAuthorizationRuleResource>): void;

    /**
     * Primary and secondary connection strings to the queue.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} namespaceName The namespace name.
     *
     * @param {string} queueName The queue name.
     *
     * @param {string} authorizationRuleName The authorization rule name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listKeys(resourceGroupName: string, namespaceName: string, queueName: string, authorizationRuleName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceListKeys>): void;
    listKeys(resourceGroupName: string, namespaceName: string, queueName: string, authorizationRuleName: string, callback: ServiceCallback<models.ResourceListKeys>): void;

    /**
     * Regenerates the primary or secondary connection strings to the queue.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} namespaceName The namespace name.
     *
     * @param {string} queueName The queue name.
     *
     * @param {string} authorizationRuleName The authorization rule name.
     *
     * @param {object} parameters Parameters supplied to regenerate the
     * authorization rule.
     *
     * @param {string} [parameters.policykey] Key that needs to be regenerated.
     * Possible values include: 'PrimaryKey', 'SecondaryKey'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    regenerateKeys(resourceGroupName: string, namespaceName: string, queueName: string, authorizationRuleName: string, parameters: models.RegenerateKeysParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceListKeys>): void;
    regenerateKeys(resourceGroupName: string, namespaceName: string, queueName: string, authorizationRuleName: string, parameters: models.RegenerateKeysParameters, callback: ServiceCallback<models.ResourceListKeys>): void;

    /**
     * Gets the queues within a namespace.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listAllNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.QueueListResult>): void;
    listAllNext(nextPageLink: string, callback: ServiceCallback<models.QueueListResult>): void;

    /**
     * Gets all authorization rules for a queue.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listAuthorizationRulesNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SharedAccessAuthorizationRuleListResult>): void;
    listAuthorizationRulesNext(nextPageLink: string, callback: ServiceCallback<models.SharedAccessAuthorizationRuleListResult>): void;
}

/**
 * @class
 * Topics
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceBusManagementClient.
 */
export interface Topics {

    /**
     * Gets all the topics in a namespace.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} namespaceName The namespace name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listAll(resourceGroupName: string, namespaceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TopicListResult>): void;
    listAll(resourceGroupName: string, namespaceName: string, callback: ServiceCallback<models.TopicListResult>): void;

    /**
     * Creates a topic in the specified namespace.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} namespaceName The namespace name.
     *
     * @param {string} topicName The topic name.
     *
     * @param {object} parameters Parameters supplied to create a topic resource.
     *
     * @param {string} [parameters.name] Topic name.
     *
     * @param {string} parameters.location Location of the resource.
     *
     * @param {date} [parameters.accessedAt] Last time the message was sent, or a
     * request was received, for this topic.
     *
     * @param {string} [parameters.autoDeleteOnIdle] TimeSpan idle interval after
     * which the topic is automatically deleted. The minimum duration is 5 minutes.
     *
     * @param {string} [parameters.entityAvailabilityStatus] Entity availability
     * status for the topic. Possible values include: 'Available', 'Limited',
     * 'Renaming', 'Restoring', 'Unknown'
     *
     * @param {date} [parameters.createdAt] Exact time the message was created.
     *
     * @param {object} [parameters.countDetails]
     *
     * @param {number} [parameters.countDetails.activeMessageCount] Number of
     * active messages in the queue, topic, or subscription.
     *
     * @param {number} [parameters.countDetails.deadLetterMessageCount] Number of
     * messages that are dead lettered.
     *
     * @param {number} [parameters.countDetails.scheduledMessageCount] Number of
     * scheduled messages.
     *
     * @param {number} [parameters.countDetails.transferDeadLetterMessageCount]
     * Number of messages transferred into dead letters.
     *
     * @param {number} [parameters.countDetails.transferMessageCount] Number of
     * messages transferred to another queue, topic, or subscription.
     *
     * @param {string} [parameters.defaultMessageTimeToLive] Default message time
     * to live value. This is the duration after which the message expires,
     * starting from when the message is sent to Service Bus. This is the default
     * value used when TimeToLive is not set on a message itself.
     *
     * @param {string} [parameters.duplicateDetectionHistoryTimeWindow] TimeSpan
     * structure that defines the duration of the duplicate detection history. The
     * default value is 10 minutes.
     *
     * @param {boolean} [parameters.enableBatchedOperations] Value that indicates
     * whether server-side batched operations are enabled.
     *
     * @param {boolean} [parameters.enableExpress] Value that indicates whether
     * Express Entities are enabled. An express topic holds a message in memory
     * temporarily before writing it to persistent storage.
     *
     * @param {boolean} [parameters.enablePartitioning] Value that indicates
     * whether the topic to be partitioned across multiple message brokers is
     * enabled.
     *
     * @param {boolean} [parameters.enableSubscriptionPartitioning] Value that
     * indicates whether partitioning is enabled or disabled.
     *
     * @param {boolean} [parameters.filteringMessagesBeforePublishing] Whether
     * messages should be filtered before publishing.
     *
     * @param {boolean} [parameters.isAnonymousAccessible] Value that indicates
     * whether the message is accessible anonymously.
     *
     * @param {boolean} [parameters.isExpress]
     *
     * @param {number} [parameters.maxSizeInMegabytes] Maximum size of the topic in
     * megabytes, which is the size of the memory allocated for the topic.
     *
     * @param {boolean} [parameters.requiresDuplicateDetection] Value indicating if
     * this topic requires duplicate detection.
     *
     * @param {number} [parameters.sizeInBytes] Size of the topic, in bytes.
     *
     * @param {string} [parameters.status] Enumerates the possible values for the
     * status of a messaging entity. Possible values include: 'Active', 'Creating',
     * 'Deleting', 'Disabled', 'ReceiveDisabled', 'Renaming', 'Restoring',
     * 'SendDisabled', 'Unknown'
     *
     * @param {number} [parameters.subscriptionCount] Number of subscriptions.
     *
     * @param {boolean} [parameters.supportOrdering] Value that indicates whether
     * the topic supports ordering.
     *
     * @param {date} [parameters.updatedAt] The exact time the message was updated.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createOrUpdate(resourceGroupName: string, namespaceName: string, topicName: string, parameters: models.TopicCreateOrUpdateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TopicResource>): void;
    createOrUpdate(resourceGroupName: string, namespaceName: string, topicName: string, parameters: models.TopicCreateOrUpdateParameters, callback: ServiceCallback<models.TopicResource>): void;

    /**
     * Deletes a topic from the specified namespace and resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} namespaceName The namespace name.
     *
     * @param {string} topicName The name of the topic to delete.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteMethod(resourceGroupName: string, namespaceName: string, topicName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, namespaceName: string, topicName: string, callback: ServiceCallback<void>): void;

    /**
     * Returns a description for the specified topic.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} namespaceName The namespace name.
     *
     * @param {string} topicName The topic name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(resourceGroupName: string, namespaceName: string, topicName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TopicResource>): void;
    get(resourceGroupName: string, namespaceName: string, topicName: string, callback: ServiceCallback<models.TopicResource>): void;

    /**
     * Gets authorization rules for a topic.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} namespaceName The namespace name.
     *
     * @param {string} topicName The topic name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listAuthorizationRules(resourceGroupName: string, namespaceName: string, topicName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SharedAccessAuthorizationRuleListResult>): void;
    listAuthorizationRules(resourceGroupName: string, namespaceName: string, topicName: string, callback: ServiceCallback<models.SharedAccessAuthorizationRuleListResult>): void;

    /**
     * Creates an authorizatio rule for the specified topic.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} namespaceName The namespace name.
     *
     * @param {string} topicName The topic name.
     *
     * @param {string} authorizationRuleName Authorization rule name.
     *
     * @param {object} parameters The shared access authorization rule.
     *
     * @param {string} [parameters.location] data center location.
     *
     * @param {string} [parameters.name] Name of the authorization rule.
     *
     * @param {array} parameters.rights The rights associated with the rule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createOrUpdateAuthorizationRule(resourceGroupName: string, namespaceName: string, topicName: string, authorizationRuleName: string, parameters: models.SharedAccessAuthorizationRuleCreateOrUpdateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SharedAccessAuthorizationRuleResource>): void;
    createOrUpdateAuthorizationRule(resourceGroupName: string, namespaceName: string, topicName: string, authorizationRuleName: string, parameters: models.SharedAccessAuthorizationRuleCreateOrUpdateParameters, callback: ServiceCallback<models.SharedAccessAuthorizationRuleResource>): void;

    /**
     * Returns the specified authorization rule.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} namespaceName The namespace name.
     *
     * @param {string} topicName The topic name.
     *
     * @param {string} authorizationRuleName Authorization rule name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getAuthorizationRule(resourceGroupName: string, namespaceName: string, topicName: string, authorizationRuleName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SharedAccessAuthorizationRuleResource>): void;
    getAuthorizationRule(resourceGroupName: string, namespaceName: string, topicName: string, authorizationRuleName: string, callback: ServiceCallback<models.SharedAccessAuthorizationRuleResource>): void;

    /**
     * Deletes a topic authorization rule.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} namespaceName The namespace name.
     *
     * @param {string} topicName The topic name.
     *
     * @param {string} authorizationRuleName Authorization rule name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteAuthorizationRule(resourceGroupName: string, namespaceName: string, topicName: string, authorizationRuleName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    deleteAuthorizationRule(resourceGroupName: string, namespaceName: string, topicName: string, authorizationRuleName: string, callback: ServiceCallback<void>): void;

    /**
     * Gets the primary and secondary connection strings for the topic.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} namespaceName The namespace name.
     *
     * @param {string} topicName The topic name.
     *
     * @param {string} authorizationRuleName The authorization rule name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listKeys(resourceGroupName: string, namespaceName: string, topicName: string, authorizationRuleName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceListKeys>): void;
    listKeys(resourceGroupName: string, namespaceName: string, topicName: string, authorizationRuleName: string, callback: ServiceCallback<models.ResourceListKeys>): void;

    /**
     * Regenerates primary or secondary connection strings for the topic.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} namespaceName The namespace name.
     *
     * @param {string} topicName The topic name.
     *
     * @param {string} authorizationRuleName The authorization rule name.
     *
     * @param {object} parameters Parameters supplied to regenerate the
     * authorization rule.
     *
     * @param {string} [parameters.policykey] Key that needs to be regenerated.
     * Possible values include: 'PrimaryKey', 'SecondaryKey'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    regenerateKeys(resourceGroupName: string, namespaceName: string, topicName: string, authorizationRuleName: string, parameters: models.RegenerateKeysParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceListKeys>): void;
    regenerateKeys(resourceGroupName: string, namespaceName: string, topicName: string, authorizationRuleName: string, parameters: models.RegenerateKeysParameters, callback: ServiceCallback<models.ResourceListKeys>): void;

    /**
     * Gets all the topics in a namespace.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listAllNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TopicListResult>): void;
    listAllNext(nextPageLink: string, callback: ServiceCallback<models.TopicListResult>): void;

    /**
     * Gets authorization rules for a topic.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listAuthorizationRulesNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SharedAccessAuthorizationRuleListResult>): void;
    listAuthorizationRulesNext(nextPageLink: string, callback: ServiceCallback<models.SharedAccessAuthorizationRuleListResult>): void;
}

/**
 * @class
 * Subscriptions
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceBusManagementClient.
 */
export interface Subscriptions {

    /**
     * Lsit all the subscriptions under a specified topic.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} namespaceName The namespace name.
     *
     * @param {string} topicName The topic name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listAll(resourceGroupName: string, namespaceName: string, topicName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SubscriptionListResult>): void;
    listAll(resourceGroupName: string, namespaceName: string, topicName: string, callback: ServiceCallback<models.SubscriptionListResult>): void;

    /**
     * Creates a topic subscription.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} namespaceName The namespace name.
     *
     * @param {string} topicName The topic name.
     *
     * @param {string} subscriptionName The subscription name.
     *
     * @param {object} parameters Parameters supplied to create a subscription
     * resource.
     *
     * @param {string} parameters.location Subscription data center location.
     *
     * @param {string} [parameters.type] Resource manager type of the resource.
     *
     * @param {date} [parameters.accessedAt] Last time there was a receive request
     * to this subscription.
     *
     * @param {string} [parameters.autoDeleteOnIdle] TimeSpan idle interval after
     * which the topic is automatically deleted. The minimum duration is 5 minutes.
     *
     * @param {object} [parameters.countDetails]
     *
     * @param {number} [parameters.countDetails.activeMessageCount] Number of
     * active messages in the queue, topic, or subscription.
     *
     * @param {number} [parameters.countDetails.deadLetterMessageCount] Number of
     * messages that are dead lettered.
     *
     * @param {number} [parameters.countDetails.scheduledMessageCount] Number of
     * scheduled messages.
     *
     * @param {number} [parameters.countDetails.transferDeadLetterMessageCount]
     * Number of messages transferred into dead letters.
     *
     * @param {number} [parameters.countDetails.transferMessageCount] Number of
     * messages transferred to another queue, topic, or subscription.
     *
     * @param {date} [parameters.createdAt] Exact time the message was created.
     *
     * @param {string} [parameters.defaultMessageTimeToLive] Default message time
     * to live value. This is the duration after which the message expires,
     * starting from when the message is sent to Service Bus. This is the default
     * value used when TimeToLive is not set on a message itself.
     *
     * @param {boolean} [parameters.deadLetteringOnFilterEvaluationExceptions]
     * Value that indicates whether a subscription has dead letter support on
     * filter evaluation exceptions.
     *
     * @param {boolean} [parameters.deadLetteringOnMessageExpiration] Value that
     * indicates whether a subscription has dead letter support when a message
     * expires.
     *
     * @param {boolean} [parameters.enableBatchedOperations] Value that indicates
     * whether server-side batched operations are enabled.
     *
     * @param {string} [parameters.entityAvailabilityStatus] Entity availability
     * status for the topic. Possible values include: 'Available', 'Limited',
     * 'Renaming', 'Restoring', 'Unknown'
     *
     * @param {boolean} [parameters.isReadOnly] Value that indicates whether the
     * entity description is read-only.
     *
     * @param {string} [parameters.lockDuration] The lock duration time span for
     * the subscription.
     *
     * @param {number} [parameters.maxDeliveryCount] Number of maximum deliveries.
     *
     * @param {number} [parameters.messageCount] Number of messages.
     *
     * @param {boolean} [parameters.requiresSession] Value indicating if a
     * subscription supports the concept of sessions.
     *
     * @param {string} [parameters.status] Enumerates the possible values for the
     * status of a messaging entity. Possible values include: 'Active', 'Creating',
     * 'Deleting', 'Disabled', 'ReceiveDisabled', 'Renaming', 'Restoring',
     * 'SendDisabled', 'Unknown'
     *
     * @param {date} [parameters.updatedAt] The exact time the message was updated.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createOrUpdate(resourceGroupName: string, namespaceName: string, topicName: string, subscriptionName: string, parameters: models.SubscriptionCreateOrUpdateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SubscriptionResource>): void;
    createOrUpdate(resourceGroupName: string, namespaceName: string, topicName: string, subscriptionName: string, parameters: models.SubscriptionCreateOrUpdateParameters, callback: ServiceCallback<models.SubscriptionResource>): void;

    /**
     * Deletes a subscription from the specified topic.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} namespaceName The namespace name.
     *
     * @param {string} topicName The topic name.
     *
     * @param {string} subscriptionName The subscription name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteMethod(resourceGroupName: string, namespaceName: string, topicName: string, subscriptionName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, namespaceName: string, topicName: string, subscriptionName: string, callback: ServiceCallback<void>): void;

    /**
     * Returns a subscription description for the specified topic.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} namespaceName The namespace name.
     *
     * @param {string} topicName The topic name.
     *
     * @param {string} subscriptionName The subscription name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(resourceGroupName: string, namespaceName: string, topicName: string, subscriptionName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SubscriptionResource>): void;
    get(resourceGroupName: string, namespaceName: string, topicName: string, subscriptionName: string, callback: ServiceCallback<models.SubscriptionResource>): void;

    /**
     * Lsit all the subscriptions under a specified topic.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listAllNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SubscriptionListResult>): void;
    listAllNext(nextPageLink: string, callback: ServiceCallback<models.SubscriptionListResult>): void;
}
