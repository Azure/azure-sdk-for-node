/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback } from 'ms-rest';
import * as models from '../models';


/**
 * @class
 * Operations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceBusManagementClient.
 */
export interface Operations {

    /**
     * Lists all of the available ServiceBus REST API operations.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OperationListResult>): void;
    list(callback: ServiceCallback<models.OperationListResult>): void;

    /**
     * Lists all of the available ServiceBus REST API operations.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OperationListResult>): void;
    listNext(nextPageLink: string, callback: ServiceCallback<models.OperationListResult>): void;
}

/**
 * @class
 * Namespaces
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceBusManagementClient.
 */
export interface Namespaces {

    /**
     * Check the give namespace name availability.
     *
     * @param {object} parameters Parameters to check availability of the given
     * namespace name
     *
     * @param {string} parameters.name The Name to check the namespce name
     * availability and The namespace name can contain only letters, numbers, and
     * hyphens. The namespace must start with a letter, and it must end with a
     * letter or number.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    checkNameAvailabilityMethod(parameters: models.CheckNameAvailability, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CheckNameAvailabilityResult>): void;
    checkNameAvailabilityMethod(parameters: models.CheckNameAvailability, callback: ServiceCallback<models.CheckNameAvailabilityResult>): void;

    /**
     * Gets all the available namespaces within the subscription, irrespective of
     * the resource groups.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NamespaceListResult>): void;
    list(callback: ServiceCallback<models.NamespaceListResult>): void;

    /**
     * Gets the available namespaces within a resource group.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listByResourceGroup(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NamespaceListResult>): void;
    listByResourceGroup(resourceGroupName: string, callback: ServiceCallback<models.NamespaceListResult>): void;

    /**
     * Creates or updates a service namespace. Once created, this namespace's
     * resource manifest is immutable. This operation is idempotent.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {object} parameters Parameters supplied to create a namespace
     * resource.
     *
     * @param {object} [parameters.sku]
     *
     * @param {string} [parameters.sku.name] Name of this SKU. Possible values
     * include: 'Basic', 'Standard', 'Premium'
     *
     * @param {string} parameters.sku.tier The billing tier of this particular SKU.
     * Possible values include: 'Basic', 'Standard', 'Premium'
     *
     * @param {number} [parameters.sku.capacity] The specified messaging units for
     * the tier. For Premium tier, capacity are 1,2 and 4.
     *
     * @param {string} parameters.location Resource location
     *
     * @param {object} [parameters.tags] Resource tags
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createOrUpdate(resourceGroupName: string, namespaceName: string, parameters: models.Namespace, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Namespace>): void;
    createOrUpdate(resourceGroupName: string, namespaceName: string, parameters: models.Namespace, callback: ServiceCallback<models.Namespace>): void;

    /**
     * Deletes an existing namespace. This operation also removes all associated
     * resources under the namespace.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteMethod(resourceGroupName: string, namespaceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, namespaceName: string, callback: ServiceCallback<void>): void;

    /**
     * Gets a description for the specified namespace.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(resourceGroupName: string, namespaceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Namespace>): void;
    get(resourceGroupName: string, namespaceName: string, callback: ServiceCallback<models.Namespace>): void;

    /**
     * Updates a service namespace. Once created, this namespace's resource
     * manifest is immutable. This operation is idempotent.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {object} parameters Parameters supplied to update a namespace
     * resource.
     *
     * @param {object} [parameters.tags] Resource tags
     *
     * @param {object} [parameters.sku] The sku of the created namespace
     *
     * @param {string} [parameters.sku.name] Name of this SKU. Possible values
     * include: 'Basic', 'Standard', 'Premium'
     *
     * @param {string} parameters.sku.tier The billing tier of this particular SKU.
     * Possible values include: 'Basic', 'Standard', 'Premium'
     *
     * @param {number} [parameters.sku.capacity] The specified messaging units for
     * the tier. For Premium tier, capacity are 1,2 and 4.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    update(resourceGroupName: string, namespaceName: string, parameters: models.NamespaceUpdateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Namespace>): void;
    update(resourceGroupName: string, namespaceName: string, parameters: models.NamespaceUpdateParameters, callback: ServiceCallback<models.Namespace>): void;

    /**
     * Gets the authorization rules for a namespace.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listAuthorizationRules(resourceGroupName: string, namespaceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SharedAccessAuthorizationRuleListResult>): void;
    listAuthorizationRules(resourceGroupName: string, namespaceName: string, callback: ServiceCallback<models.SharedAccessAuthorizationRuleListResult>): void;

    /**
     * Creates or updates an authorization rule for a namespace.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} authorizationRuleName The authorizationrule name.
     *
     * @param {object} parameters The shared access authorization rule.
     *
     * @param {array} parameters.rights The rights associated with the rule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createOrUpdateAuthorizationRule(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, parameters: models.SharedAccessAuthorizationRule, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SharedAccessAuthorizationRule>): void;
    createOrUpdateAuthorizationRule(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, parameters: models.SharedAccessAuthorizationRule, callback: ServiceCallback<models.SharedAccessAuthorizationRule>): void;

    /**
     * Deletes a namespace authorization rule.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} authorizationRuleName The authorizationrule name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteAuthorizationRule(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    deleteAuthorizationRule(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, callback: ServiceCallback<void>): void;

    /**
     * Gets an authorization rule for a namespace by rule name.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} authorizationRuleName The authorizationrule name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getAuthorizationRule(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SharedAccessAuthorizationRule>): void;
    getAuthorizationRule(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, callback: ServiceCallback<models.SharedAccessAuthorizationRule>): void;

    /**
     * Gets the primary and secondary connection strings for the namespace.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} authorizationRuleName The authorizationrule name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listKeys(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceListKeys>): void;
    listKeys(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, callback: ServiceCallback<models.ResourceListKeys>): void;

    /**
     * Regenerates the primary or secondary connection strings for the namespace.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} authorizationRuleName The authorizationrule name.
     *
     * @param {object} parameters Parameters supplied to regenerate the
     * authorization rule.
     *
     * @param {string} [parameters.policykey] Key that needs to be regenerated.
     * Possible values include: 'PrimaryKey', 'SecondaryKey'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    regenerateKeys(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, parameters: models.RegenerateKeysParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceListKeys>): void;
    regenerateKeys(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, parameters: models.RegenerateKeysParameters, callback: ServiceCallback<models.ResourceListKeys>): void;

    /**
     * Creates or updates a service namespace. Once created, this namespace's
     * resource manifest is immutable. This operation is idempotent.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {object} parameters Parameters supplied to create a namespace
     * resource.
     *
     * @param {object} [parameters.sku]
     *
     * @param {string} [parameters.sku.name] Name of this SKU. Possible values
     * include: 'Basic', 'Standard', 'Premium'
     *
     * @param {string} parameters.sku.tier The billing tier of this particular SKU.
     * Possible values include: 'Basic', 'Standard', 'Premium'
     *
     * @param {number} [parameters.sku.capacity] The specified messaging units for
     * the tier. For Premium tier, capacity are 1,2 and 4.
     *
     * @param {string} parameters.location Resource location
     *
     * @param {object} [parameters.tags] Resource tags
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginCreateOrUpdate(resourceGroupName: string, namespaceName: string, parameters: models.Namespace, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Namespace>): void;
    beginCreateOrUpdate(resourceGroupName: string, namespaceName: string, parameters: models.Namespace, callback: ServiceCallback<models.Namespace>): void;

    /**
     * Deletes an existing namespace. This operation also removes all associated
     * resources under the namespace.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginDeleteMethod(resourceGroupName: string, namespaceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, namespaceName: string, callback: ServiceCallback<void>): void;

    /**
     * Gets all the available namespaces within the subscription, irrespective of
     * the resource groups.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NamespaceListResult>): void;
    listNext(nextPageLink: string, callback: ServiceCallback<models.NamespaceListResult>): void;

    /**
     * Gets the available namespaces within a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listByResourceGroupNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NamespaceListResult>): void;
    listByResourceGroupNext(nextPageLink: string, callback: ServiceCallback<models.NamespaceListResult>): void;

    /**
     * Gets the authorization rules for a namespace.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listAuthorizationRulesNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SharedAccessAuthorizationRuleListResult>): void;
    listAuthorizationRulesNext(nextPageLink: string, callback: ServiceCallback<models.SharedAccessAuthorizationRuleListResult>): void;
}

/**
 * @class
 * Queues
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceBusManagementClient.
 */
export interface Queues {

    /**
     * Gets the queues within a namespace.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listByNamespace(resourceGroupName: string, namespaceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.QueueListResult>): void;
    listByNamespace(resourceGroupName: string, namespaceName: string, callback: ServiceCallback<models.QueueListResult>): void;

    /**
     * Creates or updates a Service Bus queue. This operation is idempotent.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} queueName The queue name.
     *
     * @param {object} parameters Parameters supplied to create or update a queue
     * resource.
     *
     * @param {string} [parameters.lockDuration] The duration of a peek-lock; that
     * is, the amount of time that the message is locked for other receivers. The
     * maximum value for LockDuration is 5 minutes; the default value is 1 minute.
     * The service accepts a C# Standard TimeSpan Format for loc duration
     * https://msdn.microsoft.com/en-us/library/ee372286(v=vs.110).aspx
     *
     * @param {string} [parameters.autoDeleteOnIdle] the TimeSpan idle interval
     * after which the queue is automatically deleted. The minimum duration is 5
     * minutes. The service accepts a C# Standard TimeSpan Format for loc duration
     * https://msdn.microsoft.com/en-us/library/ee372286(v=vs.110).aspx. Format is
     * 'DD.HH:MM:SS' and default value of this property is 10675199 days.
     *
     * @param {string} [parameters.defaultMessageTimeToLive] The default message
     * time to live value. This is the duration after which the message expires,
     * starting from when the message is sent to Service Bus. This is the default
     * value used when TimeToLive is not set on a message itself. Format is
     * 'DD.HH:MM:SS' and default value of this property is 10675199 days. The
     * service accepts a C# Standard TimeSpan Format for loc duration
     * https://msdn.microsoft.com/en-us/library/ee372286(v=vs.110).aspx
     *
     * @param {string} [parameters.duplicateDetectionHistoryTimeWindow] TimeSpan
     * structure that defines the duration of the duplicate detection history. The
     * default value is 10 minutes. The service accepts a C# Standard TimeSpan
     * Format for loc duration
     * https://msdn.microsoft.com/en-us/library/ee372286(v=vs.110).aspx . Format is
     * 'DD.HH:MM:SS' and default value of this property is 10675199 days
     *
     * @param {boolean} [parameters.enableBatchedOperations] A value that indicates
     * whether server-side batched operations are enabled.
     *
     * @param {boolean} [parameters.deadLetteringOnMessageExpiration] A value that
     * indicates whether this queue has dead letter support when a message expires.
     *
     * @param {boolean} [parameters.enableExpress] A value that indicates whether
     * Express Entities are enabled. An express queue holds a message in memory
     * temporarily before writing it to persistent storage.
     *
     * @param {boolean} [parameters.enablePartitioning] A value that indicates
     * whether the queue is to be partitioned across multiple message brokers.
     *
     * @param {number} [parameters.maxDeliveryCount] The maximum delivery count. A
     * message is automatically deadlettered after this number of deliveries.
     *
     * @param {number} [parameters.maxSizeInMegabytes] The maximum size of the
     * queue in megabytes, which is the size of memory allocated for the queue.
     *
     * @param {boolean} [parameters.requiresDuplicateDetection] A value indicating
     * if this queue requires duplicate detection.
     *
     * @param {boolean} [parameters.requiresSession] A value that indicates whether
     * the queue supports the concept of sessions.
     *
     * @param {boolean} [parameters.supportOrdering] A value that indicates whether
     * the queue supports ordering.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createOrUpdate(resourceGroupName: string, namespaceName: string, queueName: string, parameters: models.Queue, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Queue>): void;
    createOrUpdate(resourceGroupName: string, namespaceName: string, queueName: string, parameters: models.Queue, callback: ServiceCallback<models.Queue>): void;

    /**
     * Deletes a queue from the specified namespace in a resource group.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} queueName The queue name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteMethod(resourceGroupName: string, namespaceName: string, queueName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, namespaceName: string, queueName: string, callback: ServiceCallback<void>): void;

    /**
     * Returns a description for the specified queue.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} queueName The queue name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(resourceGroupName: string, namespaceName: string, queueName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Queue>): void;
    get(resourceGroupName: string, namespaceName: string, queueName: string, callback: ServiceCallback<models.Queue>): void;

    /**
     * Gets all authorization rules for a queue.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} queueName The queue name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listAuthorizationRules(resourceGroupName: string, namespaceName: string, queueName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SharedAccessAuthorizationRuleListResult>): void;
    listAuthorizationRules(resourceGroupName: string, namespaceName: string, queueName: string, callback: ServiceCallback<models.SharedAccessAuthorizationRuleListResult>): void;

    /**
     * Creates an authorization rule for a queue.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} queueName The queue name.
     *
     * @param {string} authorizationRuleName The authorizationrule name.
     *
     * @param {object} parameters The shared access authorization rule.
     *
     * @param {array} parameters.rights The rights associated with the rule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createOrUpdateAuthorizationRule(resourceGroupName: string, namespaceName: string, queueName: string, authorizationRuleName: string, parameters: models.SharedAccessAuthorizationRule, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SharedAccessAuthorizationRule>): void;
    createOrUpdateAuthorizationRule(resourceGroupName: string, namespaceName: string, queueName: string, authorizationRuleName: string, parameters: models.SharedAccessAuthorizationRule, callback: ServiceCallback<models.SharedAccessAuthorizationRule>): void;

    /**
     * Deletes a queue authorization rule.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} queueName The queue name.
     *
     * @param {string} authorizationRuleName The authorizationrule name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteAuthorizationRule(resourceGroupName: string, namespaceName: string, queueName: string, authorizationRuleName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    deleteAuthorizationRule(resourceGroupName: string, namespaceName: string, queueName: string, authorizationRuleName: string, callback: ServiceCallback<void>): void;

    /**
     * Gets an authorization rule for a queue by rule name.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} queueName The queue name.
     *
     * @param {string} authorizationRuleName The authorizationrule name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getAuthorizationRule(resourceGroupName: string, namespaceName: string, queueName: string, authorizationRuleName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SharedAccessAuthorizationRule>): void;
    getAuthorizationRule(resourceGroupName: string, namespaceName: string, queueName: string, authorizationRuleName: string, callback: ServiceCallback<models.SharedAccessAuthorizationRule>): void;

    /**
     * Primary and secondary connection strings to the queue.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} queueName The queue name.
     *
     * @param {string} authorizationRuleName The authorizationrule name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listKeys(resourceGroupName: string, namespaceName: string, queueName: string, authorizationRuleName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceListKeys>): void;
    listKeys(resourceGroupName: string, namespaceName: string, queueName: string, authorizationRuleName: string, callback: ServiceCallback<models.ResourceListKeys>): void;

    /**
     * Regenerates the primary or secondary connection strings to the queue.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} queueName The queue name.
     *
     * @param {string} authorizationRuleName The authorizationrule name.
     *
     * @param {object} parameters Parameters supplied to regenerate the
     * authorization rule.
     *
     * @param {string} [parameters.policykey] Key that needs to be regenerated.
     * Possible values include: 'PrimaryKey', 'SecondaryKey'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    regenerateKeys(resourceGroupName: string, namespaceName: string, queueName: string, authorizationRuleName: string, parameters: models.RegenerateKeysParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceListKeys>): void;
    regenerateKeys(resourceGroupName: string, namespaceName: string, queueName: string, authorizationRuleName: string, parameters: models.RegenerateKeysParameters, callback: ServiceCallback<models.ResourceListKeys>): void;

    /**
     * Gets the queues within a namespace.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listByNamespaceNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.QueueListResult>): void;
    listByNamespaceNext(nextPageLink: string, callback: ServiceCallback<models.QueueListResult>): void;

    /**
     * Gets all authorization rules for a queue.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listAuthorizationRulesNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SharedAccessAuthorizationRuleListResult>): void;
    listAuthorizationRulesNext(nextPageLink: string, callback: ServiceCallback<models.SharedAccessAuthorizationRuleListResult>): void;
}

/**
 * @class
 * Topics
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceBusManagementClient.
 */
export interface Topics {

    /**
     * Gets all the topics in a namespace.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listByNamespace(resourceGroupName: string, namespaceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TopicListResult>): void;
    listByNamespace(resourceGroupName: string, namespaceName: string, callback: ServiceCallback<models.TopicListResult>): void;

    /**
     * Creates a topic in the specified namespace.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} topicName The topic name.
     *
     * @param {object} parameters Parameters supplied to create a topic resource.
     *
     * @param {string} [parameters.autoDeleteOnIdle] TimeSpan idle interval after
     * which the topic is automatically deleted. The minimum duration is 5 minutes.
     * The service accepts a C# Standard TimeSpan Format for loc duration
     * https://msdn.microsoft.com/en-us/library/ee372286(v=vs.110).aspx . Format is
     * 'DD.HH:MM:SS' and default value of this property is 10675199 days
     *
     * @param {string} [parameters.defaultMessageTimeToLive] Default message time
     * to live value. This is the duration after which the message expires,
     * starting from when the message is sent to Service Bus. This is the default
     * value used when TimeToLive is not set on a message itself. The service
     * accepts a C# Standard TimeSpan Format for loc duration
     * https://msdn.microsoft.com/en-us/library/ee372286(v=vs.110).aspx . Format is
     * 'DD.HH:MM:SS' and default value of this property is 10675199 days
     *
     * @param {string} [parameters.duplicateDetectionHistoryTimeWindow] TimeSpan
     * structure that defines the duration of the duplicate detection history. The
     * default value is 10 minutes. The service accepts a C# Standard TimeSpan
     * Format for loc duration
     * https://msdn.microsoft.com/en-us/library/ee372286(v=vs.110).aspx . Format is
     * 'DD.HH:MM:SS' and default value of this property is 10675199 days
     *
     * @param {boolean} [parameters.enableBatchedOperations] Value that indicates
     * whether server-side batched operations are enabled.
     *
     * @param {boolean} [parameters.enableExpress] Value that indicates whether
     * Express Entities are enabled. An express topic holds a message in memory
     * temporarily before writing it to persistent storage.
     *
     * @param {boolean} [parameters.enablePartitioning] Value that indicates
     * whether the topic to be partitioned across multiple message brokers is
     * enabled.
     *
     * @param {number} [parameters.maxSizeInMegabytes] Maximum size of the topic in
     * megabytes, which is the size of the memory allocated for the topic.
     *
     * @param {boolean} [parameters.requiresDuplicateDetection] Value indicating if
     * this topic requires duplicate detection.
     *
     * @param {boolean} [parameters.supportOrdering] Value that indicates whether
     * the topic supports ordering.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createOrUpdate(resourceGroupName: string, namespaceName: string, topicName: string, parameters: models.Topic, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Topic>): void;
    createOrUpdate(resourceGroupName: string, namespaceName: string, topicName: string, parameters: models.Topic, callback: ServiceCallback<models.Topic>): void;

    /**
     * Deletes a topic from the specified namespace and resource group.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} topicName The topic name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteMethod(resourceGroupName: string, namespaceName: string, topicName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, namespaceName: string, topicName: string, callback: ServiceCallback<void>): void;

    /**
     * Returns a description for the specified topic.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} topicName The topic name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(resourceGroupName: string, namespaceName: string, topicName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Topic>): void;
    get(resourceGroupName: string, namespaceName: string, topicName: string, callback: ServiceCallback<models.Topic>): void;

    /**
     * Gets authorization rules for a topic.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} topicName The topic name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listAuthorizationRules(resourceGroupName: string, namespaceName: string, topicName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SharedAccessAuthorizationRuleListResult>): void;
    listAuthorizationRules(resourceGroupName: string, namespaceName: string, topicName: string, callback: ServiceCallback<models.SharedAccessAuthorizationRuleListResult>): void;

    /**
     * Creates an authorizatio rule for the specified topic.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} topicName The topic name.
     *
     * @param {string} authorizationRuleName The authorizationrule name.
     *
     * @param {object} parameters The shared access authorization rule.
     *
     * @param {array} parameters.rights The rights associated with the rule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createOrUpdateAuthorizationRule(resourceGroupName: string, namespaceName: string, topicName: string, authorizationRuleName: string, parameters: models.SharedAccessAuthorizationRule, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SharedAccessAuthorizationRule>): void;
    createOrUpdateAuthorizationRule(resourceGroupName: string, namespaceName: string, topicName: string, authorizationRuleName: string, parameters: models.SharedAccessAuthorizationRule, callback: ServiceCallback<models.SharedAccessAuthorizationRule>): void;

    /**
     * Returns the specified authorization rule.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} topicName The topic name.
     *
     * @param {string} authorizationRuleName The authorizationrule name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getAuthorizationRule(resourceGroupName: string, namespaceName: string, topicName: string, authorizationRuleName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SharedAccessAuthorizationRule>): void;
    getAuthorizationRule(resourceGroupName: string, namespaceName: string, topicName: string, authorizationRuleName: string, callback: ServiceCallback<models.SharedAccessAuthorizationRule>): void;

    /**
     * Deletes a topic authorization rule.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} topicName The topic name.
     *
     * @param {string} authorizationRuleName The authorizationrule name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteAuthorizationRule(resourceGroupName: string, namespaceName: string, topicName: string, authorizationRuleName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    deleteAuthorizationRule(resourceGroupName: string, namespaceName: string, topicName: string, authorizationRuleName: string, callback: ServiceCallback<void>): void;

    /**
     * Gets the primary and secondary connection strings for the topic.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} topicName The topic name.
     *
     * @param {string} authorizationRuleName The authorizationrule name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listKeys(resourceGroupName: string, namespaceName: string, topicName: string, authorizationRuleName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceListKeys>): void;
    listKeys(resourceGroupName: string, namespaceName: string, topicName: string, authorizationRuleName: string, callback: ServiceCallback<models.ResourceListKeys>): void;

    /**
     * Regenerates primary or secondary connection strings for the topic.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} topicName The topic name.
     *
     * @param {string} authorizationRuleName The authorizationrule name.
     *
     * @param {object} parameters Parameters supplied to regenerate the
     * authorization rule.
     *
     * @param {string} [parameters.policykey] Key that needs to be regenerated.
     * Possible values include: 'PrimaryKey', 'SecondaryKey'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    regenerateKeys(resourceGroupName: string, namespaceName: string, topicName: string, authorizationRuleName: string, parameters: models.RegenerateKeysParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceListKeys>): void;
    regenerateKeys(resourceGroupName: string, namespaceName: string, topicName: string, authorizationRuleName: string, parameters: models.RegenerateKeysParameters, callback: ServiceCallback<models.ResourceListKeys>): void;

    /**
     * Gets all the topics in a namespace.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listByNamespaceNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TopicListResult>): void;
    listByNamespaceNext(nextPageLink: string, callback: ServiceCallback<models.TopicListResult>): void;

    /**
     * Gets authorization rules for a topic.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listAuthorizationRulesNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SharedAccessAuthorizationRuleListResult>): void;
    listAuthorizationRulesNext(nextPageLink: string, callback: ServiceCallback<models.SharedAccessAuthorizationRuleListResult>): void;
}

/**
 * @class
 * Subscriptions
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceBusManagementClient.
 */
export interface Subscriptions {

    /**
     * List all the subscriptions under a specified topic.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} topicName The topic name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listByTopic(resourceGroupName: string, namespaceName: string, topicName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SubscriptionListResult>): void;
    listByTopic(resourceGroupName: string, namespaceName: string, topicName: string, callback: ServiceCallback<models.SubscriptionListResult>): void;

    /**
     * Creates a topic subscription.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} topicName The topic name.
     *
     * @param {string} subscriptionName The subscription name.
     *
     * @param {object} parameters Parameters supplied to create a subscription
     * resource.
     *
     * @param {string} [parameters.autoDeleteOnIdle] TimeSpan idle interval after
     * which the topic is automatically deleted. The minimum duration is 5 minutes.
     * The service accepts a C# Standard TimeSpan Format for loc duration
     * https://msdn.microsoft.com/en-us/library/ee372286(v=vs.110).aspx. Format is
     * 'DD.HH:MM:SS' and default value of this property is 10675199 days
     *
     * @param {string} [parameters.defaultMessageTimeToLive] Default message time
     * to live value. This is the duration after which the message expires,
     * starting from when the message is sent to Service Bus. This is the default
     * value used when TimeToLive is not set on a message itself. The service
     * accepts a C# Standard TimeSpan Format for loc duration
     * https://msdn.microsoft.com/en-us/library/ee372286(v=vs.110).aspx . Format is
     * 'DD.HH:MM:SS' and default value of this property is 10675199 days
     *
     * @param {boolean} [parameters.deadLetteringOnFilterEvaluationExceptions]
     * Value that indicates whether a subscription has dead letter support on
     * filter evaluation exceptions.
     *
     * @param {boolean} [parameters.deadLetteringOnMessageExpiration] Value that
     * indicates whether a subscription has dead letter support when a message
     * expires.
     *
     * @param {boolean} [parameters.enableBatchedOperations] Value that indicates
     * whether server-side batched operations are enabled.
     *
     * @param {string} [parameters.lockDuration] The lock duration time span for
     * the subscription. The service accepts a C# Standard TimeSpan Format for loc
     * duration https://msdn.microsoft.com/en-us/library/ee372286(v=vs.110).aspx
     *
     * @param {number} [parameters.maxDeliveryCount] Number of maximum deliveries.
     *
     * @param {boolean} [parameters.requiresSession] Value indicating if a
     * subscription supports the concept of sessions.
     *
     * @param {string} [parameters.status] Enumerates the possible values for the
     * status of a messaging entity. Possible values include: 'Active', 'Creating',
     * 'Deleting', 'Disabled', 'ReceiveDisabled', 'Renaming', 'Restoring',
     * 'SendDisabled', 'Unknown'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createOrUpdate(resourceGroupName: string, namespaceName: string, topicName: string, subscriptionName: string, parameters: models.Subscription, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Subscription>): void;
    createOrUpdate(resourceGroupName: string, namespaceName: string, topicName: string, subscriptionName: string, parameters: models.Subscription, callback: ServiceCallback<models.Subscription>): void;

    /**
     * Deletes a subscription from the specified topic.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} topicName The topic name.
     *
     * @param {string} subscriptionName The subscription name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteMethod(resourceGroupName: string, namespaceName: string, topicName: string, subscriptionName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, namespaceName: string, topicName: string, subscriptionName: string, callback: ServiceCallback<void>): void;

    /**
     * Returns a subscription description for the specified topic.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} topicName The topic name.
     *
     * @param {string} subscriptionName The subscription name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(resourceGroupName: string, namespaceName: string, topicName: string, subscriptionName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Subscription>): void;
    get(resourceGroupName: string, namespaceName: string, topicName: string, subscriptionName: string, callback: ServiceCallback<models.Subscription>): void;

    /**
     * List all the subscriptions under a specified topic.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listByTopicNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SubscriptionListResult>): void;
    listByTopicNext(nextPageLink: string, callback: ServiceCallback<models.SubscriptionListResult>): void;
}
