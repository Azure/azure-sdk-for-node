/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback, HttpOperationResponse } from 'ms-rest';
import * as moment from 'moment';
import * as models from '../models';


/**
 * @class
 * Operations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceBusManagementClient.
 */
export interface Operations {


    /**
     * Lists all of the available ServiceBus REST API operations.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OperationListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OperationListResult>>;

    /**
     * Lists all of the available ServiceBus REST API operations.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OperationListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OperationListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OperationListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.OperationListResult>;
    list(callback: ServiceCallback<models.OperationListResult>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OperationListResult>): void;


    /**
     * Lists all of the available ServiceBus REST API operations.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OperationListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OperationListResult>>;

    /**
     * Lists all of the available ServiceBus REST API operations.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OperationListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OperationListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OperationListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.OperationListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.OperationListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OperationListResult>): void;
}

/**
 * @class
 * Namespaces
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceBusManagementClient.
 */
export interface Namespaces {


    /**
     * Check the give namespace name availability.
     *
     * @param {object} parameters Parameters to check availability of the given
     * namespace name
     *
     * @param {string} parameters.name The Name to check the namespace name
     * availability and The namespace name can contain only letters, numbers, and
     * hyphens. The namespace must start with a letter, and it must end with a
     * letter or number.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<CheckNameAvailabilityResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    checkNameAvailabilityMethodWithHttpOperationResponse(parameters: models.CheckNameAvailability, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CheckNameAvailabilityResult>>;

    /**
     * Check the give namespace name availability.
     *
     * @param {object} parameters Parameters to check availability of the given
     * namespace name
     *
     * @param {string} parameters.name The Name to check the namespace name
     * availability and The namespace name can contain only letters, numbers, and
     * hyphens. The namespace must start with a letter, and it must end with a
     * letter or number.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {CheckNameAvailabilityResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {CheckNameAvailabilityResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link CheckNameAvailabilityResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    checkNameAvailabilityMethod(parameters: models.CheckNameAvailability, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.CheckNameAvailabilityResult>;
    checkNameAvailabilityMethod(parameters: models.CheckNameAvailability, callback: ServiceCallback<models.CheckNameAvailabilityResult>): void;
    checkNameAvailabilityMethod(parameters: models.CheckNameAvailability, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CheckNameAvailabilityResult>): void;


    /**
     * Gets all the available namespaces within the subscription, irrespective of
     * the resource groups.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SBNamespaceListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SBNamespaceListResult>>;

    /**
     * Gets all the available namespaces within the subscription, irrespective of
     * the resource groups.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SBNamespaceListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SBNamespaceListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SBNamespaceListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SBNamespaceListResult>;
    list(callback: ServiceCallback<models.SBNamespaceListResult>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SBNamespaceListResult>): void;


    /**
     * Gets the available namespaces within a resource group.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SBNamespaceListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupWithHttpOperationResponse(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SBNamespaceListResult>>;

    /**
     * Gets the available namespaces within a resource group.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SBNamespaceListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SBNamespaceListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SBNamespaceListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroup(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SBNamespaceListResult>;
    listByResourceGroup(resourceGroupName: string, callback: ServiceCallback<models.SBNamespaceListResult>): void;
    listByResourceGroup(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SBNamespaceListResult>): void;


    /**
     * Creates or updates a service namespace. Once created, this namespace's
     * resource manifest is immutable. This operation is idempotent.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name.
     *
     * @param {object} parameters Parameters supplied to create a namespace
     * resource.
     *
     * @param {object} [parameters.sku] Properties of Sku
     *
     * @param {string} parameters.sku.name Name of this SKU. Possible values
     * include: 'Basic', 'Standard', 'Premium'
     *
     * @param {string} [parameters.sku.tier] The billing tier of this particular
     * SKU. Possible values include: 'Basic', 'Standard', 'Premium'
     *
     * @param {number} [parameters.sku.capacity] The specified messaging units for
     * the tier. For Premium tier, capacity are 1,2 and 4.
     *
     * @param {string} parameters.location The Geo-location where the resource
     * lives
     *
     * @param {object} [parameters.tags] Resource tags
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SBNamespace>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, parameters: models.SBNamespace, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SBNamespace>>;

    /**
     * Creates or updates a service namespace. Once created, this namespace's
     * resource manifest is immutable. This operation is idempotent.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name.
     *
     * @param {object} parameters Parameters supplied to create a namespace
     * resource.
     *
     * @param {object} [parameters.sku] Properties of Sku
     *
     * @param {string} parameters.sku.name Name of this SKU. Possible values
     * include: 'Basic', 'Standard', 'Premium'
     *
     * @param {string} [parameters.sku.tier] The billing tier of this particular
     * SKU. Possible values include: 'Basic', 'Standard', 'Premium'
     *
     * @param {number} [parameters.sku.capacity] The specified messaging units for
     * the tier. For Premium tier, capacity are 1,2 and 4.
     *
     * @param {string} parameters.location The Geo-location where the resource
     * lives
     *
     * @param {object} [parameters.tags] Resource tags
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SBNamespace} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SBNamespace} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SBNamespace} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, namespaceName: string, parameters: models.SBNamespace, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SBNamespace>;
    createOrUpdate(resourceGroupName: string, namespaceName: string, parameters: models.SBNamespace, callback: ServiceCallback<models.SBNamespace>): void;
    createOrUpdate(resourceGroupName: string, namespaceName: string, parameters: models.SBNamespace, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SBNamespace>): void;


    /**
     * Deletes an existing namespace. This operation also removes all associated
     * resources under the namespace.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes an existing namespace. This operation also removes all associated
     * resources under the namespace.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, namespaceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, namespaceName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, namespaceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets a description for the specified namespace.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SBNamespace>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SBNamespace>>;

    /**
     * Gets a description for the specified namespace.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SBNamespace} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SBNamespace} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SBNamespace} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, namespaceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SBNamespace>;
    get(resourceGroupName: string, namespaceName: string, callback: ServiceCallback<models.SBNamespace>): void;
    get(resourceGroupName: string, namespaceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SBNamespace>): void;


    /**
     * Updates a service namespace. Once created, this namespace's resource
     * manifest is immutable. This operation is idempotent.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {object} parameters Parameters supplied to update a namespace
     * resource.
     *
     * @param {object} [parameters.sku] Properties of Sku
     *
     * @param {string} parameters.sku.name Name of this SKU. Possible values
     * include: 'Basic', 'Standard', 'Premium'
     *
     * @param {string} [parameters.sku.tier] The billing tier of this particular
     * SKU. Possible values include: 'Basic', 'Standard', 'Premium'
     *
     * @param {number} [parameters.sku.capacity] The specified messaging units for
     * the tier. For Premium tier, capacity are 1,2 and 4.
     *
     * @param {string} [parameters.location] Resource location
     *
     * @param {object} [parameters.tags] Resource tags
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SBNamespace>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, parameters: models.SBNamespaceUpdateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SBNamespace>>;

    /**
     * Updates a service namespace. Once created, this namespace's resource
     * manifest is immutable. This operation is idempotent.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {object} parameters Parameters supplied to update a namespace
     * resource.
     *
     * @param {object} [parameters.sku] Properties of Sku
     *
     * @param {string} parameters.sku.name Name of this SKU. Possible values
     * include: 'Basic', 'Standard', 'Premium'
     *
     * @param {string} [parameters.sku.tier] The billing tier of this particular
     * SKU. Possible values include: 'Basic', 'Standard', 'Premium'
     *
     * @param {number} [parameters.sku.capacity] The specified messaging units for
     * the tier. For Premium tier, capacity are 1,2 and 4.
     *
     * @param {string} [parameters.location] Resource location
     *
     * @param {object} [parameters.tags] Resource tags
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SBNamespace} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SBNamespace} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SBNamespace} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, namespaceName: string, parameters: models.SBNamespaceUpdateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SBNamespace>;
    update(resourceGroupName: string, namespaceName: string, parameters: models.SBNamespaceUpdateParameters, callback: ServiceCallback<models.SBNamespace>): void;
    update(resourceGroupName: string, namespaceName: string, parameters: models.SBNamespaceUpdateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SBNamespace>): void;


    /**
     * Gets the authorization rules for a namespace.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SBAuthorizationRuleListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listAuthorizationRulesWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SBAuthorizationRuleListResult>>;

    /**
     * Gets the authorization rules for a namespace.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SBAuthorizationRuleListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SBAuthorizationRuleListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SBAuthorizationRuleListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listAuthorizationRules(resourceGroupName: string, namespaceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SBAuthorizationRuleListResult>;
    listAuthorizationRules(resourceGroupName: string, namespaceName: string, callback: ServiceCallback<models.SBAuthorizationRuleListResult>): void;
    listAuthorizationRules(resourceGroupName: string, namespaceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SBAuthorizationRuleListResult>): void;


    /**
     * Creates or updates an authorization rule for a namespace.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} authorizationRuleName The authorization rule name.
     *
     * @param {object} parameters The shared access authorization rule.
     *
     * @param {array} parameters.rights The rights associated with the rule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SBAuthorizationRule>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateAuthorizationRuleWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, parameters: models.SBAuthorizationRule, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SBAuthorizationRule>>;

    /**
     * Creates or updates an authorization rule for a namespace.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} authorizationRuleName The authorization rule name.
     *
     * @param {object} parameters The shared access authorization rule.
     *
     * @param {array} parameters.rights The rights associated with the rule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SBAuthorizationRule} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SBAuthorizationRule} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SBAuthorizationRule} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdateAuthorizationRule(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, parameters: models.SBAuthorizationRule, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SBAuthorizationRule>;
    createOrUpdateAuthorizationRule(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, parameters: models.SBAuthorizationRule, callback: ServiceCallback<models.SBAuthorizationRule>): void;
    createOrUpdateAuthorizationRule(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, parameters: models.SBAuthorizationRule, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SBAuthorizationRule>): void;


    /**
     * Deletes a namespace authorization rule.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} authorizationRuleName The authorization rule name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteAuthorizationRuleWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a namespace authorization rule.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} authorizationRuleName The authorization rule name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteAuthorizationRule(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteAuthorizationRule(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, callback: ServiceCallback<void>): void;
    deleteAuthorizationRule(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets an authorization rule for a namespace by rule name.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} authorizationRuleName The authorization rule name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SBAuthorizationRule>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getAuthorizationRuleWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SBAuthorizationRule>>;

    /**
     * Gets an authorization rule for a namespace by rule name.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} authorizationRuleName The authorization rule name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SBAuthorizationRule} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SBAuthorizationRule} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SBAuthorizationRule} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getAuthorizationRule(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SBAuthorizationRule>;
    getAuthorizationRule(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, callback: ServiceCallback<models.SBAuthorizationRule>): void;
    getAuthorizationRule(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SBAuthorizationRule>): void;


    /**
     * Gets the primary and secondary connection strings for the namespace.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} authorizationRuleName The authorization rule name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AccessKeys>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listKeysWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AccessKeys>>;

    /**
     * Gets the primary and secondary connection strings for the namespace.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} authorizationRuleName The authorization rule name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AccessKeys} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AccessKeys} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AccessKeys} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listKeys(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AccessKeys>;
    listKeys(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, callback: ServiceCallback<models.AccessKeys>): void;
    listKeys(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AccessKeys>): void;


    /**
     * Regenerates the primary or secondary connection strings for the namespace.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} authorizationRuleName The authorization rule name.
     *
     * @param {object} parameters Parameters supplied to regenerate the
     * authorization rule.
     *
     * @param {string} parameters.keyType The access key to regenerate. Possible
     * values include: 'PrimaryKey', 'SecondaryKey'
     *
     * @param {string} [parameters.key] Optional, if the key value provided, is
     * reset for KeyType value or autogenerate Key value set for keyType
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AccessKeys>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    regenerateKeysWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, parameters: models.RegenerateAccessKeyParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AccessKeys>>;

    /**
     * Regenerates the primary or secondary connection strings for the namespace.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} authorizationRuleName The authorization rule name.
     *
     * @param {object} parameters Parameters supplied to regenerate the
     * authorization rule.
     *
     * @param {string} parameters.keyType The access key to regenerate. Possible
     * values include: 'PrimaryKey', 'SecondaryKey'
     *
     * @param {string} [parameters.key] Optional, if the key value provided, is
     * reset for KeyType value or autogenerate Key value set for keyType
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AccessKeys} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AccessKeys} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AccessKeys} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    regenerateKeys(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, parameters: models.RegenerateAccessKeyParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AccessKeys>;
    regenerateKeys(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, parameters: models.RegenerateAccessKeyParameters, callback: ServiceCallback<models.AccessKeys>): void;
    regenerateKeys(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, parameters: models.RegenerateAccessKeyParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AccessKeys>): void;


    /**
     * This operation Migrate the given namespace to provided name type
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {object} parameters Parameters supplied to migrate namespace type.
     *
     * @param {string} parameters.targetNamespaceType Type of namespaces. Possible
     * values include: 'Messaging', 'NotificationHub', 'Mixed', 'EventHub', 'Relay'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    migrateWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, parameters: models.SBNamespaceMigrate, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * This operation Migrate the given namespace to provided name type
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {object} parameters Parameters supplied to migrate namespace type.
     *
     * @param {string} parameters.targetNamespaceType Type of namespaces. Possible
     * values include: 'Messaging', 'NotificationHub', 'Mixed', 'EventHub', 'Relay'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    migrate(resourceGroupName: string, namespaceName: string, parameters: models.SBNamespaceMigrate, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    migrate(resourceGroupName: string, namespaceName: string, parameters: models.SBNamespaceMigrate, callback: ServiceCallback<void>): void;
    migrate(resourceGroupName: string, namespaceName: string, parameters: models.SBNamespaceMigrate, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Creates or updates a service namespace. Once created, this namespace's
     * resource manifest is immutable. This operation is idempotent.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name.
     *
     * @param {object} parameters Parameters supplied to create a namespace
     * resource.
     *
     * @param {object} [parameters.sku] Properties of Sku
     *
     * @param {string} parameters.sku.name Name of this SKU. Possible values
     * include: 'Basic', 'Standard', 'Premium'
     *
     * @param {string} [parameters.sku.tier] The billing tier of this particular
     * SKU. Possible values include: 'Basic', 'Standard', 'Premium'
     *
     * @param {number} [parameters.sku.capacity] The specified messaging units for
     * the tier. For Premium tier, capacity are 1,2 and 4.
     *
     * @param {string} parameters.location The Geo-location where the resource
     * lives
     *
     * @param {object} [parameters.tags] Resource tags
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SBNamespace>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, parameters: models.SBNamespace, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SBNamespace>>;

    /**
     * Creates or updates a service namespace. Once created, this namespace's
     * resource manifest is immutable. This operation is idempotent.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name.
     *
     * @param {object} parameters Parameters supplied to create a namespace
     * resource.
     *
     * @param {object} [parameters.sku] Properties of Sku
     *
     * @param {string} parameters.sku.name Name of this SKU. Possible values
     * include: 'Basic', 'Standard', 'Premium'
     *
     * @param {string} [parameters.sku.tier] The billing tier of this particular
     * SKU. Possible values include: 'Basic', 'Standard', 'Premium'
     *
     * @param {number} [parameters.sku.capacity] The specified messaging units for
     * the tier. For Premium tier, capacity are 1,2 and 4.
     *
     * @param {string} parameters.location The Geo-location where the resource
     * lives
     *
     * @param {object} [parameters.tags] Resource tags
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SBNamespace} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SBNamespace} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SBNamespace} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(resourceGroupName: string, namespaceName: string, parameters: models.SBNamespace, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SBNamespace>;
    beginCreateOrUpdate(resourceGroupName: string, namespaceName: string, parameters: models.SBNamespace, callback: ServiceCallback<models.SBNamespace>): void;
    beginCreateOrUpdate(resourceGroupName: string, namespaceName: string, parameters: models.SBNamespace, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SBNamespace>): void;


    /**
     * Deletes an existing namespace. This operation also removes all associated
     * resources under the namespace.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes an existing namespace. This operation also removes all associated
     * resources under the namespace.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(resourceGroupName: string, namespaceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(resourceGroupName: string, namespaceName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, namespaceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets all the available namespaces within the subscription, irrespective of
     * the resource groups.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SBNamespaceListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SBNamespaceListResult>>;

    /**
     * Gets all the available namespaces within the subscription, irrespective of
     * the resource groups.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SBNamespaceListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SBNamespaceListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SBNamespaceListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SBNamespaceListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.SBNamespaceListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SBNamespaceListResult>): void;


    /**
     * Gets the available namespaces within a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SBNamespaceListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SBNamespaceListResult>>;

    /**
     * Gets the available namespaces within a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SBNamespaceListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SBNamespaceListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SBNamespaceListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroupNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SBNamespaceListResult>;
    listByResourceGroupNext(nextPageLink: string, callback: ServiceCallback<models.SBNamespaceListResult>): void;
    listByResourceGroupNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SBNamespaceListResult>): void;


    /**
     * Gets the authorization rules for a namespace.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SBAuthorizationRuleListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listAuthorizationRulesNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SBAuthorizationRuleListResult>>;

    /**
     * Gets the authorization rules for a namespace.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SBAuthorizationRuleListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SBAuthorizationRuleListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SBAuthorizationRuleListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listAuthorizationRulesNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SBAuthorizationRuleListResult>;
    listAuthorizationRulesNext(nextPageLink: string, callback: ServiceCallback<models.SBAuthorizationRuleListResult>): void;
    listAuthorizationRulesNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SBAuthorizationRuleListResult>): void;
}

/**
 * @class
 * DisasterRecoveryConfigs
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceBusManagementClient.
 */
export interface DisasterRecoveryConfigs {


    /**
     * Check the give namespace name availability.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {object} parameters Parameters to check availability of the given
     * namespace name
     *
     * @param {string} parameters.name The Name to check the namespace name
     * availability and The namespace name can contain only letters, numbers, and
     * hyphens. The namespace must start with a letter, and it must end with a
     * letter or number.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<CheckNameAvailabilityResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    checkNameAvailabilityMethodWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, parameters: models.CheckNameAvailability, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CheckNameAvailabilityResult>>;

    /**
     * Check the give namespace name availability.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {object} parameters Parameters to check availability of the given
     * namespace name
     *
     * @param {string} parameters.name The Name to check the namespace name
     * availability and The namespace name can contain only letters, numbers, and
     * hyphens. The namespace must start with a letter, and it must end with a
     * letter or number.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {CheckNameAvailabilityResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {CheckNameAvailabilityResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link CheckNameAvailabilityResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    checkNameAvailabilityMethod(resourceGroupName: string, namespaceName: string, parameters: models.CheckNameAvailability, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.CheckNameAvailabilityResult>;
    checkNameAvailabilityMethod(resourceGroupName: string, namespaceName: string, parameters: models.CheckNameAvailability, callback: ServiceCallback<models.CheckNameAvailabilityResult>): void;
    checkNameAvailabilityMethod(resourceGroupName: string, namespaceName: string, parameters: models.CheckNameAvailability, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CheckNameAvailabilityResult>): void;


    /**
     * Gets all Alias(Disaster Recovery configurations)
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ArmDisasterRecoveryListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ArmDisasterRecoveryListResult>>;

    /**
     * Gets all Alias(Disaster Recovery configurations)
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ArmDisasterRecoveryListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ArmDisasterRecoveryListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ArmDisasterRecoveryListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(resourceGroupName: string, namespaceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ArmDisasterRecoveryListResult>;
    list(resourceGroupName: string, namespaceName: string, callback: ServiceCallback<models.ArmDisasterRecoveryListResult>): void;
    list(resourceGroupName: string, namespaceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ArmDisasterRecoveryListResult>): void;


    /**
     * Creates or updates a new Alias(Disaster Recovery configuration)
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} alias The Disaster Recovery configuration name
     *
     * @param {object} parameters Parameters required to create an Alias(Disaster
     * Recovery configuration)
     *
     * @param {string} [parameters.partnerNamespace] ARM Id of the
     * Primary/Secondary eventhub namespace name, which is part of GEO DR pairing
     *
     * @param {string} [parameters.alternateName] Primary/Secondary eventhub
     * namespace name, which is part of GEO DR pairing
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ArmDisasterRecovery>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, alias: string, parameters: models.ArmDisasterRecovery, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ArmDisasterRecovery>>;

    /**
     * Creates or updates a new Alias(Disaster Recovery configuration)
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} alias The Disaster Recovery configuration name
     *
     * @param {object} parameters Parameters required to create an Alias(Disaster
     * Recovery configuration)
     *
     * @param {string} [parameters.partnerNamespace] ARM Id of the
     * Primary/Secondary eventhub namespace name, which is part of GEO DR pairing
     *
     * @param {string} [parameters.alternateName] Primary/Secondary eventhub
     * namespace name, which is part of GEO DR pairing
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ArmDisasterRecovery} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ArmDisasterRecovery} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ArmDisasterRecovery} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, namespaceName: string, alias: string, parameters: models.ArmDisasterRecovery, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ArmDisasterRecovery>;
    createOrUpdate(resourceGroupName: string, namespaceName: string, alias: string, parameters: models.ArmDisasterRecovery, callback: ServiceCallback<models.ArmDisasterRecovery>): void;
    createOrUpdate(resourceGroupName: string, namespaceName: string, alias: string, parameters: models.ArmDisasterRecovery, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ArmDisasterRecovery>): void;


    /**
     * Deletes an Alias(Disaster Recovery configuration)
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} alias The Disaster Recovery configuration name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, alias: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes an Alias(Disaster Recovery configuration)
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} alias The Disaster Recovery configuration name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, namespaceName: string, alias: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, namespaceName: string, alias: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, namespaceName: string, alias: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Retrieves Alias(Disaster Recovery configuration) for primary or secondary
     * namespace
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} alias The Disaster Recovery configuration name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ArmDisasterRecovery>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, alias: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ArmDisasterRecovery>>;

    /**
     * Retrieves Alias(Disaster Recovery configuration) for primary or secondary
     * namespace
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} alias The Disaster Recovery configuration name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ArmDisasterRecovery} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ArmDisasterRecovery} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ArmDisasterRecovery} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, namespaceName: string, alias: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ArmDisasterRecovery>;
    get(resourceGroupName: string, namespaceName: string, alias: string, callback: ServiceCallback<models.ArmDisasterRecovery>): void;
    get(resourceGroupName: string, namespaceName: string, alias: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ArmDisasterRecovery>): void;


    /**
     * This operation disables the Disaster Recovery and stops replicating changes
     * from primary to secondary namespaces
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} alias The Disaster Recovery configuration name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    breakPairingWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, alias: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * This operation disables the Disaster Recovery and stops replicating changes
     * from primary to secondary namespaces
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} alias The Disaster Recovery configuration name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    breakPairing(resourceGroupName: string, namespaceName: string, alias: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    breakPairing(resourceGroupName: string, namespaceName: string, alias: string, callback: ServiceCallback<void>): void;
    breakPairing(resourceGroupName: string, namespaceName: string, alias: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Invokes GEO DR failover and reconfigure the alias to point to the secondary
     * namespace
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} alias The Disaster Recovery configuration name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    failOverWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, alias: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Invokes GEO DR failover and reconfigure the alias to point to the secondary
     * namespace
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} alias The Disaster Recovery configuration name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    failOver(resourceGroupName: string, namespaceName: string, alias: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    failOver(resourceGroupName: string, namespaceName: string, alias: string, callback: ServiceCallback<void>): void;
    failOver(resourceGroupName: string, namespaceName: string, alias: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets the authorization rules for a namespace.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} alias The Disaster Recovery configuration name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SBAuthorizationRuleListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listAuthorizationRulesWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, alias: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SBAuthorizationRuleListResult>>;

    /**
     * Gets the authorization rules for a namespace.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} alias The Disaster Recovery configuration name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SBAuthorizationRuleListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SBAuthorizationRuleListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SBAuthorizationRuleListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listAuthorizationRules(resourceGroupName: string, namespaceName: string, alias: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SBAuthorizationRuleListResult>;
    listAuthorizationRules(resourceGroupName: string, namespaceName: string, alias: string, callback: ServiceCallback<models.SBAuthorizationRuleListResult>): void;
    listAuthorizationRules(resourceGroupName: string, namespaceName: string, alias: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SBAuthorizationRuleListResult>): void;


    /**
     * Gets an authorization rule for a namespace by rule name.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} alias The Disaster Recovery configuration name
     *
     * @param {string} authorizationRuleName The authorization rule name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SBAuthorizationRule>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getAuthorizationRuleWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, alias: string, authorizationRuleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SBAuthorizationRule>>;

    /**
     * Gets an authorization rule for a namespace by rule name.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} alias The Disaster Recovery configuration name
     *
     * @param {string} authorizationRuleName The authorization rule name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SBAuthorizationRule} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SBAuthorizationRule} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SBAuthorizationRule} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getAuthorizationRule(resourceGroupName: string, namespaceName: string, alias: string, authorizationRuleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SBAuthorizationRule>;
    getAuthorizationRule(resourceGroupName: string, namespaceName: string, alias: string, authorizationRuleName: string, callback: ServiceCallback<models.SBAuthorizationRule>): void;
    getAuthorizationRule(resourceGroupName: string, namespaceName: string, alias: string, authorizationRuleName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SBAuthorizationRule>): void;


    /**
     * Gets the primary and secondary connection strings for the namespace.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} alias The Disaster Recovery configuration name
     *
     * @param {string} authorizationRuleName The authorization rule name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AccessKeys>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listKeysWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, alias: string, authorizationRuleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AccessKeys>>;

    /**
     * Gets the primary and secondary connection strings for the namespace.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} alias The Disaster Recovery configuration name
     *
     * @param {string} authorizationRuleName The authorization rule name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AccessKeys} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AccessKeys} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AccessKeys} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listKeys(resourceGroupName: string, namespaceName: string, alias: string, authorizationRuleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AccessKeys>;
    listKeys(resourceGroupName: string, namespaceName: string, alias: string, authorizationRuleName: string, callback: ServiceCallback<models.AccessKeys>): void;
    listKeys(resourceGroupName: string, namespaceName: string, alias: string, authorizationRuleName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AccessKeys>): void;


    /**
     * Gets all Alias(Disaster Recovery configurations)
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ArmDisasterRecoveryListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ArmDisasterRecoveryListResult>>;

    /**
     * Gets all Alias(Disaster Recovery configurations)
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ArmDisasterRecoveryListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ArmDisasterRecoveryListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ArmDisasterRecoveryListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ArmDisasterRecoveryListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.ArmDisasterRecoveryListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ArmDisasterRecoveryListResult>): void;


    /**
     * Gets the authorization rules for a namespace.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SBAuthorizationRuleListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listAuthorizationRulesNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SBAuthorizationRuleListResult>>;

    /**
     * Gets the authorization rules for a namespace.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SBAuthorizationRuleListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SBAuthorizationRuleListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SBAuthorizationRuleListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listAuthorizationRulesNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SBAuthorizationRuleListResult>;
    listAuthorizationRulesNext(nextPageLink: string, callback: ServiceCallback<models.SBAuthorizationRuleListResult>): void;
    listAuthorizationRulesNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SBAuthorizationRuleListResult>): void;
}

/**
 * @class
 * MigrationConfigs
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceBusManagementClient.
 */
export interface MigrationConfigs {


    /**
     * Gets all migrationConfigurations
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<MigrationConfigListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.MigrationConfigListResult>>;

    /**
     * Gets all migrationConfigurations
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {MigrationConfigListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {MigrationConfigListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link MigrationConfigListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(resourceGroupName: string, namespaceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.MigrationConfigListResult>;
    list(resourceGroupName: string, namespaceName: string, callback: ServiceCallback<models.MigrationConfigListResult>): void;
    list(resourceGroupName: string, namespaceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.MigrationConfigListResult>): void;


    /**
     * Creates Migration configuration and starts migration of entities from
     * Standard to Premium namespace
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {object} parameters Parameters required to create Migration
     * Configuration
     *
     * @param {string} parameters.targetNamespace Existing premium Namespace ARM Id
     * name which has no entities, will be used for migration
     *
     * @param {string} parameters.postMigrationName Name to access Standard
     * Namespace after migration
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<MigrationConfigProperties>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createAndStartMigrationWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, parameters: models.MigrationConfigProperties, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.MigrationConfigProperties>>;

    /**
     * Creates Migration configuration and starts migration of entities from
     * Standard to Premium namespace
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {object} parameters Parameters required to create Migration
     * Configuration
     *
     * @param {string} parameters.targetNamespace Existing premium Namespace ARM Id
     * name which has no entities, will be used for migration
     *
     * @param {string} parameters.postMigrationName Name to access Standard
     * Namespace after migration
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {MigrationConfigProperties} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {MigrationConfigProperties} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link MigrationConfigProperties} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createAndStartMigration(resourceGroupName: string, namespaceName: string, parameters: models.MigrationConfigProperties, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.MigrationConfigProperties>;
    createAndStartMigration(resourceGroupName: string, namespaceName: string, parameters: models.MigrationConfigProperties, callback: ServiceCallback<models.MigrationConfigProperties>): void;
    createAndStartMigration(resourceGroupName: string, namespaceName: string, parameters: models.MigrationConfigProperties, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.MigrationConfigProperties>): void;


    /**
     * Deletes a MigrationConfiguration
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a MigrationConfiguration
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, namespaceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, namespaceName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, namespaceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Retrieves Migration Config
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<MigrationConfigProperties>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.MigrationConfigProperties>>;

    /**
     * Retrieves Migration Config
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {MigrationConfigProperties} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {MigrationConfigProperties} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link MigrationConfigProperties} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, namespaceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.MigrationConfigProperties>;
    get(resourceGroupName: string, namespaceName: string, callback: ServiceCallback<models.MigrationConfigProperties>): void;
    get(resourceGroupName: string, namespaceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.MigrationConfigProperties>): void;


    /**
     * This operation Completes Migration of entities by pointing the connection
     * strings to Premium namespace and any entities created after the operation
     * will be under Premium Namespace. CompleteMigration operation will fail when
     * entity migration is in-progress.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    completeMigrationWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * This operation Completes Migration of entities by pointing the connection
     * strings to Premium namespace and any entities created after the operation
     * will be under Premium Namespace. CompleteMigration operation will fail when
     * entity migration is in-progress.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    completeMigration(resourceGroupName: string, namespaceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    completeMigration(resourceGroupName: string, namespaceName: string, callback: ServiceCallback<void>): void;
    completeMigration(resourceGroupName: string, namespaceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * This operation reverts Migration
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    revertWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * This operation reverts Migration
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    revert(resourceGroupName: string, namespaceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    revert(resourceGroupName: string, namespaceName: string, callback: ServiceCallback<void>): void;
    revert(resourceGroupName: string, namespaceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Creates Migration configuration and starts migration of entities from
     * Standard to Premium namespace
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {object} parameters Parameters required to create Migration
     * Configuration
     *
     * @param {string} parameters.targetNamespace Existing premium Namespace ARM Id
     * name which has no entities, will be used for migration
     *
     * @param {string} parameters.postMigrationName Name to access Standard
     * Namespace after migration
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<MigrationConfigProperties>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateAndStartMigrationWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, parameters: models.MigrationConfigProperties, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.MigrationConfigProperties>>;

    /**
     * Creates Migration configuration and starts migration of entities from
     * Standard to Premium namespace
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {object} parameters Parameters required to create Migration
     * Configuration
     *
     * @param {string} parameters.targetNamespace Existing premium Namespace ARM Id
     * name which has no entities, will be used for migration
     *
     * @param {string} parameters.postMigrationName Name to access Standard
     * Namespace after migration
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {MigrationConfigProperties} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {MigrationConfigProperties} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link MigrationConfigProperties} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateAndStartMigration(resourceGroupName: string, namespaceName: string, parameters: models.MigrationConfigProperties, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.MigrationConfigProperties>;
    beginCreateAndStartMigration(resourceGroupName: string, namespaceName: string, parameters: models.MigrationConfigProperties, callback: ServiceCallback<models.MigrationConfigProperties>): void;
    beginCreateAndStartMigration(resourceGroupName: string, namespaceName: string, parameters: models.MigrationConfigProperties, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.MigrationConfigProperties>): void;


    /**
     * Gets all migrationConfigurations
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<MigrationConfigListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.MigrationConfigListResult>>;

    /**
     * Gets all migrationConfigurations
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {MigrationConfigListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {MigrationConfigListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link MigrationConfigListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.MigrationConfigListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.MigrationConfigListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.MigrationConfigListResult>): void;
}

/**
 * @class
 * Queues
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceBusManagementClient.
 */
export interface Queues {


    /**
     * Gets the queues within a namespace.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.skip] Skip is only used if a previous operation
     * returned a partial result. If a previous response contains a nextLink
     * element, the value of the nextLink element will include a skip parameter
     * that specifies a starting point to use for subsequent calls.
     *
     * @param {number} [options.top] May be used to limit the number of results to
     * the most recent N usageDetails.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SBQueueListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByNamespaceWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, options?: { skip? : number, top? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SBQueueListResult>>;

    /**
     * Gets the queues within a namespace.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.skip] Skip is only used if a previous operation
     * returned a partial result. If a previous response contains a nextLink
     * element, the value of the nextLink element will include a skip parameter
     * that specifies a starting point to use for subsequent calls.
     *
     * @param {number} [options.top] May be used to limit the number of results to
     * the most recent N usageDetails.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SBQueueListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SBQueueListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SBQueueListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByNamespace(resourceGroupName: string, namespaceName: string, options?: { skip? : number, top? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.SBQueueListResult>;
    listByNamespace(resourceGroupName: string, namespaceName: string, callback: ServiceCallback<models.SBQueueListResult>): void;
    listByNamespace(resourceGroupName: string, namespaceName: string, options: { skip? : number, top? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SBQueueListResult>): void;


    /**
     * Creates or updates a Service Bus queue. This operation is idempotent.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} queueName The queue name.
     *
     * @param {object} parameters Parameters supplied to create or update a queue
     * resource.
     *
     * @param {moment.duration} [parameters.lockDuration] ISO 8601 timespan
     * duration of a peek-lock; that is, the amount of time that the message is
     * locked for other receivers. The maximum value for LockDuration is 5 minutes;
     * the default value is 1 minute.
     *
     * @param {number} [parameters.maxSizeInMegabytes] The maximum size of the
     * queue in megabytes, which is the size of memory allocated for the queue.
     * Default is 1024.
     *
     * @param {boolean} [parameters.requiresDuplicateDetection] A value indicating
     * if this queue requires duplicate detection.
     *
     * @param {boolean} [parameters.requiresSession] A value that indicates whether
     * the queue supports the concept of sessions.
     *
     * @param {moment.duration} [parameters.defaultMessageTimeToLive] ISO 8601
     * default message timespan to live value. This is the duration after which the
     * message expires, starting from when the message is sent to Service Bus. This
     * is the default value used when TimeToLive is not set on a message itself.
     *
     * @param {boolean} [parameters.deadLetteringOnMessageExpiration] A value that
     * indicates whether this queue has dead letter support when a message expires.
     *
     * @param {moment.duration} [parameters.duplicateDetectionHistoryTimeWindow]
     * ISO 8601 timeSpan structure that defines the duration of the duplicate
     * detection history. The default value is 10 minutes.
     *
     * @param {number} [parameters.maxDeliveryCount] The maximum delivery count. A
     * message is automatically deadlettered after this number of deliveries.
     * default value is 10.
     *
     * @param {string} [parameters.status] Enumerates the possible values for the
     * status of a messaging entity. Possible values include: 'Active', 'Disabled',
     * 'Restoring', 'SendDisabled', 'ReceiveDisabled', 'Creating', 'Deleting',
     * 'Renaming', 'Unknown'
     *
     * @param {boolean} [parameters.enableBatchedOperations] Value that indicates
     * whether server-side batched operations are enabled.
     *
     * @param {moment.duration} [parameters.autoDeleteOnIdle] ISO 8061 timeSpan
     * idle interval after which the queue is automatically deleted. The minimum
     * duration is 5 minutes.
     *
     * @param {boolean} [parameters.enablePartitioning] A value that indicates
     * whether the queue is to be partitioned across multiple message brokers.
     *
     * @param {boolean} [parameters.enableExpress] A value that indicates whether
     * Express Entities are enabled. An express queue holds a message in memory
     * temporarily before writing it to persistent storage.
     *
     * @param {string} [parameters.forwardTo] Queue/Topic name to forward the
     * messages
     *
     * @param {string} [parameters.forwardDeadLetteredMessagesTo] Queue/Topic name
     * to forward the Dead Letter message
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SBQueue>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, queueName: string, parameters: models.SBQueue, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SBQueue>>;

    /**
     * Creates or updates a Service Bus queue. This operation is idempotent.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} queueName The queue name.
     *
     * @param {object} parameters Parameters supplied to create or update a queue
     * resource.
     *
     * @param {moment.duration} [parameters.lockDuration] ISO 8601 timespan
     * duration of a peek-lock; that is, the amount of time that the message is
     * locked for other receivers. The maximum value for LockDuration is 5 minutes;
     * the default value is 1 minute.
     *
     * @param {number} [parameters.maxSizeInMegabytes] The maximum size of the
     * queue in megabytes, which is the size of memory allocated for the queue.
     * Default is 1024.
     *
     * @param {boolean} [parameters.requiresDuplicateDetection] A value indicating
     * if this queue requires duplicate detection.
     *
     * @param {boolean} [parameters.requiresSession] A value that indicates whether
     * the queue supports the concept of sessions.
     *
     * @param {moment.duration} [parameters.defaultMessageTimeToLive] ISO 8601
     * default message timespan to live value. This is the duration after which the
     * message expires, starting from when the message is sent to Service Bus. This
     * is the default value used when TimeToLive is not set on a message itself.
     *
     * @param {boolean} [parameters.deadLetteringOnMessageExpiration] A value that
     * indicates whether this queue has dead letter support when a message expires.
     *
     * @param {moment.duration} [parameters.duplicateDetectionHistoryTimeWindow]
     * ISO 8601 timeSpan structure that defines the duration of the duplicate
     * detection history. The default value is 10 minutes.
     *
     * @param {number} [parameters.maxDeliveryCount] The maximum delivery count. A
     * message is automatically deadlettered after this number of deliveries.
     * default value is 10.
     *
     * @param {string} [parameters.status] Enumerates the possible values for the
     * status of a messaging entity. Possible values include: 'Active', 'Disabled',
     * 'Restoring', 'SendDisabled', 'ReceiveDisabled', 'Creating', 'Deleting',
     * 'Renaming', 'Unknown'
     *
     * @param {boolean} [parameters.enableBatchedOperations] Value that indicates
     * whether server-side batched operations are enabled.
     *
     * @param {moment.duration} [parameters.autoDeleteOnIdle] ISO 8061 timeSpan
     * idle interval after which the queue is automatically deleted. The minimum
     * duration is 5 minutes.
     *
     * @param {boolean} [parameters.enablePartitioning] A value that indicates
     * whether the queue is to be partitioned across multiple message brokers.
     *
     * @param {boolean} [parameters.enableExpress] A value that indicates whether
     * Express Entities are enabled. An express queue holds a message in memory
     * temporarily before writing it to persistent storage.
     *
     * @param {string} [parameters.forwardTo] Queue/Topic name to forward the
     * messages
     *
     * @param {string} [parameters.forwardDeadLetteredMessagesTo] Queue/Topic name
     * to forward the Dead Letter message
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SBQueue} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SBQueue} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SBQueue} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, namespaceName: string, queueName: string, parameters: models.SBQueue, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SBQueue>;
    createOrUpdate(resourceGroupName: string, namespaceName: string, queueName: string, parameters: models.SBQueue, callback: ServiceCallback<models.SBQueue>): void;
    createOrUpdate(resourceGroupName: string, namespaceName: string, queueName: string, parameters: models.SBQueue, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SBQueue>): void;


    /**
     * Deletes a queue from the specified namespace in a resource group.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} queueName The queue name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, queueName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a queue from the specified namespace in a resource group.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} queueName The queue name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, namespaceName: string, queueName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, namespaceName: string, queueName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, namespaceName: string, queueName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Returns a description for the specified queue.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} queueName The queue name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SBQueue>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, queueName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SBQueue>>;

    /**
     * Returns a description for the specified queue.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} queueName The queue name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SBQueue} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SBQueue} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SBQueue} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, namespaceName: string, queueName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SBQueue>;
    get(resourceGroupName: string, namespaceName: string, queueName: string, callback: ServiceCallback<models.SBQueue>): void;
    get(resourceGroupName: string, namespaceName: string, queueName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SBQueue>): void;


    /**
     * Gets all authorization rules for a queue.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} queueName The queue name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SBAuthorizationRuleListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listAuthorizationRulesWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, queueName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SBAuthorizationRuleListResult>>;

    /**
     * Gets all authorization rules for a queue.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} queueName The queue name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SBAuthorizationRuleListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SBAuthorizationRuleListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SBAuthorizationRuleListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listAuthorizationRules(resourceGroupName: string, namespaceName: string, queueName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SBAuthorizationRuleListResult>;
    listAuthorizationRules(resourceGroupName: string, namespaceName: string, queueName: string, callback: ServiceCallback<models.SBAuthorizationRuleListResult>): void;
    listAuthorizationRules(resourceGroupName: string, namespaceName: string, queueName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SBAuthorizationRuleListResult>): void;


    /**
     * Creates an authorization rule for a queue.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} queueName The queue name.
     *
     * @param {string} authorizationRuleName The authorization rule name.
     *
     * @param {object} parameters The shared access authorization rule.
     *
     * @param {array} parameters.rights The rights associated with the rule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SBAuthorizationRule>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateAuthorizationRuleWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, queueName: string, authorizationRuleName: string, parameters: models.SBAuthorizationRule, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SBAuthorizationRule>>;

    /**
     * Creates an authorization rule for a queue.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} queueName The queue name.
     *
     * @param {string} authorizationRuleName The authorization rule name.
     *
     * @param {object} parameters The shared access authorization rule.
     *
     * @param {array} parameters.rights The rights associated with the rule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SBAuthorizationRule} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SBAuthorizationRule} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SBAuthorizationRule} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdateAuthorizationRule(resourceGroupName: string, namespaceName: string, queueName: string, authorizationRuleName: string, parameters: models.SBAuthorizationRule, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SBAuthorizationRule>;
    createOrUpdateAuthorizationRule(resourceGroupName: string, namespaceName: string, queueName: string, authorizationRuleName: string, parameters: models.SBAuthorizationRule, callback: ServiceCallback<models.SBAuthorizationRule>): void;
    createOrUpdateAuthorizationRule(resourceGroupName: string, namespaceName: string, queueName: string, authorizationRuleName: string, parameters: models.SBAuthorizationRule, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SBAuthorizationRule>): void;


    /**
     * Deletes a queue authorization rule.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} queueName The queue name.
     *
     * @param {string} authorizationRuleName The authorization rule name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteAuthorizationRuleWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, queueName: string, authorizationRuleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a queue authorization rule.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} queueName The queue name.
     *
     * @param {string} authorizationRuleName The authorization rule name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteAuthorizationRule(resourceGroupName: string, namespaceName: string, queueName: string, authorizationRuleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteAuthorizationRule(resourceGroupName: string, namespaceName: string, queueName: string, authorizationRuleName: string, callback: ServiceCallback<void>): void;
    deleteAuthorizationRule(resourceGroupName: string, namespaceName: string, queueName: string, authorizationRuleName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets an authorization rule for a queue by rule name.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} queueName The queue name.
     *
     * @param {string} authorizationRuleName The authorization rule name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SBAuthorizationRule>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getAuthorizationRuleWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, queueName: string, authorizationRuleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SBAuthorizationRule>>;

    /**
     * Gets an authorization rule for a queue by rule name.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} queueName The queue name.
     *
     * @param {string} authorizationRuleName The authorization rule name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SBAuthorizationRule} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SBAuthorizationRule} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SBAuthorizationRule} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getAuthorizationRule(resourceGroupName: string, namespaceName: string, queueName: string, authorizationRuleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SBAuthorizationRule>;
    getAuthorizationRule(resourceGroupName: string, namespaceName: string, queueName: string, authorizationRuleName: string, callback: ServiceCallback<models.SBAuthorizationRule>): void;
    getAuthorizationRule(resourceGroupName: string, namespaceName: string, queueName: string, authorizationRuleName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SBAuthorizationRule>): void;


    /**
     * Primary and secondary connection strings to the queue.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} queueName The queue name.
     *
     * @param {string} authorizationRuleName The authorization rule name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AccessKeys>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listKeysWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, queueName: string, authorizationRuleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AccessKeys>>;

    /**
     * Primary and secondary connection strings to the queue.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} queueName The queue name.
     *
     * @param {string} authorizationRuleName The authorization rule name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AccessKeys} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AccessKeys} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AccessKeys} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listKeys(resourceGroupName: string, namespaceName: string, queueName: string, authorizationRuleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AccessKeys>;
    listKeys(resourceGroupName: string, namespaceName: string, queueName: string, authorizationRuleName: string, callback: ServiceCallback<models.AccessKeys>): void;
    listKeys(resourceGroupName: string, namespaceName: string, queueName: string, authorizationRuleName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AccessKeys>): void;


    /**
     * Regenerates the primary or secondary connection strings to the queue.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} queueName The queue name.
     *
     * @param {string} authorizationRuleName The authorization rule name.
     *
     * @param {object} parameters Parameters supplied to regenerate the
     * authorization rule.
     *
     * @param {string} parameters.keyType The access key to regenerate. Possible
     * values include: 'PrimaryKey', 'SecondaryKey'
     *
     * @param {string} [parameters.key] Optional, if the key value provided, is
     * reset for KeyType value or autogenerate Key value set for keyType
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AccessKeys>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    regenerateKeysWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, queueName: string, authorizationRuleName: string, parameters: models.RegenerateAccessKeyParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AccessKeys>>;

    /**
     * Regenerates the primary or secondary connection strings to the queue.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} queueName The queue name.
     *
     * @param {string} authorizationRuleName The authorization rule name.
     *
     * @param {object} parameters Parameters supplied to regenerate the
     * authorization rule.
     *
     * @param {string} parameters.keyType The access key to regenerate. Possible
     * values include: 'PrimaryKey', 'SecondaryKey'
     *
     * @param {string} [parameters.key] Optional, if the key value provided, is
     * reset for KeyType value or autogenerate Key value set for keyType
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AccessKeys} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AccessKeys} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AccessKeys} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    regenerateKeys(resourceGroupName: string, namespaceName: string, queueName: string, authorizationRuleName: string, parameters: models.RegenerateAccessKeyParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AccessKeys>;
    regenerateKeys(resourceGroupName: string, namespaceName: string, queueName: string, authorizationRuleName: string, parameters: models.RegenerateAccessKeyParameters, callback: ServiceCallback<models.AccessKeys>): void;
    regenerateKeys(resourceGroupName: string, namespaceName: string, queueName: string, authorizationRuleName: string, parameters: models.RegenerateAccessKeyParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AccessKeys>): void;


    /**
     * Gets the queues within a namespace.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SBQueueListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByNamespaceNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SBQueueListResult>>;

    /**
     * Gets the queues within a namespace.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SBQueueListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SBQueueListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SBQueueListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByNamespaceNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SBQueueListResult>;
    listByNamespaceNext(nextPageLink: string, callback: ServiceCallback<models.SBQueueListResult>): void;
    listByNamespaceNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SBQueueListResult>): void;


    /**
     * Gets all authorization rules for a queue.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SBAuthorizationRuleListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listAuthorizationRulesNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SBAuthorizationRuleListResult>>;

    /**
     * Gets all authorization rules for a queue.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SBAuthorizationRuleListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SBAuthorizationRuleListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SBAuthorizationRuleListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listAuthorizationRulesNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SBAuthorizationRuleListResult>;
    listAuthorizationRulesNext(nextPageLink: string, callback: ServiceCallback<models.SBAuthorizationRuleListResult>): void;
    listAuthorizationRulesNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SBAuthorizationRuleListResult>): void;
}

/**
 * @class
 * Topics
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceBusManagementClient.
 */
export interface Topics {


    /**
     * Gets all the topics in a namespace.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.skip] Skip is only used if a previous operation
     * returned a partial result. If a previous response contains a nextLink
     * element, the value of the nextLink element will include a skip parameter
     * that specifies a starting point to use for subsequent calls.
     *
     * @param {number} [options.top] May be used to limit the number of results to
     * the most recent N usageDetails.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SBTopicListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByNamespaceWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, options?: { skip? : number, top? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SBTopicListResult>>;

    /**
     * Gets all the topics in a namespace.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.skip] Skip is only used if a previous operation
     * returned a partial result. If a previous response contains a nextLink
     * element, the value of the nextLink element will include a skip parameter
     * that specifies a starting point to use for subsequent calls.
     *
     * @param {number} [options.top] May be used to limit the number of results to
     * the most recent N usageDetails.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SBTopicListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SBTopicListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SBTopicListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByNamespace(resourceGroupName: string, namespaceName: string, options?: { skip? : number, top? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.SBTopicListResult>;
    listByNamespace(resourceGroupName: string, namespaceName: string, callback: ServiceCallback<models.SBTopicListResult>): void;
    listByNamespace(resourceGroupName: string, namespaceName: string, options: { skip? : number, top? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SBTopicListResult>): void;


    /**
     * Creates a topic in the specified namespace.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} topicName The topic name.
     *
     * @param {object} parameters Parameters supplied to create a topic resource.
     *
     * @param {moment.duration} [parameters.defaultMessageTimeToLive] ISO 8601
     * Default message timespan to live value. This is the duration after which the
     * message expires, starting from when the message is sent to Service Bus. This
     * is the default value used when TimeToLive is not set on a message itself.
     *
     * @param {number} [parameters.maxSizeInMegabytes] Maximum size of the topic in
     * megabytes, which is the size of the memory allocated for the topic. Default
     * is 1024.
     *
     * @param {boolean} [parameters.requiresDuplicateDetection] Value indicating if
     * this topic requires duplicate detection.
     *
     * @param {moment.duration} [parameters.duplicateDetectionHistoryTimeWindow]
     * ISO8601 timespan structure that defines the duration of the duplicate
     * detection history. The default value is 10 minutes.
     *
     * @param {boolean} [parameters.enableBatchedOperations] Value that indicates
     * whether server-side batched operations are enabled.
     *
     * @param {string} [parameters.status] Enumerates the possible values for the
     * status of a messaging entity. Possible values include: 'Active', 'Disabled',
     * 'Restoring', 'SendDisabled', 'ReceiveDisabled', 'Creating', 'Deleting',
     * 'Renaming', 'Unknown'
     *
     * @param {boolean} [parameters.supportOrdering] Value that indicates whether
     * the topic supports ordering.
     *
     * @param {moment.duration} [parameters.autoDeleteOnIdle] ISO 8601 timespan
     * idle interval after which the topic is automatically deleted. The minimum
     * duration is 5 minutes.
     *
     * @param {boolean} [parameters.enablePartitioning] Value that indicates
     * whether the topic to be partitioned across multiple message brokers is
     * enabled.
     *
     * @param {boolean} [parameters.enableExpress] Value that indicates whether
     * Express Entities are enabled. An express topic holds a message in memory
     * temporarily before writing it to persistent storage.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SBTopic>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, topicName: string, parameters: models.SBTopic, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SBTopic>>;

    /**
     * Creates a topic in the specified namespace.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} topicName The topic name.
     *
     * @param {object} parameters Parameters supplied to create a topic resource.
     *
     * @param {moment.duration} [parameters.defaultMessageTimeToLive] ISO 8601
     * Default message timespan to live value. This is the duration after which the
     * message expires, starting from when the message is sent to Service Bus. This
     * is the default value used when TimeToLive is not set on a message itself.
     *
     * @param {number} [parameters.maxSizeInMegabytes] Maximum size of the topic in
     * megabytes, which is the size of the memory allocated for the topic. Default
     * is 1024.
     *
     * @param {boolean} [parameters.requiresDuplicateDetection] Value indicating if
     * this topic requires duplicate detection.
     *
     * @param {moment.duration} [parameters.duplicateDetectionHistoryTimeWindow]
     * ISO8601 timespan structure that defines the duration of the duplicate
     * detection history. The default value is 10 minutes.
     *
     * @param {boolean} [parameters.enableBatchedOperations] Value that indicates
     * whether server-side batched operations are enabled.
     *
     * @param {string} [parameters.status] Enumerates the possible values for the
     * status of a messaging entity. Possible values include: 'Active', 'Disabled',
     * 'Restoring', 'SendDisabled', 'ReceiveDisabled', 'Creating', 'Deleting',
     * 'Renaming', 'Unknown'
     *
     * @param {boolean} [parameters.supportOrdering] Value that indicates whether
     * the topic supports ordering.
     *
     * @param {moment.duration} [parameters.autoDeleteOnIdle] ISO 8601 timespan
     * idle interval after which the topic is automatically deleted. The minimum
     * duration is 5 minutes.
     *
     * @param {boolean} [parameters.enablePartitioning] Value that indicates
     * whether the topic to be partitioned across multiple message brokers is
     * enabled.
     *
     * @param {boolean} [parameters.enableExpress] Value that indicates whether
     * Express Entities are enabled. An express topic holds a message in memory
     * temporarily before writing it to persistent storage.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SBTopic} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SBTopic} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SBTopic} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, namespaceName: string, topicName: string, parameters: models.SBTopic, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SBTopic>;
    createOrUpdate(resourceGroupName: string, namespaceName: string, topicName: string, parameters: models.SBTopic, callback: ServiceCallback<models.SBTopic>): void;
    createOrUpdate(resourceGroupName: string, namespaceName: string, topicName: string, parameters: models.SBTopic, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SBTopic>): void;


    /**
     * Deletes a topic from the specified namespace and resource group.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} topicName The topic name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, topicName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a topic from the specified namespace and resource group.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} topicName The topic name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, namespaceName: string, topicName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, namespaceName: string, topicName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, namespaceName: string, topicName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Returns a description for the specified topic.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} topicName The topic name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SBTopic>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, topicName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SBTopic>>;

    /**
     * Returns a description for the specified topic.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} topicName The topic name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SBTopic} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SBTopic} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SBTopic} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, namespaceName: string, topicName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SBTopic>;
    get(resourceGroupName: string, namespaceName: string, topicName: string, callback: ServiceCallback<models.SBTopic>): void;
    get(resourceGroupName: string, namespaceName: string, topicName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SBTopic>): void;


    /**
     * Gets authorization rules for a topic.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} topicName The topic name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SBAuthorizationRuleListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listAuthorizationRulesWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, topicName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SBAuthorizationRuleListResult>>;

    /**
     * Gets authorization rules for a topic.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} topicName The topic name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SBAuthorizationRuleListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SBAuthorizationRuleListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SBAuthorizationRuleListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listAuthorizationRules(resourceGroupName: string, namespaceName: string, topicName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SBAuthorizationRuleListResult>;
    listAuthorizationRules(resourceGroupName: string, namespaceName: string, topicName: string, callback: ServiceCallback<models.SBAuthorizationRuleListResult>): void;
    listAuthorizationRules(resourceGroupName: string, namespaceName: string, topicName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SBAuthorizationRuleListResult>): void;


    /**
     * Creates an authorization rule for the specified topic.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} topicName The topic name.
     *
     * @param {string} authorizationRuleName The authorization rule name.
     *
     * @param {object} parameters The shared access authorization rule.
     *
     * @param {array} parameters.rights The rights associated with the rule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SBAuthorizationRule>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateAuthorizationRuleWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, topicName: string, authorizationRuleName: string, parameters: models.SBAuthorizationRule, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SBAuthorizationRule>>;

    /**
     * Creates an authorization rule for the specified topic.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} topicName The topic name.
     *
     * @param {string} authorizationRuleName The authorization rule name.
     *
     * @param {object} parameters The shared access authorization rule.
     *
     * @param {array} parameters.rights The rights associated with the rule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SBAuthorizationRule} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SBAuthorizationRule} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SBAuthorizationRule} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdateAuthorizationRule(resourceGroupName: string, namespaceName: string, topicName: string, authorizationRuleName: string, parameters: models.SBAuthorizationRule, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SBAuthorizationRule>;
    createOrUpdateAuthorizationRule(resourceGroupName: string, namespaceName: string, topicName: string, authorizationRuleName: string, parameters: models.SBAuthorizationRule, callback: ServiceCallback<models.SBAuthorizationRule>): void;
    createOrUpdateAuthorizationRule(resourceGroupName: string, namespaceName: string, topicName: string, authorizationRuleName: string, parameters: models.SBAuthorizationRule, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SBAuthorizationRule>): void;


    /**
     * Returns the specified authorization rule.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} topicName The topic name.
     *
     * @param {string} authorizationRuleName The authorization rule name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SBAuthorizationRule>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getAuthorizationRuleWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, topicName: string, authorizationRuleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SBAuthorizationRule>>;

    /**
     * Returns the specified authorization rule.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} topicName The topic name.
     *
     * @param {string} authorizationRuleName The authorization rule name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SBAuthorizationRule} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SBAuthorizationRule} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SBAuthorizationRule} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getAuthorizationRule(resourceGroupName: string, namespaceName: string, topicName: string, authorizationRuleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SBAuthorizationRule>;
    getAuthorizationRule(resourceGroupName: string, namespaceName: string, topicName: string, authorizationRuleName: string, callback: ServiceCallback<models.SBAuthorizationRule>): void;
    getAuthorizationRule(resourceGroupName: string, namespaceName: string, topicName: string, authorizationRuleName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SBAuthorizationRule>): void;


    /**
     * Deletes a topic authorization rule.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} topicName The topic name.
     *
     * @param {string} authorizationRuleName The authorization rule name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteAuthorizationRuleWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, topicName: string, authorizationRuleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a topic authorization rule.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} topicName The topic name.
     *
     * @param {string} authorizationRuleName The authorization rule name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteAuthorizationRule(resourceGroupName: string, namespaceName: string, topicName: string, authorizationRuleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteAuthorizationRule(resourceGroupName: string, namespaceName: string, topicName: string, authorizationRuleName: string, callback: ServiceCallback<void>): void;
    deleteAuthorizationRule(resourceGroupName: string, namespaceName: string, topicName: string, authorizationRuleName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets the primary and secondary connection strings for the topic.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} topicName The topic name.
     *
     * @param {string} authorizationRuleName The authorization rule name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AccessKeys>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listKeysWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, topicName: string, authorizationRuleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AccessKeys>>;

    /**
     * Gets the primary and secondary connection strings for the topic.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} topicName The topic name.
     *
     * @param {string} authorizationRuleName The authorization rule name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AccessKeys} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AccessKeys} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AccessKeys} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listKeys(resourceGroupName: string, namespaceName: string, topicName: string, authorizationRuleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AccessKeys>;
    listKeys(resourceGroupName: string, namespaceName: string, topicName: string, authorizationRuleName: string, callback: ServiceCallback<models.AccessKeys>): void;
    listKeys(resourceGroupName: string, namespaceName: string, topicName: string, authorizationRuleName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AccessKeys>): void;


    /**
     * Regenerates primary or secondary connection strings for the topic.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} topicName The topic name.
     *
     * @param {string} authorizationRuleName The authorization rule name.
     *
     * @param {object} parameters Parameters supplied to regenerate the
     * authorization rule.
     *
     * @param {string} parameters.keyType The access key to regenerate. Possible
     * values include: 'PrimaryKey', 'SecondaryKey'
     *
     * @param {string} [parameters.key] Optional, if the key value provided, is
     * reset for KeyType value or autogenerate Key value set for keyType
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AccessKeys>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    regenerateKeysWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, topicName: string, authorizationRuleName: string, parameters: models.RegenerateAccessKeyParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AccessKeys>>;

    /**
     * Regenerates primary or secondary connection strings for the topic.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} topicName The topic name.
     *
     * @param {string} authorizationRuleName The authorization rule name.
     *
     * @param {object} parameters Parameters supplied to regenerate the
     * authorization rule.
     *
     * @param {string} parameters.keyType The access key to regenerate. Possible
     * values include: 'PrimaryKey', 'SecondaryKey'
     *
     * @param {string} [parameters.key] Optional, if the key value provided, is
     * reset for KeyType value or autogenerate Key value set for keyType
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AccessKeys} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AccessKeys} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AccessKeys} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    regenerateKeys(resourceGroupName: string, namespaceName: string, topicName: string, authorizationRuleName: string, parameters: models.RegenerateAccessKeyParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AccessKeys>;
    regenerateKeys(resourceGroupName: string, namespaceName: string, topicName: string, authorizationRuleName: string, parameters: models.RegenerateAccessKeyParameters, callback: ServiceCallback<models.AccessKeys>): void;
    regenerateKeys(resourceGroupName: string, namespaceName: string, topicName: string, authorizationRuleName: string, parameters: models.RegenerateAccessKeyParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AccessKeys>): void;


    /**
     * Gets all the topics in a namespace.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SBTopicListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByNamespaceNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SBTopicListResult>>;

    /**
     * Gets all the topics in a namespace.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SBTopicListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SBTopicListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SBTopicListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByNamespaceNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SBTopicListResult>;
    listByNamespaceNext(nextPageLink: string, callback: ServiceCallback<models.SBTopicListResult>): void;
    listByNamespaceNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SBTopicListResult>): void;


    /**
     * Gets authorization rules for a topic.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SBAuthorizationRuleListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listAuthorizationRulesNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SBAuthorizationRuleListResult>>;

    /**
     * Gets authorization rules for a topic.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SBAuthorizationRuleListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SBAuthorizationRuleListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SBAuthorizationRuleListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listAuthorizationRulesNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SBAuthorizationRuleListResult>;
    listAuthorizationRulesNext(nextPageLink: string, callback: ServiceCallback<models.SBAuthorizationRuleListResult>): void;
    listAuthorizationRulesNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SBAuthorizationRuleListResult>): void;
}

/**
 * @class
 * Subscriptions
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceBusManagementClient.
 */
export interface Subscriptions {


    /**
     * List all the subscriptions under a specified topic.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} topicName The topic name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.skip] Skip is only used if a previous operation
     * returned a partial result. If a previous response contains a nextLink
     * element, the value of the nextLink element will include a skip parameter
     * that specifies a starting point to use for subsequent calls.
     *
     * @param {number} [options.top] May be used to limit the number of results to
     * the most recent N usageDetails.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SBSubscriptionListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByTopicWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, topicName: string, options?: { skip? : number, top? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SBSubscriptionListResult>>;

    /**
     * List all the subscriptions under a specified topic.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} topicName The topic name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.skip] Skip is only used if a previous operation
     * returned a partial result. If a previous response contains a nextLink
     * element, the value of the nextLink element will include a skip parameter
     * that specifies a starting point to use for subsequent calls.
     *
     * @param {number} [options.top] May be used to limit the number of results to
     * the most recent N usageDetails.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SBSubscriptionListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SBSubscriptionListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SBSubscriptionListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByTopic(resourceGroupName: string, namespaceName: string, topicName: string, options?: { skip? : number, top? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.SBSubscriptionListResult>;
    listByTopic(resourceGroupName: string, namespaceName: string, topicName: string, callback: ServiceCallback<models.SBSubscriptionListResult>): void;
    listByTopic(resourceGroupName: string, namespaceName: string, topicName: string, options: { skip? : number, top? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SBSubscriptionListResult>): void;


    /**
     * Creates a topic subscription.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} topicName The topic name.
     *
     * @param {string} subscriptionName The subscription name.
     *
     * @param {object} parameters Parameters supplied to create a subscription
     * resource.
     *
     * @param {moment.duration} [parameters.lockDuration] ISO 8061 lock duration
     * timespan for the subscription. The default value is 1 minute.
     *
     * @param {boolean} [parameters.requiresSession] Value indicating if a
     * subscription supports the concept of sessions.
     *
     * @param {moment.duration} [parameters.defaultMessageTimeToLive] ISO 8061
     * Default message timespan to live value. This is the duration after which the
     * message expires, starting from when the message is sent to Service Bus. This
     * is the default value used when TimeToLive is not set on a message itself.
     *
     * @param {boolean} [parameters.deadLetteringOnFilterEvaluationExceptions]
     * Value that indicates whether a subscription has dead letter support on
     * filter evaluation exceptions.
     *
     * @param {boolean} [parameters.deadLetteringOnMessageExpiration] Value that
     * indicates whether a subscription has dead letter support when a message
     * expires.
     *
     * @param {moment.duration} [parameters.duplicateDetectionHistoryTimeWindow]
     * ISO 8601 timeSpan structure that defines the duration of the duplicate
     * detection history. The default value is 10 minutes.
     *
     * @param {number} [parameters.maxDeliveryCount] Number of maximum deliveries.
     *
     * @param {string} [parameters.status] Enumerates the possible values for the
     * status of a messaging entity. Possible values include: 'Active', 'Disabled',
     * 'Restoring', 'SendDisabled', 'ReceiveDisabled', 'Creating', 'Deleting',
     * 'Renaming', 'Unknown'
     *
     * @param {boolean} [parameters.enableBatchedOperations] Value that indicates
     * whether server-side batched operations are enabled.
     *
     * @param {moment.duration} [parameters.autoDeleteOnIdle] ISO 8061 timeSpan
     * idle interval after which the topic is automatically deleted. The minimum
     * duration is 5 minutes.
     *
     * @param {string} [parameters.forwardTo] Queue/Topic name to forward the
     * messages
     *
     * @param {string} [parameters.forwardDeadLetteredMessagesTo] Queue/Topic name
     * to forward the Dead Letter message
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SBSubscription>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, topicName: string, subscriptionName: string, parameters: models.SBSubscription, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SBSubscription>>;

    /**
     * Creates a topic subscription.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} topicName The topic name.
     *
     * @param {string} subscriptionName The subscription name.
     *
     * @param {object} parameters Parameters supplied to create a subscription
     * resource.
     *
     * @param {moment.duration} [parameters.lockDuration] ISO 8061 lock duration
     * timespan for the subscription. The default value is 1 minute.
     *
     * @param {boolean} [parameters.requiresSession] Value indicating if a
     * subscription supports the concept of sessions.
     *
     * @param {moment.duration} [parameters.defaultMessageTimeToLive] ISO 8061
     * Default message timespan to live value. This is the duration after which the
     * message expires, starting from when the message is sent to Service Bus. This
     * is the default value used when TimeToLive is not set on a message itself.
     *
     * @param {boolean} [parameters.deadLetteringOnFilterEvaluationExceptions]
     * Value that indicates whether a subscription has dead letter support on
     * filter evaluation exceptions.
     *
     * @param {boolean} [parameters.deadLetteringOnMessageExpiration] Value that
     * indicates whether a subscription has dead letter support when a message
     * expires.
     *
     * @param {moment.duration} [parameters.duplicateDetectionHistoryTimeWindow]
     * ISO 8601 timeSpan structure that defines the duration of the duplicate
     * detection history. The default value is 10 minutes.
     *
     * @param {number} [parameters.maxDeliveryCount] Number of maximum deliveries.
     *
     * @param {string} [parameters.status] Enumerates the possible values for the
     * status of a messaging entity. Possible values include: 'Active', 'Disabled',
     * 'Restoring', 'SendDisabled', 'ReceiveDisabled', 'Creating', 'Deleting',
     * 'Renaming', 'Unknown'
     *
     * @param {boolean} [parameters.enableBatchedOperations] Value that indicates
     * whether server-side batched operations are enabled.
     *
     * @param {moment.duration} [parameters.autoDeleteOnIdle] ISO 8061 timeSpan
     * idle interval after which the topic is automatically deleted. The minimum
     * duration is 5 minutes.
     *
     * @param {string} [parameters.forwardTo] Queue/Topic name to forward the
     * messages
     *
     * @param {string} [parameters.forwardDeadLetteredMessagesTo] Queue/Topic name
     * to forward the Dead Letter message
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SBSubscription} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SBSubscription} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SBSubscription} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, namespaceName: string, topicName: string, subscriptionName: string, parameters: models.SBSubscription, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SBSubscription>;
    createOrUpdate(resourceGroupName: string, namespaceName: string, topicName: string, subscriptionName: string, parameters: models.SBSubscription, callback: ServiceCallback<models.SBSubscription>): void;
    createOrUpdate(resourceGroupName: string, namespaceName: string, topicName: string, subscriptionName: string, parameters: models.SBSubscription, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SBSubscription>): void;


    /**
     * Deletes a subscription from the specified topic.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} topicName The topic name.
     *
     * @param {string} subscriptionName The subscription name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, topicName: string, subscriptionName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a subscription from the specified topic.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} topicName The topic name.
     *
     * @param {string} subscriptionName The subscription name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, namespaceName: string, topicName: string, subscriptionName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, namespaceName: string, topicName: string, subscriptionName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, namespaceName: string, topicName: string, subscriptionName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Returns a subscription description for the specified topic.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} topicName The topic name.
     *
     * @param {string} subscriptionName The subscription name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SBSubscription>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, topicName: string, subscriptionName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SBSubscription>>;

    /**
     * Returns a subscription description for the specified topic.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} topicName The topic name.
     *
     * @param {string} subscriptionName The subscription name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SBSubscription} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SBSubscription} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SBSubscription} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, namespaceName: string, topicName: string, subscriptionName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SBSubscription>;
    get(resourceGroupName: string, namespaceName: string, topicName: string, subscriptionName: string, callback: ServiceCallback<models.SBSubscription>): void;
    get(resourceGroupName: string, namespaceName: string, topicName: string, subscriptionName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SBSubscription>): void;


    /**
     * List all the subscriptions under a specified topic.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SBSubscriptionListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByTopicNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SBSubscriptionListResult>>;

    /**
     * List all the subscriptions under a specified topic.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SBSubscriptionListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SBSubscriptionListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SBSubscriptionListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByTopicNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SBSubscriptionListResult>;
    listByTopicNext(nextPageLink: string, callback: ServiceCallback<models.SBSubscriptionListResult>): void;
    listByTopicNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SBSubscriptionListResult>): void;
}

/**
 * @class
 * Rules
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceBusManagementClient.
 */
export interface Rules {


    /**
     * List all the rules within given topic-subscription
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} topicName The topic name.
     *
     * @param {string} subscriptionName The subscription name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.skip] Skip is only used if a previous operation
     * returned a partial result. If a previous response contains a nextLink
     * element, the value of the nextLink element will include a skip parameter
     * that specifies a starting point to use for subsequent calls.
     *
     * @param {number} [options.top] May be used to limit the number of results to
     * the most recent N usageDetails.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RuleListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listBySubscriptionsWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, topicName: string, subscriptionName: string, options?: { skip? : number, top? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RuleListResult>>;

    /**
     * List all the rules within given topic-subscription
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} topicName The topic name.
     *
     * @param {string} subscriptionName The subscription name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.skip] Skip is only used if a previous operation
     * returned a partial result. If a previous response contains a nextLink
     * element, the value of the nextLink element will include a skip parameter
     * that specifies a starting point to use for subsequent calls.
     *
     * @param {number} [options.top] May be used to limit the number of results to
     * the most recent N usageDetails.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RuleListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RuleListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RuleListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listBySubscriptions(resourceGroupName: string, namespaceName: string, topicName: string, subscriptionName: string, options?: { skip? : number, top? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.RuleListResult>;
    listBySubscriptions(resourceGroupName: string, namespaceName: string, topicName: string, subscriptionName: string, callback: ServiceCallback<models.RuleListResult>): void;
    listBySubscriptions(resourceGroupName: string, namespaceName: string, topicName: string, subscriptionName: string, options: { skip? : number, top? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RuleListResult>): void;


    /**
     * Creates a new rule and updates an existing rule
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} topicName The topic name.
     *
     * @param {string} subscriptionName The subscription name.
     *
     * @param {string} ruleName The rule name.
     *
     * @param {object} parameters Parameters supplied to create a rule.
     *
     * @param {object} [parameters.action] Represents the filter actions which are
     * allowed for the transformation of a message that have been matched by a
     * filter expression.
     *
     * @param {string} [parameters.action.sqlExpression] SQL expression. e.g.
     * MyProperty='ABC'
     *
     * @param {number} [parameters.action.compatibilityLevel] This property is
     * reserved for future use. An integer value showing the compatibility level,
     * currently hard-coded to 20.
     *
     * @param {boolean} [parameters.action.requiresPreprocessing] Value that
     * indicates whether the rule action requires preprocessing.
     *
     * @param {string} [parameters.filterType] Filter type that is evaluated
     * against a BrokeredMessage. Possible values include: 'SqlFilter',
     * 'CorrelationFilter'
     *
     * @param {object} [parameters.sqlFilter] Properties of sqlFilter
     *
     * @param {string} [parameters.sqlFilter.sqlExpression] The SQL expression.
     * e.g. MyProperty='ABC'
     *
     * @param {boolean} [parameters.sqlFilter.requiresPreprocessing] Value that
     * indicates whether the rule action requires preprocessing.
     *
     * @param {object} [parameters.correlationFilter] Properties of
     * correlationFilter
     *
     * @param {object} [parameters.correlationFilter.properties] dictionary object
     * for custom filters
     *
     * @param {string} [parameters.correlationFilter.correlationId] Identifier of
     * the correlation.
     *
     * @param {string} [parameters.correlationFilter.messageId] Identifier of the
     * message.
     *
     * @param {string} [parameters.correlationFilter.to] Address to send to.
     *
     * @param {string} [parameters.correlationFilter.replyTo] Address of the queue
     * to reply to.
     *
     * @param {string} [parameters.correlationFilter.label] Application specific
     * label.
     *
     * @param {string} [parameters.correlationFilter.sessionId] Session identifier.
     *
     * @param {string} [parameters.correlationFilter.replyToSessionId] Session
     * identifier to reply to.
     *
     * @param {string} [parameters.correlationFilter.contentType] Content type of
     * the message.
     *
     * @param {boolean} [parameters.correlationFilter.requiresPreprocessing] Value
     * that indicates whether the rule action requires preprocessing.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Rule>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, topicName: string, subscriptionName: string, ruleName: string, parameters: models.Rule, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Rule>>;

    /**
     * Creates a new rule and updates an existing rule
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} topicName The topic name.
     *
     * @param {string} subscriptionName The subscription name.
     *
     * @param {string} ruleName The rule name.
     *
     * @param {object} parameters Parameters supplied to create a rule.
     *
     * @param {object} [parameters.action] Represents the filter actions which are
     * allowed for the transformation of a message that have been matched by a
     * filter expression.
     *
     * @param {string} [parameters.action.sqlExpression] SQL expression. e.g.
     * MyProperty='ABC'
     *
     * @param {number} [parameters.action.compatibilityLevel] This property is
     * reserved for future use. An integer value showing the compatibility level,
     * currently hard-coded to 20.
     *
     * @param {boolean} [parameters.action.requiresPreprocessing] Value that
     * indicates whether the rule action requires preprocessing.
     *
     * @param {string} [parameters.filterType] Filter type that is evaluated
     * against a BrokeredMessage. Possible values include: 'SqlFilter',
     * 'CorrelationFilter'
     *
     * @param {object} [parameters.sqlFilter] Properties of sqlFilter
     *
     * @param {string} [parameters.sqlFilter.sqlExpression] The SQL expression.
     * e.g. MyProperty='ABC'
     *
     * @param {boolean} [parameters.sqlFilter.requiresPreprocessing] Value that
     * indicates whether the rule action requires preprocessing.
     *
     * @param {object} [parameters.correlationFilter] Properties of
     * correlationFilter
     *
     * @param {object} [parameters.correlationFilter.properties] dictionary object
     * for custom filters
     *
     * @param {string} [parameters.correlationFilter.correlationId] Identifier of
     * the correlation.
     *
     * @param {string} [parameters.correlationFilter.messageId] Identifier of the
     * message.
     *
     * @param {string} [parameters.correlationFilter.to] Address to send to.
     *
     * @param {string} [parameters.correlationFilter.replyTo] Address of the queue
     * to reply to.
     *
     * @param {string} [parameters.correlationFilter.label] Application specific
     * label.
     *
     * @param {string} [parameters.correlationFilter.sessionId] Session identifier.
     *
     * @param {string} [parameters.correlationFilter.replyToSessionId] Session
     * identifier to reply to.
     *
     * @param {string} [parameters.correlationFilter.contentType] Content type of
     * the message.
     *
     * @param {boolean} [parameters.correlationFilter.requiresPreprocessing] Value
     * that indicates whether the rule action requires preprocessing.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Rule} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Rule} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Rule} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, namespaceName: string, topicName: string, subscriptionName: string, ruleName: string, parameters: models.Rule, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Rule>;
    createOrUpdate(resourceGroupName: string, namespaceName: string, topicName: string, subscriptionName: string, ruleName: string, parameters: models.Rule, callback: ServiceCallback<models.Rule>): void;
    createOrUpdate(resourceGroupName: string, namespaceName: string, topicName: string, subscriptionName: string, ruleName: string, parameters: models.Rule, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Rule>): void;


    /**
     * Deletes an existing rule.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} topicName The topic name.
     *
     * @param {string} subscriptionName The subscription name.
     *
     * @param {string} ruleName The rule name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, topicName: string, subscriptionName: string, ruleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes an existing rule.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} topicName The topic name.
     *
     * @param {string} subscriptionName The subscription name.
     *
     * @param {string} ruleName The rule name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, namespaceName: string, topicName: string, subscriptionName: string, ruleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, namespaceName: string, topicName: string, subscriptionName: string, ruleName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, namespaceName: string, topicName: string, subscriptionName: string, ruleName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Retrieves the description for the specified rule.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} topicName The topic name.
     *
     * @param {string} subscriptionName The subscription name.
     *
     * @param {string} ruleName The rule name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Rule>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, topicName: string, subscriptionName: string, ruleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Rule>>;

    /**
     * Retrieves the description for the specified rule.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} topicName The topic name.
     *
     * @param {string} subscriptionName The subscription name.
     *
     * @param {string} ruleName The rule name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Rule} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Rule} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Rule} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, namespaceName: string, topicName: string, subscriptionName: string, ruleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Rule>;
    get(resourceGroupName: string, namespaceName: string, topicName: string, subscriptionName: string, ruleName: string, callback: ServiceCallback<models.Rule>): void;
    get(resourceGroupName: string, namespaceName: string, topicName: string, subscriptionName: string, ruleName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Rule>): void;


    /**
     * List all the rules within given topic-subscription
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RuleListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listBySubscriptionsNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RuleListResult>>;

    /**
     * List all the rules within given topic-subscription
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RuleListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RuleListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RuleListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listBySubscriptionsNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RuleListResult>;
    listBySubscriptionsNext(nextPageLink: string, callback: ServiceCallback<models.RuleListResult>): void;
    listBySubscriptionsNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RuleListResult>): void;
}

/**
 * @class
 * Regions
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceBusManagementClient.
 */
export interface Regions {


    /**
     * Gets the available Regions for a given sku
     *
     * @param {string} sku The sku type.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PremiumMessagingRegionsListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listBySkuWithHttpOperationResponse(sku: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PremiumMessagingRegionsListResult>>;

    /**
     * Gets the available Regions for a given sku
     *
     * @param {string} sku The sku type.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PremiumMessagingRegionsListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PremiumMessagingRegionsListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PremiumMessagingRegionsListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listBySku(sku: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PremiumMessagingRegionsListResult>;
    listBySku(sku: string, callback: ServiceCallback<models.PremiumMessagingRegionsListResult>): void;
    listBySku(sku: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PremiumMessagingRegionsListResult>): void;


    /**
     * Gets the available Regions for a given sku
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PremiumMessagingRegionsListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listBySkuNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PremiumMessagingRegionsListResult>>;

    /**
     * Gets the available Regions for a given sku
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PremiumMessagingRegionsListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PremiumMessagingRegionsListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PremiumMessagingRegionsListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listBySkuNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PremiumMessagingRegionsListResult>;
    listBySkuNext(nextPageLink: string, callback: ServiceCallback<models.PremiumMessagingRegionsListResult>): void;
    listBySkuNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PremiumMessagingRegionsListResult>): void;
}

/**
 * @class
 * PremiumMessagingRegionsOperations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceBusManagementClient.
 */
export interface PremiumMessagingRegionsOperations {


    /**
     * Gets the available premium messaging regions for servicebus
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PremiumMessagingRegionsListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PremiumMessagingRegionsListResult>>;

    /**
     * Gets the available premium messaging regions for servicebus
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PremiumMessagingRegionsListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PremiumMessagingRegionsListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PremiumMessagingRegionsListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PremiumMessagingRegionsListResult>;
    list(callback: ServiceCallback<models.PremiumMessagingRegionsListResult>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PremiumMessagingRegionsListResult>): void;


    /**
     * Gets the available premium messaging regions for servicebus
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PremiumMessagingRegionsListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PremiumMessagingRegionsListResult>>;

    /**
     * Gets the available premium messaging regions for servicebus
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PremiumMessagingRegionsListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PremiumMessagingRegionsListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PremiumMessagingRegionsListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PremiumMessagingRegionsListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.PremiumMessagingRegionsListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PremiumMessagingRegionsListResult>): void;
}

/**
 * @class
 * EventHubs
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceBusManagementClient.
 */
export interface EventHubs {


    /**
     * Gets all the Event Hubs in a service bus Namespace.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<EventHubListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByNamespaceWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.EventHubListResult>>;

    /**
     * Gets all the Event Hubs in a service bus Namespace.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {EventHubListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {EventHubListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link EventHubListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByNamespace(resourceGroupName: string, namespaceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.EventHubListResult>;
    listByNamespace(resourceGroupName: string, namespaceName: string, callback: ServiceCallback<models.EventHubListResult>): void;
    listByNamespace(resourceGroupName: string, namespaceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EventHubListResult>): void;


    /**
     * Gets all the Event Hubs in a service bus Namespace.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<EventHubListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByNamespaceNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.EventHubListResult>>;

    /**
     * Gets all the Event Hubs in a service bus Namespace.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {EventHubListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {EventHubListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link EventHubListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByNamespaceNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.EventHubListResult>;
    listByNamespaceNext(nextPageLink: string, callback: ServiceCallback<models.EventHubListResult>): void;
    listByNamespaceNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EventHubListResult>): void;
}
