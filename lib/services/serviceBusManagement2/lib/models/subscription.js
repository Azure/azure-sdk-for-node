/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the Subscription class.
 * @constructor
 * Description of subscription resource.
 *
 * @member {date} [accessedAt] Last time there was a receive request to this
 * subscription.
 *
 * @member {string} [autoDeleteOnIdle] TimeSpan idle interval after which the
 * topic is automatically deleted. The minimum duration is 5 minutes. The
 * service accepts a C# Standard TimeSpan Format for loc duration
 * https://msdn.microsoft.com/en-us/library/ee372286(v=vs.110).aspx. Format is
 * 'DD.HH:MM:SS' and default value of this property is 10675199 days
 *
 * @member {object} [countDetails]
 *
 * @member {number} [countDetails.activeMessageCount] Number of active messages
 * in the queue, topic, or subscription.
 *
 * @member {number} [countDetails.deadLetterMessageCount] Number of messages
 * that are dead lettered.
 *
 * @member {number} [countDetails.scheduledMessageCount] Number of scheduled
 * messages.
 *
 * @member {number} [countDetails.transferDeadLetterMessageCount] Number of
 * messages transferred into dead letters.
 *
 * @member {number} [countDetails.transferMessageCount] Number of messages
 * transferred to another queue, topic, or subscription.
 *
 * @member {date} [createdAt] Exact time the Subscription was created.
 *
 * @member {string} [defaultMessageTimeToLive] Default message time to live
 * value. This is the duration after which the message expires, starting from
 * when the message is sent to Service Bus. This is the default value used when
 * TimeToLive is not set on a message itself. The service accepts a C# Standard
 * TimeSpan Format for loc duration
 * https://msdn.microsoft.com/en-us/library/ee372286(v=vs.110).aspx . Format is
 * 'DD.HH:MM:SS' and default value of this property is 10675199 days
 *
 * @member {boolean} [deadLetteringOnFilterEvaluationExceptions] Value that
 * indicates whether a subscription has dead letter support on filter
 * evaluation exceptions.
 *
 * @member {boolean} [deadLetteringOnMessageExpiration] Value that indicates
 * whether a subscription has dead letter support when a message expires.
 *
 * @member {boolean} [enableBatchedOperations] Value that indicates whether
 * server-side batched operations are enabled.
 *
 * @member {string} [lockDuration] The lock duration time span for the
 * subscription. The service accepts a C# Standard TimeSpan Format for loc
 * duration https://msdn.microsoft.com/en-us/library/ee372286(v=vs.110).aspx
 *
 * @member {number} [maxDeliveryCount] Number of maximum deliveries.
 *
 * @member {number} [messageCount] Number of messages.
 *
 * @member {boolean} [requiresSession] Value indicating if a subscription
 * supports the concept of sessions.
 *
 * @member {string} [status] Enumerates the possible values for the status of a
 * messaging entity. Possible values include: 'Active', 'Creating', 'Deleting',
 * 'Disabled', 'ReceiveDisabled', 'Renaming', 'Restoring', 'SendDisabled',
 * 'Unknown'
 *
 * @member {date} [updatedAt] The exact time the subscription was updated.
 *
 */
function Subscription() {
  Subscription['super_'].call(this);
}

util.inherits(Subscription, models['Resource']);

/**
 * Defines the metadata of Subscription
 *
 * @returns {object} metadata of Subscription
 *
 */
Subscription.prototype.mapper = function () {
  return {
    required: false,
    serializedName: 'Subscription',
    type: {
      name: 'Composite',
      className: 'Subscription',
      modelProperties: {
        id: {
          required: false,
          readOnly: true,
          serializedName: 'id',
          type: {
            name: 'String'
          }
        },
        name: {
          required: false,
          readOnly: true,
          serializedName: 'name',
          type: {
            name: 'String'
          }
        },
        type: {
          required: false,
          readOnly: true,
          serializedName: 'type',
          type: {
            name: 'String'
          }
        },
        accessedAt: {
          required: false,
          readOnly: true,
          serializedName: 'properties.accessedAt',
          type: {
            name: 'DateTime'
          }
        },
        autoDeleteOnIdle: {
          required: false,
          serializedName: 'properties.autoDeleteOnIdle',
          type: {
            name: 'String'
          }
        },
        countDetails: {
          required: false,
          readOnly: true,
          serializedName: 'properties.countDetails',
          type: {
            name: 'Composite',
            className: 'MessageCountDetails'
          }
        },
        createdAt: {
          required: false,
          readOnly: true,
          serializedName: 'properties.createdAt',
          type: {
            name: 'DateTime'
          }
        },
        defaultMessageTimeToLive: {
          required: false,
          serializedName: 'properties.defaultMessageTimeToLive',
          type: {
            name: 'String'
          }
        },
        deadLetteringOnFilterEvaluationExceptions: {
          required: false,
          serializedName: 'properties.deadLetteringOnFilterEvaluationExceptions',
          type: {
            name: 'Boolean'
          }
        },
        deadLetteringOnMessageExpiration: {
          required: false,
          serializedName: 'properties.deadLetteringOnMessageExpiration',
          type: {
            name: 'Boolean'
          }
        },
        enableBatchedOperations: {
          required: false,
          serializedName: 'properties.enableBatchedOperations',
          type: {
            name: 'Boolean'
          }
        },
        lockDuration: {
          required: false,
          serializedName: 'properties.lockDuration',
          type: {
            name: 'String'
          }
        },
        maxDeliveryCount: {
          required: false,
          serializedName: 'properties.maxDeliveryCount',
          type: {
            name: 'Number'
          }
        },
        messageCount: {
          required: false,
          readOnly: true,
          serializedName: 'properties.messageCount',
          type: {
            name: 'Number'
          }
        },
        requiresSession: {
          required: false,
          serializedName: 'properties.requiresSession',
          type: {
            name: 'Boolean'
          }
        },
        status: {
          required: false,
          serializedName: 'properties.status',
          type: {
            name: 'Enum',
            allowedValues: [ 'Active', 'Creating', 'Deleting', 'Disabled', 'ReceiveDisabled', 'Renaming', 'Restoring', 'SendDisabled', 'Unknown' ]
          }
        },
        updatedAt: {
          required: false,
          readOnly: true,
          serializedName: 'properties.updatedAt',
          type: {
            name: 'DateTime'
          }
        }
      }
    }
  };
};

module.exports = Subscription;
