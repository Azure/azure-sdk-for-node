/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Properties to configure capture description for eventhub
 *
 */
class CaptureDescription {
  /**
   * Create a CaptureDescription.
   * @member {boolean} [enabled] A value that indicates whether capture
   * description is enabled.
   * @member {string} [encoding] Enumerates the possible values for the
   * encoding format of capture description. Possible values include: 'Avro',
   * 'AvroDeflate'
   * @member {number} [intervalInSeconds] The time window allows you to set the
   * frequency with which the capture to Azure Blobs will happen, value should
   * between 60 to 900 seconds
   * @member {number} [sizeLimitInBytes] The size window defines the amount of
   * data built up in your Event Hub before an capture operation, value should
   * be between 10485760 and 524288000 bytes
   * @member {object} [destination] Properties of Destination where capture
   * will be stored. (Storage Account, Blob Names)
   * @member {string} [destination.name] Name for capture destination
   * @member {string} [destination.storageAccountResourceId] Resource id of the
   * storage account to be used to create the blobs
   * @member {string} [destination.blobContainer] Blob container Name
   * @member {string} [destination.archiveNameFormat] Blob naming convention
   * for archive, e.g.
   * {Namespace}/{EventHub}/{PartitionId}/{Year}/{Month}/{Day}/{Hour}/{Minute}/{Second}.
   * Here all the parameters (Namespace,EventHub .. etc) are mandatory
   * irrespective of order
   */
  constructor() {
  }

  /**
   * Defines the metadata of CaptureDescription
   *
   * @returns {object} metadata of CaptureDescription
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'CaptureDescription',
      type: {
        name: 'Composite',
        className: 'CaptureDescription',
        modelProperties: {
          enabled: {
            required: false,
            serializedName: 'enabled',
            type: {
              name: 'Boolean'
            }
          },
          encoding: {
            required: false,
            serializedName: 'encoding',
            type: {
              name: 'Enum',
              allowedValues: [ 'Avro', 'AvroDeflate' ]
            }
          },
          intervalInSeconds: {
            required: false,
            serializedName: 'intervalInSeconds',
            constraints: {
              InclusiveMaximum: 900,
              InclusiveMinimum: 60
            },
            type: {
              name: 'Number'
            }
          },
          sizeLimitInBytes: {
            required: false,
            serializedName: 'sizeLimitInBytes',
            constraints: {
              InclusiveMaximum: 524288000,
              InclusiveMinimum: 10485760
            },
            type: {
              name: 'Number'
            }
          },
          destination: {
            required: false,
            serializedName: 'destination',
            type: {
              name: 'Composite',
              className: 'Destination'
            }
          }
        }
      }
    };
  }
}

module.exports = CaptureDescription;
