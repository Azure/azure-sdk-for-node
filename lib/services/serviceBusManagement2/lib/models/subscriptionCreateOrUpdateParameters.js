/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * @class
 * Initializes a new instance of the SubscriptionCreateOrUpdateParameters class.
 * @constructor
 * Parameters supplied to the Create Or Update Subscription operation.
 *
 * @member {string} location Subscription data center location.
 *
 * @member {string} [type] Resource manager type of the resource.
 *
 * @member {date} [accessedAt] Last time there was a receive request to this
 * subscription.
 *
 * @member {string} [autoDeleteOnIdle] TimeSpan idle interval after which the
 * topic is automatically deleted. The minimum duration is 5 minutes.
 *
 * @member {object} [countDetails]
 *
 * @member {number} [countDetails.activeMessageCount] Number of active messages
 * in the queue, topic, or subscription.
 *
 * @member {number} [countDetails.deadLetterMessageCount] Number of messages
 * that are dead lettered.
 *
 * @member {number} [countDetails.scheduledMessageCount] Number of scheduled
 * messages.
 *
 * @member {number} [countDetails.transferDeadLetterMessageCount] Number of
 * messages transferred into dead letters.
 *
 * @member {number} [countDetails.transferMessageCount] Number of messages
 * transferred to another queue, topic, or subscription.
 *
 * @member {date} [createdAt] Exact time the message was created.
 *
 * @member {string} [defaultMessageTimeToLive] Default message time to live
 * value. This is the duration after which the message expires, starting from
 * when the message is sent to Service Bus. This is the default value used when
 * TimeToLive is not set on a message itself.
 *
 * @member {boolean} [deadLetteringOnFilterEvaluationExceptions] Value that
 * indicates whether a subscription has dead letter support on filter
 * evaluation exceptions.
 *
 * @member {boolean} [deadLetteringOnMessageExpiration] Value that indicates
 * whether a subscription has dead letter support when a message expires.
 *
 * @member {boolean} [enableBatchedOperations] Value that indicates whether
 * server-side batched operations are enabled.
 *
 * @member {string} [entityAvailabilityStatus] Entity availability status for
 * the topic. Possible values include: 'Available', 'Limited', 'Renaming',
 * 'Restoring', 'Unknown'
 *
 * @member {boolean} [isReadOnly] Value that indicates whether the entity
 * description is read-only.
 *
 * @member {string} [lockDuration] The lock duration time span for the
 * subscription.
 *
 * @member {number} [maxDeliveryCount] Number of maximum deliveries.
 *
 * @member {number} [messageCount] Number of messages.
 *
 * @member {boolean} [requiresSession] Value indicating if a subscription
 * supports the concept of sessions.
 *
 * @member {string} [status] Enumerates the possible values for the status of a
 * messaging entity. Possible values include: 'Active', 'Creating', 'Deleting',
 * 'Disabled', 'ReceiveDisabled', 'Renaming', 'Restoring', 'SendDisabled',
 * 'Unknown'
 *
 * @member {date} [updatedAt] The exact time the message was updated.
 *
 */
class SubscriptionCreateOrUpdateParameters {
  constructor() {
  }

  /**
   * Defines the metadata of SubscriptionCreateOrUpdateParameters
   *
   * @returns {object} metadata of SubscriptionCreateOrUpdateParameters
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'SubscriptionCreateOrUpdateParameters',
      type: {
        name: 'Composite',
        className: 'SubscriptionCreateOrUpdateParameters',
        modelProperties: {
          location: {
            required: true,
            serializedName: 'location',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          accessedAt: {
            required: false,
            readOnly: true,
            serializedName: 'properties.accessedAt',
            type: {
              name: 'DateTime'
            }
          },
          autoDeleteOnIdle: {
            required: false,
            serializedName: 'properties.autoDeleteOnIdle',
            type: {
              name: 'String'
            }
          },
          countDetails: {
            required: false,
            readOnly: true,
            serializedName: 'properties.countDetails',
            type: {
              name: 'Composite',
              className: 'MessageCountDetails'
            }
          },
          createdAt: {
            required: false,
            readOnly: true,
            serializedName: 'properties.createdAt',
            type: {
              name: 'DateTime'
            }
          },
          defaultMessageTimeToLive: {
            required: false,
            serializedName: 'properties.defaultMessageTimeToLive',
            type: {
              name: 'String'
            }
          },
          deadLetteringOnFilterEvaluationExceptions: {
            required: false,
            serializedName: 'properties.deadLetteringOnFilterEvaluationExceptions',
            type: {
              name: 'Boolean'
            }
          },
          deadLetteringOnMessageExpiration: {
            required: false,
            serializedName: 'properties.deadLetteringOnMessageExpiration',
            type: {
              name: 'Boolean'
            }
          },
          enableBatchedOperations: {
            required: false,
            serializedName: 'properties.enableBatchedOperations',
            type: {
              name: 'Boolean'
            }
          },
          entityAvailabilityStatus: {
            required: false,
            serializedName: 'properties.entityAvailabilityStatus',
            type: {
              name: 'Enum',
              allowedValues: [ 'Available', 'Limited', 'Renaming', 'Restoring', 'Unknown' ]
            }
          },
          isReadOnly: {
            required: false,
            serializedName: 'properties.isReadOnly',
            type: {
              name: 'Boolean'
            }
          },
          lockDuration: {
            required: false,
            serializedName: 'properties.lockDuration',
            type: {
              name: 'String'
            }
          },
          maxDeliveryCount: {
            required: false,
            serializedName: 'properties.maxDeliveryCount',
            type: {
              name: 'Number'
            }
          },
          messageCount: {
            required: false,
            readOnly: true,
            serializedName: 'properties.messageCount',
            type: {
              name: 'Number'
            }
          },
          requiresSession: {
            required: false,
            serializedName: 'properties.requiresSession',
            type: {
              name: 'Boolean'
            }
          },
          status: {
            required: false,
            serializedName: 'properties.status',
            type: {
              name: 'Enum',
              allowedValues: [ 'Active', 'Creating', 'Deleting', 'Disabled', 'ReceiveDisabled', 'Renaming', 'Restoring', 'SendDisabled', 'Unknown' ]
            }
          },
          updatedAt: {
            required: false,
            readOnly: true,
            serializedName: 'properties.updatedAt',
            type: {
              name: 'DateTime'
            }
          }
        }
      }
    };
  }
}

module.exports = SubscriptionCreateOrUpdateParameters;
