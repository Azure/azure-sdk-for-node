/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Description of subscription resource.
 *
 * @extends models['Resource']
 */
class SBSubscription extends models['Resource'] {
  /**
   * Create a SBSubscription.
   * @member {number} [messageCount] Number of messages.
   * @member {date} [createdAt] Exact time the message was created.
   * @member {date} [accessedAt] Last time there was a receive request to this
   * subscription.
   * @member {date} [updatedAt] The exact time the message was updated.
   * @member {object} [countDetails] Message count details
   * @member {number} [countDetails.activeMessageCount] Number of active
   * messages in the queue, topic, or subscription.
   * @member {number} [countDetails.deadLetterMessageCount] Number of messages
   * that are dead lettered.
   * @member {number} [countDetails.scheduledMessageCount] Number of scheduled
   * messages.
   * @member {number} [countDetails.transferMessageCount] Number of messages
   * transferred to another queue, topic, or subscription.
   * @member {number} [countDetails.transferDeadLetterMessageCount] Number of
   * messages transferred into dead letters.
   * @member {moment.duration} [lockDuration] ISO 8061 lock duration timespan
   * for the subscription. The default value is 1 minute.
   * @member {boolean} [requiresSession] Value indicating if a subscription
   * supports the concept of sessions.
   * @member {moment.duration} [defaultMessageTimeToLive] ISO 8061 Default
   * message timespan to live value. This is the duration after which the
   * message expires, starting from when the message is sent to Service Bus.
   * This is the default value used when TimeToLive is not set on a message
   * itself.
   * @member {boolean} [deadLetteringOnMessageExpiration] Value that indicates
   * whether a subscription has dead letter support when a message expires.
   * @member {moment.duration} [duplicateDetectionHistoryTimeWindow] ISO 8601
   * timeSpan structure that defines the duration of the duplicate detection
   * history. The default value is 10 minutes.
   * @member {number} [maxDeliveryCount] Number of maximum deliveries.
   * @member {string} [status] Enumerates the possible values for the status of
   * a messaging entity. Possible values include: 'Active', 'Disabled',
   * 'Restoring', 'SendDisabled', 'ReceiveDisabled', 'Creating', 'Deleting',
   * 'Renaming', 'Unknown'
   * @member {boolean} [enableBatchedOperations] Value that indicates whether
   * server-side batched operations are enabled.
   * @member {moment.duration} [autoDeleteOnIdle] ISO 8061 timeSpan idle
   * interval after which the topic is automatically deleted. The minimum
   * duration is 5 minutes.
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of SBSubscription
   *
   * @returns {object} metadata of SBSubscription
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'SBSubscription',
      type: {
        name: 'Composite',
        className: 'SBSubscription',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          messageCount: {
            required: false,
            readOnly: true,
            serializedName: 'properties.messageCount',
            type: {
              name: 'Number'
            }
          },
          createdAt: {
            required: false,
            readOnly: true,
            serializedName: 'properties.createdAt',
            type: {
              name: 'DateTime'
            }
          },
          accessedAt: {
            required: false,
            readOnly: true,
            serializedName: 'properties.accessedAt',
            type: {
              name: 'DateTime'
            }
          },
          updatedAt: {
            required: false,
            readOnly: true,
            serializedName: 'properties.updatedAt',
            type: {
              name: 'DateTime'
            }
          },
          countDetails: {
            required: false,
            readOnly: true,
            serializedName: 'properties.countDetails',
            type: {
              name: 'Composite',
              className: 'MessageCountDetails'
            }
          },
          lockDuration: {
            required: false,
            serializedName: 'properties.lockDuration',
            type: {
              name: 'TimeSpan'
            }
          },
          requiresSession: {
            required: false,
            serializedName: 'properties.requiresSession',
            type: {
              name: 'Boolean'
            }
          },
          defaultMessageTimeToLive: {
            required: false,
            serializedName: 'properties.defaultMessageTimeToLive',
            type: {
              name: 'TimeSpan'
            }
          },
          deadLetteringOnMessageExpiration: {
            required: false,
            serializedName: 'properties.deadLetteringOnMessageExpiration',
            type: {
              name: 'Boolean'
            }
          },
          duplicateDetectionHistoryTimeWindow: {
            required: false,
            serializedName: 'properties.duplicateDetectionHistoryTimeWindow',
            type: {
              name: 'TimeSpan'
            }
          },
          maxDeliveryCount: {
            required: false,
            serializedName: 'properties.maxDeliveryCount',
            type: {
              name: 'Number'
            }
          },
          status: {
            required: false,
            serializedName: 'properties.status',
            type: {
              name: 'Enum',
              allowedValues: [ 'Active', 'Disabled', 'Restoring', 'SendDisabled', 'ReceiveDisabled', 'Creating', 'Deleting', 'Renaming', 'Unknown' ]
            }
          },
          enableBatchedOperations: {
            required: false,
            serializedName: 'properties.enableBatchedOperations',
            type: {
              name: 'Boolean'
            }
          },
          autoDeleteOnIdle: {
            required: false,
            serializedName: 'properties.autoDeleteOnIdle',
            type: {
              name: 'TimeSpan'
            }
          }
        }
      }
    };
  }
}

module.exports = SBSubscription;
