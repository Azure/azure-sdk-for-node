/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback, HttpOperationResponse } from 'ms-rest';
import * as models from '../models';


/**
 * @class
 * RecordSets
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the DnsManagementClient.
 */
export interface RecordSets {


    /**
     * Updates a record set within a DNS zone.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} zoneName The name of the DNS zone (without a terminating
     * dot).
     *
     * @param {string} relativeRecordSetName The name of the record set, relative
     * to the name of the zone.
     *
     * @param {string} recordType The type of DNS record in this record set.
     * Possible values include: 'A', 'AAAA', 'CNAME', 'MX', 'NS', 'PTR', 'SOA',
     * 'SRV', 'TXT'
     *
     * @param {object} parameters Parameters supplied to the Update operation.
     *
     * @param {string} [parameters.id] The ID of the record set.
     *
     * @param {string} [parameters.name] The name of the record set.
     *
     * @param {string} [parameters.type] The type of the record set.
     *
     * @param {string} [parameters.etag] The etag of the record set.
     *
     * @param {object} [parameters.metadata] The metadata attached to the record
     * set.
     *
     * @param {number} [parameters.tTL] The TTL (time-to-live) of the records in
     * the record set.
     *
     * @param {array} [parameters.aRecords] The list of A records in the record
     * set.
     *
     * @param {array} [parameters.aaaaRecords] The list of AAAA records in the
     * record set.
     *
     * @param {array} [parameters.mxRecords] The list of MX records in the record
     * set.
     *
     * @param {array} [parameters.nsRecords] The list of NS records in the record
     * set.
     *
     * @param {array} [parameters.ptrRecords] The list of PTR records in the record
     * set.
     *
     * @param {array} [parameters.srvRecords] The list of SRV records in the record
     * set.
     *
     * @param {array} [parameters.txtRecords] The list of TXT records in the record
     * set.
     *
     * @param {object} [parameters.cnameRecord] The CNAME record in the  record
     * set.
     *
     * @param {string} [parameters.cnameRecord.cname] The canonical name for this
     * CNAME record.
     *
     * @param {object} [parameters.soaRecord] The SOA record in the record set.
     *
     * @param {string} [parameters.soaRecord.host] The domain name of the
     * authoritative name server for this SOA record.
     *
     * @param {string} [parameters.soaRecord.email] The email contact for this SOA
     * record.
     *
     * @param {number} [parameters.soaRecord.serialNumber] The serial number for
     * this SOA record.
     *
     * @param {number} [parameters.soaRecord.refreshTime] The refresh value for
     * this SOA record.
     *
     * @param {number} [parameters.soaRecord.retryTime] The retry time for this SOA
     * record.
     *
     * @param {number} [parameters.soaRecord.expireTime] The expire time for this
     * SOA record.
     *
     * @param {number} [parameters.soaRecord.minimumTtl] The minimum value for this
     * SOA record. By convention this is used to determine the negative caching
     * duration.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.ifMatch] The etag of the record set. Omit this
     * value to always overwrite the current record set. Specify the last-seen etag
     * value to prevent accidentally overwritting concurrent changes.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RecordSet>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, zoneName: string, relativeRecordSetName: string, recordType: string, parameters: models.RecordSet, options?: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RecordSet>>;

    /**
     * Updates a record set within a DNS zone.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} zoneName The name of the DNS zone (without a terminating
     * dot).
     *
     * @param {string} relativeRecordSetName The name of the record set, relative
     * to the name of the zone.
     *
     * @param {string} recordType The type of DNS record in this record set.
     * Possible values include: 'A', 'AAAA', 'CNAME', 'MX', 'NS', 'PTR', 'SOA',
     * 'SRV', 'TXT'
     *
     * @param {object} parameters Parameters supplied to the Update operation.
     *
     * @param {string} [parameters.id] The ID of the record set.
     *
     * @param {string} [parameters.name] The name of the record set.
     *
     * @param {string} [parameters.type] The type of the record set.
     *
     * @param {string} [parameters.etag] The etag of the record set.
     *
     * @param {object} [parameters.metadata] The metadata attached to the record
     * set.
     *
     * @param {number} [parameters.tTL] The TTL (time-to-live) of the records in
     * the record set.
     *
     * @param {array} [parameters.aRecords] The list of A records in the record
     * set.
     *
     * @param {array} [parameters.aaaaRecords] The list of AAAA records in the
     * record set.
     *
     * @param {array} [parameters.mxRecords] The list of MX records in the record
     * set.
     *
     * @param {array} [parameters.nsRecords] The list of NS records in the record
     * set.
     *
     * @param {array} [parameters.ptrRecords] The list of PTR records in the record
     * set.
     *
     * @param {array} [parameters.srvRecords] The list of SRV records in the record
     * set.
     *
     * @param {array} [parameters.txtRecords] The list of TXT records in the record
     * set.
     *
     * @param {object} [parameters.cnameRecord] The CNAME record in the  record
     * set.
     *
     * @param {string} [parameters.cnameRecord.cname] The canonical name for this
     * CNAME record.
     *
     * @param {object} [parameters.soaRecord] The SOA record in the record set.
     *
     * @param {string} [parameters.soaRecord.host] The domain name of the
     * authoritative name server for this SOA record.
     *
     * @param {string} [parameters.soaRecord.email] The email contact for this SOA
     * record.
     *
     * @param {number} [parameters.soaRecord.serialNumber] The serial number for
     * this SOA record.
     *
     * @param {number} [parameters.soaRecord.refreshTime] The refresh value for
     * this SOA record.
     *
     * @param {number} [parameters.soaRecord.retryTime] The retry time for this SOA
     * record.
     *
     * @param {number} [parameters.soaRecord.expireTime] The expire time for this
     * SOA record.
     *
     * @param {number} [parameters.soaRecord.minimumTtl] The minimum value for this
     * SOA record. By convention this is used to determine the negative caching
     * duration.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.ifMatch] The etag of the record set. Omit this
     * value to always overwrite the current record set. Specify the last-seen etag
     * value to prevent accidentally overwritting concurrent changes.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RecordSet} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RecordSet} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RecordSet} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, zoneName: string, relativeRecordSetName: string, recordType: string, parameters: models.RecordSet, options?: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.RecordSet>;
    update(resourceGroupName: string, zoneName: string, relativeRecordSetName: string, recordType: string, parameters: models.RecordSet, callback: ServiceCallback<models.RecordSet>): void;
    update(resourceGroupName: string, zoneName: string, relativeRecordSetName: string, recordType: string, parameters: models.RecordSet, options: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RecordSet>): void;


    /**
     * Creates or updates a record set within a DNS zone.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} zoneName The name of the DNS zone (without a terminating
     * dot).
     *
     * @param {string} relativeRecordSetName The name of the record set, relative
     * to the name of the zone.
     *
     * @param {string} recordType The type of DNS record in this record set. Record
     * sets of type SOA can be updated but not created (they are created when the
     * DNS zone is created). Possible values include: 'A', 'AAAA', 'CNAME', 'MX',
     * 'NS', 'PTR', 'SOA', 'SRV', 'TXT'
     *
     * @param {object} parameters Parameters supplied to the CreateOrUpdate
     * operation.
     *
     * @param {string} [parameters.id] The ID of the record set.
     *
     * @param {string} [parameters.name] The name of the record set.
     *
     * @param {string} [parameters.type] The type of the record set.
     *
     * @param {string} [parameters.etag] The etag of the record set.
     *
     * @param {object} [parameters.metadata] The metadata attached to the record
     * set.
     *
     * @param {number} [parameters.tTL] The TTL (time-to-live) of the records in
     * the record set.
     *
     * @param {array} [parameters.aRecords] The list of A records in the record
     * set.
     *
     * @param {array} [parameters.aaaaRecords] The list of AAAA records in the
     * record set.
     *
     * @param {array} [parameters.mxRecords] The list of MX records in the record
     * set.
     *
     * @param {array} [parameters.nsRecords] The list of NS records in the record
     * set.
     *
     * @param {array} [parameters.ptrRecords] The list of PTR records in the record
     * set.
     *
     * @param {array} [parameters.srvRecords] The list of SRV records in the record
     * set.
     *
     * @param {array} [parameters.txtRecords] The list of TXT records in the record
     * set.
     *
     * @param {object} [parameters.cnameRecord] The CNAME record in the  record
     * set.
     *
     * @param {string} [parameters.cnameRecord.cname] The canonical name for this
     * CNAME record.
     *
     * @param {object} [parameters.soaRecord] The SOA record in the record set.
     *
     * @param {string} [parameters.soaRecord.host] The domain name of the
     * authoritative name server for this SOA record.
     *
     * @param {string} [parameters.soaRecord.email] The email contact for this SOA
     * record.
     *
     * @param {number} [parameters.soaRecord.serialNumber] The serial number for
     * this SOA record.
     *
     * @param {number} [parameters.soaRecord.refreshTime] The refresh value for
     * this SOA record.
     *
     * @param {number} [parameters.soaRecord.retryTime] The retry time for this SOA
     * record.
     *
     * @param {number} [parameters.soaRecord.expireTime] The expire time for this
     * SOA record.
     *
     * @param {number} [parameters.soaRecord.minimumTtl] The minimum value for this
     * SOA record. By convention this is used to determine the negative caching
     * duration.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.ifMatch] The etag of the record set. Omit this
     * value to always overwrite the current record set. Specify the last-seen etag
     * value to prevent accidentally overwritting any concurrent changes.
     *
     * @param {string} [options.ifNoneMatch] Set to '*' to allow a new record set
     * to be created, but to prevent updating an existing record set. Other values
     * will be ignored.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RecordSet>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, zoneName: string, relativeRecordSetName: string, recordType: string, parameters: models.RecordSet, options?: { ifMatch? : string, ifNoneMatch? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RecordSet>>;

    /**
     * Creates or updates a record set within a DNS zone.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} zoneName The name of the DNS zone (without a terminating
     * dot).
     *
     * @param {string} relativeRecordSetName The name of the record set, relative
     * to the name of the zone.
     *
     * @param {string} recordType The type of DNS record in this record set. Record
     * sets of type SOA can be updated but not created (they are created when the
     * DNS zone is created). Possible values include: 'A', 'AAAA', 'CNAME', 'MX',
     * 'NS', 'PTR', 'SOA', 'SRV', 'TXT'
     *
     * @param {object} parameters Parameters supplied to the CreateOrUpdate
     * operation.
     *
     * @param {string} [parameters.id] The ID of the record set.
     *
     * @param {string} [parameters.name] The name of the record set.
     *
     * @param {string} [parameters.type] The type of the record set.
     *
     * @param {string} [parameters.etag] The etag of the record set.
     *
     * @param {object} [parameters.metadata] The metadata attached to the record
     * set.
     *
     * @param {number} [parameters.tTL] The TTL (time-to-live) of the records in
     * the record set.
     *
     * @param {array} [parameters.aRecords] The list of A records in the record
     * set.
     *
     * @param {array} [parameters.aaaaRecords] The list of AAAA records in the
     * record set.
     *
     * @param {array} [parameters.mxRecords] The list of MX records in the record
     * set.
     *
     * @param {array} [parameters.nsRecords] The list of NS records in the record
     * set.
     *
     * @param {array} [parameters.ptrRecords] The list of PTR records in the record
     * set.
     *
     * @param {array} [parameters.srvRecords] The list of SRV records in the record
     * set.
     *
     * @param {array} [parameters.txtRecords] The list of TXT records in the record
     * set.
     *
     * @param {object} [parameters.cnameRecord] The CNAME record in the  record
     * set.
     *
     * @param {string} [parameters.cnameRecord.cname] The canonical name for this
     * CNAME record.
     *
     * @param {object} [parameters.soaRecord] The SOA record in the record set.
     *
     * @param {string} [parameters.soaRecord.host] The domain name of the
     * authoritative name server for this SOA record.
     *
     * @param {string} [parameters.soaRecord.email] The email contact for this SOA
     * record.
     *
     * @param {number} [parameters.soaRecord.serialNumber] The serial number for
     * this SOA record.
     *
     * @param {number} [parameters.soaRecord.refreshTime] The refresh value for
     * this SOA record.
     *
     * @param {number} [parameters.soaRecord.retryTime] The retry time for this SOA
     * record.
     *
     * @param {number} [parameters.soaRecord.expireTime] The expire time for this
     * SOA record.
     *
     * @param {number} [parameters.soaRecord.minimumTtl] The minimum value for this
     * SOA record. By convention this is used to determine the negative caching
     * duration.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.ifMatch] The etag of the record set. Omit this
     * value to always overwrite the current record set. Specify the last-seen etag
     * value to prevent accidentally overwritting any concurrent changes.
     *
     * @param {string} [options.ifNoneMatch] Set to '*' to allow a new record set
     * to be created, but to prevent updating an existing record set. Other values
     * will be ignored.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RecordSet} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RecordSet} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RecordSet} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, zoneName: string, relativeRecordSetName: string, recordType: string, parameters: models.RecordSet, options?: { ifMatch? : string, ifNoneMatch? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.RecordSet>;
    createOrUpdate(resourceGroupName: string, zoneName: string, relativeRecordSetName: string, recordType: string, parameters: models.RecordSet, callback: ServiceCallback<models.RecordSet>): void;
    createOrUpdate(resourceGroupName: string, zoneName: string, relativeRecordSetName: string, recordType: string, parameters: models.RecordSet, options: { ifMatch? : string, ifNoneMatch? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RecordSet>): void;


    /**
     * Deletes a record set from a DNS zone. This operation cannot be undone.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} zoneName The name of the DNS zone (without a terminating
     * dot).
     *
     * @param {string} relativeRecordSetName The name of the record set, relative
     * to the name of the zone.
     *
     * @param {string} recordType The type of DNS record in this record set. Record
     * sets of type SOA cannot be deleted (they are deleted when the DNS zone is
     * deleted). Possible values include: 'A', 'AAAA', 'CNAME', 'MX', 'NS', 'PTR',
     * 'SOA', 'SRV', 'TXT'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.ifMatch] The etag of the record set. Omit this
     * value to always delete the current record set. Specify the last-seen etag
     * value to prevent accidentally deleting any concurrent changes.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, zoneName: string, relativeRecordSetName: string, recordType: string, options?: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a record set from a DNS zone. This operation cannot be undone.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} zoneName The name of the DNS zone (without a terminating
     * dot).
     *
     * @param {string} relativeRecordSetName The name of the record set, relative
     * to the name of the zone.
     *
     * @param {string} recordType The type of DNS record in this record set. Record
     * sets of type SOA cannot be deleted (they are deleted when the DNS zone is
     * deleted). Possible values include: 'A', 'AAAA', 'CNAME', 'MX', 'NS', 'PTR',
     * 'SOA', 'SRV', 'TXT'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.ifMatch] The etag of the record set. Omit this
     * value to always delete the current record set. Specify the last-seen etag
     * value to prevent accidentally deleting any concurrent changes.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, zoneName: string, relativeRecordSetName: string, recordType: string, options?: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, zoneName: string, relativeRecordSetName: string, recordType: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, zoneName: string, relativeRecordSetName: string, recordType: string, options: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets a record set.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} zoneName The name of the DNS zone (without a terminating
     * dot).
     *
     * @param {string} relativeRecordSetName The name of the record set, relative
     * to the name of the zone.
     *
     * @param {string} recordType The type of DNS record in this record set.
     * Possible values include: 'A', 'AAAA', 'CNAME', 'MX', 'NS', 'PTR', 'SOA',
     * 'SRV', 'TXT'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RecordSet>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, zoneName: string, relativeRecordSetName: string, recordType: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RecordSet>>;

    /**
     * Gets a record set.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} zoneName The name of the DNS zone (without a terminating
     * dot).
     *
     * @param {string} relativeRecordSetName The name of the record set, relative
     * to the name of the zone.
     *
     * @param {string} recordType The type of DNS record in this record set.
     * Possible values include: 'A', 'AAAA', 'CNAME', 'MX', 'NS', 'PTR', 'SOA',
     * 'SRV', 'TXT'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RecordSet} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RecordSet} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RecordSet} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, zoneName: string, relativeRecordSetName: string, recordType: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RecordSet>;
    get(resourceGroupName: string, zoneName: string, relativeRecordSetName: string, recordType: string, callback: ServiceCallback<models.RecordSet>): void;
    get(resourceGroupName: string, zoneName: string, relativeRecordSetName: string, recordType: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RecordSet>): void;


    /**
     * Lists the record sets of a specified type in a DNS zone.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} zoneName The name of the DNS zone (without a terminating
     * dot).
     *
     * @param {string} recordType The type of record sets to enumerate. Possible
     * values include: 'A', 'AAAA', 'CNAME', 'MX', 'NS', 'PTR', 'SOA', 'SRV', 'TXT'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.top] The maximum number of record sets to return.
     * If not specified, returns up to 100 record sets.
     *
     * @param {string} [options.recordsetnamesuffix] The suffix label of the record
     * set name that has to be used to filter the record set enumerations. If this
     * parameter is specified, Enumeration will return only records that end with
     * .<recordSetNameSuffix>
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RecordSetListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByTypeWithHttpOperationResponse(resourceGroupName: string, zoneName: string, recordType: string, options?: { top? : number, recordsetnamesuffix? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RecordSetListResult>>;

    /**
     * Lists the record sets of a specified type in a DNS zone.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} zoneName The name of the DNS zone (without a terminating
     * dot).
     *
     * @param {string} recordType The type of record sets to enumerate. Possible
     * values include: 'A', 'AAAA', 'CNAME', 'MX', 'NS', 'PTR', 'SOA', 'SRV', 'TXT'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.top] The maximum number of record sets to return.
     * If not specified, returns up to 100 record sets.
     *
     * @param {string} [options.recordsetnamesuffix] The suffix label of the record
     * set name that has to be used to filter the record set enumerations. If this
     * parameter is specified, Enumeration will return only records that end with
     * .<recordSetNameSuffix>
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RecordSetListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RecordSetListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RecordSetListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByType(resourceGroupName: string, zoneName: string, recordType: string, options?: { top? : number, recordsetnamesuffix? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.RecordSetListResult>;
    listByType(resourceGroupName: string, zoneName: string, recordType: string, callback: ServiceCallback<models.RecordSetListResult>): void;
    listByType(resourceGroupName: string, zoneName: string, recordType: string, options: { top? : number, recordsetnamesuffix? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RecordSetListResult>): void;


    /**
     * Lists all record sets in a DNS zone.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} zoneName The name of the DNS zone (without a terminating
     * dot).
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.top] The maximum number of record sets to return.
     * If not specified, returns up to 100 record sets.
     *
     * @param {string} [options.recordsetnamesuffix] The suffix label of the record
     * set name that has to be used to filter the record set enumerations. If this
     * parameter is specified, Enumeration will return only records that end with
     * .<recordSetNameSuffix>
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RecordSetListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByDnsZoneWithHttpOperationResponse(resourceGroupName: string, zoneName: string, options?: { top? : number, recordsetnamesuffix? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RecordSetListResult>>;

    /**
     * Lists all record sets in a DNS zone.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} zoneName The name of the DNS zone (without a terminating
     * dot).
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.top] The maximum number of record sets to return.
     * If not specified, returns up to 100 record sets.
     *
     * @param {string} [options.recordsetnamesuffix] The suffix label of the record
     * set name that has to be used to filter the record set enumerations. If this
     * parameter is specified, Enumeration will return only records that end with
     * .<recordSetNameSuffix>
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RecordSetListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RecordSetListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RecordSetListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByDnsZone(resourceGroupName: string, zoneName: string, options?: { top? : number, recordsetnamesuffix? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.RecordSetListResult>;
    listByDnsZone(resourceGroupName: string, zoneName: string, callback: ServiceCallback<models.RecordSetListResult>): void;
    listByDnsZone(resourceGroupName: string, zoneName: string, options: { top? : number, recordsetnamesuffix? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RecordSetListResult>): void;


    /**
     * Lists the record sets of a specified type in a DNS zone.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RecordSetListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByTypeNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RecordSetListResult>>;

    /**
     * Lists the record sets of a specified type in a DNS zone.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RecordSetListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RecordSetListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RecordSetListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByTypeNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RecordSetListResult>;
    listByTypeNext(nextPageLink: string, callback: ServiceCallback<models.RecordSetListResult>): void;
    listByTypeNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RecordSetListResult>): void;


    /**
     * Lists all record sets in a DNS zone.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RecordSetListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByDnsZoneNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RecordSetListResult>>;

    /**
     * Lists all record sets in a DNS zone.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RecordSetListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RecordSetListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RecordSetListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByDnsZoneNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RecordSetListResult>;
    listByDnsZoneNext(nextPageLink: string, callback: ServiceCallback<models.RecordSetListResult>): void;
    listByDnsZoneNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RecordSetListResult>): void;
}

/**
 * @class
 * Zones
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the DnsManagementClient.
 */
export interface Zones {


    /**
     * Creates or updates a DNS zone. Does not modify DNS records within the zone.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} zoneName The name of the DNS zone (without a terminating
     * dot).
     *
     * @param {object} parameters Parameters supplied to the CreateOrUpdate
     * operation.
     *
     * @param {string} [parameters.etag] The etag of the zone.
     *
     * @param {number} [parameters.maxNumberOfRecordSets] The maximum number of
     * record sets that can be created in this DNS zone.  This is a read-only
     * property and any attempt to set this value will be ignored.
     *
     * @param {number} [parameters.numberOfRecordSets] The current number of record
     * sets in this DNS zone.  This is a read-only property and any attempt to set
     * this value will be ignored.
     *
     * @param {string} parameters.location Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.ifMatch] The etag of the DNS zone. Omit this value
     * to always overwrite the current zone. Specify the last-seen etag value to
     * prevent accidentally overwritting any concurrent changes.
     *
     * @param {string} [options.ifNoneMatch] Set to '*' to allow a new DNS zone to
     * be created, but to prevent updating an existing zone. Other values will be
     * ignored.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Zone>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, zoneName: string, parameters: models.Zone, options?: { ifMatch? : string, ifNoneMatch? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Zone>>;

    /**
     * Creates or updates a DNS zone. Does not modify DNS records within the zone.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} zoneName The name of the DNS zone (without a terminating
     * dot).
     *
     * @param {object} parameters Parameters supplied to the CreateOrUpdate
     * operation.
     *
     * @param {string} [parameters.etag] The etag of the zone.
     *
     * @param {number} [parameters.maxNumberOfRecordSets] The maximum number of
     * record sets that can be created in this DNS zone.  This is a read-only
     * property and any attempt to set this value will be ignored.
     *
     * @param {number} [parameters.numberOfRecordSets] The current number of record
     * sets in this DNS zone.  This is a read-only property and any attempt to set
     * this value will be ignored.
     *
     * @param {string} parameters.location Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.ifMatch] The etag of the DNS zone. Omit this value
     * to always overwrite the current zone. Specify the last-seen etag value to
     * prevent accidentally overwritting any concurrent changes.
     *
     * @param {string} [options.ifNoneMatch] Set to '*' to allow a new DNS zone to
     * be created, but to prevent updating an existing zone. Other values will be
     * ignored.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Zone} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Zone} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Zone} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, zoneName: string, parameters: models.Zone, options?: { ifMatch? : string, ifNoneMatch? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.Zone>;
    createOrUpdate(resourceGroupName: string, zoneName: string, parameters: models.Zone, callback: ServiceCallback<models.Zone>): void;
    createOrUpdate(resourceGroupName: string, zoneName: string, parameters: models.Zone, options: { ifMatch? : string, ifNoneMatch? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Zone>): void;


    /**
     * Deletes a DNS zone. WARNING: All DNS records in the zone will also be
     * deleted. This operation cannot be undone.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} zoneName The name of the DNS zone (without a terminating
     * dot).
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.ifMatch] The etag of the DNS zone. Omit this value
     * to always delete the current zone. Specify the last-seen etag value to
     * prevent accidentally deleting any concurrent changes.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ZoneDeleteResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, zoneName: string, options?: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ZoneDeleteResult>>;

    /**
     * Deletes a DNS zone. WARNING: All DNS records in the zone will also be
     * deleted. This operation cannot be undone.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} zoneName The name of the DNS zone (without a terminating
     * dot).
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.ifMatch] The etag of the DNS zone. Omit this value
     * to always delete the current zone. Specify the last-seen etag value to
     * prevent accidentally deleting any concurrent changes.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ZoneDeleteResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ZoneDeleteResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ZoneDeleteResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, zoneName: string, options?: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.ZoneDeleteResult>;
    deleteMethod(resourceGroupName: string, zoneName: string, callback: ServiceCallback<models.ZoneDeleteResult>): void;
    deleteMethod(resourceGroupName: string, zoneName: string, options: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ZoneDeleteResult>): void;


    /**
     * Gets a DNS zone. Retrieves the zone properties, but not the record sets
     * within the zone.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} zoneName The name of the DNS zone (without a terminating
     * dot).
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Zone>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, zoneName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Zone>>;

    /**
     * Gets a DNS zone. Retrieves the zone properties, but not the record sets
     * within the zone.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} zoneName The name of the DNS zone (without a terminating
     * dot).
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Zone} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Zone} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Zone} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, zoneName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Zone>;
    get(resourceGroupName: string, zoneName: string, callback: ServiceCallback<models.Zone>): void;
    get(resourceGroupName: string, zoneName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Zone>): void;


    /**
     * Lists the DNS zones within a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.top] The maximum number of record sets to return.
     * If not specified, returns up to 100 record sets.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ZoneListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupWithHttpOperationResponse(resourceGroupName: string, options?: { top? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ZoneListResult>>;

    /**
     * Lists the DNS zones within a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.top] The maximum number of record sets to return.
     * If not specified, returns up to 100 record sets.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ZoneListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ZoneListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ZoneListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroup(resourceGroupName: string, options?: { top? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.ZoneListResult>;
    listByResourceGroup(resourceGroupName: string, callback: ServiceCallback<models.ZoneListResult>): void;
    listByResourceGroup(resourceGroupName: string, options: { top? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ZoneListResult>): void;


    /**
     * Lists the DNS zones in all resource groups in a subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.top] The maximum number of DNS zones to return. If
     * not specified, returns up to 100 zones.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ZoneListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { top? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ZoneListResult>>;

    /**
     * Lists the DNS zones in all resource groups in a subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.top] The maximum number of DNS zones to return. If
     * not specified, returns up to 100 zones.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ZoneListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ZoneListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ZoneListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { top? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.ZoneListResult>;
    list(callback: ServiceCallback<models.ZoneListResult>): void;
    list(options: { top? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ZoneListResult>): void;


    /**
     * Deletes a DNS zone. WARNING: All DNS records in the zone will also be
     * deleted. This operation cannot be undone.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} zoneName The name of the DNS zone (without a terminating
     * dot).
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.ifMatch] The etag of the DNS zone. Omit this value
     * to always delete the current zone. Specify the last-seen etag value to
     * prevent accidentally deleting any concurrent changes.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ZoneDeleteResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, zoneName: string, options?: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ZoneDeleteResult>>;

    /**
     * Deletes a DNS zone. WARNING: All DNS records in the zone will also be
     * deleted. This operation cannot be undone.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} zoneName The name of the DNS zone (without a terminating
     * dot).
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.ifMatch] The etag of the DNS zone. Omit this value
     * to always delete the current zone. Specify the last-seen etag value to
     * prevent accidentally deleting any concurrent changes.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ZoneDeleteResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ZoneDeleteResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ZoneDeleteResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(resourceGroupName: string, zoneName: string, options?: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.ZoneDeleteResult>;
    beginDeleteMethod(resourceGroupName: string, zoneName: string, callback: ServiceCallback<models.ZoneDeleteResult>): void;
    beginDeleteMethod(resourceGroupName: string, zoneName: string, options: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ZoneDeleteResult>): void;


    /**
     * Lists the DNS zones within a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ZoneListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ZoneListResult>>;

    /**
     * Lists the DNS zones within a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ZoneListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ZoneListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ZoneListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroupNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ZoneListResult>;
    listByResourceGroupNext(nextPageLink: string, callback: ServiceCallback<models.ZoneListResult>): void;
    listByResourceGroupNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ZoneListResult>): void;


    /**
     * Lists the DNS zones in all resource groups in a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ZoneListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ZoneListResult>>;

    /**
     * Lists the DNS zones in all resource groups in a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ZoneListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ZoneListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ZoneListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ZoneListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.ZoneListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ZoneListResult>): void;
}
