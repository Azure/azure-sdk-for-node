/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

/**
 * @class
 * Initializes a new instance of the RecordSetUpdateParameters class.
 * @constructor
 * Parameters supplied to update a Recordset.
 *
 * @member {object} [recordSet] Gets or sets information about the Recordset
 * being updated.
 * 
 * @member {string} [recordSet.id] Gets or sets the ID of the resource.
 * 
 * @member {string} [recordSet.name] Gets or sets the name of the resource.
 * 
 * @member {string} [recordSet.type] Gets or sets the type of the resource.
 * 
 * @member {string} [recordSet.etag] Gets or sets the ETag of the Recordset.
 * 
 * @member {object} [recordSet.metadata] Gets or sets the metadata attached to
 * the resource.
 * 
 * @member {number} [recordSet.tTL] Gets or sets the TTL of the records in the
 * Recordset.
 * 
 * @member {array} [recordSet.aRecords] Gets or sets the list of A records in
 * the Recordset.
 * 
 * @member {array} [recordSet.aaaaRecords] Gets or sets the list of AAAA
 * records in the Recordset.
 * 
 * @member {array} [recordSet.mxRecords] Gets or sets the list of MX records
 * in the Recordset.
 * 
 * @member {array} [recordSet.nsRecords] Gets or sets the list of NS records
 * in the RecordSet.
 * 
 * @member {array} [recordSet.ptrRecords] Gets or sets the list of PTR records
 * in the Recordset.
 * 
 * @member {array} [recordSet.srvRecords] Gets or sets the list of SRV records
 * in the Recordset.
 * 
 * @member {array} [recordSet.txtRecords] Gets or sets the list of TXT records
 * in the Recordset.
 * 
 * @member {object} [recordSet.cnameRecord] Gets or sets the CNAME record in
 * the Recordset.
 * 
 * @member {string} [recordSet.cnameRecord.cname] Gets or sets the canonical
 * name for this record without a terminating dot.
 * 
 * @member {object} [recordSet.soaRecord] Gets or sets the SOA record in the
 * Recordset.
 * 
 * @member {string} [recordSet.soaRecord.host] Gets or sets the domain name of
 * the authoritative name server, without a temrinating dot.
 * 
 * @member {string} [recordSet.soaRecord.email] Gets or sets the email for
 * this record.
 * 
 * @member {number} [recordSet.soaRecord.serialNumber] Gets or sets the serial
 * number for this record.
 * 
 * @member {number} [recordSet.soaRecord.refreshTime] Gets or sets the refresh
 * value for this record.
 * 
 * @member {number} [recordSet.soaRecord.retryTime] Gets or sets the retry
 * time for this record.
 * 
 * @member {number} [recordSet.soaRecord.expireTime] Gets or sets the expire
 * time for this record.
 * 
 * @member {number} [recordSet.soaRecord.minimumTtl] Gets or sets the minimum
 * TTL value for this record.
 * 
 */
function RecordSetUpdateParameters() {
}

/**
 * Defines the metadata of RecordSetUpdateParameters
 *
 * @returns {object} metadata of RecordSetUpdateParameters
 *
 */
RecordSetUpdateParameters.prototype.mapper = function () {
  return {
    required: false,
    serializedName: 'RecordSetUpdateParameters',
    type: {
      name: 'Composite',
      className: 'RecordSetUpdateParameters',
      modelProperties: {
        recordSet: {
          required: false,
          serializedName: 'RecordSet',
          type: {
            name: 'Composite',
            className: 'RecordSet'
          }
        }
      }
    }
  };
};

module.exports = RecordSetUpdateParameters;
