/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the RecordSet class.
 * @constructor
 * Describes a DNS Recordset (a set of DNS records with the same name and
 * type).
 *
 * @member {string} [id] Gets or sets the ID of the resource.
 * 
 * @member {string} [name] Gets or sets the name of the resource.
 * 
 * @member {string} [type] Gets or sets the type of the resource.
 * 
 * @member {string} [etag] Gets or sets the ETag of the Recordset.
 * 
 * @member {object} [metadata] Gets or sets the metadata attached to the
 * resource.
 * 
 * @member {number} [tTL] Gets or sets the TTL of the records in the Recordset.
 * 
 * @member {array} [aRecords] Gets or sets the list of A records in the
 * Recordset.
 * 
 * @member {array} [aaaaRecords] Gets or sets the list of AAAA records in the
 * Recordset.
 * 
 * @member {array} [mxRecords] Gets or sets the list of MX records in the
 * Recordset.
 * 
 * @member {array} [nsRecords] Gets or sets the list of NS records in the
 * RecordSet.
 * 
 * @member {array} [ptrRecords] Gets or sets the list of PTR records in the
 * Recordset.
 * 
 * @member {array} [srvRecords] Gets or sets the list of SRV records in the
 * Recordset.
 * 
 * @member {array} [txtRecords] Gets or sets the list of TXT records in the
 * Recordset.
 * 
 * @member {object} [cnameRecord] Gets or sets the CNAME record in the
 * Recordset.
 * 
 * @member {string} [cnameRecord.cname] Gets or sets the canonical name for
 * this record without a terminating dot.
 * 
 * @member {object} [soaRecord] Gets or sets the SOA record in the Recordset.
 * 
 * @member {string} [soaRecord.host] Gets or sets the domain name of the
 * authoritative name server, without a temrinating dot.
 * 
 * @member {string} [soaRecord.email] Gets or sets the email for this record.
 * 
 * @member {number} [soaRecord.serialNumber] Gets or sets the serial number
 * for this record.
 * 
 * @member {number} [soaRecord.refreshTime] Gets or sets the refresh value for
 * this record.
 * 
 * @member {number} [soaRecord.retryTime] Gets or sets the retry time for this
 * record.
 * 
 * @member {number} [soaRecord.expireTime] Gets or sets the expire time for
 * this record.
 * 
 * @member {number} [soaRecord.minimumTtl] Gets or sets the minimum TTL value
 * for this record.
 * 
 */
function RecordSet() {
}

/**
 * Defines the metadata of RecordSet
 *
 * @returns {object} metadata of RecordSet
 *
 */
RecordSet.prototype.mapper = function () {
  return {
    required: false,
    serializedName: 'RecordSet',
    type: {
      name: 'Composite',
      className: 'RecordSet',
      modelProperties: {
        id: {
          required: false,
          serializedName: 'id',
          type: {
            name: 'String'
          }
        },
        name: {
          required: false,
          serializedName: 'name',
          type: {
            name: 'String'
          }
        },
        type: {
          required: false,
          serializedName: 'type',
          type: {
            name: 'String'
          }
        },
        etag: {
          required: false,
          serializedName: 'etag',
          type: {
            name: 'String'
          }
        },
        metadata: {
          required: false,
          serializedName: 'properties.metadata',
          type: {
            name: 'Dictionary',
            value: {
                required: false,
                serializedName: 'StringElementType',
                type: {
                  name: 'String'
                }
            }
          }
        },
        tTL: {
          required: false,
          serializedName: 'properties.TTL',
          type: {
            name: 'Number'
          }
        },
        aRecords: {
          required: false,
          serializedName: 'properties.ARecords',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'ARecordElementType',
                type: {
                  name: 'Composite',
                  className: 'ARecord'
                }
            }
          }
        },
        aaaaRecords: {
          required: false,
          serializedName: 'properties.AAAARecords',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'AaaaRecordElementType',
                type: {
                  name: 'Composite',
                  className: 'AaaaRecord'
                }
            }
          }
        },
        mxRecords: {
          required: false,
          serializedName: 'properties.MXRecords',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'MxRecordElementType',
                type: {
                  name: 'Composite',
                  className: 'MxRecord'
                }
            }
          }
        },
        nsRecords: {
          required: false,
          serializedName: 'properties.NSRecords',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'NsRecordElementType',
                type: {
                  name: 'Composite',
                  className: 'NsRecord'
                }
            }
          }
        },
        ptrRecords: {
          required: false,
          serializedName: 'properties.PTRRecords',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'PtrRecordElementType',
                type: {
                  name: 'Composite',
                  className: 'PtrRecord'
                }
            }
          }
        },
        srvRecords: {
          required: false,
          serializedName: 'properties.SRVRecords',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'SrvRecordElementType',
                type: {
                  name: 'Composite',
                  className: 'SrvRecord'
                }
            }
          }
        },
        txtRecords: {
          required: false,
          serializedName: 'properties.TXTRecords',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'TxtRecordElementType',
                type: {
                  name: 'Composite',
                  className: 'TxtRecord'
                }
            }
          }
        },
        cnameRecord: {
          required: false,
          serializedName: 'properties.CNAMERecord',
          type: {
            name: 'Composite',
            className: 'CnameRecord'
          }
        },
        soaRecord: {
          required: false,
          serializedName: 'properties.SOARecord',
          type: {
            name: 'Composite',
            className: 'SoaRecord'
          }
        }
      }
    }
  };
};

module.exports = RecordSet;
