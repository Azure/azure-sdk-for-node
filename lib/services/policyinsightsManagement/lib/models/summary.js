/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Summary results.
 *
 */
class Summary {
  /**
   * Create a Summary.
   * @member {string} [odataid] OData entity ID; always set to null since
   * summaries do not have an entity ID.
   * @member {string} [odatacontext] OData context string; used by OData
   * clients to resolve type information based on metadata.
   * @member {object} [results] Non-compliance summary for all policy
   * assignments.
   * @member {string} [results.queryResultsUri] HTTP POST URI for queryResults
   * action on Microsoft.PolicyInsights to retrieve raw results for the
   * non-compliance summary.
   * @member {number} [results.nonCompliantResources] Number of non-compliant
   * resources.
   * @member {number} [results.nonCompliantPolicies] Number of non-compliant
   * policies.
   * @member {array} [policyAssignments] Policy assignments summary.
   */
  constructor() {
  }

  /**
   * Defines the metadata of Summary
   *
   * @returns {object} metadata of Summary
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'Summary',
      type: {
        name: 'Composite',
        className: 'Summary',
        modelProperties: {
          odataid: {
            required: false,
            serializedName: '@odata\\.id',
            type: {
              name: 'String'
            }
          },
          odatacontext: {
            required: false,
            serializedName: '@odata\\.context',
            type: {
              name: 'String'
            }
          },
          results: {
            required: false,
            serializedName: 'results',
            type: {
              name: 'Composite',
              className: 'SummaryResults'
            }
          },
          policyAssignments: {
            required: false,
            serializedName: 'policyAssignments',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'PolicyAssignmentSummaryElementType',
                  type: {
                    name: 'Composite',
                    className: 'PolicyAssignmentSummary'
                  }
              }
            }
          }
        }
      }
    };
  }
}

module.exports = Summary;
