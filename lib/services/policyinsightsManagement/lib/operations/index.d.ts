/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback, HttpOperationResponse } from 'ms-rest';
import * as models from '../models';


/**
 * @class
 * PolicyTrackedResources
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the PolicyInsightsClient.
 */
export interface PolicyTrackedResources {


    /**
     * Queries policy tracked resources under the management group.
     *
     * @param {string} managementGroupName Management group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.queryOptions] Additional parameters for the
     * operation
     *
     * @param {number} [options.queryOptions.top] Maximum number of records to
     * return.
     *
     * @param {string} [options.queryOptions.filter] OData filter expression.
     *
     * @param {string} [options.queryOptions.orderBy] Ordering expression using
     * OData notation. One or more comma-separated column names with an optional
     * "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId
     * asc".
     *
     * @param {string} [options.queryOptions.select] Select expression using OData
     * notation. Limits the columns on each record to just those requested, e.g.
     * "$select=PolicyAssignmentId, ResourceId".
     *
     * @param {date} [options.queryOptions.from] ISO 8601 formatted timestamp
     * specifying the start time of the interval to query. When not specified, the
     * service uses ($to - 1-day).
     *
     * @param {date} [options.queryOptions.to] ISO 8601 formatted timestamp
     * specifying the end time of the interval to query. When not specified, the
     * service uses request time.
     *
     * @param {string} [options.queryOptions.apply] OData apply expression for
     * aggregations.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PolicyTrackedResourcesQueryResults>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listQueryResultsForManagementGroupWithHttpOperationResponse(managementGroupName: string, options?: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PolicyTrackedResourcesQueryResults>>;

    /**
     * Queries policy tracked resources under the management group.
     *
     * @param {string} managementGroupName Management group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.queryOptions] Additional parameters for the
     * operation
     *
     * @param {number} [options.queryOptions.top] Maximum number of records to
     * return.
     *
     * @param {string} [options.queryOptions.filter] OData filter expression.
     *
     * @param {string} [options.queryOptions.orderBy] Ordering expression using
     * OData notation. One or more comma-separated column names with an optional
     * "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId
     * asc".
     *
     * @param {string} [options.queryOptions.select] Select expression using OData
     * notation. Limits the columns on each record to just those requested, e.g.
     * "$select=PolicyAssignmentId, ResourceId".
     *
     * @param {date} [options.queryOptions.from] ISO 8601 formatted timestamp
     * specifying the start time of the interval to query. When not specified, the
     * service uses ($to - 1-day).
     *
     * @param {date} [options.queryOptions.to] ISO 8601 formatted timestamp
     * specifying the end time of the interval to query. When not specified, the
     * service uses request time.
     *
     * @param {string} [options.queryOptions.apply] OData apply expression for
     * aggregations.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PolicyTrackedResourcesQueryResults} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PolicyTrackedResourcesQueryResults} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PolicyTrackedResourcesQueryResults} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listQueryResultsForManagementGroup(managementGroupName: string, options?: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }): Promise<models.PolicyTrackedResourcesQueryResults>;
    listQueryResultsForManagementGroup(managementGroupName: string, callback: ServiceCallback<models.PolicyTrackedResourcesQueryResults>): void;
    listQueryResultsForManagementGroup(managementGroupName: string, options: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PolicyTrackedResourcesQueryResults>): void;


    /**
     * Queries policy tracked resources under the subscription.
     *
     * @param {string} subscriptionId Microsoft Azure subscription ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.queryOptions] Additional parameters for the
     * operation
     *
     * @param {number} [options.queryOptions.top] Maximum number of records to
     * return.
     *
     * @param {string} [options.queryOptions.filter] OData filter expression.
     *
     * @param {string} [options.queryOptions.orderBy] Ordering expression using
     * OData notation. One or more comma-separated column names with an optional
     * "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId
     * asc".
     *
     * @param {string} [options.queryOptions.select] Select expression using OData
     * notation. Limits the columns on each record to just those requested, e.g.
     * "$select=PolicyAssignmentId, ResourceId".
     *
     * @param {date} [options.queryOptions.from] ISO 8601 formatted timestamp
     * specifying the start time of the interval to query. When not specified, the
     * service uses ($to - 1-day).
     *
     * @param {date} [options.queryOptions.to] ISO 8601 formatted timestamp
     * specifying the end time of the interval to query. When not specified, the
     * service uses request time.
     *
     * @param {string} [options.queryOptions.apply] OData apply expression for
     * aggregations.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PolicyTrackedResourcesQueryResults>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listQueryResultsForSubscriptionWithHttpOperationResponse(subscriptionId: string, options?: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PolicyTrackedResourcesQueryResults>>;

    /**
     * Queries policy tracked resources under the subscription.
     *
     * @param {string} subscriptionId Microsoft Azure subscription ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.queryOptions] Additional parameters for the
     * operation
     *
     * @param {number} [options.queryOptions.top] Maximum number of records to
     * return.
     *
     * @param {string} [options.queryOptions.filter] OData filter expression.
     *
     * @param {string} [options.queryOptions.orderBy] Ordering expression using
     * OData notation. One or more comma-separated column names with an optional
     * "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId
     * asc".
     *
     * @param {string} [options.queryOptions.select] Select expression using OData
     * notation. Limits the columns on each record to just those requested, e.g.
     * "$select=PolicyAssignmentId, ResourceId".
     *
     * @param {date} [options.queryOptions.from] ISO 8601 formatted timestamp
     * specifying the start time of the interval to query. When not specified, the
     * service uses ($to - 1-day).
     *
     * @param {date} [options.queryOptions.to] ISO 8601 formatted timestamp
     * specifying the end time of the interval to query. When not specified, the
     * service uses request time.
     *
     * @param {string} [options.queryOptions.apply] OData apply expression for
     * aggregations.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PolicyTrackedResourcesQueryResults} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PolicyTrackedResourcesQueryResults} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PolicyTrackedResourcesQueryResults} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listQueryResultsForSubscription(subscriptionId: string, options?: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }): Promise<models.PolicyTrackedResourcesQueryResults>;
    listQueryResultsForSubscription(subscriptionId: string, callback: ServiceCallback<models.PolicyTrackedResourcesQueryResults>): void;
    listQueryResultsForSubscription(subscriptionId: string, options: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PolicyTrackedResourcesQueryResults>): void;


    /**
     * Queries policy tracked resources under the resource group.
     *
     * @param {string} resourceGroupName Resource group name.
     *
     * @param {string} subscriptionId Microsoft Azure subscription ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.queryOptions] Additional parameters for the
     * operation
     *
     * @param {number} [options.queryOptions.top] Maximum number of records to
     * return.
     *
     * @param {string} [options.queryOptions.filter] OData filter expression.
     *
     * @param {string} [options.queryOptions.orderBy] Ordering expression using
     * OData notation. One or more comma-separated column names with an optional
     * "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId
     * asc".
     *
     * @param {string} [options.queryOptions.select] Select expression using OData
     * notation. Limits the columns on each record to just those requested, e.g.
     * "$select=PolicyAssignmentId, ResourceId".
     *
     * @param {date} [options.queryOptions.from] ISO 8601 formatted timestamp
     * specifying the start time of the interval to query. When not specified, the
     * service uses ($to - 1-day).
     *
     * @param {date} [options.queryOptions.to] ISO 8601 formatted timestamp
     * specifying the end time of the interval to query. When not specified, the
     * service uses request time.
     *
     * @param {string} [options.queryOptions.apply] OData apply expression for
     * aggregations.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PolicyTrackedResourcesQueryResults>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listQueryResultsForResourceGroupWithHttpOperationResponse(resourceGroupName: string, subscriptionId: string, options?: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PolicyTrackedResourcesQueryResults>>;

    /**
     * Queries policy tracked resources under the resource group.
     *
     * @param {string} resourceGroupName Resource group name.
     *
     * @param {string} subscriptionId Microsoft Azure subscription ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.queryOptions] Additional parameters for the
     * operation
     *
     * @param {number} [options.queryOptions.top] Maximum number of records to
     * return.
     *
     * @param {string} [options.queryOptions.filter] OData filter expression.
     *
     * @param {string} [options.queryOptions.orderBy] Ordering expression using
     * OData notation. One or more comma-separated column names with an optional
     * "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId
     * asc".
     *
     * @param {string} [options.queryOptions.select] Select expression using OData
     * notation. Limits the columns on each record to just those requested, e.g.
     * "$select=PolicyAssignmentId, ResourceId".
     *
     * @param {date} [options.queryOptions.from] ISO 8601 formatted timestamp
     * specifying the start time of the interval to query. When not specified, the
     * service uses ($to - 1-day).
     *
     * @param {date} [options.queryOptions.to] ISO 8601 formatted timestamp
     * specifying the end time of the interval to query. When not specified, the
     * service uses request time.
     *
     * @param {string} [options.queryOptions.apply] OData apply expression for
     * aggregations.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PolicyTrackedResourcesQueryResults} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PolicyTrackedResourcesQueryResults} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PolicyTrackedResourcesQueryResults} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listQueryResultsForResourceGroup(resourceGroupName: string, subscriptionId: string, options?: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }): Promise<models.PolicyTrackedResourcesQueryResults>;
    listQueryResultsForResourceGroup(resourceGroupName: string, subscriptionId: string, callback: ServiceCallback<models.PolicyTrackedResourcesQueryResults>): void;
    listQueryResultsForResourceGroup(resourceGroupName: string, subscriptionId: string, options: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PolicyTrackedResourcesQueryResults>): void;


    /**
     * Queries policy tracked resources under the resource.
     *
     * @param {string} resourceId Resource ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.queryOptions] Additional parameters for the
     * operation
     *
     * @param {number} [options.queryOptions.top] Maximum number of records to
     * return.
     *
     * @param {string} [options.queryOptions.filter] OData filter expression.
     *
     * @param {string} [options.queryOptions.orderBy] Ordering expression using
     * OData notation. One or more comma-separated column names with an optional
     * "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId
     * asc".
     *
     * @param {string} [options.queryOptions.select] Select expression using OData
     * notation. Limits the columns on each record to just those requested, e.g.
     * "$select=PolicyAssignmentId, ResourceId".
     *
     * @param {date} [options.queryOptions.from] ISO 8601 formatted timestamp
     * specifying the start time of the interval to query. When not specified, the
     * service uses ($to - 1-day).
     *
     * @param {date} [options.queryOptions.to] ISO 8601 formatted timestamp
     * specifying the end time of the interval to query. When not specified, the
     * service uses request time.
     *
     * @param {string} [options.queryOptions.apply] OData apply expression for
     * aggregations.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PolicyTrackedResourcesQueryResults>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listQueryResultsForResourceWithHttpOperationResponse(resourceId: string, options?: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PolicyTrackedResourcesQueryResults>>;

    /**
     * Queries policy tracked resources under the resource.
     *
     * @param {string} resourceId Resource ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.queryOptions] Additional parameters for the
     * operation
     *
     * @param {number} [options.queryOptions.top] Maximum number of records to
     * return.
     *
     * @param {string} [options.queryOptions.filter] OData filter expression.
     *
     * @param {string} [options.queryOptions.orderBy] Ordering expression using
     * OData notation. One or more comma-separated column names with an optional
     * "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId
     * asc".
     *
     * @param {string} [options.queryOptions.select] Select expression using OData
     * notation. Limits the columns on each record to just those requested, e.g.
     * "$select=PolicyAssignmentId, ResourceId".
     *
     * @param {date} [options.queryOptions.from] ISO 8601 formatted timestamp
     * specifying the start time of the interval to query. When not specified, the
     * service uses ($to - 1-day).
     *
     * @param {date} [options.queryOptions.to] ISO 8601 formatted timestamp
     * specifying the end time of the interval to query. When not specified, the
     * service uses request time.
     *
     * @param {string} [options.queryOptions.apply] OData apply expression for
     * aggregations.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PolicyTrackedResourcesQueryResults} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PolicyTrackedResourcesQueryResults} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PolicyTrackedResourcesQueryResults} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listQueryResultsForResource(resourceId: string, options?: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }): Promise<models.PolicyTrackedResourcesQueryResults>;
    listQueryResultsForResource(resourceId: string, callback: ServiceCallback<models.PolicyTrackedResourcesQueryResults>): void;
    listQueryResultsForResource(resourceId: string, options: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PolicyTrackedResourcesQueryResults>): void;


    /**
     * Queries policy tracked resources under the management group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PolicyTrackedResourcesQueryResults>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listQueryResultsForManagementGroupNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PolicyTrackedResourcesQueryResults>>;

    /**
     * Queries policy tracked resources under the management group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PolicyTrackedResourcesQueryResults} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PolicyTrackedResourcesQueryResults} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PolicyTrackedResourcesQueryResults} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listQueryResultsForManagementGroupNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PolicyTrackedResourcesQueryResults>;
    listQueryResultsForManagementGroupNext(nextPageLink: string, callback: ServiceCallback<models.PolicyTrackedResourcesQueryResults>): void;
    listQueryResultsForManagementGroupNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PolicyTrackedResourcesQueryResults>): void;


    /**
     * Queries policy tracked resources under the subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PolicyTrackedResourcesQueryResults>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listQueryResultsForSubscriptionNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PolicyTrackedResourcesQueryResults>>;

    /**
     * Queries policy tracked resources under the subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PolicyTrackedResourcesQueryResults} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PolicyTrackedResourcesQueryResults} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PolicyTrackedResourcesQueryResults} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listQueryResultsForSubscriptionNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PolicyTrackedResourcesQueryResults>;
    listQueryResultsForSubscriptionNext(nextPageLink: string, callback: ServiceCallback<models.PolicyTrackedResourcesQueryResults>): void;
    listQueryResultsForSubscriptionNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PolicyTrackedResourcesQueryResults>): void;


    /**
     * Queries policy tracked resources under the resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PolicyTrackedResourcesQueryResults>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listQueryResultsForResourceGroupNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PolicyTrackedResourcesQueryResults>>;

    /**
     * Queries policy tracked resources under the resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PolicyTrackedResourcesQueryResults} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PolicyTrackedResourcesQueryResults} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PolicyTrackedResourcesQueryResults} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listQueryResultsForResourceGroupNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PolicyTrackedResourcesQueryResults>;
    listQueryResultsForResourceGroupNext(nextPageLink: string, callback: ServiceCallback<models.PolicyTrackedResourcesQueryResults>): void;
    listQueryResultsForResourceGroupNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PolicyTrackedResourcesQueryResults>): void;


    /**
     * Queries policy tracked resources under the resource.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PolicyTrackedResourcesQueryResults>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listQueryResultsForResourceNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PolicyTrackedResourcesQueryResults>>;

    /**
     * Queries policy tracked resources under the resource.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PolicyTrackedResourcesQueryResults} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PolicyTrackedResourcesQueryResults} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PolicyTrackedResourcesQueryResults} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listQueryResultsForResourceNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PolicyTrackedResourcesQueryResults>;
    listQueryResultsForResourceNext(nextPageLink: string, callback: ServiceCallback<models.PolicyTrackedResourcesQueryResults>): void;
    listQueryResultsForResourceNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PolicyTrackedResourcesQueryResults>): void;
}

/**
 * @class
 * Remediations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the PolicyInsightsClient.
 */
export interface Remediations {


    /**
     * Gets all deployments for a remediation at management group scope.
     *
     * @param {string} managementGroupId Management group ID.
     *
     * @param {string} remediationName The name of the remediation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.queryOptions] Additional parameters for the
     * operation
     *
     * @param {number} [options.queryOptions.top] Maximum number of records to
     * return.
     *
     * @param {string} [options.queryOptions.filter] OData filter expression.
     *
     * @param {string} [options.queryOptions.orderBy] Ordering expression using
     * OData notation. One or more comma-separated column names with an optional
     * "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId
     * asc".
     *
     * @param {string} [options.queryOptions.select] Select expression using OData
     * notation. Limits the columns on each record to just those requested, e.g.
     * "$select=PolicyAssignmentId, ResourceId".
     *
     * @param {date} [options.queryOptions.from] ISO 8601 formatted timestamp
     * specifying the start time of the interval to query. When not specified, the
     * service uses ($to - 1-day).
     *
     * @param {date} [options.queryOptions.to] ISO 8601 formatted timestamp
     * specifying the end time of the interval to query. When not specified, the
     * service uses request time.
     *
     * @param {string} [options.queryOptions.apply] OData apply expression for
     * aggregations.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RemediationDeploymentsListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listDeploymentsAtManagementGroupWithHttpOperationResponse(managementGroupId: string, remediationName: string, options?: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RemediationDeploymentsListResult>>;

    /**
     * Gets all deployments for a remediation at management group scope.
     *
     * @param {string} managementGroupId Management group ID.
     *
     * @param {string} remediationName The name of the remediation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.queryOptions] Additional parameters for the
     * operation
     *
     * @param {number} [options.queryOptions.top] Maximum number of records to
     * return.
     *
     * @param {string} [options.queryOptions.filter] OData filter expression.
     *
     * @param {string} [options.queryOptions.orderBy] Ordering expression using
     * OData notation. One or more comma-separated column names with an optional
     * "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId
     * asc".
     *
     * @param {string} [options.queryOptions.select] Select expression using OData
     * notation. Limits the columns on each record to just those requested, e.g.
     * "$select=PolicyAssignmentId, ResourceId".
     *
     * @param {date} [options.queryOptions.from] ISO 8601 formatted timestamp
     * specifying the start time of the interval to query. When not specified, the
     * service uses ($to - 1-day).
     *
     * @param {date} [options.queryOptions.to] ISO 8601 formatted timestamp
     * specifying the end time of the interval to query. When not specified, the
     * service uses request time.
     *
     * @param {string} [options.queryOptions.apply] OData apply expression for
     * aggregations.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RemediationDeploymentsListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RemediationDeploymentsListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RemediationDeploymentsListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listDeploymentsAtManagementGroup(managementGroupId: string, remediationName: string, options?: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }): Promise<models.RemediationDeploymentsListResult>;
    listDeploymentsAtManagementGroup(managementGroupId: string, remediationName: string, callback: ServiceCallback<models.RemediationDeploymentsListResult>): void;
    listDeploymentsAtManagementGroup(managementGroupId: string, remediationName: string, options: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RemediationDeploymentsListResult>): void;


    /**
     * Cancels a remediation at management group scope.
     *
     * @param {string} managementGroupId Management group ID.
     *
     * @param {string} remediationName The name of the remediation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Remediation>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    cancelAtManagementGroupWithHttpOperationResponse(managementGroupId: string, remediationName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Remediation>>;

    /**
     * Cancels a remediation at management group scope.
     *
     * @param {string} managementGroupId Management group ID.
     *
     * @param {string} remediationName The name of the remediation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Remediation} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Remediation} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Remediation} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    cancelAtManagementGroup(managementGroupId: string, remediationName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Remediation>;
    cancelAtManagementGroup(managementGroupId: string, remediationName: string, callback: ServiceCallback<models.Remediation>): void;
    cancelAtManagementGroup(managementGroupId: string, remediationName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Remediation>): void;


    /**
     * Gets all remediations for the management group.
     *
     * @param {string} managementGroupId Management group ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.queryOptions] Additional parameters for the
     * operation
     *
     * @param {number} [options.queryOptions.top] Maximum number of records to
     * return.
     *
     * @param {string} [options.queryOptions.filter] OData filter expression.
     *
     * @param {string} [options.queryOptions.orderBy] Ordering expression using
     * OData notation. One or more comma-separated column names with an optional
     * "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId
     * asc".
     *
     * @param {string} [options.queryOptions.select] Select expression using OData
     * notation. Limits the columns on each record to just those requested, e.g.
     * "$select=PolicyAssignmentId, ResourceId".
     *
     * @param {date} [options.queryOptions.from] ISO 8601 formatted timestamp
     * specifying the start time of the interval to query. When not specified, the
     * service uses ($to - 1-day).
     *
     * @param {date} [options.queryOptions.to] ISO 8601 formatted timestamp
     * specifying the end time of the interval to query. When not specified, the
     * service uses request time.
     *
     * @param {string} [options.queryOptions.apply] OData apply expression for
     * aggregations.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RemediationListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listForManagementGroupWithHttpOperationResponse(managementGroupId: string, options?: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RemediationListResult>>;

    /**
     * Gets all remediations for the management group.
     *
     * @param {string} managementGroupId Management group ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.queryOptions] Additional parameters for the
     * operation
     *
     * @param {number} [options.queryOptions.top] Maximum number of records to
     * return.
     *
     * @param {string} [options.queryOptions.filter] OData filter expression.
     *
     * @param {string} [options.queryOptions.orderBy] Ordering expression using
     * OData notation. One or more comma-separated column names with an optional
     * "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId
     * asc".
     *
     * @param {string} [options.queryOptions.select] Select expression using OData
     * notation. Limits the columns on each record to just those requested, e.g.
     * "$select=PolicyAssignmentId, ResourceId".
     *
     * @param {date} [options.queryOptions.from] ISO 8601 formatted timestamp
     * specifying the start time of the interval to query. When not specified, the
     * service uses ($to - 1-day).
     *
     * @param {date} [options.queryOptions.to] ISO 8601 formatted timestamp
     * specifying the end time of the interval to query. When not specified, the
     * service uses request time.
     *
     * @param {string} [options.queryOptions.apply] OData apply expression for
     * aggregations.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RemediationListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RemediationListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RemediationListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listForManagementGroup(managementGroupId: string, options?: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }): Promise<models.RemediationListResult>;
    listForManagementGroup(managementGroupId: string, callback: ServiceCallback<models.RemediationListResult>): void;
    listForManagementGroup(managementGroupId: string, options: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RemediationListResult>): void;


    /**
     * Creates or updates a remediation at management group scope.
     *
     * @param {string} managementGroupId Management group ID.
     *
     * @param {string} remediationName The name of the remediation.
     *
     * @param {object} parameters The remediation parameters.
     *
     * @param {string} [parameters.policyAssignmentId] The resource ID of the
     * policy assignment that should be remediated.
     *
     * @param {string} [parameters.policyDefinitionReferenceId] The policy
     * definition reference ID of the individual definition that should be
     * remediated. Required when the policy assignment being remediated assigns a
     * policy set definition.
     *
     * @param {object} [parameters.filters] The filters that will be applied to
     * determine which resources to remediate.
     *
     * @param {array} [parameters.filters.locations] The resource locations that
     * will be remediated.
     *
     * @param {object} [parameters.deploymentStatus] The deployment status summary
     * for all deployments created by the remediation.
     *
     * @param {number} [parameters.deploymentStatus.totalDeployments] The number of
     * deployments required by the remediation.
     *
     * @param {number} [parameters.deploymentStatus.successfulDeployments] The
     * number of deployments required by the remediation that have succeeded.
     *
     * @param {number} [parameters.deploymentStatus.failedDeployments] The number
     * of deployments required by the remediation that have failed.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Remediation>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateAtManagementGroupWithHttpOperationResponse(managementGroupId: string, remediationName: string, parameters: models.Remediation, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Remediation>>;

    /**
     * Creates or updates a remediation at management group scope.
     *
     * @param {string} managementGroupId Management group ID.
     *
     * @param {string} remediationName The name of the remediation.
     *
     * @param {object} parameters The remediation parameters.
     *
     * @param {string} [parameters.policyAssignmentId] The resource ID of the
     * policy assignment that should be remediated.
     *
     * @param {string} [parameters.policyDefinitionReferenceId] The policy
     * definition reference ID of the individual definition that should be
     * remediated. Required when the policy assignment being remediated assigns a
     * policy set definition.
     *
     * @param {object} [parameters.filters] The filters that will be applied to
     * determine which resources to remediate.
     *
     * @param {array} [parameters.filters.locations] The resource locations that
     * will be remediated.
     *
     * @param {object} [parameters.deploymentStatus] The deployment status summary
     * for all deployments created by the remediation.
     *
     * @param {number} [parameters.deploymentStatus.totalDeployments] The number of
     * deployments required by the remediation.
     *
     * @param {number} [parameters.deploymentStatus.successfulDeployments] The
     * number of deployments required by the remediation that have succeeded.
     *
     * @param {number} [parameters.deploymentStatus.failedDeployments] The number
     * of deployments required by the remediation that have failed.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Remediation} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Remediation} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Remediation} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdateAtManagementGroup(managementGroupId: string, remediationName: string, parameters: models.Remediation, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Remediation>;
    createOrUpdateAtManagementGroup(managementGroupId: string, remediationName: string, parameters: models.Remediation, callback: ServiceCallback<models.Remediation>): void;
    createOrUpdateAtManagementGroup(managementGroupId: string, remediationName: string, parameters: models.Remediation, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Remediation>): void;


    /**
     * Gets an existing remediation at management group scope.
     *
     * @param {string} managementGroupId Management group ID.
     *
     * @param {string} remediationName The name of the remediation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Remediation>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getAtManagementGroupWithHttpOperationResponse(managementGroupId: string, remediationName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Remediation>>;

    /**
     * Gets an existing remediation at management group scope.
     *
     * @param {string} managementGroupId Management group ID.
     *
     * @param {string} remediationName The name of the remediation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Remediation} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Remediation} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Remediation} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getAtManagementGroup(managementGroupId: string, remediationName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Remediation>;
    getAtManagementGroup(managementGroupId: string, remediationName: string, callback: ServiceCallback<models.Remediation>): void;
    getAtManagementGroup(managementGroupId: string, remediationName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Remediation>): void;


    /**
     * Deletes an existing remediation at management group scope.
     *
     * @param {string} managementGroupId Management group ID.
     *
     * @param {string} remediationName The name of the remediation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Remediation>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteAtManagementGroupWithHttpOperationResponse(managementGroupId: string, remediationName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Remediation>>;

    /**
     * Deletes an existing remediation at management group scope.
     *
     * @param {string} managementGroupId Management group ID.
     *
     * @param {string} remediationName The name of the remediation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Remediation} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Remediation} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Remediation} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteAtManagementGroup(managementGroupId: string, remediationName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Remediation>;
    deleteAtManagementGroup(managementGroupId: string, remediationName: string, callback: ServiceCallback<models.Remediation>): void;
    deleteAtManagementGroup(managementGroupId: string, remediationName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Remediation>): void;


    /**
     * Gets all deployments for a remediation at subscription scope.
     *
     * @param {string} subscriptionId Microsoft Azure subscription ID.
     *
     * @param {string} remediationName The name of the remediation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.queryOptions] Additional parameters for the
     * operation
     *
     * @param {number} [options.queryOptions.top] Maximum number of records to
     * return.
     *
     * @param {string} [options.queryOptions.filter] OData filter expression.
     *
     * @param {string} [options.queryOptions.orderBy] Ordering expression using
     * OData notation. One or more comma-separated column names with an optional
     * "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId
     * asc".
     *
     * @param {string} [options.queryOptions.select] Select expression using OData
     * notation. Limits the columns on each record to just those requested, e.g.
     * "$select=PolicyAssignmentId, ResourceId".
     *
     * @param {date} [options.queryOptions.from] ISO 8601 formatted timestamp
     * specifying the start time of the interval to query. When not specified, the
     * service uses ($to - 1-day).
     *
     * @param {date} [options.queryOptions.to] ISO 8601 formatted timestamp
     * specifying the end time of the interval to query. When not specified, the
     * service uses request time.
     *
     * @param {string} [options.queryOptions.apply] OData apply expression for
     * aggregations.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RemediationDeploymentsListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listDeploymentsAtSubscriptionWithHttpOperationResponse(subscriptionId: string, remediationName: string, options?: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RemediationDeploymentsListResult>>;

    /**
     * Gets all deployments for a remediation at subscription scope.
     *
     * @param {string} subscriptionId Microsoft Azure subscription ID.
     *
     * @param {string} remediationName The name of the remediation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.queryOptions] Additional parameters for the
     * operation
     *
     * @param {number} [options.queryOptions.top] Maximum number of records to
     * return.
     *
     * @param {string} [options.queryOptions.filter] OData filter expression.
     *
     * @param {string} [options.queryOptions.orderBy] Ordering expression using
     * OData notation. One or more comma-separated column names with an optional
     * "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId
     * asc".
     *
     * @param {string} [options.queryOptions.select] Select expression using OData
     * notation. Limits the columns on each record to just those requested, e.g.
     * "$select=PolicyAssignmentId, ResourceId".
     *
     * @param {date} [options.queryOptions.from] ISO 8601 formatted timestamp
     * specifying the start time of the interval to query. When not specified, the
     * service uses ($to - 1-day).
     *
     * @param {date} [options.queryOptions.to] ISO 8601 formatted timestamp
     * specifying the end time of the interval to query. When not specified, the
     * service uses request time.
     *
     * @param {string} [options.queryOptions.apply] OData apply expression for
     * aggregations.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RemediationDeploymentsListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RemediationDeploymentsListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RemediationDeploymentsListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listDeploymentsAtSubscription(subscriptionId: string, remediationName: string, options?: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }): Promise<models.RemediationDeploymentsListResult>;
    listDeploymentsAtSubscription(subscriptionId: string, remediationName: string, callback: ServiceCallback<models.RemediationDeploymentsListResult>): void;
    listDeploymentsAtSubscription(subscriptionId: string, remediationName: string, options: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RemediationDeploymentsListResult>): void;


    /**
     * Cancels a remediation at subscription scope.
     *
     * @param {string} subscriptionId Microsoft Azure subscription ID.
     *
     * @param {string} remediationName The name of the remediation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Remediation>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    cancelAtSubscriptionWithHttpOperationResponse(subscriptionId: string, remediationName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Remediation>>;

    /**
     * Cancels a remediation at subscription scope.
     *
     * @param {string} subscriptionId Microsoft Azure subscription ID.
     *
     * @param {string} remediationName The name of the remediation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Remediation} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Remediation} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Remediation} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    cancelAtSubscription(subscriptionId: string, remediationName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Remediation>;
    cancelAtSubscription(subscriptionId: string, remediationName: string, callback: ServiceCallback<models.Remediation>): void;
    cancelAtSubscription(subscriptionId: string, remediationName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Remediation>): void;


    /**
     * Gets all remediations for the subscription.
     *
     * @param {string} subscriptionId Microsoft Azure subscription ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.queryOptions] Additional parameters for the
     * operation
     *
     * @param {number} [options.queryOptions.top] Maximum number of records to
     * return.
     *
     * @param {string} [options.queryOptions.filter] OData filter expression.
     *
     * @param {string} [options.queryOptions.orderBy] Ordering expression using
     * OData notation. One or more comma-separated column names with an optional
     * "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId
     * asc".
     *
     * @param {string} [options.queryOptions.select] Select expression using OData
     * notation. Limits the columns on each record to just those requested, e.g.
     * "$select=PolicyAssignmentId, ResourceId".
     *
     * @param {date} [options.queryOptions.from] ISO 8601 formatted timestamp
     * specifying the start time of the interval to query. When not specified, the
     * service uses ($to - 1-day).
     *
     * @param {date} [options.queryOptions.to] ISO 8601 formatted timestamp
     * specifying the end time of the interval to query. When not specified, the
     * service uses request time.
     *
     * @param {string} [options.queryOptions.apply] OData apply expression for
     * aggregations.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RemediationListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listForSubscriptionWithHttpOperationResponse(subscriptionId: string, options?: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RemediationListResult>>;

    /**
     * Gets all remediations for the subscription.
     *
     * @param {string} subscriptionId Microsoft Azure subscription ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.queryOptions] Additional parameters for the
     * operation
     *
     * @param {number} [options.queryOptions.top] Maximum number of records to
     * return.
     *
     * @param {string} [options.queryOptions.filter] OData filter expression.
     *
     * @param {string} [options.queryOptions.orderBy] Ordering expression using
     * OData notation. One or more comma-separated column names with an optional
     * "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId
     * asc".
     *
     * @param {string} [options.queryOptions.select] Select expression using OData
     * notation. Limits the columns on each record to just those requested, e.g.
     * "$select=PolicyAssignmentId, ResourceId".
     *
     * @param {date} [options.queryOptions.from] ISO 8601 formatted timestamp
     * specifying the start time of the interval to query. When not specified, the
     * service uses ($to - 1-day).
     *
     * @param {date} [options.queryOptions.to] ISO 8601 formatted timestamp
     * specifying the end time of the interval to query. When not specified, the
     * service uses request time.
     *
     * @param {string} [options.queryOptions.apply] OData apply expression for
     * aggregations.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RemediationListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RemediationListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RemediationListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listForSubscription(subscriptionId: string, options?: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }): Promise<models.RemediationListResult>;
    listForSubscription(subscriptionId: string, callback: ServiceCallback<models.RemediationListResult>): void;
    listForSubscription(subscriptionId: string, options: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RemediationListResult>): void;


    /**
     * Creates or updates a remediation at subscription scope.
     *
     * @param {string} subscriptionId Microsoft Azure subscription ID.
     *
     * @param {string} remediationName The name of the remediation.
     *
     * @param {object} parameters The remediation parameters.
     *
     * @param {string} [parameters.policyAssignmentId] The resource ID of the
     * policy assignment that should be remediated.
     *
     * @param {string} [parameters.policyDefinitionReferenceId] The policy
     * definition reference ID of the individual definition that should be
     * remediated. Required when the policy assignment being remediated assigns a
     * policy set definition.
     *
     * @param {object} [parameters.filters] The filters that will be applied to
     * determine which resources to remediate.
     *
     * @param {array} [parameters.filters.locations] The resource locations that
     * will be remediated.
     *
     * @param {object} [parameters.deploymentStatus] The deployment status summary
     * for all deployments created by the remediation.
     *
     * @param {number} [parameters.deploymentStatus.totalDeployments] The number of
     * deployments required by the remediation.
     *
     * @param {number} [parameters.deploymentStatus.successfulDeployments] The
     * number of deployments required by the remediation that have succeeded.
     *
     * @param {number} [parameters.deploymentStatus.failedDeployments] The number
     * of deployments required by the remediation that have failed.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Remediation>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateAtSubscriptionWithHttpOperationResponse(subscriptionId: string, remediationName: string, parameters: models.Remediation, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Remediation>>;

    /**
     * Creates or updates a remediation at subscription scope.
     *
     * @param {string} subscriptionId Microsoft Azure subscription ID.
     *
     * @param {string} remediationName The name of the remediation.
     *
     * @param {object} parameters The remediation parameters.
     *
     * @param {string} [parameters.policyAssignmentId] The resource ID of the
     * policy assignment that should be remediated.
     *
     * @param {string} [parameters.policyDefinitionReferenceId] The policy
     * definition reference ID of the individual definition that should be
     * remediated. Required when the policy assignment being remediated assigns a
     * policy set definition.
     *
     * @param {object} [parameters.filters] The filters that will be applied to
     * determine which resources to remediate.
     *
     * @param {array} [parameters.filters.locations] The resource locations that
     * will be remediated.
     *
     * @param {object} [parameters.deploymentStatus] The deployment status summary
     * for all deployments created by the remediation.
     *
     * @param {number} [parameters.deploymentStatus.totalDeployments] The number of
     * deployments required by the remediation.
     *
     * @param {number} [parameters.deploymentStatus.successfulDeployments] The
     * number of deployments required by the remediation that have succeeded.
     *
     * @param {number} [parameters.deploymentStatus.failedDeployments] The number
     * of deployments required by the remediation that have failed.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Remediation} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Remediation} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Remediation} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdateAtSubscription(subscriptionId: string, remediationName: string, parameters: models.Remediation, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Remediation>;
    createOrUpdateAtSubscription(subscriptionId: string, remediationName: string, parameters: models.Remediation, callback: ServiceCallback<models.Remediation>): void;
    createOrUpdateAtSubscription(subscriptionId: string, remediationName: string, parameters: models.Remediation, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Remediation>): void;


    /**
     * Gets an existing remediation at subscription scope.
     *
     * @param {string} subscriptionId Microsoft Azure subscription ID.
     *
     * @param {string} remediationName The name of the remediation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Remediation>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getAtSubscriptionWithHttpOperationResponse(subscriptionId: string, remediationName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Remediation>>;

    /**
     * Gets an existing remediation at subscription scope.
     *
     * @param {string} subscriptionId Microsoft Azure subscription ID.
     *
     * @param {string} remediationName The name of the remediation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Remediation} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Remediation} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Remediation} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getAtSubscription(subscriptionId: string, remediationName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Remediation>;
    getAtSubscription(subscriptionId: string, remediationName: string, callback: ServiceCallback<models.Remediation>): void;
    getAtSubscription(subscriptionId: string, remediationName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Remediation>): void;


    /**
     * Deletes an existing remediation at subscription scope.
     *
     * @param {string} subscriptionId Microsoft Azure subscription ID.
     *
     * @param {string} remediationName The name of the remediation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Remediation>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteAtSubscriptionWithHttpOperationResponse(subscriptionId: string, remediationName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Remediation>>;

    /**
     * Deletes an existing remediation at subscription scope.
     *
     * @param {string} subscriptionId Microsoft Azure subscription ID.
     *
     * @param {string} remediationName The name of the remediation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Remediation} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Remediation} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Remediation} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteAtSubscription(subscriptionId: string, remediationName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Remediation>;
    deleteAtSubscription(subscriptionId: string, remediationName: string, callback: ServiceCallback<models.Remediation>): void;
    deleteAtSubscription(subscriptionId: string, remediationName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Remediation>): void;


    /**
     * Gets all deployments for a remediation at resource group scope.
     *
     * @param {string} subscriptionId Microsoft Azure subscription ID.
     *
     * @param {string} resourceGroupName Resource group name.
     *
     * @param {string} remediationName The name of the remediation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.queryOptions] Additional parameters for the
     * operation
     *
     * @param {number} [options.queryOptions.top] Maximum number of records to
     * return.
     *
     * @param {string} [options.queryOptions.filter] OData filter expression.
     *
     * @param {string} [options.queryOptions.orderBy] Ordering expression using
     * OData notation. One or more comma-separated column names with an optional
     * "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId
     * asc".
     *
     * @param {string} [options.queryOptions.select] Select expression using OData
     * notation. Limits the columns on each record to just those requested, e.g.
     * "$select=PolicyAssignmentId, ResourceId".
     *
     * @param {date} [options.queryOptions.from] ISO 8601 formatted timestamp
     * specifying the start time of the interval to query. When not specified, the
     * service uses ($to - 1-day).
     *
     * @param {date} [options.queryOptions.to] ISO 8601 formatted timestamp
     * specifying the end time of the interval to query. When not specified, the
     * service uses request time.
     *
     * @param {string} [options.queryOptions.apply] OData apply expression for
     * aggregations.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RemediationDeploymentsListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listDeploymentsAtResourceGroupWithHttpOperationResponse(subscriptionId: string, resourceGroupName: string, remediationName: string, options?: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RemediationDeploymentsListResult>>;

    /**
     * Gets all deployments for a remediation at resource group scope.
     *
     * @param {string} subscriptionId Microsoft Azure subscription ID.
     *
     * @param {string} resourceGroupName Resource group name.
     *
     * @param {string} remediationName The name of the remediation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.queryOptions] Additional parameters for the
     * operation
     *
     * @param {number} [options.queryOptions.top] Maximum number of records to
     * return.
     *
     * @param {string} [options.queryOptions.filter] OData filter expression.
     *
     * @param {string} [options.queryOptions.orderBy] Ordering expression using
     * OData notation. One or more comma-separated column names with an optional
     * "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId
     * asc".
     *
     * @param {string} [options.queryOptions.select] Select expression using OData
     * notation. Limits the columns on each record to just those requested, e.g.
     * "$select=PolicyAssignmentId, ResourceId".
     *
     * @param {date} [options.queryOptions.from] ISO 8601 formatted timestamp
     * specifying the start time of the interval to query. When not specified, the
     * service uses ($to - 1-day).
     *
     * @param {date} [options.queryOptions.to] ISO 8601 formatted timestamp
     * specifying the end time of the interval to query. When not specified, the
     * service uses request time.
     *
     * @param {string} [options.queryOptions.apply] OData apply expression for
     * aggregations.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RemediationDeploymentsListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RemediationDeploymentsListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RemediationDeploymentsListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listDeploymentsAtResourceGroup(subscriptionId: string, resourceGroupName: string, remediationName: string, options?: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }): Promise<models.RemediationDeploymentsListResult>;
    listDeploymentsAtResourceGroup(subscriptionId: string, resourceGroupName: string, remediationName: string, callback: ServiceCallback<models.RemediationDeploymentsListResult>): void;
    listDeploymentsAtResourceGroup(subscriptionId: string, resourceGroupName: string, remediationName: string, options: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RemediationDeploymentsListResult>): void;


    /**
     * Cancels a remediation at resource group scope.
     *
     * @param {string} subscriptionId Microsoft Azure subscription ID.
     *
     * @param {string} resourceGroupName Resource group name.
     *
     * @param {string} remediationName The name of the remediation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Remediation>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    cancelAtResourceGroupWithHttpOperationResponse(subscriptionId: string, resourceGroupName: string, remediationName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Remediation>>;

    /**
     * Cancels a remediation at resource group scope.
     *
     * @param {string} subscriptionId Microsoft Azure subscription ID.
     *
     * @param {string} resourceGroupName Resource group name.
     *
     * @param {string} remediationName The name of the remediation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Remediation} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Remediation} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Remediation} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    cancelAtResourceGroup(subscriptionId: string, resourceGroupName: string, remediationName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Remediation>;
    cancelAtResourceGroup(subscriptionId: string, resourceGroupName: string, remediationName: string, callback: ServiceCallback<models.Remediation>): void;
    cancelAtResourceGroup(subscriptionId: string, resourceGroupName: string, remediationName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Remediation>): void;


    /**
     * Gets all remediations for the subscription.
     *
     * @param {string} subscriptionId Microsoft Azure subscription ID.
     *
     * @param {string} resourceGroupName Resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.queryOptions] Additional parameters for the
     * operation
     *
     * @param {number} [options.queryOptions.top] Maximum number of records to
     * return.
     *
     * @param {string} [options.queryOptions.filter] OData filter expression.
     *
     * @param {string} [options.queryOptions.orderBy] Ordering expression using
     * OData notation. One or more comma-separated column names with an optional
     * "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId
     * asc".
     *
     * @param {string} [options.queryOptions.select] Select expression using OData
     * notation. Limits the columns on each record to just those requested, e.g.
     * "$select=PolicyAssignmentId, ResourceId".
     *
     * @param {date} [options.queryOptions.from] ISO 8601 formatted timestamp
     * specifying the start time of the interval to query. When not specified, the
     * service uses ($to - 1-day).
     *
     * @param {date} [options.queryOptions.to] ISO 8601 formatted timestamp
     * specifying the end time of the interval to query. When not specified, the
     * service uses request time.
     *
     * @param {string} [options.queryOptions.apply] OData apply expression for
     * aggregations.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RemediationListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listForResourceGroupWithHttpOperationResponse(subscriptionId: string, resourceGroupName: string, options?: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RemediationListResult>>;

    /**
     * Gets all remediations for the subscription.
     *
     * @param {string} subscriptionId Microsoft Azure subscription ID.
     *
     * @param {string} resourceGroupName Resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.queryOptions] Additional parameters for the
     * operation
     *
     * @param {number} [options.queryOptions.top] Maximum number of records to
     * return.
     *
     * @param {string} [options.queryOptions.filter] OData filter expression.
     *
     * @param {string} [options.queryOptions.orderBy] Ordering expression using
     * OData notation. One or more comma-separated column names with an optional
     * "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId
     * asc".
     *
     * @param {string} [options.queryOptions.select] Select expression using OData
     * notation. Limits the columns on each record to just those requested, e.g.
     * "$select=PolicyAssignmentId, ResourceId".
     *
     * @param {date} [options.queryOptions.from] ISO 8601 formatted timestamp
     * specifying the start time of the interval to query. When not specified, the
     * service uses ($to - 1-day).
     *
     * @param {date} [options.queryOptions.to] ISO 8601 formatted timestamp
     * specifying the end time of the interval to query. When not specified, the
     * service uses request time.
     *
     * @param {string} [options.queryOptions.apply] OData apply expression for
     * aggregations.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RemediationListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RemediationListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RemediationListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listForResourceGroup(subscriptionId: string, resourceGroupName: string, options?: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }): Promise<models.RemediationListResult>;
    listForResourceGroup(subscriptionId: string, resourceGroupName: string, callback: ServiceCallback<models.RemediationListResult>): void;
    listForResourceGroup(subscriptionId: string, resourceGroupName: string, options: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RemediationListResult>): void;


    /**
     * Creates or updates a remediation at resource group scope.
     *
     * @param {string} subscriptionId Microsoft Azure subscription ID.
     *
     * @param {string} resourceGroupName Resource group name.
     *
     * @param {string} remediationName The name of the remediation.
     *
     * @param {object} parameters The remediation parameters.
     *
     * @param {string} [parameters.policyAssignmentId] The resource ID of the
     * policy assignment that should be remediated.
     *
     * @param {string} [parameters.policyDefinitionReferenceId] The policy
     * definition reference ID of the individual definition that should be
     * remediated. Required when the policy assignment being remediated assigns a
     * policy set definition.
     *
     * @param {object} [parameters.filters] The filters that will be applied to
     * determine which resources to remediate.
     *
     * @param {array} [parameters.filters.locations] The resource locations that
     * will be remediated.
     *
     * @param {object} [parameters.deploymentStatus] The deployment status summary
     * for all deployments created by the remediation.
     *
     * @param {number} [parameters.deploymentStatus.totalDeployments] The number of
     * deployments required by the remediation.
     *
     * @param {number} [parameters.deploymentStatus.successfulDeployments] The
     * number of deployments required by the remediation that have succeeded.
     *
     * @param {number} [parameters.deploymentStatus.failedDeployments] The number
     * of deployments required by the remediation that have failed.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Remediation>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateAtResourceGroupWithHttpOperationResponse(subscriptionId: string, resourceGroupName: string, remediationName: string, parameters: models.Remediation, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Remediation>>;

    /**
     * Creates or updates a remediation at resource group scope.
     *
     * @param {string} subscriptionId Microsoft Azure subscription ID.
     *
     * @param {string} resourceGroupName Resource group name.
     *
     * @param {string} remediationName The name of the remediation.
     *
     * @param {object} parameters The remediation parameters.
     *
     * @param {string} [parameters.policyAssignmentId] The resource ID of the
     * policy assignment that should be remediated.
     *
     * @param {string} [parameters.policyDefinitionReferenceId] The policy
     * definition reference ID of the individual definition that should be
     * remediated. Required when the policy assignment being remediated assigns a
     * policy set definition.
     *
     * @param {object} [parameters.filters] The filters that will be applied to
     * determine which resources to remediate.
     *
     * @param {array} [parameters.filters.locations] The resource locations that
     * will be remediated.
     *
     * @param {object} [parameters.deploymentStatus] The deployment status summary
     * for all deployments created by the remediation.
     *
     * @param {number} [parameters.deploymentStatus.totalDeployments] The number of
     * deployments required by the remediation.
     *
     * @param {number} [parameters.deploymentStatus.successfulDeployments] The
     * number of deployments required by the remediation that have succeeded.
     *
     * @param {number} [parameters.deploymentStatus.failedDeployments] The number
     * of deployments required by the remediation that have failed.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Remediation} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Remediation} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Remediation} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdateAtResourceGroup(subscriptionId: string, resourceGroupName: string, remediationName: string, parameters: models.Remediation, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Remediation>;
    createOrUpdateAtResourceGroup(subscriptionId: string, resourceGroupName: string, remediationName: string, parameters: models.Remediation, callback: ServiceCallback<models.Remediation>): void;
    createOrUpdateAtResourceGroup(subscriptionId: string, resourceGroupName: string, remediationName: string, parameters: models.Remediation, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Remediation>): void;


    /**
     * Gets an existing remediation at resource group scope.
     *
     * @param {string} subscriptionId Microsoft Azure subscription ID.
     *
     * @param {string} resourceGroupName Resource group name.
     *
     * @param {string} remediationName The name of the remediation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Remediation>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getAtResourceGroupWithHttpOperationResponse(subscriptionId: string, resourceGroupName: string, remediationName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Remediation>>;

    /**
     * Gets an existing remediation at resource group scope.
     *
     * @param {string} subscriptionId Microsoft Azure subscription ID.
     *
     * @param {string} resourceGroupName Resource group name.
     *
     * @param {string} remediationName The name of the remediation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Remediation} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Remediation} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Remediation} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getAtResourceGroup(subscriptionId: string, resourceGroupName: string, remediationName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Remediation>;
    getAtResourceGroup(subscriptionId: string, resourceGroupName: string, remediationName: string, callback: ServiceCallback<models.Remediation>): void;
    getAtResourceGroup(subscriptionId: string, resourceGroupName: string, remediationName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Remediation>): void;


    /**
     * Deletes an existing remediation at resource group scope.
     *
     * @param {string} subscriptionId Microsoft Azure subscription ID.
     *
     * @param {string} resourceGroupName Resource group name.
     *
     * @param {string} remediationName The name of the remediation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Remediation>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteAtResourceGroupWithHttpOperationResponse(subscriptionId: string, resourceGroupName: string, remediationName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Remediation>>;

    /**
     * Deletes an existing remediation at resource group scope.
     *
     * @param {string} subscriptionId Microsoft Azure subscription ID.
     *
     * @param {string} resourceGroupName Resource group name.
     *
     * @param {string} remediationName The name of the remediation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Remediation} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Remediation} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Remediation} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteAtResourceGroup(subscriptionId: string, resourceGroupName: string, remediationName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Remediation>;
    deleteAtResourceGroup(subscriptionId: string, resourceGroupName: string, remediationName: string, callback: ServiceCallback<models.Remediation>): void;
    deleteAtResourceGroup(subscriptionId: string, resourceGroupName: string, remediationName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Remediation>): void;


    /**
     * Gets all deployments for a remediation at resource scope.
     *
     * @param {string} resourceId Resource ID.
     *
     * @param {string} remediationName The name of the remediation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.queryOptions] Additional parameters for the
     * operation
     *
     * @param {number} [options.queryOptions.top] Maximum number of records to
     * return.
     *
     * @param {string} [options.queryOptions.filter] OData filter expression.
     *
     * @param {string} [options.queryOptions.orderBy] Ordering expression using
     * OData notation. One or more comma-separated column names with an optional
     * "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId
     * asc".
     *
     * @param {string} [options.queryOptions.select] Select expression using OData
     * notation. Limits the columns on each record to just those requested, e.g.
     * "$select=PolicyAssignmentId, ResourceId".
     *
     * @param {date} [options.queryOptions.from] ISO 8601 formatted timestamp
     * specifying the start time of the interval to query. When not specified, the
     * service uses ($to - 1-day).
     *
     * @param {date} [options.queryOptions.to] ISO 8601 formatted timestamp
     * specifying the end time of the interval to query. When not specified, the
     * service uses request time.
     *
     * @param {string} [options.queryOptions.apply] OData apply expression for
     * aggregations.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RemediationDeploymentsListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listDeploymentsAtResourceWithHttpOperationResponse(resourceId: string, remediationName: string, options?: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RemediationDeploymentsListResult>>;

    /**
     * Gets all deployments for a remediation at resource scope.
     *
     * @param {string} resourceId Resource ID.
     *
     * @param {string} remediationName The name of the remediation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.queryOptions] Additional parameters for the
     * operation
     *
     * @param {number} [options.queryOptions.top] Maximum number of records to
     * return.
     *
     * @param {string} [options.queryOptions.filter] OData filter expression.
     *
     * @param {string} [options.queryOptions.orderBy] Ordering expression using
     * OData notation. One or more comma-separated column names with an optional
     * "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId
     * asc".
     *
     * @param {string} [options.queryOptions.select] Select expression using OData
     * notation. Limits the columns on each record to just those requested, e.g.
     * "$select=PolicyAssignmentId, ResourceId".
     *
     * @param {date} [options.queryOptions.from] ISO 8601 formatted timestamp
     * specifying the start time of the interval to query. When not specified, the
     * service uses ($to - 1-day).
     *
     * @param {date} [options.queryOptions.to] ISO 8601 formatted timestamp
     * specifying the end time of the interval to query. When not specified, the
     * service uses request time.
     *
     * @param {string} [options.queryOptions.apply] OData apply expression for
     * aggregations.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RemediationDeploymentsListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RemediationDeploymentsListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RemediationDeploymentsListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listDeploymentsAtResource(resourceId: string, remediationName: string, options?: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }): Promise<models.RemediationDeploymentsListResult>;
    listDeploymentsAtResource(resourceId: string, remediationName: string, callback: ServiceCallback<models.RemediationDeploymentsListResult>): void;
    listDeploymentsAtResource(resourceId: string, remediationName: string, options: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RemediationDeploymentsListResult>): void;


    /**
     * Cancel a remediation at resource scope.
     *
     * @param {string} resourceId Resource ID.
     *
     * @param {string} remediationName The name of the remediation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Remediation>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    cancelAtResourceWithHttpOperationResponse(resourceId: string, remediationName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Remediation>>;

    /**
     * Cancel a remediation at resource scope.
     *
     * @param {string} resourceId Resource ID.
     *
     * @param {string} remediationName The name of the remediation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Remediation} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Remediation} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Remediation} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    cancelAtResource(resourceId: string, remediationName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Remediation>;
    cancelAtResource(resourceId: string, remediationName: string, callback: ServiceCallback<models.Remediation>): void;
    cancelAtResource(resourceId: string, remediationName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Remediation>): void;


    /**
     * Gets all remediations for a resource.
     *
     * @param {string} resourceId Resource ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.queryOptions] Additional parameters for the
     * operation
     *
     * @param {number} [options.queryOptions.top] Maximum number of records to
     * return.
     *
     * @param {string} [options.queryOptions.filter] OData filter expression.
     *
     * @param {string} [options.queryOptions.orderBy] Ordering expression using
     * OData notation. One or more comma-separated column names with an optional
     * "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId
     * asc".
     *
     * @param {string} [options.queryOptions.select] Select expression using OData
     * notation. Limits the columns on each record to just those requested, e.g.
     * "$select=PolicyAssignmentId, ResourceId".
     *
     * @param {date} [options.queryOptions.from] ISO 8601 formatted timestamp
     * specifying the start time of the interval to query. When not specified, the
     * service uses ($to - 1-day).
     *
     * @param {date} [options.queryOptions.to] ISO 8601 formatted timestamp
     * specifying the end time of the interval to query. When not specified, the
     * service uses request time.
     *
     * @param {string} [options.queryOptions.apply] OData apply expression for
     * aggregations.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RemediationListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listForResourceWithHttpOperationResponse(resourceId: string, options?: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RemediationListResult>>;

    /**
     * Gets all remediations for a resource.
     *
     * @param {string} resourceId Resource ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.queryOptions] Additional parameters for the
     * operation
     *
     * @param {number} [options.queryOptions.top] Maximum number of records to
     * return.
     *
     * @param {string} [options.queryOptions.filter] OData filter expression.
     *
     * @param {string} [options.queryOptions.orderBy] Ordering expression using
     * OData notation. One or more comma-separated column names with an optional
     * "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId
     * asc".
     *
     * @param {string} [options.queryOptions.select] Select expression using OData
     * notation. Limits the columns on each record to just those requested, e.g.
     * "$select=PolicyAssignmentId, ResourceId".
     *
     * @param {date} [options.queryOptions.from] ISO 8601 formatted timestamp
     * specifying the start time of the interval to query. When not specified, the
     * service uses ($to - 1-day).
     *
     * @param {date} [options.queryOptions.to] ISO 8601 formatted timestamp
     * specifying the end time of the interval to query. When not specified, the
     * service uses request time.
     *
     * @param {string} [options.queryOptions.apply] OData apply expression for
     * aggregations.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RemediationListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RemediationListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RemediationListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listForResource(resourceId: string, options?: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }): Promise<models.RemediationListResult>;
    listForResource(resourceId: string, callback: ServiceCallback<models.RemediationListResult>): void;
    listForResource(resourceId: string, options: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RemediationListResult>): void;


    /**
     * Creates or updates a remediation at resource scope.
     *
     * @param {string} resourceId Resource ID.
     *
     * @param {string} remediationName The name of the remediation.
     *
     * @param {object} parameters The remediation parameters.
     *
     * @param {string} [parameters.policyAssignmentId] The resource ID of the
     * policy assignment that should be remediated.
     *
     * @param {string} [parameters.policyDefinitionReferenceId] The policy
     * definition reference ID of the individual definition that should be
     * remediated. Required when the policy assignment being remediated assigns a
     * policy set definition.
     *
     * @param {object} [parameters.filters] The filters that will be applied to
     * determine which resources to remediate.
     *
     * @param {array} [parameters.filters.locations] The resource locations that
     * will be remediated.
     *
     * @param {object} [parameters.deploymentStatus] The deployment status summary
     * for all deployments created by the remediation.
     *
     * @param {number} [parameters.deploymentStatus.totalDeployments] The number of
     * deployments required by the remediation.
     *
     * @param {number} [parameters.deploymentStatus.successfulDeployments] The
     * number of deployments required by the remediation that have succeeded.
     *
     * @param {number} [parameters.deploymentStatus.failedDeployments] The number
     * of deployments required by the remediation that have failed.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Remediation>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateAtResourceWithHttpOperationResponse(resourceId: string, remediationName: string, parameters: models.Remediation, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Remediation>>;

    /**
     * Creates or updates a remediation at resource scope.
     *
     * @param {string} resourceId Resource ID.
     *
     * @param {string} remediationName The name of the remediation.
     *
     * @param {object} parameters The remediation parameters.
     *
     * @param {string} [parameters.policyAssignmentId] The resource ID of the
     * policy assignment that should be remediated.
     *
     * @param {string} [parameters.policyDefinitionReferenceId] The policy
     * definition reference ID of the individual definition that should be
     * remediated. Required when the policy assignment being remediated assigns a
     * policy set definition.
     *
     * @param {object} [parameters.filters] The filters that will be applied to
     * determine which resources to remediate.
     *
     * @param {array} [parameters.filters.locations] The resource locations that
     * will be remediated.
     *
     * @param {object} [parameters.deploymentStatus] The deployment status summary
     * for all deployments created by the remediation.
     *
     * @param {number} [parameters.deploymentStatus.totalDeployments] The number of
     * deployments required by the remediation.
     *
     * @param {number} [parameters.deploymentStatus.successfulDeployments] The
     * number of deployments required by the remediation that have succeeded.
     *
     * @param {number} [parameters.deploymentStatus.failedDeployments] The number
     * of deployments required by the remediation that have failed.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Remediation} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Remediation} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Remediation} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdateAtResource(resourceId: string, remediationName: string, parameters: models.Remediation, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Remediation>;
    createOrUpdateAtResource(resourceId: string, remediationName: string, parameters: models.Remediation, callback: ServiceCallback<models.Remediation>): void;
    createOrUpdateAtResource(resourceId: string, remediationName: string, parameters: models.Remediation, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Remediation>): void;


    /**
     * Gets an existing remediation at resource scope.
     *
     * @param {string} resourceId Resource ID.
     *
     * @param {string} remediationName The name of the remediation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Remediation>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getAtResourceWithHttpOperationResponse(resourceId: string, remediationName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Remediation>>;

    /**
     * Gets an existing remediation at resource scope.
     *
     * @param {string} resourceId Resource ID.
     *
     * @param {string} remediationName The name of the remediation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Remediation} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Remediation} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Remediation} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getAtResource(resourceId: string, remediationName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Remediation>;
    getAtResource(resourceId: string, remediationName: string, callback: ServiceCallback<models.Remediation>): void;
    getAtResource(resourceId: string, remediationName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Remediation>): void;


    /**
     * Deletes an existing remediation at individual resource scope.
     *
     * @param {string} resourceId Resource ID.
     *
     * @param {string} remediationName The name of the remediation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Remediation>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteAtResourceWithHttpOperationResponse(resourceId: string, remediationName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Remediation>>;

    /**
     * Deletes an existing remediation at individual resource scope.
     *
     * @param {string} resourceId Resource ID.
     *
     * @param {string} remediationName The name of the remediation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Remediation} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Remediation} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Remediation} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteAtResource(resourceId: string, remediationName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Remediation>;
    deleteAtResource(resourceId: string, remediationName: string, callback: ServiceCallback<models.Remediation>): void;
    deleteAtResource(resourceId: string, remediationName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Remediation>): void;


    /**
     * Gets all deployments for a remediation at management group scope.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RemediationDeploymentsListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listDeploymentsAtManagementGroupNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RemediationDeploymentsListResult>>;

    /**
     * Gets all deployments for a remediation at management group scope.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RemediationDeploymentsListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RemediationDeploymentsListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RemediationDeploymentsListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listDeploymentsAtManagementGroupNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RemediationDeploymentsListResult>;
    listDeploymentsAtManagementGroupNext(nextPageLink: string, callback: ServiceCallback<models.RemediationDeploymentsListResult>): void;
    listDeploymentsAtManagementGroupNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RemediationDeploymentsListResult>): void;


    /**
     * Gets all remediations for the management group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RemediationListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listForManagementGroupNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RemediationListResult>>;

    /**
     * Gets all remediations for the management group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RemediationListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RemediationListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RemediationListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listForManagementGroupNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RemediationListResult>;
    listForManagementGroupNext(nextPageLink: string, callback: ServiceCallback<models.RemediationListResult>): void;
    listForManagementGroupNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RemediationListResult>): void;


    /**
     * Gets all deployments for a remediation at subscription scope.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RemediationDeploymentsListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listDeploymentsAtSubscriptionNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RemediationDeploymentsListResult>>;

    /**
     * Gets all deployments for a remediation at subscription scope.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RemediationDeploymentsListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RemediationDeploymentsListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RemediationDeploymentsListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listDeploymentsAtSubscriptionNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RemediationDeploymentsListResult>;
    listDeploymentsAtSubscriptionNext(nextPageLink: string, callback: ServiceCallback<models.RemediationDeploymentsListResult>): void;
    listDeploymentsAtSubscriptionNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RemediationDeploymentsListResult>): void;


    /**
     * Gets all remediations for the subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RemediationListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listForSubscriptionNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RemediationListResult>>;

    /**
     * Gets all remediations for the subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RemediationListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RemediationListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RemediationListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listForSubscriptionNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RemediationListResult>;
    listForSubscriptionNext(nextPageLink: string, callback: ServiceCallback<models.RemediationListResult>): void;
    listForSubscriptionNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RemediationListResult>): void;


    /**
     * Gets all deployments for a remediation at resource group scope.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RemediationDeploymentsListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listDeploymentsAtResourceGroupNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RemediationDeploymentsListResult>>;

    /**
     * Gets all deployments for a remediation at resource group scope.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RemediationDeploymentsListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RemediationDeploymentsListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RemediationDeploymentsListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listDeploymentsAtResourceGroupNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RemediationDeploymentsListResult>;
    listDeploymentsAtResourceGroupNext(nextPageLink: string, callback: ServiceCallback<models.RemediationDeploymentsListResult>): void;
    listDeploymentsAtResourceGroupNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RemediationDeploymentsListResult>): void;


    /**
     * Gets all remediations for the subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RemediationListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listForResourceGroupNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RemediationListResult>>;

    /**
     * Gets all remediations for the subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RemediationListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RemediationListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RemediationListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listForResourceGroupNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RemediationListResult>;
    listForResourceGroupNext(nextPageLink: string, callback: ServiceCallback<models.RemediationListResult>): void;
    listForResourceGroupNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RemediationListResult>): void;


    /**
     * Gets all deployments for a remediation at resource scope.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RemediationDeploymentsListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listDeploymentsAtResourceNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RemediationDeploymentsListResult>>;

    /**
     * Gets all deployments for a remediation at resource scope.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RemediationDeploymentsListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RemediationDeploymentsListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RemediationDeploymentsListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listDeploymentsAtResourceNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RemediationDeploymentsListResult>;
    listDeploymentsAtResourceNext(nextPageLink: string, callback: ServiceCallback<models.RemediationDeploymentsListResult>): void;
    listDeploymentsAtResourceNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RemediationDeploymentsListResult>): void;


    /**
     * Gets all remediations for a resource.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RemediationListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listForResourceNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RemediationListResult>>;

    /**
     * Gets all remediations for a resource.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RemediationListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RemediationListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RemediationListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listForResourceNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RemediationListResult>;
    listForResourceNext(nextPageLink: string, callback: ServiceCallback<models.RemediationListResult>): void;
    listForResourceNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RemediationListResult>): void;
}

/**
 * @class
 * PolicyEvents
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the PolicyInsightsClient.
 */
export interface PolicyEvents {


    /**
     * Queries policy events for the resources under the management group.
     *
     * @param {string} managementGroupName Management group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.queryOptions] Additional parameters for the
     * operation
     *
     * @param {number} [options.queryOptions.top] Maximum number of records to
     * return.
     *
     * @param {string} [options.queryOptions.filter] OData filter expression.
     *
     * @param {string} [options.queryOptions.orderBy] Ordering expression using
     * OData notation. One or more comma-separated column names with an optional
     * "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId
     * asc".
     *
     * @param {string} [options.queryOptions.select] Select expression using OData
     * notation. Limits the columns on each record to just those requested, e.g.
     * "$select=PolicyAssignmentId, ResourceId".
     *
     * @param {date} [options.queryOptions.from] ISO 8601 formatted timestamp
     * specifying the start time of the interval to query. When not specified, the
     * service uses ($to - 1-day).
     *
     * @param {date} [options.queryOptions.to] ISO 8601 formatted timestamp
     * specifying the end time of the interval to query. When not specified, the
     * service uses request time.
     *
     * @param {string} [options.queryOptions.apply] OData apply expression for
     * aggregations.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PolicyEventsQueryResults>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listQueryResultsForManagementGroupWithHttpOperationResponse(managementGroupName: string, options?: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PolicyEventsQueryResults>>;

    /**
     * Queries policy events for the resources under the management group.
     *
     * @param {string} managementGroupName Management group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.queryOptions] Additional parameters for the
     * operation
     *
     * @param {number} [options.queryOptions.top] Maximum number of records to
     * return.
     *
     * @param {string} [options.queryOptions.filter] OData filter expression.
     *
     * @param {string} [options.queryOptions.orderBy] Ordering expression using
     * OData notation. One or more comma-separated column names with an optional
     * "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId
     * asc".
     *
     * @param {string} [options.queryOptions.select] Select expression using OData
     * notation. Limits the columns on each record to just those requested, e.g.
     * "$select=PolicyAssignmentId, ResourceId".
     *
     * @param {date} [options.queryOptions.from] ISO 8601 formatted timestamp
     * specifying the start time of the interval to query. When not specified, the
     * service uses ($to - 1-day).
     *
     * @param {date} [options.queryOptions.to] ISO 8601 formatted timestamp
     * specifying the end time of the interval to query. When not specified, the
     * service uses request time.
     *
     * @param {string} [options.queryOptions.apply] OData apply expression for
     * aggregations.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PolicyEventsQueryResults} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PolicyEventsQueryResults} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PolicyEventsQueryResults} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listQueryResultsForManagementGroup(managementGroupName: string, options?: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }): Promise<models.PolicyEventsQueryResults>;
    listQueryResultsForManagementGroup(managementGroupName: string, callback: ServiceCallback<models.PolicyEventsQueryResults>): void;
    listQueryResultsForManagementGroup(managementGroupName: string, options: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PolicyEventsQueryResults>): void;


    /**
     * Queries policy events for the resources under the subscription.
     *
     * @param {string} subscriptionId Microsoft Azure subscription ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.queryOptions] Additional parameters for the
     * operation
     *
     * @param {number} [options.queryOptions.top] Maximum number of records to
     * return.
     *
     * @param {string} [options.queryOptions.filter] OData filter expression.
     *
     * @param {string} [options.queryOptions.orderBy] Ordering expression using
     * OData notation. One or more comma-separated column names with an optional
     * "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId
     * asc".
     *
     * @param {string} [options.queryOptions.select] Select expression using OData
     * notation. Limits the columns on each record to just those requested, e.g.
     * "$select=PolicyAssignmentId, ResourceId".
     *
     * @param {date} [options.queryOptions.from] ISO 8601 formatted timestamp
     * specifying the start time of the interval to query. When not specified, the
     * service uses ($to - 1-day).
     *
     * @param {date} [options.queryOptions.to] ISO 8601 formatted timestamp
     * specifying the end time of the interval to query. When not specified, the
     * service uses request time.
     *
     * @param {string} [options.queryOptions.apply] OData apply expression for
     * aggregations.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PolicyEventsQueryResults>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listQueryResultsForSubscriptionWithHttpOperationResponse(subscriptionId: string, options?: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PolicyEventsQueryResults>>;

    /**
     * Queries policy events for the resources under the subscription.
     *
     * @param {string} subscriptionId Microsoft Azure subscription ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.queryOptions] Additional parameters for the
     * operation
     *
     * @param {number} [options.queryOptions.top] Maximum number of records to
     * return.
     *
     * @param {string} [options.queryOptions.filter] OData filter expression.
     *
     * @param {string} [options.queryOptions.orderBy] Ordering expression using
     * OData notation. One or more comma-separated column names with an optional
     * "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId
     * asc".
     *
     * @param {string} [options.queryOptions.select] Select expression using OData
     * notation. Limits the columns on each record to just those requested, e.g.
     * "$select=PolicyAssignmentId, ResourceId".
     *
     * @param {date} [options.queryOptions.from] ISO 8601 formatted timestamp
     * specifying the start time of the interval to query. When not specified, the
     * service uses ($to - 1-day).
     *
     * @param {date} [options.queryOptions.to] ISO 8601 formatted timestamp
     * specifying the end time of the interval to query. When not specified, the
     * service uses request time.
     *
     * @param {string} [options.queryOptions.apply] OData apply expression for
     * aggregations.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PolicyEventsQueryResults} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PolicyEventsQueryResults} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PolicyEventsQueryResults} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listQueryResultsForSubscription(subscriptionId: string, options?: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }): Promise<models.PolicyEventsQueryResults>;
    listQueryResultsForSubscription(subscriptionId: string, callback: ServiceCallback<models.PolicyEventsQueryResults>): void;
    listQueryResultsForSubscription(subscriptionId: string, options: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PolicyEventsQueryResults>): void;


    /**
     * Queries policy events for the resources under the resource group.
     *
     * @param {string} subscriptionId Microsoft Azure subscription ID.
     *
     * @param {string} resourceGroupName Resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.queryOptions] Additional parameters for the
     * operation
     *
     * @param {number} [options.queryOptions.top] Maximum number of records to
     * return.
     *
     * @param {string} [options.queryOptions.filter] OData filter expression.
     *
     * @param {string} [options.queryOptions.orderBy] Ordering expression using
     * OData notation. One or more comma-separated column names with an optional
     * "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId
     * asc".
     *
     * @param {string} [options.queryOptions.select] Select expression using OData
     * notation. Limits the columns on each record to just those requested, e.g.
     * "$select=PolicyAssignmentId, ResourceId".
     *
     * @param {date} [options.queryOptions.from] ISO 8601 formatted timestamp
     * specifying the start time of the interval to query. When not specified, the
     * service uses ($to - 1-day).
     *
     * @param {date} [options.queryOptions.to] ISO 8601 formatted timestamp
     * specifying the end time of the interval to query. When not specified, the
     * service uses request time.
     *
     * @param {string} [options.queryOptions.apply] OData apply expression for
     * aggregations.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PolicyEventsQueryResults>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listQueryResultsForResourceGroupWithHttpOperationResponse(subscriptionId: string, resourceGroupName: string, options?: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PolicyEventsQueryResults>>;

    /**
     * Queries policy events for the resources under the resource group.
     *
     * @param {string} subscriptionId Microsoft Azure subscription ID.
     *
     * @param {string} resourceGroupName Resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.queryOptions] Additional parameters for the
     * operation
     *
     * @param {number} [options.queryOptions.top] Maximum number of records to
     * return.
     *
     * @param {string} [options.queryOptions.filter] OData filter expression.
     *
     * @param {string} [options.queryOptions.orderBy] Ordering expression using
     * OData notation. One or more comma-separated column names with an optional
     * "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId
     * asc".
     *
     * @param {string} [options.queryOptions.select] Select expression using OData
     * notation. Limits the columns on each record to just those requested, e.g.
     * "$select=PolicyAssignmentId, ResourceId".
     *
     * @param {date} [options.queryOptions.from] ISO 8601 formatted timestamp
     * specifying the start time of the interval to query. When not specified, the
     * service uses ($to - 1-day).
     *
     * @param {date} [options.queryOptions.to] ISO 8601 formatted timestamp
     * specifying the end time of the interval to query. When not specified, the
     * service uses request time.
     *
     * @param {string} [options.queryOptions.apply] OData apply expression for
     * aggregations.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PolicyEventsQueryResults} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PolicyEventsQueryResults} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PolicyEventsQueryResults} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listQueryResultsForResourceGroup(subscriptionId: string, resourceGroupName: string, options?: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }): Promise<models.PolicyEventsQueryResults>;
    listQueryResultsForResourceGroup(subscriptionId: string, resourceGroupName: string, callback: ServiceCallback<models.PolicyEventsQueryResults>): void;
    listQueryResultsForResourceGroup(subscriptionId: string, resourceGroupName: string, options: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PolicyEventsQueryResults>): void;


    /**
     * Queries policy events for the resource.
     *
     * @param {string} resourceId Resource ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.queryOptions] Additional parameters for the
     * operation
     *
     * @param {number} [options.queryOptions.top] Maximum number of records to
     * return.
     *
     * @param {string} [options.queryOptions.filter] OData filter expression.
     *
     * @param {string} [options.queryOptions.orderBy] Ordering expression using
     * OData notation. One or more comma-separated column names with an optional
     * "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId
     * asc".
     *
     * @param {string} [options.queryOptions.select] Select expression using OData
     * notation. Limits the columns on each record to just those requested, e.g.
     * "$select=PolicyAssignmentId, ResourceId".
     *
     * @param {date} [options.queryOptions.from] ISO 8601 formatted timestamp
     * specifying the start time of the interval to query. When not specified, the
     * service uses ($to - 1-day).
     *
     * @param {date} [options.queryOptions.to] ISO 8601 formatted timestamp
     * specifying the end time of the interval to query. When not specified, the
     * service uses request time.
     *
     * @param {string} [options.queryOptions.apply] OData apply expression for
     * aggregations.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PolicyEventsQueryResults>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listQueryResultsForResourceWithHttpOperationResponse(resourceId: string, options?: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PolicyEventsQueryResults>>;

    /**
     * Queries policy events for the resource.
     *
     * @param {string} resourceId Resource ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.queryOptions] Additional parameters for the
     * operation
     *
     * @param {number} [options.queryOptions.top] Maximum number of records to
     * return.
     *
     * @param {string} [options.queryOptions.filter] OData filter expression.
     *
     * @param {string} [options.queryOptions.orderBy] Ordering expression using
     * OData notation. One or more comma-separated column names with an optional
     * "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId
     * asc".
     *
     * @param {string} [options.queryOptions.select] Select expression using OData
     * notation. Limits the columns on each record to just those requested, e.g.
     * "$select=PolicyAssignmentId, ResourceId".
     *
     * @param {date} [options.queryOptions.from] ISO 8601 formatted timestamp
     * specifying the start time of the interval to query. When not specified, the
     * service uses ($to - 1-day).
     *
     * @param {date} [options.queryOptions.to] ISO 8601 formatted timestamp
     * specifying the end time of the interval to query. When not specified, the
     * service uses request time.
     *
     * @param {string} [options.queryOptions.apply] OData apply expression for
     * aggregations.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PolicyEventsQueryResults} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PolicyEventsQueryResults} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PolicyEventsQueryResults} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listQueryResultsForResource(resourceId: string, options?: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }): Promise<models.PolicyEventsQueryResults>;
    listQueryResultsForResource(resourceId: string, callback: ServiceCallback<models.PolicyEventsQueryResults>): void;
    listQueryResultsForResource(resourceId: string, options: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PolicyEventsQueryResults>): void;


    /**
     * Queries policy events for the subscription level policy set definition.
     *
     * @param {string} subscriptionId Microsoft Azure subscription ID.
     *
     * @param {string} policySetDefinitionName Policy set definition name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.queryOptions] Additional parameters for the
     * operation
     *
     * @param {number} [options.queryOptions.top] Maximum number of records to
     * return.
     *
     * @param {string} [options.queryOptions.filter] OData filter expression.
     *
     * @param {string} [options.queryOptions.orderBy] Ordering expression using
     * OData notation. One or more comma-separated column names with an optional
     * "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId
     * asc".
     *
     * @param {string} [options.queryOptions.select] Select expression using OData
     * notation. Limits the columns on each record to just those requested, e.g.
     * "$select=PolicyAssignmentId, ResourceId".
     *
     * @param {date} [options.queryOptions.from] ISO 8601 formatted timestamp
     * specifying the start time of the interval to query. When not specified, the
     * service uses ($to - 1-day).
     *
     * @param {date} [options.queryOptions.to] ISO 8601 formatted timestamp
     * specifying the end time of the interval to query. When not specified, the
     * service uses request time.
     *
     * @param {string} [options.queryOptions.apply] OData apply expression for
     * aggregations.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PolicyEventsQueryResults>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listQueryResultsForPolicySetDefinitionWithHttpOperationResponse(subscriptionId: string, policySetDefinitionName: string, options?: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PolicyEventsQueryResults>>;

    /**
     * Queries policy events for the subscription level policy set definition.
     *
     * @param {string} subscriptionId Microsoft Azure subscription ID.
     *
     * @param {string} policySetDefinitionName Policy set definition name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.queryOptions] Additional parameters for the
     * operation
     *
     * @param {number} [options.queryOptions.top] Maximum number of records to
     * return.
     *
     * @param {string} [options.queryOptions.filter] OData filter expression.
     *
     * @param {string} [options.queryOptions.orderBy] Ordering expression using
     * OData notation. One or more comma-separated column names with an optional
     * "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId
     * asc".
     *
     * @param {string} [options.queryOptions.select] Select expression using OData
     * notation. Limits the columns on each record to just those requested, e.g.
     * "$select=PolicyAssignmentId, ResourceId".
     *
     * @param {date} [options.queryOptions.from] ISO 8601 formatted timestamp
     * specifying the start time of the interval to query. When not specified, the
     * service uses ($to - 1-day).
     *
     * @param {date} [options.queryOptions.to] ISO 8601 formatted timestamp
     * specifying the end time of the interval to query. When not specified, the
     * service uses request time.
     *
     * @param {string} [options.queryOptions.apply] OData apply expression for
     * aggregations.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PolicyEventsQueryResults} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PolicyEventsQueryResults} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PolicyEventsQueryResults} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listQueryResultsForPolicySetDefinition(subscriptionId: string, policySetDefinitionName: string, options?: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }): Promise<models.PolicyEventsQueryResults>;
    listQueryResultsForPolicySetDefinition(subscriptionId: string, policySetDefinitionName: string, callback: ServiceCallback<models.PolicyEventsQueryResults>): void;
    listQueryResultsForPolicySetDefinition(subscriptionId: string, policySetDefinitionName: string, options: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PolicyEventsQueryResults>): void;


    /**
     * Queries policy events for the subscription level policy definition.
     *
     * @param {string} subscriptionId Microsoft Azure subscription ID.
     *
     * @param {string} policyDefinitionName Policy definition name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.queryOptions] Additional parameters for the
     * operation
     *
     * @param {number} [options.queryOptions.top] Maximum number of records to
     * return.
     *
     * @param {string} [options.queryOptions.filter] OData filter expression.
     *
     * @param {string} [options.queryOptions.orderBy] Ordering expression using
     * OData notation. One or more comma-separated column names with an optional
     * "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId
     * asc".
     *
     * @param {string} [options.queryOptions.select] Select expression using OData
     * notation. Limits the columns on each record to just those requested, e.g.
     * "$select=PolicyAssignmentId, ResourceId".
     *
     * @param {date} [options.queryOptions.from] ISO 8601 formatted timestamp
     * specifying the start time of the interval to query. When not specified, the
     * service uses ($to - 1-day).
     *
     * @param {date} [options.queryOptions.to] ISO 8601 formatted timestamp
     * specifying the end time of the interval to query. When not specified, the
     * service uses request time.
     *
     * @param {string} [options.queryOptions.apply] OData apply expression for
     * aggregations.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PolicyEventsQueryResults>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listQueryResultsForPolicyDefinitionWithHttpOperationResponse(subscriptionId: string, policyDefinitionName: string, options?: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PolicyEventsQueryResults>>;

    /**
     * Queries policy events for the subscription level policy definition.
     *
     * @param {string} subscriptionId Microsoft Azure subscription ID.
     *
     * @param {string} policyDefinitionName Policy definition name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.queryOptions] Additional parameters for the
     * operation
     *
     * @param {number} [options.queryOptions.top] Maximum number of records to
     * return.
     *
     * @param {string} [options.queryOptions.filter] OData filter expression.
     *
     * @param {string} [options.queryOptions.orderBy] Ordering expression using
     * OData notation. One or more comma-separated column names with an optional
     * "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId
     * asc".
     *
     * @param {string} [options.queryOptions.select] Select expression using OData
     * notation. Limits the columns on each record to just those requested, e.g.
     * "$select=PolicyAssignmentId, ResourceId".
     *
     * @param {date} [options.queryOptions.from] ISO 8601 formatted timestamp
     * specifying the start time of the interval to query. When not specified, the
     * service uses ($to - 1-day).
     *
     * @param {date} [options.queryOptions.to] ISO 8601 formatted timestamp
     * specifying the end time of the interval to query. When not specified, the
     * service uses request time.
     *
     * @param {string} [options.queryOptions.apply] OData apply expression for
     * aggregations.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PolicyEventsQueryResults} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PolicyEventsQueryResults} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PolicyEventsQueryResults} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listQueryResultsForPolicyDefinition(subscriptionId: string, policyDefinitionName: string, options?: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }): Promise<models.PolicyEventsQueryResults>;
    listQueryResultsForPolicyDefinition(subscriptionId: string, policyDefinitionName: string, callback: ServiceCallback<models.PolicyEventsQueryResults>): void;
    listQueryResultsForPolicyDefinition(subscriptionId: string, policyDefinitionName: string, options: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PolicyEventsQueryResults>): void;


    /**
     * Queries policy events for the subscription level policy assignment.
     *
     * @param {string} subscriptionId Microsoft Azure subscription ID.
     *
     * @param {string} policyAssignmentName Policy assignment name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.queryOptions] Additional parameters for the
     * operation
     *
     * @param {number} [options.queryOptions.top] Maximum number of records to
     * return.
     *
     * @param {string} [options.queryOptions.filter] OData filter expression.
     *
     * @param {string} [options.queryOptions.orderBy] Ordering expression using
     * OData notation. One or more comma-separated column names with an optional
     * "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId
     * asc".
     *
     * @param {string} [options.queryOptions.select] Select expression using OData
     * notation. Limits the columns on each record to just those requested, e.g.
     * "$select=PolicyAssignmentId, ResourceId".
     *
     * @param {date} [options.queryOptions.from] ISO 8601 formatted timestamp
     * specifying the start time of the interval to query. When not specified, the
     * service uses ($to - 1-day).
     *
     * @param {date} [options.queryOptions.to] ISO 8601 formatted timestamp
     * specifying the end time of the interval to query. When not specified, the
     * service uses request time.
     *
     * @param {string} [options.queryOptions.apply] OData apply expression for
     * aggregations.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PolicyEventsQueryResults>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listQueryResultsForSubscriptionLevelPolicyAssignmentWithHttpOperationResponse(subscriptionId: string, policyAssignmentName: string, options?: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PolicyEventsQueryResults>>;

    /**
     * Queries policy events for the subscription level policy assignment.
     *
     * @param {string} subscriptionId Microsoft Azure subscription ID.
     *
     * @param {string} policyAssignmentName Policy assignment name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.queryOptions] Additional parameters for the
     * operation
     *
     * @param {number} [options.queryOptions.top] Maximum number of records to
     * return.
     *
     * @param {string} [options.queryOptions.filter] OData filter expression.
     *
     * @param {string} [options.queryOptions.orderBy] Ordering expression using
     * OData notation. One or more comma-separated column names with an optional
     * "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId
     * asc".
     *
     * @param {string} [options.queryOptions.select] Select expression using OData
     * notation. Limits the columns on each record to just those requested, e.g.
     * "$select=PolicyAssignmentId, ResourceId".
     *
     * @param {date} [options.queryOptions.from] ISO 8601 formatted timestamp
     * specifying the start time of the interval to query. When not specified, the
     * service uses ($to - 1-day).
     *
     * @param {date} [options.queryOptions.to] ISO 8601 formatted timestamp
     * specifying the end time of the interval to query. When not specified, the
     * service uses request time.
     *
     * @param {string} [options.queryOptions.apply] OData apply expression for
     * aggregations.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PolicyEventsQueryResults} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PolicyEventsQueryResults} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PolicyEventsQueryResults} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listQueryResultsForSubscriptionLevelPolicyAssignment(subscriptionId: string, policyAssignmentName: string, options?: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }): Promise<models.PolicyEventsQueryResults>;
    listQueryResultsForSubscriptionLevelPolicyAssignment(subscriptionId: string, policyAssignmentName: string, callback: ServiceCallback<models.PolicyEventsQueryResults>): void;
    listQueryResultsForSubscriptionLevelPolicyAssignment(subscriptionId: string, policyAssignmentName: string, options: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PolicyEventsQueryResults>): void;


    /**
     * Queries policy events for the resource group level policy assignment.
     *
     * @param {string} subscriptionId Microsoft Azure subscription ID.
     *
     * @param {string} resourceGroupName Resource group name.
     *
     * @param {string} policyAssignmentName Policy assignment name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.queryOptions] Additional parameters for the
     * operation
     *
     * @param {number} [options.queryOptions.top] Maximum number of records to
     * return.
     *
     * @param {string} [options.queryOptions.filter] OData filter expression.
     *
     * @param {string} [options.queryOptions.orderBy] Ordering expression using
     * OData notation. One or more comma-separated column names with an optional
     * "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId
     * asc".
     *
     * @param {string} [options.queryOptions.select] Select expression using OData
     * notation. Limits the columns on each record to just those requested, e.g.
     * "$select=PolicyAssignmentId, ResourceId".
     *
     * @param {date} [options.queryOptions.from] ISO 8601 formatted timestamp
     * specifying the start time of the interval to query. When not specified, the
     * service uses ($to - 1-day).
     *
     * @param {date} [options.queryOptions.to] ISO 8601 formatted timestamp
     * specifying the end time of the interval to query. When not specified, the
     * service uses request time.
     *
     * @param {string} [options.queryOptions.apply] OData apply expression for
     * aggregations.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PolicyEventsQueryResults>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listQueryResultsForResourceGroupLevelPolicyAssignmentWithHttpOperationResponse(subscriptionId: string, resourceGroupName: string, policyAssignmentName: string, options?: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PolicyEventsQueryResults>>;

    /**
     * Queries policy events for the resource group level policy assignment.
     *
     * @param {string} subscriptionId Microsoft Azure subscription ID.
     *
     * @param {string} resourceGroupName Resource group name.
     *
     * @param {string} policyAssignmentName Policy assignment name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.queryOptions] Additional parameters for the
     * operation
     *
     * @param {number} [options.queryOptions.top] Maximum number of records to
     * return.
     *
     * @param {string} [options.queryOptions.filter] OData filter expression.
     *
     * @param {string} [options.queryOptions.orderBy] Ordering expression using
     * OData notation. One or more comma-separated column names with an optional
     * "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId
     * asc".
     *
     * @param {string} [options.queryOptions.select] Select expression using OData
     * notation. Limits the columns on each record to just those requested, e.g.
     * "$select=PolicyAssignmentId, ResourceId".
     *
     * @param {date} [options.queryOptions.from] ISO 8601 formatted timestamp
     * specifying the start time of the interval to query. When not specified, the
     * service uses ($to - 1-day).
     *
     * @param {date} [options.queryOptions.to] ISO 8601 formatted timestamp
     * specifying the end time of the interval to query. When not specified, the
     * service uses request time.
     *
     * @param {string} [options.queryOptions.apply] OData apply expression for
     * aggregations.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PolicyEventsQueryResults} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PolicyEventsQueryResults} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PolicyEventsQueryResults} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listQueryResultsForResourceGroupLevelPolicyAssignment(subscriptionId: string, resourceGroupName: string, policyAssignmentName: string, options?: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }): Promise<models.PolicyEventsQueryResults>;
    listQueryResultsForResourceGroupLevelPolicyAssignment(subscriptionId: string, resourceGroupName: string, policyAssignmentName: string, callback: ServiceCallback<models.PolicyEventsQueryResults>): void;
    listQueryResultsForResourceGroupLevelPolicyAssignment(subscriptionId: string, resourceGroupName: string, policyAssignmentName: string, options: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PolicyEventsQueryResults>): void;


    /**
     * Gets OData metadata XML document.
     *
     * @param {string} scope A valid scope, i.e. management group, subscription,
     * resource group, or resource ID. Scope used has no effect on metadata
     * returned.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<String>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getMetadataWithHttpOperationResponse(scope: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<string>>;

    /**
     * Gets OData metadata XML document.
     *
     * @param {string} scope A valid scope, i.e. management group, subscription,
     * resource group, or resource ID. Scope used has no effect on metadata
     * returned.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {String} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {String} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getMetadata(scope: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<string>;
    getMetadata(scope: string, callback: ServiceCallback<string>): void;
    getMetadata(scope: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;
}

/**
 * @class
 * PolicyStates
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the PolicyInsightsClient.
 */
export interface PolicyStates {


    /**
     * Queries policy states for the resources under the management group.
     *
     * @param {string} policyStatesResource The virtual resource under PolicyStates
     * resource type. In a given time range, 'latest' represents the latest policy
     * state(s), whereas 'default' represents all policy state(s). Possible values
     * include: 'default', 'latest'
     *
     * @param {string} managementGroupName Management group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.queryOptions] Additional parameters for the
     * operation
     *
     * @param {number} [options.queryOptions.top] Maximum number of records to
     * return.
     *
     * @param {string} [options.queryOptions.filter] OData filter expression.
     *
     * @param {string} [options.queryOptions.orderBy] Ordering expression using
     * OData notation. One or more comma-separated column names with an optional
     * "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId
     * asc".
     *
     * @param {string} [options.queryOptions.select] Select expression using OData
     * notation. Limits the columns on each record to just those requested, e.g.
     * "$select=PolicyAssignmentId, ResourceId".
     *
     * @param {date} [options.queryOptions.from] ISO 8601 formatted timestamp
     * specifying the start time of the interval to query. When not specified, the
     * service uses ($to - 1-day).
     *
     * @param {date} [options.queryOptions.to] ISO 8601 formatted timestamp
     * specifying the end time of the interval to query. When not specified, the
     * service uses request time.
     *
     * @param {string} [options.queryOptions.apply] OData apply expression for
     * aggregations.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PolicyStatesQueryResults>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listQueryResultsForManagementGroupWithHttpOperationResponse(policyStatesResource: string, managementGroupName: string, options?: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PolicyStatesQueryResults>>;

    /**
     * Queries policy states for the resources under the management group.
     *
     * @param {string} policyStatesResource The virtual resource under PolicyStates
     * resource type. In a given time range, 'latest' represents the latest policy
     * state(s), whereas 'default' represents all policy state(s). Possible values
     * include: 'default', 'latest'
     *
     * @param {string} managementGroupName Management group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.queryOptions] Additional parameters for the
     * operation
     *
     * @param {number} [options.queryOptions.top] Maximum number of records to
     * return.
     *
     * @param {string} [options.queryOptions.filter] OData filter expression.
     *
     * @param {string} [options.queryOptions.orderBy] Ordering expression using
     * OData notation. One or more comma-separated column names with an optional
     * "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId
     * asc".
     *
     * @param {string} [options.queryOptions.select] Select expression using OData
     * notation. Limits the columns on each record to just those requested, e.g.
     * "$select=PolicyAssignmentId, ResourceId".
     *
     * @param {date} [options.queryOptions.from] ISO 8601 formatted timestamp
     * specifying the start time of the interval to query. When not specified, the
     * service uses ($to - 1-day).
     *
     * @param {date} [options.queryOptions.to] ISO 8601 formatted timestamp
     * specifying the end time of the interval to query. When not specified, the
     * service uses request time.
     *
     * @param {string} [options.queryOptions.apply] OData apply expression for
     * aggregations.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PolicyStatesQueryResults} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PolicyStatesQueryResults} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PolicyStatesQueryResults} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listQueryResultsForManagementGroup(policyStatesResource: string, managementGroupName: string, options?: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }): Promise<models.PolicyStatesQueryResults>;
    listQueryResultsForManagementGroup(policyStatesResource: string, managementGroupName: string, callback: ServiceCallback<models.PolicyStatesQueryResults>): void;
    listQueryResultsForManagementGroup(policyStatesResource: string, managementGroupName: string, options: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PolicyStatesQueryResults>): void;


    /**
     * Summarizes policy states for the resources under the management group.
     *
     * @param {string} managementGroupName Management group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.queryOptions] Additional parameters for the
     * operation
     *
     * @param {number} [options.queryOptions.top] Maximum number of records to
     * return.
     *
     * @param {string} [options.queryOptions.filter] OData filter expression.
     *
     * @param {string} [options.queryOptions.orderBy] Ordering expression using
     * OData notation. One or more comma-separated column names with an optional
     * "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId
     * asc".
     *
     * @param {string} [options.queryOptions.select] Select expression using OData
     * notation. Limits the columns on each record to just those requested, e.g.
     * "$select=PolicyAssignmentId, ResourceId".
     *
     * @param {date} [options.queryOptions.from] ISO 8601 formatted timestamp
     * specifying the start time of the interval to query. When not specified, the
     * service uses ($to - 1-day).
     *
     * @param {date} [options.queryOptions.to] ISO 8601 formatted timestamp
     * specifying the end time of the interval to query. When not specified, the
     * service uses request time.
     *
     * @param {string} [options.queryOptions.apply] OData apply expression for
     * aggregations.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SummarizeResults>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    summarizeForManagementGroupWithHttpOperationResponse(managementGroupName: string, options?: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SummarizeResults>>;

    /**
     * Summarizes policy states for the resources under the management group.
     *
     * @param {string} managementGroupName Management group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.queryOptions] Additional parameters for the
     * operation
     *
     * @param {number} [options.queryOptions.top] Maximum number of records to
     * return.
     *
     * @param {string} [options.queryOptions.filter] OData filter expression.
     *
     * @param {string} [options.queryOptions.orderBy] Ordering expression using
     * OData notation. One or more comma-separated column names with an optional
     * "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId
     * asc".
     *
     * @param {string} [options.queryOptions.select] Select expression using OData
     * notation. Limits the columns on each record to just those requested, e.g.
     * "$select=PolicyAssignmentId, ResourceId".
     *
     * @param {date} [options.queryOptions.from] ISO 8601 formatted timestamp
     * specifying the start time of the interval to query. When not specified, the
     * service uses ($to - 1-day).
     *
     * @param {date} [options.queryOptions.to] ISO 8601 formatted timestamp
     * specifying the end time of the interval to query. When not specified, the
     * service uses request time.
     *
     * @param {string} [options.queryOptions.apply] OData apply expression for
     * aggregations.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SummarizeResults} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SummarizeResults} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SummarizeResults} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    summarizeForManagementGroup(managementGroupName: string, options?: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }): Promise<models.SummarizeResults>;
    summarizeForManagementGroup(managementGroupName: string, callback: ServiceCallback<models.SummarizeResults>): void;
    summarizeForManagementGroup(managementGroupName: string, options: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SummarizeResults>): void;


    /**
     * Queries policy states for the resources under the subscription.
     *
     * @param {string} policyStatesResource The virtual resource under PolicyStates
     * resource type. In a given time range, 'latest' represents the latest policy
     * state(s), whereas 'default' represents all policy state(s). Possible values
     * include: 'default', 'latest'
     *
     * @param {string} subscriptionId Microsoft Azure subscription ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.queryOptions] Additional parameters for the
     * operation
     *
     * @param {number} [options.queryOptions.top] Maximum number of records to
     * return.
     *
     * @param {string} [options.queryOptions.filter] OData filter expression.
     *
     * @param {string} [options.queryOptions.orderBy] Ordering expression using
     * OData notation. One or more comma-separated column names with an optional
     * "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId
     * asc".
     *
     * @param {string} [options.queryOptions.select] Select expression using OData
     * notation. Limits the columns on each record to just those requested, e.g.
     * "$select=PolicyAssignmentId, ResourceId".
     *
     * @param {date} [options.queryOptions.from] ISO 8601 formatted timestamp
     * specifying the start time of the interval to query. When not specified, the
     * service uses ($to - 1-day).
     *
     * @param {date} [options.queryOptions.to] ISO 8601 formatted timestamp
     * specifying the end time of the interval to query. When not specified, the
     * service uses request time.
     *
     * @param {string} [options.queryOptions.apply] OData apply expression for
     * aggregations.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PolicyStatesQueryResults>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listQueryResultsForSubscriptionWithHttpOperationResponse(policyStatesResource: string, subscriptionId: string, options?: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PolicyStatesQueryResults>>;

    /**
     * Queries policy states for the resources under the subscription.
     *
     * @param {string} policyStatesResource The virtual resource under PolicyStates
     * resource type. In a given time range, 'latest' represents the latest policy
     * state(s), whereas 'default' represents all policy state(s). Possible values
     * include: 'default', 'latest'
     *
     * @param {string} subscriptionId Microsoft Azure subscription ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.queryOptions] Additional parameters for the
     * operation
     *
     * @param {number} [options.queryOptions.top] Maximum number of records to
     * return.
     *
     * @param {string} [options.queryOptions.filter] OData filter expression.
     *
     * @param {string} [options.queryOptions.orderBy] Ordering expression using
     * OData notation. One or more comma-separated column names with an optional
     * "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId
     * asc".
     *
     * @param {string} [options.queryOptions.select] Select expression using OData
     * notation. Limits the columns on each record to just those requested, e.g.
     * "$select=PolicyAssignmentId, ResourceId".
     *
     * @param {date} [options.queryOptions.from] ISO 8601 formatted timestamp
     * specifying the start time of the interval to query. When not specified, the
     * service uses ($to - 1-day).
     *
     * @param {date} [options.queryOptions.to] ISO 8601 formatted timestamp
     * specifying the end time of the interval to query. When not specified, the
     * service uses request time.
     *
     * @param {string} [options.queryOptions.apply] OData apply expression for
     * aggregations.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PolicyStatesQueryResults} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PolicyStatesQueryResults} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PolicyStatesQueryResults} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listQueryResultsForSubscription(policyStatesResource: string, subscriptionId: string, options?: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }): Promise<models.PolicyStatesQueryResults>;
    listQueryResultsForSubscription(policyStatesResource: string, subscriptionId: string, callback: ServiceCallback<models.PolicyStatesQueryResults>): void;
    listQueryResultsForSubscription(policyStatesResource: string, subscriptionId: string, options: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PolicyStatesQueryResults>): void;


    /**
     * Summarizes policy states for the resources under the subscription.
     *
     * @param {string} subscriptionId Microsoft Azure subscription ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.queryOptions] Additional parameters for the
     * operation
     *
     * @param {number} [options.queryOptions.top] Maximum number of records to
     * return.
     *
     * @param {string} [options.queryOptions.filter] OData filter expression.
     *
     * @param {string} [options.queryOptions.orderBy] Ordering expression using
     * OData notation. One or more comma-separated column names with an optional
     * "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId
     * asc".
     *
     * @param {string} [options.queryOptions.select] Select expression using OData
     * notation. Limits the columns on each record to just those requested, e.g.
     * "$select=PolicyAssignmentId, ResourceId".
     *
     * @param {date} [options.queryOptions.from] ISO 8601 formatted timestamp
     * specifying the start time of the interval to query. When not specified, the
     * service uses ($to - 1-day).
     *
     * @param {date} [options.queryOptions.to] ISO 8601 formatted timestamp
     * specifying the end time of the interval to query. When not specified, the
     * service uses request time.
     *
     * @param {string} [options.queryOptions.apply] OData apply expression for
     * aggregations.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SummarizeResults>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    summarizeForSubscriptionWithHttpOperationResponse(subscriptionId: string, options?: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SummarizeResults>>;

    /**
     * Summarizes policy states for the resources under the subscription.
     *
     * @param {string} subscriptionId Microsoft Azure subscription ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.queryOptions] Additional parameters for the
     * operation
     *
     * @param {number} [options.queryOptions.top] Maximum number of records to
     * return.
     *
     * @param {string} [options.queryOptions.filter] OData filter expression.
     *
     * @param {string} [options.queryOptions.orderBy] Ordering expression using
     * OData notation. One or more comma-separated column names with an optional
     * "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId
     * asc".
     *
     * @param {string} [options.queryOptions.select] Select expression using OData
     * notation. Limits the columns on each record to just those requested, e.g.
     * "$select=PolicyAssignmentId, ResourceId".
     *
     * @param {date} [options.queryOptions.from] ISO 8601 formatted timestamp
     * specifying the start time of the interval to query. When not specified, the
     * service uses ($to - 1-day).
     *
     * @param {date} [options.queryOptions.to] ISO 8601 formatted timestamp
     * specifying the end time of the interval to query. When not specified, the
     * service uses request time.
     *
     * @param {string} [options.queryOptions.apply] OData apply expression for
     * aggregations.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SummarizeResults} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SummarizeResults} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SummarizeResults} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    summarizeForSubscription(subscriptionId: string, options?: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }): Promise<models.SummarizeResults>;
    summarizeForSubscription(subscriptionId: string, callback: ServiceCallback<models.SummarizeResults>): void;
    summarizeForSubscription(subscriptionId: string, options: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SummarizeResults>): void;


    /**
     * Queries policy states for the resources under the resource group.
     *
     * @param {string} policyStatesResource The virtual resource under PolicyStates
     * resource type. In a given time range, 'latest' represents the latest policy
     * state(s), whereas 'default' represents all policy state(s). Possible values
     * include: 'default', 'latest'
     *
     * @param {string} subscriptionId Microsoft Azure subscription ID.
     *
     * @param {string} resourceGroupName Resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.queryOptions] Additional parameters for the
     * operation
     *
     * @param {number} [options.queryOptions.top] Maximum number of records to
     * return.
     *
     * @param {string} [options.queryOptions.filter] OData filter expression.
     *
     * @param {string} [options.queryOptions.orderBy] Ordering expression using
     * OData notation. One or more comma-separated column names with an optional
     * "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId
     * asc".
     *
     * @param {string} [options.queryOptions.select] Select expression using OData
     * notation. Limits the columns on each record to just those requested, e.g.
     * "$select=PolicyAssignmentId, ResourceId".
     *
     * @param {date} [options.queryOptions.from] ISO 8601 formatted timestamp
     * specifying the start time of the interval to query. When not specified, the
     * service uses ($to - 1-day).
     *
     * @param {date} [options.queryOptions.to] ISO 8601 formatted timestamp
     * specifying the end time of the interval to query. When not specified, the
     * service uses request time.
     *
     * @param {string} [options.queryOptions.apply] OData apply expression for
     * aggregations.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PolicyStatesQueryResults>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listQueryResultsForResourceGroupWithHttpOperationResponse(policyStatesResource: string, subscriptionId: string, resourceGroupName: string, options?: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PolicyStatesQueryResults>>;

    /**
     * Queries policy states for the resources under the resource group.
     *
     * @param {string} policyStatesResource The virtual resource under PolicyStates
     * resource type. In a given time range, 'latest' represents the latest policy
     * state(s), whereas 'default' represents all policy state(s). Possible values
     * include: 'default', 'latest'
     *
     * @param {string} subscriptionId Microsoft Azure subscription ID.
     *
     * @param {string} resourceGroupName Resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.queryOptions] Additional parameters for the
     * operation
     *
     * @param {number} [options.queryOptions.top] Maximum number of records to
     * return.
     *
     * @param {string} [options.queryOptions.filter] OData filter expression.
     *
     * @param {string} [options.queryOptions.orderBy] Ordering expression using
     * OData notation. One or more comma-separated column names with an optional
     * "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId
     * asc".
     *
     * @param {string} [options.queryOptions.select] Select expression using OData
     * notation. Limits the columns on each record to just those requested, e.g.
     * "$select=PolicyAssignmentId, ResourceId".
     *
     * @param {date} [options.queryOptions.from] ISO 8601 formatted timestamp
     * specifying the start time of the interval to query. When not specified, the
     * service uses ($to - 1-day).
     *
     * @param {date} [options.queryOptions.to] ISO 8601 formatted timestamp
     * specifying the end time of the interval to query. When not specified, the
     * service uses request time.
     *
     * @param {string} [options.queryOptions.apply] OData apply expression for
     * aggregations.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PolicyStatesQueryResults} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PolicyStatesQueryResults} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PolicyStatesQueryResults} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listQueryResultsForResourceGroup(policyStatesResource: string, subscriptionId: string, resourceGroupName: string, options?: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }): Promise<models.PolicyStatesQueryResults>;
    listQueryResultsForResourceGroup(policyStatesResource: string, subscriptionId: string, resourceGroupName: string, callback: ServiceCallback<models.PolicyStatesQueryResults>): void;
    listQueryResultsForResourceGroup(policyStatesResource: string, subscriptionId: string, resourceGroupName: string, options: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PolicyStatesQueryResults>): void;


    /**
     * Summarizes policy states for the resources under the resource group.
     *
     * @param {string} subscriptionId Microsoft Azure subscription ID.
     *
     * @param {string} resourceGroupName Resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.queryOptions] Additional parameters for the
     * operation
     *
     * @param {number} [options.queryOptions.top] Maximum number of records to
     * return.
     *
     * @param {string} [options.queryOptions.filter] OData filter expression.
     *
     * @param {string} [options.queryOptions.orderBy] Ordering expression using
     * OData notation. One or more comma-separated column names with an optional
     * "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId
     * asc".
     *
     * @param {string} [options.queryOptions.select] Select expression using OData
     * notation. Limits the columns on each record to just those requested, e.g.
     * "$select=PolicyAssignmentId, ResourceId".
     *
     * @param {date} [options.queryOptions.from] ISO 8601 formatted timestamp
     * specifying the start time of the interval to query. When not specified, the
     * service uses ($to - 1-day).
     *
     * @param {date} [options.queryOptions.to] ISO 8601 formatted timestamp
     * specifying the end time of the interval to query. When not specified, the
     * service uses request time.
     *
     * @param {string} [options.queryOptions.apply] OData apply expression for
     * aggregations.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SummarizeResults>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    summarizeForResourceGroupWithHttpOperationResponse(subscriptionId: string, resourceGroupName: string, options?: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SummarizeResults>>;

    /**
     * Summarizes policy states for the resources under the resource group.
     *
     * @param {string} subscriptionId Microsoft Azure subscription ID.
     *
     * @param {string} resourceGroupName Resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.queryOptions] Additional parameters for the
     * operation
     *
     * @param {number} [options.queryOptions.top] Maximum number of records to
     * return.
     *
     * @param {string} [options.queryOptions.filter] OData filter expression.
     *
     * @param {string} [options.queryOptions.orderBy] Ordering expression using
     * OData notation. One or more comma-separated column names with an optional
     * "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId
     * asc".
     *
     * @param {string} [options.queryOptions.select] Select expression using OData
     * notation. Limits the columns on each record to just those requested, e.g.
     * "$select=PolicyAssignmentId, ResourceId".
     *
     * @param {date} [options.queryOptions.from] ISO 8601 formatted timestamp
     * specifying the start time of the interval to query. When not specified, the
     * service uses ($to - 1-day).
     *
     * @param {date} [options.queryOptions.to] ISO 8601 formatted timestamp
     * specifying the end time of the interval to query. When not specified, the
     * service uses request time.
     *
     * @param {string} [options.queryOptions.apply] OData apply expression for
     * aggregations.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SummarizeResults} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SummarizeResults} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SummarizeResults} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    summarizeForResourceGroup(subscriptionId: string, resourceGroupName: string, options?: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }): Promise<models.SummarizeResults>;
    summarizeForResourceGroup(subscriptionId: string, resourceGroupName: string, callback: ServiceCallback<models.SummarizeResults>): void;
    summarizeForResourceGroup(subscriptionId: string, resourceGroupName: string, options: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SummarizeResults>): void;


    /**
     * Queries policy states for the resource.
     *
     * @param {string} policyStatesResource The virtual resource under PolicyStates
     * resource type. In a given time range, 'latest' represents the latest policy
     * state(s), whereas 'default' represents all policy state(s). Possible values
     * include: 'default', 'latest'
     *
     * @param {string} resourceId Resource ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.queryOptions] Additional parameters for the
     * operation
     *
     * @param {number} [options.queryOptions.top] Maximum number of records to
     * return.
     *
     * @param {string} [options.queryOptions.filter] OData filter expression.
     *
     * @param {string} [options.queryOptions.orderBy] Ordering expression using
     * OData notation. One or more comma-separated column names with an optional
     * "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId
     * asc".
     *
     * @param {string} [options.queryOptions.select] Select expression using OData
     * notation. Limits the columns on each record to just those requested, e.g.
     * "$select=PolicyAssignmentId, ResourceId".
     *
     * @param {date} [options.queryOptions.from] ISO 8601 formatted timestamp
     * specifying the start time of the interval to query. When not specified, the
     * service uses ($to - 1-day).
     *
     * @param {date} [options.queryOptions.to] ISO 8601 formatted timestamp
     * specifying the end time of the interval to query. When not specified, the
     * service uses request time.
     *
     * @param {string} [options.queryOptions.apply] OData apply expression for
     * aggregations.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PolicyStatesQueryResults>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listQueryResultsForResourceWithHttpOperationResponse(policyStatesResource: string, resourceId: string, options?: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PolicyStatesQueryResults>>;

    /**
     * Queries policy states for the resource.
     *
     * @param {string} policyStatesResource The virtual resource under PolicyStates
     * resource type. In a given time range, 'latest' represents the latest policy
     * state(s), whereas 'default' represents all policy state(s). Possible values
     * include: 'default', 'latest'
     *
     * @param {string} resourceId Resource ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.queryOptions] Additional parameters for the
     * operation
     *
     * @param {number} [options.queryOptions.top] Maximum number of records to
     * return.
     *
     * @param {string} [options.queryOptions.filter] OData filter expression.
     *
     * @param {string} [options.queryOptions.orderBy] Ordering expression using
     * OData notation. One or more comma-separated column names with an optional
     * "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId
     * asc".
     *
     * @param {string} [options.queryOptions.select] Select expression using OData
     * notation. Limits the columns on each record to just those requested, e.g.
     * "$select=PolicyAssignmentId, ResourceId".
     *
     * @param {date} [options.queryOptions.from] ISO 8601 formatted timestamp
     * specifying the start time of the interval to query. When not specified, the
     * service uses ($to - 1-day).
     *
     * @param {date} [options.queryOptions.to] ISO 8601 formatted timestamp
     * specifying the end time of the interval to query. When not specified, the
     * service uses request time.
     *
     * @param {string} [options.queryOptions.apply] OData apply expression for
     * aggregations.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PolicyStatesQueryResults} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PolicyStatesQueryResults} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PolicyStatesQueryResults} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listQueryResultsForResource(policyStatesResource: string, resourceId: string, options?: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }): Promise<models.PolicyStatesQueryResults>;
    listQueryResultsForResource(policyStatesResource: string, resourceId: string, callback: ServiceCallback<models.PolicyStatesQueryResults>): void;
    listQueryResultsForResource(policyStatesResource: string, resourceId: string, options: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PolicyStatesQueryResults>): void;


    /**
     * Summarizes policy states for the resource.
     *
     * @param {string} resourceId Resource ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.queryOptions] Additional parameters for the
     * operation
     *
     * @param {number} [options.queryOptions.top] Maximum number of records to
     * return.
     *
     * @param {string} [options.queryOptions.filter] OData filter expression.
     *
     * @param {string} [options.queryOptions.orderBy] Ordering expression using
     * OData notation. One or more comma-separated column names with an optional
     * "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId
     * asc".
     *
     * @param {string} [options.queryOptions.select] Select expression using OData
     * notation. Limits the columns on each record to just those requested, e.g.
     * "$select=PolicyAssignmentId, ResourceId".
     *
     * @param {date} [options.queryOptions.from] ISO 8601 formatted timestamp
     * specifying the start time of the interval to query. When not specified, the
     * service uses ($to - 1-day).
     *
     * @param {date} [options.queryOptions.to] ISO 8601 formatted timestamp
     * specifying the end time of the interval to query. When not specified, the
     * service uses request time.
     *
     * @param {string} [options.queryOptions.apply] OData apply expression for
     * aggregations.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SummarizeResults>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    summarizeForResourceWithHttpOperationResponse(resourceId: string, options?: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SummarizeResults>>;

    /**
     * Summarizes policy states for the resource.
     *
     * @param {string} resourceId Resource ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.queryOptions] Additional parameters for the
     * operation
     *
     * @param {number} [options.queryOptions.top] Maximum number of records to
     * return.
     *
     * @param {string} [options.queryOptions.filter] OData filter expression.
     *
     * @param {string} [options.queryOptions.orderBy] Ordering expression using
     * OData notation. One or more comma-separated column names with an optional
     * "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId
     * asc".
     *
     * @param {string} [options.queryOptions.select] Select expression using OData
     * notation. Limits the columns on each record to just those requested, e.g.
     * "$select=PolicyAssignmentId, ResourceId".
     *
     * @param {date} [options.queryOptions.from] ISO 8601 formatted timestamp
     * specifying the start time of the interval to query. When not specified, the
     * service uses ($to - 1-day).
     *
     * @param {date} [options.queryOptions.to] ISO 8601 formatted timestamp
     * specifying the end time of the interval to query. When not specified, the
     * service uses request time.
     *
     * @param {string} [options.queryOptions.apply] OData apply expression for
     * aggregations.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SummarizeResults} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SummarizeResults} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SummarizeResults} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    summarizeForResource(resourceId: string, options?: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }): Promise<models.SummarizeResults>;
    summarizeForResource(resourceId: string, callback: ServiceCallback<models.SummarizeResults>): void;
    summarizeForResource(resourceId: string, options: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SummarizeResults>): void;


    /**
     * Queries policy states for the subscription level policy set definition.
     *
     * @param {string} policyStatesResource The virtual resource under PolicyStates
     * resource type. In a given time range, 'latest' represents the latest policy
     * state(s), whereas 'default' represents all policy state(s). Possible values
     * include: 'default', 'latest'
     *
     * @param {string} subscriptionId Microsoft Azure subscription ID.
     *
     * @param {string} policySetDefinitionName Policy set definition name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.queryOptions] Additional parameters for the
     * operation
     *
     * @param {number} [options.queryOptions.top] Maximum number of records to
     * return.
     *
     * @param {string} [options.queryOptions.filter] OData filter expression.
     *
     * @param {string} [options.queryOptions.orderBy] Ordering expression using
     * OData notation. One or more comma-separated column names with an optional
     * "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId
     * asc".
     *
     * @param {string} [options.queryOptions.select] Select expression using OData
     * notation. Limits the columns on each record to just those requested, e.g.
     * "$select=PolicyAssignmentId, ResourceId".
     *
     * @param {date} [options.queryOptions.from] ISO 8601 formatted timestamp
     * specifying the start time of the interval to query. When not specified, the
     * service uses ($to - 1-day).
     *
     * @param {date} [options.queryOptions.to] ISO 8601 formatted timestamp
     * specifying the end time of the interval to query. When not specified, the
     * service uses request time.
     *
     * @param {string} [options.queryOptions.apply] OData apply expression for
     * aggregations.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PolicyStatesQueryResults>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listQueryResultsForPolicySetDefinitionWithHttpOperationResponse(policyStatesResource: string, subscriptionId: string, policySetDefinitionName: string, options?: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PolicyStatesQueryResults>>;

    /**
     * Queries policy states for the subscription level policy set definition.
     *
     * @param {string} policyStatesResource The virtual resource under PolicyStates
     * resource type. In a given time range, 'latest' represents the latest policy
     * state(s), whereas 'default' represents all policy state(s). Possible values
     * include: 'default', 'latest'
     *
     * @param {string} subscriptionId Microsoft Azure subscription ID.
     *
     * @param {string} policySetDefinitionName Policy set definition name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.queryOptions] Additional parameters for the
     * operation
     *
     * @param {number} [options.queryOptions.top] Maximum number of records to
     * return.
     *
     * @param {string} [options.queryOptions.filter] OData filter expression.
     *
     * @param {string} [options.queryOptions.orderBy] Ordering expression using
     * OData notation. One or more comma-separated column names with an optional
     * "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId
     * asc".
     *
     * @param {string} [options.queryOptions.select] Select expression using OData
     * notation. Limits the columns on each record to just those requested, e.g.
     * "$select=PolicyAssignmentId, ResourceId".
     *
     * @param {date} [options.queryOptions.from] ISO 8601 formatted timestamp
     * specifying the start time of the interval to query. When not specified, the
     * service uses ($to - 1-day).
     *
     * @param {date} [options.queryOptions.to] ISO 8601 formatted timestamp
     * specifying the end time of the interval to query. When not specified, the
     * service uses request time.
     *
     * @param {string} [options.queryOptions.apply] OData apply expression for
     * aggregations.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PolicyStatesQueryResults} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PolicyStatesQueryResults} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PolicyStatesQueryResults} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listQueryResultsForPolicySetDefinition(policyStatesResource: string, subscriptionId: string, policySetDefinitionName: string, options?: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }): Promise<models.PolicyStatesQueryResults>;
    listQueryResultsForPolicySetDefinition(policyStatesResource: string, subscriptionId: string, policySetDefinitionName: string, callback: ServiceCallback<models.PolicyStatesQueryResults>): void;
    listQueryResultsForPolicySetDefinition(policyStatesResource: string, subscriptionId: string, policySetDefinitionName: string, options: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PolicyStatesQueryResults>): void;


    /**
     * Summarizes policy states for the subscription level policy set definition.
     *
     * @param {string} subscriptionId Microsoft Azure subscription ID.
     *
     * @param {string} policySetDefinitionName Policy set definition name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.queryOptions] Additional parameters for the
     * operation
     *
     * @param {number} [options.queryOptions.top] Maximum number of records to
     * return.
     *
     * @param {string} [options.queryOptions.filter] OData filter expression.
     *
     * @param {string} [options.queryOptions.orderBy] Ordering expression using
     * OData notation. One or more comma-separated column names with an optional
     * "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId
     * asc".
     *
     * @param {string} [options.queryOptions.select] Select expression using OData
     * notation. Limits the columns on each record to just those requested, e.g.
     * "$select=PolicyAssignmentId, ResourceId".
     *
     * @param {date} [options.queryOptions.from] ISO 8601 formatted timestamp
     * specifying the start time of the interval to query. When not specified, the
     * service uses ($to - 1-day).
     *
     * @param {date} [options.queryOptions.to] ISO 8601 formatted timestamp
     * specifying the end time of the interval to query. When not specified, the
     * service uses request time.
     *
     * @param {string} [options.queryOptions.apply] OData apply expression for
     * aggregations.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SummarizeResults>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    summarizeForPolicySetDefinitionWithHttpOperationResponse(subscriptionId: string, policySetDefinitionName: string, options?: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SummarizeResults>>;

    /**
     * Summarizes policy states for the subscription level policy set definition.
     *
     * @param {string} subscriptionId Microsoft Azure subscription ID.
     *
     * @param {string} policySetDefinitionName Policy set definition name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.queryOptions] Additional parameters for the
     * operation
     *
     * @param {number} [options.queryOptions.top] Maximum number of records to
     * return.
     *
     * @param {string} [options.queryOptions.filter] OData filter expression.
     *
     * @param {string} [options.queryOptions.orderBy] Ordering expression using
     * OData notation. One or more comma-separated column names with an optional
     * "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId
     * asc".
     *
     * @param {string} [options.queryOptions.select] Select expression using OData
     * notation. Limits the columns on each record to just those requested, e.g.
     * "$select=PolicyAssignmentId, ResourceId".
     *
     * @param {date} [options.queryOptions.from] ISO 8601 formatted timestamp
     * specifying the start time of the interval to query. When not specified, the
     * service uses ($to - 1-day).
     *
     * @param {date} [options.queryOptions.to] ISO 8601 formatted timestamp
     * specifying the end time of the interval to query. When not specified, the
     * service uses request time.
     *
     * @param {string} [options.queryOptions.apply] OData apply expression for
     * aggregations.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SummarizeResults} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SummarizeResults} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SummarizeResults} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    summarizeForPolicySetDefinition(subscriptionId: string, policySetDefinitionName: string, options?: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }): Promise<models.SummarizeResults>;
    summarizeForPolicySetDefinition(subscriptionId: string, policySetDefinitionName: string, callback: ServiceCallback<models.SummarizeResults>): void;
    summarizeForPolicySetDefinition(subscriptionId: string, policySetDefinitionName: string, options: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SummarizeResults>): void;


    /**
     * Queries policy states for the subscription level policy definition.
     *
     * @param {string} policyStatesResource The virtual resource under PolicyStates
     * resource type. In a given time range, 'latest' represents the latest policy
     * state(s), whereas 'default' represents all policy state(s). Possible values
     * include: 'default', 'latest'
     *
     * @param {string} subscriptionId Microsoft Azure subscription ID.
     *
     * @param {string} policyDefinitionName Policy definition name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.queryOptions] Additional parameters for the
     * operation
     *
     * @param {number} [options.queryOptions.top] Maximum number of records to
     * return.
     *
     * @param {string} [options.queryOptions.filter] OData filter expression.
     *
     * @param {string} [options.queryOptions.orderBy] Ordering expression using
     * OData notation. One or more comma-separated column names with an optional
     * "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId
     * asc".
     *
     * @param {string} [options.queryOptions.select] Select expression using OData
     * notation. Limits the columns on each record to just those requested, e.g.
     * "$select=PolicyAssignmentId, ResourceId".
     *
     * @param {date} [options.queryOptions.from] ISO 8601 formatted timestamp
     * specifying the start time of the interval to query. When not specified, the
     * service uses ($to - 1-day).
     *
     * @param {date} [options.queryOptions.to] ISO 8601 formatted timestamp
     * specifying the end time of the interval to query. When not specified, the
     * service uses request time.
     *
     * @param {string} [options.queryOptions.apply] OData apply expression for
     * aggregations.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PolicyStatesQueryResults>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listQueryResultsForPolicyDefinitionWithHttpOperationResponse(policyStatesResource: string, subscriptionId: string, policyDefinitionName: string, options?: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PolicyStatesQueryResults>>;

    /**
     * Queries policy states for the subscription level policy definition.
     *
     * @param {string} policyStatesResource The virtual resource under PolicyStates
     * resource type. In a given time range, 'latest' represents the latest policy
     * state(s), whereas 'default' represents all policy state(s). Possible values
     * include: 'default', 'latest'
     *
     * @param {string} subscriptionId Microsoft Azure subscription ID.
     *
     * @param {string} policyDefinitionName Policy definition name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.queryOptions] Additional parameters for the
     * operation
     *
     * @param {number} [options.queryOptions.top] Maximum number of records to
     * return.
     *
     * @param {string} [options.queryOptions.filter] OData filter expression.
     *
     * @param {string} [options.queryOptions.orderBy] Ordering expression using
     * OData notation. One or more comma-separated column names with an optional
     * "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId
     * asc".
     *
     * @param {string} [options.queryOptions.select] Select expression using OData
     * notation. Limits the columns on each record to just those requested, e.g.
     * "$select=PolicyAssignmentId, ResourceId".
     *
     * @param {date} [options.queryOptions.from] ISO 8601 formatted timestamp
     * specifying the start time of the interval to query. When not specified, the
     * service uses ($to - 1-day).
     *
     * @param {date} [options.queryOptions.to] ISO 8601 formatted timestamp
     * specifying the end time of the interval to query. When not specified, the
     * service uses request time.
     *
     * @param {string} [options.queryOptions.apply] OData apply expression for
     * aggregations.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PolicyStatesQueryResults} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PolicyStatesQueryResults} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PolicyStatesQueryResults} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listQueryResultsForPolicyDefinition(policyStatesResource: string, subscriptionId: string, policyDefinitionName: string, options?: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }): Promise<models.PolicyStatesQueryResults>;
    listQueryResultsForPolicyDefinition(policyStatesResource: string, subscriptionId: string, policyDefinitionName: string, callback: ServiceCallback<models.PolicyStatesQueryResults>): void;
    listQueryResultsForPolicyDefinition(policyStatesResource: string, subscriptionId: string, policyDefinitionName: string, options: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PolicyStatesQueryResults>): void;


    /**
     * Summarizes policy states for the subscription level policy definition.
     *
     * @param {string} subscriptionId Microsoft Azure subscription ID.
     *
     * @param {string} policyDefinitionName Policy definition name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.queryOptions] Additional parameters for the
     * operation
     *
     * @param {number} [options.queryOptions.top] Maximum number of records to
     * return.
     *
     * @param {string} [options.queryOptions.filter] OData filter expression.
     *
     * @param {string} [options.queryOptions.orderBy] Ordering expression using
     * OData notation. One or more comma-separated column names with an optional
     * "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId
     * asc".
     *
     * @param {string} [options.queryOptions.select] Select expression using OData
     * notation. Limits the columns on each record to just those requested, e.g.
     * "$select=PolicyAssignmentId, ResourceId".
     *
     * @param {date} [options.queryOptions.from] ISO 8601 formatted timestamp
     * specifying the start time of the interval to query. When not specified, the
     * service uses ($to - 1-day).
     *
     * @param {date} [options.queryOptions.to] ISO 8601 formatted timestamp
     * specifying the end time of the interval to query. When not specified, the
     * service uses request time.
     *
     * @param {string} [options.queryOptions.apply] OData apply expression for
     * aggregations.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SummarizeResults>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    summarizeForPolicyDefinitionWithHttpOperationResponse(subscriptionId: string, policyDefinitionName: string, options?: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SummarizeResults>>;

    /**
     * Summarizes policy states for the subscription level policy definition.
     *
     * @param {string} subscriptionId Microsoft Azure subscription ID.
     *
     * @param {string} policyDefinitionName Policy definition name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.queryOptions] Additional parameters for the
     * operation
     *
     * @param {number} [options.queryOptions.top] Maximum number of records to
     * return.
     *
     * @param {string} [options.queryOptions.filter] OData filter expression.
     *
     * @param {string} [options.queryOptions.orderBy] Ordering expression using
     * OData notation. One or more comma-separated column names with an optional
     * "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId
     * asc".
     *
     * @param {string} [options.queryOptions.select] Select expression using OData
     * notation. Limits the columns on each record to just those requested, e.g.
     * "$select=PolicyAssignmentId, ResourceId".
     *
     * @param {date} [options.queryOptions.from] ISO 8601 formatted timestamp
     * specifying the start time of the interval to query. When not specified, the
     * service uses ($to - 1-day).
     *
     * @param {date} [options.queryOptions.to] ISO 8601 formatted timestamp
     * specifying the end time of the interval to query. When not specified, the
     * service uses request time.
     *
     * @param {string} [options.queryOptions.apply] OData apply expression for
     * aggregations.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SummarizeResults} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SummarizeResults} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SummarizeResults} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    summarizeForPolicyDefinition(subscriptionId: string, policyDefinitionName: string, options?: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }): Promise<models.SummarizeResults>;
    summarizeForPolicyDefinition(subscriptionId: string, policyDefinitionName: string, callback: ServiceCallback<models.SummarizeResults>): void;
    summarizeForPolicyDefinition(subscriptionId: string, policyDefinitionName: string, options: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SummarizeResults>): void;


    /**
     * Queries policy states for the subscription level policy assignment.
     *
     * @param {string} policyStatesResource The virtual resource under PolicyStates
     * resource type. In a given time range, 'latest' represents the latest policy
     * state(s), whereas 'default' represents all policy state(s). Possible values
     * include: 'default', 'latest'
     *
     * @param {string} subscriptionId Microsoft Azure subscription ID.
     *
     * @param {string} policyAssignmentName Policy assignment name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.queryOptions] Additional parameters for the
     * operation
     *
     * @param {number} [options.queryOptions.top] Maximum number of records to
     * return.
     *
     * @param {string} [options.queryOptions.filter] OData filter expression.
     *
     * @param {string} [options.queryOptions.orderBy] Ordering expression using
     * OData notation. One or more comma-separated column names with an optional
     * "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId
     * asc".
     *
     * @param {string} [options.queryOptions.select] Select expression using OData
     * notation. Limits the columns on each record to just those requested, e.g.
     * "$select=PolicyAssignmentId, ResourceId".
     *
     * @param {date} [options.queryOptions.from] ISO 8601 formatted timestamp
     * specifying the start time of the interval to query. When not specified, the
     * service uses ($to - 1-day).
     *
     * @param {date} [options.queryOptions.to] ISO 8601 formatted timestamp
     * specifying the end time of the interval to query. When not specified, the
     * service uses request time.
     *
     * @param {string} [options.queryOptions.apply] OData apply expression for
     * aggregations.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PolicyStatesQueryResults>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listQueryResultsForSubscriptionLevelPolicyAssignmentWithHttpOperationResponse(policyStatesResource: string, subscriptionId: string, policyAssignmentName: string, options?: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PolicyStatesQueryResults>>;

    /**
     * Queries policy states for the subscription level policy assignment.
     *
     * @param {string} policyStatesResource The virtual resource under PolicyStates
     * resource type. In a given time range, 'latest' represents the latest policy
     * state(s), whereas 'default' represents all policy state(s). Possible values
     * include: 'default', 'latest'
     *
     * @param {string} subscriptionId Microsoft Azure subscription ID.
     *
     * @param {string} policyAssignmentName Policy assignment name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.queryOptions] Additional parameters for the
     * operation
     *
     * @param {number} [options.queryOptions.top] Maximum number of records to
     * return.
     *
     * @param {string} [options.queryOptions.filter] OData filter expression.
     *
     * @param {string} [options.queryOptions.orderBy] Ordering expression using
     * OData notation. One or more comma-separated column names with an optional
     * "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId
     * asc".
     *
     * @param {string} [options.queryOptions.select] Select expression using OData
     * notation. Limits the columns on each record to just those requested, e.g.
     * "$select=PolicyAssignmentId, ResourceId".
     *
     * @param {date} [options.queryOptions.from] ISO 8601 formatted timestamp
     * specifying the start time of the interval to query. When not specified, the
     * service uses ($to - 1-day).
     *
     * @param {date} [options.queryOptions.to] ISO 8601 formatted timestamp
     * specifying the end time of the interval to query. When not specified, the
     * service uses request time.
     *
     * @param {string} [options.queryOptions.apply] OData apply expression for
     * aggregations.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PolicyStatesQueryResults} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PolicyStatesQueryResults} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PolicyStatesQueryResults} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listQueryResultsForSubscriptionLevelPolicyAssignment(policyStatesResource: string, subscriptionId: string, policyAssignmentName: string, options?: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }): Promise<models.PolicyStatesQueryResults>;
    listQueryResultsForSubscriptionLevelPolicyAssignment(policyStatesResource: string, subscriptionId: string, policyAssignmentName: string, callback: ServiceCallback<models.PolicyStatesQueryResults>): void;
    listQueryResultsForSubscriptionLevelPolicyAssignment(policyStatesResource: string, subscriptionId: string, policyAssignmentName: string, options: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PolicyStatesQueryResults>): void;


    /**
     * Summarizes policy states for the subscription level policy assignment.
     *
     * @param {string} subscriptionId Microsoft Azure subscription ID.
     *
     * @param {string} policyAssignmentName Policy assignment name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.queryOptions] Additional parameters for the
     * operation
     *
     * @param {number} [options.queryOptions.top] Maximum number of records to
     * return.
     *
     * @param {string} [options.queryOptions.filter] OData filter expression.
     *
     * @param {string} [options.queryOptions.orderBy] Ordering expression using
     * OData notation. One or more comma-separated column names with an optional
     * "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId
     * asc".
     *
     * @param {string} [options.queryOptions.select] Select expression using OData
     * notation. Limits the columns on each record to just those requested, e.g.
     * "$select=PolicyAssignmentId, ResourceId".
     *
     * @param {date} [options.queryOptions.from] ISO 8601 formatted timestamp
     * specifying the start time of the interval to query. When not specified, the
     * service uses ($to - 1-day).
     *
     * @param {date} [options.queryOptions.to] ISO 8601 formatted timestamp
     * specifying the end time of the interval to query. When not specified, the
     * service uses request time.
     *
     * @param {string} [options.queryOptions.apply] OData apply expression for
     * aggregations.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SummarizeResults>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    summarizeForSubscriptionLevelPolicyAssignmentWithHttpOperationResponse(subscriptionId: string, policyAssignmentName: string, options?: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SummarizeResults>>;

    /**
     * Summarizes policy states for the subscription level policy assignment.
     *
     * @param {string} subscriptionId Microsoft Azure subscription ID.
     *
     * @param {string} policyAssignmentName Policy assignment name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.queryOptions] Additional parameters for the
     * operation
     *
     * @param {number} [options.queryOptions.top] Maximum number of records to
     * return.
     *
     * @param {string} [options.queryOptions.filter] OData filter expression.
     *
     * @param {string} [options.queryOptions.orderBy] Ordering expression using
     * OData notation. One or more comma-separated column names with an optional
     * "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId
     * asc".
     *
     * @param {string} [options.queryOptions.select] Select expression using OData
     * notation. Limits the columns on each record to just those requested, e.g.
     * "$select=PolicyAssignmentId, ResourceId".
     *
     * @param {date} [options.queryOptions.from] ISO 8601 formatted timestamp
     * specifying the start time of the interval to query. When not specified, the
     * service uses ($to - 1-day).
     *
     * @param {date} [options.queryOptions.to] ISO 8601 formatted timestamp
     * specifying the end time of the interval to query. When not specified, the
     * service uses request time.
     *
     * @param {string} [options.queryOptions.apply] OData apply expression for
     * aggregations.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SummarizeResults} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SummarizeResults} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SummarizeResults} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    summarizeForSubscriptionLevelPolicyAssignment(subscriptionId: string, policyAssignmentName: string, options?: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }): Promise<models.SummarizeResults>;
    summarizeForSubscriptionLevelPolicyAssignment(subscriptionId: string, policyAssignmentName: string, callback: ServiceCallback<models.SummarizeResults>): void;
    summarizeForSubscriptionLevelPolicyAssignment(subscriptionId: string, policyAssignmentName: string, options: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SummarizeResults>): void;


    /**
     * Queries policy states for the resource group level policy assignment.
     *
     * @param {string} policyStatesResource The virtual resource under PolicyStates
     * resource type. In a given time range, 'latest' represents the latest policy
     * state(s), whereas 'default' represents all policy state(s). Possible values
     * include: 'default', 'latest'
     *
     * @param {string} subscriptionId Microsoft Azure subscription ID.
     *
     * @param {string} resourceGroupName Resource group name.
     *
     * @param {string} policyAssignmentName Policy assignment name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.queryOptions] Additional parameters for the
     * operation
     *
     * @param {number} [options.queryOptions.top] Maximum number of records to
     * return.
     *
     * @param {string} [options.queryOptions.filter] OData filter expression.
     *
     * @param {string} [options.queryOptions.orderBy] Ordering expression using
     * OData notation. One or more comma-separated column names with an optional
     * "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId
     * asc".
     *
     * @param {string} [options.queryOptions.select] Select expression using OData
     * notation. Limits the columns on each record to just those requested, e.g.
     * "$select=PolicyAssignmentId, ResourceId".
     *
     * @param {date} [options.queryOptions.from] ISO 8601 formatted timestamp
     * specifying the start time of the interval to query. When not specified, the
     * service uses ($to - 1-day).
     *
     * @param {date} [options.queryOptions.to] ISO 8601 formatted timestamp
     * specifying the end time of the interval to query. When not specified, the
     * service uses request time.
     *
     * @param {string} [options.queryOptions.apply] OData apply expression for
     * aggregations.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PolicyStatesQueryResults>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listQueryResultsForResourceGroupLevelPolicyAssignmentWithHttpOperationResponse(policyStatesResource: string, subscriptionId: string, resourceGroupName: string, policyAssignmentName: string, options?: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PolicyStatesQueryResults>>;

    /**
     * Queries policy states for the resource group level policy assignment.
     *
     * @param {string} policyStatesResource The virtual resource under PolicyStates
     * resource type. In a given time range, 'latest' represents the latest policy
     * state(s), whereas 'default' represents all policy state(s). Possible values
     * include: 'default', 'latest'
     *
     * @param {string} subscriptionId Microsoft Azure subscription ID.
     *
     * @param {string} resourceGroupName Resource group name.
     *
     * @param {string} policyAssignmentName Policy assignment name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.queryOptions] Additional parameters for the
     * operation
     *
     * @param {number} [options.queryOptions.top] Maximum number of records to
     * return.
     *
     * @param {string} [options.queryOptions.filter] OData filter expression.
     *
     * @param {string} [options.queryOptions.orderBy] Ordering expression using
     * OData notation. One or more comma-separated column names with an optional
     * "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId
     * asc".
     *
     * @param {string} [options.queryOptions.select] Select expression using OData
     * notation. Limits the columns on each record to just those requested, e.g.
     * "$select=PolicyAssignmentId, ResourceId".
     *
     * @param {date} [options.queryOptions.from] ISO 8601 formatted timestamp
     * specifying the start time of the interval to query. When not specified, the
     * service uses ($to - 1-day).
     *
     * @param {date} [options.queryOptions.to] ISO 8601 formatted timestamp
     * specifying the end time of the interval to query. When not specified, the
     * service uses request time.
     *
     * @param {string} [options.queryOptions.apply] OData apply expression for
     * aggregations.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PolicyStatesQueryResults} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PolicyStatesQueryResults} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PolicyStatesQueryResults} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listQueryResultsForResourceGroupLevelPolicyAssignment(policyStatesResource: string, subscriptionId: string, resourceGroupName: string, policyAssignmentName: string, options?: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }): Promise<models.PolicyStatesQueryResults>;
    listQueryResultsForResourceGroupLevelPolicyAssignment(policyStatesResource: string, subscriptionId: string, resourceGroupName: string, policyAssignmentName: string, callback: ServiceCallback<models.PolicyStatesQueryResults>): void;
    listQueryResultsForResourceGroupLevelPolicyAssignment(policyStatesResource: string, subscriptionId: string, resourceGroupName: string, policyAssignmentName: string, options: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PolicyStatesQueryResults>): void;


    /**
     * Summarizes policy states for the resource group level policy assignment.
     *
     * @param {string} subscriptionId Microsoft Azure subscription ID.
     *
     * @param {string} resourceGroupName Resource group name.
     *
     * @param {string} policyAssignmentName Policy assignment name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.queryOptions] Additional parameters for the
     * operation
     *
     * @param {number} [options.queryOptions.top] Maximum number of records to
     * return.
     *
     * @param {string} [options.queryOptions.filter] OData filter expression.
     *
     * @param {string} [options.queryOptions.orderBy] Ordering expression using
     * OData notation. One or more comma-separated column names with an optional
     * "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId
     * asc".
     *
     * @param {string} [options.queryOptions.select] Select expression using OData
     * notation. Limits the columns on each record to just those requested, e.g.
     * "$select=PolicyAssignmentId, ResourceId".
     *
     * @param {date} [options.queryOptions.from] ISO 8601 formatted timestamp
     * specifying the start time of the interval to query. When not specified, the
     * service uses ($to - 1-day).
     *
     * @param {date} [options.queryOptions.to] ISO 8601 formatted timestamp
     * specifying the end time of the interval to query. When not specified, the
     * service uses request time.
     *
     * @param {string} [options.queryOptions.apply] OData apply expression for
     * aggregations.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SummarizeResults>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    summarizeForResourceGroupLevelPolicyAssignmentWithHttpOperationResponse(subscriptionId: string, resourceGroupName: string, policyAssignmentName: string, options?: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SummarizeResults>>;

    /**
     * Summarizes policy states for the resource group level policy assignment.
     *
     * @param {string} subscriptionId Microsoft Azure subscription ID.
     *
     * @param {string} resourceGroupName Resource group name.
     *
     * @param {string} policyAssignmentName Policy assignment name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.queryOptions] Additional parameters for the
     * operation
     *
     * @param {number} [options.queryOptions.top] Maximum number of records to
     * return.
     *
     * @param {string} [options.queryOptions.filter] OData filter expression.
     *
     * @param {string} [options.queryOptions.orderBy] Ordering expression using
     * OData notation. One or more comma-separated column names with an optional
     * "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId
     * asc".
     *
     * @param {string} [options.queryOptions.select] Select expression using OData
     * notation. Limits the columns on each record to just those requested, e.g.
     * "$select=PolicyAssignmentId, ResourceId".
     *
     * @param {date} [options.queryOptions.from] ISO 8601 formatted timestamp
     * specifying the start time of the interval to query. When not specified, the
     * service uses ($to - 1-day).
     *
     * @param {date} [options.queryOptions.to] ISO 8601 formatted timestamp
     * specifying the end time of the interval to query. When not specified, the
     * service uses request time.
     *
     * @param {string} [options.queryOptions.apply] OData apply expression for
     * aggregations.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SummarizeResults} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SummarizeResults} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SummarizeResults} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    summarizeForResourceGroupLevelPolicyAssignment(subscriptionId: string, resourceGroupName: string, policyAssignmentName: string, options?: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }): Promise<models.SummarizeResults>;
    summarizeForResourceGroupLevelPolicyAssignment(subscriptionId: string, resourceGroupName: string, policyAssignmentName: string, callback: ServiceCallback<models.SummarizeResults>): void;
    summarizeForResourceGroupLevelPolicyAssignment(subscriptionId: string, resourceGroupName: string, policyAssignmentName: string, options: { queryOptions? : models.QueryOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SummarizeResults>): void;


    /**
     * Gets OData metadata XML document.
     *
     * @param {string} scope A valid scope, i.e. management group, subscription,
     * resource group, or resource ID. Scope used has no effect on metadata
     * returned.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<String>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getMetadataWithHttpOperationResponse(scope: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<string>>;

    /**
     * Gets OData metadata XML document.
     *
     * @param {string} scope A valid scope, i.e. management group, subscription,
     * resource group, or resource ID. Scope used has no effect on metadata
     * returned.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {String} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {String} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getMetadata(scope: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<string>;
    getMetadata(scope: string, callback: ServiceCallback<string>): void;
    getMetadata(scope: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;
}

/**
 * @class
 * Operations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the PolicyInsightsClient.
 */
export interface Operations {


    /**
     * Lists available operations.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OperationsListResults>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OperationsListResults>>;

    /**
     * Lists available operations.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OperationsListResults} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OperationsListResults} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OperationsListResults} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.OperationsListResults>;
    list(callback: ServiceCallback<models.OperationsListResults>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OperationsListResults>): void;
}
