/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

/* jshint latedef:false */
/* jshint forin:false */
/* jshint noempty:false */

'use strict';

const msRest = require('ms-rest');
const msRestAzure = require('ms-rest-azure');
const ServiceClient = msRestAzure.AzureServiceClient;
const WebResource = msRest.WebResource;

const models = require('./models');
const operations = require('./operations');


/**
 * Lists the transactions by billingProfileName for given start date and end
 * date.
 *
 * @param {string} billingAccountName billing Account Id.
 *
 * @param {string} billingProfileName Billing Profile Id.
 *
 * @param {string} startDate Start date
 *
 * @param {string} endDate End date
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {string} [options.filter] May be used to filter by transaction kind.
 * The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not
 * currently support 'ne', 'or', or 'not'. Tag filter is a key value pair
 * string where key and value is separated by a colon (:).
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link TransactionsListResult} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _transactionsByBillingProfile(billingAccountName, billingProfileName, startDate, endDate, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let filter = (options && options.filter !== undefined) ? options.filter : undefined;
  // Validate
  try {
    if (billingAccountName === null || billingAccountName === undefined || typeof billingAccountName.valueOf() !== 'string') {
      throw new Error('billingAccountName cannot be null or undefined and it must be of type string.');
    }
    if (billingProfileName === null || billingProfileName === undefined || typeof billingProfileName.valueOf() !== 'string') {
      throw new Error('billingProfileName cannot be null or undefined and it must be of type string.');
    }
    if (this.apiVersion === null || this.apiVersion === undefined || typeof this.apiVersion.valueOf() !== 'string') {
      throw new Error('this.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (startDate === null || startDate === undefined || typeof startDate.valueOf() !== 'string') {
      throw new Error('startDate cannot be null or undefined and it must be of type string.');
    }
    if (endDate === null || endDate === undefined || typeof endDate.valueOf() !== 'string') {
      throw new Error('endDate cannot be null or undefined and it must be of type string.');
    }
    if (filter !== null && filter !== undefined && typeof filter.valueOf() !== 'string') {
      throw new Error('filter must be of type string.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/transactions';
  requestUrl = requestUrl.replace('{billingAccountName}', encodeURIComponent(billingAccountName));
  requestUrl = requestUrl.replace('{billingProfileName}', encodeURIComponent(billingProfileName));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.apiVersion));
  queryParameters.push('startDate=' + encodeURIComponent(startDate));
  queryParameters.push('endDate=' + encodeURIComponent(endDate));
  if (filter !== null && filter !== undefined) {
    queryParameters.push('$filter=' + encodeURIComponent(filter));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['TransactionsListResult']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Cancel product by product id
 *
 * @param {string} billingAccountName billing Account Id.
 *
 * @param {string} productName Invoice Id.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {string} [options.autoRenew] Request parameters to update auto renew
 * policy a product. Possible values include: 'true', 'false'
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link UpdateAutoRenewOperationSummary} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _updateAutoRenewForBillingAccount(billingAccountName, productName, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let autoRenew = (options && options.autoRenew !== undefined) ? options.autoRenew : undefined;
  // Validate
  try {
    if (billingAccountName === null || billingAccountName === undefined || typeof billingAccountName.valueOf() !== 'string') {
      throw new Error('billingAccountName cannot be null or undefined and it must be of type string.');
    }
    if (productName === null || productName === undefined || typeof productName.valueOf() !== 'string') {
      throw new Error('productName cannot be null or undefined and it must be of type string.');
    }
    if (this.apiVersion === null || this.apiVersion === undefined || typeof this.apiVersion.valueOf() !== 'string') {
      throw new Error('this.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (autoRenew !== null && autoRenew !== undefined && typeof autoRenew.valueOf() !== 'string') {
      throw new Error('autoRenew must be of type string.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }
  let body;
  if (autoRenew !== null && autoRenew !== undefined) {
    body = new client.models['UpdateAutoRenewRequest']();
    body.autoRenew = autoRenew;
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'providers/Microsoft.Billing/billingAccounts/{billingAccountName}/products/{productName}/updateAutoRenew';
  requestUrl = requestUrl.replace('{billingAccountName}', encodeURIComponent(billingAccountName));
  requestUrl = requestUrl.replace('{productName}', encodeURIComponent(productName));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['UpdateAutoRenewRequest']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['UpdateAutoRenewOperationSummary']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Cancel auto renew for product by product id
 *
 * @param {string} billingAccountName billing Account Id.
 *
 * @param {string} invoiceSectionName InvoiceSection Id.
 *
 * @param {string} productName Invoice Id.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {string} [options.autoRenew] Request parameters to update auto renew
 * policy a product. Possible values include: 'true', 'false'
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link UpdateAutoRenewOperationSummary} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _updateAutoRenewForInvoiceSection(billingAccountName, invoiceSectionName, productName, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let autoRenew = (options && options.autoRenew !== undefined) ? options.autoRenew : undefined;
  // Validate
  try {
    if (billingAccountName === null || billingAccountName === undefined || typeof billingAccountName.valueOf() !== 'string') {
      throw new Error('billingAccountName cannot be null or undefined and it must be of type string.');
    }
    if (invoiceSectionName === null || invoiceSectionName === undefined || typeof invoiceSectionName.valueOf() !== 'string') {
      throw new Error('invoiceSectionName cannot be null or undefined and it must be of type string.');
    }
    if (productName === null || productName === undefined || typeof productName.valueOf() !== 'string') {
      throw new Error('productName cannot be null or undefined and it must be of type string.');
    }
    if (this.apiVersion === null || this.apiVersion === undefined || typeof this.apiVersion.valueOf() !== 'string') {
      throw new Error('this.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (autoRenew !== null && autoRenew !== undefined && typeof autoRenew.valueOf() !== 'string') {
      throw new Error('autoRenew must be of type string.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }
  let body;
  if (autoRenew !== null && autoRenew !== undefined) {
    body = new client.models['UpdateAutoRenewRequest']();
    body.autoRenew = autoRenew;
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'providers/Microsoft.Billing/billingAccounts/{billingAccountName}/invoiceSections/{invoiceSectionName}/products/{productName}/updateAutoRenew';
  requestUrl = requestUrl.replace('{billingAccountName}', encodeURIComponent(billingAccountName));
  requestUrl = requestUrl.replace('{invoiceSectionName}', encodeURIComponent(invoiceSectionName));
  requestUrl = requestUrl.replace('{productName}', encodeURIComponent(productName));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['UpdateAutoRenewRequest']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['UpdateAutoRenewOperationSummary']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/** Class representing a BillingManagementClient. */
class BillingManagementClient extends ServiceClient {
  /**
   * Create a BillingManagementClient.
   * @param {credentials} credentials - Credentials needed for the client to connect to Azure.
   * @param {string} subscriptionId - Azure Subscription ID.
   * @param {string} [baseUri] - The base URI of the service.
   * @param {object} [options] - The parameter options
   * @param {Array} [options.filters] - Filters to be added to the request pipeline
   * @param {object} [options.requestOptions] - Options for the underlying request object
   * {@link https://github.com/request/request#requestoptions-callback Options doc}
   * @param {boolean} [options.noRetryPolicy] - If set to true, turn off default retry policy
   * @param {string} [options.acceptLanguage] - The preferred language for the response.
   * @param {number} [options.longRunningOperationRetryTimeout] - The retry timeout in seconds for Long Running Operations. Default value is 30.
   * @param {boolean} [options.generateClientRequestId] - Whether a unique x-ms-client-request-id should be generated. When set to true a unique x-ms-client-request-id value is generated and included in each request. Default is true.
   */
  constructor(credentials, subscriptionId, baseUri, options) {
    if (credentials === null || credentials === undefined) {
      throw new Error('\'credentials\' cannot be null.');
    }
    if (subscriptionId === null || subscriptionId === undefined) {
      throw new Error('\'subscriptionId\' cannot be null.');
    }

    if (!options) options = {};

    super(credentials, options);

    this.apiVersion = '2018-11-01-preview';
    this.acceptLanguage = 'en-US';
    this.longRunningOperationRetryTimeout = 30;
    this.generateClientRequestId = true;
    this.baseUri = baseUri;
    if (!this.baseUri) {
      this.baseUri = 'https://management.azure.com';
    }
    this.credentials = credentials;
    this.subscriptionId = subscriptionId;

    let packageInfo = this.getPackageJsonInfo(__dirname);
    this.addUserAgentInfo(`${packageInfo.name}/${packageInfo.version}`);
    if(options.acceptLanguage !== null && options.acceptLanguage !== undefined) {
      this.acceptLanguage = options.acceptLanguage;
    }
    if(options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {
      this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;
    }
    if(options.generateClientRequestId !== null && options.generateClientRequestId !== undefined) {
      this.generateClientRequestId = options.generateClientRequestId;
    }
    this.billingAccounts = new operations.BillingAccounts(this);
    this.billingAccountsWithCreateInvoiceSectionPermission = new operations.BillingAccountsWithCreateInvoiceSectionPermission(this);
    this.availableBalanceByBillingProfile = new operations.AvailableBalanceByBillingProfile(this);
    this.paymentMethodsByBillingProfile = new operations.PaymentMethodsByBillingProfile(this);
    this.billingProfilesByBillingAccountName = new operations.BillingProfilesByBillingAccountName(this);
    this.billingProfiles = new operations.BillingProfiles(this);
    this.invoiceSectionsByBillingAccountName = new operations.InvoiceSectionsByBillingAccountName(this);
    this.invoiceSections = new operations.InvoiceSections(this);
    this.invoiceSectionsWithCreateSubscriptionPermission = new operations.InvoiceSectionsWithCreateSubscriptionPermission(this);
    this.departmentsByBillingAccountName = new operations.DepartmentsByBillingAccountName(this);
    this.departments = new operations.Departments(this);
    this.enrollmentAccountsByBillingAccountName = new operations.EnrollmentAccountsByBillingAccountName(this);
    this.enrollmentAccounts = new operations.EnrollmentAccounts(this);
    this.invoicesByBillingAccount = new operations.InvoicesByBillingAccount(this);
    this.invoicePricesheet = new operations.InvoicePricesheet(this);
    this.invoicesByBillingProfile = new operations.InvoicesByBillingProfile(this);
    this.invoice = new operations.Invoice(this);
    this.productsByBillingSubscriptions = new operations.ProductsByBillingSubscriptions(this);
    this.billingSubscriptionsByBillingProfile = new operations.BillingSubscriptionsByBillingProfile(this);
    this.billingSubscriptionsByInvoiceSection = new operations.BillingSubscriptionsByInvoiceSection(this);
    this.billingSubscription = new operations.BillingSubscription(this);
    this.productsByBillingAccount = new operations.ProductsByBillingAccount(this);
    this.productsByInvoiceSection = new operations.ProductsByInvoiceSection(this);
    this.products = new operations.Products(this);
    this.transactionsByBillingAccount = new operations.TransactionsByBillingAccount(this);
    this.policyOperations = new operations.PolicyOperations(this);
    this.billingPropertyOperations = new operations.BillingPropertyOperations(this);
    this.operations = new operations.Operations(this);
    this.billingAccountBillingPermissions = new operations.BillingAccountBillingPermissions(this);
    this.invoiceSectionsBillingPermissions = new operations.InvoiceSectionsBillingPermissions(this);
    this.billingProfileBillingPermissions = new operations.BillingProfileBillingPermissions(this);
    this.billingAccountBillingRoleDefinition = new operations.BillingAccountBillingRoleDefinition(this);
    this.invoiceSectionBillingRoleDefinition = new operations.InvoiceSectionBillingRoleDefinition(this);
    this.billingProfileBillingRoleDefinition = new operations.BillingProfileBillingRoleDefinition(this);
    this.billingAccountBillingRoleAssignment = new operations.BillingAccountBillingRoleAssignment(this);
    this.invoiceSectionBillingRoleAssignment = new operations.InvoiceSectionBillingRoleAssignment(this);
    this.billingProfileBillingRoleAssignment = new operations.BillingProfileBillingRoleAssignment(this);
    this.models = models;
    this._transactionsByBillingProfile = _transactionsByBillingProfile;
    this._updateAutoRenewForBillingAccount = _updateAutoRenewForBillingAccount;
    this._updateAutoRenewForInvoiceSection = _updateAutoRenewForInvoiceSection;
    msRest.addSerializationMixin(this);
  }

  /**
   * Lists the transactions by billingProfileName for given start date and end
   * date.
   *
   * @param {string} billingAccountName billing Account Id.
   *
   * @param {string} billingProfileName Billing Profile Id.
   *
   * @param {string} startDate Start date
   *
   * @param {string} endDate End date
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.filter] May be used to filter by transaction kind.
   * The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not
   * currently support 'ne', 'or', or 'not'. Tag filter is a key value pair
   * string where key and value is separated by a colon (:).
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<TransactionsListResult>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  transactionsByBillingProfileWithHttpOperationResponse(billingAccountName, billingProfileName, startDate, endDate, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._transactionsByBillingProfile(billingAccountName, billingProfileName, startDate, endDate, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Lists the transactions by billingProfileName for given start date and end
   * date.
   *
   * @param {string} billingAccountName billing Account Id.
   *
   * @param {string} billingProfileName Billing Profile Id.
   *
   * @param {string} startDate Start date
   *
   * @param {string} endDate End date
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.filter] May be used to filter by transaction kind.
   * The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not
   * currently support 'ne', 'or', or 'not'. Tag filter is a key value pair
   * string where key and value is separated by a colon (:).
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {TransactionsListResult} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link TransactionsListResult} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  transactionsByBillingProfile(billingAccountName, billingProfileName, startDate, endDate, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._transactionsByBillingProfile(billingAccountName, billingProfileName, startDate, endDate, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._transactionsByBillingProfile(billingAccountName, billingProfileName, startDate, endDate, options, optionalCallback);
    }
  }

  /**
   * Cancel product by product id
   *
   * @param {string} billingAccountName billing Account Id.
   *
   * @param {string} productName Invoice Id.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.autoRenew] Request parameters to update auto renew
   * policy a product. Possible values include: 'true', 'false'
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<UpdateAutoRenewOperationSummary>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  updateAutoRenewForBillingAccountWithHttpOperationResponse(billingAccountName, productName, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._updateAutoRenewForBillingAccount(billingAccountName, productName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Cancel product by product id
   *
   * @param {string} billingAccountName billing Account Id.
   *
   * @param {string} productName Invoice Id.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.autoRenew] Request parameters to update auto renew
   * policy a product. Possible values include: 'true', 'false'
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {UpdateAutoRenewOperationSummary} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link UpdateAutoRenewOperationSummary} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  updateAutoRenewForBillingAccount(billingAccountName, productName, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._updateAutoRenewForBillingAccount(billingAccountName, productName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._updateAutoRenewForBillingAccount(billingAccountName, productName, options, optionalCallback);
    }
  }

  /**
   * Cancel auto renew for product by product id
   *
   * @param {string} billingAccountName billing Account Id.
   *
   * @param {string} invoiceSectionName InvoiceSection Id.
   *
   * @param {string} productName Invoice Id.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.autoRenew] Request parameters to update auto renew
   * policy a product. Possible values include: 'true', 'false'
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<UpdateAutoRenewOperationSummary>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  updateAutoRenewForInvoiceSectionWithHttpOperationResponse(billingAccountName, invoiceSectionName, productName, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._updateAutoRenewForInvoiceSection(billingAccountName, invoiceSectionName, productName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Cancel auto renew for product by product id
   *
   * @param {string} billingAccountName billing Account Id.
   *
   * @param {string} invoiceSectionName InvoiceSection Id.
   *
   * @param {string} productName Invoice Id.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.autoRenew] Request parameters to update auto renew
   * policy a product. Possible values include: 'true', 'false'
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {UpdateAutoRenewOperationSummary} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link UpdateAutoRenewOperationSummary} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  updateAutoRenewForInvoiceSection(billingAccountName, invoiceSectionName, productName, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._updateAutoRenewForInvoiceSection(billingAccountName, invoiceSectionName, productName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._updateAutoRenewForInvoiceSection(billingAccountName, invoiceSectionName, productName, options, optionalCallback);
    }
  }

}

module.exports = BillingManagementClient;
module.exports['default'] = BillingManagementClient;
module.exports.BillingManagementClient = BillingManagementClient;
module.exports.BillingManagementModels = models;
