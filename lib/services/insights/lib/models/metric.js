/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the Metric class.
 * @constructor
 * A set of metric values in a time range.
 *
 * @member {object} name the name and the display name of the metric, i.e. it
 * is localizable string.
 * 
 * @member {string} [name.value] the invariant value.
 * 
 * @member {string} [name.localizedValue] the locale specific value.
 * 
 * @member {string} unit the unit of the metric. Possible values include:
 * 'Count', 'Bytes', 'Seconds', 'CountPerSecond', 'BytesPerSecond', 'Percent',
 * 'MilliSeconds'
 * 
 * @member {array} data Array of data points representing the metric values.
 * 
 */
function Metric() {
}

/**
 * Defines the metadata of Metric
 *
 * @returns {object} metadata of Metric
 *
 */
Metric.prototype.mapper = function () {
  return {
    required: false,
    serializedName: 'Metric',
    type: {
      name: 'Composite',
      className: 'Metric',
      modelProperties: {
        name: {
          required: true,
          serializedName: 'name',
          type: {
            name: 'Composite',
            className: 'LocalizableString'
          }
        },
        unit: {
          required: true,
          serializedName: 'unit',
          type: {
            name: 'Enum',
            allowedValues: [ 'Count', 'Bytes', 'Seconds', 'CountPerSecond', 'BytesPerSecond', 'Percent', 'MilliSeconds' ]
          }
        },
        data: {
          required: true,
          serializedName: 'data',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'MetricValueElementType',
                type: {
                  name: 'Composite',
                  className: 'MetricValue'
                }
            }
          }
        }
      }
    }
  };
};

module.exports = Metric;
