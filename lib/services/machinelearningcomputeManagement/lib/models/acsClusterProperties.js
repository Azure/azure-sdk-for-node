/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Information about the container service backing the cluster
 *
 */
class AcsClusterProperties {
  /**
   * Create a AcsClusterProperties.
   * @member {string} [clusterFqdn] The FQDN of the cluster.
   * @member {string} orchestratorType Type of orchestrator. It cannot be
   * changed once the cluster is created. Possible values include:
   * 'Kubernetes', 'None'
   * @member {object} orchestratorProperties Orchestrator specific properties
   * @member {object} [orchestratorProperties.servicePrincipal] The Azure
   * Service Principal used by Kubernetes
   * @member {string} [orchestratorProperties.servicePrincipal.clientId] The
   * service principal client ID
   * @member {string} [orchestratorProperties.servicePrincipal.secret] The
   * service principal secret. This is not returned in response of GET/PUT on
   * the resource. To see this please call listKeys.
   * @member {array} [systemServices] The system services deployed to the
   * cluster
   * @member {number} [masterCount] The number of master nodes in the container
   * service. Default value: 1 .
   * @member {number} [agentCount] The number of agent nodes in the Container
   * Service. This can be changed to scale the cluster. Default value: 2 .
   * @member {string} [agentVmSize] The Azure VM size of the agent VM nodes.
   * This cannot be changed once the cluster is created. This list is non
   * exhaustive; refer to
   * https://docs.microsoft.com/en-us/azure/virtual-machines/windows/sizes for
   * the possible VM sizes. Possible values include: 'Standard_A0',
   * 'Standard_A1', 'Standard_A2', 'Standard_A3', 'Standard_A4', 'Standard_A5',
   * 'Standard_A6', 'Standard_A7', 'Standard_A8', 'Standard_A9',
   * 'Standard_A10', 'Standard_A11', 'Standard_D1', 'Standard_D2',
   * 'Standard_D3', 'Standard_D4', 'Standard_D11', 'Standard_D12',
   * 'Standard_D13', 'Standard_D14', 'Standard_D1_v2', 'Standard_D2_v2',
   * 'Standard_D3_v2', 'Standard_D4_v2', 'Standard_D5_v2', 'Standard_D11_v2',
   * 'Standard_D12_v2', 'Standard_D13_v2', 'Standard_D14_v2', 'Standard_G1',
   * 'Standard_G2', 'Standard_G3', 'Standard_G4', 'Standard_G5',
   * 'Standard_DS1', 'Standard_DS2', 'Standard_DS3', 'Standard_DS4',
   * 'Standard_DS11', 'Standard_DS12', 'Standard_DS13', 'Standard_DS14',
   * 'Standard_GS1', 'Standard_GS2', 'Standard_GS3', 'Standard_GS4',
   * 'Standard_GS5'. Default value: 'Standard_D3_v2' .
   */
  constructor() {
  }

  /**
   * Defines the metadata of AcsClusterProperties
   *
   * @returns {object} metadata of AcsClusterProperties
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'AcsClusterProperties',
      type: {
        name: 'Composite',
        className: 'AcsClusterProperties',
        modelProperties: {
          clusterFqdn: {
            required: false,
            readOnly: true,
            serializedName: 'clusterFqdn',
            type: {
              name: 'String'
            }
          },
          orchestratorType: {
            required: true,
            serializedName: 'orchestratorType',
            type: {
              name: 'String'
            }
          },
          orchestratorProperties: {
            required: true,
            serializedName: 'orchestratorProperties',
            type: {
              name: 'Composite',
              className: 'KubernetesClusterProperties'
            }
          },
          systemServices: {
            required: false,
            serializedName: 'systemServices',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'SystemServiceElementType',
                  type: {
                    name: 'Composite',
                    className: 'SystemService'
                  }
              }
            }
          },
          masterCount: {
            required: false,
            serializedName: 'masterCount',
            defaultValue: 1,
            constraints: {
              InclusiveMaximum: 5,
              InclusiveMinimum: 1
            },
            type: {
              name: 'Number'
            }
          },
          agentCount: {
            required: false,
            serializedName: 'agentCount',
            defaultValue: 2,
            constraints: {
              InclusiveMaximum: 100,
              InclusiveMinimum: 1
            },
            type: {
              name: 'Number'
            }
          },
          agentVmSize: {
            required: false,
            serializedName: 'agentVmSize',
            defaultValue: 'Standard_D3_v2',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = AcsClusterProperties;
