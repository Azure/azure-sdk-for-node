/**
* Copyright (c) Microsoft.  All rights reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

var util = require('util');
var azureCommon = require('azure-common');
var WebResource = azureCommon.WebResource;

//
// Implementation of getDeploymentTemplate - cannot be autogenerated at this
// time, so writing it by hand. Will be attached to the TemplateOperations
// prototype.
//

function getDeploymentTemplate(resourceGroup, parameters, callback) {
  /* jshint validthis:true */
  if (!callback) {
    throw new Error('callback cannot be null.');
  }

  if (!resourceGroup) {
    return callback(new Error('resourceGroup cannot be null.'));
  }

  if (!parameters) {
    return callback(new Error('parameters cannot be null.'));
  }

  // Construct URL
  var urlFormat = '/subscriptions/%s/resourcegroups/%s';
  urlFormat += '/providers/Microsoft.AppService/deploymenttemplates/generate?api-version=2015-03-01-preview';

  var url = util.format(urlFormat,
    encodeURIComponent(this.client.credentials.subscriptionId),
    encodeURIComponent(resourceGroup));

  var baseUrl = this.client.baseUri;
  // Trim '/' character from the end of baseUrl and beginning of url.
  if (baseUrl[baseUrl.length - 1] === '/') {
    baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
  }
  if (url[0] === '/') {
    url = url.substring(1);
  }
  url = baseUrl + '/' + url;
  url = url.replace(' ', '%20');

  // Create HTTP transport objects
  var httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.headers = {};
  httpRequest.body = JSON.stringify(parameters);
  httpRequest.url = url;

  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json';

  return this.client.pipeline(httpRequest, function (err, response, body) {
    if (!!err) {
      return callback(err);
    }

    var statusCode = response.statusCode;
    if(statusCode !== 200) {
      var error = new Error(body);
      error.statusCode = response.statusCode;
      return callback(error);
    }

    return callback(null, JSON.parse(body).value);
  });
}

//
// Attach the function to the prototype given a client instance
//

function attachGetDeploymentTemplate(client) {
  var proto = Object.getPrototypeOf(client.templates);
  proto['generate'] = getDeploymentTemplate;
}

exports.attachGetDeploymentTemplate = attachGetDeploymentTemplate;
