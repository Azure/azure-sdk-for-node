/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * An exception result
 *
 * @extends models['EventsResultData']
 */
class EventsExceptionResult extends models['EventsResultData'] {
  /**
   * Create a EventsExceptionResult.
   * @member {object} [exception]
   * @member {number} [exception.severityLevel] The severity level of the
   * exception
   * @member {string} [exception.problemId] The problem ID of the exception
   * @member {string} [exception.handledAt] Indicates where the exception was
   * handled at
   * @member {string} [exception.assembly] The assembly which threw the
   * exception
   * @member {string} [exception.method] The method that threw the exception
   * @member {string} [exception.message] The message of the exception
   * @member {string} [exception.type] The type of the exception
   * @member {string} [exception.outerType] The outer type of the exception
   * @member {string} [exception.outerMethod] The outer method of the exception
   * @member {string} [exception.outerAssembly] The outer assmebly of the
   * exception
   * @member {string} [exception.outerMessage] The outer message of the
   * exception
   * @member {string} [exception.innermostType] The inner most type of the
   * exception
   * @member {string} [exception.innermostMessage] The inner most message of
   * the exception
   * @member {string} [exception.innermostMethod] The inner most method of the
   * exception
   * @member {string} [exception.innermostAssembly] The inner most assembly of
   * the exception
   * @member {array} [exception.details] The details of the exception
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of EventsExceptionResult
   *
   * @returns {object} metadata of EventsExceptionResult
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'exception',
      type: {
        name: 'Composite',
        polymorphicDiscriminator: {
          serializedName: 'type',
          clientName: 'type'
        },
        uberParent: 'EventsResultData',
        className: 'EventsExceptionResult',
        modelProperties: {
          id: {
            required: false,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          count: {
            required: false,
            serializedName: 'count',
            type: {
              name: 'Number'
            }
          },
          timestamp: {
            required: false,
            serializedName: 'timestamp',
            type: {
              name: 'DateTime'
            }
          },
          customDimensions: {
            required: false,
            serializedName: 'customDimensions',
            type: {
              name: 'Composite',
              className: 'EventsResultDataCustomDimensions'
            }
          },
          customMeasurements: {
            required: false,
            serializedName: 'customMeasurements',
            type: {
              name: 'Composite',
              className: 'EventsResultDataCustomMeasurements'
            }
          },
          operation: {
            required: false,
            serializedName: 'operation',
            type: {
              name: 'Composite',
              className: 'EventsOperationInfo'
            }
          },
          session: {
            required: false,
            serializedName: 'session',
            type: {
              name: 'Composite',
              className: 'EventsSessionInfo'
            }
          },
          user: {
            required: false,
            serializedName: 'user',
            type: {
              name: 'Composite',
              className: 'EventsUserInfo'
            }
          },
          cloud: {
            required: false,
            serializedName: 'cloud',
            type: {
              name: 'Composite',
              className: 'EventsCloudInfo'
            }
          },
          ai: {
            required: false,
            serializedName: 'ai',
            type: {
              name: 'Composite',
              className: 'EventsAiInfo'
            }
          },
          application: {
            required: false,
            serializedName: 'application',
            type: {
              name: 'Composite',
              className: 'EventsApplicationInfo'
            }
          },
          client: {
            required: false,
            serializedName: 'client',
            type: {
              name: 'Composite',
              className: 'EventsClientInfo'
            }
          },
          type: {
            required: true,
            serializedName: 'type',
            isPolymorphicDiscriminator: true,
            type: {
              name: 'String'
            }
          },
          exception: {
            required: false,
            serializedName: 'exception',
            type: {
              name: 'Composite',
              className: 'EventsExceptionInfo'
            }
          }
        }
      }
    };
  }
}

module.exports = EventsExceptionResult;
