/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * The compute resource properties for managed integration runtime.
 *
 */
class IntegrationRuntimeComputeProperties {
  /**
   * Create a IntegrationRuntimeComputeProperties.
   * @member {string} [location] The location for managed integration runtime.
   * The supported regions could be found on
   * https://docs.microsoft.com/en-us/azure/data-factory/data-factory-data-movement-activities
   * @member {string} [nodeSize] The node size requirement to managed
   * integration runtime.
   * @member {number} [numberOfNodes] The required number of nodes for managed
   * integration runtime.
   * @member {number} [maxParallelExecutionsPerNode] Maximum parallel
   * executions count per node for managed integration runtime.
   * @member {object} [vNetProperties] VNet properties for managed integration
   * runtime.
   * @member {string} [vNetProperties.vNetId] The ID of the VNet that this
   * integration runtime will join.
   * @member {string} [vNetProperties.subnet] The name of the subnet this
   * integration runtime will join.
   */
  constructor() {
  }

  /**
   * Defines the metadata of IntegrationRuntimeComputeProperties
   *
   * @returns {object} metadata of IntegrationRuntimeComputeProperties
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'IntegrationRuntimeComputeProperties',
      type: {
        name: 'Composite',
        className: 'IntegrationRuntimeComputeProperties',
        modelProperties: {
          location: {
            required: false,
            serializedName: 'location',
            type: {
              name: 'String'
            }
          },
          nodeSize: {
            required: false,
            serializedName: 'nodeSize',
            type: {
              name: 'String'
            }
          },
          numberOfNodes: {
            required: false,
            serializedName: 'numberOfNodes',
            constraints: {
              InclusiveMinimum: 1
            },
            type: {
              name: 'Number'
            }
          },
          maxParallelExecutionsPerNode: {
            required: false,
            serializedName: 'maxParallelExecutionsPerNode',
            constraints: {
              InclusiveMaximum: 8,
              InclusiveMinimum: 1
            },
            type: {
              name: 'Number'
            }
          },
          vNetProperties: {
            required: false,
            serializedName: 'vNetProperties',
            type: {
              name: 'Composite',
              className: 'IntegrationRuntimeVNetProperties'
            }
          }
        }
      }
    };
  }
}

module.exports = IntegrationRuntimeComputeProperties;
