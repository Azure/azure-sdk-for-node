/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * The Azure Blob storage.
 *
 * @extends models['Dataset']
 */
class AzureBlobDataset extends models['Dataset'] {
  /**
   * Create a AzureBlobDataset.
   * @member {object} [folderPath] The path of the Azure Blob storage. Type:
   * string (or Expression with resultType string).
   * @member {object} [tableRootLocation] The root of blob path. Type: string
   * (or Expression with resultType string).
   * @member {object} [fileName] The name of the Azure Blob. Type: string (or
   * Expression with resultType string).
   * @member {object} [format] The format of the Azure Blob storage.
   * @member {object} [format.serializer] Serializer. Type: string (or
   * Expression with resultType string).
   * @member {object} [format.deserializer] Deserializer. Type: string (or
   * Expression with resultType string).
   * @member {string} [format.type] Polymorphic Discriminator
   * @member {object} [compression] The data compression method used for the
   * blob storage.
   * @member {string} [compression.type] Polymorphic Discriminator
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of AzureBlobDataset
   *
   * @returns {object} metadata of AzureBlobDataset
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'AzureBlob',
      type: {
        name: 'Composite',
        className: 'AzureBlobDataset',
        modelProperties: {
          description: {
            required: false,
            serializedName: 'description',
            type: {
              name: 'String'
            }
          },
          structure: {
            required: false,
            serializedName: 'structure',
            type: {
              name: 'Object'
            }
          },
          linkedServiceName: {
            required: true,
            serializedName: 'linkedServiceName',
            defaultValue: {},
            type: {
              name: 'Composite',
              className: 'LinkedServiceReference'
            }
          },
          parameters: {
            required: false,
            serializedName: 'parameters',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'ParameterSpecificationElementType',
                  type: {
                    name: 'Composite',
                    className: 'ParameterSpecification'
                  }
              }
            }
          },
          type: {
            required: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          folderPath: {
            required: false,
            serializedName: 'typeProperties.folderPath',
            type: {
              name: 'Object'
            }
          },
          tableRootLocation: {
            required: false,
            serializedName: 'typeProperties.tableRootLocation',
            type: {
              name: 'Object'
            }
          },
          fileName: {
            required: false,
            serializedName: 'typeProperties.fileName',
            type: {
              name: 'Object'
            }
          },
          format: {
            required: false,
            serializedName: 'typeProperties.format',
            type: {
              name: 'Composite',
              polymorphicDiscriminator: {
                serializedName: 'type',
                clientName: 'type'
              },
              uberParent: 'DatasetStorageFormat',
              className: 'DatasetStorageFormat'
            }
          },
          compression: {
            required: false,
            serializedName: 'typeProperties.compression',
            type: {
              name: 'Composite',
              polymorphicDiscriminator: {
                serializedName: 'type',
                clientName: 'type'
              },
              uberParent: 'DatasetCompression',
              className: 'DatasetCompression'
            }
          }
        }
      }
    };
  }
}

module.exports = AzureBlobDataset;
