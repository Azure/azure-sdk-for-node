/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * A copy activity source for a MongoDB database.
 *
 * @extends models['CopySource']
 */
class MongoDbV2Source extends models['CopySource'] {
  /**
   * Create a MongoDbV2Source.
   * @property {object} [filter] Specifies selection filter using query
   * operators. To return all documents in a collection, omit this parameter or
   * pass an empty document ({}). Type: string (or Expression with resultType
   * string).
   * @property {object} [cursorMethods] Cursor methods for Mongodb query
   * @property {object} [cursorMethods.project] Specifies the fields to return
   * in the documents that match the query filter. To return all fields in the
   * matching documents, omit this parameter. Type: string (or Expression with
   * resultType string).
   * @property {object} [cursorMethods.sort] Specifies the order in which the
   * query returns matching documents. Type: string (or Expression with
   * resultType string). Type: string (or Expression with resultType string).
   * @property {object} [cursorMethods.skip] Specifies the how many documents
   * skipped and where MongoDB begins returning results. This approach may be
   * useful in implementing paginated results. Type: integer (or Expression
   * with resultType integer).
   * @property {object} [cursorMethods.limit] Specifies the maximum number of
   * documents the server returns. limit() is analogous to the LIMIT statement
   * in a SQL database. Type: integer (or Expression with resultType integer).
   * @property {object} [batchSize] Specifies the number of documents to return
   * in each batch of the response from MongoDB instance. In most cases,
   * modifying the batch size will not affect the user or the application. This
   * propertyï¿½s main purpose is to avoid hit the limitation of response size.
   * Type: integer (or Expression with resultType integer).
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of MongoDbV2Source
   *
   * @returns {object} metadata of MongoDbV2Source
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'MongoDbV2Source',
      type: {
        name: 'Composite',
        polymorphicDiscriminator: {
          serializedName: 'type',
          clientName: 'type'
        },
        uberParent: 'CopySource',
        className: 'MongoDbV2Source',
        modelProperties: {
          sourceRetryCount: {
            required: false,
            serializedName: 'sourceRetryCount',
            type: {
              name: 'Object'
            }
          },
          sourceRetryWait: {
            required: false,
            serializedName: 'sourceRetryWait',
            type: {
              name: 'Object'
            }
          },
          maxConcurrentConnections: {
            required: false,
            serializedName: 'maxConcurrentConnections',
            type: {
              name: 'Object'
            }
          },
          type: {
            required: true,
            serializedName: 'type',
            isPolymorphicDiscriminator: true,
            type: {
              name: 'String'
            }
          },
          filter: {
            required: false,
            serializedName: 'filter',
            type: {
              name: 'Object'
            }
          },
          cursorMethods: {
            required: false,
            serializedName: 'cursorMethods',
            type: {
              name: 'Composite',
              additionalProperties: {
                type: {
                  name: 'Dictionary',
                  value: {
                      required: false,
                      serializedName: 'ObjectElementType',
                      type: {
                        name: 'Object'
                      }
                  }
                }
              },
              className: 'MongoDbCursorMethodsProperties'
            }
          },
          batchSize: {
            required: false,
            serializedName: 'batchSize',
            type: {
              name: 'Object'
            }
          }
        }
      }
    };
  }
}

module.exports = MongoDbV2Source;
