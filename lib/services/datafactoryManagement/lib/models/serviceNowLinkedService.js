/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * ServiceNow server linked service.
 *
 * @extends models['LinkedService']
 */
class ServiceNowLinkedService extends models['LinkedService'] {
  /**
   * Create a ServiceNowLinkedService.
   * @member {object} endpoint The endpoint of the ServiceNow server. (i.e.
   * <instance>.service-now.com)
   * @member {string} authenticationType The authentication type to use.
   * Possible values include: 'Basic', 'OAuth2'
   * @member {object} [username] The user name used to connect to the
   * ServiceNow server for Basic and OAuth2 authentication.
   * @member {object} [password] The password corresponding to the user name
   * for Basic and OAuth2 authentication.
   * @member {string} [password.type] Polymorphic Discriminator
   * @member {object} [clientId] The client id for OAuth2 authentication.
   * @member {object} [clientSecret] The client secret for OAuth2
   * authentication.
   * @member {string} [clientSecret.type] Polymorphic Discriminator
   * @member {object} [useEncryptedEndpoints] Specifies whether the data source
   * endpoints are encrypted using HTTPS. The default value is true.
   * @member {object} [useHostVerification] Specifies whether to require the
   * host name in the server's certificate to match the host name of the server
   * when connecting over SSL. The default value is true.
   * @member {object} [usePeerVerification] Specifies whether to verify the
   * identity of the server when connecting over SSL. The default value is
   * true.
   * @member {object} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of ServiceNowLinkedService
   *
   * @returns {object} metadata of ServiceNowLinkedService
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'ServiceNow',
      type: {
        name: 'Composite',
        polymorphicDiscriminator: {
          serializedName: 'type',
          clientName: 'type'
        },
        uberParent: 'LinkedService',
        className: 'ServiceNowLinkedService',
        modelProperties: {
          connectVia: {
            required: false,
            serializedName: 'connectVia',
            type: {
              name: 'Composite',
              className: 'IntegrationRuntimeReference'
            }
          },
          description: {
            required: false,
            serializedName: 'description',
            type: {
              name: 'String'
            }
          },
          parameters: {
            required: false,
            serializedName: 'parameters',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'ParameterSpecificationElementType',
                  type: {
                    name: 'Composite',
                    className: 'ParameterSpecification'
                  }
              }
            }
          },
          annotations: {
            required: false,
            serializedName: 'annotations',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ObjectElementType',
                  type: {
                    name: 'Object'
                  }
              }
            }
          },
          type: {
            required: true,
            serializedName: 'type',
            isPolymorphicDiscriminator: true,
            type: {
              name: 'String'
            }
          },
          endpoint: {
            required: true,
            serializedName: 'typeProperties.endpoint',
            type: {
              name: 'Object'
            }
          },
          authenticationType: {
            required: true,
            serializedName: 'typeProperties.authenticationType',
            type: {
              name: 'String'
            }
          },
          username: {
            required: false,
            serializedName: 'typeProperties.username',
            type: {
              name: 'Object'
            }
          },
          password: {
            required: false,
            serializedName: 'typeProperties.password',
            type: {
              name: 'Composite',
              polymorphicDiscriminator: {
                serializedName: 'type',
                clientName: 'type'
              },
              uberParent: 'SecretBase',
              className: 'SecretBase'
            }
          },
          clientId: {
            required: false,
            serializedName: 'typeProperties.clientId',
            type: {
              name: 'Object'
            }
          },
          clientSecret: {
            required: false,
            serializedName: 'typeProperties.clientSecret',
            type: {
              name: 'Composite',
              polymorphicDiscriminator: {
                serializedName: 'type',
                clientName: 'type'
              },
              uberParent: 'SecretBase',
              className: 'SecretBase'
            }
          },
          useEncryptedEndpoints: {
            required: false,
            serializedName: 'typeProperties.useEncryptedEndpoints',
            type: {
              name: 'Object'
            }
          },
          useHostVerification: {
            required: false,
            serializedName: 'typeProperties.useHostVerification',
            type: {
              name: 'Object'
            }
          },
          usePeerVerification: {
            required: false,
            serializedName: 'typeProperties.usePeerVerification',
            type: {
              name: 'Object'
            }
          },
          encryptedCredential: {
            required: false,
            serializedName: 'typeProperties.encryptedCredential',
            type: {
              name: 'Object'
            }
          }
        }
      }
    };
  }
}

module.exports = ServiceNowLinkedService;
