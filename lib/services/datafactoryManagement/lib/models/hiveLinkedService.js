/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Hive Server linked service.
 *
 * @extends models['LinkedService']
 */
class HiveLinkedService extends models['LinkedService'] {
  /**
   * Create a HiveLinkedService.
   * @property {object} host IP address or host name of the Hive server,
   * separated by ';' for multiple hosts (only when serviceDiscoveryMode is
   * enable).
   * @property {object} [port] The TCP port that the Hive server uses to listen
   * for client connections.
   * @property {string} [serverType] The type of Hive server. Possible values
   * include: 'HiveServer1', 'HiveServer2', 'HiveThriftServer'
   * @property {string} [thriftTransportProtocol] The transport protocol to use
   * in the Thrift layer. Possible values include: 'Binary', 'SASL', 'HTTP '
   * @property {string} authenticationType The authentication method used to
   * access the Hive server. Possible values include: 'Anonymous', 'Username',
   * 'UsernameAndPassword', 'WindowsAzureHDInsightService'
   * @property {object} [serviceDiscoveryMode] true to indicate using the
   * ZooKeeper service, false not.
   * @property {object} [zooKeeperNameSpace] The namespace on ZooKeeper under
   * which Hive Server 2 nodes are added.
   * @property {object} [useNativeQuery] Specifies whether the driver uses
   * native HiveQL queries,or converts them into an equivalent form in HiveQL.
   * @property {object} [username] The user name that you use to access Hive
   * Server.
   * @property {object} [password] The password corresponding to the user name
   * that you provided in the Username field
   * @property {string} [password.type] Polymorphic Discriminator
   * @property {object} [httpPath] The partial URL corresponding to the Hive
   * server.
   * @property {object} [enableSsl] Specifies whether the connections to the
   * server are encrypted using SSL. The default value is false.
   * @property {object} [trustedCertPath] The full path of the .pem file
   * containing trusted CA certificates for verifying the server when
   * connecting over SSL. This property can only be set when using SSL on
   * self-hosted IR. The default value is the cacerts.pem file installed with
   * the IR.
   * @property {object} [useSystemTrustStore] Specifies whether to use a CA
   * certificate from the system trust store or from a specified PEM file. The
   * default value is false.
   * @property {object} [allowHostNameCNMismatch] Specifies whether to require
   * a CA-issued SSL certificate name to match the host name of the server when
   * connecting over SSL. The default value is false.
   * @property {object} [allowSelfSignedServerCert] Specifies whether to allow
   * self-signed certificates from the server. The default value is false.
   * @property {object} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of HiveLinkedService
   *
   * @returns {object} metadata of HiveLinkedService
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'Hive',
      type: {
        name: 'Composite',
        polymorphicDiscriminator: {
          serializedName: 'type',
          clientName: 'type'
        },
        uberParent: 'LinkedService',
        className: 'HiveLinkedService',
        modelProperties: {
          connectVia: {
            required: false,
            serializedName: 'connectVia',
            type: {
              name: 'Composite',
              className: 'IntegrationRuntimeReference'
            }
          },
          description: {
            required: false,
            serializedName: 'description',
            type: {
              name: 'String'
            }
          },
          parameters: {
            required: false,
            serializedName: 'parameters',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'ParameterSpecificationElementType',
                  type: {
                    name: 'Composite',
                    className: 'ParameterSpecification'
                  }
              }
            }
          },
          annotations: {
            required: false,
            serializedName: 'annotations',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ObjectElementType',
                  type: {
                    name: 'Object'
                  }
              }
            }
          },
          type: {
            required: true,
            serializedName: 'type',
            isPolymorphicDiscriminator: true,
            type: {
              name: 'String'
            }
          },
          host: {
            required: true,
            serializedName: 'typeProperties.host',
            type: {
              name: 'Object'
            }
          },
          port: {
            required: false,
            serializedName: 'typeProperties.port',
            type: {
              name: 'Object'
            }
          },
          serverType: {
            required: false,
            serializedName: 'typeProperties.serverType',
            type: {
              name: 'String'
            }
          },
          thriftTransportProtocol: {
            required: false,
            serializedName: 'typeProperties.thriftTransportProtocol',
            type: {
              name: 'String'
            }
          },
          authenticationType: {
            required: true,
            serializedName: 'typeProperties.authenticationType',
            type: {
              name: 'String'
            }
          },
          serviceDiscoveryMode: {
            required: false,
            serializedName: 'typeProperties.serviceDiscoveryMode',
            type: {
              name: 'Object'
            }
          },
          zooKeeperNameSpace: {
            required: false,
            serializedName: 'typeProperties.zooKeeperNameSpace',
            type: {
              name: 'Object'
            }
          },
          useNativeQuery: {
            required: false,
            serializedName: 'typeProperties.useNativeQuery',
            type: {
              name: 'Object'
            }
          },
          username: {
            required: false,
            serializedName: 'typeProperties.username',
            type: {
              name: 'Object'
            }
          },
          password: {
            required: false,
            serializedName: 'typeProperties.password',
            type: {
              name: 'Composite',
              polymorphicDiscriminator: {
                serializedName: 'type',
                clientName: 'type'
              },
              uberParent: 'SecretBase',
              className: 'SecretBase'
            }
          },
          httpPath: {
            required: false,
            serializedName: 'typeProperties.httpPath',
            type: {
              name: 'Object'
            }
          },
          enableSsl: {
            required: false,
            serializedName: 'typeProperties.enableSsl',
            type: {
              name: 'Object'
            }
          },
          trustedCertPath: {
            required: false,
            serializedName: 'typeProperties.trustedCertPath',
            type: {
              name: 'Object'
            }
          },
          useSystemTrustStore: {
            required: false,
            serializedName: 'typeProperties.useSystemTrustStore',
            type: {
              name: 'Object'
            }
          },
          allowHostNameCNMismatch: {
            required: false,
            serializedName: 'typeProperties.allowHostNameCNMismatch',
            type: {
              name: 'Object'
            }
          },
          allowSelfSignedServerCert: {
            required: false,
            serializedName: 'typeProperties.allowSelfSignedServerCert',
            type: {
              name: 'Object'
            }
          },
          encryptedCredential: {
            required: false,
            serializedName: 'typeProperties.encryptedCredential',
            type: {
              name: 'Object'
            }
          }
        }
      }
    };
  }
}

module.exports = HiveLinkedService;
