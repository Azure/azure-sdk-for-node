/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Dataset resource type.
 *
 * @extends models['SubResource']
 */
class DatasetResource extends models['SubResource'] {
  /**
   * Create a DatasetResource.
   * @property {object} properties Dataset properties.
   * @property {string} [properties.description] Dataset description.
   * @property {object} [properties.structure] Columns that define the
   * structure of the dataset. Type: array (or Expression with resultType
   * array), itemType: DatasetDataElement.
   * @property {object} [properties.linkedServiceName] Linked service
   * reference.
   * @property {string} [properties.linkedServiceName.referenceName] Reference
   * LinkedService name.
   * @property {object} [properties.linkedServiceName.parameters] Arguments for
   * LinkedService.
   * @property {object} [properties.parameters] Parameters for dataset.
   * @property {array} [properties.annotations] List of tags that can be used
   * for describing the Dataset.
   * @property {object} [properties.folder] The folder that this Dataset is in.
   * If not specified, Dataset will appear at the root level.
   * @property {string} [properties.folder.name] The name of the folder that
   * this Dataset is in.
   * @property {string} [properties.type] Polymorphic Discriminator
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of DatasetResource
   *
   * @returns {object} metadata of DatasetResource
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'DatasetResource',
      type: {
        name: 'Composite',
        className: 'DatasetResource',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          etag: {
            required: false,
            readOnly: true,
            serializedName: 'etag',
            type: {
              name: 'String'
            }
          },
          properties: {
            required: true,
            serializedName: 'properties',
            defaultValue: {},
            type: {
              name: 'Composite',
              additionalProperties: {
                type: {
                  name: 'Dictionary',
                  value: {
                      required: false,
                      serializedName: 'ObjectElementType',
                      type: {
                        name: 'Object'
                      }
                  }
                }
              },
              polymorphicDiscriminator: {
                serializedName: 'type',
                clientName: 'type'
              },
              uberParent: 'Dataset',
              className: 'Dataset'
            }
          }
        }
      }
    };
  }
}

module.exports = DatasetResource;
