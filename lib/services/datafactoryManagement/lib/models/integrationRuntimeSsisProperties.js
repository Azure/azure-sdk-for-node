/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * SSIS properties for managed integration runtime.
 *
 */
class IntegrationRuntimeSsisProperties {
  /**
   * Create a IntegrationRuntimeSsisProperties.
   * @member {object} [catalogInfo] Catalog information for managed dedicated
   * integration runtime.
   * @member {string} [catalogInfo.catalogServerEndpoint] The catalog database
   * server URL.
   * @member {string} [catalogInfo.catalogAdminUserName] The administrator user
   * name of catalog database.
   * @member {object} [catalogInfo.catalogAdminPassword] The password of the
   * administrator user account of the catalog database.
   * @member {string} [catalogInfo.catalogAdminPassword.value] Value of secure
   * string.
   * @member {string} [catalogInfo.catalogPricingTier] The pricing tier for the
   * catalog database. The valid values could be found in
   * https://azure.microsoft.com/en-us/pricing/details/sql-database/. Possible
   * values include: 'Basic', 'Standard', 'Premium', 'PremiumRS'
   * @member {string} [licenseType] License type for bringing your own license
   * scenario. Possible values include: 'BasePrice', 'LicenseIncluded'
   * @member {object} [customSetupScriptProperties] Custom setup script
   * properties for a managed dedicated integration runtime.
   * @member {string} [customSetupScriptProperties.blobContainerUri] The URI of
   * the Azure blob container that contains the custom setup script.
   * @member {object} [customSetupScriptProperties.sasToken] The SAS token of
   * the Azure blob container.
   * @member {string} [customSetupScriptProperties.sasToken.value] Value of
   * secure string.
   * @member {string} [edition] The edition for the SSIS Integration Runtime.
   * Possible values include: 'Standard', 'Enterprise'
   */
  constructor() {
  }

  /**
   * Defines the metadata of IntegrationRuntimeSsisProperties
   *
   * @returns {object} metadata of IntegrationRuntimeSsisProperties
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'IntegrationRuntimeSsisProperties',
      type: {
        name: 'Composite',
        additionalProperties: {
          type: {
            name: 'Dictionary',
            value: {
                required: false,
                serializedName: 'ObjectElementType',
                type: {
                  name: 'Object'
                }
            }
          }
        },
        className: 'IntegrationRuntimeSsisProperties',
        modelProperties: {
          catalogInfo: {
            required: false,
            serializedName: 'catalogInfo',
            type: {
              name: 'Composite',
              additionalProperties: {
                type: {
                  name: 'Dictionary',
                  value: {
                      required: false,
                      serializedName: 'ObjectElementType',
                      type: {
                        name: 'Object'
                      }
                  }
                }
              },
              className: 'IntegrationRuntimeSsisCatalogInfo'
            }
          },
          licenseType: {
            required: false,
            serializedName: 'licenseType',
            type: {
              name: 'String'
            }
          },
          customSetupScriptProperties: {
            required: false,
            serializedName: 'customSetupScriptProperties',
            type: {
              name: 'Composite',
              className: 'IntegrationRuntimeCustomSetupScriptProperties'
            }
          },
          edition: {
            required: false,
            serializedName: 'edition',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = IntegrationRuntimeSsisProperties;
