/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * A copy activity SQL source.
 *
 * @extends models['CopySource']
 */
class SqlSource extends models['CopySource'] {
  /**
   * Create a SqlSource.
   * @property {object} [sqlReaderQuery] SQL reader query. Type: string (or
   * Expression with resultType string).
   * @property {object} [sqlReaderStoredProcedureName] Name of the stored
   * procedure for a SQL Database source. This cannot be used at the same time
   * as SqlReaderQuery. Type: string (or Expression with resultType string).
   * @property {object} [storedProcedureParameters] Value and type setting for
   * stored procedure parameters. Example: "{Parameter1: {value: "1", type:
   * "int"}}".
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of SqlSource
   *
   * @returns {object} metadata of SqlSource
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'SqlSource',
      type: {
        name: 'Composite',
        polymorphicDiscriminator: {
          serializedName: 'type',
          clientName: 'type'
        },
        uberParent: 'CopySource',
        className: 'SqlSource',
        modelProperties: {
          sourceRetryCount: {
            required: false,
            serializedName: 'sourceRetryCount',
            type: {
              name: 'Object'
            }
          },
          sourceRetryWait: {
            required: false,
            serializedName: 'sourceRetryWait',
            type: {
              name: 'Object'
            }
          },
          type: {
            required: true,
            serializedName: 'type',
            isPolymorphicDiscriminator: true,
            type: {
              name: 'String'
            }
          },
          sqlReaderQuery: {
            required: false,
            serializedName: 'sqlReaderQuery',
            type: {
              name: 'Object'
            }
          },
          sqlReaderStoredProcedureName: {
            required: false,
            serializedName: 'sqlReaderStoredProcedureName',
            type: {
              name: 'Object'
            }
          },
          storedProcedureParameters: {
            required: false,
            serializedName: 'storedProcedureParameters',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'StoredProcedureParameterElementType',
                  type: {
                    name: 'Composite',
                    className: 'StoredProcedureParameter'
                  }
              }
            }
          }
        }
      }
    };
  }
}

module.exports = SqlSource;
