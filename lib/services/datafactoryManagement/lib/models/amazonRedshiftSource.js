/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * A copy activity source for Amazon Redshift Source.
 *
 * @extends models['CopySource']
 */
class AmazonRedshiftSource extends models['CopySource'] {
  /**
   * Create a AmazonRedshiftSource.
   * @property {object} [query] Database query. Type: string (or Expression
   * with resultType string).
   * @property {object} [redshiftUnloadSettings] The Amazon S3 settings needed
   * for the interim Amazon S3 when copying from Amazon Redshift with unload.
   * With this, data from Amazon Redshift source will be unloaded into S3 first
   * and then copied into the targeted sink from the interim S3.
   * @property {object} [redshiftUnloadSettings.s3LinkedServiceName] The name
   * of the Amazon S3 linked service which will be used for the unload
   * operation when copying from the Amazon Redshift source.
   * @property {string}
   * [redshiftUnloadSettings.s3LinkedServiceName.referenceName] Reference
   * LinkedService name.
   * @property {object} [redshiftUnloadSettings.s3LinkedServiceName.parameters]
   * Arguments for LinkedService.
   * @property {object} [redshiftUnloadSettings.bucketName] The bucket of the
   * interim Amazon S3 which will be used to store the unloaded data from
   * Amazon Redshift source. The bucket must be in the same region as the
   * Amazon Redshift source. Type: string (or Expression with resultType
   * string).
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of AmazonRedshiftSource
   *
   * @returns {object} metadata of AmazonRedshiftSource
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'AmazonRedshiftSource',
      type: {
        name: 'Composite',
        polymorphicDiscriminator: {
          serializedName: 'type',
          clientName: 'type'
        },
        uberParent: 'CopySource',
        className: 'AmazonRedshiftSource',
        modelProperties: {
          sourceRetryCount: {
            required: false,
            serializedName: 'sourceRetryCount',
            type: {
              name: 'Object'
            }
          },
          sourceRetryWait: {
            required: false,
            serializedName: 'sourceRetryWait',
            type: {
              name: 'Object'
            }
          },
          type: {
            required: true,
            serializedName: 'type',
            isPolymorphicDiscriminator: true,
            type: {
              name: 'String'
            }
          },
          query: {
            required: false,
            serializedName: 'query',
            type: {
              name: 'Object'
            }
          },
          redshiftUnloadSettings: {
            required: false,
            serializedName: 'redshiftUnloadSettings',
            type: {
              name: 'Composite',
              className: 'RedshiftUnloadSettings'
            }
          }
        }
      }
    };
  }
}

module.exports = AmazonRedshiftSource;
