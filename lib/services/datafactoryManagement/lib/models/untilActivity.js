/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * This activity executes inner activities until the specified boolean
 * expression results to true or timeout is reached, whichever is earlier.
 *
 * @extends models['ControlActivity']
 */
class UntilActivity extends models['ControlActivity'] {
  /**
   * Create a UntilActivity.
   * @member {object} expression An expression that would evaluate to Boolean.
   * The loop will continue until this expression evaluates to true
   * @member {string} [expression.value] Expression value.
   * @member {object} [timeout] Specifies the timeout for the activity to run.
   * If there is no value specified, it takes the value of TimeSpan.FromDays(7)
   * which is 1 week as default. Type: string (or Expression with resultType
   * string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
   * Type: string (or Expression with resultType string), pattern:
   * ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
   * @member {array} activities List of activities to execute.
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of UntilActivity
   *
   * @returns {object} metadata of UntilActivity
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'Until',
      type: {
        name: 'Composite',
        className: 'UntilActivity',
        modelProperties: {
          name: {
            required: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          description: {
            required: false,
            serializedName: 'description',
            type: {
              name: 'String'
            }
          },
          dependsOn: {
            required: false,
            serializedName: 'dependsOn',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ActivityDependencyElementType',
                  type: {
                    name: 'Composite',
                    className: 'ActivityDependency'
                  }
              }
            }
          },
          type: {
            required: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          expression: {
            required: true,
            serializedName: 'typeProperties.expression',
            defaultValue: {},
            type: {
              name: 'Composite',
              className: 'Expression'
            }
          },
          timeout: {
            required: false,
            serializedName: 'typeProperties.timeout',
            type: {
              name: 'Object'
            }
          },
          activities: {
            required: true,
            serializedName: 'typeProperties.activities',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ActivityElementType',
                  type: {
                    name: 'Composite',
                    polymorphicDiscriminator: {
                      serializedName: 'type',
                      clientName: 'type'
                    },
                    uberParent: 'Activity',
                    className: 'Activity'
                  }
              }
            }
          }
        }
      }
    };
  }
}

module.exports = UntilActivity;
