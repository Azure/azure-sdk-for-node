/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Delete activity.
 *
 * @extends models['ExecutionActivity']
 */
class DeleteActivity extends models['ExecutionActivity'] {
  /**
   * Create a DeleteActivity.
   * @property {object} [recursive] If true, files or sub-folders under current
   * folder path will be deleted recursively. Default is false. Type: boolean
   * (or Expression with resultType boolean).
   * @property {number} [maxConcurrentConnections] The max concurrent
   * connections to connect data source at the same time.
   * @property {object} [enableLogging] Whether to record detailed logs of
   * delete-activity execution. Default value is false. Type: boolean (or
   * Expression with resultType boolean).
   * @property {object} [logStorageSettings] Log storage settings customer need
   * to provide when enableLogging is true.
   * @property {object} [logStorageSettings.linkedServiceName] Log storage
   * linked service reference.
   * @property {string} [logStorageSettings.linkedServiceName.referenceName]
   * Reference LinkedService name.
   * @property {object} [logStorageSettings.linkedServiceName.parameters]
   * Arguments for LinkedService.
   * @property {object} [logStorageSettings.path] The path to storage for
   * storing detailed logs of activity execution. Type: string (or Expression
   * with resultType string).
   * @property {object} dataset Delete activity dataset reference.
   * @property {string} [dataset.referenceName] Reference dataset name.
   * @property {object} [dataset.parameters] Arguments for dataset.
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of DeleteActivity
   *
   * @returns {object} metadata of DeleteActivity
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'Delete',
      type: {
        name: 'Composite',
        polymorphicDiscriminator: {
          serializedName: 'type',
          clientName: 'type'
        },
        uberParent: 'Activity',
        className: 'DeleteActivity',
        modelProperties: {
          name: {
            required: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          description: {
            required: false,
            serializedName: 'description',
            type: {
              name: 'String'
            }
          },
          dependsOn: {
            required: false,
            serializedName: 'dependsOn',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ActivityDependencyElementType',
                  type: {
                    name: 'Composite',
                    additionalProperties: {
                      type: {
                        name: 'Dictionary',
                        value: {
                            required: false,
                            serializedName: 'ObjectElementType',
                            type: {
                              name: 'Object'
                            }
                        }
                      }
                    },
                    className: 'ActivityDependency'
                  }
              }
            }
          },
          userProperties: {
            required: false,
            serializedName: 'userProperties',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'UserPropertyElementType',
                  type: {
                    name: 'Composite',
                    className: 'UserProperty'
                  }
              }
            }
          },
          type: {
            required: true,
            serializedName: 'type',
            isPolymorphicDiscriminator: true,
            type: {
              name: 'String'
            }
          },
          linkedServiceName: {
            required: false,
            serializedName: 'linkedServiceName',
            type: {
              name: 'Composite',
              className: 'LinkedServiceReference'
            }
          },
          policy: {
            required: false,
            serializedName: 'policy',
            type: {
              name: 'Composite',
              additionalProperties: {
                type: {
                  name: 'Dictionary',
                  value: {
                      required: false,
                      serializedName: 'ObjectElementType',
                      type: {
                        name: 'Object'
                      }
                  }
                }
              },
              className: 'ActivityPolicy'
            }
          },
          recursive: {
            required: false,
            serializedName: 'typeProperties.recursive',
            type: {
              name: 'Object'
            }
          },
          maxConcurrentConnections: {
            required: false,
            serializedName: 'typeProperties.maxConcurrentConnections',
            constraints: {
              InclusiveMinimum: 1
            },
            type: {
              name: 'Number'
            }
          },
          enableLogging: {
            required: false,
            serializedName: 'typeProperties.enableLogging',
            type: {
              name: 'Object'
            }
          },
          logStorageSettings: {
            required: false,
            serializedName: 'typeProperties.logStorageSettings',
            type: {
              name: 'Composite',
              additionalProperties: {
                type: {
                  name: 'Dictionary',
                  value: {
                      required: false,
                      serializedName: 'ObjectElementType',
                      type: {
                        name: 'Object'
                      }
                  }
                }
              },
              className: 'LogStorageSettings'
            }
          },
          dataset: {
            required: true,
            serializedName: 'typeProperties.dataset',
            defaultValue: {},
            type: {
              name: 'Composite',
              className: 'DatasetReference'
            }
          }
        }
      }
    };
  }
}

module.exports = DeleteActivity;
