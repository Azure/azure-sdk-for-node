/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * This activity is used for iterating over a collection and execute given
 * activities.
 *
 * @extends models['ControlActivity']
 */
class ForEachActivity extends models['ControlActivity'] {
  /**
   * Create a ForEachActivity.
   * @member {boolean} [isSequential] Should the loop be executed in sequence
   * or in parallel (max 20)
   * @member {object} items Collection to iterate.
   * @member {string} [items.value] Expression value.
   * @member {array} activities List of activities to execute .
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of ForEachActivity
   *
   * @returns {object} metadata of ForEachActivity
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'ForEach',
      type: {
        name: 'Composite',
        className: 'ForEachActivity',
        modelProperties: {
          name: {
            required: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          description: {
            required: false,
            serializedName: 'description',
            type: {
              name: 'String'
            }
          },
          dependsOn: {
            required: false,
            serializedName: 'dependsOn',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ActivityDependencyElementType',
                  type: {
                    name: 'Composite',
                    className: 'ActivityDependency'
                  }
              }
            }
          },
          type: {
            required: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          isSequential: {
            required: false,
            serializedName: 'typeProperties.isSequential',
            type: {
              name: 'Boolean'
            }
          },
          items: {
            required: true,
            serializedName: 'typeProperties.items',
            defaultValue: {},
            type: {
              name: 'Composite',
              className: 'Expression'
            }
          },
          activities: {
            required: true,
            serializedName: 'typeProperties.activities',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ActivityElementType',
                  type: {
                    name: 'Composite',
                    polymorphicDiscriminator: {
                      serializedName: 'type',
                      clientName: 'type'
                    },
                    uberParent: 'Activity',
                    className: 'Activity'
                  }
              }
            }
          }
        }
      }
    };
  }
}

module.exports = ForEachActivity;
