/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * HDInsight Spark activity.
 *
 * @extends models['ExecutionActivity']
 */
class HDInsightSparkActivity extends models['ExecutionActivity'] {
  /**
   * Create a HDInsightSparkActivity.
   * @member {object} rootPath The root path in 'sparkJobLinkedService' for all
   * the jobâ€™s files. Type: string (or Expression with resultType string).
   * @member {object} entryFilePath The relative path to the root folder of the
   * code/package to be executed. Type: string (or Expression with resultType
   * string).
   * @member {array} [arguments] The user-specified arguments to
   * HDInsightSparkActivity.
   * @member {string} [getDebugInfo] Debug info option. Possible values
   * include: 'None', 'Always', 'Failure'
   * @member {object} [sparkJobLinkedService] The storage linked service for
   * uploading the entry file and dependencies, and for receiving logs.
   * @member {string} [sparkJobLinkedService.referenceName] Reference
   * LinkedService name.
   * @member {string} [className] The application's Java/Spark main class.
   * @member {object} [proxyUser] The user to impersonate that will execute the
   * job. Type: string (or Expression with resultType string).
   * @member {object} [sparkConfig] Spark configuration property.
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of HDInsightSparkActivity
   *
   * @returns {object} metadata of HDInsightSparkActivity
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'HDInsightSpark',
      type: {
        name: 'Composite',
        className: 'HDInsightSparkActivity',
        modelProperties: {
          name: {
            required: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          description: {
            required: false,
            serializedName: 'description',
            type: {
              name: 'String'
            }
          },
          dependsOn: {
            required: false,
            serializedName: 'dependsOn',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ActivityDependencyElementType',
                  type: {
                    name: 'Composite',
                    className: 'ActivityDependency'
                  }
              }
            }
          },
          type: {
            required: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          linkedServiceName: {
            required: false,
            serializedName: 'linkedServiceName',
            type: {
              name: 'Composite',
              className: 'LinkedServiceReference'
            }
          },
          policy: {
            required: false,
            serializedName: 'policy',
            type: {
              name: 'Composite',
              className: 'ActivityPolicy'
            }
          },
          rootPath: {
            required: true,
            serializedName: 'typeProperties.rootPath',
            type: {
              name: 'Object'
            }
          },
          entryFilePath: {
            required: true,
            serializedName: 'typeProperties.entryFilePath',
            type: {
              name: 'Object'
            }
          },
          arguments: {
            required: false,
            serializedName: 'typeProperties.arguments',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ObjectElementType',
                  type: {
                    name: 'Object'
                  }
              }
            }
          },
          getDebugInfo: {
            required: false,
            serializedName: 'typeProperties.getDebugInfo',
            type: {
              name: 'String'
            }
          },
          sparkJobLinkedService: {
            required: false,
            serializedName: 'typeProperties.sparkJobLinkedService',
            type: {
              name: 'Composite',
              className: 'LinkedServiceReference'
            }
          },
          className: {
            required: false,
            serializedName: 'typeProperties.className',
            type: {
              name: 'String'
            }
          },
          proxyUser: {
            required: false,
            serializedName: 'typeProperties.proxyUser',
            type: {
              name: 'Object'
            }
          },
          sparkConfig: {
            required: false,
            serializedName: 'typeProperties.sparkConfig',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'ObjectElementType',
                  type: {
                    name: 'Object'
                  }
              }
            }
          }
        }
      }
    };
  }
}

module.exports = HDInsightSparkActivity;
