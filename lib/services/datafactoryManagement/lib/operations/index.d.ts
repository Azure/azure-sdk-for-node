/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback, HttpOperationResponse } from 'ms-rest';
import * as models from '../models';


/**
 * @class
 * Operations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the DataFactoryManagementClient.
 */
export interface Operations {


    /**
     * Lists the available Azure Data Factory API operations.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OperationListResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OperationListResponse>>;

    /**
     * Lists the available Azure Data Factory API operations.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OperationListResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OperationListResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OperationListResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.OperationListResponse>;
    list(callback: ServiceCallback<models.OperationListResponse>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OperationListResponse>): void;


    /**
     * Lists the available Azure Data Factory API operations.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OperationListResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OperationListResponse>>;

    /**
     * Lists the available Azure Data Factory API operations.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OperationListResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OperationListResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OperationListResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.OperationListResponse>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.OperationListResponse>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OperationListResponse>): void;
}

/**
 * @class
 * Factories
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the DataFactoryManagementClient.
 */
export interface Factories {


    /**
     * Lists factories under the specified subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<FactoryListResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.FactoryListResponse>>;

    /**
     * Lists factories under the specified subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {FactoryListResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {FactoryListResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link FactoryListResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.FactoryListResponse>;
    list(callback: ServiceCallback<models.FactoryListResponse>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FactoryListResponse>): void;


    /**
     * Updates a factory's repo information.
     *
     * @param {string} locationId The location identifier.
     *
     * @param {object} factoryRepoUpdate Update factory repo request definition.
     *
     * @param {string} [factoryRepoUpdate.factoryResourceId] The factory resource
     * id.
     *
     * @param {object} [factoryRepoUpdate.repoConfiguration] Git repo information
     * of the factory.
     *
     * @param {string} factoryRepoUpdate.repoConfiguration.accountName Account
     * name.
     *
     * @param {string} factoryRepoUpdate.repoConfiguration.repositoryName
     * Rrepository name.
     *
     * @param {string} factoryRepoUpdate.repoConfiguration.collaborationBranch
     * Collaboration branch.
     *
     * @param {string} factoryRepoUpdate.repoConfiguration.rootFolder Root folder.
     *
     * @param {string} [factoryRepoUpdate.repoConfiguration.lastCommitId] Last
     * commit id.
     *
     * @param {string} factoryRepoUpdate.repoConfiguration.type Polymorphic
     * Discriminator
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Factory>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    configureFactoryRepoWithHttpOperationResponse(locationId: string, factoryRepoUpdate: models.FactoryRepoUpdate, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Factory>>;

    /**
     * Updates a factory's repo information.
     *
     * @param {string} locationId The location identifier.
     *
     * @param {object} factoryRepoUpdate Update factory repo request definition.
     *
     * @param {string} [factoryRepoUpdate.factoryResourceId] The factory resource
     * id.
     *
     * @param {object} [factoryRepoUpdate.repoConfiguration] Git repo information
     * of the factory.
     *
     * @param {string} factoryRepoUpdate.repoConfiguration.accountName Account
     * name.
     *
     * @param {string} factoryRepoUpdate.repoConfiguration.repositoryName
     * Rrepository name.
     *
     * @param {string} factoryRepoUpdate.repoConfiguration.collaborationBranch
     * Collaboration branch.
     *
     * @param {string} factoryRepoUpdate.repoConfiguration.rootFolder Root folder.
     *
     * @param {string} [factoryRepoUpdate.repoConfiguration.lastCommitId] Last
     * commit id.
     *
     * @param {string} factoryRepoUpdate.repoConfiguration.type Polymorphic
     * Discriminator
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Factory} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Factory} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Factory} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    configureFactoryRepo(locationId: string, factoryRepoUpdate: models.FactoryRepoUpdate, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Factory>;
    configureFactoryRepo(locationId: string, factoryRepoUpdate: models.FactoryRepoUpdate, callback: ServiceCallback<models.Factory>): void;
    configureFactoryRepo(locationId: string, factoryRepoUpdate: models.FactoryRepoUpdate, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Factory>): void;


    /**
     * Lists factories.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<FactoryListResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupWithHttpOperationResponse(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.FactoryListResponse>>;

    /**
     * Lists factories.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {FactoryListResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {FactoryListResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link FactoryListResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroup(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.FactoryListResponse>;
    listByResourceGroup(resourceGroupName: string, callback: ServiceCallback<models.FactoryListResponse>): void;
    listByResourceGroup(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FactoryListResponse>): void;


    /**
     * Creates or updates a factory.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} factoryName The factory name.
     *
     * @param {object} factory Factory resource definition.
     *
     * @param {object} [factory.identity] Managed service identity of the factory.
     *
     * @param {object} [factory.repoConfiguration] Git repo information of the
     * factory.
     *
     * @param {string} factory.repoConfiguration.accountName Account name.
     *
     * @param {string} factory.repoConfiguration.repositoryName Rrepository name.
     *
     * @param {string} factory.repoConfiguration.collaborationBranch Collaboration
     * branch.
     *
     * @param {string} factory.repoConfiguration.rootFolder Root folder.
     *
     * @param {string} [factory.repoConfiguration.lastCommitId] Last commit id.
     *
     * @param {string} factory.repoConfiguration.type Polymorphic Discriminator
     *
     * @param {string} [factory.location] The resource location.
     *
     * @param {object} [factory.tags] The resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.ifMatch] ETag of the factory entity. Should only be
     * specified for update, for which it should match existing entity or can be *
     * for unconditional update.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Factory>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, factoryName: string, factory: models.Factory, options?: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Factory>>;

    /**
     * Creates or updates a factory.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} factoryName The factory name.
     *
     * @param {object} factory Factory resource definition.
     *
     * @param {object} [factory.identity] Managed service identity of the factory.
     *
     * @param {object} [factory.repoConfiguration] Git repo information of the
     * factory.
     *
     * @param {string} factory.repoConfiguration.accountName Account name.
     *
     * @param {string} factory.repoConfiguration.repositoryName Rrepository name.
     *
     * @param {string} factory.repoConfiguration.collaborationBranch Collaboration
     * branch.
     *
     * @param {string} factory.repoConfiguration.rootFolder Root folder.
     *
     * @param {string} [factory.repoConfiguration.lastCommitId] Last commit id.
     *
     * @param {string} factory.repoConfiguration.type Polymorphic Discriminator
     *
     * @param {string} [factory.location] The resource location.
     *
     * @param {object} [factory.tags] The resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.ifMatch] ETag of the factory entity. Should only be
     * specified for update, for which it should match existing entity or can be *
     * for unconditional update.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Factory} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Factory} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Factory} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, factoryName: string, factory: models.Factory, options?: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.Factory>;
    createOrUpdate(resourceGroupName: string, factoryName: string, factory: models.Factory, callback: ServiceCallback<models.Factory>): void;
    createOrUpdate(resourceGroupName: string, factoryName: string, factory: models.Factory, options: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Factory>): void;


    /**
     * Updates a factory.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} factoryName The factory name.
     *
     * @param {object} factoryUpdateParameters The parameters for updating a
     * factory.
     *
     * @param {object} [factoryUpdateParameters.tags] The resource tags.
     *
     * @param {object} [factoryUpdateParameters.identity] Managed service identity
     * of the factory.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Factory>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, factoryName: string, factoryUpdateParameters: models.FactoryUpdateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Factory>>;

    /**
     * Updates a factory.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} factoryName The factory name.
     *
     * @param {object} factoryUpdateParameters The parameters for updating a
     * factory.
     *
     * @param {object} [factoryUpdateParameters.tags] The resource tags.
     *
     * @param {object} [factoryUpdateParameters.identity] Managed service identity
     * of the factory.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Factory} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Factory} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Factory} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, factoryName: string, factoryUpdateParameters: models.FactoryUpdateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Factory>;
    update(resourceGroupName: string, factoryName: string, factoryUpdateParameters: models.FactoryUpdateParameters, callback: ServiceCallback<models.Factory>): void;
    update(resourceGroupName: string, factoryName: string, factoryUpdateParameters: models.FactoryUpdateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Factory>): void;


    /**
     * Gets a factory.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} factoryName The factory name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.ifNoneMatch] ETag of the factory entity. Should
     * only be specified for get. If the ETag matches the existing entity tag, or
     * if * was provided, then no content will be returned.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Factory>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, factoryName: string, options?: { ifNoneMatch? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Factory>>;

    /**
     * Gets a factory.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} factoryName The factory name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.ifNoneMatch] ETag of the factory entity. Should
     * only be specified for get. If the ETag matches the existing entity tag, or
     * if * was provided, then no content will be returned.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Factory} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Factory} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Factory} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, factoryName: string, options?: { ifNoneMatch? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.Factory>;
    get(resourceGroupName: string, factoryName: string, callback: ServiceCallback<models.Factory>): void;
    get(resourceGroupName: string, factoryName: string, options: { ifNoneMatch? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Factory>): void;


    /**
     * Deletes a factory.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} factoryName The factory name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, factoryName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a factory.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} factoryName The factory name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, factoryName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, factoryName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, factoryName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Lists factories under the specified subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<FactoryListResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.FactoryListResponse>>;

    /**
     * Lists factories under the specified subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {FactoryListResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {FactoryListResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link FactoryListResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.FactoryListResponse>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.FactoryListResponse>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FactoryListResponse>): void;


    /**
     * Lists factories.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<FactoryListResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.FactoryListResponse>>;

    /**
     * Lists factories.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {FactoryListResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {FactoryListResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link FactoryListResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroupNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.FactoryListResponse>;
    listByResourceGroupNext(nextPageLink: string, callback: ServiceCallback<models.FactoryListResponse>): void;
    listByResourceGroupNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FactoryListResponse>): void;
}

/**
 * @class
 * IntegrationRuntimes
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the DataFactoryManagementClient.
 */
export interface IntegrationRuntimes {


    /**
     * Lists integration runtimes.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} factoryName The factory name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<IntegrationRuntimeListResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByFactoryWithHttpOperationResponse(resourceGroupName: string, factoryName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.IntegrationRuntimeListResponse>>;

    /**
     * Lists integration runtimes.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} factoryName The factory name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {IntegrationRuntimeListResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {IntegrationRuntimeListResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link IntegrationRuntimeListResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByFactory(resourceGroupName: string, factoryName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.IntegrationRuntimeListResponse>;
    listByFactory(resourceGroupName: string, factoryName: string, callback: ServiceCallback<models.IntegrationRuntimeListResponse>): void;
    listByFactory(resourceGroupName: string, factoryName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.IntegrationRuntimeListResponse>): void;


    /**
     * Creates or updates an integration runtime.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} factoryName The factory name.
     *
     * @param {string} integrationRuntimeName The integration runtime name.
     *
     * @param {object} integrationRuntime Integration runtime resource definition.
     *
     * @param {object} integrationRuntime.properties Integration runtime
     * properties.
     *
     * @param {string} [integrationRuntime.properties.description] Integration
     * runtime description.
     *
     * @param {string} integrationRuntime.properties.type Polymorphic Discriminator
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.ifMatch] ETag of the integration runtime entity.
     * Should only be specified for update, for which it should match existing
     * entity or can be * for unconditional update.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<IntegrationRuntimeResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, integrationRuntime: models.IntegrationRuntimeResource, options?: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.IntegrationRuntimeResource>>;

    /**
     * Creates or updates an integration runtime.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} factoryName The factory name.
     *
     * @param {string} integrationRuntimeName The integration runtime name.
     *
     * @param {object} integrationRuntime Integration runtime resource definition.
     *
     * @param {object} integrationRuntime.properties Integration runtime
     * properties.
     *
     * @param {string} [integrationRuntime.properties.description] Integration
     * runtime description.
     *
     * @param {string} integrationRuntime.properties.type Polymorphic Discriminator
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.ifMatch] ETag of the integration runtime entity.
     * Should only be specified for update, for which it should match existing
     * entity or can be * for unconditional update.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {IntegrationRuntimeResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {IntegrationRuntimeResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link IntegrationRuntimeResource} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, integrationRuntime: models.IntegrationRuntimeResource, options?: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.IntegrationRuntimeResource>;
    createOrUpdate(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, integrationRuntime: models.IntegrationRuntimeResource, callback: ServiceCallback<models.IntegrationRuntimeResource>): void;
    createOrUpdate(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, integrationRuntime: models.IntegrationRuntimeResource, options: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.IntegrationRuntimeResource>): void;


    /**
     * Gets an integration runtime.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} factoryName The factory name.
     *
     * @param {string} integrationRuntimeName The integration runtime name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.ifNoneMatch] ETag of the integration runtime
     * entity. Should only be specified for get. If the ETag matches the existing
     * entity tag, or if * was provided, then no content will be returned.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<IntegrationRuntimeResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, options?: { ifNoneMatch? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.IntegrationRuntimeResource>>;

    /**
     * Gets an integration runtime.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} factoryName The factory name.
     *
     * @param {string} integrationRuntimeName The integration runtime name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.ifNoneMatch] ETag of the integration runtime
     * entity. Should only be specified for get. If the ETag matches the existing
     * entity tag, or if * was provided, then no content will be returned.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {IntegrationRuntimeResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {IntegrationRuntimeResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link IntegrationRuntimeResource} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, options?: { ifNoneMatch? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.IntegrationRuntimeResource>;
    get(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, callback: ServiceCallback<models.IntegrationRuntimeResource>): void;
    get(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, options: { ifNoneMatch? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.IntegrationRuntimeResource>): void;


    /**
     * Updates an integration runtime.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} factoryName The factory name.
     *
     * @param {string} integrationRuntimeName The integration runtime name.
     *
     * @param {object} updateIntegrationRuntimeRequest The parameters for updating
     * an integration runtime.
     *
     * @param {string} [updateIntegrationRuntimeRequest.autoUpdate] Enables or
     * disables the auto-update feature of the self-hosted integration runtime. See
     * https://go.microsoft.com/fwlink/?linkid=854189. Possible values include:
     * 'On', 'Off'
     *
     * @param {string} [updateIntegrationRuntimeRequest.updateDelayOffset] The time
     * offset (in hours) in the day, e.g., PT03H is 3 hours. The integration
     * runtime auto update will happen on that time.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<IntegrationRuntimeResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, updateIntegrationRuntimeRequest: models.UpdateIntegrationRuntimeRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.IntegrationRuntimeResource>>;

    /**
     * Updates an integration runtime.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} factoryName The factory name.
     *
     * @param {string} integrationRuntimeName The integration runtime name.
     *
     * @param {object} updateIntegrationRuntimeRequest The parameters for updating
     * an integration runtime.
     *
     * @param {string} [updateIntegrationRuntimeRequest.autoUpdate] Enables or
     * disables the auto-update feature of the self-hosted integration runtime. See
     * https://go.microsoft.com/fwlink/?linkid=854189. Possible values include:
     * 'On', 'Off'
     *
     * @param {string} [updateIntegrationRuntimeRequest.updateDelayOffset] The time
     * offset (in hours) in the day, e.g., PT03H is 3 hours. The integration
     * runtime auto update will happen on that time.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {IntegrationRuntimeResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {IntegrationRuntimeResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link IntegrationRuntimeResource} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, updateIntegrationRuntimeRequest: models.UpdateIntegrationRuntimeRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.IntegrationRuntimeResource>;
    update(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, updateIntegrationRuntimeRequest: models.UpdateIntegrationRuntimeRequest, callback: ServiceCallback<models.IntegrationRuntimeResource>): void;
    update(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, updateIntegrationRuntimeRequest: models.UpdateIntegrationRuntimeRequest, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.IntegrationRuntimeResource>): void;


    /**
     * Deletes an integration runtime.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} factoryName The factory name.
     *
     * @param {string} integrationRuntimeName The integration runtime name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes an integration runtime.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} factoryName The factory name.
     *
     * @param {string} integrationRuntimeName The integration runtime name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets detailed status information for an integration runtime.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} factoryName The factory name.
     *
     * @param {string} integrationRuntimeName The integration runtime name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<IntegrationRuntimeStatusResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getStatusWithHttpOperationResponse(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.IntegrationRuntimeStatusResponse>>;

    /**
     * Gets detailed status information for an integration runtime.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} factoryName The factory name.
     *
     * @param {string} integrationRuntimeName The integration runtime name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {IntegrationRuntimeStatusResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {IntegrationRuntimeStatusResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link IntegrationRuntimeStatusResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getStatus(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.IntegrationRuntimeStatusResponse>;
    getStatus(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, callback: ServiceCallback<models.IntegrationRuntimeStatusResponse>): void;
    getStatus(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.IntegrationRuntimeStatusResponse>): void;


    /**
     * Gets the on-premises integration runtime connection information for
     * encrypting the on-premises data source credentials.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} factoryName The factory name.
     *
     * @param {string} integrationRuntimeName The integration runtime name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<IntegrationRuntimeConnectionInfo>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getConnectionInfoWithHttpOperationResponse(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.IntegrationRuntimeConnectionInfo>>;

    /**
     * Gets the on-premises integration runtime connection information for
     * encrypting the on-premises data source credentials.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} factoryName The factory name.
     *
     * @param {string} integrationRuntimeName The integration runtime name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {IntegrationRuntimeConnectionInfo} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {IntegrationRuntimeConnectionInfo} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link IntegrationRuntimeConnectionInfo} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getConnectionInfo(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.IntegrationRuntimeConnectionInfo>;
    getConnectionInfo(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, callback: ServiceCallback<models.IntegrationRuntimeConnectionInfo>): void;
    getConnectionInfo(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.IntegrationRuntimeConnectionInfo>): void;


    /**
     * Regenerates the authentication key for an integration runtime.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} factoryName The factory name.
     *
     * @param {string} integrationRuntimeName The integration runtime name.
     *
     * @param {object} regenerateKeyParameters The parameters for regenerating
     * integration runtime authentication key.
     *
     * @param {string} [regenerateKeyParameters.keyName] The name of the
     * authentication key to regenerate. Possible values include: 'authKey1',
     * 'authKey2'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<IntegrationRuntimeAuthKeys>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    regenerateAuthKeyWithHttpOperationResponse(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, regenerateKeyParameters: models.IntegrationRuntimeRegenerateKeyParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.IntegrationRuntimeAuthKeys>>;

    /**
     * Regenerates the authentication key for an integration runtime.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} factoryName The factory name.
     *
     * @param {string} integrationRuntimeName The integration runtime name.
     *
     * @param {object} regenerateKeyParameters The parameters for regenerating
     * integration runtime authentication key.
     *
     * @param {string} [regenerateKeyParameters.keyName] The name of the
     * authentication key to regenerate. Possible values include: 'authKey1',
     * 'authKey2'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {IntegrationRuntimeAuthKeys} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {IntegrationRuntimeAuthKeys} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link IntegrationRuntimeAuthKeys} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    regenerateAuthKey(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, regenerateKeyParameters: models.IntegrationRuntimeRegenerateKeyParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.IntegrationRuntimeAuthKeys>;
    regenerateAuthKey(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, regenerateKeyParameters: models.IntegrationRuntimeRegenerateKeyParameters, callback: ServiceCallback<models.IntegrationRuntimeAuthKeys>): void;
    regenerateAuthKey(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, regenerateKeyParameters: models.IntegrationRuntimeRegenerateKeyParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.IntegrationRuntimeAuthKeys>): void;


    /**
     * Retrieves the authentication keys for an integration runtime.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} factoryName The factory name.
     *
     * @param {string} integrationRuntimeName The integration runtime name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<IntegrationRuntimeAuthKeys>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listAuthKeysWithHttpOperationResponse(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.IntegrationRuntimeAuthKeys>>;

    /**
     * Retrieves the authentication keys for an integration runtime.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} factoryName The factory name.
     *
     * @param {string} integrationRuntimeName The integration runtime name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {IntegrationRuntimeAuthKeys} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {IntegrationRuntimeAuthKeys} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link IntegrationRuntimeAuthKeys} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listAuthKeys(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.IntegrationRuntimeAuthKeys>;
    listAuthKeys(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, callback: ServiceCallback<models.IntegrationRuntimeAuthKeys>): void;
    listAuthKeys(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.IntegrationRuntimeAuthKeys>): void;


    /**
     * Starts a ManagedReserved type integration runtime.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} factoryName The factory name.
     *
     * @param {string} integrationRuntimeName The integration runtime name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<IntegrationRuntimeStatusResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    startWithHttpOperationResponse(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.IntegrationRuntimeStatusResponse>>;

    /**
     * Starts a ManagedReserved type integration runtime.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} factoryName The factory name.
     *
     * @param {string} integrationRuntimeName The integration runtime name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {IntegrationRuntimeStatusResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {IntegrationRuntimeStatusResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link IntegrationRuntimeStatusResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    start(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.IntegrationRuntimeStatusResponse>;
    start(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, callback: ServiceCallback<models.IntegrationRuntimeStatusResponse>): void;
    start(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.IntegrationRuntimeStatusResponse>): void;


    /**
     * Stops a ManagedReserved type integration runtime.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} factoryName The factory name.
     *
     * @param {string} integrationRuntimeName The integration runtime name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    stopWithHttpOperationResponse(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Stops a ManagedReserved type integration runtime.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} factoryName The factory name.
     *
     * @param {string} integrationRuntimeName The integration runtime name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    stop(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    stop(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, callback: ServiceCallback<void>): void;
    stop(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Force the integration runtime to synchronize credentials across integration
     * runtime nodes, and this will override the credentials across all worker
     * nodes with those available on the dispatcher node. If you already have the
     * latest credential backup file, you should manually import it (preferred) on
     * any self-hosted integration runtime node than using this API directly.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} factoryName The factory name.
     *
     * @param {string} integrationRuntimeName The integration runtime name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    syncCredentialsWithHttpOperationResponse(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Force the integration runtime to synchronize credentials across integration
     * runtime nodes, and this will override the credentials across all worker
     * nodes with those available on the dispatcher node. If you already have the
     * latest credential backup file, you should manually import it (preferred) on
     * any self-hosted integration runtime node than using this API directly.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} factoryName The factory name.
     *
     * @param {string} integrationRuntimeName The integration runtime name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    syncCredentials(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    syncCredentials(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, callback: ServiceCallback<void>): void;
    syncCredentials(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Get the integration runtime monitoring data, which includes the monitor data
     * for all the nodes under this integration runtime.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} factoryName The factory name.
     *
     * @param {string} integrationRuntimeName The integration runtime name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<IntegrationRuntimeMonitoringData>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getMonitoringDataWithHttpOperationResponse(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.IntegrationRuntimeMonitoringData>>;

    /**
     * Get the integration runtime monitoring data, which includes the monitor data
     * for all the nodes under this integration runtime.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} factoryName The factory name.
     *
     * @param {string} integrationRuntimeName The integration runtime name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {IntegrationRuntimeMonitoringData} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {IntegrationRuntimeMonitoringData} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link IntegrationRuntimeMonitoringData} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getMonitoringData(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.IntegrationRuntimeMonitoringData>;
    getMonitoringData(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, callback: ServiceCallback<models.IntegrationRuntimeMonitoringData>): void;
    getMonitoringData(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.IntegrationRuntimeMonitoringData>): void;


    /**
     * Upgrade self-hosted integration runtime to latest version if availably.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} factoryName The factory name.
     *
     * @param {string} integrationRuntimeName The integration runtime name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    upgradeWithHttpOperationResponse(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Upgrade self-hosted integration runtime to latest version if availably.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} factoryName The factory name.
     *
     * @param {string} integrationRuntimeName The integration runtime name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    upgrade(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    upgrade(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, callback: ServiceCallback<void>): void;
    upgrade(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Remove all linked integration runtimes under specific data factory in a
     * self-hosted integration runtime.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} factoryName The factory name.
     *
     * @param {string} integrationRuntimeName The integration runtime name.
     *
     * @param {object} linkedIntegrationRuntimeRequest The data factory name for
     * the linked integration runtime.
     *
     * @param {string} linkedIntegrationRuntimeRequest.linkedFactoryName The data
     * factory name for linked integration runtime.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    removeLinksWithHttpOperationResponse(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, linkedIntegrationRuntimeRequest: models.LinkedIntegrationRuntimeRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Remove all linked integration runtimes under specific data factory in a
     * self-hosted integration runtime.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} factoryName The factory name.
     *
     * @param {string} integrationRuntimeName The integration runtime name.
     *
     * @param {object} linkedIntegrationRuntimeRequest The data factory name for
     * the linked integration runtime.
     *
     * @param {string} linkedIntegrationRuntimeRequest.linkedFactoryName The data
     * factory name for linked integration runtime.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    removeLinks(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, linkedIntegrationRuntimeRequest: models.LinkedIntegrationRuntimeRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    removeLinks(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, linkedIntegrationRuntimeRequest: models.LinkedIntegrationRuntimeRequest, callback: ServiceCallback<void>): void;
    removeLinks(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, linkedIntegrationRuntimeRequest: models.LinkedIntegrationRuntimeRequest, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Create a linked integration runtime entry in a shared integration runtime.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} factoryName The factory name.
     *
     * @param {string} integrationRuntimeName The integration runtime name.
     *
     * @param {object} createLinkedIntegrationRuntimeRequest The linked integration
     * runtime properties.
     *
     * @param {string} [createLinkedIntegrationRuntimeRequest.name] The name of the
     * linked integration runtime.
     *
     * @param {string} [createLinkedIntegrationRuntimeRequest.subscriptionId] The
     * ID of the subscription that the linked integration runtime belongs to.
     *
     * @param {string} [createLinkedIntegrationRuntimeRequest.dataFactoryName] The
     * name of the data factory that the linked integration runtime belongs to.
     *
     * @param {string} [createLinkedIntegrationRuntimeRequest.dataFactoryLocation]
     * The location of the data factory that the linked integration runtime belongs
     * to.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<IntegrationRuntimeStatusResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createLinkedIntegrationRuntimeWithHttpOperationResponse(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, createLinkedIntegrationRuntimeRequest: models.CreateLinkedIntegrationRuntimeRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.IntegrationRuntimeStatusResponse>>;

    /**
     * Create a linked integration runtime entry in a shared integration runtime.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} factoryName The factory name.
     *
     * @param {string} integrationRuntimeName The integration runtime name.
     *
     * @param {object} createLinkedIntegrationRuntimeRequest The linked integration
     * runtime properties.
     *
     * @param {string} [createLinkedIntegrationRuntimeRequest.name] The name of the
     * linked integration runtime.
     *
     * @param {string} [createLinkedIntegrationRuntimeRequest.subscriptionId] The
     * ID of the subscription that the linked integration runtime belongs to.
     *
     * @param {string} [createLinkedIntegrationRuntimeRequest.dataFactoryName] The
     * name of the data factory that the linked integration runtime belongs to.
     *
     * @param {string} [createLinkedIntegrationRuntimeRequest.dataFactoryLocation]
     * The location of the data factory that the linked integration runtime belongs
     * to.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {IntegrationRuntimeStatusResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {IntegrationRuntimeStatusResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link IntegrationRuntimeStatusResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createLinkedIntegrationRuntime(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, createLinkedIntegrationRuntimeRequest: models.CreateLinkedIntegrationRuntimeRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.IntegrationRuntimeStatusResponse>;
    createLinkedIntegrationRuntime(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, createLinkedIntegrationRuntimeRequest: models.CreateLinkedIntegrationRuntimeRequest, callback: ServiceCallback<models.IntegrationRuntimeStatusResponse>): void;
    createLinkedIntegrationRuntime(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, createLinkedIntegrationRuntimeRequest: models.CreateLinkedIntegrationRuntimeRequest, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.IntegrationRuntimeStatusResponse>): void;


    /**
     * Starts a ManagedReserved type integration runtime.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} factoryName The factory name.
     *
     * @param {string} integrationRuntimeName The integration runtime name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<IntegrationRuntimeStatusResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginStartWithHttpOperationResponse(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.IntegrationRuntimeStatusResponse>>;

    /**
     * Starts a ManagedReserved type integration runtime.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} factoryName The factory name.
     *
     * @param {string} integrationRuntimeName The integration runtime name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {IntegrationRuntimeStatusResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {IntegrationRuntimeStatusResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link IntegrationRuntimeStatusResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginStart(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.IntegrationRuntimeStatusResponse>;
    beginStart(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, callback: ServiceCallback<models.IntegrationRuntimeStatusResponse>): void;
    beginStart(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.IntegrationRuntimeStatusResponse>): void;


    /**
     * Stops a ManagedReserved type integration runtime.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} factoryName The factory name.
     *
     * @param {string} integrationRuntimeName The integration runtime name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginStopWithHttpOperationResponse(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Stops a ManagedReserved type integration runtime.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} factoryName The factory name.
     *
     * @param {string} integrationRuntimeName The integration runtime name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginStop(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginStop(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, callback: ServiceCallback<void>): void;
    beginStop(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Lists integration runtimes.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<IntegrationRuntimeListResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByFactoryNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.IntegrationRuntimeListResponse>>;

    /**
     * Lists integration runtimes.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {IntegrationRuntimeListResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {IntegrationRuntimeListResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link IntegrationRuntimeListResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByFactoryNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.IntegrationRuntimeListResponse>;
    listByFactoryNext(nextPageLink: string, callback: ServiceCallback<models.IntegrationRuntimeListResponse>): void;
    listByFactoryNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.IntegrationRuntimeListResponse>): void;
}

/**
 * @class
 * IntegrationRuntimeNodes
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the DataFactoryManagementClient.
 */
export interface IntegrationRuntimeNodes {


    /**
     * Gets a self-hosted integration runtime node.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} factoryName The factory name.
     *
     * @param {string} integrationRuntimeName The integration runtime name.
     *
     * @param {string} nodeName The integration runtime node name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SelfHostedIntegrationRuntimeNode>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, nodeName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SelfHostedIntegrationRuntimeNode>>;

    /**
     * Gets a self-hosted integration runtime node.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} factoryName The factory name.
     *
     * @param {string} integrationRuntimeName The integration runtime name.
     *
     * @param {string} nodeName The integration runtime node name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SelfHostedIntegrationRuntimeNode} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SelfHostedIntegrationRuntimeNode} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SelfHostedIntegrationRuntimeNode} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, nodeName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SelfHostedIntegrationRuntimeNode>;
    get(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, nodeName: string, callback: ServiceCallback<models.SelfHostedIntegrationRuntimeNode>): void;
    get(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, nodeName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SelfHostedIntegrationRuntimeNode>): void;


    /**
     * Deletes a self-hosted integration runtime node.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} factoryName The factory name.
     *
     * @param {string} integrationRuntimeName The integration runtime name.
     *
     * @param {string} nodeName The integration runtime node name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, nodeName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a self-hosted integration runtime node.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} factoryName The factory name.
     *
     * @param {string} integrationRuntimeName The integration runtime name.
     *
     * @param {string} nodeName The integration runtime node name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, nodeName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, nodeName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, nodeName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Updates a self-hosted integration runtime node.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} factoryName The factory name.
     *
     * @param {string} integrationRuntimeName The integration runtime name.
     *
     * @param {string} nodeName The integration runtime node name.
     *
     * @param {object} updateIntegrationRuntimeNodeRequest The parameters for
     * updating an integration runtime node.
     *
     * @param {number} [updateIntegrationRuntimeNodeRequest.concurrentJobsLimit]
     * The number of concurrent jobs permitted to run on the integration runtime
     * node. Values between 1 and maxConcurrentJobs(inclusive) are allowed.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SelfHostedIntegrationRuntimeNode>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, nodeName: string, updateIntegrationRuntimeNodeRequest: models.UpdateIntegrationRuntimeNodeRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SelfHostedIntegrationRuntimeNode>>;

    /**
     * Updates a self-hosted integration runtime node.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} factoryName The factory name.
     *
     * @param {string} integrationRuntimeName The integration runtime name.
     *
     * @param {string} nodeName The integration runtime node name.
     *
     * @param {object} updateIntegrationRuntimeNodeRequest The parameters for
     * updating an integration runtime node.
     *
     * @param {number} [updateIntegrationRuntimeNodeRequest.concurrentJobsLimit]
     * The number of concurrent jobs permitted to run on the integration runtime
     * node. Values between 1 and maxConcurrentJobs(inclusive) are allowed.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SelfHostedIntegrationRuntimeNode} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SelfHostedIntegrationRuntimeNode} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SelfHostedIntegrationRuntimeNode} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, nodeName: string, updateIntegrationRuntimeNodeRequest: models.UpdateIntegrationRuntimeNodeRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SelfHostedIntegrationRuntimeNode>;
    update(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, nodeName: string, updateIntegrationRuntimeNodeRequest: models.UpdateIntegrationRuntimeNodeRequest, callback: ServiceCallback<models.SelfHostedIntegrationRuntimeNode>): void;
    update(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, nodeName: string, updateIntegrationRuntimeNodeRequest: models.UpdateIntegrationRuntimeNodeRequest, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SelfHostedIntegrationRuntimeNode>): void;


    /**
     * Get the IP address of self-hosted integration runtime node.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} factoryName The factory name.
     *
     * @param {string} integrationRuntimeName The integration runtime name.
     *
     * @param {string} nodeName The integration runtime node name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<IntegrationRuntimeNodeIpAddress>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getIpAddressWithHttpOperationResponse(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, nodeName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.IntegrationRuntimeNodeIpAddress>>;

    /**
     * Get the IP address of self-hosted integration runtime node.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} factoryName The factory name.
     *
     * @param {string} integrationRuntimeName The integration runtime name.
     *
     * @param {string} nodeName The integration runtime node name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {IntegrationRuntimeNodeIpAddress} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {IntegrationRuntimeNodeIpAddress} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link IntegrationRuntimeNodeIpAddress} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getIpAddress(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, nodeName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.IntegrationRuntimeNodeIpAddress>;
    getIpAddress(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, nodeName: string, callback: ServiceCallback<models.IntegrationRuntimeNodeIpAddress>): void;
    getIpAddress(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, nodeName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.IntegrationRuntimeNodeIpAddress>): void;
}

/**
 * @class
 * LinkedServices
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the DataFactoryManagementClient.
 */
export interface LinkedServices {


    /**
     * Lists linked services.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} factoryName The factory name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<LinkedServiceListResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByFactoryWithHttpOperationResponse(resourceGroupName: string, factoryName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.LinkedServiceListResponse>>;

    /**
     * Lists linked services.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} factoryName The factory name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {LinkedServiceListResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {LinkedServiceListResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link LinkedServiceListResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByFactory(resourceGroupName: string, factoryName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.LinkedServiceListResponse>;
    listByFactory(resourceGroupName: string, factoryName: string, callback: ServiceCallback<models.LinkedServiceListResponse>): void;
    listByFactory(resourceGroupName: string, factoryName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.LinkedServiceListResponse>): void;


    /**
     * Creates or updates a linked service.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} factoryName The factory name.
     *
     * @param {string} linkedServiceName The linked service name.
     *
     * @param {object} linkedService Linked service resource definition.
     *
     * @param {object} linkedService.properties Properties of linked service.
     *
     * @param {object} [linkedService.properties.connectVia] The integration
     * runtime reference.
     *
     * @param {string} linkedService.properties.connectVia.referenceName Reference
     * integration runtime name.
     *
     * @param {object} [linkedService.properties.connectVia.parameters] Arguments
     * for integration runtime.
     *
     * @param {string} [linkedService.properties.description] Linked service
     * description.
     *
     * @param {object} [linkedService.properties.parameters] Parameters for linked
     * service.
     *
     * @param {array} [linkedService.properties.annotations] List of tags that can
     * be used for describing the Dataset.
     *
     * @param {string} linkedService.properties.type Polymorphic Discriminator
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.ifMatch] ETag of the linkedService entity.  Should
     * only be specified for update, for which it should match existing entity or
     * can be * for unconditional update.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<LinkedServiceResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, factoryName: string, linkedServiceName: string, linkedService: models.LinkedServiceResource, options?: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.LinkedServiceResource>>;

    /**
     * Creates or updates a linked service.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} factoryName The factory name.
     *
     * @param {string} linkedServiceName The linked service name.
     *
     * @param {object} linkedService Linked service resource definition.
     *
     * @param {object} linkedService.properties Properties of linked service.
     *
     * @param {object} [linkedService.properties.connectVia] The integration
     * runtime reference.
     *
     * @param {string} linkedService.properties.connectVia.referenceName Reference
     * integration runtime name.
     *
     * @param {object} [linkedService.properties.connectVia.parameters] Arguments
     * for integration runtime.
     *
     * @param {string} [linkedService.properties.description] Linked service
     * description.
     *
     * @param {object} [linkedService.properties.parameters] Parameters for linked
     * service.
     *
     * @param {array} [linkedService.properties.annotations] List of tags that can
     * be used for describing the Dataset.
     *
     * @param {string} linkedService.properties.type Polymorphic Discriminator
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.ifMatch] ETag of the linkedService entity.  Should
     * only be specified for update, for which it should match existing entity or
     * can be * for unconditional update.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {LinkedServiceResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {LinkedServiceResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link LinkedServiceResource} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, factoryName: string, linkedServiceName: string, linkedService: models.LinkedServiceResource, options?: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.LinkedServiceResource>;
    createOrUpdate(resourceGroupName: string, factoryName: string, linkedServiceName: string, linkedService: models.LinkedServiceResource, callback: ServiceCallback<models.LinkedServiceResource>): void;
    createOrUpdate(resourceGroupName: string, factoryName: string, linkedServiceName: string, linkedService: models.LinkedServiceResource, options: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.LinkedServiceResource>): void;


    /**
     * Gets a linked service.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} factoryName The factory name.
     *
     * @param {string} linkedServiceName The linked service name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.ifNoneMatch] ETag of the linked service entity.
     * Should only be specified for get. If the ETag matches the existing entity
     * tag, or if * was provided, then no content will be returned.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<LinkedServiceResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, factoryName: string, linkedServiceName: string, options?: { ifNoneMatch? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.LinkedServiceResource>>;

    /**
     * Gets a linked service.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} factoryName The factory name.
     *
     * @param {string} linkedServiceName The linked service name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.ifNoneMatch] ETag of the linked service entity.
     * Should only be specified for get. If the ETag matches the existing entity
     * tag, or if * was provided, then no content will be returned.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {LinkedServiceResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {LinkedServiceResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link LinkedServiceResource} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, factoryName: string, linkedServiceName: string, options?: { ifNoneMatch? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.LinkedServiceResource>;
    get(resourceGroupName: string, factoryName: string, linkedServiceName: string, callback: ServiceCallback<models.LinkedServiceResource>): void;
    get(resourceGroupName: string, factoryName: string, linkedServiceName: string, options: { ifNoneMatch? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.LinkedServiceResource>): void;


    /**
     * Deletes a linked service.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} factoryName The factory name.
     *
     * @param {string} linkedServiceName The linked service name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, factoryName: string, linkedServiceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a linked service.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} factoryName The factory name.
     *
     * @param {string} linkedServiceName The linked service name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, factoryName: string, linkedServiceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, factoryName: string, linkedServiceName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, factoryName: string, linkedServiceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Lists linked services.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<LinkedServiceListResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByFactoryNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.LinkedServiceListResponse>>;

    /**
     * Lists linked services.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {LinkedServiceListResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {LinkedServiceListResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link LinkedServiceListResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByFactoryNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.LinkedServiceListResponse>;
    listByFactoryNext(nextPageLink: string, callback: ServiceCallback<models.LinkedServiceListResponse>): void;
    listByFactoryNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.LinkedServiceListResponse>): void;
}

/**
 * @class
 * Datasets
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the DataFactoryManagementClient.
 */
export interface Datasets {


    /**
     * Lists datasets.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} factoryName The factory name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DatasetListResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByFactoryWithHttpOperationResponse(resourceGroupName: string, factoryName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DatasetListResponse>>;

    /**
     * Lists datasets.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} factoryName The factory name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DatasetListResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DatasetListResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DatasetListResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByFactory(resourceGroupName: string, factoryName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DatasetListResponse>;
    listByFactory(resourceGroupName: string, factoryName: string, callback: ServiceCallback<models.DatasetListResponse>): void;
    listByFactory(resourceGroupName: string, factoryName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DatasetListResponse>): void;


    /**
     * Creates or updates a dataset.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} factoryName The factory name.
     *
     * @param {string} datasetName The dataset name.
     *
     * @param {object} dataset Dataset resource definition.
     *
     * @param {object} dataset.properties Dataset properties.
     *
     * @param {string} [dataset.properties.description] Dataset description.
     *
     * @param {object} [dataset.properties.structure] Columns that define the
     * structure of the dataset. Type: array (or Expression with resultType array),
     * itemType: DatasetDataElement.
     *
     * @param {object} dataset.properties.linkedServiceName Linked service
     * reference.
     *
     * @param {string} dataset.properties.linkedServiceName.referenceName Reference
     * LinkedService name.
     *
     * @param {object} [dataset.properties.linkedServiceName.parameters] Arguments
     * for LinkedService.
     *
     * @param {object} [dataset.properties.parameters] Parameters for dataset.
     *
     * @param {array} [dataset.properties.annotations] List of tags that can be
     * used for describing the Dataset.
     *
     * @param {string} dataset.properties.type Polymorphic Discriminator
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.ifMatch] ETag of the dataset entity.  Should only
     * be specified for update, for which it should match existing entity or can be
     * * for unconditional update.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DatasetResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, factoryName: string, datasetName: string, dataset: models.DatasetResource, options?: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DatasetResource>>;

    /**
     * Creates or updates a dataset.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} factoryName The factory name.
     *
     * @param {string} datasetName The dataset name.
     *
     * @param {object} dataset Dataset resource definition.
     *
     * @param {object} dataset.properties Dataset properties.
     *
     * @param {string} [dataset.properties.description] Dataset description.
     *
     * @param {object} [dataset.properties.structure] Columns that define the
     * structure of the dataset. Type: array (or Expression with resultType array),
     * itemType: DatasetDataElement.
     *
     * @param {object} dataset.properties.linkedServiceName Linked service
     * reference.
     *
     * @param {string} dataset.properties.linkedServiceName.referenceName Reference
     * LinkedService name.
     *
     * @param {object} [dataset.properties.linkedServiceName.parameters] Arguments
     * for LinkedService.
     *
     * @param {object} [dataset.properties.parameters] Parameters for dataset.
     *
     * @param {array} [dataset.properties.annotations] List of tags that can be
     * used for describing the Dataset.
     *
     * @param {string} dataset.properties.type Polymorphic Discriminator
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.ifMatch] ETag of the dataset entity.  Should only
     * be specified for update, for which it should match existing entity or can be
     * * for unconditional update.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DatasetResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DatasetResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DatasetResource} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, factoryName: string, datasetName: string, dataset: models.DatasetResource, options?: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.DatasetResource>;
    createOrUpdate(resourceGroupName: string, factoryName: string, datasetName: string, dataset: models.DatasetResource, callback: ServiceCallback<models.DatasetResource>): void;
    createOrUpdate(resourceGroupName: string, factoryName: string, datasetName: string, dataset: models.DatasetResource, options: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DatasetResource>): void;


    /**
     * Gets a dataset.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} factoryName The factory name.
     *
     * @param {string} datasetName The dataset name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.ifNoneMatch] ETag of the dataset entity. Should
     * only be specified for get. If the ETag matches the existing entity tag, or
     * if * was provided, then no content will be returned.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DatasetResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, factoryName: string, datasetName: string, options?: { ifNoneMatch? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DatasetResource>>;

    /**
     * Gets a dataset.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} factoryName The factory name.
     *
     * @param {string} datasetName The dataset name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.ifNoneMatch] ETag of the dataset entity. Should
     * only be specified for get. If the ETag matches the existing entity tag, or
     * if * was provided, then no content will be returned.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DatasetResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DatasetResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DatasetResource} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, factoryName: string, datasetName: string, options?: { ifNoneMatch? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.DatasetResource>;
    get(resourceGroupName: string, factoryName: string, datasetName: string, callback: ServiceCallback<models.DatasetResource>): void;
    get(resourceGroupName: string, factoryName: string, datasetName: string, options: { ifNoneMatch? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DatasetResource>): void;


    /**
     * Deletes a dataset.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} factoryName The factory name.
     *
     * @param {string} datasetName The dataset name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, factoryName: string, datasetName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a dataset.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} factoryName The factory name.
     *
     * @param {string} datasetName The dataset name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, factoryName: string, datasetName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, factoryName: string, datasetName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, factoryName: string, datasetName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Lists datasets.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DatasetListResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByFactoryNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DatasetListResponse>>;

    /**
     * Lists datasets.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DatasetListResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DatasetListResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DatasetListResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByFactoryNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DatasetListResponse>;
    listByFactoryNext(nextPageLink: string, callback: ServiceCallback<models.DatasetListResponse>): void;
    listByFactoryNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DatasetListResponse>): void;
}

/**
 * @class
 * Pipelines
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the DataFactoryManagementClient.
 */
export interface Pipelines {


    /**
     * Lists pipelines.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} factoryName The factory name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PipelineListResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByFactoryWithHttpOperationResponse(resourceGroupName: string, factoryName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PipelineListResponse>>;

    /**
     * Lists pipelines.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} factoryName The factory name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PipelineListResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PipelineListResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PipelineListResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByFactory(resourceGroupName: string, factoryName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PipelineListResponse>;
    listByFactory(resourceGroupName: string, factoryName: string, callback: ServiceCallback<models.PipelineListResponse>): void;
    listByFactory(resourceGroupName: string, factoryName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PipelineListResponse>): void;


    /**
     * Creates or updates a pipeline.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} factoryName The factory name.
     *
     * @param {string} pipelineName The pipeline name.
     *
     * @param {object} pipelineParameter Pipeline resource definition.
     *
     * @param {string} [pipelineParameter.description] The description of the
     * pipeline.
     *
     * @param {array} [pipelineParameter.activities] List of activities in
     * pipeline.
     *
     * @param {object} [pipelineParameter.parameters] List of parameters for
     * pipeline.
     *
     * @param {number} [pipelineParameter.concurrency] The max number of concurrent
     * runs for the pipeline.
     *
     * @param {array} [pipelineParameter.annotations] List of tags that can be used
     * for describing the Pipeline.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.ifMatch] ETag of the pipeline entity.  Should only
     * be specified for update, for which it should match existing entity or can be
     * * for unconditional update.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PipelineResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, factoryName: string, pipelineName: string, pipelineParameter: models.PipelineResource, options?: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PipelineResource>>;

    /**
     * Creates or updates a pipeline.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} factoryName The factory name.
     *
     * @param {string} pipelineName The pipeline name.
     *
     * @param {object} pipelineParameter Pipeline resource definition.
     *
     * @param {string} [pipelineParameter.description] The description of the
     * pipeline.
     *
     * @param {array} [pipelineParameter.activities] List of activities in
     * pipeline.
     *
     * @param {object} [pipelineParameter.parameters] List of parameters for
     * pipeline.
     *
     * @param {number} [pipelineParameter.concurrency] The max number of concurrent
     * runs for the pipeline.
     *
     * @param {array} [pipelineParameter.annotations] List of tags that can be used
     * for describing the Pipeline.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.ifMatch] ETag of the pipeline entity.  Should only
     * be specified for update, for which it should match existing entity or can be
     * * for unconditional update.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PipelineResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PipelineResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PipelineResource} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, factoryName: string, pipelineName: string, pipelineParameter: models.PipelineResource, options?: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.PipelineResource>;
    createOrUpdate(resourceGroupName: string, factoryName: string, pipelineName: string, pipelineParameter: models.PipelineResource, callback: ServiceCallback<models.PipelineResource>): void;
    createOrUpdate(resourceGroupName: string, factoryName: string, pipelineName: string, pipelineParameter: models.PipelineResource, options: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PipelineResource>): void;


    /**
     * Gets a pipeline.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} factoryName The factory name.
     *
     * @param {string} pipelineName The pipeline name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.ifNoneMatch] ETag of the pipeline entity. Should
     * only be specified for get. If the ETag matches the existing entity tag, or
     * if * was provided, then no content will be returned.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PipelineResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, factoryName: string, pipelineName: string, options?: { ifNoneMatch? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PipelineResource>>;

    /**
     * Gets a pipeline.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} factoryName The factory name.
     *
     * @param {string} pipelineName The pipeline name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.ifNoneMatch] ETag of the pipeline entity. Should
     * only be specified for get. If the ETag matches the existing entity tag, or
     * if * was provided, then no content will be returned.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PipelineResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PipelineResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PipelineResource} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, factoryName: string, pipelineName: string, options?: { ifNoneMatch? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.PipelineResource>;
    get(resourceGroupName: string, factoryName: string, pipelineName: string, callback: ServiceCallback<models.PipelineResource>): void;
    get(resourceGroupName: string, factoryName: string, pipelineName: string, options: { ifNoneMatch? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PipelineResource>): void;


    /**
     * Deletes a pipeline.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} factoryName The factory name.
     *
     * @param {string} pipelineName The pipeline name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, factoryName: string, pipelineName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a pipeline.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} factoryName The factory name.
     *
     * @param {string} pipelineName The pipeline name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, factoryName: string, pipelineName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, factoryName: string, pipelineName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, factoryName: string, pipelineName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Creates a run of a pipeline.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} factoryName The factory name.
     *
     * @param {string} pipelineName The pipeline name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.referencePipelineRunId] The pipeline run
     * identifier. If run ID is specified the parameters of the the specified run
     * will be used to create a new run.
     *
     * @param {object} [options.parameters] Parameters of the pipeline run. These
     * parameters will be used only if the runId is not specified.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<CreateRunResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createRunWithHttpOperationResponse(resourceGroupName: string, factoryName: string, pipelineName: string, options?: { referencePipelineRunId? : string, parameters? : { [propertyName: string]: any }, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CreateRunResponse>>;

    /**
     * Creates a run of a pipeline.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} factoryName The factory name.
     *
     * @param {string} pipelineName The pipeline name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.referencePipelineRunId] The pipeline run
     * identifier. If run ID is specified the parameters of the the specified run
     * will be used to create a new run.
     *
     * @param {object} [options.parameters] Parameters of the pipeline run. These
     * parameters will be used only if the runId is not specified.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {CreateRunResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {CreateRunResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link CreateRunResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createRun(resourceGroupName: string, factoryName: string, pipelineName: string, options?: { referencePipelineRunId? : string, parameters? : { [propertyName: string]: any }, customHeaders? : { [headerName: string]: string; } }): Promise<models.CreateRunResponse>;
    createRun(resourceGroupName: string, factoryName: string, pipelineName: string, callback: ServiceCallback<models.CreateRunResponse>): void;
    createRun(resourceGroupName: string, factoryName: string, pipelineName: string, options: { referencePipelineRunId? : string, parameters? : { [propertyName: string]: any }, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CreateRunResponse>): void;


    /**
     * Lists pipelines.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PipelineListResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByFactoryNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PipelineListResponse>>;

    /**
     * Lists pipelines.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PipelineListResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PipelineListResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PipelineListResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByFactoryNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PipelineListResponse>;
    listByFactoryNext(nextPageLink: string, callback: ServiceCallback<models.PipelineListResponse>): void;
    listByFactoryNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PipelineListResponse>): void;
}

/**
 * @class
 * PipelineRuns
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the DataFactoryManagementClient.
 */
export interface PipelineRuns {


    /**
     * Query pipeline runs in the factory based on input filter conditions.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} factoryName The factory name.
     *
     * @param {object} filterParameters Parameters to filter the pipeline run.
     *
     * @param {string} [filterParameters.continuationToken] The continuation token
     * for getting the next page of results. Null for first page.
     *
     * @param {date} filterParameters.lastUpdatedAfter The time at or after which
     * the run event was updated in 'ISO 8601' format.
     *
     * @param {date} filterParameters.lastUpdatedBefore The time at or before which
     * the run event was updated in 'ISO 8601' format.
     *
     * @param {array} [filterParameters.filters] List of filters.
     *
     * @param {array} [filterParameters.orderBy] List of OrderBy option.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PipelineRunsQueryResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    queryByFactoryWithHttpOperationResponse(resourceGroupName: string, factoryName: string, filterParameters: models.RunFilterParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PipelineRunsQueryResponse>>;

    /**
     * Query pipeline runs in the factory based on input filter conditions.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} factoryName The factory name.
     *
     * @param {object} filterParameters Parameters to filter the pipeline run.
     *
     * @param {string} [filterParameters.continuationToken] The continuation token
     * for getting the next page of results. Null for first page.
     *
     * @param {date} filterParameters.lastUpdatedAfter The time at or after which
     * the run event was updated in 'ISO 8601' format.
     *
     * @param {date} filterParameters.lastUpdatedBefore The time at or before which
     * the run event was updated in 'ISO 8601' format.
     *
     * @param {array} [filterParameters.filters] List of filters.
     *
     * @param {array} [filterParameters.orderBy] List of OrderBy option.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PipelineRunsQueryResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PipelineRunsQueryResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PipelineRunsQueryResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    queryByFactory(resourceGroupName: string, factoryName: string, filterParameters: models.RunFilterParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PipelineRunsQueryResponse>;
    queryByFactory(resourceGroupName: string, factoryName: string, filterParameters: models.RunFilterParameters, callback: ServiceCallback<models.PipelineRunsQueryResponse>): void;
    queryByFactory(resourceGroupName: string, factoryName: string, filterParameters: models.RunFilterParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PipelineRunsQueryResponse>): void;


    /**
     * Get a pipeline run by its run ID.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} factoryName The factory name.
     *
     * @param {string} runId The pipeline run identifier.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PipelineRun>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, factoryName: string, runId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PipelineRun>>;

    /**
     * Get a pipeline run by its run ID.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} factoryName The factory name.
     *
     * @param {string} runId The pipeline run identifier.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PipelineRun} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PipelineRun} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PipelineRun} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, factoryName: string, runId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PipelineRun>;
    get(resourceGroupName: string, factoryName: string, runId: string, callback: ServiceCallback<models.PipelineRun>): void;
    get(resourceGroupName: string, factoryName: string, runId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PipelineRun>): void;


    /**
     * Cancel a pipeline run by its run ID.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} factoryName The factory name.
     *
     * @param {string} runId The pipeline run identifier.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    cancelWithHttpOperationResponse(resourceGroupName: string, factoryName: string, runId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Cancel a pipeline run by its run ID.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} factoryName The factory name.
     *
     * @param {string} runId The pipeline run identifier.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    cancel(resourceGroupName: string, factoryName: string, runId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    cancel(resourceGroupName: string, factoryName: string, runId: string, callback: ServiceCallback<void>): void;
    cancel(resourceGroupName: string, factoryName: string, runId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
}

/**
 * @class
 * ActivityRuns
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the DataFactoryManagementClient.
 */
export interface ActivityRuns {


    /**
     * Query activity runs based on input filter conditions.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} factoryName The factory name.
     *
     * @param {string} runId The pipeline run identifier.
     *
     * @param {object} filterParameters Parameters to filter the activity runs.
     *
     * @param {string} [filterParameters.continuationToken] The continuation token
     * for getting the next page of results. Null for first page.
     *
     * @param {date} filterParameters.lastUpdatedAfter The time at or after which
     * the run event was updated in 'ISO 8601' format.
     *
     * @param {date} filterParameters.lastUpdatedBefore The time at or before which
     * the run event was updated in 'ISO 8601' format.
     *
     * @param {array} [filterParameters.filters] List of filters.
     *
     * @param {array} [filterParameters.orderBy] List of OrderBy option.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ActivityRunsQueryResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    queryByPipelineRunWithHttpOperationResponse(resourceGroupName: string, factoryName: string, runId: string, filterParameters: models.RunFilterParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ActivityRunsQueryResponse>>;

    /**
     * Query activity runs based on input filter conditions.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} factoryName The factory name.
     *
     * @param {string} runId The pipeline run identifier.
     *
     * @param {object} filterParameters Parameters to filter the activity runs.
     *
     * @param {string} [filterParameters.continuationToken] The continuation token
     * for getting the next page of results. Null for first page.
     *
     * @param {date} filterParameters.lastUpdatedAfter The time at or after which
     * the run event was updated in 'ISO 8601' format.
     *
     * @param {date} filterParameters.lastUpdatedBefore The time at or before which
     * the run event was updated in 'ISO 8601' format.
     *
     * @param {array} [filterParameters.filters] List of filters.
     *
     * @param {array} [filterParameters.orderBy] List of OrderBy option.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ActivityRunsQueryResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ActivityRunsQueryResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ActivityRunsQueryResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    queryByPipelineRun(resourceGroupName: string, factoryName: string, runId: string, filterParameters: models.RunFilterParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ActivityRunsQueryResponse>;
    queryByPipelineRun(resourceGroupName: string, factoryName: string, runId: string, filterParameters: models.RunFilterParameters, callback: ServiceCallback<models.ActivityRunsQueryResponse>): void;
    queryByPipelineRun(resourceGroupName: string, factoryName: string, runId: string, filterParameters: models.RunFilterParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ActivityRunsQueryResponse>): void;
}

/**
 * @class
 * Triggers
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the DataFactoryManagementClient.
 */
export interface Triggers {


    /**
     * Lists triggers.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} factoryName The factory name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<TriggerListResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByFactoryWithHttpOperationResponse(resourceGroupName: string, factoryName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TriggerListResponse>>;

    /**
     * Lists triggers.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} factoryName The factory name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {TriggerListResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {TriggerListResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link TriggerListResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByFactory(resourceGroupName: string, factoryName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.TriggerListResponse>;
    listByFactory(resourceGroupName: string, factoryName: string, callback: ServiceCallback<models.TriggerListResponse>): void;
    listByFactory(resourceGroupName: string, factoryName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TriggerListResponse>): void;


    /**
     * Creates or updates a trigger.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} factoryName The factory name.
     *
     * @param {string} triggerName The trigger name.
     *
     * @param {object} trigger Trigger resource definition.
     *
     * @param {object} trigger.properties Properties of the trigger.
     *
     * @param {string} [trigger.properties.description] Trigger description.
     *
     * @param {string} trigger.properties.type Polymorphic Discriminator
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.ifMatch] ETag of the trigger entity.  Should only
     * be specified for update, for which it should match existing entity or can be
     * * for unconditional update.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<TriggerResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, factoryName: string, triggerName: string, trigger: models.TriggerResource, options?: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TriggerResource>>;

    /**
     * Creates or updates a trigger.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} factoryName The factory name.
     *
     * @param {string} triggerName The trigger name.
     *
     * @param {object} trigger Trigger resource definition.
     *
     * @param {object} trigger.properties Properties of the trigger.
     *
     * @param {string} [trigger.properties.description] Trigger description.
     *
     * @param {string} trigger.properties.type Polymorphic Discriminator
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.ifMatch] ETag of the trigger entity.  Should only
     * be specified for update, for which it should match existing entity or can be
     * * for unconditional update.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {TriggerResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {TriggerResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link TriggerResource} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, factoryName: string, triggerName: string, trigger: models.TriggerResource, options?: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.TriggerResource>;
    createOrUpdate(resourceGroupName: string, factoryName: string, triggerName: string, trigger: models.TriggerResource, callback: ServiceCallback<models.TriggerResource>): void;
    createOrUpdate(resourceGroupName: string, factoryName: string, triggerName: string, trigger: models.TriggerResource, options: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TriggerResource>): void;


    /**
     * Gets a trigger.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} factoryName The factory name.
     *
     * @param {string} triggerName The trigger name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.ifNoneMatch] ETag of the trigger entity. Should
     * only be specified for get. If the ETag matches the existing entity tag, or
     * if * was provided, then no content will be returned.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<TriggerResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, factoryName: string, triggerName: string, options?: { ifNoneMatch? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TriggerResource>>;

    /**
     * Gets a trigger.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} factoryName The factory name.
     *
     * @param {string} triggerName The trigger name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.ifNoneMatch] ETag of the trigger entity. Should
     * only be specified for get. If the ETag matches the existing entity tag, or
     * if * was provided, then no content will be returned.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {TriggerResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {TriggerResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link TriggerResource} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, factoryName: string, triggerName: string, options?: { ifNoneMatch? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.TriggerResource>;
    get(resourceGroupName: string, factoryName: string, triggerName: string, callback: ServiceCallback<models.TriggerResource>): void;
    get(resourceGroupName: string, factoryName: string, triggerName: string, options: { ifNoneMatch? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TriggerResource>): void;


    /**
     * Deletes a trigger.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} factoryName The factory name.
     *
     * @param {string} triggerName The trigger name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, factoryName: string, triggerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a trigger.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} factoryName The factory name.
     *
     * @param {string} triggerName The trigger name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, factoryName: string, triggerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, factoryName: string, triggerName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, factoryName: string, triggerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Starts a trigger.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} factoryName The factory name.
     *
     * @param {string} triggerName The trigger name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    startWithHttpOperationResponse(resourceGroupName: string, factoryName: string, triggerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Starts a trigger.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} factoryName The factory name.
     *
     * @param {string} triggerName The trigger name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    start(resourceGroupName: string, factoryName: string, triggerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    start(resourceGroupName: string, factoryName: string, triggerName: string, callback: ServiceCallback<void>): void;
    start(resourceGroupName: string, factoryName: string, triggerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Stops a trigger.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} factoryName The factory name.
     *
     * @param {string} triggerName The trigger name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    stopWithHttpOperationResponse(resourceGroupName: string, factoryName: string, triggerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Stops a trigger.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} factoryName The factory name.
     *
     * @param {string} triggerName The trigger name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    stop(resourceGroupName: string, factoryName: string, triggerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    stop(resourceGroupName: string, factoryName: string, triggerName: string, callback: ServiceCallback<void>): void;
    stop(resourceGroupName: string, factoryName: string, triggerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Starts a trigger.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} factoryName The factory name.
     *
     * @param {string} triggerName The trigger name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginStartWithHttpOperationResponse(resourceGroupName: string, factoryName: string, triggerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Starts a trigger.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} factoryName The factory name.
     *
     * @param {string} triggerName The trigger name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginStart(resourceGroupName: string, factoryName: string, triggerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginStart(resourceGroupName: string, factoryName: string, triggerName: string, callback: ServiceCallback<void>): void;
    beginStart(resourceGroupName: string, factoryName: string, triggerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Stops a trigger.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} factoryName The factory name.
     *
     * @param {string} triggerName The trigger name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginStopWithHttpOperationResponse(resourceGroupName: string, factoryName: string, triggerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Stops a trigger.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} factoryName The factory name.
     *
     * @param {string} triggerName The trigger name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginStop(resourceGroupName: string, factoryName: string, triggerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginStop(resourceGroupName: string, factoryName: string, triggerName: string, callback: ServiceCallback<void>): void;
    beginStop(resourceGroupName: string, factoryName: string, triggerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Lists triggers.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<TriggerListResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByFactoryNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TriggerListResponse>>;

    /**
     * Lists triggers.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {TriggerListResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {TriggerListResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link TriggerListResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByFactoryNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.TriggerListResponse>;
    listByFactoryNext(nextPageLink: string, callback: ServiceCallback<models.TriggerListResponse>): void;
    listByFactoryNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TriggerListResponse>): void;
}

/**
 * @class
 * TriggerRuns
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the DataFactoryManagementClient.
 */
export interface TriggerRuns {


    /**
     * Query trigger runs.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} factoryName The factory name.
     *
     * @param {object} filterParameters Parameters to filter the pipeline run.
     *
     * @param {string} [filterParameters.continuationToken] The continuation token
     * for getting the next page of results. Null for first page.
     *
     * @param {date} filterParameters.lastUpdatedAfter The time at or after which
     * the run event was updated in 'ISO 8601' format.
     *
     * @param {date} filterParameters.lastUpdatedBefore The time at or before which
     * the run event was updated in 'ISO 8601' format.
     *
     * @param {array} [filterParameters.filters] List of filters.
     *
     * @param {array} [filterParameters.orderBy] List of OrderBy option.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<TriggerRunsQueryResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    queryByFactoryWithHttpOperationResponse(resourceGroupName: string, factoryName: string, filterParameters: models.RunFilterParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TriggerRunsQueryResponse>>;

    /**
     * Query trigger runs.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} factoryName The factory name.
     *
     * @param {object} filterParameters Parameters to filter the pipeline run.
     *
     * @param {string} [filterParameters.continuationToken] The continuation token
     * for getting the next page of results. Null for first page.
     *
     * @param {date} filterParameters.lastUpdatedAfter The time at or after which
     * the run event was updated in 'ISO 8601' format.
     *
     * @param {date} filterParameters.lastUpdatedBefore The time at or before which
     * the run event was updated in 'ISO 8601' format.
     *
     * @param {array} [filterParameters.filters] List of filters.
     *
     * @param {array} [filterParameters.orderBy] List of OrderBy option.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {TriggerRunsQueryResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {TriggerRunsQueryResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link TriggerRunsQueryResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    queryByFactory(resourceGroupName: string, factoryName: string, filterParameters: models.RunFilterParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.TriggerRunsQueryResponse>;
    queryByFactory(resourceGroupName: string, factoryName: string, filterParameters: models.RunFilterParameters, callback: ServiceCallback<models.TriggerRunsQueryResponse>): void;
    queryByFactory(resourceGroupName: string, factoryName: string, filterParameters: models.RunFilterParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TriggerRunsQueryResponse>): void;
}
