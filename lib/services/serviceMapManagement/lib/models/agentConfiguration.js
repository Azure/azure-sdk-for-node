/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * Describes the configuration of the Dependency Agent installed on a machine.
 *
 */
class AgentConfiguration {
  /**
   * Create a AgentConfiguration.
   * @property {string} agentId Health Service Agent unique identifier.
   * @property {string} [dependencyAgentId] Dependency Agent unique identifier.
   * @property {string} [dependencyAgentVersion] Dependency Agent version
   * number.
   * @property {string} [dependencyAgentRevision] Dependency Agent revision
   * number.
   * @property {string} [rebootStatus] Specifies whether the machine has been
   * rebooted since the Dependency Agent installation. Possible values include:
   * 'unknown', 'rebooted', 'notRebooted'
   * @property {number} [clockGranularity] Machine clock granularity in
   * milliseconds.
   */
  constructor() {
  }

  /**
   * Defines the metadata of AgentConfiguration
   *
   * @returns {object} metadata of AgentConfiguration
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'AgentConfiguration',
      type: {
        name: 'Composite',
        className: 'AgentConfiguration',
        modelProperties: {
          agentId: {
            required: true,
            serializedName: 'agentId',
            type: {
              name: 'String'
            }
          },
          dependencyAgentId: {
            required: false,
            serializedName: 'dependencyAgentId',
            type: {
              name: 'String'
            }
          },
          dependencyAgentVersion: {
            required: false,
            serializedName: 'dependencyAgentVersion',
            type: {
              name: 'String'
            }
          },
          dependencyAgentRevision: {
            required: false,
            serializedName: 'dependencyAgentRevision',
            type: {
              name: 'String'
            }
          },
          rebootStatus: {
            required: false,
            serializedName: 'rebootStatus',
            type: {
              name: 'Enum',
              allowedValues: [ 'unknown', 'rebooted', 'notRebooted' ]
            }
          },
          clockGranularity: {
            required: false,
            serializedName: 'clockGranularity',
            type: {
              name: 'Number'
            }
          }
        }
      }
    };
  }
}

module.exports = AgentConfiguration;
