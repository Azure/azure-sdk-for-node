/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * A network connection.
 *
 * @extends models['Relationship']
 */
class Connection extends models['Relationship'] {
  /**
   * Create a Connection.
   * @property {object} source Source resource of the relationship.
   * @property {string} [source.id] Resource URI.
   * @property {string} [source.type] Resource type qualifier.
   * @property {string} [source.name] Resource name.
   * @property {string} [source.kind] Polymorphic Discriminator
   * @property {object} destination Destination resource of the relationship.
   * @property {string} [destination.id] Resource URI.
   * @property {string} [destination.type] Resource type qualifier.
   * @property {string} [destination.name] Resource name.
   * @property {string} [destination.kind] Polymorphic Discriminator
   * @property {date} [startTime] Relationship start time.
   * @property {date} [endTime] Relationship end time.
   * @property {object} [serverPort] Reference to the server port via which
   * this connection has been established.
   * @property {object} [serverPort.machine] Machine hosting the port.
   * @property {string} [serverPort.ipAddress] IP address of the port.
   * @property {number} [serverPort.portNumber] Port number.
   * @property {string} [failureState] Specifies whether there are only
   * successful, failed or a mixture of both connections represented by this
   * resource. Possible values include: 'ok', 'failed', 'mixed'
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of Connection
   *
   * @returns {object} metadata of Connection
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'rel:connection',
      type: {
        name: 'Composite',
        polymorphicDiscriminator: {
          serializedName: 'kind',
          clientName: 'kind'
        },
        uberParent: 'BaseResource',
        className: 'Connection',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          kind: {
            required: true,
            serializedName: 'kind',
            isPolymorphicDiscriminator: true,
            type: {
              name: 'String'
            }
          },
          source: {
            required: true,
            serializedName: 'properties.source',
            type: {
              name: 'Composite',
              polymorphicDiscriminator: {
                serializedName: 'kind',
                clientName: 'kind'
              },
              uberParent: 'ResourceReference',
              className: 'ResourceReference'
            }
          },
          destination: {
            required: true,
            serializedName: 'properties.destination',
            type: {
              name: 'Composite',
              polymorphicDiscriminator: {
                serializedName: 'kind',
                clientName: 'kind'
              },
              uberParent: 'ResourceReference',
              className: 'ResourceReference'
            }
          },
          startTime: {
            required: false,
            serializedName: 'properties.startTime',
            type: {
              name: 'DateTime'
            }
          },
          endTime: {
            required: false,
            serializedName: 'properties.endTime',
            type: {
              name: 'DateTime'
            }
          },
          serverPort: {
            required: false,
            serializedName: 'properties.serverPort',
            type: {
              name: 'Composite',
              polymorphicDiscriminator: {
                serializedName: 'kind',
                clientName: 'kind'
              },
              uberParent: 'ResourceReference',
              className: 'PortReference'
            }
          },
          failureState: {
            required: false,
            serializedName: 'properties.failureState',
            type: {
              name: 'Enum',
              allowedValues: [ 'ok', 'failed', 'mixed' ]
            }
          }
        }
      }
    };
  }
}

module.exports = Connection;
