/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * A machine resource represents a discovered computer system. It can be
 * *monitored*, i.e., a Dependency Agent is running on it, or *discovered*,
 * i.e., its existence was inferred by observing the data stream from monitored
 * machines. As machines change, prior versions of the machine resource are
 * preserved and available for access. A machine is live during an interval of
 * time, if either its Dependency Agent has reported data during (parts) of
 * that interval, or a Dependency agent running on other machines has reported
 * activity associated with the machine.
 *
 * @extends models['CoreResource']
 */
class Machine extends models['CoreResource'] {
  /**
   * Create a Machine.
   * @property {date} [timestamp] UTC date and time when this resource was
   * updated in the system.
   * @property {string} [monitoringState] Specifies whether the machine is
   * actively monitored or discovered. Possible values include: 'monitored',
   * 'discovered'
   * @property {string} [virtualizationState] Specifies whether the machine is
   * virtualized. Possible values include: 'unknown', 'physical', 'virtual',
   * 'hypervisor'
   * @property {string} [displayName] Name to use for display purposes
   * @property {string} [computerName] Name of the machine, e.g., server
   * @property {string} [fullyQualifiedDomainName] Fully-qualified name of the
   * machine, e.g., server.company.com
   * @property {date} [bootTime] UTC date and time when the machine last booted
   * @property {object} [timezone] Timezone of the machine.
   * @property {string} [timezone.fullName] Timezone full name.
   * @property {object} [agent] Dependency Agent configuration.
   * @property {string} [agent.agentId] Health Service Agent unique identifier.
   * @property {string} [agent.dependencyAgentId] Dependency Agent unique
   * identifier.
   * @property {string} [agent.dependencyAgentVersion] Dependency Agent version
   * number.
   * @property {string} [agent.dependencyAgentRevision] Dependency Agent
   * revision number.
   * @property {string} [agent.rebootStatus] Specifies whether the machine has
   * been rebooted since the Dependency Agent installation. Possible values
   * include: 'unknown', 'rebooted', 'notRebooted'
   * @property {number} [agent.clockGranularity] Machine clock granularity in
   * milliseconds.
   * @property {object} [resources] Machine resources (memory, cpu, etc.).
   * @property {number} [resources.physicalMemory] Physical memory in megabytes
   * (MB).
   * @property {number} [resources.cpus] Number of CPUs.
   * @property {number} [resources.cpuSpeed] CPU speed in megahertz (Mhz).
   * @property {string} [resources.cpuSpeedAccuracy] Describes the accuracy of
   * the cpuSpeed field. Possible values include: 'actual', 'estimated'
   * @property {object} [networking] Network configuration (ips, gateways, dns,
   * etc.)
   * @property {array} [networking.ipv4Interfaces] IPv4 interfaces.
   * @property {array} [networking.ipv6Interfaces] IPv6 interfaces.
   * @property {array} [networking.defaultIpv4Gateways] Default IPv4 gateways.
   * @property {array} [networking.macAddresses] MAC addresses of all active
   * network interfaces.
   * @property {array} [networking.dnsNames] DNS names associated with the
   * machine.
   * @property {object} [operatingSystem] Operating system information.
   * @property {string} [operatingSystem.family] Windows, Linux, etc. Possible
   * values include: 'unknown', 'windows', 'linux', 'solaris', 'aix'
   * @property {string} [operatingSystem.fullName] Operating system full name.
   * @property {string} [operatingSystem.bitness] Operating system bitness
   * (32-bit or 64-bit). Possible values include: '32bit', '64bit'
   * @property {object} [virtualMachine] Virtualization-related configuration.
   * Present only when `virtualizationState` is `virtual`.
   * @property {string} [virtualMachine.virtualMachineType] Specifies the
   * virtualization technology used by the machine (hyperv, vmware, etc.).
   * Possible values include: 'unknown', 'hyperv', 'ldom', 'lpar', 'vmware',
   * 'virtualPc', 'xen'
   * @property {string} [virtualMachine.nativeMachineId] The unique identifier
   * of the virtual machine as reported by the underlying virtualization
   * system.
   * @property {string} [virtualMachine.virtualMachineName] The Name of the
   * virtual machine.
   * @property {string} [virtualMachine.nativeHostMachineId] The unique
   * identifier of the host of this virtual machine as reported by the
   * underlying virtualization system.
   * @property {object} [hypervisor] Hypervisor-related configuration. Present
   * only when 'virtualizationState' is `hypervisor`.
   * @property {string} [hypervisor.hypervisorType] Specifies the
   * virtualization technology used by the hypervisor (hyperv, vmware, etc.).
   * Possible values include: 'unknown', 'hyperv'
   * @property {string} [hypervisor.nativeHostMachineId] The unique identifier
   * of the hypervisor machine as reported by the underlying virtualization
   * system.
   * @property {object} [hosting] Hosting-related configuration. Present if
   * hosting information is discovered for the VM.
   * @property {string} [hosting.provider] The hosting provider of the VM.
   * Possible values include: 'azure'
   * @property {string} [hosting.kind] Polymorphic Discriminator
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of Machine
   *
   * @returns {object} metadata of Machine
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'machine',
      type: {
        name: 'Composite',
        polymorphicDiscriminator: {
          serializedName: 'kind',
          clientName: 'kind'
        },
        uberParent: 'BaseResource',
        className: 'Machine',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          etag: {
            required: false,
            serializedName: 'etag',
            type: {
              name: 'String'
            }
          },
          kind: {
            required: true,
            serializedName: 'kind',
            isPolymorphicDiscriminator: true,
            type: {
              name: 'String'
            }
          },
          timestamp: {
            required: false,
            serializedName: 'properties.timestamp',
            type: {
              name: 'DateTime'
            }
          },
          monitoringState: {
            required: false,
            serializedName: 'properties.monitoringState',
            type: {
              name: 'Enum',
              allowedValues: [ 'monitored', 'discovered' ]
            }
          },
          virtualizationState: {
            required: false,
            serializedName: 'properties.virtualizationState',
            type: {
              name: 'Enum',
              allowedValues: [ 'unknown', 'physical', 'virtual', 'hypervisor' ]
            }
          },
          displayName: {
            required: false,
            serializedName: 'properties.displayName',
            type: {
              name: 'String'
            }
          },
          computerName: {
            required: false,
            serializedName: 'properties.computerName',
            type: {
              name: 'String'
            }
          },
          fullyQualifiedDomainName: {
            required: false,
            serializedName: 'properties.fullyQualifiedDomainName',
            type: {
              name: 'String'
            }
          },
          bootTime: {
            required: false,
            serializedName: 'properties.bootTime',
            type: {
              name: 'DateTime'
            }
          },
          timezone: {
            required: false,
            serializedName: 'properties.timezone',
            type: {
              name: 'Composite',
              className: 'Timezone'
            }
          },
          agent: {
            required: false,
            serializedName: 'properties.agent',
            type: {
              name: 'Composite',
              className: 'AgentConfiguration'
            }
          },
          resources: {
            required: false,
            serializedName: 'properties.resources',
            type: {
              name: 'Composite',
              className: 'MachineResourcesConfiguration'
            }
          },
          networking: {
            required: false,
            serializedName: 'properties.networking',
            type: {
              name: 'Composite',
              className: 'NetworkConfiguration'
            }
          },
          operatingSystem: {
            required: false,
            serializedName: 'properties.operatingSystem',
            type: {
              name: 'Composite',
              className: 'OperatingSystemConfiguration'
            }
          },
          virtualMachine: {
            required: false,
            serializedName: 'properties.virtualMachine',
            type: {
              name: 'Composite',
              className: 'VirtualMachineConfiguration'
            }
          },
          hypervisor: {
            required: false,
            serializedName: 'properties.hypervisor',
            type: {
              name: 'Composite',
              className: 'HypervisorConfiguration'
            }
          },
          hosting: {
            required: false,
            serializedName: 'properties.hosting',
            type: {
              name: 'Composite',
              polymorphicDiscriminator: {
                serializedName: 'kind',
                clientName: 'kind'
              },
              uberParent: 'HostingConfiguration',
              className: 'HostingConfiguration'
            }
          }
        }
      }
    };
  }
}

module.exports = Machine;
