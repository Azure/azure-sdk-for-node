/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * A user-defined logical grouping of machines.
 *
 * @extends models['CoreResource']
 */
class MachineGroup extends models['CoreResource'] {
  /**
   * Create a MachineGroup.
   * @property {string} [groupType] Type of the machine group. Possible values
   * include: 'unknown', 'azure-cs', 'azure-sf', 'azure-vmss', 'user-static'
   * @property {string} displayName User defined name for the group
   * @property {number} [count] Count of machines in this group. The value of
   * count may be bigger than the number of machines in case of the group has
   * been truncated due to exceeding the max number of machines a group can
   * handle.
   * @property {array} [machines] References of the machines in this group. The
   * hints within each reference do not represent the current value of the
   * corresponding fields. They are a snapshot created during the last time the
   * machine group was updated.
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of MachineGroup
   *
   * @returns {object} metadata of MachineGroup
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'machineGroup',
      type: {
        name: 'Composite',
        polymorphicDiscriminator: {
          serializedName: 'kind',
          clientName: 'kind'
        },
        uberParent: 'BaseResource',
        className: 'MachineGroup',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          etag: {
            required: false,
            serializedName: 'etag',
            type: {
              name: 'String'
            }
          },
          kind: {
            required: true,
            serializedName: 'kind',
            isPolymorphicDiscriminator: true,
            type: {
              name: 'String'
            }
          },
          groupType: {
            required: false,
            serializedName: 'properties.groupType',
            type: {
              name: 'String'
            }
          },
          displayName: {
            required: true,
            serializedName: 'properties.displayName',
            constraints: {
              MaxLength: 256,
              MinLength: 1
            },
            type: {
              name: 'String'
            }
          },
          count: {
            required: false,
            serializedName: 'properties.count',
            type: {
              name: 'Number'
            }
          },
          machines: {
            required: false,
            serializedName: 'properties.machines',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'MachineReferenceWithHintsElementType',
                  type: {
                    name: 'Composite',
                    polymorphicDiscriminator: {
                      serializedName: 'kind',
                      clientName: 'kind'
                    },
                    uberParent: 'ResourceReference',
                    className: 'MachineReferenceWithHints'
                  }
              }
            }
          }
        }
      }
    };
  }
}

module.exports = MachineGroup;
