/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * A port resource represents a server port on a machine. The port may be
 * actively *monitored*, i.e., a Dependency Agent is running on its machine, or
 * *discovered*, i.e., its existence was inferred by observing the data stream
 * from monitored machines. A port is live during an interval of time, if that
 * port had associated activity during (parts) of that interval.
 *
 * @extends models['CoreResource']
 */
class Port extends models['CoreResource'] {
  /**
   * Create a Port.
   * @property {string} [monitoringState] Specifies whether the port is
   * actively monitored or discovered. Possible values include: 'monitored',
   * 'discovered'
   * @property {object} [machine] Machine hosting this port.
   * @property {string} [machine.id] Resource URI.
   * @property {string} [machine.type] Resource type qualifier.
   * @property {string} [machine.name] Resource name.
   * @property {string} [machine.kind] Polymorphic Discriminator
   * @property {string} [displayName] Name to use for display purposes.
   * @property {string} [ipAddress] IP address associated with the port. At
   * present only IPv4 addresses are supported.
   * @property {number} [portNumber] Port number.
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of Port
   *
   * @returns {object} metadata of Port
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'port',
      type: {
        name: 'Composite',
        polymorphicDiscriminator: {
          serializedName: 'kind',
          clientName: 'kind'
        },
        uberParent: 'BaseResource',
        className: 'Port',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          etag: {
            required: false,
            serializedName: 'etag',
            type: {
              name: 'String'
            }
          },
          kind: {
            required: true,
            serializedName: 'kind',
            isPolymorphicDiscriminator: true,
            type: {
              name: 'String'
            }
          },
          monitoringState: {
            required: false,
            serializedName: 'properties.monitoringState',
            type: {
              name: 'Enum',
              allowedValues: [ 'monitored', 'discovered' ]
            }
          },
          machine: {
            required: false,
            serializedName: 'properties.machine',
            type: {
              name: 'Composite',
              polymorphicDiscriminator: {
                serializedName: 'kind',
                clientName: 'kind'
              },
              uberParent: 'ResourceReference',
              className: 'ResourceReference'
            }
          },
          displayName: {
            required: false,
            serializedName: 'properties.displayName',
            type: {
              name: 'String'
            }
          },
          ipAddress: {
            required: false,
            serializedName: 'properties.ipAddress',
            type: {
              name: 'String'
            }
          },
          portNumber: {
            required: false,
            serializedName: 'properties.portNumber',
            type: {
              name: 'Number'
            }
          }
        }
      }
    };
  }
}

module.exports = Port;
