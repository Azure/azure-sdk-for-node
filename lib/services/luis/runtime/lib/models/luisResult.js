/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * Prediction, based on the input query, containing intent(s) and entities.
 *
 */
class LuisResult {
  /**
   * Create a LuisResult.
   * @property {string} [query] The input utterance that was analyzed.
   * @property {string} [alteredQuery] The corrected utterance (when spell
   * checking was enabled).
   * @property {object} [topScoringIntent]
   * @property {string} [topScoringIntent.intent] Name of the intent, as
   * defined in LUIS.
   * @property {number} [topScoringIntent.score] Associated prediction score
   * for the intent (float).
   * @property {array} [intents] All the intents (and their score) that were
   * detected from utterance.
   * @property {array} [entities] The entities extracted from the utterance.
   * @property {array} [compositeEntities] The composite entities extracted
   * from the utterance.
   * @property {object} [sentimentAnalysis]
   * @property {string} [sentimentAnalysis.label] The polarity of the
   * sentiment, can be positive, neutral or negative.
   * @property {number} [sentimentAnalysis.score] Score of the sentiment,
   * ranges from 0 (most negative) to 1 (most positive).
   * @property {object} [connectedServiceResult]
   */
  constructor() {
  }

  /**
   * Defines the metadata of LuisResult
   *
   * @returns {object} metadata of LuisResult
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'LuisResult',
      type: {
        name: 'Composite',
        className: 'LuisResult',
        modelProperties: {
          query: {
            required: false,
            serializedName: 'query',
            type: {
              name: 'String'
            }
          },
          alteredQuery: {
            required: false,
            serializedName: 'alteredQuery',
            type: {
              name: 'String'
            }
          },
          topScoringIntent: {
            required: false,
            serializedName: 'topScoringIntent',
            type: {
              name: 'Composite',
              className: 'IntentModel'
            }
          },
          intents: {
            required: false,
            serializedName: 'intents',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'IntentModelElementType',
                  type: {
                    name: 'Composite',
                    className: 'IntentModel'
                  }
              }
            }
          },
          entities: {
            required: false,
            serializedName: 'entities',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'EntityModelElementType',
                  type: {
                    name: 'Composite',
                    additionalProperties: {
                      type: {
                        name: 'Dictionary',
                        value: {
                            required: false,
                            serializedName: 'ObjectElementType',
                            type: {
                              name: 'Object'
                            }
                        }
                      }
                    },
                    className: 'EntityModel'
                  }
              }
            }
          },
          compositeEntities: {
            required: false,
            serializedName: 'compositeEntities',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'CompositeEntityModelElementType',
                  type: {
                    name: 'Composite',
                    className: 'CompositeEntityModel'
                  }
              }
            }
          },
          sentimentAnalysis: {
            required: false,
            serializedName: 'sentimentAnalysis',
            type: {
              name: 'Composite',
              className: 'Sentiment'
            }
          },
          connectedServiceResult: {
            required: false,
            serializedName: 'connectedServiceResult',
            type: {
              name: 'Composite',
              className: 'LuisResult'
            }
          }
        }
      }
    };
  }
}

module.exports = LuisResult;
