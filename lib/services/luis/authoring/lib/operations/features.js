/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const msRest = require('ms-rest');
const WebResource = msRest.WebResource;

/**
 * Creates a new phraselist feature.
 *
 * @param {uuid} appId The application ID.
 *
 * @param {string} versionId The version ID.
 *
 * @param {object} phraselistCreateObject A Phraselist object containing Name,
 * comma-separated Phrases and the isExchangeable boolean. Default value for
 * isExchangeable is true.
 *
 * @param {string} [phraselistCreateObject.phrases] List of comma-separated
 * phrases that represent the Phraselist.
 *
 * @param {string} [phraselistCreateObject.name] The Phraselist name.
 *
 * @param {boolean} [phraselistCreateObject.isExchangeable] An exchangeable
 * phrase list feature are serves as single feature to the LUIS underlying
 * training algorithm. It is used as a lexicon lookup feature where its value
 * is 1 if the lexicon contains a given word or 0 if it doesnâ€™t. Think of an
 * exchangeable as a synonyms list. A non-exchangeable phrase list feature has
 * all the phrases in the list serve as separate features to the underlying
 * training algorithm. So, if you your phrase list feature contains 5 phrases,
 * they will be mapped to 5 separate features. You can think of the
 * non-exchangeable phrase list feature as an additional bag of words that you
 * are willing to add to LUIS existing vocabulary features. Think of a
 * non-exchangeable as set of different words. Default value is true.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {number} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _addPhraseList(appId, versionId, phraselistCreateObject, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.client.endpoint === null || this.client.endpoint === undefined || typeof this.client.endpoint.valueOf() !== 'string') {
      throw new Error('this.client.endpoint cannot be null or undefined and it must be of type string.');
    }
    if (appId === null || appId === undefined || typeof appId.valueOf() !== 'string' || !msRest.isValidUuid(appId)) {
      throw new Error('appId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (versionId === null || versionId === undefined || typeof versionId.valueOf() !== 'string') {
      throw new Error('versionId cannot be null or undefined and it must be of type string.');
    }
    if (phraselistCreateObject === null || phraselistCreateObject === undefined) {
      throw new Error('phraselistCreateObject cannot be null or undefined.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'apps/{appId}/versions/{versionId}/phraselists';
  requestUrl = requestUrl.replace('{Endpoint}', this.client.endpoint);
  requestUrl = requestUrl.replace('{appId}', encodeURIComponent(appId.toString()));
  requestUrl = requestUrl.replace('{versionId}', encodeURIComponent(versionId));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (phraselistCreateObject !== null && phraselistCreateObject !== undefined) {
      let requestModelMapper = new client.models['PhraselistCreateObject']().mapper();
      requestModel = client.serialize(requestModelMapper, phraselistCreateObject, 'phraselistCreateObject');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(phraselistCreateObject, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 201) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 201) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = {
            required: false,
            serializedName: 'parsedResponse',
            type: {
              name: 'Number'
            }
          };
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Gets all the phraselist features.
 *
 * @param {uuid} appId The application ID.
 *
 * @param {string} versionId The version ID.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {number} [options.skip] The number of entries to skip. Default value
 * is 0.
 *
 * @param {number} [options.take] The number of entries to return. Maximum page
 * size is 500. Default is 100.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {array} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _listPhraseLists(appId, versionId, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let skip = (options && options.skip !== undefined) ? options.skip : 0;
  let take = (options && options.take !== undefined) ? options.take : 100;
  // Validate
  try {
    if (this.client.endpoint === null || this.client.endpoint === undefined || typeof this.client.endpoint.valueOf() !== 'string') {
      throw new Error('this.client.endpoint cannot be null or undefined and it must be of type string.');
    }
    if (appId === null || appId === undefined || typeof appId.valueOf() !== 'string' || !msRest.isValidUuid(appId)) {
      throw new Error('appId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (versionId === null || versionId === undefined || typeof versionId.valueOf() !== 'string') {
      throw new Error('versionId cannot be null or undefined and it must be of type string.');
    }
    if (skip !== null && skip !== undefined && typeof skip !== 'number') {
      throw new Error('skip must be of type number.');
    }
    if (skip !== null && skip !== undefined) {
      if (skip < 0)
      {
        throw new Error('"skip" should satisfy the constraint - "InclusiveMinimum": 0');
      }
    }
    if (take !== null && take !== undefined && typeof take !== 'number') {
      throw new Error('take must be of type number.');
    }
    if (take !== null && take !== undefined) {
      if (take > 500)
      {
        throw new Error('"take" should satisfy the constraint - "InclusiveMaximum": 500');
      }
      if (take < 0)
      {
        throw new Error('"take" should satisfy the constraint - "InclusiveMinimum": 0');
      }
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'apps/{appId}/versions/{versionId}/phraselists';
  requestUrl = requestUrl.replace('{Endpoint}', this.client.endpoint);
  requestUrl = requestUrl.replace('{appId}', encodeURIComponent(appId.toString()));
  requestUrl = requestUrl.replace('{versionId}', encodeURIComponent(versionId));
  let queryParameters = [];
  if (skip !== null && skip !== undefined) {
    queryParameters.push('skip=' + encodeURIComponent(skip.toString()));
  }
  if (take !== null && take !== undefined) {
    queryParameters.push('take=' + encodeURIComponent(take.toString()));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = {
            required: false,
            serializedName: 'parsedResponse',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'PhraseListFeatureInfoElementType',
                  type: {
                    name: 'Composite',
                    className: 'PhraseListFeatureInfo'
                  }
              }
            }
          };
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Gets all the extraction features for the specified application version.
 *
 * @param {uuid} appId The application ID.
 *
 * @param {string} versionId The version ID.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {number} [options.skip] The number of entries to skip. Default value
 * is 0.
 *
 * @param {number} [options.take] The number of entries to return. Maximum page
 * size is 500. Default is 100.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link FeaturesResponseObject} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _list(appId, versionId, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let skip = (options && options.skip !== undefined) ? options.skip : 0;
  let take = (options && options.take !== undefined) ? options.take : 100;
  // Validate
  try {
    if (this.client.endpoint === null || this.client.endpoint === undefined || typeof this.client.endpoint.valueOf() !== 'string') {
      throw new Error('this.client.endpoint cannot be null or undefined and it must be of type string.');
    }
    if (appId === null || appId === undefined || typeof appId.valueOf() !== 'string' || !msRest.isValidUuid(appId)) {
      throw new Error('appId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (versionId === null || versionId === undefined || typeof versionId.valueOf() !== 'string') {
      throw new Error('versionId cannot be null or undefined and it must be of type string.');
    }
    if (skip !== null && skip !== undefined && typeof skip !== 'number') {
      throw new Error('skip must be of type number.');
    }
    if (skip !== null && skip !== undefined) {
      if (skip < 0)
      {
        throw new Error('"skip" should satisfy the constraint - "InclusiveMinimum": 0');
      }
    }
    if (take !== null && take !== undefined && typeof take !== 'number') {
      throw new Error('take must be of type number.');
    }
    if (take !== null && take !== undefined) {
      if (take > 500)
      {
        throw new Error('"take" should satisfy the constraint - "InclusiveMaximum": 500');
      }
      if (take < 0)
      {
        throw new Error('"take" should satisfy the constraint - "InclusiveMinimum": 0');
      }
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'apps/{appId}/versions/{versionId}/features';
  requestUrl = requestUrl.replace('{Endpoint}', this.client.endpoint);
  requestUrl = requestUrl.replace('{appId}', encodeURIComponent(appId.toString()));
  requestUrl = requestUrl.replace('{versionId}', encodeURIComponent(versionId));
  let queryParameters = [];
  if (skip !== null && skip !== undefined) {
    queryParameters.push('skip=' + encodeURIComponent(skip.toString()));
  }
  if (take !== null && take !== undefined) {
    queryParameters.push('take=' + encodeURIComponent(take.toString()));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['FeaturesResponseObject']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Gets phraselist feature info.
 *
 * @param {uuid} appId The application ID.
 *
 * @param {string} versionId The version ID.
 *
 * @param {number} phraselistId The ID of the feature to be retrieved.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link PhraseListFeatureInfo} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getPhraseList(appId, versionId, phraselistId, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.client.endpoint === null || this.client.endpoint === undefined || typeof this.client.endpoint.valueOf() !== 'string') {
      throw new Error('this.client.endpoint cannot be null or undefined and it must be of type string.');
    }
    if (appId === null || appId === undefined || typeof appId.valueOf() !== 'string' || !msRest.isValidUuid(appId)) {
      throw new Error('appId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (versionId === null || versionId === undefined || typeof versionId.valueOf() !== 'string') {
      throw new Error('versionId cannot be null or undefined and it must be of type string.');
    }
    if (phraselistId === null || phraselistId === undefined || typeof phraselistId !== 'number') {
      throw new Error('phraselistId cannot be null or undefined and it must be of type number.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'apps/{appId}/versions/{versionId}/phraselists/{phraselistId}';
  requestUrl = requestUrl.replace('{Endpoint}', this.client.endpoint);
  requestUrl = requestUrl.replace('{appId}', encodeURIComponent(appId.toString()));
  requestUrl = requestUrl.replace('{versionId}', encodeURIComponent(versionId));
  requestUrl = requestUrl.replace('{phraselistId}', encodeURIComponent(phraselistId.toString()));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['PhraseListFeatureInfo']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Updates the phrases, the state and the name of the phraselist feature.
 *
 * @param {uuid} appId The application ID.
 *
 * @param {string} versionId The version ID.
 *
 * @param {number} phraselistId The ID of the feature to be updated.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.phraselistUpdateObject] The new values for: - Just
 * a boolean called IsActive, in which case the status of the feature will be
 * changed. - Name, Pattern, Mode, and a boolean called IsActive to update the
 * feature.
 *
 * @param {string} [options.phraselistUpdateObject.phrases] List of
 * comma-separated phrases that represent the Phraselist.
 *
 * @param {string} [options.phraselistUpdateObject.name] The Phraselist name.
 *
 * @param {boolean} [options.phraselistUpdateObject.isActive] Indicates if the
 * Phraselist is enabled.
 *
 * @param {boolean} [options.phraselistUpdateObject.isExchangeable] An
 * exchangeable phrase list feature are serves as single feature to the LUIS
 * underlying training algorithm. It is used as a lexicon lookup feature where
 * its value is 1 if the lexicon contains a given word or 0 if it doesnâ€™t.
 * Think of an exchangeable as a synonyms list. A non-exchangeable phrase list
 * feature has all the phrases in the list serve as separate features to the
 * underlying training algorithm. So, if you your phrase list feature contains
 * 5 phrases, they will be mapped to 5 separate features. You can think of the
 * non-exchangeable phrase list feature as an additional bag of words that you
 * are willing to add to LUIS existing vocabulary features. Think of a
 * non-exchangeable as set of different words. Default value is true.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link OperationStatus} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _updatePhraseList(appId, versionId, phraselistId, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let phraselistUpdateObject = (options && options.phraselistUpdateObject !== undefined) ? options.phraselistUpdateObject : undefined;
  // Validate
  try {
    if (this.client.endpoint === null || this.client.endpoint === undefined || typeof this.client.endpoint.valueOf() !== 'string') {
      throw new Error('this.client.endpoint cannot be null or undefined and it must be of type string.');
    }
    if (appId === null || appId === undefined || typeof appId.valueOf() !== 'string' || !msRest.isValidUuid(appId)) {
      throw new Error('appId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (versionId === null || versionId === undefined || typeof versionId.valueOf() !== 'string') {
      throw new Error('versionId cannot be null or undefined and it must be of type string.');
    }
    if (phraselistId === null || phraselistId === undefined || typeof phraselistId !== 'number') {
      throw new Error('phraselistId cannot be null or undefined and it must be of type number.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'apps/{appId}/versions/{versionId}/phraselists/{phraselistId}';
  requestUrl = requestUrl.replace('{Endpoint}', this.client.endpoint);
  requestUrl = requestUrl.replace('{appId}', encodeURIComponent(appId.toString()));
  requestUrl = requestUrl.replace('{versionId}', encodeURIComponent(versionId));
  requestUrl = requestUrl.replace('{phraselistId}', encodeURIComponent(phraselistId.toString()));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PUT';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (phraselistUpdateObject !== null && phraselistUpdateObject !== undefined) {
      let requestModelMapper = new client.models['PhraselistUpdateObject']().mapper();
      requestModel = client.serialize(requestModelMapper, phraselistUpdateObject, 'phraselistUpdateObject');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(phraselistUpdateObject, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['OperationStatus']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Deletes a phraselist feature.
 *
 * @param {uuid} appId The application ID.
 *
 * @param {string} versionId The version ID.
 *
 * @param {number} phraselistId The ID of the feature to be deleted.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link OperationStatus} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _deletePhraseList(appId, versionId, phraselistId, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.client.endpoint === null || this.client.endpoint === undefined || typeof this.client.endpoint.valueOf() !== 'string') {
      throw new Error('this.client.endpoint cannot be null or undefined and it must be of type string.');
    }
    if (appId === null || appId === undefined || typeof appId.valueOf() !== 'string' || !msRest.isValidUuid(appId)) {
      throw new Error('appId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (versionId === null || versionId === undefined || typeof versionId.valueOf() !== 'string') {
      throw new Error('versionId cannot be null or undefined and it must be of type string.');
    }
    if (phraselistId === null || phraselistId === undefined || typeof phraselistId !== 'number') {
      throw new Error('phraselistId cannot be null or undefined and it must be of type number.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'apps/{appId}/versions/{versionId}/phraselists/{phraselistId}';
  requestUrl = requestUrl.replace('{Endpoint}', this.client.endpoint);
  requestUrl = requestUrl.replace('{appId}', encodeURIComponent(appId.toString()));
  requestUrl = requestUrl.replace('{versionId}', encodeURIComponent(versionId));
  requestUrl = requestUrl.replace('{phraselistId}', encodeURIComponent(phraselistId.toString()));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'DELETE';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['OperationStatus']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/** Class representing a Features. */
class Features {
  /**
   * Create a Features.
   * @param {LUISAuthoringClient} client Reference to the service client.
   */
  constructor(client) {
    this.client = client;
    this._addPhraseList = _addPhraseList;
    this._listPhraseLists = _listPhraseLists;
    this._list = _list;
    this._getPhraseList = _getPhraseList;
    this._updatePhraseList = _updatePhraseList;
    this._deletePhraseList = _deletePhraseList;
  }

  /**
   * Creates a new phraselist feature.
   *
   * @param {uuid} appId The application ID.
   *
   * @param {string} versionId The version ID.
   *
   * @param {object} phraselistCreateObject A Phraselist object containing Name,
   * comma-separated Phrases and the isExchangeable boolean. Default value for
   * isExchangeable is true.
   *
   * @param {string} [phraselistCreateObject.phrases] List of comma-separated
   * phrases that represent the Phraselist.
   *
   * @param {string} [phraselistCreateObject.name] The Phraselist name.
   *
   * @param {boolean} [phraselistCreateObject.isExchangeable] An exchangeable
   * phrase list feature are serves as single feature to the LUIS underlying
   * training algorithm. It is used as a lexicon lookup feature where its value
   * is 1 if the lexicon contains a given word or 0 if it doesnâ€™t. Think of an
   * exchangeable as a synonyms list. A non-exchangeable phrase list feature has
   * all the phrases in the list serve as separate features to the underlying
   * training algorithm. So, if you your phrase list feature contains 5 phrases,
   * they will be mapped to 5 separate features. You can think of the
   * non-exchangeable phrase list feature as an additional bag of words that you
   * are willing to add to LUIS existing vocabulary features. Think of a
   * non-exchangeable as set of different words. Default value is true.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Number>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  addPhraseListWithHttpOperationResponse(appId, versionId, phraselistCreateObject, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._addPhraseList(appId, versionId, phraselistCreateObject, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Creates a new phraselist feature.
   *
   * @param {uuid} appId The application ID.
   *
   * @param {string} versionId The version ID.
   *
   * @param {object} phraselistCreateObject A Phraselist object containing Name,
   * comma-separated Phrases and the isExchangeable boolean. Default value for
   * isExchangeable is true.
   *
   * @param {string} [phraselistCreateObject.phrases] List of comma-separated
   * phrases that represent the Phraselist.
   *
   * @param {string} [phraselistCreateObject.name] The Phraselist name.
   *
   * @param {boolean} [phraselistCreateObject.isExchangeable] An exchangeable
   * phrase list feature are serves as single feature to the LUIS underlying
   * training algorithm. It is used as a lexicon lookup feature where its value
   * is 1 if the lexicon contains a given word or 0 if it doesnâ€™t. Think of an
   * exchangeable as a synonyms list. A non-exchangeable phrase list feature has
   * all the phrases in the list serve as separate features to the underlying
   * training algorithm. So, if you your phrase list feature contains 5 phrases,
   * they will be mapped to 5 separate features. You can think of the
   * non-exchangeable phrase list feature as an additional bag of words that you
   * are willing to add to LUIS existing vocabulary features. Think of a
   * non-exchangeable as set of different words. Default value is true.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Number} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {number} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  addPhraseList(appId, versionId, phraselistCreateObject, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._addPhraseList(appId, versionId, phraselistCreateObject, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._addPhraseList(appId, versionId, phraselistCreateObject, options, optionalCallback);
    }
  }

  /**
   * Gets all the phraselist features.
   *
   * @param {uuid} appId The application ID.
   *
   * @param {string} versionId The version ID.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.skip] The number of entries to skip. Default value
   * is 0.
   *
   * @param {number} [options.take] The number of entries to return. Maximum page
   * size is 500. Default is 100.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  listPhraseListsWithHttpOperationResponse(appId, versionId, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._listPhraseLists(appId, versionId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Gets all the phraselist features.
   *
   * @param {uuid} appId The application ID.
   *
   * @param {string} versionId The version ID.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.skip] The number of entries to skip. Default value
   * is 0.
   *
   * @param {number} [options.take] The number of entries to return. Maximum page
   * size is 500. Default is 100.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Array} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {array} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  listPhraseLists(appId, versionId, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._listPhraseLists(appId, versionId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._listPhraseLists(appId, versionId, options, optionalCallback);
    }
  }

  /**
   * Gets all the extraction features for the specified application version.
   *
   * @param {uuid} appId The application ID.
   *
   * @param {string} versionId The version ID.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.skip] The number of entries to skip. Default value
   * is 0.
   *
   * @param {number} [options.take] The number of entries to return. Maximum page
   * size is 500. Default is 100.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<FeaturesResponseObject>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  listWithHttpOperationResponse(appId, versionId, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._list(appId, versionId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Gets all the extraction features for the specified application version.
   *
   * @param {uuid} appId The application ID.
   *
   * @param {string} versionId The version ID.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.skip] The number of entries to skip. Default value
   * is 0.
   *
   * @param {number} [options.take] The number of entries to return. Maximum page
   * size is 500. Default is 100.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {FeaturesResponseObject} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link FeaturesResponseObject} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  list(appId, versionId, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._list(appId, versionId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._list(appId, versionId, options, optionalCallback);
    }
  }

  /**
   * Gets phraselist feature info.
   *
   * @param {uuid} appId The application ID.
   *
   * @param {string} versionId The version ID.
   *
   * @param {number} phraselistId The ID of the feature to be retrieved.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<PhraseListFeatureInfo>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getPhraseListWithHttpOperationResponse(appId, versionId, phraselistId, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getPhraseList(appId, versionId, phraselistId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Gets phraselist feature info.
   *
   * @param {uuid} appId The application ID.
   *
   * @param {string} versionId The version ID.
   *
   * @param {number} phraselistId The ID of the feature to be retrieved.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {PhraseListFeatureInfo} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link PhraseListFeatureInfo} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getPhraseList(appId, versionId, phraselistId, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getPhraseList(appId, versionId, phraselistId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getPhraseList(appId, versionId, phraselistId, options, optionalCallback);
    }
  }

  /**
   * Updates the phrases, the state and the name of the phraselist feature.
   *
   * @param {uuid} appId The application ID.
   *
   * @param {string} versionId The version ID.
   *
   * @param {number} phraselistId The ID of the feature to be updated.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.phraselistUpdateObject] The new values for: - Just
   * a boolean called IsActive, in which case the status of the feature will be
   * changed. - Name, Pattern, Mode, and a boolean called IsActive to update the
   * feature.
   *
   * @param {string} [options.phraselistUpdateObject.phrases] List of
   * comma-separated phrases that represent the Phraselist.
   *
   * @param {string} [options.phraselistUpdateObject.name] The Phraselist name.
   *
   * @param {boolean} [options.phraselistUpdateObject.isActive] Indicates if the
   * Phraselist is enabled.
   *
   * @param {boolean} [options.phraselistUpdateObject.isExchangeable] An
   * exchangeable phrase list feature are serves as single feature to the LUIS
   * underlying training algorithm. It is used as a lexicon lookup feature where
   * its value is 1 if the lexicon contains a given word or 0 if it doesnâ€™t.
   * Think of an exchangeable as a synonyms list. A non-exchangeable phrase list
   * feature has all the phrases in the list serve as separate features to the
   * underlying training algorithm. So, if you your phrase list feature contains
   * 5 phrases, they will be mapped to 5 separate features. You can think of the
   * non-exchangeable phrase list feature as an additional bag of words that you
   * are willing to add to LUIS existing vocabulary features. Think of a
   * non-exchangeable as set of different words. Default value is true.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<OperationStatus>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  updatePhraseListWithHttpOperationResponse(appId, versionId, phraselistId, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._updatePhraseList(appId, versionId, phraselistId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Updates the phrases, the state and the name of the phraselist feature.
   *
   * @param {uuid} appId The application ID.
   *
   * @param {string} versionId The version ID.
   *
   * @param {number} phraselistId The ID of the feature to be updated.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.phraselistUpdateObject] The new values for: - Just
   * a boolean called IsActive, in which case the status of the feature will be
   * changed. - Name, Pattern, Mode, and a boolean called IsActive to update the
   * feature.
   *
   * @param {string} [options.phraselistUpdateObject.phrases] List of
   * comma-separated phrases that represent the Phraselist.
   *
   * @param {string} [options.phraselistUpdateObject.name] The Phraselist name.
   *
   * @param {boolean} [options.phraselistUpdateObject.isActive] Indicates if the
   * Phraselist is enabled.
   *
   * @param {boolean} [options.phraselistUpdateObject.isExchangeable] An
   * exchangeable phrase list feature are serves as single feature to the LUIS
   * underlying training algorithm. It is used as a lexicon lookup feature where
   * its value is 1 if the lexicon contains a given word or 0 if it doesnâ€™t.
   * Think of an exchangeable as a synonyms list. A non-exchangeable phrase list
   * feature has all the phrases in the list serve as separate features to the
   * underlying training algorithm. So, if you your phrase list feature contains
   * 5 phrases, they will be mapped to 5 separate features. You can think of the
   * non-exchangeable phrase list feature as an additional bag of words that you
   * are willing to add to LUIS existing vocabulary features. Think of a
   * non-exchangeable as set of different words. Default value is true.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {OperationStatus} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link OperationStatus} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  updatePhraseList(appId, versionId, phraselistId, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._updatePhraseList(appId, versionId, phraselistId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._updatePhraseList(appId, versionId, phraselistId, options, optionalCallback);
    }
  }

  /**
   * Deletes a phraselist feature.
   *
   * @param {uuid} appId The application ID.
   *
   * @param {string} versionId The version ID.
   *
   * @param {number} phraselistId The ID of the feature to be deleted.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<OperationStatus>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  deletePhraseListWithHttpOperationResponse(appId, versionId, phraselistId, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._deletePhraseList(appId, versionId, phraselistId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Deletes a phraselist feature.
   *
   * @param {uuid} appId The application ID.
   *
   * @param {string} versionId The version ID.
   *
   * @param {number} phraselistId The ID of the feature to be deleted.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {OperationStatus} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link OperationStatus} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  deletePhraseList(appId, versionId, phraselistId, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._deletePhraseList(appId, versionId, phraselistId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._deletePhraseList(appId, versionId, phraselistId, options, optionalCallback);
    }
  }

}

module.exports = Features;
