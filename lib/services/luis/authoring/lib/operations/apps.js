/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const msRest = require('ms-rest');
const WebResource = msRest.WebResource;

/**
 * Creates a new LUIS app.
 *
 * @param {string} azureRegion Supported Azure regions for Cognitive Services
 * endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia',
 * 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus',
 * 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'
 *
 * @param {string} azureCloud Supported Azure Clouds for Cognitive Services
 * endpoints. Possible values include: 'com', 'us'
 *
 * @param {object} applicationCreateObject A model containing Name, Description
 * (optional), Culture, Usage Scenario (optional), Domain (optional) and
 * initial version ID (optional) of the application. Default value for the
 * version ID is 0.1. Note: the culture cannot be changed after the app is
 * created.
 *
 * @param {string} applicationCreateObject.culture The culture for the new
 * application. It is the language that your app understands and speaks. E.g.:
 * "en-us". Note: the culture cannot be changed after the app is created.
 *
 * @param {string} [applicationCreateObject.domain] The domain for the new
 * application. Optional. E.g.: Comics.
 *
 * @param {string} [applicationCreateObject.description] Description of the new
 * application. Optional.
 *
 * @param {string} [applicationCreateObject.initialVersionId] The initial
 * version ID. Optional. Default value is: "0.1"
 *
 * @param {string} [applicationCreateObject.usageScenario] Defines the scenario
 * for the new application. Optional. E.g.: IoT.
 *
 * @param {string} applicationCreateObject.name The name for the new
 * application.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {uuid} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _add(azureRegion, azureCloud, applicationCreateObject, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (azureRegion) {
      let allowedValues = [ 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia' ];
      if (!allowedValues.some( function(item) { return item === azureRegion; })) {
        throw new Error(azureRegion + ' is not a valid value. The valid values are: ' + allowedValues);
      }
    } else {
      throw new Error('azureRegion cannot be null or undefined.');
    }
    if (azureCloud) {
      let allowedValues1 = [ 'com', 'us' ];
      if (!allowedValues1.some( function(item) { return item === azureCloud; })) {
        throw new Error(azureCloud + ' is not a valid value. The valid values are: ' + allowedValues1);
      }
    } else {
      throw new Error('azureCloud cannot be null or undefined.');
    }
    if (applicationCreateObject === null || applicationCreateObject === undefined) {
      throw new Error('applicationCreateObject cannot be null or undefined.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'apps/';
  requestUrl = requestUrl.replace('{AzureRegion}', azureRegion);
  requestUrl = requestUrl.replace('{AzureCloud}', azureCloud);

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (applicationCreateObject !== null && applicationCreateObject !== undefined) {
      let requestModelMapper = new client.models['ApplicationCreateObject']().mapper();
      requestModel = client.serialize(requestModelMapper, applicationCreateObject, 'applicationCreateObject');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(applicationCreateObject, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 201) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 201) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = {
            required: false,
            serializedName: 'parsedResponse',
            type: {
              name: 'String'
            }
          };
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Lists all of the user applications.
 *
 * @param {string} azureRegion Supported Azure regions for Cognitive Services
 * endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia',
 * 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus',
 * 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'
 *
 * @param {string} azureCloud Supported Azure Clouds for Cognitive Services
 * endpoints. Possible values include: 'com', 'us'
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {number} [options.skip] The number of entries to skip. Default value
 * is 0.
 *
 * @param {number} [options.take] The number of entries to return. Maximum page
 * size is 500. Default is 100.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {array} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _list(azureRegion, azureCloud, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let skip = (options && options.skip !== undefined) ? options.skip : 0;
  let take = (options && options.take !== undefined) ? options.take : 100;
  // Validate
  try {
    if (azureRegion) {
      let allowedValues = [ 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia' ];
      if (!allowedValues.some( function(item) { return item === azureRegion; })) {
        throw new Error(azureRegion + ' is not a valid value. The valid values are: ' + allowedValues);
      }
    } else {
      throw new Error('azureRegion cannot be null or undefined.');
    }
    if (azureCloud) {
      let allowedValues1 = [ 'com', 'us' ];
      if (!allowedValues1.some( function(item) { return item === azureCloud; })) {
        throw new Error(azureCloud + ' is not a valid value. The valid values are: ' + allowedValues1);
      }
    } else {
      throw new Error('azureCloud cannot be null or undefined.');
    }
    if (skip !== null && skip !== undefined && typeof skip !== 'number') {
      throw new Error('skip must be of type number.');
    }
    if (skip !== null && skip !== undefined) {
      if (skip < 0)
      {
        throw new Error('"skip" should satisfy the constraint - "InclusiveMinimum": 0');
      }
    }
    if (take !== null && take !== undefined && typeof take !== 'number') {
      throw new Error('take must be of type number.');
    }
    if (take !== null && take !== undefined) {
      if (take > 500)
      {
        throw new Error('"take" should satisfy the constraint - "InclusiveMaximum": 500');
      }
      if (take < 0)
      {
        throw new Error('"take" should satisfy the constraint - "InclusiveMinimum": 0');
      }
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'apps/';
  requestUrl = requestUrl.replace('{AzureRegion}', azureRegion);
  requestUrl = requestUrl.replace('{AzureCloud}', azureCloud);
  let queryParameters = [];
  if (skip !== null && skip !== undefined) {
    queryParameters.push('skip=' + encodeURIComponent(skip.toString()));
  }
  if (take !== null && take !== undefined) {
    queryParameters.push('take=' + encodeURIComponent(take.toString()));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = {
            required: false,
            serializedName: 'parsedResponse',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ApplicationInfoResponseElementType',
                  type: {
                    name: 'Composite',
                    className: 'ApplicationInfoResponse'
                  }
              }
            }
          };
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Imports an application to LUIS, the application's structure should be
 * included in the request body.
 *
 * @param {string} azureRegion Supported Azure regions for Cognitive Services
 * endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia',
 * 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus',
 * 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'
 *
 * @param {string} azureCloud Supported Azure Clouds for Cognitive Services
 * endpoints. Possible values include: 'com', 'us'
 *
 * @param {object} luisApp A LUIS application structure.
 *
 * @param {string} [luisApp.name] The name of the application.
 *
 * @param {string} [luisApp.versionId] The version ID of the application that
 * was exported.
 *
 * @param {string} [luisApp.desc] The description of the application.
 *
 * @param {string} [luisApp.culture] The culture of the application. E.g.:
 * en-us.
 *
 * @param {array} [luisApp.intents] List of intents.
 *
 * @param {array} [luisApp.entities] List of entities.
 *
 * @param {array} [luisApp.closedLists] List of closed lists.
 *
 * @param {array} [luisApp.composites] List of composite entities.
 *
 * @param {array} [luisApp.patternAnyEntities] List of Pattern.Any entities.
 *
 * @param {array} [luisApp.regexEntities] List of regular expression entities.
 *
 * @param {array} [luisApp.prebuiltEntities] List of prebuilt entities.
 *
 * @param {array} [luisApp.regexFeatures] List of pattern features.
 *
 * @param {array} [luisApp.modelFeatures] List of model features.
 *
 * @param {array} [luisApp.patterns] List of patterns.
 *
 * @param {array} [luisApp.utterances] List of sample utterances.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {string} [options.appName] The application name to create. If not
 * specified, the application name will be read from the imported object.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {uuid} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _importMethod(azureRegion, azureCloud, luisApp, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let appName = (options && options.appName !== undefined) ? options.appName : undefined;
  // Validate
  try {
    if (azureRegion) {
      let allowedValues = [ 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia' ];
      if (!allowedValues.some( function(item) { return item === azureRegion; })) {
        throw new Error(azureRegion + ' is not a valid value. The valid values are: ' + allowedValues);
      }
    } else {
      throw new Error('azureRegion cannot be null or undefined.');
    }
    if (azureCloud) {
      let allowedValues1 = [ 'com', 'us' ];
      if (!allowedValues1.some( function(item) { return item === azureCloud; })) {
        throw new Error(azureCloud + ' is not a valid value. The valid values are: ' + allowedValues1);
      }
    } else {
      throw new Error('azureCloud cannot be null or undefined.');
    }
    if (appName !== null && appName !== undefined && typeof appName.valueOf() !== 'string') {
      throw new Error('appName must be of type string.');
    }
    if (luisApp === null || luisApp === undefined) {
      throw new Error('luisApp cannot be null or undefined.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'apps/import';
  requestUrl = requestUrl.replace('{AzureRegion}', azureRegion);
  requestUrl = requestUrl.replace('{AzureCloud}', azureCloud);
  let queryParameters = [];
  if (appName !== null && appName !== undefined) {
    queryParameters.push('appName=' + encodeURIComponent(appName));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (luisApp !== null && luisApp !== undefined) {
      let requestModelMapper = new client.models['LuisApp']().mapper();
      requestModel = client.serialize(requestModelMapper, luisApp, 'luisApp');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(luisApp, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 201) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 201) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = {
            required: false,
            serializedName: 'parsedResponse',
            type: {
              name: 'String'
            }
          };
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Gets the endpoint URLs for the prebuilt Cortana applications.
 *
 * @param {string} azureRegion Supported Azure regions for Cognitive Services
 * endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia',
 * 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus',
 * 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'
 *
 * @param {string} azureCloud Supported Azure Clouds for Cognitive Services
 * endpoints. Possible values include: 'com', 'us'
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link PersonalAssistantsResponse} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _listCortanaEndpoints(azureRegion, azureCloud, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (azureRegion) {
      let allowedValues = [ 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia' ];
      if (!allowedValues.some( function(item) { return item === azureRegion; })) {
        throw new Error(azureRegion + ' is not a valid value. The valid values are: ' + allowedValues);
      }
    } else {
      throw new Error('azureRegion cannot be null or undefined.');
    }
    if (azureCloud) {
      let allowedValues1 = [ 'com', 'us' ];
      if (!allowedValues1.some( function(item) { return item === azureCloud; })) {
        throw new Error(azureCloud + ' is not a valid value. The valid values are: ' + allowedValues1);
      }
    } else {
      throw new Error('azureCloud cannot be null or undefined.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'apps/assistants';
  requestUrl = requestUrl.replace('{AzureRegion}', azureRegion);
  requestUrl = requestUrl.replace('{AzureCloud}', azureCloud);

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['PersonalAssistantsResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Gets the available application domains.
 *
 * @param {string} azureRegion Supported Azure regions for Cognitive Services
 * endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia',
 * 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus',
 * 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'
 *
 * @param {string} azureCloud Supported Azure Clouds for Cognitive Services
 * endpoints. Possible values include: 'com', 'us'
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {array} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _listDomains(azureRegion, azureCloud, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (azureRegion) {
      let allowedValues = [ 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia' ];
      if (!allowedValues.some( function(item) { return item === azureRegion; })) {
        throw new Error(azureRegion + ' is not a valid value. The valid values are: ' + allowedValues);
      }
    } else {
      throw new Error('azureRegion cannot be null or undefined.');
    }
    if (azureCloud) {
      let allowedValues1 = [ 'com', 'us' ];
      if (!allowedValues1.some( function(item) { return item === azureCloud; })) {
        throw new Error(azureCloud + ' is not a valid value. The valid values are: ' + allowedValues1);
      }
    } else {
      throw new Error('azureCloud cannot be null or undefined.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'apps/domains';
  requestUrl = requestUrl.replace('{AzureRegion}', azureRegion);
  requestUrl = requestUrl.replace('{AzureCloud}', azureCloud);

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = {
            required: false,
            serializedName: 'parsedResponse',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          };
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Gets the application available usage scenarios.
 *
 * @param {string} azureRegion Supported Azure regions for Cognitive Services
 * endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia',
 * 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus',
 * 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'
 *
 * @param {string} azureCloud Supported Azure Clouds for Cognitive Services
 * endpoints. Possible values include: 'com', 'us'
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {array} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _listUsageScenarios(azureRegion, azureCloud, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (azureRegion) {
      let allowedValues = [ 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia' ];
      if (!allowedValues.some( function(item) { return item === azureRegion; })) {
        throw new Error(azureRegion + ' is not a valid value. The valid values are: ' + allowedValues);
      }
    } else {
      throw new Error('azureRegion cannot be null or undefined.');
    }
    if (azureCloud) {
      let allowedValues1 = [ 'com', 'us' ];
      if (!allowedValues1.some( function(item) { return item === azureCloud; })) {
        throw new Error(azureCloud + ' is not a valid value. The valid values are: ' + allowedValues1);
      }
    } else {
      throw new Error('azureCloud cannot be null or undefined.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'apps/usagescenarios';
  requestUrl = requestUrl.replace('{AzureRegion}', azureRegion);
  requestUrl = requestUrl.replace('{AzureCloud}', azureCloud);

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = {
            required: false,
            serializedName: 'parsedResponse',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          };
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Gets the supported application cultures.
 *
 * @param {string} azureRegion Supported Azure regions for Cognitive Services
 * endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia',
 * 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus',
 * 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'
 *
 * @param {string} azureCloud Supported Azure Clouds for Cognitive Services
 * endpoints. Possible values include: 'com', 'us'
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {array} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _listSupportedCultures(azureRegion, azureCloud, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (azureRegion) {
      let allowedValues = [ 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia' ];
      if (!allowedValues.some( function(item) { return item === azureRegion; })) {
        throw new Error(azureRegion + ' is not a valid value. The valid values are: ' + allowedValues);
      }
    } else {
      throw new Error('azureRegion cannot be null or undefined.');
    }
    if (azureCloud) {
      let allowedValues1 = [ 'com', 'us' ];
      if (!allowedValues1.some( function(item) { return item === azureCloud; })) {
        throw new Error(azureCloud + ' is not a valid value. The valid values are: ' + allowedValues1);
      }
    } else {
      throw new Error('azureCloud cannot be null or undefined.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'apps/cultures';
  requestUrl = requestUrl.replace('{AzureRegion}', azureRegion);
  requestUrl = requestUrl.replace('{AzureCloud}', azureCloud);

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = {
            required: false,
            serializedName: 'parsedResponse',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'AvailableCultureElementType',
                  type: {
                    name: 'Composite',
                    className: 'AvailableCulture'
                  }
              }
            }
          };
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Gets the query logs of the past month for the application.
 *
 * @param {string} azureRegion Supported Azure regions for Cognitive Services
 * endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia',
 * 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus',
 * 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'
 *
 * @param {string} azureCloud Supported Azure Clouds for Cognitive Services
 * endpoints. Possible values include: 'com', 'us'
 *
 * @param {uuid} appId The application ID.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _downloadQueryLogs(azureRegion, azureCloud, appId, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (azureRegion) {
      let allowedValues = [ 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia' ];
      if (!allowedValues.some( function(item) { return item === azureRegion; })) {
        throw new Error(azureRegion + ' is not a valid value. The valid values are: ' + allowedValues);
      }
    } else {
      throw new Error('azureRegion cannot be null or undefined.');
    }
    if (azureCloud) {
      let allowedValues1 = [ 'com', 'us' ];
      if (!allowedValues1.some( function(item) { return item === azureCloud; })) {
        throw new Error(azureCloud + ' is not a valid value. The valid values are: ' + allowedValues1);
      }
    } else {
      throw new Error('azureCloud cannot be null or undefined.');
    }
    if (appId === null || appId === undefined || typeof appId.valueOf() !== 'string' || !msRest.isValidUuid(appId)) {
      throw new Error('appId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'apps/{appId}/querylogs';
  requestUrl = requestUrl.replace('{AzureRegion}', azureRegion);
  requestUrl = requestUrl.replace('{AzureCloud}', azureCloud);
  requestUrl = requestUrl.replace('{appId}', encodeURIComponent(appId.toString()));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  httpRequest.streamedResponse = true;
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }

    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(`Unexpected status code: ${statusCode}`);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        if (responseBody !== undefined) parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }

    // Create Result
    let result = response;
    return callback(null, result, httpRequest, response);
  });
}

/**
 * Gets the application info.
 *
 * @param {string} azureRegion Supported Azure regions for Cognitive Services
 * endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia',
 * 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus',
 * 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'
 *
 * @param {string} azureCloud Supported Azure Clouds for Cognitive Services
 * endpoints. Possible values include: 'com', 'us'
 *
 * @param {uuid} appId The application ID.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link ApplicationInfoResponse} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _get(azureRegion, azureCloud, appId, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (azureRegion) {
      let allowedValues = [ 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia' ];
      if (!allowedValues.some( function(item) { return item === azureRegion; })) {
        throw new Error(azureRegion + ' is not a valid value. The valid values are: ' + allowedValues);
      }
    } else {
      throw new Error('azureRegion cannot be null or undefined.');
    }
    if (azureCloud) {
      let allowedValues1 = [ 'com', 'us' ];
      if (!allowedValues1.some( function(item) { return item === azureCloud; })) {
        throw new Error(azureCloud + ' is not a valid value. The valid values are: ' + allowedValues1);
      }
    } else {
      throw new Error('azureCloud cannot be null or undefined.');
    }
    if (appId === null || appId === undefined || typeof appId.valueOf() !== 'string' || !msRest.isValidUuid(appId)) {
      throw new Error('appId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'apps/{appId}';
  requestUrl = requestUrl.replace('{AzureRegion}', azureRegion);
  requestUrl = requestUrl.replace('{AzureCloud}', azureCloud);
  requestUrl = requestUrl.replace('{appId}', encodeURIComponent(appId.toString()));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ApplicationInfoResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Updates the name or description of the application.
 *
 * @param {string} azureRegion Supported Azure regions for Cognitive Services
 * endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia',
 * 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus',
 * 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'
 *
 * @param {string} azureCloud Supported Azure Clouds for Cognitive Services
 * endpoints. Possible values include: 'com', 'us'
 *
 * @param {uuid} appId The application ID.
 *
 * @param {object} applicationUpdateObject A model containing Name and
 * Description of the application.
 *
 * @param {string} [applicationUpdateObject.name] The application's new name.
 *
 * @param {string} [applicationUpdateObject.description] The application's new
 * description.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link OperationStatus} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _update(azureRegion, azureCloud, appId, applicationUpdateObject, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (azureRegion) {
      let allowedValues = [ 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia' ];
      if (!allowedValues.some( function(item) { return item === azureRegion; })) {
        throw new Error(azureRegion + ' is not a valid value. The valid values are: ' + allowedValues);
      }
    } else {
      throw new Error('azureRegion cannot be null or undefined.');
    }
    if (azureCloud) {
      let allowedValues1 = [ 'com', 'us' ];
      if (!allowedValues1.some( function(item) { return item === azureCloud; })) {
        throw new Error(azureCloud + ' is not a valid value. The valid values are: ' + allowedValues1);
      }
    } else {
      throw new Error('azureCloud cannot be null or undefined.');
    }
    if (appId === null || appId === undefined || typeof appId.valueOf() !== 'string' || !msRest.isValidUuid(appId)) {
      throw new Error('appId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (applicationUpdateObject === null || applicationUpdateObject === undefined) {
      throw new Error('applicationUpdateObject cannot be null or undefined.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'apps/{appId}';
  requestUrl = requestUrl.replace('{AzureRegion}', azureRegion);
  requestUrl = requestUrl.replace('{AzureCloud}', azureCloud);
  requestUrl = requestUrl.replace('{appId}', encodeURIComponent(appId.toString()));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PUT';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (applicationUpdateObject !== null && applicationUpdateObject !== undefined) {
      let requestModelMapper = new client.models['ApplicationUpdateObject']().mapper();
      requestModel = client.serialize(requestModelMapper, applicationUpdateObject, 'applicationUpdateObject');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(applicationUpdateObject, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['OperationStatus']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Deletes an application.
 *
 * @param {string} azureRegion Supported Azure regions for Cognitive Services
 * endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia',
 * 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus',
 * 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'
 *
 * @param {string} azureCloud Supported Azure Clouds for Cognitive Services
 * endpoints. Possible values include: 'com', 'us'
 *
 * @param {uuid} appId The application ID.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {boolean} [options.force] A flag to indicate whether to force an
 * operation.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link OperationStatus} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _deleteMethod(azureRegion, azureCloud, appId, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let force = (options && options.force !== undefined) ? options.force : false;
  // Validate
  try {
    if (azureRegion) {
      let allowedValues = [ 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia' ];
      if (!allowedValues.some( function(item) { return item === azureRegion; })) {
        throw new Error(azureRegion + ' is not a valid value. The valid values are: ' + allowedValues);
      }
    } else {
      throw new Error('azureRegion cannot be null or undefined.');
    }
    if (azureCloud) {
      let allowedValues1 = [ 'com', 'us' ];
      if (!allowedValues1.some( function(item) { return item === azureCloud; })) {
        throw new Error(azureCloud + ' is not a valid value. The valid values are: ' + allowedValues1);
      }
    } else {
      throw new Error('azureCloud cannot be null or undefined.');
    }
    if (appId === null || appId === undefined || typeof appId.valueOf() !== 'string' || !msRest.isValidUuid(appId)) {
      throw new Error('appId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (force !== null && force !== undefined && typeof force !== 'boolean') {
      throw new Error('force must be of type boolean.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'apps/{appId}';
  requestUrl = requestUrl.replace('{AzureRegion}', azureRegion);
  requestUrl = requestUrl.replace('{AzureCloud}', azureCloud);
  requestUrl = requestUrl.replace('{appId}', encodeURIComponent(appId.toString()));
  let queryParameters = [];
  if (force !== null && force !== undefined) {
    queryParameters.push('force=' + encodeURIComponent(force.toString()));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'DELETE';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['OperationStatus']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Publishes a specific version of the application.
 *
 * @param {string} azureRegion Supported Azure regions for Cognitive Services
 * endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia',
 * 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus',
 * 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'
 *
 * @param {string} azureCloud Supported Azure Clouds for Cognitive Services
 * endpoints. Possible values include: 'com', 'us'
 *
 * @param {uuid} appId The application ID.
 *
 * @param {object} applicationPublishObject The application publish object. The
 * region is the target region that the application is published to.
 *
 * @param {string} [applicationPublishObject.versionId] The version ID to
 * publish.
 *
 * @param {boolean} [applicationPublishObject.isStaging] Indicates if the
 * staging slot should be used, instead of the Production one.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link ProductionOrStagingEndpointInfo} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _publish(azureRegion, azureCloud, appId, applicationPublishObject, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (azureRegion) {
      let allowedValues = [ 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia' ];
      if (!allowedValues.some( function(item) { return item === azureRegion; })) {
        throw new Error(azureRegion + ' is not a valid value. The valid values are: ' + allowedValues);
      }
    } else {
      throw new Error('azureRegion cannot be null or undefined.');
    }
    if (azureCloud) {
      let allowedValues1 = [ 'com', 'us' ];
      if (!allowedValues1.some( function(item) { return item === azureCloud; })) {
        throw new Error(azureCloud + ' is not a valid value. The valid values are: ' + allowedValues1);
      }
    } else {
      throw new Error('azureCloud cannot be null or undefined.');
    }
    if (appId === null || appId === undefined || typeof appId.valueOf() !== 'string' || !msRest.isValidUuid(appId)) {
      throw new Error('appId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (applicationPublishObject === null || applicationPublishObject === undefined) {
      throw new Error('applicationPublishObject cannot be null or undefined.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'apps/{appId}/publish';
  requestUrl = requestUrl.replace('{AzureRegion}', azureRegion);
  requestUrl = requestUrl.replace('{AzureCloud}', azureCloud);
  requestUrl = requestUrl.replace('{appId}', encodeURIComponent(appId.toString()));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (applicationPublishObject !== null && applicationPublishObject !== undefined) {
      let requestModelMapper = new client.models['ApplicationPublishObject']().mapper();
      requestModel = client.serialize(requestModelMapper, applicationPublishObject, 'applicationPublishObject');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(applicationPublishObject, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 201 && statusCode !== 207) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 201) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ProductionOrStagingEndpointInfo']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }
    // Deserialize Response
    if (statusCode === 207) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ProductionOrStagingEndpointInfo']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError1 = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError1.request = msRest.stripRequest(httpRequest);
        deserializationError1.response = msRest.stripResponse(response);
        return callback(deserializationError1);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Get the application settings.
 *
 * @param {string} azureRegion Supported Azure regions for Cognitive Services
 * endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia',
 * 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus',
 * 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'
 *
 * @param {string} azureCloud Supported Azure Clouds for Cognitive Services
 * endpoints. Possible values include: 'com', 'us'
 *
 * @param {uuid} appId The application ID.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link ApplicationSettings} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getSettings(azureRegion, azureCloud, appId, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (azureRegion) {
      let allowedValues = [ 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia' ];
      if (!allowedValues.some( function(item) { return item === azureRegion; })) {
        throw new Error(azureRegion + ' is not a valid value. The valid values are: ' + allowedValues);
      }
    } else {
      throw new Error('azureRegion cannot be null or undefined.');
    }
    if (azureCloud) {
      let allowedValues1 = [ 'com', 'us' ];
      if (!allowedValues1.some( function(item) { return item === azureCloud; })) {
        throw new Error(azureCloud + ' is not a valid value. The valid values are: ' + allowedValues1);
      }
    } else {
      throw new Error('azureCloud cannot be null or undefined.');
    }
    if (appId === null || appId === undefined || typeof appId.valueOf() !== 'string' || !msRest.isValidUuid(appId)) {
      throw new Error('appId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'apps/{appId}/settings';
  requestUrl = requestUrl.replace('{AzureRegion}', azureRegion);
  requestUrl = requestUrl.replace('{AzureCloud}', azureCloud);
  requestUrl = requestUrl.replace('{appId}', encodeURIComponent(appId.toString()));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ApplicationSettings']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Updates the application settings.
 *
 * @param {string} azureRegion Supported Azure regions for Cognitive Services
 * endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia',
 * 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus',
 * 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'
 *
 * @param {string} azureCloud Supported Azure Clouds for Cognitive Services
 * endpoints. Possible values include: 'com', 'us'
 *
 * @param {uuid} appId The application ID.
 *
 * @param {object} applicationSettingUpdateObject An object containing the new
 * application settings.
 *
 * @param {boolean} [applicationSettingUpdateObject.isPublic] Setting your
 * application as public allows other people to use your application's endpoint
 * using their own keys.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link OperationStatus} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _updateSettings(azureRegion, azureCloud, appId, applicationSettingUpdateObject, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (azureRegion) {
      let allowedValues = [ 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia' ];
      if (!allowedValues.some( function(item) { return item === azureRegion; })) {
        throw new Error(azureRegion + ' is not a valid value. The valid values are: ' + allowedValues);
      }
    } else {
      throw new Error('azureRegion cannot be null or undefined.');
    }
    if (azureCloud) {
      let allowedValues1 = [ 'com', 'us' ];
      if (!allowedValues1.some( function(item) { return item === azureCloud; })) {
        throw new Error(azureCloud + ' is not a valid value. The valid values are: ' + allowedValues1);
      }
    } else {
      throw new Error('azureCloud cannot be null or undefined.');
    }
    if (appId === null || appId === undefined || typeof appId.valueOf() !== 'string' || !msRest.isValidUuid(appId)) {
      throw new Error('appId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (applicationSettingUpdateObject === null || applicationSettingUpdateObject === undefined) {
      throw new Error('applicationSettingUpdateObject cannot be null or undefined.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'apps/{appId}/settings';
  requestUrl = requestUrl.replace('{AzureRegion}', azureRegion);
  requestUrl = requestUrl.replace('{AzureCloud}', azureCloud);
  requestUrl = requestUrl.replace('{appId}', encodeURIComponent(appId.toString()));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PUT';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (applicationSettingUpdateObject !== null && applicationSettingUpdateObject !== undefined) {
      let requestModelMapper = new client.models['ApplicationSettingUpdateObject']().mapper();
      requestModel = client.serialize(requestModelMapper, applicationSettingUpdateObject, 'applicationSettingUpdateObject');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(applicationSettingUpdateObject, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['OperationStatus']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Get the application publish settings.
 *
 * @param {string} azureRegion Supported Azure regions for Cognitive Services
 * endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia',
 * 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus',
 * 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'
 *
 * @param {string} azureCloud Supported Azure Clouds for Cognitive Services
 * endpoints. Possible values include: 'com', 'us'
 *
 * @param {uuid} appId The application ID.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link PublishSettings} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getPublishSettings(azureRegion, azureCloud, appId, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (azureRegion) {
      let allowedValues = [ 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia' ];
      if (!allowedValues.some( function(item) { return item === azureRegion; })) {
        throw new Error(azureRegion + ' is not a valid value. The valid values are: ' + allowedValues);
      }
    } else {
      throw new Error('azureRegion cannot be null or undefined.');
    }
    if (azureCloud) {
      let allowedValues1 = [ 'com', 'us' ];
      if (!allowedValues1.some( function(item) { return item === azureCloud; })) {
        throw new Error(azureCloud + ' is not a valid value. The valid values are: ' + allowedValues1);
      }
    } else {
      throw new Error('azureCloud cannot be null or undefined.');
    }
    if (appId === null || appId === undefined || typeof appId.valueOf() !== 'string' || !msRest.isValidUuid(appId)) {
      throw new Error('appId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'apps/{appId}/publishsettings';
  requestUrl = requestUrl.replace('{AzureRegion}', azureRegion);
  requestUrl = requestUrl.replace('{AzureCloud}', azureCloud);
  requestUrl = requestUrl.replace('{appId}', encodeURIComponent(appId.toString()));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['PublishSettings']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Updates the application publish settings.
 *
 * @param {string} azureRegion Supported Azure regions for Cognitive Services
 * endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia',
 * 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus',
 * 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'
 *
 * @param {string} azureCloud Supported Azure Clouds for Cognitive Services
 * endpoints. Possible values include: 'com', 'us'
 *
 * @param {uuid} appId The application ID.
 *
 * @param {object} publishSettingUpdateObject An object containing the new
 * publish application settings.
 *
 * @param {boolean} [publishSettingUpdateObject.sentimentAnalysis] Setting
 * sentiment analysis as true returns the Sentiment of the input utterance
 * along with the response
 *
 * @param {boolean} [publishSettingUpdateObject.speech] Setting speech as
 * public enables speech priming in your app
 *
 * @param {boolean} [publishSettingUpdateObject.spellChecker] Setting spell
 * checker as public enables spell checking the input utterance.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link OperationStatus} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _updatePublishSettings(azureRegion, azureCloud, appId, publishSettingUpdateObject, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (azureRegion) {
      let allowedValues = [ 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia' ];
      if (!allowedValues.some( function(item) { return item === azureRegion; })) {
        throw new Error(azureRegion + ' is not a valid value. The valid values are: ' + allowedValues);
      }
    } else {
      throw new Error('azureRegion cannot be null or undefined.');
    }
    if (azureCloud) {
      let allowedValues1 = [ 'com', 'us' ];
      if (!allowedValues1.some( function(item) { return item === azureCloud; })) {
        throw new Error(azureCloud + ' is not a valid value. The valid values are: ' + allowedValues1);
      }
    } else {
      throw new Error('azureCloud cannot be null or undefined.');
    }
    if (appId === null || appId === undefined || typeof appId.valueOf() !== 'string' || !msRest.isValidUuid(appId)) {
      throw new Error('appId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (publishSettingUpdateObject === null || publishSettingUpdateObject === undefined) {
      throw new Error('publishSettingUpdateObject cannot be null or undefined.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'apps/{appId}/publishsettings';
  requestUrl = requestUrl.replace('{AzureRegion}', azureRegion);
  requestUrl = requestUrl.replace('{AzureCloud}', azureCloud);
  requestUrl = requestUrl.replace('{appId}', encodeURIComponent(appId.toString()));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PUT';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (publishSettingUpdateObject !== null && publishSettingUpdateObject !== undefined) {
      let requestModelMapper = new client.models['PublishSettingUpdateObject']().mapper();
      requestModel = client.serialize(requestModelMapper, publishSettingUpdateObject, 'publishSettingUpdateObject');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(publishSettingUpdateObject, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['OperationStatus']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Returns the available endpoint deployment regions and URLs.
 *
 * @param {string} azureRegion Supported Azure regions for Cognitive Services
 * endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia',
 * 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus',
 * 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'
 *
 * @param {string} azureCloud Supported Azure Clouds for Cognitive Services
 * endpoints. Possible values include: 'com', 'us'
 *
 * @param {uuid} appId The application ID.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _listEndpoints(azureRegion, azureCloud, appId, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (azureRegion) {
      let allowedValues = [ 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia' ];
      if (!allowedValues.some( function(item) { return item === azureRegion; })) {
        throw new Error(azureRegion + ' is not a valid value. The valid values are: ' + allowedValues);
      }
    } else {
      throw new Error('azureRegion cannot be null or undefined.');
    }
    if (azureCloud) {
      let allowedValues1 = [ 'com', 'us' ];
      if (!allowedValues1.some( function(item) { return item === azureCloud; })) {
        throw new Error(azureCloud + ' is not a valid value. The valid values are: ' + allowedValues1);
      }
    } else {
      throw new Error('azureCloud cannot be null or undefined.');
    }
    if (appId === null || appId === undefined || typeof appId.valueOf() !== 'string' || !msRest.isValidUuid(appId)) {
      throw new Error('appId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'apps/{appId}/endpoints';
  requestUrl = requestUrl.replace('{AzureRegion}', azureRegion);
  requestUrl = requestUrl.replace('{AzureCloud}', azureCloud);
  requestUrl = requestUrl.replace('{appId}', encodeURIComponent(appId.toString()));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = {
            required: false,
            serializedName: 'parsedResponse',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          };
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Gets all the available custom prebuilt domains for all cultures.
 *
 * @param {string} azureRegion Supported Azure regions for Cognitive Services
 * endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia',
 * 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus',
 * 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'
 *
 * @param {string} azureCloud Supported Azure Clouds for Cognitive Services
 * endpoints. Possible values include: 'com', 'us'
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {array} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _listAvailableCustomPrebuiltDomains(azureRegion, azureCloud, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (azureRegion) {
      let allowedValues = [ 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia' ];
      if (!allowedValues.some( function(item) { return item === azureRegion; })) {
        throw new Error(azureRegion + ' is not a valid value. The valid values are: ' + allowedValues);
      }
    } else {
      throw new Error('azureRegion cannot be null or undefined.');
    }
    if (azureCloud) {
      let allowedValues1 = [ 'com', 'us' ];
      if (!allowedValues1.some( function(item) { return item === azureCloud; })) {
        throw new Error(azureCloud + ' is not a valid value. The valid values are: ' + allowedValues1);
      }
    } else {
      throw new Error('azureCloud cannot be null or undefined.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'apps/customprebuiltdomains';
  requestUrl = requestUrl.replace('{AzureRegion}', azureRegion);
  requestUrl = requestUrl.replace('{AzureCloud}', azureCloud);

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = {
            required: false,
            serializedName: 'parsedResponse',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'PrebuiltDomainElementType',
                  type: {
                    name: 'Composite',
                    className: 'PrebuiltDomain'
                  }
              }
            }
          };
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Adds a prebuilt domain along with its models as a new application.
 *
 * @param {string} azureRegion Supported Azure regions for Cognitive Services
 * endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia',
 * 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus',
 * 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'
 *
 * @param {string} azureCloud Supported Azure Clouds for Cognitive Services
 * endpoints. Possible values include: 'com', 'us'
 *
 * @param {object} prebuiltDomainCreateObject A prebuilt domain create object
 * containing the name and culture of the domain.
 *
 * @param {string} [prebuiltDomainCreateObject.domainName] The domain name.
 *
 * @param {string} [prebuiltDomainCreateObject.culture] The culture of the new
 * domain.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {uuid} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _addCustomPrebuiltDomain(azureRegion, azureCloud, prebuiltDomainCreateObject, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (azureRegion) {
      let allowedValues = [ 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia' ];
      if (!allowedValues.some( function(item) { return item === azureRegion; })) {
        throw new Error(azureRegion + ' is not a valid value. The valid values are: ' + allowedValues);
      }
    } else {
      throw new Error('azureRegion cannot be null or undefined.');
    }
    if (azureCloud) {
      let allowedValues1 = [ 'com', 'us' ];
      if (!allowedValues1.some( function(item) { return item === azureCloud; })) {
        throw new Error(azureCloud + ' is not a valid value. The valid values are: ' + allowedValues1);
      }
    } else {
      throw new Error('azureCloud cannot be null or undefined.');
    }
    if (prebuiltDomainCreateObject === null || prebuiltDomainCreateObject === undefined) {
      throw new Error('prebuiltDomainCreateObject cannot be null or undefined.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'apps/customprebuiltdomains';
  requestUrl = requestUrl.replace('{AzureRegion}', azureRegion);
  requestUrl = requestUrl.replace('{AzureCloud}', azureCloud);

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (prebuiltDomainCreateObject !== null && prebuiltDomainCreateObject !== undefined) {
      let requestModelMapper = new client.models['PrebuiltDomainCreateObject']().mapper();
      requestModel = client.serialize(requestModelMapper, prebuiltDomainCreateObject, 'prebuiltDomainCreateObject');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(prebuiltDomainCreateObject, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 201) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 201) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = {
            required: false,
            serializedName: 'parsedResponse',
            type: {
              name: 'String'
            }
          };
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Gets all the available custom prebuilt domains for a specific culture.
 *
 * @param {string} azureRegion Supported Azure regions for Cognitive Services
 * endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia',
 * 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus',
 * 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'
 *
 * @param {string} azureCloud Supported Azure Clouds for Cognitive Services
 * endpoints. Possible values include: 'com', 'us'
 *
 * @param {string} culture Culture.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {array} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _listAvailableCustomPrebuiltDomainsForCulture(azureRegion, azureCloud, culture, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (azureRegion) {
      let allowedValues = [ 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia' ];
      if (!allowedValues.some( function(item) { return item === azureRegion; })) {
        throw new Error(azureRegion + ' is not a valid value. The valid values are: ' + allowedValues);
      }
    } else {
      throw new Error('azureRegion cannot be null or undefined.');
    }
    if (azureCloud) {
      let allowedValues1 = [ 'com', 'us' ];
      if (!allowedValues1.some( function(item) { return item === azureCloud; })) {
        throw new Error(azureCloud + ' is not a valid value. The valid values are: ' + allowedValues1);
      }
    } else {
      throw new Error('azureCloud cannot be null or undefined.');
    }
    if (culture === null || culture === undefined || typeof culture.valueOf() !== 'string') {
      throw new Error('culture cannot be null or undefined and it must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'apps/customprebuiltdomains/{culture}';
  requestUrl = requestUrl.replace('{AzureRegion}', azureRegion);
  requestUrl = requestUrl.replace('{AzureCloud}', azureCloud);
  requestUrl = requestUrl.replace('{culture}', encodeURIComponent(culture));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = {
            required: false,
            serializedName: 'parsedResponse',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'PrebuiltDomainElementType',
                  type: {
                    name: 'Composite',
                    className: 'PrebuiltDomain'
                  }
              }
            }
          };
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary package - Gets published LUIS application package in binary stream
 * GZip format
 *
 * Packages published LUIS application as GZip.
 *
 * @param {string} azureRegion Supported Azure regions for Cognitive Services
 * endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia',
 * 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus',
 * 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'
 *
 * @param {string} azureCloud Supported Azure Clouds for Cognitive Services
 * endpoints. Possible values include: 'com', 'us'
 *
 * @param {uuid} appId The application ID.
 *
 * @param {string} slotName The publishing slot name.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _packagePublishedApplicationAsGzip(azureRegion, azureCloud, appId, slotName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (azureRegion) {
      let allowedValues = [ 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia' ];
      if (!allowedValues.some( function(item) { return item === azureRegion; })) {
        throw new Error(azureRegion + ' is not a valid value. The valid values are: ' + allowedValues);
      }
    } else {
      throw new Error('azureRegion cannot be null or undefined.');
    }
    if (azureCloud) {
      let allowedValues1 = [ 'com', 'us' ];
      if (!allowedValues1.some( function(item) { return item === azureCloud; })) {
        throw new Error(azureCloud + ' is not a valid value. The valid values are: ' + allowedValues1);
      }
    } else {
      throw new Error('azureCloud cannot be null or undefined.');
    }
    if (appId === null || appId === undefined || typeof appId.valueOf() !== 'string' || !msRest.isValidUuid(appId)) {
      throw new Error('appId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (slotName === null || slotName === undefined || typeof slotName.valueOf() !== 'string') {
      throw new Error('slotName cannot be null or undefined and it must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'package/{appId}/slot/{slotName}/gzip';
  requestUrl = requestUrl.replace('{AzureRegion}', azureRegion);
  requestUrl = requestUrl.replace('{AzureCloud}', azureCloud);
  requestUrl = requestUrl.replace('{appId}', encodeURIComponent(appId.toString()));
  requestUrl = requestUrl.replace('{slotName}', encodeURIComponent(slotName));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  httpRequest.streamedResponse = true;
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }

    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(`Unexpected status code: ${statusCode}`);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        if (responseBody !== undefined) parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }

    // Create Result
    let result = response;
    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary package - Gets trained LUIS application package in binary stream
 * GZip format
 *
 * Packages trained LUIS application as GZip.
 *
 * @param {string} azureRegion Supported Azure regions for Cognitive Services
 * endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia',
 * 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus',
 * 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'
 *
 * @param {string} azureCloud Supported Azure Clouds for Cognitive Services
 * endpoints. Possible values include: 'com', 'us'
 *
 * @param {uuid} appId The application ID.
 *
 * @param {string} versionId The version ID.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _packageTrainedApplicationAsGzip(azureRegion, azureCloud, appId, versionId, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (azureRegion) {
      let allowedValues = [ 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia' ];
      if (!allowedValues.some( function(item) { return item === azureRegion; })) {
        throw new Error(azureRegion + ' is not a valid value. The valid values are: ' + allowedValues);
      }
    } else {
      throw new Error('azureRegion cannot be null or undefined.');
    }
    if (azureCloud) {
      let allowedValues1 = [ 'com', 'us' ];
      if (!allowedValues1.some( function(item) { return item === azureCloud; })) {
        throw new Error(azureCloud + ' is not a valid value. The valid values are: ' + allowedValues1);
      }
    } else {
      throw new Error('azureCloud cannot be null or undefined.');
    }
    if (appId === null || appId === undefined || typeof appId.valueOf() !== 'string' || !msRest.isValidUuid(appId)) {
      throw new Error('appId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (versionId === null || versionId === undefined || typeof versionId.valueOf() !== 'string') {
      throw new Error('versionId cannot be null or undefined and it must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'package/{appId}/versions/{versionId}/gzip';
  requestUrl = requestUrl.replace('{AzureRegion}', azureRegion);
  requestUrl = requestUrl.replace('{AzureCloud}', azureCloud);
  requestUrl = requestUrl.replace('{appId}', encodeURIComponent(appId.toString()));
  requestUrl = requestUrl.replace('{versionId}', encodeURIComponent(versionId));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  httpRequest.streamedResponse = true;
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }

    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(`Unexpected status code: ${statusCode}`);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        if (responseBody !== undefined) parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }

    // Create Result
    let result = response;
    return callback(null, result, httpRequest, response);
  });
}

/** Class representing a Apps. */
class Apps {
  /**
   * Create a Apps.
   * @param {LUISAuthoringClient} client Reference to the service client.
   */
  constructor(client) {
    this.client = client;
    this._add = _add;
    this._list = _list;
    this._importMethod = _importMethod;
    this._listCortanaEndpoints = _listCortanaEndpoints;
    this._listDomains = _listDomains;
    this._listUsageScenarios = _listUsageScenarios;
    this._listSupportedCultures = _listSupportedCultures;
    this._downloadQueryLogs = _downloadQueryLogs;
    this._get = _get;
    this._update = _update;
    this._deleteMethod = _deleteMethod;
    this._publish = _publish;
    this._getSettings = _getSettings;
    this._updateSettings = _updateSettings;
    this._getPublishSettings = _getPublishSettings;
    this._updatePublishSettings = _updatePublishSettings;
    this._listEndpoints = _listEndpoints;
    this._listAvailableCustomPrebuiltDomains = _listAvailableCustomPrebuiltDomains;
    this._addCustomPrebuiltDomain = _addCustomPrebuiltDomain;
    this._listAvailableCustomPrebuiltDomainsForCulture = _listAvailableCustomPrebuiltDomainsForCulture;
    this._packagePublishedApplicationAsGzip = _packagePublishedApplicationAsGzip;
    this._packageTrainedApplicationAsGzip = _packageTrainedApplicationAsGzip;
  }

  /**
   * Creates a new LUIS app.
   *
   * @param {string} azureRegion Supported Azure regions for Cognitive Services
   * endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia',
   * 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus',
   * 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'
   *
   * @param {string} azureCloud Supported Azure Clouds for Cognitive Services
   * endpoints. Possible values include: 'com', 'us'
   *
   * @param {object} applicationCreateObject A model containing Name, Description
   * (optional), Culture, Usage Scenario (optional), Domain (optional) and
   * initial version ID (optional) of the application. Default value for the
   * version ID is 0.1. Note: the culture cannot be changed after the app is
   * created.
   *
   * @param {string} applicationCreateObject.culture The culture for the new
   * application. It is the language that your app understands and speaks. E.g.:
   * "en-us". Note: the culture cannot be changed after the app is created.
   *
   * @param {string} [applicationCreateObject.domain] The domain for the new
   * application. Optional. E.g.: Comics.
   *
   * @param {string} [applicationCreateObject.description] Description of the new
   * application. Optional.
   *
   * @param {string} [applicationCreateObject.initialVersionId] The initial
   * version ID. Optional. Default value is: "0.1"
   *
   * @param {string} [applicationCreateObject.usageScenario] Defines the scenario
   * for the new application. Optional. E.g.: IoT.
   *
   * @param {string} applicationCreateObject.name The name for the new
   * application.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Uuid>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  addWithHttpOperationResponse(azureRegion, azureCloud, applicationCreateObject, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._add(azureRegion, azureCloud, applicationCreateObject, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Creates a new LUIS app.
   *
   * @param {string} azureRegion Supported Azure regions for Cognitive Services
   * endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia',
   * 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus',
   * 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'
   *
   * @param {string} azureCloud Supported Azure Clouds for Cognitive Services
   * endpoints. Possible values include: 'com', 'us'
   *
   * @param {object} applicationCreateObject A model containing Name, Description
   * (optional), Culture, Usage Scenario (optional), Domain (optional) and
   * initial version ID (optional) of the application. Default value for the
   * version ID is 0.1. Note: the culture cannot be changed after the app is
   * created.
   *
   * @param {string} applicationCreateObject.culture The culture for the new
   * application. It is the language that your app understands and speaks. E.g.:
   * "en-us". Note: the culture cannot be changed after the app is created.
   *
   * @param {string} [applicationCreateObject.domain] The domain for the new
   * application. Optional. E.g.: Comics.
   *
   * @param {string} [applicationCreateObject.description] Description of the new
   * application. Optional.
   *
   * @param {string} [applicationCreateObject.initialVersionId] The initial
   * version ID. Optional. Default value is: "0.1"
   *
   * @param {string} [applicationCreateObject.usageScenario] Defines the scenario
   * for the new application. Optional. E.g.: IoT.
   *
   * @param {string} applicationCreateObject.name The name for the new
   * application.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Uuid} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {uuid} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  add(azureRegion, azureCloud, applicationCreateObject, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._add(azureRegion, azureCloud, applicationCreateObject, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._add(azureRegion, azureCloud, applicationCreateObject, options, optionalCallback);
    }
  }

  /**
   * Lists all of the user applications.
   *
   * @param {string} azureRegion Supported Azure regions for Cognitive Services
   * endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia',
   * 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus',
   * 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'
   *
   * @param {string} azureCloud Supported Azure Clouds for Cognitive Services
   * endpoints. Possible values include: 'com', 'us'
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.skip] The number of entries to skip. Default value
   * is 0.
   *
   * @param {number} [options.take] The number of entries to return. Maximum page
   * size is 500. Default is 100.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  listWithHttpOperationResponse(azureRegion, azureCloud, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._list(azureRegion, azureCloud, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Lists all of the user applications.
   *
   * @param {string} azureRegion Supported Azure regions for Cognitive Services
   * endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia',
   * 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus',
   * 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'
   *
   * @param {string} azureCloud Supported Azure Clouds for Cognitive Services
   * endpoints. Possible values include: 'com', 'us'
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.skip] The number of entries to skip. Default value
   * is 0.
   *
   * @param {number} [options.take] The number of entries to return. Maximum page
   * size is 500. Default is 100.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Array} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {array} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  list(azureRegion, azureCloud, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._list(azureRegion, azureCloud, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._list(azureRegion, azureCloud, options, optionalCallback);
    }
  }

  /**
   * Imports an application to LUIS, the application's structure should be
   * included in the request body.
   *
   * @param {string} azureRegion Supported Azure regions for Cognitive Services
   * endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia',
   * 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus',
   * 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'
   *
   * @param {string} azureCloud Supported Azure Clouds for Cognitive Services
   * endpoints. Possible values include: 'com', 'us'
   *
   * @param {object} luisApp A LUIS application structure.
   *
   * @param {string} [luisApp.name] The name of the application.
   *
   * @param {string} [luisApp.versionId] The version ID of the application that
   * was exported.
   *
   * @param {string} [luisApp.desc] The description of the application.
   *
   * @param {string} [luisApp.culture] The culture of the application. E.g.:
   * en-us.
   *
   * @param {array} [luisApp.intents] List of intents.
   *
   * @param {array} [luisApp.entities] List of entities.
   *
   * @param {array} [luisApp.closedLists] List of closed lists.
   *
   * @param {array} [luisApp.composites] List of composite entities.
   *
   * @param {array} [luisApp.patternAnyEntities] List of Pattern.Any entities.
   *
   * @param {array} [luisApp.regexEntities] List of regular expression entities.
   *
   * @param {array} [luisApp.prebuiltEntities] List of prebuilt entities.
   *
   * @param {array} [luisApp.regexFeatures] List of pattern features.
   *
   * @param {array} [luisApp.modelFeatures] List of model features.
   *
   * @param {array} [luisApp.patterns] List of patterns.
   *
   * @param {array} [luisApp.utterances] List of sample utterances.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.appName] The application name to create. If not
   * specified, the application name will be read from the imported object.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Uuid>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  importMethodWithHttpOperationResponse(azureRegion, azureCloud, luisApp, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._importMethod(azureRegion, azureCloud, luisApp, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Imports an application to LUIS, the application's structure should be
   * included in the request body.
   *
   * @param {string} azureRegion Supported Azure regions for Cognitive Services
   * endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia',
   * 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus',
   * 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'
   *
   * @param {string} azureCloud Supported Azure Clouds for Cognitive Services
   * endpoints. Possible values include: 'com', 'us'
   *
   * @param {object} luisApp A LUIS application structure.
   *
   * @param {string} [luisApp.name] The name of the application.
   *
   * @param {string} [luisApp.versionId] The version ID of the application that
   * was exported.
   *
   * @param {string} [luisApp.desc] The description of the application.
   *
   * @param {string} [luisApp.culture] The culture of the application. E.g.:
   * en-us.
   *
   * @param {array} [luisApp.intents] List of intents.
   *
   * @param {array} [luisApp.entities] List of entities.
   *
   * @param {array} [luisApp.closedLists] List of closed lists.
   *
   * @param {array} [luisApp.composites] List of composite entities.
   *
   * @param {array} [luisApp.patternAnyEntities] List of Pattern.Any entities.
   *
   * @param {array} [luisApp.regexEntities] List of regular expression entities.
   *
   * @param {array} [luisApp.prebuiltEntities] List of prebuilt entities.
   *
   * @param {array} [luisApp.regexFeatures] List of pattern features.
   *
   * @param {array} [luisApp.modelFeatures] List of model features.
   *
   * @param {array} [luisApp.patterns] List of patterns.
   *
   * @param {array} [luisApp.utterances] List of sample utterances.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.appName] The application name to create. If not
   * specified, the application name will be read from the imported object.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Uuid} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {uuid} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  importMethod(azureRegion, azureCloud, luisApp, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._importMethod(azureRegion, azureCloud, luisApp, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._importMethod(azureRegion, azureCloud, luisApp, options, optionalCallback);
    }
  }

  /**
   * Gets the endpoint URLs for the prebuilt Cortana applications.
   *
   * @param {string} azureRegion Supported Azure regions for Cognitive Services
   * endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia',
   * 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus',
   * 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'
   *
   * @param {string} azureCloud Supported Azure Clouds for Cognitive Services
   * endpoints. Possible values include: 'com', 'us'
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<PersonalAssistantsResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  listCortanaEndpointsWithHttpOperationResponse(azureRegion, azureCloud, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._listCortanaEndpoints(azureRegion, azureCloud, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Gets the endpoint URLs for the prebuilt Cortana applications.
   *
   * @param {string} azureRegion Supported Azure regions for Cognitive Services
   * endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia',
   * 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus',
   * 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'
   *
   * @param {string} azureCloud Supported Azure Clouds for Cognitive Services
   * endpoints. Possible values include: 'com', 'us'
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {PersonalAssistantsResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link PersonalAssistantsResponse} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  listCortanaEndpoints(azureRegion, azureCloud, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._listCortanaEndpoints(azureRegion, azureCloud, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._listCortanaEndpoints(azureRegion, azureCloud, options, optionalCallback);
    }
  }

  /**
   * Gets the available application domains.
   *
   * @param {string} azureRegion Supported Azure regions for Cognitive Services
   * endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia',
   * 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus',
   * 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'
   *
   * @param {string} azureCloud Supported Azure Clouds for Cognitive Services
   * endpoints. Possible values include: 'com', 'us'
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  listDomainsWithHttpOperationResponse(azureRegion, azureCloud, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._listDomains(azureRegion, azureCloud, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Gets the available application domains.
   *
   * @param {string} azureRegion Supported Azure regions for Cognitive Services
   * endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia',
   * 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus',
   * 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'
   *
   * @param {string} azureCloud Supported Azure Clouds for Cognitive Services
   * endpoints. Possible values include: 'com', 'us'
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Array} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {array} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  listDomains(azureRegion, azureCloud, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._listDomains(azureRegion, azureCloud, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._listDomains(azureRegion, azureCloud, options, optionalCallback);
    }
  }

  /**
   * Gets the application available usage scenarios.
   *
   * @param {string} azureRegion Supported Azure regions for Cognitive Services
   * endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia',
   * 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus',
   * 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'
   *
   * @param {string} azureCloud Supported Azure Clouds for Cognitive Services
   * endpoints. Possible values include: 'com', 'us'
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  listUsageScenariosWithHttpOperationResponse(azureRegion, azureCloud, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._listUsageScenarios(azureRegion, azureCloud, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Gets the application available usage scenarios.
   *
   * @param {string} azureRegion Supported Azure regions for Cognitive Services
   * endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia',
   * 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus',
   * 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'
   *
   * @param {string} azureCloud Supported Azure Clouds for Cognitive Services
   * endpoints. Possible values include: 'com', 'us'
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Array} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {array} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  listUsageScenarios(azureRegion, azureCloud, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._listUsageScenarios(azureRegion, azureCloud, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._listUsageScenarios(azureRegion, azureCloud, options, optionalCallback);
    }
  }

  /**
   * Gets the supported application cultures.
   *
   * @param {string} azureRegion Supported Azure regions for Cognitive Services
   * endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia',
   * 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus',
   * 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'
   *
   * @param {string} azureCloud Supported Azure Clouds for Cognitive Services
   * endpoints. Possible values include: 'com', 'us'
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  listSupportedCulturesWithHttpOperationResponse(azureRegion, azureCloud, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._listSupportedCultures(azureRegion, azureCloud, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Gets the supported application cultures.
   *
   * @param {string} azureRegion Supported Azure regions for Cognitive Services
   * endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia',
   * 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus',
   * 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'
   *
   * @param {string} azureCloud Supported Azure Clouds for Cognitive Services
   * endpoints. Possible values include: 'com', 'us'
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Array} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {array} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  listSupportedCultures(azureRegion, azureCloud, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._listSupportedCultures(azureRegion, azureCloud, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._listSupportedCultures(azureRegion, azureCloud, options, optionalCallback);
    }
  }

  /**
   * Gets the query logs of the past month for the application.
   *
   * @param {string} azureRegion Supported Azure regions for Cognitive Services
   * endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia',
   * 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus',
   * 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'
   *
   * @param {string} azureCloud Supported Azure Clouds for Cognitive Services
   * endpoints. Possible values include: 'com', 'us'
   *
   * @param {uuid} appId The application ID.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  downloadQueryLogsWithHttpOperationResponse(azureRegion, azureCloud, appId, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._downloadQueryLogs(azureRegion, azureCloud, appId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Gets the query logs of the past month for the application.
   *
   * @param {string} azureRegion Supported Azure regions for Cognitive Services
   * endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia',
   * 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus',
   * 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'
   *
   * @param {string} azureCloud Supported Azure Clouds for Cognitive Services
   * endpoints. Possible values include: 'com', 'us'
   *
   * @param {uuid} appId The application ID.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  downloadQueryLogs(azureRegion, azureCloud, appId, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._downloadQueryLogs(azureRegion, azureCloud, appId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._downloadQueryLogs(azureRegion, azureCloud, appId, options, optionalCallback);
    }
  }

  /**
   * Gets the application info.
   *
   * @param {string} azureRegion Supported Azure regions for Cognitive Services
   * endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia',
   * 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus',
   * 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'
   *
   * @param {string} azureCloud Supported Azure Clouds for Cognitive Services
   * endpoints. Possible values include: 'com', 'us'
   *
   * @param {uuid} appId The application ID.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ApplicationInfoResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getWithHttpOperationResponse(azureRegion, azureCloud, appId, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._get(azureRegion, azureCloud, appId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Gets the application info.
   *
   * @param {string} azureRegion Supported Azure regions for Cognitive Services
   * endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia',
   * 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus',
   * 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'
   *
   * @param {string} azureCloud Supported Azure Clouds for Cognitive Services
   * endpoints. Possible values include: 'com', 'us'
   *
   * @param {uuid} appId The application ID.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {ApplicationInfoResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ApplicationInfoResponse} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  get(azureRegion, azureCloud, appId, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._get(azureRegion, azureCloud, appId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._get(azureRegion, azureCloud, appId, options, optionalCallback);
    }
  }

  /**
   * Updates the name or description of the application.
   *
   * @param {string} azureRegion Supported Azure regions for Cognitive Services
   * endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia',
   * 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus',
   * 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'
   *
   * @param {string} azureCloud Supported Azure Clouds for Cognitive Services
   * endpoints. Possible values include: 'com', 'us'
   *
   * @param {uuid} appId The application ID.
   *
   * @param {object} applicationUpdateObject A model containing Name and
   * Description of the application.
   *
   * @param {string} [applicationUpdateObject.name] The application's new name.
   *
   * @param {string} [applicationUpdateObject.description] The application's new
   * description.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<OperationStatus>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  updateWithHttpOperationResponse(azureRegion, azureCloud, appId, applicationUpdateObject, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._update(azureRegion, azureCloud, appId, applicationUpdateObject, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Updates the name or description of the application.
   *
   * @param {string} azureRegion Supported Azure regions for Cognitive Services
   * endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia',
   * 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus',
   * 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'
   *
   * @param {string} azureCloud Supported Azure Clouds for Cognitive Services
   * endpoints. Possible values include: 'com', 'us'
   *
   * @param {uuid} appId The application ID.
   *
   * @param {object} applicationUpdateObject A model containing Name and
   * Description of the application.
   *
   * @param {string} [applicationUpdateObject.name] The application's new name.
   *
   * @param {string} [applicationUpdateObject.description] The application's new
   * description.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {OperationStatus} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link OperationStatus} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  update(azureRegion, azureCloud, appId, applicationUpdateObject, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._update(azureRegion, azureCloud, appId, applicationUpdateObject, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._update(azureRegion, azureCloud, appId, applicationUpdateObject, options, optionalCallback);
    }
  }

  /**
   * Deletes an application.
   *
   * @param {string} azureRegion Supported Azure regions for Cognitive Services
   * endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia',
   * 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus',
   * 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'
   *
   * @param {string} azureCloud Supported Azure Clouds for Cognitive Services
   * endpoints. Possible values include: 'com', 'us'
   *
   * @param {uuid} appId The application ID.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.force] A flag to indicate whether to force an
   * operation.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<OperationStatus>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  deleteMethodWithHttpOperationResponse(azureRegion, azureCloud, appId, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._deleteMethod(azureRegion, azureCloud, appId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Deletes an application.
   *
   * @param {string} azureRegion Supported Azure regions for Cognitive Services
   * endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia',
   * 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus',
   * 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'
   *
   * @param {string} azureCloud Supported Azure Clouds for Cognitive Services
   * endpoints. Possible values include: 'com', 'us'
   *
   * @param {uuid} appId The application ID.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.force] A flag to indicate whether to force an
   * operation.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {OperationStatus} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link OperationStatus} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteMethod(azureRegion, azureCloud, appId, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._deleteMethod(azureRegion, azureCloud, appId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._deleteMethod(azureRegion, azureCloud, appId, options, optionalCallback);
    }
  }

  /**
   * Publishes a specific version of the application.
   *
   * @param {string} azureRegion Supported Azure regions for Cognitive Services
   * endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia',
   * 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus',
   * 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'
   *
   * @param {string} azureCloud Supported Azure Clouds for Cognitive Services
   * endpoints. Possible values include: 'com', 'us'
   *
   * @param {uuid} appId The application ID.
   *
   * @param {object} applicationPublishObject The application publish object. The
   * region is the target region that the application is published to.
   *
   * @param {string} [applicationPublishObject.versionId] The version ID to
   * publish.
   *
   * @param {boolean} [applicationPublishObject.isStaging] Indicates if the
   * staging slot should be used, instead of the Production one.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ProductionOrStagingEndpointInfo>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  publishWithHttpOperationResponse(azureRegion, azureCloud, appId, applicationPublishObject, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._publish(azureRegion, azureCloud, appId, applicationPublishObject, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Publishes a specific version of the application.
   *
   * @param {string} azureRegion Supported Azure regions for Cognitive Services
   * endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia',
   * 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus',
   * 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'
   *
   * @param {string} azureCloud Supported Azure Clouds for Cognitive Services
   * endpoints. Possible values include: 'com', 'us'
   *
   * @param {uuid} appId The application ID.
   *
   * @param {object} applicationPublishObject The application publish object. The
   * region is the target region that the application is published to.
   *
   * @param {string} [applicationPublishObject.versionId] The version ID to
   * publish.
   *
   * @param {boolean} [applicationPublishObject.isStaging] Indicates if the
   * staging slot should be used, instead of the Production one.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {ProductionOrStagingEndpointInfo} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ProductionOrStagingEndpointInfo} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  publish(azureRegion, azureCloud, appId, applicationPublishObject, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._publish(azureRegion, azureCloud, appId, applicationPublishObject, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._publish(azureRegion, azureCloud, appId, applicationPublishObject, options, optionalCallback);
    }
  }

  /**
   * Get the application settings.
   *
   * @param {string} azureRegion Supported Azure regions for Cognitive Services
   * endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia',
   * 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus',
   * 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'
   *
   * @param {string} azureCloud Supported Azure Clouds for Cognitive Services
   * endpoints. Possible values include: 'com', 'us'
   *
   * @param {uuid} appId The application ID.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ApplicationSettings>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getSettingsWithHttpOperationResponse(azureRegion, azureCloud, appId, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getSettings(azureRegion, azureCloud, appId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Get the application settings.
   *
   * @param {string} azureRegion Supported Azure regions for Cognitive Services
   * endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia',
   * 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus',
   * 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'
   *
   * @param {string} azureCloud Supported Azure Clouds for Cognitive Services
   * endpoints. Possible values include: 'com', 'us'
   *
   * @param {uuid} appId The application ID.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {ApplicationSettings} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ApplicationSettings} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getSettings(azureRegion, azureCloud, appId, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getSettings(azureRegion, azureCloud, appId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getSettings(azureRegion, azureCloud, appId, options, optionalCallback);
    }
  }

  /**
   * Updates the application settings.
   *
   * @param {string} azureRegion Supported Azure regions for Cognitive Services
   * endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia',
   * 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus',
   * 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'
   *
   * @param {string} azureCloud Supported Azure Clouds for Cognitive Services
   * endpoints. Possible values include: 'com', 'us'
   *
   * @param {uuid} appId The application ID.
   *
   * @param {object} applicationSettingUpdateObject An object containing the new
   * application settings.
   *
   * @param {boolean} [applicationSettingUpdateObject.isPublic] Setting your
   * application as public allows other people to use your application's endpoint
   * using their own keys.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<OperationStatus>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  updateSettingsWithHttpOperationResponse(azureRegion, azureCloud, appId, applicationSettingUpdateObject, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._updateSettings(azureRegion, azureCloud, appId, applicationSettingUpdateObject, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Updates the application settings.
   *
   * @param {string} azureRegion Supported Azure regions for Cognitive Services
   * endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia',
   * 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus',
   * 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'
   *
   * @param {string} azureCloud Supported Azure Clouds for Cognitive Services
   * endpoints. Possible values include: 'com', 'us'
   *
   * @param {uuid} appId The application ID.
   *
   * @param {object} applicationSettingUpdateObject An object containing the new
   * application settings.
   *
   * @param {boolean} [applicationSettingUpdateObject.isPublic] Setting your
   * application as public allows other people to use your application's endpoint
   * using their own keys.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {OperationStatus} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link OperationStatus} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  updateSettings(azureRegion, azureCloud, appId, applicationSettingUpdateObject, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._updateSettings(azureRegion, azureCloud, appId, applicationSettingUpdateObject, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._updateSettings(azureRegion, azureCloud, appId, applicationSettingUpdateObject, options, optionalCallback);
    }
  }

  /**
   * Get the application publish settings.
   *
   * @param {string} azureRegion Supported Azure regions for Cognitive Services
   * endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia',
   * 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus',
   * 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'
   *
   * @param {string} azureCloud Supported Azure Clouds for Cognitive Services
   * endpoints. Possible values include: 'com', 'us'
   *
   * @param {uuid} appId The application ID.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<PublishSettings>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getPublishSettingsWithHttpOperationResponse(azureRegion, azureCloud, appId, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getPublishSettings(azureRegion, azureCloud, appId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Get the application publish settings.
   *
   * @param {string} azureRegion Supported Azure regions for Cognitive Services
   * endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia',
   * 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus',
   * 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'
   *
   * @param {string} azureCloud Supported Azure Clouds for Cognitive Services
   * endpoints. Possible values include: 'com', 'us'
   *
   * @param {uuid} appId The application ID.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {PublishSettings} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link PublishSettings} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getPublishSettings(azureRegion, azureCloud, appId, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getPublishSettings(azureRegion, azureCloud, appId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getPublishSettings(azureRegion, azureCloud, appId, options, optionalCallback);
    }
  }

  /**
   * Updates the application publish settings.
   *
   * @param {string} azureRegion Supported Azure regions for Cognitive Services
   * endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia',
   * 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus',
   * 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'
   *
   * @param {string} azureCloud Supported Azure Clouds for Cognitive Services
   * endpoints. Possible values include: 'com', 'us'
   *
   * @param {uuid} appId The application ID.
   *
   * @param {object} publishSettingUpdateObject An object containing the new
   * publish application settings.
   *
   * @param {boolean} [publishSettingUpdateObject.sentimentAnalysis] Setting
   * sentiment analysis as true returns the Sentiment of the input utterance
   * along with the response
   *
   * @param {boolean} [publishSettingUpdateObject.speech] Setting speech as
   * public enables speech priming in your app
   *
   * @param {boolean} [publishSettingUpdateObject.spellChecker] Setting spell
   * checker as public enables spell checking the input utterance.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<OperationStatus>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  updatePublishSettingsWithHttpOperationResponse(azureRegion, azureCloud, appId, publishSettingUpdateObject, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._updatePublishSettings(azureRegion, azureCloud, appId, publishSettingUpdateObject, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Updates the application publish settings.
   *
   * @param {string} azureRegion Supported Azure regions for Cognitive Services
   * endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia',
   * 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus',
   * 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'
   *
   * @param {string} azureCloud Supported Azure Clouds for Cognitive Services
   * endpoints. Possible values include: 'com', 'us'
   *
   * @param {uuid} appId The application ID.
   *
   * @param {object} publishSettingUpdateObject An object containing the new
   * publish application settings.
   *
   * @param {boolean} [publishSettingUpdateObject.sentimentAnalysis] Setting
   * sentiment analysis as true returns the Sentiment of the input utterance
   * along with the response
   *
   * @param {boolean} [publishSettingUpdateObject.speech] Setting speech as
   * public enables speech priming in your app
   *
   * @param {boolean} [publishSettingUpdateObject.spellChecker] Setting spell
   * checker as public enables spell checking the input utterance.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {OperationStatus} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link OperationStatus} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  updatePublishSettings(azureRegion, azureCloud, appId, publishSettingUpdateObject, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._updatePublishSettings(azureRegion, azureCloud, appId, publishSettingUpdateObject, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._updatePublishSettings(azureRegion, azureCloud, appId, publishSettingUpdateObject, options, optionalCallback);
    }
  }

  /**
   * Returns the available endpoint deployment regions and URLs.
   *
   * @param {string} azureRegion Supported Azure regions for Cognitive Services
   * endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia',
   * 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus',
   * 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'
   *
   * @param {string} azureCloud Supported Azure Clouds for Cognitive Services
   * endpoints. Possible values include: 'com', 'us'
   *
   * @param {uuid} appId The application ID.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  listEndpointsWithHttpOperationResponse(azureRegion, azureCloud, appId, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._listEndpoints(azureRegion, azureCloud, appId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Returns the available endpoint deployment regions and URLs.
   *
   * @param {string} azureRegion Supported Azure regions for Cognitive Services
   * endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia',
   * 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus',
   * 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'
   *
   * @param {string} azureCloud Supported Azure Clouds for Cognitive Services
   * endpoints. Possible values include: 'com', 'us'
   *
   * @param {uuid} appId The application ID.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  listEndpoints(azureRegion, azureCloud, appId, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._listEndpoints(azureRegion, azureCloud, appId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._listEndpoints(azureRegion, azureCloud, appId, options, optionalCallback);
    }
  }

  /**
   * Gets all the available custom prebuilt domains for all cultures.
   *
   * @param {string} azureRegion Supported Azure regions for Cognitive Services
   * endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia',
   * 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus',
   * 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'
   *
   * @param {string} azureCloud Supported Azure Clouds for Cognitive Services
   * endpoints. Possible values include: 'com', 'us'
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  listAvailableCustomPrebuiltDomainsWithHttpOperationResponse(azureRegion, azureCloud, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._listAvailableCustomPrebuiltDomains(azureRegion, azureCloud, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Gets all the available custom prebuilt domains for all cultures.
   *
   * @param {string} azureRegion Supported Azure regions for Cognitive Services
   * endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia',
   * 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus',
   * 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'
   *
   * @param {string} azureCloud Supported Azure Clouds for Cognitive Services
   * endpoints. Possible values include: 'com', 'us'
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Array} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {array} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  listAvailableCustomPrebuiltDomains(azureRegion, azureCloud, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._listAvailableCustomPrebuiltDomains(azureRegion, azureCloud, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._listAvailableCustomPrebuiltDomains(azureRegion, azureCloud, options, optionalCallback);
    }
  }

  /**
   * Adds a prebuilt domain along with its models as a new application.
   *
   * @param {string} azureRegion Supported Azure regions for Cognitive Services
   * endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia',
   * 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus',
   * 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'
   *
   * @param {string} azureCloud Supported Azure Clouds for Cognitive Services
   * endpoints. Possible values include: 'com', 'us'
   *
   * @param {object} prebuiltDomainCreateObject A prebuilt domain create object
   * containing the name and culture of the domain.
   *
   * @param {string} [prebuiltDomainCreateObject.domainName] The domain name.
   *
   * @param {string} [prebuiltDomainCreateObject.culture] The culture of the new
   * domain.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Uuid>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  addCustomPrebuiltDomainWithHttpOperationResponse(azureRegion, azureCloud, prebuiltDomainCreateObject, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._addCustomPrebuiltDomain(azureRegion, azureCloud, prebuiltDomainCreateObject, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Adds a prebuilt domain along with its models as a new application.
   *
   * @param {string} azureRegion Supported Azure regions for Cognitive Services
   * endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia',
   * 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus',
   * 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'
   *
   * @param {string} azureCloud Supported Azure Clouds for Cognitive Services
   * endpoints. Possible values include: 'com', 'us'
   *
   * @param {object} prebuiltDomainCreateObject A prebuilt domain create object
   * containing the name and culture of the domain.
   *
   * @param {string} [prebuiltDomainCreateObject.domainName] The domain name.
   *
   * @param {string} [prebuiltDomainCreateObject.culture] The culture of the new
   * domain.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Uuid} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {uuid} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  addCustomPrebuiltDomain(azureRegion, azureCloud, prebuiltDomainCreateObject, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._addCustomPrebuiltDomain(azureRegion, azureCloud, prebuiltDomainCreateObject, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._addCustomPrebuiltDomain(azureRegion, azureCloud, prebuiltDomainCreateObject, options, optionalCallback);
    }
  }

  /**
   * Gets all the available custom prebuilt domains for a specific culture.
   *
   * @param {string} azureRegion Supported Azure regions for Cognitive Services
   * endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia',
   * 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus',
   * 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'
   *
   * @param {string} azureCloud Supported Azure Clouds for Cognitive Services
   * endpoints. Possible values include: 'com', 'us'
   *
   * @param {string} culture Culture.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  listAvailableCustomPrebuiltDomainsForCultureWithHttpOperationResponse(azureRegion, azureCloud, culture, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._listAvailableCustomPrebuiltDomainsForCulture(azureRegion, azureCloud, culture, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Gets all the available custom prebuilt domains for a specific culture.
   *
   * @param {string} azureRegion Supported Azure regions for Cognitive Services
   * endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia',
   * 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus',
   * 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'
   *
   * @param {string} azureCloud Supported Azure Clouds for Cognitive Services
   * endpoints. Possible values include: 'com', 'us'
   *
   * @param {string} culture Culture.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Array} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {array} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  listAvailableCustomPrebuiltDomainsForCulture(azureRegion, azureCloud, culture, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._listAvailableCustomPrebuiltDomainsForCulture(azureRegion, azureCloud, culture, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._listAvailableCustomPrebuiltDomainsForCulture(azureRegion, azureCloud, culture, options, optionalCallback);
    }
  }

  /**
   * @summary package - Gets published LUIS application package in binary stream
   * GZip format
   *
   * Packages published LUIS application as GZip.
   *
   * @param {string} azureRegion Supported Azure regions for Cognitive Services
   * endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia',
   * 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus',
   * 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'
   *
   * @param {string} azureCloud Supported Azure Clouds for Cognitive Services
   * endpoints. Possible values include: 'com', 'us'
   *
   * @param {uuid} appId The application ID.
   *
   * @param {string} slotName The publishing slot name.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  packagePublishedApplicationAsGzipWithHttpOperationResponse(azureRegion, azureCloud, appId, slotName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._packagePublishedApplicationAsGzip(azureRegion, azureCloud, appId, slotName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary package - Gets published LUIS application package in binary stream
   * GZip format
   *
   * Packages published LUIS application as GZip.
   *
   * @param {string} azureRegion Supported Azure regions for Cognitive Services
   * endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia',
   * 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus',
   * 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'
   *
   * @param {string} azureCloud Supported Azure Clouds for Cognitive Services
   * endpoints. Possible values include: 'com', 'us'
   *
   * @param {uuid} appId The application ID.
   *
   * @param {string} slotName The publishing slot name.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  packagePublishedApplicationAsGzip(azureRegion, azureCloud, appId, slotName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._packagePublishedApplicationAsGzip(azureRegion, azureCloud, appId, slotName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._packagePublishedApplicationAsGzip(azureRegion, azureCloud, appId, slotName, options, optionalCallback);
    }
  }

  /**
   * @summary package - Gets trained LUIS application package in binary stream
   * GZip format
   *
   * Packages trained LUIS application as GZip.
   *
   * @param {string} azureRegion Supported Azure regions for Cognitive Services
   * endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia',
   * 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus',
   * 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'
   *
   * @param {string} azureCloud Supported Azure Clouds for Cognitive Services
   * endpoints. Possible values include: 'com', 'us'
   *
   * @param {uuid} appId The application ID.
   *
   * @param {string} versionId The version ID.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  packageTrainedApplicationAsGzipWithHttpOperationResponse(azureRegion, azureCloud, appId, versionId, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._packageTrainedApplicationAsGzip(azureRegion, azureCloud, appId, versionId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary package - Gets trained LUIS application package in binary stream
   * GZip format
   *
   * Packages trained LUIS application as GZip.
   *
   * @param {string} azureRegion Supported Azure regions for Cognitive Services
   * endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia',
   * 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus',
   * 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'
   *
   * @param {string} azureCloud Supported Azure Clouds for Cognitive Services
   * endpoints. Possible values include: 'com', 'us'
   *
   * @param {uuid} appId The application ID.
   *
   * @param {string} versionId The version ID.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  packageTrainedApplicationAsGzip(azureRegion, azureCloud, appId, versionId, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._packageTrainedApplicationAsGzip(azureRegion, azureCloud, appId, versionId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._packageTrainedApplicationAsGzip(azureRegion, azureCloud, appId, versionId, options, optionalCallback);
    }
  }

}

module.exports = Apps;
