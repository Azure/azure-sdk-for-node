/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Describes the policy used when upgrading the cluster.
 *
 */
class ClusterUpgradePolicy {
  /**
   * Create a ClusterUpgradePolicy.
   * @member {boolean} [forceRestart] If true, then processes are forcefully
   * restarted during upgrade even when the code version has not changed (the
   * upgrade only changes configuration or data).
   * @member {string} upgradeReplicaSetCheckTimeout The maximum amount of time
   * to block processing of an upgrade domain and revent loss of availability
   * when there are unexpected issues. When this timeout expires, processing of
   * the upgrade domain will proceed regardless of availability loss issues.
   * The timeout is reset at the start of each upgrade domain. The timeout can
   * be in either hh:mm:ss or in d.hh:mm:ss.ms format.
   * @member {string} healthCheckWaitDuration The length of time to wait after
   * completing an upgrade domain before performing health checks. The duration
   * can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
   * @member {string} healthCheckStableDuration The amount of time that the
   * application or cluster must remain healthy before the upgrade proceeds to
   * the next upgrade domain. The duration can be in either hh:mm:ss or in
   * d.hh:mm:ss.ms format.
   * @member {string} healthCheckRetryTimeout The amount of time to retry
   * health evaluation when the application or cluster is unhealthy before the
   * upgrade rolls back. The timeout can be in either hh:mm:ss or in
   * d.hh:mm:ss.ms format.
   * @member {string} upgradeTimeout The amount of time the overall upgrade has
   * to complete before the upgrade rolls back. The timeout can be in either
   * hh:mm:ss or in d.hh:mm:ss.ms format.
   * @member {string} upgradeDomainTimeout The amount of time each upgrade
   * domain has to complete before the upgrade rolls back. The timeout can be
   * in either hh:mm:ss or in d.hh:mm:ss.ms format.
   * @member {object} healthPolicy The cluster health policy used when
   * upgrading the cluster.
   * @member {number} [healthPolicy.maxPercentUnhealthyNodes] The maximum
   * allowed percentage of unhealthy nodes before reporting an error. For
   * example, to allow 10% of nodes to be unhealthy, this value would be 10.
   * @member {number} [healthPolicy.maxPercentUnhealthyApplications] The
   * maximum allowed percentage of unhealthy applications before reporting an
   * error. For example, to allow 10% of applications to be unhealthy, this
   * value would be 10.
   * @member {object} [deltaHealthPolicy] The delta health policy used when
   * upgrading the cluster.
   * @member {number} [deltaHealthPolicy.maxPercentDeltaUnhealthyNodes] The
   * maximum allowed percentage of nodes health degradation allowed during
   * cluster upgrades. The delta is measured between the state of the nodes at
   * the beginning of upgrade and the state of the nodes at the time of the
   * health evaluation. The check is performed after every upgrade domain
   * upgrade completion to make sure the global state of the cluster is within
   * tolerated limits.
   * @member {number}
   * [deltaHealthPolicy.maxPercentUpgradeDomainDeltaUnhealthyNodes] The maximum
   * allowed percentage of upgrade domain nodes health degradation allowed
   * during cluster upgrades. The delta is measured between the state of the
   * upgrade domain nodes at the beginning of upgrade and the state of the
   * upgrade domain nodes at the time of the health evaluation. The check is
   * performed after every upgrade domain upgrade completion for all completed
   * upgrade domains to make sure the state of the upgrade domains is within
   * tolerated limits.
   * @member {number} [deltaHealthPolicy.maxPercentDeltaUnhealthyApplications]
   * The maximum allowed percentage of applications health degradation allowed
   * during cluster upgrades. The delta is measured between the state of the
   * applications at the beginning of upgrade and the state of the applications
   * at the time of the health evaluation. The check is performed after every
   * upgrade domain upgrade completion to make sure the global state of the
   * cluster is within tolerated limits. System services are not included in
   * this.
   */
  constructor() {
  }

  /**
   * Defines the metadata of ClusterUpgradePolicy
   *
   * @returns {object} metadata of ClusterUpgradePolicy
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'ClusterUpgradePolicy',
      type: {
        name: 'Composite',
        className: 'ClusterUpgradePolicy',
        modelProperties: {
          forceRestart: {
            required: false,
            serializedName: 'forceRestart',
            type: {
              name: 'Boolean'
            }
          },
          upgradeReplicaSetCheckTimeout: {
            required: true,
            serializedName: 'upgradeReplicaSetCheckTimeout',
            type: {
              name: 'String'
            }
          },
          healthCheckWaitDuration: {
            required: true,
            serializedName: 'healthCheckWaitDuration',
            type: {
              name: 'String'
            }
          },
          healthCheckStableDuration: {
            required: true,
            serializedName: 'healthCheckStableDuration',
            type: {
              name: 'String'
            }
          },
          healthCheckRetryTimeout: {
            required: true,
            serializedName: 'healthCheckRetryTimeout',
            type: {
              name: 'String'
            }
          },
          upgradeTimeout: {
            required: true,
            serializedName: 'upgradeTimeout',
            type: {
              name: 'String'
            }
          },
          upgradeDomainTimeout: {
            required: true,
            serializedName: 'upgradeDomainTimeout',
            type: {
              name: 'String'
            }
          },
          healthPolicy: {
            required: true,
            serializedName: 'healthPolicy',
            type: {
              name: 'Composite',
              className: 'ClusterHealthPolicy'
            }
          },
          deltaHealthPolicy: {
            required: false,
            serializedName: 'deltaHealthPolicy',
            type: {
              name: 'Composite',
              className: 'ClusterUpgradeDeltaHealthPolicy'
            }
          }
        }
      }
    };
  }
}

module.exports = ClusterUpgradePolicy;
