/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Describes a node type in the cluster, each node type represents sub set of
 * nodes in the cluster.
 *
 */
class NodeTypeDescription {
  /**
   * Create a NodeTypeDescription.
   * @member {string} name The name of the node type.
   * @member {object} [placementProperties] The placement tags applied to nodes
   * in the node type, which can be used to indicate where certain services
   * (workload) should run.
   * @member {object} [capacities] The capacity tags applied to the nodes in
   * the node type, the cluster resource manager uses these tags to understand
   * how much resource a node has.
   * @member {number} clientConnectionEndpointPort The TCP cluster management
   * endpoint port.
   * @member {number} httpGatewayEndpointPort The HTTP cluster management
   * endpoint port.
   * @member {string} [durabilityLevel] Possible values include: 'Bronze',
   * 'Silver', 'Gold'
   * @member {object} [applicationPorts] The range of ports from which cluster
   * assigned port to Service Fabric applications.
   * @member {number} [applicationPorts.startPort] Starting port of a range of
   * ports
   * @member {number} [applicationPorts.endPort] End port of a range of ports
   * @member {object} [ephemeralPorts] The range of empheral ports that nodes
   * in this node type should be configured with.
   * @member {number} [ephemeralPorts.startPort] Starting port of a range of
   * ports
   * @member {number} [ephemeralPorts.endPort] End port of a range of ports
   * @member {boolean} isPrimary The node type on which system services will
   * run. Only one node type should be marked as primary. Primary node type
   * cannot be deleted or changed for existing clusters.
   * @member {number} vmInstanceCount The number of nodes in the node type.
   * This count should match the capacity property in the corresponding
   * VirtualMachineScaleSet resource.
   * @member {number} [reverseProxyEndpointPort] The endpoint used by reverse
   * proxy.
   */
  constructor() {
  }

  /**
   * Defines the metadata of NodeTypeDescription
   *
   * @returns {object} metadata of NodeTypeDescription
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'NodeTypeDescription',
      type: {
        name: 'Composite',
        className: 'NodeTypeDescription',
        modelProperties: {
          name: {
            required: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          placementProperties: {
            required: false,
            serializedName: 'placementProperties',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          capacities: {
            required: false,
            serializedName: 'capacities',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          clientConnectionEndpointPort: {
            required: true,
            serializedName: 'clientConnectionEndpointPort',
            type: {
              name: 'Number'
            }
          },
          httpGatewayEndpointPort: {
            required: true,
            serializedName: 'httpGatewayEndpointPort',
            type: {
              name: 'Number'
            }
          },
          durabilityLevel: {
            required: false,
            serializedName: 'durabilityLevel',
            type: {
              name: 'String'
            }
          },
          applicationPorts: {
            required: false,
            serializedName: 'applicationPorts',
            type: {
              name: 'Composite',
              className: 'EndpointRangeDescription'
            }
          },
          ephemeralPorts: {
            required: false,
            serializedName: 'ephemeralPorts',
            type: {
              name: 'Composite',
              className: 'EndpointRangeDescription'
            }
          },
          isPrimary: {
            required: true,
            serializedName: 'isPrimary',
            type: {
              name: 'Boolean'
            }
          },
          vmInstanceCount: {
            required: true,
            serializedName: 'vmInstanceCount',
            constraints: {
              InclusiveMaximum: 2147483647,
              InclusiveMinimum: 1
            },
            type: {
              name: 'Number'
            }
          },
          reverseProxyEndpointPort: {
            required: false,
            serializedName: 'reverseProxyEndpointPort',
            type: {
              name: 'Number'
            }
          }
        }
      }
    };
  }
}

module.exports = NodeTypeDescription;
