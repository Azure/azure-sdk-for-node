/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * The application resource.
 *
 * @extends models['ProxyResource']
 */
class ApplicationResource extends models['ProxyResource'] {
  /**
   * Create a ApplicationResource.
   * @member {string} [typeVersion]
   * @member {array} [parameters]
   * @member {object} [upgradePolicy]
   * @member {number} [upgradePolicy.upgradeReplicaSetCheckTimeout]
   * @member {boolean} [upgradePolicy.forceRestart]
   * @member {object} [upgradePolicy.rollingUpgradeMonitoringPolicy]
   * @member {string}
   * [upgradePolicy.rollingUpgradeMonitoringPolicy.healthCheckWaitDuration]
   * @member {string}
   * [upgradePolicy.rollingUpgradeMonitoringPolicy.healthCheckStableDuration]
   * @member {string}
   * [upgradePolicy.rollingUpgradeMonitoringPolicy.healthCheckRetryTimeout]
   * @member {string}
   * [upgradePolicy.rollingUpgradeMonitoringPolicy.upgradeTimeout]
   * @member {string}
   * [upgradePolicy.rollingUpgradeMonitoringPolicy.upgradeDomainTimeout]
   * @member {object} [upgradePolicy.applicationHealthPolicy]
   * @member {boolean}
   * [upgradePolicy.applicationHealthPolicy.considerWarningAsError] Indicates
   * whether warnings are treated with the same severity as errors.
   * @member {number}
   * [upgradePolicy.applicationHealthPolicy.maxPercentUnhealthyDeployedApplications]
   * The maximum allowed percentage of unhealthy deployed applications. Allowed
   * values are Byte values from zero to 100.
   * The percentage represents the maximum tolerated percentage of deployed
   * applications that can be unhealthy before the application is considered in
   * error.
   * This is calculated by dividing the number of unhealthy deployed
   * applications over the number of nodes where the application is currently
   * deployed on in the cluster.
   * The computation rounds up to tolerate one failure on small numbers of
   * nodes. Default percentage is zero.
   * @member {object}
   * [upgradePolicy.applicationHealthPolicy.defaultServiceTypeHealthPolicy]
   * @member {number}
   * [upgradePolicy.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyPartitionsPerService]
   * The maximum allowed percentage of unhealthy partitions per service.
   * Allowed values are Byte values from zero to 100
   *
   * The percentage represents the maximum tolerated percentage of partitions
   * that can be unhealthy before the service is considered in error.
   * If the percentage is respected but there is at least one unhealthy
   * partition, the health is evaluated as Warning.
   * The percentage is calculated by dividing the number of unhealthy
   * partitions over the total number of partitions in the service.
   * The computation rounds up to tolerate one failure on small numbers of
   * partitions. Default percentage is zero.
   * @member {number}
   * [upgradePolicy.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyReplicasPerPartition]
   * The maximum allowed percentage of unhealthy replicas per partition.
   * Allowed values are Byte values from zero to 100.
   *
   * The percentage represents the maximum tolerated percentage of replicas
   * that can be unhealthy before the partition is considered in error.
   * If the percentage is respected but there is at least one unhealthy
   * replica, the health is evaluated as Warning.
   * The percentage is calculated by dividing the number of unhealthy replicas
   * over the total number of replicas in the partition.
   * The computation rounds up to tolerate one failure on small numbers of
   * replicas. Default percentage is zero.
   * @member {number}
   * [upgradePolicy.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyServices]
   * The maximum maximum allowed percentage of unhealthy services. Allowed
   * values are Byte values from zero to 100.
   *
   * The percentage represents the maximum tolerated percentage of services
   * that can be unhealthy before the application is considered in error.
   * If the percentage is respected but there is at least one unhealthy
   * service, the health is evaluated as Warning.
   * This is calculated by dividing the number of unhealthy services of the
   * specific service type over the total number of services of the specific
   * service type.
   * The computation rounds up to tolerate one failure on small numbers of
   * services. Default percentage is zero.
   * @member {array}
   * [upgradePolicy.applicationHealthPolicy.serviceTypeHealthPolicyMap]
   * @member {number} [minimumNodes] The minimum number of nodes where Service
   * Fabric will reserve capacity for this application. Note that this does not
   * mean that the services of this application will be placed on all of those
   * nodes. If this property is set to zero, no capacity will be reserved. The
   * value of this property cannot be more than the value of the MaximumNodes
   * property.
   * @member {number} [maximumNodes] The maximum number of nodes where Service
   * Fabric will reserve capacity for this application. Note that this does not
   * mean that the services of this application will be placed on all of those
   * nodes. By default, the value of this property is zero and it means that
   * the services can be placed on any node. Default value: 0 .
   * @member {boolean} [removeApplicationCapacity] The version of the
   * application type
   * @member {array} [metrics]
   * @member {string} [provisioningState] The current deployment or
   * provisioning state, which only appears in the response
   * @member {string} [typeName]
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of ApplicationResource
   *
   * @returns {object} metadata of ApplicationResource
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'ApplicationResource',
      type: {
        name: 'Composite',
        className: 'ApplicationResource',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          location: {
            required: true,
            serializedName: 'location',
            type: {
              name: 'String'
            }
          },
          typeVersion: {
            required: false,
            serializedName: 'properties.typeVersion',
            type: {
              name: 'String'
            }
          },
          parameters: {
            required: false,
            serializedName: 'properties.parameters',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ApplicationParameterElementType',
                  type: {
                    name: 'Composite',
                    className: 'ApplicationParameter'
                  }
              }
            }
          },
          upgradePolicy: {
            required: false,
            serializedName: 'properties.upgradePolicy',
            type: {
              name: 'Composite',
              className: 'ApplicationUpgradePolicy'
            }
          },
          minimumNodes: {
            required: false,
            serializedName: 'properties.minimumNodes',
            constraints: {
              InclusiveMinimum: 0
            },
            type: {
              name: 'Number'
            }
          },
          maximumNodes: {
            required: false,
            serializedName: 'properties.maximumNodes',
            defaultValue: 0,
            constraints: {
              InclusiveMinimum: 0
            },
            type: {
              name: 'Number'
            }
          },
          removeApplicationCapacity: {
            required: false,
            serializedName: 'properties.removeApplicationCapacity',
            type: {
              name: 'Boolean'
            }
          },
          metrics: {
            required: false,
            serializedName: 'properties.metrics',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ApplicationMetricDescriptionElementType',
                  type: {
                    name: 'Composite',
                    className: 'ApplicationMetricDescription'
                  }
              }
            }
          },
          provisioningState: {
            required: false,
            readOnly: true,
            serializedName: 'properties.provisioningState',
            type: {
              name: 'String'
            }
          },
          typeName: {
            required: false,
            serializedName: 'properties.typeName',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = ApplicationResource;
