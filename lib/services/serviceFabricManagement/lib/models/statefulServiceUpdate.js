/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * The properties of a stateful service resource for patch operations.
 *
 * @extends models['ServiceUpdateProperties']
 */
class StatefulServiceUpdate extends models['ServiceUpdateProperties'] {
  /**
   * Create a StatefulServiceUpdate.
   * @member {number} [targetReplicaSetSize] The target replica set size as a
   * number.
   * @member {number} [minReplicaSetSize] The minimum replica set size as a
   * number.
   * @member {date} [replicaRestartWaitDuration] The duration between when a
   * replica goes down and when a new replica is created, represented in ISO
   * 8601 format (hh:mm:ss.s).
   * @member {date} [quorumLossWaitDuration] The maximum duration for which a
   * partition is allowed to be in a state of quorum loss, represented in ISO
   * 8601 format (hh:mm:ss.s).
   * @member {date} [standByReplicaKeepDuration] The definition on how long
   * StandBy replicas should be maintained before being removed, represented in
   * ISO 8601 format (hh:mm:ss.s).
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of StatefulServiceUpdate
   *
   * @returns {object} metadata of StatefulServiceUpdate
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'StatefulServiceUpdate',
      type: {
        name: 'Composite',
        className: 'StatefulServiceUpdate',
        modelProperties: {
          placementConstraints: {
            required: false,
            serializedName: 'placementConstraints',
            type: {
              name: 'String'
            }
          },
          correlationScheme: {
            required: false,
            serializedName: 'correlationScheme',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ServiceCorrelationDescriptionElementType',
                  type: {
                    name: 'Composite',
                    className: 'ServiceCorrelationDescription'
                  }
              }
            }
          },
          serviceLoadMetrics: {
            required: false,
            serializedName: 'serviceLoadMetrics',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ServiceLoadMetricDescriptionElementType',
                  type: {
                    name: 'Composite',
                    className: 'ServiceLoadMetricDescription'
                  }
              }
            }
          },
          servicePlacementPolicies: {
            required: false,
            serializedName: 'servicePlacementPolicies',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ServicePlacementPolicyDescriptionElementType',
                  type: {
                    name: 'Composite',
                    polymorphicDiscriminator: {
                      serializedName: 'Type',
                      clientName: 'type'
                    },
                    uberParent: 'ServicePlacementPolicyDescription',
                    className: 'ServicePlacementPolicyDescription'
                  }
              }
            }
          },
          defaultMoveCost: {
            required: false,
            serializedName: 'defaultMoveCost',
            type: {
              name: 'String'
            }
          },
          serviceResourceType: {
            required: true,
            serializedName: 'serviceResourceType',
            type: {
              name: 'String'
            }
          },
          targetReplicaSetSize: {
            required: false,
            serializedName: 'targetReplicaSetSize',
            constraints: {
              InclusiveMinimum: 1
            },
            type: {
              name: 'Number'
            }
          },
          minReplicaSetSize: {
            required: false,
            serializedName: 'minReplicaSetSize',
            constraints: {
              InclusiveMinimum: 1
            },
            type: {
              name: 'Number'
            }
          },
          replicaRestartWaitDuration: {
            required: false,
            serializedName: 'replicaRestartWaitDuration',
            type: {
              name: 'DateTime'
            }
          },
          quorumLossWaitDuration: {
            required: false,
            serializedName: 'quorumLossWaitDuration',
            type: {
              name: 'DateTime'
            }
          },
          standByReplicaKeepDuration: {
            required: false,
            serializedName: 'standByReplicaKeepDuration',
            type: {
              name: 'DateTime'
            }
          }
        }
      }
    };
  }
}

module.exports = StatefulServiceUpdate;
