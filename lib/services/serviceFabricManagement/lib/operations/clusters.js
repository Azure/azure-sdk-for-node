/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const msRest = require('ms-rest');
const msRestAzure = require('ms-rest-azure');
const WebResource = msRest.WebResource;


/**
 * @summary Create a ServiceFabric cluster
 *
 * Create cluster resource
 *
 *
 * @param {string} resourceGroupName The name of the resource group.
 *
 * @param {string} clusterName The name of the cluster resource
 *
 * @param {object} cluster The cluster resource.
 *
 * @param {array} [cluster.availableClusterVersions] The Service Fabric runtime
 * versions available for this cluster.
 *
 * @param {string} [cluster.clusterState] Possible values include:
 * 'WaitingForNodes', 'Deploying', 'BaselineUpgrade',
 * 'UpdatingUserConfiguration', 'UpdatingUserCertificate',
 * 'UpdatingInfrastructure', 'EnforcingClusterVersion',
 * 'UpgradeServiceUnreachable', 'AutoScale', 'Ready'
 *
 * @param {string} [cluster.clusterCodeVersion] The Service Fabric runtime
 * version of the cluster. This property can only by set the user when
 * **upgradeMode** is set to 'Manual'. To get list of available Service Fabric
 * versions for new clusters use [ClusterVersion API](./ClusterVersion.md). To
 * get the list of available version for existing clusters use
 * **availableClusterVersions**.
 *
 * @param {object} [cluster.certificate] The certificate to use for securing
 * the cluster. The certificate provided will be used for  node to node
 * security within the cluster, SSL certificate for cluster management endpoint
 * and default  admin client.
 *
 * @param {string} [cluster.reliabilityLevel] Possible values include: 'None',
 * 'Bronze', 'Silver', 'Gold', 'Platinum'
 *
 * @param {string} [cluster.upgradeMode] Possible values include: 'Automatic',
 * 'Manual'
 *
 * @param {array} [cluster.clientCertificateThumbprints] The list of client
 * certificates referenced by thumbprint that are allowed to manage the
 * cluster.
 *
 * @param {array} [cluster.clientCertificateCommonNames] The list of client
 * certificates referenced by common name that are allowed to manage the
 * cluster.
 *
 * @param {array} [cluster.fabricSettings] The list of custom fabric settings
 * to configure the cluster.
 *
 * @param {object} [cluster.reverseProxyCertificate] The server certificate
 * used by reverse proxy.
 *
 * @param {string} cluster.reverseProxyCertificate.thumbprint Thumbprint of the
 * primary certificate.
 *
 * @param {string} [cluster.reverseProxyCertificate.thumbprintSecondary]
 * Thumbprint of the secondary certificate.
 *
 * @param {string} [cluster.reverseProxyCertificate.x509StoreName] The local
 * certificate store location. Possible values include: 'AddressBook',
 * 'AuthRoot', 'CertificateAuthority', 'Disallowed', 'My', 'Root',
 * 'TrustedPeople', 'TrustedPublisher'
 *
 * @param {string} cluster.managementEndpoint The http management endpoint of
 * the cluster.
 *
 * @param {array} cluster.nodeTypes The list of node types in the cluster.
 *
 * @param {object} [cluster.azureActiveDirectory] The AAD authentication
 * settings of the cluster.
 *
 * @param {string} [cluster.azureActiveDirectory.tenantId] Azure active
 * directory tenant id.
 *
 * @param {string} [cluster.azureActiveDirectory.clusterApplication] Azure
 * active directory cluster application id.
 *
 * @param {string} [cluster.azureActiveDirectory.clientApplication] Azure
 * active directory client application id.
 *
 * @param {string} [cluster.vmImage] The VM image VMSS has been configured
 * with. Generic names such as Windows or Linux can be used.
 *
 * @param {object} [cluster.diagnosticsStorageAccountConfig] The storage
 * account information for storing Service Fabric diagnostic logs.
 *
 * @param {string} cluster.diagnosticsStorageAccountConfig.storageAccountName
 * The Azure storage account name.
 *
 * @param {string}
 * cluster.diagnosticsStorageAccountConfig.protectedAccountKeyName The
 * protected diagnostics storage key name.
 *
 * @param {string} cluster.diagnosticsStorageAccountConfig.blobEndpoint The
 * blob endpoint of the azure storage account.
 *
 * @param {string} cluster.diagnosticsStorageAccountConfig.queueEndpoint The
 * queue endpoint of the azure storage account.
 *
 * @param {string} cluster.diagnosticsStorageAccountConfig.tableEndpoint The
 * table endpoint of the azure storage account.
 *
 * @param {object} [cluster.upgradeDescription] The policy to use when
 * upgrading the cluster.
 *
 * @param {boolean} [cluster.upgradeDescription.forceRestart] If true, then
 * processes are forcefully restarted during upgrade even when the code version
 * has not changed (the upgrade only changes configuration or data).
 *
 * @param {string} cluster.upgradeDescription.upgradeReplicaSetCheckTimeout The
 * maximum amount of time to block processing of an upgrade domain and revent
 * loss of availability when there are unexpected issues. When this timeout
 * expires, processing of the upgrade domain will proceed regardless of
 * availability loss issues. The timeout is reset at the start of each upgrade
 * domain. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
 *
 * @param {string} cluster.upgradeDescription.healthCheckWaitDuration The
 * length of time to wait after completing an upgrade domain before performing
 * health checks. The duration can be in either hh:mm:ss or in d.hh:mm:ss.ms
 * format.
 *
 * @param {string} cluster.upgradeDescription.healthCheckStableDuration The
 * amount of time that the application or cluster must remain healthy before
 * the upgrade proceeds to the next upgrade domain. The duration can be in
 * either hh:mm:ss or in d.hh:mm:ss.ms format.
 *
 * @param {string} cluster.upgradeDescription.healthCheckRetryTimeout The
 * amount of time to retry health evaluation when the application or cluster is
 * unhealthy before the upgrade rolls back. The timeout can be in either
 * hh:mm:ss or in d.hh:mm:ss.ms format.
 *
 * @param {string} cluster.upgradeDescription.upgradeTimeout The amount of time
 * the overall upgrade has to complete before the upgrade rolls back. The
 * timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
 *
 * @param {string} cluster.upgradeDescription.upgradeDomainTimeout The amount
 * of time each upgrade domain has to complete before the upgrade rolls back.
 * The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
 *
 * @param {object} cluster.upgradeDescription.healthPolicy The cluster health
 * policy used when upgrading the cluster.
 *
 * @param {number}
 * [cluster.upgradeDescription.healthPolicy.maxPercentUnhealthyNodes] The
 * maximum allowed percentage of unhealthy nodes before reporting an error. For
 * example, to allow 10% of nodes to be unhealthy, this value would be 10.
 *
 * @param {number}
 * [cluster.upgradeDescription.healthPolicy.maxPercentUnhealthyApplications]
 * The maximum allowed percentage of unhealthy applications before reporting an
 * error. For example, to allow 10% of applications to be unhealthy, this value
 * would be 10.
 *
 * @param {object} [cluster.upgradeDescription.deltaHealthPolicy] The delta
 * health policy used when upgrading the cluster.
 *
 * @param {number}
 * cluster.upgradeDescription.deltaHealthPolicy.maxPercentDeltaUnhealthyNodes
 * The maximum allowed percentage of nodes health degradation allowed during
 * cluster upgrades. The delta is measured between the state of the nodes at
 * the beginning of upgrade and the state of the nodes at the time of the
 * health evaluation. The check is performed after every upgrade domain upgrade
 * completion to make sure the global state of the cluster is within tolerated
 * limits.
 *
 * @param {number}
 * cluster.upgradeDescription.deltaHealthPolicy.maxPercentUpgradeDomainDeltaUnhealthyNodes
 * The maximum allowed percentage of upgrade domain nodes health degradation
 * allowed during cluster upgrades. The delta is measured between the state of
 * the upgrade domain nodes at the beginning of upgrade and the state of the
 * upgrade domain nodes at the time of the health evaluation. The check is
 * performed after every upgrade domain upgrade completion for all completed
 * upgrade domains to make sure the state of the upgrade domains is within
 * tolerated limits.
 *
 * @param {number}
 * cluster.upgradeDescription.deltaHealthPolicy.maxPercentDeltaUnhealthyApplications
 * The maximum allowed percentage of applications health degradation allowed
 * during cluster upgrades. The delta is measured between the state of the
 * applications at the beginning of upgrade and the state of the applications
 * at the time of the health evaluation. The check is performed after every
 * upgrade domain upgrade completion to make sure the global state of the
 * cluster is within tolerated limits. System services are not included in
 * this.
 *
 * @param {array} [cluster.addOnFeatures] The list of add-on features to enable
 * in the cluster.
 *
 * @param {string} cluster.location Resource location.
 *
 * @param {object} [cluster.tags] Resource tags.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link Cluster} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _create(resourceGroupName, clusterName, cluster, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }

  if (!callback) {
    throw new Error('callback cannot be null.');
  }

  // Send request
  this.beginCreate(resourceGroupName, clusterName, cluster, options, (err, parsedResult, httpRequest, response) => {
    if (err) return callback(err);

    let initialResult = new msRest.HttpOperationResponse();
    initialResult.request = httpRequest;
    initialResult.response = response;
    initialResult.body = response.body;
    client.getLongRunningOperationResult(initialResult, options, (err, pollingResult) => {
      if (err) return callback(err);

      // Create Result
      let result = null;

      httpRequest = pollingResult.request;
      response = pollingResult.response;
      let responseBody = pollingResult.body;
      if (responseBody === '') responseBody = null;

      // Deserialize Response
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['Cluster']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }

      return callback(null, result, httpRequest, response);
    });
  });
}

/**
 * @summary Delete cluster resource
 *
 * Delete cluster resource
 *
 *
 * @param {string} resourceGroupName The name of the resource group.
 *
 * @param {string} clusterName The name of the cluster resource
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _deleteMethod(resourceGroupName, clusterName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (clusterName === null || clusterName === undefined || typeof clusterName.valueOf() !== 'string') {
      throw new Error('clusterName cannot be null or undefined and it must be of type string.');
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabric/clusters/{clusterName}';
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{clusterName}', encodeURIComponent(clusterName));
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'DELETE';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200 && statusCode !== 204) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorModel']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Get cluster resource
 *
 * Get cluster resource
 *
 *
 * @param {string} resourceGroupName The name of the resource group.
 *
 * @param {string} clusterName The name of the cluster resource
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link Cluster} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _get(resourceGroupName, clusterName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (clusterName === null || clusterName === undefined || typeof clusterName.valueOf() !== 'string') {
      throw new Error('clusterName cannot be null or undefined and it must be of type string.');
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabric/clusters/{clusterName}';
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{clusterName}', encodeURIComponent(clusterName));
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorModel']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['Cluster']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}


/**
 * @summary Update cluster configuration
 *
 * Update cluster configuration
 *
 *
 * @param {string} resourceGroupName The name of the resource group.
 *
 * @param {string} clusterName The name of the cluster resource
 *
 * @param {object} clusterUpdateParameters The parameters which contains the
 * property value and property name which used to update the cluster
 * configuration.
 *
 * @param {string} [clusterUpdateParameters.reliabilityLevel] The reliability
 * level sets the replica set size of system services. Learn about
 * [ReliabilityLevel](https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-cluster-capacity).
 * Possible values include: 'Bronze', 'Silver', 'Gold'
 *
 * @param {string} [clusterUpdateParameters.upgradeMode] The upgrade mode of
 * the cluster. This indicates if the cluster should be automatically upgraded
 * when new Service Fabric runtime version is available. Possible values
 * include: 'Automatic', 'Manual'
 *
 * @param {string} [clusterUpdateParameters.clusterCodeVersion] The Service
 * Fabric runtime version of the cluster. This property can only by set the
 * user when **upgradeMode** is set to 'Manual'. To get list of available
 * Service Fabric versions for new clusters use [ClusterVersion
 * API](./ClusterVersion.md). To get the list of available version for existing
 * clusters use **availableClusterVersions**.
 *
 * @param {object} [clusterUpdateParameters.certificate] The certificate to use
 * for securing the cluster. The certificate provided will be used for  node to
 * node security within the cluster, SSL certificate for cluster management
 * endpoint and default  admin client.
 *
 * @param {array} [clusterUpdateParameters.clientCertificateThumbprints] The
 * list of client certificates referenced by thumbprint that are allowed to
 * manage the cluster. This will overwrite the existing list.
 *
 * @param {array} [clusterUpdateParameters.clientCertificateCommonNames] The
 * list of client certificates referenced by common name that are allowed to
 * manage the cluster. This will overwrite the existing list.
 *
 * @param {array} [clusterUpdateParameters.fabricSettings] The list of custom
 * fabric settings to configure the cluster. This will overwrite the existing
 * list.
 *
 * @param {object} [clusterUpdateParameters.reverseProxyCertificate] The server
 * certificate used by reverse proxy.
 *
 * @param {string} clusterUpdateParameters.reverseProxyCertificate.thumbprint
 * Thumbprint of the primary certificate.
 *
 * @param {string}
 * [clusterUpdateParameters.reverseProxyCertificate.thumbprintSecondary]
 * Thumbprint of the secondary certificate.
 *
 * @param {string}
 * [clusterUpdateParameters.reverseProxyCertificate.x509StoreName] The local
 * certificate store location. Possible values include: 'AddressBook',
 * 'AuthRoot', 'CertificateAuthority', 'Disallowed', 'My', 'Root',
 * 'TrustedPeople', 'TrustedPublisher'
 *
 * @param {array} [clusterUpdateParameters.nodeTypes] The list of node types in
 * the cluster. This will overwrite the existing list.
 *
 * @param {object} [clusterUpdateParameters.upgradeDescription] The policy to
 * use when upgrading the cluster.
 *
 * @param {boolean} [clusterUpdateParameters.upgradeDescription.forceRestart]
 * If true, then processes are forcefully restarted during upgrade even when
 * the code version has not changed (the upgrade only changes configuration or
 * data).
 *
 * @param {string}
 * clusterUpdateParameters.upgradeDescription.upgradeReplicaSetCheckTimeout The
 * maximum amount of time to block processing of an upgrade domain and revent
 * loss of availability when there are unexpected issues. When this timeout
 * expires, processing of the upgrade domain will proceed regardless of
 * availability loss issues. The timeout is reset at the start of each upgrade
 * domain. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
 *
 * @param {string}
 * clusterUpdateParameters.upgradeDescription.healthCheckWaitDuration The
 * length of time to wait after completing an upgrade domain before performing
 * health checks. The duration can be in either hh:mm:ss or in d.hh:mm:ss.ms
 * format.
 *
 * @param {string}
 * clusterUpdateParameters.upgradeDescription.healthCheckStableDuration The
 * amount of time that the application or cluster must remain healthy before
 * the upgrade proceeds to the next upgrade domain. The duration can be in
 * either hh:mm:ss or in d.hh:mm:ss.ms format.
 *
 * @param {string}
 * clusterUpdateParameters.upgradeDescription.healthCheckRetryTimeout The
 * amount of time to retry health evaluation when the application or cluster is
 * unhealthy before the upgrade rolls back. The timeout can be in either
 * hh:mm:ss or in d.hh:mm:ss.ms format.
 *
 * @param {string} clusterUpdateParameters.upgradeDescription.upgradeTimeout
 * The amount of time the overall upgrade has to complete before the upgrade
 * rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms
 * format.
 *
 * @param {string}
 * clusterUpdateParameters.upgradeDescription.upgradeDomainTimeout The amount
 * of time each upgrade domain has to complete before the upgrade rolls back.
 * The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
 *
 * @param {object} clusterUpdateParameters.upgradeDescription.healthPolicy The
 * cluster health policy used when upgrading the cluster.
 *
 * @param {number}
 * [clusterUpdateParameters.upgradeDescription.healthPolicy.maxPercentUnhealthyNodes]
 * The maximum allowed percentage of unhealthy nodes before reporting an error.
 * For example, to allow 10% of nodes to be unhealthy, this value would be 10.
 *
 * @param {number}
 * [clusterUpdateParameters.upgradeDescription.healthPolicy.maxPercentUnhealthyApplications]
 * The maximum allowed percentage of unhealthy applications before reporting an
 * error. For example, to allow 10% of applications to be unhealthy, this value
 * would be 10.
 *
 * @param {object}
 * [clusterUpdateParameters.upgradeDescription.deltaHealthPolicy] The delta
 * health policy used when upgrading the cluster.
 *
 * @param {number}
 * clusterUpdateParameters.upgradeDescription.deltaHealthPolicy.maxPercentDeltaUnhealthyNodes
 * The maximum allowed percentage of nodes health degradation allowed during
 * cluster upgrades. The delta is measured between the state of the nodes at
 * the beginning of upgrade and the state of the nodes at the time of the
 * health evaluation. The check is performed after every upgrade domain upgrade
 * completion to make sure the global state of the cluster is within tolerated
 * limits.
 *
 * @param {number}
 * clusterUpdateParameters.upgradeDescription.deltaHealthPolicy.maxPercentUpgradeDomainDeltaUnhealthyNodes
 * The maximum allowed percentage of upgrade domain nodes health degradation
 * allowed during cluster upgrades. The delta is measured between the state of
 * the upgrade domain nodes at the beginning of upgrade and the state of the
 * upgrade domain nodes at the time of the health evaluation. The check is
 * performed after every upgrade domain upgrade completion for all completed
 * upgrade domains to make sure the state of the upgrade domains is within
 * tolerated limits.
 *
 * @param {number}
 * clusterUpdateParameters.upgradeDescription.deltaHealthPolicy.maxPercentDeltaUnhealthyApplications
 * The maximum allowed percentage of applications health degradation allowed
 * during cluster upgrades. The delta is measured between the state of the
 * applications at the beginning of upgrade and the state of the applications
 * at the time of the health evaluation. The check is performed after every
 * upgrade domain upgrade completion to make sure the global state of the
 * cluster is within tolerated limits. System services are not included in
 * this.
 *
 * @param {array} [clusterUpdateParameters.addOnFeatures] The list of add-on
 * features to enable in the cluster.
 *
 * @param {object} [clusterUpdateParameters.tags] Cluster update parameters
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link Cluster} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _update(resourceGroupName, clusterName, clusterUpdateParameters, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }

  if (!callback) {
    throw new Error('callback cannot be null.');
  }

  // Send request
  this.beginUpdate(resourceGroupName, clusterName, clusterUpdateParameters, options, (err, parsedResult, httpRequest, response) => {
    if (err) return callback(err);

    let initialResult = new msRest.HttpOperationResponse();
    initialResult.request = httpRequest;
    initialResult.response = response;
    initialResult.body = response.body;
    client.getLongRunningOperationResult(initialResult, options, (err, pollingResult) => {
      if (err) return callback(err);

      // Create Result
      let result = null;

      httpRequest = pollingResult.request;
      response = pollingResult.response;
      let responseBody = pollingResult.body;
      if (responseBody === '') responseBody = null;

      // Deserialize Response
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['Cluster']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }

      return callback(null, result, httpRequest, response);
    });
  });
}

/**
 * @summary List cluster resource by resource group
 *
 * List cluster resource by resource group
 *
 *
 * @param {string} resourceGroupName The name of the resource group.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link ClusterListResult} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _listByResourceGroup(resourceGroupName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.ServiceFabric/clusters';
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorModel']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ClusterListResult']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary List cluster resource
 *
 * List cluster resource
 *
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link ClusterListResult} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _list(options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/providers/Microsoft.ServiceFabric/clusters';
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorModel']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ClusterListResult']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Create a ServiceFabric cluster
 *
 * Create cluster resource
 *
 *
 * @param {string} resourceGroupName The name of the resource group.
 *
 * @param {string} clusterName The name of the cluster resource
 *
 * @param {object} cluster The cluster resource.
 *
 * @param {array} [cluster.availableClusterVersions] The Service Fabric runtime
 * versions available for this cluster.
 *
 * @param {string} [cluster.clusterState] Possible values include:
 * 'WaitingForNodes', 'Deploying', 'BaselineUpgrade',
 * 'UpdatingUserConfiguration', 'UpdatingUserCertificate',
 * 'UpdatingInfrastructure', 'EnforcingClusterVersion',
 * 'UpgradeServiceUnreachable', 'AutoScale', 'Ready'
 *
 * @param {string} [cluster.clusterCodeVersion] The Service Fabric runtime
 * version of the cluster. This property can only by set the user when
 * **upgradeMode** is set to 'Manual'. To get list of available Service Fabric
 * versions for new clusters use [ClusterVersion API](./ClusterVersion.md). To
 * get the list of available version for existing clusters use
 * **availableClusterVersions**.
 *
 * @param {object} [cluster.certificate] The certificate to use for securing
 * the cluster. The certificate provided will be used for  node to node
 * security within the cluster, SSL certificate for cluster management endpoint
 * and default  admin client.
 *
 * @param {string} [cluster.reliabilityLevel] Possible values include: 'None',
 * 'Bronze', 'Silver', 'Gold', 'Platinum'
 *
 * @param {string} [cluster.upgradeMode] Possible values include: 'Automatic',
 * 'Manual'
 *
 * @param {array} [cluster.clientCertificateThumbprints] The list of client
 * certificates referenced by thumbprint that are allowed to manage the
 * cluster.
 *
 * @param {array} [cluster.clientCertificateCommonNames] The list of client
 * certificates referenced by common name that are allowed to manage the
 * cluster.
 *
 * @param {array} [cluster.fabricSettings] The list of custom fabric settings
 * to configure the cluster.
 *
 * @param {object} [cluster.reverseProxyCertificate] The server certificate
 * used by reverse proxy.
 *
 * @param {string} cluster.reverseProxyCertificate.thumbprint Thumbprint of the
 * primary certificate.
 *
 * @param {string} [cluster.reverseProxyCertificate.thumbprintSecondary]
 * Thumbprint of the secondary certificate.
 *
 * @param {string} [cluster.reverseProxyCertificate.x509StoreName] The local
 * certificate store location. Possible values include: 'AddressBook',
 * 'AuthRoot', 'CertificateAuthority', 'Disallowed', 'My', 'Root',
 * 'TrustedPeople', 'TrustedPublisher'
 *
 * @param {string} cluster.managementEndpoint The http management endpoint of
 * the cluster.
 *
 * @param {array} cluster.nodeTypes The list of node types in the cluster.
 *
 * @param {object} [cluster.azureActiveDirectory] The AAD authentication
 * settings of the cluster.
 *
 * @param {string} [cluster.azureActiveDirectory.tenantId] Azure active
 * directory tenant id.
 *
 * @param {string} [cluster.azureActiveDirectory.clusterApplication] Azure
 * active directory cluster application id.
 *
 * @param {string} [cluster.azureActiveDirectory.clientApplication] Azure
 * active directory client application id.
 *
 * @param {string} [cluster.vmImage] The VM image VMSS has been configured
 * with. Generic names such as Windows or Linux can be used.
 *
 * @param {object} [cluster.diagnosticsStorageAccountConfig] The storage
 * account information for storing Service Fabric diagnostic logs.
 *
 * @param {string} cluster.diagnosticsStorageAccountConfig.storageAccountName
 * The Azure storage account name.
 *
 * @param {string}
 * cluster.diagnosticsStorageAccountConfig.protectedAccountKeyName The
 * protected diagnostics storage key name.
 *
 * @param {string} cluster.diagnosticsStorageAccountConfig.blobEndpoint The
 * blob endpoint of the azure storage account.
 *
 * @param {string} cluster.diagnosticsStorageAccountConfig.queueEndpoint The
 * queue endpoint of the azure storage account.
 *
 * @param {string} cluster.diagnosticsStorageAccountConfig.tableEndpoint The
 * table endpoint of the azure storage account.
 *
 * @param {object} [cluster.upgradeDescription] The policy to use when
 * upgrading the cluster.
 *
 * @param {boolean} [cluster.upgradeDescription.forceRestart] If true, then
 * processes are forcefully restarted during upgrade even when the code version
 * has not changed (the upgrade only changes configuration or data).
 *
 * @param {string} cluster.upgradeDescription.upgradeReplicaSetCheckTimeout The
 * maximum amount of time to block processing of an upgrade domain and revent
 * loss of availability when there are unexpected issues. When this timeout
 * expires, processing of the upgrade domain will proceed regardless of
 * availability loss issues. The timeout is reset at the start of each upgrade
 * domain. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
 *
 * @param {string} cluster.upgradeDescription.healthCheckWaitDuration The
 * length of time to wait after completing an upgrade domain before performing
 * health checks. The duration can be in either hh:mm:ss or in d.hh:mm:ss.ms
 * format.
 *
 * @param {string} cluster.upgradeDescription.healthCheckStableDuration The
 * amount of time that the application or cluster must remain healthy before
 * the upgrade proceeds to the next upgrade domain. The duration can be in
 * either hh:mm:ss or in d.hh:mm:ss.ms format.
 *
 * @param {string} cluster.upgradeDescription.healthCheckRetryTimeout The
 * amount of time to retry health evaluation when the application or cluster is
 * unhealthy before the upgrade rolls back. The timeout can be in either
 * hh:mm:ss or in d.hh:mm:ss.ms format.
 *
 * @param {string} cluster.upgradeDescription.upgradeTimeout The amount of time
 * the overall upgrade has to complete before the upgrade rolls back. The
 * timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
 *
 * @param {string} cluster.upgradeDescription.upgradeDomainTimeout The amount
 * of time each upgrade domain has to complete before the upgrade rolls back.
 * The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
 *
 * @param {object} cluster.upgradeDescription.healthPolicy The cluster health
 * policy used when upgrading the cluster.
 *
 * @param {number}
 * [cluster.upgradeDescription.healthPolicy.maxPercentUnhealthyNodes] The
 * maximum allowed percentage of unhealthy nodes before reporting an error. For
 * example, to allow 10% of nodes to be unhealthy, this value would be 10.
 *
 * @param {number}
 * [cluster.upgradeDescription.healthPolicy.maxPercentUnhealthyApplications]
 * The maximum allowed percentage of unhealthy applications before reporting an
 * error. For example, to allow 10% of applications to be unhealthy, this value
 * would be 10.
 *
 * @param {object} [cluster.upgradeDescription.deltaHealthPolicy] The delta
 * health policy used when upgrading the cluster.
 *
 * @param {number}
 * cluster.upgradeDescription.deltaHealthPolicy.maxPercentDeltaUnhealthyNodes
 * The maximum allowed percentage of nodes health degradation allowed during
 * cluster upgrades. The delta is measured between the state of the nodes at
 * the beginning of upgrade and the state of the nodes at the time of the
 * health evaluation. The check is performed after every upgrade domain upgrade
 * completion to make sure the global state of the cluster is within tolerated
 * limits.
 *
 * @param {number}
 * cluster.upgradeDescription.deltaHealthPolicy.maxPercentUpgradeDomainDeltaUnhealthyNodes
 * The maximum allowed percentage of upgrade domain nodes health degradation
 * allowed during cluster upgrades. The delta is measured between the state of
 * the upgrade domain nodes at the beginning of upgrade and the state of the
 * upgrade domain nodes at the time of the health evaluation. The check is
 * performed after every upgrade domain upgrade completion for all completed
 * upgrade domains to make sure the state of the upgrade domains is within
 * tolerated limits.
 *
 * @param {number}
 * cluster.upgradeDescription.deltaHealthPolicy.maxPercentDeltaUnhealthyApplications
 * The maximum allowed percentage of applications health degradation allowed
 * during cluster upgrades. The delta is measured between the state of the
 * applications at the beginning of upgrade and the state of the applications
 * at the time of the health evaluation. The check is performed after every
 * upgrade domain upgrade completion to make sure the global state of the
 * cluster is within tolerated limits. System services are not included in
 * this.
 *
 * @param {array} [cluster.addOnFeatures] The list of add-on features to enable
 * in the cluster.
 *
 * @param {string} cluster.location Resource location.
 *
 * @param {object} [cluster.tags] Resource tags.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link Cluster} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _beginCreate(resourceGroupName, clusterName, cluster, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (clusterName === null || clusterName === undefined || typeof clusterName.valueOf() !== 'string') {
      throw new Error('clusterName cannot be null or undefined and it must be of type string.');
    }
    if (cluster === null || cluster === undefined) {
      throw new Error('cluster cannot be null or undefined.');
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabric/clusters/{clusterName}';
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{clusterName}', encodeURIComponent(clusterName));
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PUT';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (cluster !== null && cluster !== undefined) {
      let requestModelMapper = new client.models['Cluster']().mapper();
      requestModel = client.serialize(requestModelMapper, cluster, 'cluster');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(cluster, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200 && statusCode !== 202) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorModel']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['Cluster']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Update cluster configuration
 *
 * Update cluster configuration
 *
 *
 * @param {string} resourceGroupName The name of the resource group.
 *
 * @param {string} clusterName The name of the cluster resource
 *
 * @param {object} clusterUpdateParameters The parameters which contains the
 * property value and property name which used to update the cluster
 * configuration.
 *
 * @param {string} [clusterUpdateParameters.reliabilityLevel] The reliability
 * level sets the replica set size of system services. Learn about
 * [ReliabilityLevel](https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-cluster-capacity).
 * Possible values include: 'Bronze', 'Silver', 'Gold'
 *
 * @param {string} [clusterUpdateParameters.upgradeMode] The upgrade mode of
 * the cluster. This indicates if the cluster should be automatically upgraded
 * when new Service Fabric runtime version is available. Possible values
 * include: 'Automatic', 'Manual'
 *
 * @param {string} [clusterUpdateParameters.clusterCodeVersion] The Service
 * Fabric runtime version of the cluster. This property can only by set the
 * user when **upgradeMode** is set to 'Manual'. To get list of available
 * Service Fabric versions for new clusters use [ClusterVersion
 * API](./ClusterVersion.md). To get the list of available version for existing
 * clusters use **availableClusterVersions**.
 *
 * @param {object} [clusterUpdateParameters.certificate] The certificate to use
 * for securing the cluster. The certificate provided will be used for  node to
 * node security within the cluster, SSL certificate for cluster management
 * endpoint and default  admin client.
 *
 * @param {array} [clusterUpdateParameters.clientCertificateThumbprints] The
 * list of client certificates referenced by thumbprint that are allowed to
 * manage the cluster. This will overwrite the existing list.
 *
 * @param {array} [clusterUpdateParameters.clientCertificateCommonNames] The
 * list of client certificates referenced by common name that are allowed to
 * manage the cluster. This will overwrite the existing list.
 *
 * @param {array} [clusterUpdateParameters.fabricSettings] The list of custom
 * fabric settings to configure the cluster. This will overwrite the existing
 * list.
 *
 * @param {object} [clusterUpdateParameters.reverseProxyCertificate] The server
 * certificate used by reverse proxy.
 *
 * @param {string} clusterUpdateParameters.reverseProxyCertificate.thumbprint
 * Thumbprint of the primary certificate.
 *
 * @param {string}
 * [clusterUpdateParameters.reverseProxyCertificate.thumbprintSecondary]
 * Thumbprint of the secondary certificate.
 *
 * @param {string}
 * [clusterUpdateParameters.reverseProxyCertificate.x509StoreName] The local
 * certificate store location. Possible values include: 'AddressBook',
 * 'AuthRoot', 'CertificateAuthority', 'Disallowed', 'My', 'Root',
 * 'TrustedPeople', 'TrustedPublisher'
 *
 * @param {array} [clusterUpdateParameters.nodeTypes] The list of node types in
 * the cluster. This will overwrite the existing list.
 *
 * @param {object} [clusterUpdateParameters.upgradeDescription] The policy to
 * use when upgrading the cluster.
 *
 * @param {boolean} [clusterUpdateParameters.upgradeDescription.forceRestart]
 * If true, then processes are forcefully restarted during upgrade even when
 * the code version has not changed (the upgrade only changes configuration or
 * data).
 *
 * @param {string}
 * clusterUpdateParameters.upgradeDescription.upgradeReplicaSetCheckTimeout The
 * maximum amount of time to block processing of an upgrade domain and revent
 * loss of availability when there are unexpected issues. When this timeout
 * expires, processing of the upgrade domain will proceed regardless of
 * availability loss issues. The timeout is reset at the start of each upgrade
 * domain. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
 *
 * @param {string}
 * clusterUpdateParameters.upgradeDescription.healthCheckWaitDuration The
 * length of time to wait after completing an upgrade domain before performing
 * health checks. The duration can be in either hh:mm:ss or in d.hh:mm:ss.ms
 * format.
 *
 * @param {string}
 * clusterUpdateParameters.upgradeDescription.healthCheckStableDuration The
 * amount of time that the application or cluster must remain healthy before
 * the upgrade proceeds to the next upgrade domain. The duration can be in
 * either hh:mm:ss or in d.hh:mm:ss.ms format.
 *
 * @param {string}
 * clusterUpdateParameters.upgradeDescription.healthCheckRetryTimeout The
 * amount of time to retry health evaluation when the application or cluster is
 * unhealthy before the upgrade rolls back. The timeout can be in either
 * hh:mm:ss or in d.hh:mm:ss.ms format.
 *
 * @param {string} clusterUpdateParameters.upgradeDescription.upgradeTimeout
 * The amount of time the overall upgrade has to complete before the upgrade
 * rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms
 * format.
 *
 * @param {string}
 * clusterUpdateParameters.upgradeDescription.upgradeDomainTimeout The amount
 * of time each upgrade domain has to complete before the upgrade rolls back.
 * The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
 *
 * @param {object} clusterUpdateParameters.upgradeDescription.healthPolicy The
 * cluster health policy used when upgrading the cluster.
 *
 * @param {number}
 * [clusterUpdateParameters.upgradeDescription.healthPolicy.maxPercentUnhealthyNodes]
 * The maximum allowed percentage of unhealthy nodes before reporting an error.
 * For example, to allow 10% of nodes to be unhealthy, this value would be 10.
 *
 * @param {number}
 * [clusterUpdateParameters.upgradeDescription.healthPolicy.maxPercentUnhealthyApplications]
 * The maximum allowed percentage of unhealthy applications before reporting an
 * error. For example, to allow 10% of applications to be unhealthy, this value
 * would be 10.
 *
 * @param {object}
 * [clusterUpdateParameters.upgradeDescription.deltaHealthPolicy] The delta
 * health policy used when upgrading the cluster.
 *
 * @param {number}
 * clusterUpdateParameters.upgradeDescription.deltaHealthPolicy.maxPercentDeltaUnhealthyNodes
 * The maximum allowed percentage of nodes health degradation allowed during
 * cluster upgrades. The delta is measured between the state of the nodes at
 * the beginning of upgrade and the state of the nodes at the time of the
 * health evaluation. The check is performed after every upgrade domain upgrade
 * completion to make sure the global state of the cluster is within tolerated
 * limits.
 *
 * @param {number}
 * clusterUpdateParameters.upgradeDescription.deltaHealthPolicy.maxPercentUpgradeDomainDeltaUnhealthyNodes
 * The maximum allowed percentage of upgrade domain nodes health degradation
 * allowed during cluster upgrades. The delta is measured between the state of
 * the upgrade domain nodes at the beginning of upgrade and the state of the
 * upgrade domain nodes at the time of the health evaluation. The check is
 * performed after every upgrade domain upgrade completion for all completed
 * upgrade domains to make sure the state of the upgrade domains is within
 * tolerated limits.
 *
 * @param {number}
 * clusterUpdateParameters.upgradeDescription.deltaHealthPolicy.maxPercentDeltaUnhealthyApplications
 * The maximum allowed percentage of applications health degradation allowed
 * during cluster upgrades. The delta is measured between the state of the
 * applications at the beginning of upgrade and the state of the applications
 * at the time of the health evaluation. The check is performed after every
 * upgrade domain upgrade completion to make sure the global state of the
 * cluster is within tolerated limits. System services are not included in
 * this.
 *
 * @param {array} [clusterUpdateParameters.addOnFeatures] The list of add-on
 * features to enable in the cluster.
 *
 * @param {object} [clusterUpdateParameters.tags] Cluster update parameters
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link Cluster} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _beginUpdate(resourceGroupName, clusterName, clusterUpdateParameters, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (clusterName === null || clusterName === undefined || typeof clusterName.valueOf() !== 'string') {
      throw new Error('clusterName cannot be null or undefined and it must be of type string.');
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (clusterUpdateParameters === null || clusterUpdateParameters === undefined) {
      throw new Error('clusterUpdateParameters cannot be null or undefined.');
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabric/clusters/{clusterName}';
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{clusterName}', encodeURIComponent(clusterName));
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PATCH';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (clusterUpdateParameters !== null && clusterUpdateParameters !== undefined) {
      let requestModelMapper = new client.models['ClusterUpdateParameters']().mapper();
      requestModel = client.serialize(requestModelMapper, clusterUpdateParameters, 'clusterUpdateParameters');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(clusterUpdateParameters, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200 && statusCode !== 202) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorModel']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['Cluster']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/** Class representing a Clusters. */
class Clusters {
  /**
   * Create a Clusters.
   * @param {ServiceFabricManagementClient} client Reference to the service client.
   */
  constructor(client) {
    this.client = client;
    this._create = _create;
    this._deleteMethod = _deleteMethod;
    this._get = _get;
    this._update = _update;
    this._listByResourceGroup = _listByResourceGroup;
    this._list = _list;
    this._beginCreate = _beginCreate;
    this._beginUpdate = _beginUpdate;
  }

  /**
   * @summary Create a ServiceFabric cluster
   *
   * Create cluster resource
   *
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} clusterName The name of the cluster resource
   *
   * @param {object} cluster The cluster resource.
   *
   * @param {array} [cluster.availableClusterVersions] The Service Fabric runtime
   * versions available for this cluster.
   *
   * @param {string} [cluster.clusterState] Possible values include:
   * 'WaitingForNodes', 'Deploying', 'BaselineUpgrade',
   * 'UpdatingUserConfiguration', 'UpdatingUserCertificate',
   * 'UpdatingInfrastructure', 'EnforcingClusterVersion',
   * 'UpgradeServiceUnreachable', 'AutoScale', 'Ready'
   *
   * @param {string} [cluster.clusterCodeVersion] The Service Fabric runtime
   * version of the cluster. This property can only by set the user when
   * **upgradeMode** is set to 'Manual'. To get list of available Service Fabric
   * versions for new clusters use [ClusterVersion API](./ClusterVersion.md). To
   * get the list of available version for existing clusters use
   * **availableClusterVersions**.
   *
   * @param {object} [cluster.certificate] The certificate to use for securing
   * the cluster. The certificate provided will be used for  node to node
   * security within the cluster, SSL certificate for cluster management endpoint
   * and default  admin client.
   *
   * @param {string} [cluster.reliabilityLevel] Possible values include: 'None',
   * 'Bronze', 'Silver', 'Gold', 'Platinum'
   *
   * @param {string} [cluster.upgradeMode] Possible values include: 'Automatic',
   * 'Manual'
   *
   * @param {array} [cluster.clientCertificateThumbprints] The list of client
   * certificates referenced by thumbprint that are allowed to manage the
   * cluster.
   *
   * @param {array} [cluster.clientCertificateCommonNames] The list of client
   * certificates referenced by common name that are allowed to manage the
   * cluster.
   *
   * @param {array} [cluster.fabricSettings] The list of custom fabric settings
   * to configure the cluster.
   *
   * @param {object} [cluster.reverseProxyCertificate] The server certificate
   * used by reverse proxy.
   *
   * @param {string} cluster.reverseProxyCertificate.thumbprint Thumbprint of the
   * primary certificate.
   *
   * @param {string} [cluster.reverseProxyCertificate.thumbprintSecondary]
   * Thumbprint of the secondary certificate.
   *
   * @param {string} [cluster.reverseProxyCertificate.x509StoreName] The local
   * certificate store location. Possible values include: 'AddressBook',
   * 'AuthRoot', 'CertificateAuthority', 'Disallowed', 'My', 'Root',
   * 'TrustedPeople', 'TrustedPublisher'
   *
   * @param {string} cluster.managementEndpoint The http management endpoint of
   * the cluster.
   *
   * @param {array} cluster.nodeTypes The list of node types in the cluster.
   *
   * @param {object} [cluster.azureActiveDirectory] The AAD authentication
   * settings of the cluster.
   *
   * @param {string} [cluster.azureActiveDirectory.tenantId] Azure active
   * directory tenant id.
   *
   * @param {string} [cluster.azureActiveDirectory.clusterApplication] Azure
   * active directory cluster application id.
   *
   * @param {string} [cluster.azureActiveDirectory.clientApplication] Azure
   * active directory client application id.
   *
   * @param {string} [cluster.vmImage] The VM image VMSS has been configured
   * with. Generic names such as Windows or Linux can be used.
   *
   * @param {object} [cluster.diagnosticsStorageAccountConfig] The storage
   * account information for storing Service Fabric diagnostic logs.
   *
   * @param {string} cluster.diagnosticsStorageAccountConfig.storageAccountName
   * The Azure storage account name.
   *
   * @param {string}
   * cluster.diagnosticsStorageAccountConfig.protectedAccountKeyName The
   * protected diagnostics storage key name.
   *
   * @param {string} cluster.diagnosticsStorageAccountConfig.blobEndpoint The
   * blob endpoint of the azure storage account.
   *
   * @param {string} cluster.diagnosticsStorageAccountConfig.queueEndpoint The
   * queue endpoint of the azure storage account.
   *
   * @param {string} cluster.diagnosticsStorageAccountConfig.tableEndpoint The
   * table endpoint of the azure storage account.
   *
   * @param {object} [cluster.upgradeDescription] The policy to use when
   * upgrading the cluster.
   *
   * @param {boolean} [cluster.upgradeDescription.forceRestart] If true, then
   * processes are forcefully restarted during upgrade even when the code version
   * has not changed (the upgrade only changes configuration or data).
   *
   * @param {string} cluster.upgradeDescription.upgradeReplicaSetCheckTimeout The
   * maximum amount of time to block processing of an upgrade domain and revent
   * loss of availability when there are unexpected issues. When this timeout
   * expires, processing of the upgrade domain will proceed regardless of
   * availability loss issues. The timeout is reset at the start of each upgrade
   * domain. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
   *
   * @param {string} cluster.upgradeDescription.healthCheckWaitDuration The
   * length of time to wait after completing an upgrade domain before performing
   * health checks. The duration can be in either hh:mm:ss or in d.hh:mm:ss.ms
   * format.
   *
   * @param {string} cluster.upgradeDescription.healthCheckStableDuration The
   * amount of time that the application or cluster must remain healthy before
   * the upgrade proceeds to the next upgrade domain. The duration can be in
   * either hh:mm:ss or in d.hh:mm:ss.ms format.
   *
   * @param {string} cluster.upgradeDescription.healthCheckRetryTimeout The
   * amount of time to retry health evaluation when the application or cluster is
   * unhealthy before the upgrade rolls back. The timeout can be in either
   * hh:mm:ss or in d.hh:mm:ss.ms format.
   *
   * @param {string} cluster.upgradeDescription.upgradeTimeout The amount of time
   * the overall upgrade has to complete before the upgrade rolls back. The
   * timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
   *
   * @param {string} cluster.upgradeDescription.upgradeDomainTimeout The amount
   * of time each upgrade domain has to complete before the upgrade rolls back.
   * The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
   *
   * @param {object} cluster.upgradeDescription.healthPolicy The cluster health
   * policy used when upgrading the cluster.
   *
   * @param {number}
   * [cluster.upgradeDescription.healthPolicy.maxPercentUnhealthyNodes] The
   * maximum allowed percentage of unhealthy nodes before reporting an error. For
   * example, to allow 10% of nodes to be unhealthy, this value would be 10.
   *
   * @param {number}
   * [cluster.upgradeDescription.healthPolicy.maxPercentUnhealthyApplications]
   * The maximum allowed percentage of unhealthy applications before reporting an
   * error. For example, to allow 10% of applications to be unhealthy, this value
   * would be 10.
   *
   * @param {object} [cluster.upgradeDescription.deltaHealthPolicy] The delta
   * health policy used when upgrading the cluster.
   *
   * @param {number}
   * cluster.upgradeDescription.deltaHealthPolicy.maxPercentDeltaUnhealthyNodes
   * The maximum allowed percentage of nodes health degradation allowed during
   * cluster upgrades. The delta is measured between the state of the nodes at
   * the beginning of upgrade and the state of the nodes at the time of the
   * health evaluation. The check is performed after every upgrade domain upgrade
   * completion to make sure the global state of the cluster is within tolerated
   * limits.
   *
   * @param {number}
   * cluster.upgradeDescription.deltaHealthPolicy.maxPercentUpgradeDomainDeltaUnhealthyNodes
   * The maximum allowed percentage of upgrade domain nodes health degradation
   * allowed during cluster upgrades. The delta is measured between the state of
   * the upgrade domain nodes at the beginning of upgrade and the state of the
   * upgrade domain nodes at the time of the health evaluation. The check is
   * performed after every upgrade domain upgrade completion for all completed
   * upgrade domains to make sure the state of the upgrade domains is within
   * tolerated limits.
   *
   * @param {number}
   * cluster.upgradeDescription.deltaHealthPolicy.maxPercentDeltaUnhealthyApplications
   * The maximum allowed percentage of applications health degradation allowed
   * during cluster upgrades. The delta is measured between the state of the
   * applications at the beginning of upgrade and the state of the applications
   * at the time of the health evaluation. The check is performed after every
   * upgrade domain upgrade completion to make sure the global state of the
   * cluster is within tolerated limits. System services are not included in
   * this.
   *
   * @param {array} [cluster.addOnFeatures] The list of add-on features to enable
   * in the cluster.
   *
   * @param {string} cluster.location Resource location.
   *
   * @param {object} [cluster.tags] Resource tags.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Cluster>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  createWithHttpOperationResponse(resourceGroupName, clusterName, cluster, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._create(resourceGroupName, clusterName, cluster, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Create a ServiceFabric cluster
   *
   * Create cluster resource
   *
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} clusterName The name of the cluster resource
   *
   * @param {object} cluster The cluster resource.
   *
   * @param {array} [cluster.availableClusterVersions] The Service Fabric runtime
   * versions available for this cluster.
   *
   * @param {string} [cluster.clusterState] Possible values include:
   * 'WaitingForNodes', 'Deploying', 'BaselineUpgrade',
   * 'UpdatingUserConfiguration', 'UpdatingUserCertificate',
   * 'UpdatingInfrastructure', 'EnforcingClusterVersion',
   * 'UpgradeServiceUnreachable', 'AutoScale', 'Ready'
   *
   * @param {string} [cluster.clusterCodeVersion] The Service Fabric runtime
   * version of the cluster. This property can only by set the user when
   * **upgradeMode** is set to 'Manual'. To get list of available Service Fabric
   * versions for new clusters use [ClusterVersion API](./ClusterVersion.md). To
   * get the list of available version for existing clusters use
   * **availableClusterVersions**.
   *
   * @param {object} [cluster.certificate] The certificate to use for securing
   * the cluster. The certificate provided will be used for  node to node
   * security within the cluster, SSL certificate for cluster management endpoint
   * and default  admin client.
   *
   * @param {string} [cluster.reliabilityLevel] Possible values include: 'None',
   * 'Bronze', 'Silver', 'Gold', 'Platinum'
   *
   * @param {string} [cluster.upgradeMode] Possible values include: 'Automatic',
   * 'Manual'
   *
   * @param {array} [cluster.clientCertificateThumbprints] The list of client
   * certificates referenced by thumbprint that are allowed to manage the
   * cluster.
   *
   * @param {array} [cluster.clientCertificateCommonNames] The list of client
   * certificates referenced by common name that are allowed to manage the
   * cluster.
   *
   * @param {array} [cluster.fabricSettings] The list of custom fabric settings
   * to configure the cluster.
   *
   * @param {object} [cluster.reverseProxyCertificate] The server certificate
   * used by reverse proxy.
   *
   * @param {string} cluster.reverseProxyCertificate.thumbprint Thumbprint of the
   * primary certificate.
   *
   * @param {string} [cluster.reverseProxyCertificate.thumbprintSecondary]
   * Thumbprint of the secondary certificate.
   *
   * @param {string} [cluster.reverseProxyCertificate.x509StoreName] The local
   * certificate store location. Possible values include: 'AddressBook',
   * 'AuthRoot', 'CertificateAuthority', 'Disallowed', 'My', 'Root',
   * 'TrustedPeople', 'TrustedPublisher'
   *
   * @param {string} cluster.managementEndpoint The http management endpoint of
   * the cluster.
   *
   * @param {array} cluster.nodeTypes The list of node types in the cluster.
   *
   * @param {object} [cluster.azureActiveDirectory] The AAD authentication
   * settings of the cluster.
   *
   * @param {string} [cluster.azureActiveDirectory.tenantId] Azure active
   * directory tenant id.
   *
   * @param {string} [cluster.azureActiveDirectory.clusterApplication] Azure
   * active directory cluster application id.
   *
   * @param {string} [cluster.azureActiveDirectory.clientApplication] Azure
   * active directory client application id.
   *
   * @param {string} [cluster.vmImage] The VM image VMSS has been configured
   * with. Generic names such as Windows or Linux can be used.
   *
   * @param {object} [cluster.diagnosticsStorageAccountConfig] The storage
   * account information for storing Service Fabric diagnostic logs.
   *
   * @param {string} cluster.diagnosticsStorageAccountConfig.storageAccountName
   * The Azure storage account name.
   *
   * @param {string}
   * cluster.diagnosticsStorageAccountConfig.protectedAccountKeyName The
   * protected diagnostics storage key name.
   *
   * @param {string} cluster.diagnosticsStorageAccountConfig.blobEndpoint The
   * blob endpoint of the azure storage account.
   *
   * @param {string} cluster.diagnosticsStorageAccountConfig.queueEndpoint The
   * queue endpoint of the azure storage account.
   *
   * @param {string} cluster.diagnosticsStorageAccountConfig.tableEndpoint The
   * table endpoint of the azure storage account.
   *
   * @param {object} [cluster.upgradeDescription] The policy to use when
   * upgrading the cluster.
   *
   * @param {boolean} [cluster.upgradeDescription.forceRestart] If true, then
   * processes are forcefully restarted during upgrade even when the code version
   * has not changed (the upgrade only changes configuration or data).
   *
   * @param {string} cluster.upgradeDescription.upgradeReplicaSetCheckTimeout The
   * maximum amount of time to block processing of an upgrade domain and revent
   * loss of availability when there are unexpected issues. When this timeout
   * expires, processing of the upgrade domain will proceed regardless of
   * availability loss issues. The timeout is reset at the start of each upgrade
   * domain. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
   *
   * @param {string} cluster.upgradeDescription.healthCheckWaitDuration The
   * length of time to wait after completing an upgrade domain before performing
   * health checks. The duration can be in either hh:mm:ss or in d.hh:mm:ss.ms
   * format.
   *
   * @param {string} cluster.upgradeDescription.healthCheckStableDuration The
   * amount of time that the application or cluster must remain healthy before
   * the upgrade proceeds to the next upgrade domain. The duration can be in
   * either hh:mm:ss or in d.hh:mm:ss.ms format.
   *
   * @param {string} cluster.upgradeDescription.healthCheckRetryTimeout The
   * amount of time to retry health evaluation when the application or cluster is
   * unhealthy before the upgrade rolls back. The timeout can be in either
   * hh:mm:ss or in d.hh:mm:ss.ms format.
   *
   * @param {string} cluster.upgradeDescription.upgradeTimeout The amount of time
   * the overall upgrade has to complete before the upgrade rolls back. The
   * timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
   *
   * @param {string} cluster.upgradeDescription.upgradeDomainTimeout The amount
   * of time each upgrade domain has to complete before the upgrade rolls back.
   * The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
   *
   * @param {object} cluster.upgradeDescription.healthPolicy The cluster health
   * policy used when upgrading the cluster.
   *
   * @param {number}
   * [cluster.upgradeDescription.healthPolicy.maxPercentUnhealthyNodes] The
   * maximum allowed percentage of unhealthy nodes before reporting an error. For
   * example, to allow 10% of nodes to be unhealthy, this value would be 10.
   *
   * @param {number}
   * [cluster.upgradeDescription.healthPolicy.maxPercentUnhealthyApplications]
   * The maximum allowed percentage of unhealthy applications before reporting an
   * error. For example, to allow 10% of applications to be unhealthy, this value
   * would be 10.
   *
   * @param {object} [cluster.upgradeDescription.deltaHealthPolicy] The delta
   * health policy used when upgrading the cluster.
   *
   * @param {number}
   * cluster.upgradeDescription.deltaHealthPolicy.maxPercentDeltaUnhealthyNodes
   * The maximum allowed percentage of nodes health degradation allowed during
   * cluster upgrades. The delta is measured between the state of the nodes at
   * the beginning of upgrade and the state of the nodes at the time of the
   * health evaluation. The check is performed after every upgrade domain upgrade
   * completion to make sure the global state of the cluster is within tolerated
   * limits.
   *
   * @param {number}
   * cluster.upgradeDescription.deltaHealthPolicy.maxPercentUpgradeDomainDeltaUnhealthyNodes
   * The maximum allowed percentage of upgrade domain nodes health degradation
   * allowed during cluster upgrades. The delta is measured between the state of
   * the upgrade domain nodes at the beginning of upgrade and the state of the
   * upgrade domain nodes at the time of the health evaluation. The check is
   * performed after every upgrade domain upgrade completion for all completed
   * upgrade domains to make sure the state of the upgrade domains is within
   * tolerated limits.
   *
   * @param {number}
   * cluster.upgradeDescription.deltaHealthPolicy.maxPercentDeltaUnhealthyApplications
   * The maximum allowed percentage of applications health degradation allowed
   * during cluster upgrades. The delta is measured between the state of the
   * applications at the beginning of upgrade and the state of the applications
   * at the time of the health evaluation. The check is performed after every
   * upgrade domain upgrade completion to make sure the global state of the
   * cluster is within tolerated limits. System services are not included in
   * this.
   *
   * @param {array} [cluster.addOnFeatures] The list of add-on features to enable
   * in the cluster.
   *
   * @param {string} cluster.location Resource location.
   *
   * @param {object} [cluster.tags] Resource tags.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Cluster} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Cluster} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  create(resourceGroupName, clusterName, cluster, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._create(resourceGroupName, clusterName, cluster, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._create(resourceGroupName, clusterName, cluster, options, optionalCallback);
    }
  }

  /**
   * @summary Delete cluster resource
   *
   * Delete cluster resource
   *
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} clusterName The name of the cluster resource
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  deleteMethodWithHttpOperationResponse(resourceGroupName, clusterName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._deleteMethod(resourceGroupName, clusterName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Delete cluster resource
   *
   * Delete cluster resource
   *
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} clusterName The name of the cluster resource
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteMethod(resourceGroupName, clusterName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._deleteMethod(resourceGroupName, clusterName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._deleteMethod(resourceGroupName, clusterName, options, optionalCallback);
    }
  }

  /**
   * @summary Get cluster resource
   *
   * Get cluster resource
   *
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} clusterName The name of the cluster resource
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Cluster>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getWithHttpOperationResponse(resourceGroupName, clusterName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._get(resourceGroupName, clusterName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Get cluster resource
   *
   * Get cluster resource
   *
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} clusterName The name of the cluster resource
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Cluster} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Cluster} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  get(resourceGroupName, clusterName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._get(resourceGroupName, clusterName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._get(resourceGroupName, clusterName, options, optionalCallback);
    }
  }

  /**
   * @summary Update cluster configuration
   *
   * Update cluster configuration
   *
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} clusterName The name of the cluster resource
   *
   * @param {object} clusterUpdateParameters The parameters which contains the
   * property value and property name which used to update the cluster
   * configuration.
   *
   * @param {string} [clusterUpdateParameters.reliabilityLevel] The reliability
   * level sets the replica set size of system services. Learn about
   * [ReliabilityLevel](https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-cluster-capacity).
   * Possible values include: 'Bronze', 'Silver', 'Gold'
   *
   * @param {string} [clusterUpdateParameters.upgradeMode] The upgrade mode of
   * the cluster. This indicates if the cluster should be automatically upgraded
   * when new Service Fabric runtime version is available. Possible values
   * include: 'Automatic', 'Manual'
   *
   * @param {string} [clusterUpdateParameters.clusterCodeVersion] The Service
   * Fabric runtime version of the cluster. This property can only by set the
   * user when **upgradeMode** is set to 'Manual'. To get list of available
   * Service Fabric versions for new clusters use [ClusterVersion
   * API](./ClusterVersion.md). To get the list of available version for existing
   * clusters use **availableClusterVersions**.
   *
   * @param {object} [clusterUpdateParameters.certificate] The certificate to use
   * for securing the cluster. The certificate provided will be used for  node to
   * node security within the cluster, SSL certificate for cluster management
   * endpoint and default  admin client.
   *
   * @param {array} [clusterUpdateParameters.clientCertificateThumbprints] The
   * list of client certificates referenced by thumbprint that are allowed to
   * manage the cluster. This will overwrite the existing list.
   *
   * @param {array} [clusterUpdateParameters.clientCertificateCommonNames] The
   * list of client certificates referenced by common name that are allowed to
   * manage the cluster. This will overwrite the existing list.
   *
   * @param {array} [clusterUpdateParameters.fabricSettings] The list of custom
   * fabric settings to configure the cluster. This will overwrite the existing
   * list.
   *
   * @param {object} [clusterUpdateParameters.reverseProxyCertificate] The server
   * certificate used by reverse proxy.
   *
   * @param {string} clusterUpdateParameters.reverseProxyCertificate.thumbprint
   * Thumbprint of the primary certificate.
   *
   * @param {string}
   * [clusterUpdateParameters.reverseProxyCertificate.thumbprintSecondary]
   * Thumbprint of the secondary certificate.
   *
   * @param {string}
   * [clusterUpdateParameters.reverseProxyCertificate.x509StoreName] The local
   * certificate store location. Possible values include: 'AddressBook',
   * 'AuthRoot', 'CertificateAuthority', 'Disallowed', 'My', 'Root',
   * 'TrustedPeople', 'TrustedPublisher'
   *
   * @param {array} [clusterUpdateParameters.nodeTypes] The list of node types in
   * the cluster. This will overwrite the existing list.
   *
   * @param {object} [clusterUpdateParameters.upgradeDescription] The policy to
   * use when upgrading the cluster.
   *
   * @param {boolean} [clusterUpdateParameters.upgradeDescription.forceRestart]
   * If true, then processes are forcefully restarted during upgrade even when
   * the code version has not changed (the upgrade only changes configuration or
   * data).
   *
   * @param {string}
   * clusterUpdateParameters.upgradeDescription.upgradeReplicaSetCheckTimeout The
   * maximum amount of time to block processing of an upgrade domain and revent
   * loss of availability when there are unexpected issues. When this timeout
   * expires, processing of the upgrade domain will proceed regardless of
   * availability loss issues. The timeout is reset at the start of each upgrade
   * domain. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
   *
   * @param {string}
   * clusterUpdateParameters.upgradeDescription.healthCheckWaitDuration The
   * length of time to wait after completing an upgrade domain before performing
   * health checks. The duration can be in either hh:mm:ss or in d.hh:mm:ss.ms
   * format.
   *
   * @param {string}
   * clusterUpdateParameters.upgradeDescription.healthCheckStableDuration The
   * amount of time that the application or cluster must remain healthy before
   * the upgrade proceeds to the next upgrade domain. The duration can be in
   * either hh:mm:ss or in d.hh:mm:ss.ms format.
   *
   * @param {string}
   * clusterUpdateParameters.upgradeDescription.healthCheckRetryTimeout The
   * amount of time to retry health evaluation when the application or cluster is
   * unhealthy before the upgrade rolls back. The timeout can be in either
   * hh:mm:ss or in d.hh:mm:ss.ms format.
   *
   * @param {string} clusterUpdateParameters.upgradeDescription.upgradeTimeout
   * The amount of time the overall upgrade has to complete before the upgrade
   * rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms
   * format.
   *
   * @param {string}
   * clusterUpdateParameters.upgradeDescription.upgradeDomainTimeout The amount
   * of time each upgrade domain has to complete before the upgrade rolls back.
   * The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
   *
   * @param {object} clusterUpdateParameters.upgradeDescription.healthPolicy The
   * cluster health policy used when upgrading the cluster.
   *
   * @param {number}
   * [clusterUpdateParameters.upgradeDescription.healthPolicy.maxPercentUnhealthyNodes]
   * The maximum allowed percentage of unhealthy nodes before reporting an error.
   * For example, to allow 10% of nodes to be unhealthy, this value would be 10.
   *
   * @param {number}
   * [clusterUpdateParameters.upgradeDescription.healthPolicy.maxPercentUnhealthyApplications]
   * The maximum allowed percentage of unhealthy applications before reporting an
   * error. For example, to allow 10% of applications to be unhealthy, this value
   * would be 10.
   *
   * @param {object}
   * [clusterUpdateParameters.upgradeDescription.deltaHealthPolicy] The delta
   * health policy used when upgrading the cluster.
   *
   * @param {number}
   * clusterUpdateParameters.upgradeDescription.deltaHealthPolicy.maxPercentDeltaUnhealthyNodes
   * The maximum allowed percentage of nodes health degradation allowed during
   * cluster upgrades. The delta is measured between the state of the nodes at
   * the beginning of upgrade and the state of the nodes at the time of the
   * health evaluation. The check is performed after every upgrade domain upgrade
   * completion to make sure the global state of the cluster is within tolerated
   * limits.
   *
   * @param {number}
   * clusterUpdateParameters.upgradeDescription.deltaHealthPolicy.maxPercentUpgradeDomainDeltaUnhealthyNodes
   * The maximum allowed percentage of upgrade domain nodes health degradation
   * allowed during cluster upgrades. The delta is measured between the state of
   * the upgrade domain nodes at the beginning of upgrade and the state of the
   * upgrade domain nodes at the time of the health evaluation. The check is
   * performed after every upgrade domain upgrade completion for all completed
   * upgrade domains to make sure the state of the upgrade domains is within
   * tolerated limits.
   *
   * @param {number}
   * clusterUpdateParameters.upgradeDescription.deltaHealthPolicy.maxPercentDeltaUnhealthyApplications
   * The maximum allowed percentage of applications health degradation allowed
   * during cluster upgrades. The delta is measured between the state of the
   * applications at the beginning of upgrade and the state of the applications
   * at the time of the health evaluation. The check is performed after every
   * upgrade domain upgrade completion to make sure the global state of the
   * cluster is within tolerated limits. System services are not included in
   * this.
   *
   * @param {array} [clusterUpdateParameters.addOnFeatures] The list of add-on
   * features to enable in the cluster.
   *
   * @param {object} [clusterUpdateParameters.tags] Cluster update parameters
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Cluster>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  updateWithHttpOperationResponse(resourceGroupName, clusterName, clusterUpdateParameters, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._update(resourceGroupName, clusterName, clusterUpdateParameters, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Update cluster configuration
   *
   * Update cluster configuration
   *
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} clusterName The name of the cluster resource
   *
   * @param {object} clusterUpdateParameters The parameters which contains the
   * property value and property name which used to update the cluster
   * configuration.
   *
   * @param {string} [clusterUpdateParameters.reliabilityLevel] The reliability
   * level sets the replica set size of system services. Learn about
   * [ReliabilityLevel](https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-cluster-capacity).
   * Possible values include: 'Bronze', 'Silver', 'Gold'
   *
   * @param {string} [clusterUpdateParameters.upgradeMode] The upgrade mode of
   * the cluster. This indicates if the cluster should be automatically upgraded
   * when new Service Fabric runtime version is available. Possible values
   * include: 'Automatic', 'Manual'
   *
   * @param {string} [clusterUpdateParameters.clusterCodeVersion] The Service
   * Fabric runtime version of the cluster. This property can only by set the
   * user when **upgradeMode** is set to 'Manual'. To get list of available
   * Service Fabric versions for new clusters use [ClusterVersion
   * API](./ClusterVersion.md). To get the list of available version for existing
   * clusters use **availableClusterVersions**.
   *
   * @param {object} [clusterUpdateParameters.certificate] The certificate to use
   * for securing the cluster. The certificate provided will be used for  node to
   * node security within the cluster, SSL certificate for cluster management
   * endpoint and default  admin client.
   *
   * @param {array} [clusterUpdateParameters.clientCertificateThumbprints] The
   * list of client certificates referenced by thumbprint that are allowed to
   * manage the cluster. This will overwrite the existing list.
   *
   * @param {array} [clusterUpdateParameters.clientCertificateCommonNames] The
   * list of client certificates referenced by common name that are allowed to
   * manage the cluster. This will overwrite the existing list.
   *
   * @param {array} [clusterUpdateParameters.fabricSettings] The list of custom
   * fabric settings to configure the cluster. This will overwrite the existing
   * list.
   *
   * @param {object} [clusterUpdateParameters.reverseProxyCertificate] The server
   * certificate used by reverse proxy.
   *
   * @param {string} clusterUpdateParameters.reverseProxyCertificate.thumbprint
   * Thumbprint of the primary certificate.
   *
   * @param {string}
   * [clusterUpdateParameters.reverseProxyCertificate.thumbprintSecondary]
   * Thumbprint of the secondary certificate.
   *
   * @param {string}
   * [clusterUpdateParameters.reverseProxyCertificate.x509StoreName] The local
   * certificate store location. Possible values include: 'AddressBook',
   * 'AuthRoot', 'CertificateAuthority', 'Disallowed', 'My', 'Root',
   * 'TrustedPeople', 'TrustedPublisher'
   *
   * @param {array} [clusterUpdateParameters.nodeTypes] The list of node types in
   * the cluster. This will overwrite the existing list.
   *
   * @param {object} [clusterUpdateParameters.upgradeDescription] The policy to
   * use when upgrading the cluster.
   *
   * @param {boolean} [clusterUpdateParameters.upgradeDescription.forceRestart]
   * If true, then processes are forcefully restarted during upgrade even when
   * the code version has not changed (the upgrade only changes configuration or
   * data).
   *
   * @param {string}
   * clusterUpdateParameters.upgradeDescription.upgradeReplicaSetCheckTimeout The
   * maximum amount of time to block processing of an upgrade domain and revent
   * loss of availability when there are unexpected issues. When this timeout
   * expires, processing of the upgrade domain will proceed regardless of
   * availability loss issues. The timeout is reset at the start of each upgrade
   * domain. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
   *
   * @param {string}
   * clusterUpdateParameters.upgradeDescription.healthCheckWaitDuration The
   * length of time to wait after completing an upgrade domain before performing
   * health checks. The duration can be in either hh:mm:ss or in d.hh:mm:ss.ms
   * format.
   *
   * @param {string}
   * clusterUpdateParameters.upgradeDescription.healthCheckStableDuration The
   * amount of time that the application or cluster must remain healthy before
   * the upgrade proceeds to the next upgrade domain. The duration can be in
   * either hh:mm:ss or in d.hh:mm:ss.ms format.
   *
   * @param {string}
   * clusterUpdateParameters.upgradeDescription.healthCheckRetryTimeout The
   * amount of time to retry health evaluation when the application or cluster is
   * unhealthy before the upgrade rolls back. The timeout can be in either
   * hh:mm:ss or in d.hh:mm:ss.ms format.
   *
   * @param {string} clusterUpdateParameters.upgradeDescription.upgradeTimeout
   * The amount of time the overall upgrade has to complete before the upgrade
   * rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms
   * format.
   *
   * @param {string}
   * clusterUpdateParameters.upgradeDescription.upgradeDomainTimeout The amount
   * of time each upgrade domain has to complete before the upgrade rolls back.
   * The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
   *
   * @param {object} clusterUpdateParameters.upgradeDescription.healthPolicy The
   * cluster health policy used when upgrading the cluster.
   *
   * @param {number}
   * [clusterUpdateParameters.upgradeDescription.healthPolicy.maxPercentUnhealthyNodes]
   * The maximum allowed percentage of unhealthy nodes before reporting an error.
   * For example, to allow 10% of nodes to be unhealthy, this value would be 10.
   *
   * @param {number}
   * [clusterUpdateParameters.upgradeDescription.healthPolicy.maxPercentUnhealthyApplications]
   * The maximum allowed percentage of unhealthy applications before reporting an
   * error. For example, to allow 10% of applications to be unhealthy, this value
   * would be 10.
   *
   * @param {object}
   * [clusterUpdateParameters.upgradeDescription.deltaHealthPolicy] The delta
   * health policy used when upgrading the cluster.
   *
   * @param {number}
   * clusterUpdateParameters.upgradeDescription.deltaHealthPolicy.maxPercentDeltaUnhealthyNodes
   * The maximum allowed percentage of nodes health degradation allowed during
   * cluster upgrades. The delta is measured between the state of the nodes at
   * the beginning of upgrade and the state of the nodes at the time of the
   * health evaluation. The check is performed after every upgrade domain upgrade
   * completion to make sure the global state of the cluster is within tolerated
   * limits.
   *
   * @param {number}
   * clusterUpdateParameters.upgradeDescription.deltaHealthPolicy.maxPercentUpgradeDomainDeltaUnhealthyNodes
   * The maximum allowed percentage of upgrade domain nodes health degradation
   * allowed during cluster upgrades. The delta is measured between the state of
   * the upgrade domain nodes at the beginning of upgrade and the state of the
   * upgrade domain nodes at the time of the health evaluation. The check is
   * performed after every upgrade domain upgrade completion for all completed
   * upgrade domains to make sure the state of the upgrade domains is within
   * tolerated limits.
   *
   * @param {number}
   * clusterUpdateParameters.upgradeDescription.deltaHealthPolicy.maxPercentDeltaUnhealthyApplications
   * The maximum allowed percentage of applications health degradation allowed
   * during cluster upgrades. The delta is measured between the state of the
   * applications at the beginning of upgrade and the state of the applications
   * at the time of the health evaluation. The check is performed after every
   * upgrade domain upgrade completion to make sure the global state of the
   * cluster is within tolerated limits. System services are not included in
   * this.
   *
   * @param {array} [clusterUpdateParameters.addOnFeatures] The list of add-on
   * features to enable in the cluster.
   *
   * @param {object} [clusterUpdateParameters.tags] Cluster update parameters
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Cluster} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Cluster} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  update(resourceGroupName, clusterName, clusterUpdateParameters, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._update(resourceGroupName, clusterName, clusterUpdateParameters, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._update(resourceGroupName, clusterName, clusterUpdateParameters, options, optionalCallback);
    }
  }

  /**
   * @summary List cluster resource by resource group
   *
   * List cluster resource by resource group
   *
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ClusterListResult>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  listByResourceGroupWithHttpOperationResponse(resourceGroupName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._listByResourceGroup(resourceGroupName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary List cluster resource by resource group
   *
   * List cluster resource by resource group
   *
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {ClusterListResult} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ClusterListResult} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  listByResourceGroup(resourceGroupName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._listByResourceGroup(resourceGroupName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._listByResourceGroup(resourceGroupName, options, optionalCallback);
    }
  }

  /**
   * @summary List cluster resource
   *
   * List cluster resource
   *
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ClusterListResult>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  listWithHttpOperationResponse(options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._list(options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary List cluster resource
   *
   * List cluster resource
   *
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {ClusterListResult} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ClusterListResult} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  list(options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._list(options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._list(options, optionalCallback);
    }
  }

  /**
   * @summary Create a ServiceFabric cluster
   *
   * Create cluster resource
   *
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} clusterName The name of the cluster resource
   *
   * @param {object} cluster The cluster resource.
   *
   * @param {array} [cluster.availableClusterVersions] The Service Fabric runtime
   * versions available for this cluster.
   *
   * @param {string} [cluster.clusterState] Possible values include:
   * 'WaitingForNodes', 'Deploying', 'BaselineUpgrade',
   * 'UpdatingUserConfiguration', 'UpdatingUserCertificate',
   * 'UpdatingInfrastructure', 'EnforcingClusterVersion',
   * 'UpgradeServiceUnreachable', 'AutoScale', 'Ready'
   *
   * @param {string} [cluster.clusterCodeVersion] The Service Fabric runtime
   * version of the cluster. This property can only by set the user when
   * **upgradeMode** is set to 'Manual'. To get list of available Service Fabric
   * versions for new clusters use [ClusterVersion API](./ClusterVersion.md). To
   * get the list of available version for existing clusters use
   * **availableClusterVersions**.
   *
   * @param {object} [cluster.certificate] The certificate to use for securing
   * the cluster. The certificate provided will be used for  node to node
   * security within the cluster, SSL certificate for cluster management endpoint
   * and default  admin client.
   *
   * @param {string} [cluster.reliabilityLevel] Possible values include: 'None',
   * 'Bronze', 'Silver', 'Gold', 'Platinum'
   *
   * @param {string} [cluster.upgradeMode] Possible values include: 'Automatic',
   * 'Manual'
   *
   * @param {array} [cluster.clientCertificateThumbprints] The list of client
   * certificates referenced by thumbprint that are allowed to manage the
   * cluster.
   *
   * @param {array} [cluster.clientCertificateCommonNames] The list of client
   * certificates referenced by common name that are allowed to manage the
   * cluster.
   *
   * @param {array} [cluster.fabricSettings] The list of custom fabric settings
   * to configure the cluster.
   *
   * @param {object} [cluster.reverseProxyCertificate] The server certificate
   * used by reverse proxy.
   *
   * @param {string} cluster.reverseProxyCertificate.thumbprint Thumbprint of the
   * primary certificate.
   *
   * @param {string} [cluster.reverseProxyCertificate.thumbprintSecondary]
   * Thumbprint of the secondary certificate.
   *
   * @param {string} [cluster.reverseProxyCertificate.x509StoreName] The local
   * certificate store location. Possible values include: 'AddressBook',
   * 'AuthRoot', 'CertificateAuthority', 'Disallowed', 'My', 'Root',
   * 'TrustedPeople', 'TrustedPublisher'
   *
   * @param {string} cluster.managementEndpoint The http management endpoint of
   * the cluster.
   *
   * @param {array} cluster.nodeTypes The list of node types in the cluster.
   *
   * @param {object} [cluster.azureActiveDirectory] The AAD authentication
   * settings of the cluster.
   *
   * @param {string} [cluster.azureActiveDirectory.tenantId] Azure active
   * directory tenant id.
   *
   * @param {string} [cluster.azureActiveDirectory.clusterApplication] Azure
   * active directory cluster application id.
   *
   * @param {string} [cluster.azureActiveDirectory.clientApplication] Azure
   * active directory client application id.
   *
   * @param {string} [cluster.vmImage] The VM image VMSS has been configured
   * with. Generic names such as Windows or Linux can be used.
   *
   * @param {object} [cluster.diagnosticsStorageAccountConfig] The storage
   * account information for storing Service Fabric diagnostic logs.
   *
   * @param {string} cluster.diagnosticsStorageAccountConfig.storageAccountName
   * The Azure storage account name.
   *
   * @param {string}
   * cluster.diagnosticsStorageAccountConfig.protectedAccountKeyName The
   * protected diagnostics storage key name.
   *
   * @param {string} cluster.diagnosticsStorageAccountConfig.blobEndpoint The
   * blob endpoint of the azure storage account.
   *
   * @param {string} cluster.diagnosticsStorageAccountConfig.queueEndpoint The
   * queue endpoint of the azure storage account.
   *
   * @param {string} cluster.diagnosticsStorageAccountConfig.tableEndpoint The
   * table endpoint of the azure storage account.
   *
   * @param {object} [cluster.upgradeDescription] The policy to use when
   * upgrading the cluster.
   *
   * @param {boolean} [cluster.upgradeDescription.forceRestart] If true, then
   * processes are forcefully restarted during upgrade even when the code version
   * has not changed (the upgrade only changes configuration or data).
   *
   * @param {string} cluster.upgradeDescription.upgradeReplicaSetCheckTimeout The
   * maximum amount of time to block processing of an upgrade domain and revent
   * loss of availability when there are unexpected issues. When this timeout
   * expires, processing of the upgrade domain will proceed regardless of
   * availability loss issues. The timeout is reset at the start of each upgrade
   * domain. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
   *
   * @param {string} cluster.upgradeDescription.healthCheckWaitDuration The
   * length of time to wait after completing an upgrade domain before performing
   * health checks. The duration can be in either hh:mm:ss or in d.hh:mm:ss.ms
   * format.
   *
   * @param {string} cluster.upgradeDescription.healthCheckStableDuration The
   * amount of time that the application or cluster must remain healthy before
   * the upgrade proceeds to the next upgrade domain. The duration can be in
   * either hh:mm:ss or in d.hh:mm:ss.ms format.
   *
   * @param {string} cluster.upgradeDescription.healthCheckRetryTimeout The
   * amount of time to retry health evaluation when the application or cluster is
   * unhealthy before the upgrade rolls back. The timeout can be in either
   * hh:mm:ss or in d.hh:mm:ss.ms format.
   *
   * @param {string} cluster.upgradeDescription.upgradeTimeout The amount of time
   * the overall upgrade has to complete before the upgrade rolls back. The
   * timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
   *
   * @param {string} cluster.upgradeDescription.upgradeDomainTimeout The amount
   * of time each upgrade domain has to complete before the upgrade rolls back.
   * The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
   *
   * @param {object} cluster.upgradeDescription.healthPolicy The cluster health
   * policy used when upgrading the cluster.
   *
   * @param {number}
   * [cluster.upgradeDescription.healthPolicy.maxPercentUnhealthyNodes] The
   * maximum allowed percentage of unhealthy nodes before reporting an error. For
   * example, to allow 10% of nodes to be unhealthy, this value would be 10.
   *
   * @param {number}
   * [cluster.upgradeDescription.healthPolicy.maxPercentUnhealthyApplications]
   * The maximum allowed percentage of unhealthy applications before reporting an
   * error. For example, to allow 10% of applications to be unhealthy, this value
   * would be 10.
   *
   * @param {object} [cluster.upgradeDescription.deltaHealthPolicy] The delta
   * health policy used when upgrading the cluster.
   *
   * @param {number}
   * cluster.upgradeDescription.deltaHealthPolicy.maxPercentDeltaUnhealthyNodes
   * The maximum allowed percentage of nodes health degradation allowed during
   * cluster upgrades. The delta is measured between the state of the nodes at
   * the beginning of upgrade and the state of the nodes at the time of the
   * health evaluation. The check is performed after every upgrade domain upgrade
   * completion to make sure the global state of the cluster is within tolerated
   * limits.
   *
   * @param {number}
   * cluster.upgradeDescription.deltaHealthPolicy.maxPercentUpgradeDomainDeltaUnhealthyNodes
   * The maximum allowed percentage of upgrade domain nodes health degradation
   * allowed during cluster upgrades. The delta is measured between the state of
   * the upgrade domain nodes at the beginning of upgrade and the state of the
   * upgrade domain nodes at the time of the health evaluation. The check is
   * performed after every upgrade domain upgrade completion for all completed
   * upgrade domains to make sure the state of the upgrade domains is within
   * tolerated limits.
   *
   * @param {number}
   * cluster.upgradeDescription.deltaHealthPolicy.maxPercentDeltaUnhealthyApplications
   * The maximum allowed percentage of applications health degradation allowed
   * during cluster upgrades. The delta is measured between the state of the
   * applications at the beginning of upgrade and the state of the applications
   * at the time of the health evaluation. The check is performed after every
   * upgrade domain upgrade completion to make sure the global state of the
   * cluster is within tolerated limits. System services are not included in
   * this.
   *
   * @param {array} [cluster.addOnFeatures] The list of add-on features to enable
   * in the cluster.
   *
   * @param {string} cluster.location Resource location.
   *
   * @param {object} [cluster.tags] Resource tags.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Cluster>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  beginCreateWithHttpOperationResponse(resourceGroupName, clusterName, cluster, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._beginCreate(resourceGroupName, clusterName, cluster, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Create a ServiceFabric cluster
   *
   * Create cluster resource
   *
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} clusterName The name of the cluster resource
   *
   * @param {object} cluster The cluster resource.
   *
   * @param {array} [cluster.availableClusterVersions] The Service Fabric runtime
   * versions available for this cluster.
   *
   * @param {string} [cluster.clusterState] Possible values include:
   * 'WaitingForNodes', 'Deploying', 'BaselineUpgrade',
   * 'UpdatingUserConfiguration', 'UpdatingUserCertificate',
   * 'UpdatingInfrastructure', 'EnforcingClusterVersion',
   * 'UpgradeServiceUnreachable', 'AutoScale', 'Ready'
   *
   * @param {string} [cluster.clusterCodeVersion] The Service Fabric runtime
   * version of the cluster. This property can only by set the user when
   * **upgradeMode** is set to 'Manual'. To get list of available Service Fabric
   * versions for new clusters use [ClusterVersion API](./ClusterVersion.md). To
   * get the list of available version for existing clusters use
   * **availableClusterVersions**.
   *
   * @param {object} [cluster.certificate] The certificate to use for securing
   * the cluster. The certificate provided will be used for  node to node
   * security within the cluster, SSL certificate for cluster management endpoint
   * and default  admin client.
   *
   * @param {string} [cluster.reliabilityLevel] Possible values include: 'None',
   * 'Bronze', 'Silver', 'Gold', 'Platinum'
   *
   * @param {string} [cluster.upgradeMode] Possible values include: 'Automatic',
   * 'Manual'
   *
   * @param {array} [cluster.clientCertificateThumbprints] The list of client
   * certificates referenced by thumbprint that are allowed to manage the
   * cluster.
   *
   * @param {array} [cluster.clientCertificateCommonNames] The list of client
   * certificates referenced by common name that are allowed to manage the
   * cluster.
   *
   * @param {array} [cluster.fabricSettings] The list of custom fabric settings
   * to configure the cluster.
   *
   * @param {object} [cluster.reverseProxyCertificate] The server certificate
   * used by reverse proxy.
   *
   * @param {string} cluster.reverseProxyCertificate.thumbprint Thumbprint of the
   * primary certificate.
   *
   * @param {string} [cluster.reverseProxyCertificate.thumbprintSecondary]
   * Thumbprint of the secondary certificate.
   *
   * @param {string} [cluster.reverseProxyCertificate.x509StoreName] The local
   * certificate store location. Possible values include: 'AddressBook',
   * 'AuthRoot', 'CertificateAuthority', 'Disallowed', 'My', 'Root',
   * 'TrustedPeople', 'TrustedPublisher'
   *
   * @param {string} cluster.managementEndpoint The http management endpoint of
   * the cluster.
   *
   * @param {array} cluster.nodeTypes The list of node types in the cluster.
   *
   * @param {object} [cluster.azureActiveDirectory] The AAD authentication
   * settings of the cluster.
   *
   * @param {string} [cluster.azureActiveDirectory.tenantId] Azure active
   * directory tenant id.
   *
   * @param {string} [cluster.azureActiveDirectory.clusterApplication] Azure
   * active directory cluster application id.
   *
   * @param {string} [cluster.azureActiveDirectory.clientApplication] Azure
   * active directory client application id.
   *
   * @param {string} [cluster.vmImage] The VM image VMSS has been configured
   * with. Generic names such as Windows or Linux can be used.
   *
   * @param {object} [cluster.diagnosticsStorageAccountConfig] The storage
   * account information for storing Service Fabric diagnostic logs.
   *
   * @param {string} cluster.diagnosticsStorageAccountConfig.storageAccountName
   * The Azure storage account name.
   *
   * @param {string}
   * cluster.diagnosticsStorageAccountConfig.protectedAccountKeyName The
   * protected diagnostics storage key name.
   *
   * @param {string} cluster.diagnosticsStorageAccountConfig.blobEndpoint The
   * blob endpoint of the azure storage account.
   *
   * @param {string} cluster.diagnosticsStorageAccountConfig.queueEndpoint The
   * queue endpoint of the azure storage account.
   *
   * @param {string} cluster.diagnosticsStorageAccountConfig.tableEndpoint The
   * table endpoint of the azure storage account.
   *
   * @param {object} [cluster.upgradeDescription] The policy to use when
   * upgrading the cluster.
   *
   * @param {boolean} [cluster.upgradeDescription.forceRestart] If true, then
   * processes are forcefully restarted during upgrade even when the code version
   * has not changed (the upgrade only changes configuration or data).
   *
   * @param {string} cluster.upgradeDescription.upgradeReplicaSetCheckTimeout The
   * maximum amount of time to block processing of an upgrade domain and revent
   * loss of availability when there are unexpected issues. When this timeout
   * expires, processing of the upgrade domain will proceed regardless of
   * availability loss issues. The timeout is reset at the start of each upgrade
   * domain. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
   *
   * @param {string} cluster.upgradeDescription.healthCheckWaitDuration The
   * length of time to wait after completing an upgrade domain before performing
   * health checks. The duration can be in either hh:mm:ss or in d.hh:mm:ss.ms
   * format.
   *
   * @param {string} cluster.upgradeDescription.healthCheckStableDuration The
   * amount of time that the application or cluster must remain healthy before
   * the upgrade proceeds to the next upgrade domain. The duration can be in
   * either hh:mm:ss or in d.hh:mm:ss.ms format.
   *
   * @param {string} cluster.upgradeDescription.healthCheckRetryTimeout The
   * amount of time to retry health evaluation when the application or cluster is
   * unhealthy before the upgrade rolls back. The timeout can be in either
   * hh:mm:ss or in d.hh:mm:ss.ms format.
   *
   * @param {string} cluster.upgradeDescription.upgradeTimeout The amount of time
   * the overall upgrade has to complete before the upgrade rolls back. The
   * timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
   *
   * @param {string} cluster.upgradeDescription.upgradeDomainTimeout The amount
   * of time each upgrade domain has to complete before the upgrade rolls back.
   * The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
   *
   * @param {object} cluster.upgradeDescription.healthPolicy The cluster health
   * policy used when upgrading the cluster.
   *
   * @param {number}
   * [cluster.upgradeDescription.healthPolicy.maxPercentUnhealthyNodes] The
   * maximum allowed percentage of unhealthy nodes before reporting an error. For
   * example, to allow 10% of nodes to be unhealthy, this value would be 10.
   *
   * @param {number}
   * [cluster.upgradeDescription.healthPolicy.maxPercentUnhealthyApplications]
   * The maximum allowed percentage of unhealthy applications before reporting an
   * error. For example, to allow 10% of applications to be unhealthy, this value
   * would be 10.
   *
   * @param {object} [cluster.upgradeDescription.deltaHealthPolicy] The delta
   * health policy used when upgrading the cluster.
   *
   * @param {number}
   * cluster.upgradeDescription.deltaHealthPolicy.maxPercentDeltaUnhealthyNodes
   * The maximum allowed percentage of nodes health degradation allowed during
   * cluster upgrades. The delta is measured between the state of the nodes at
   * the beginning of upgrade and the state of the nodes at the time of the
   * health evaluation. The check is performed after every upgrade domain upgrade
   * completion to make sure the global state of the cluster is within tolerated
   * limits.
   *
   * @param {number}
   * cluster.upgradeDescription.deltaHealthPolicy.maxPercentUpgradeDomainDeltaUnhealthyNodes
   * The maximum allowed percentage of upgrade domain nodes health degradation
   * allowed during cluster upgrades. The delta is measured between the state of
   * the upgrade domain nodes at the beginning of upgrade and the state of the
   * upgrade domain nodes at the time of the health evaluation. The check is
   * performed after every upgrade domain upgrade completion for all completed
   * upgrade domains to make sure the state of the upgrade domains is within
   * tolerated limits.
   *
   * @param {number}
   * cluster.upgradeDescription.deltaHealthPolicy.maxPercentDeltaUnhealthyApplications
   * The maximum allowed percentage of applications health degradation allowed
   * during cluster upgrades. The delta is measured between the state of the
   * applications at the beginning of upgrade and the state of the applications
   * at the time of the health evaluation. The check is performed after every
   * upgrade domain upgrade completion to make sure the global state of the
   * cluster is within tolerated limits. System services are not included in
   * this.
   *
   * @param {array} [cluster.addOnFeatures] The list of add-on features to enable
   * in the cluster.
   *
   * @param {string} cluster.location Resource location.
   *
   * @param {object} [cluster.tags] Resource tags.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Cluster} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Cluster} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  beginCreate(resourceGroupName, clusterName, cluster, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._beginCreate(resourceGroupName, clusterName, cluster, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._beginCreate(resourceGroupName, clusterName, cluster, options, optionalCallback);
    }
  }

  /**
   * @summary Update cluster configuration
   *
   * Update cluster configuration
   *
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} clusterName The name of the cluster resource
   *
   * @param {object} clusterUpdateParameters The parameters which contains the
   * property value and property name which used to update the cluster
   * configuration.
   *
   * @param {string} [clusterUpdateParameters.reliabilityLevel] The reliability
   * level sets the replica set size of system services. Learn about
   * [ReliabilityLevel](https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-cluster-capacity).
   * Possible values include: 'Bronze', 'Silver', 'Gold'
   *
   * @param {string} [clusterUpdateParameters.upgradeMode] The upgrade mode of
   * the cluster. This indicates if the cluster should be automatically upgraded
   * when new Service Fabric runtime version is available. Possible values
   * include: 'Automatic', 'Manual'
   *
   * @param {string} [clusterUpdateParameters.clusterCodeVersion] The Service
   * Fabric runtime version of the cluster. This property can only by set the
   * user when **upgradeMode** is set to 'Manual'. To get list of available
   * Service Fabric versions for new clusters use [ClusterVersion
   * API](./ClusterVersion.md). To get the list of available version for existing
   * clusters use **availableClusterVersions**.
   *
   * @param {object} [clusterUpdateParameters.certificate] The certificate to use
   * for securing the cluster. The certificate provided will be used for  node to
   * node security within the cluster, SSL certificate for cluster management
   * endpoint and default  admin client.
   *
   * @param {array} [clusterUpdateParameters.clientCertificateThumbprints] The
   * list of client certificates referenced by thumbprint that are allowed to
   * manage the cluster. This will overwrite the existing list.
   *
   * @param {array} [clusterUpdateParameters.clientCertificateCommonNames] The
   * list of client certificates referenced by common name that are allowed to
   * manage the cluster. This will overwrite the existing list.
   *
   * @param {array} [clusterUpdateParameters.fabricSettings] The list of custom
   * fabric settings to configure the cluster. This will overwrite the existing
   * list.
   *
   * @param {object} [clusterUpdateParameters.reverseProxyCertificate] The server
   * certificate used by reverse proxy.
   *
   * @param {string} clusterUpdateParameters.reverseProxyCertificate.thumbprint
   * Thumbprint of the primary certificate.
   *
   * @param {string}
   * [clusterUpdateParameters.reverseProxyCertificate.thumbprintSecondary]
   * Thumbprint of the secondary certificate.
   *
   * @param {string}
   * [clusterUpdateParameters.reverseProxyCertificate.x509StoreName] The local
   * certificate store location. Possible values include: 'AddressBook',
   * 'AuthRoot', 'CertificateAuthority', 'Disallowed', 'My', 'Root',
   * 'TrustedPeople', 'TrustedPublisher'
   *
   * @param {array} [clusterUpdateParameters.nodeTypes] The list of node types in
   * the cluster. This will overwrite the existing list.
   *
   * @param {object} [clusterUpdateParameters.upgradeDescription] The policy to
   * use when upgrading the cluster.
   *
   * @param {boolean} [clusterUpdateParameters.upgradeDescription.forceRestart]
   * If true, then processes are forcefully restarted during upgrade even when
   * the code version has not changed (the upgrade only changes configuration or
   * data).
   *
   * @param {string}
   * clusterUpdateParameters.upgradeDescription.upgradeReplicaSetCheckTimeout The
   * maximum amount of time to block processing of an upgrade domain and revent
   * loss of availability when there are unexpected issues. When this timeout
   * expires, processing of the upgrade domain will proceed regardless of
   * availability loss issues. The timeout is reset at the start of each upgrade
   * domain. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
   *
   * @param {string}
   * clusterUpdateParameters.upgradeDescription.healthCheckWaitDuration The
   * length of time to wait after completing an upgrade domain before performing
   * health checks. The duration can be in either hh:mm:ss or in d.hh:mm:ss.ms
   * format.
   *
   * @param {string}
   * clusterUpdateParameters.upgradeDescription.healthCheckStableDuration The
   * amount of time that the application or cluster must remain healthy before
   * the upgrade proceeds to the next upgrade domain. The duration can be in
   * either hh:mm:ss or in d.hh:mm:ss.ms format.
   *
   * @param {string}
   * clusterUpdateParameters.upgradeDescription.healthCheckRetryTimeout The
   * amount of time to retry health evaluation when the application or cluster is
   * unhealthy before the upgrade rolls back. The timeout can be in either
   * hh:mm:ss or in d.hh:mm:ss.ms format.
   *
   * @param {string} clusterUpdateParameters.upgradeDescription.upgradeTimeout
   * The amount of time the overall upgrade has to complete before the upgrade
   * rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms
   * format.
   *
   * @param {string}
   * clusterUpdateParameters.upgradeDescription.upgradeDomainTimeout The amount
   * of time each upgrade domain has to complete before the upgrade rolls back.
   * The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
   *
   * @param {object} clusterUpdateParameters.upgradeDescription.healthPolicy The
   * cluster health policy used when upgrading the cluster.
   *
   * @param {number}
   * [clusterUpdateParameters.upgradeDescription.healthPolicy.maxPercentUnhealthyNodes]
   * The maximum allowed percentage of unhealthy nodes before reporting an error.
   * For example, to allow 10% of nodes to be unhealthy, this value would be 10.
   *
   * @param {number}
   * [clusterUpdateParameters.upgradeDescription.healthPolicy.maxPercentUnhealthyApplications]
   * The maximum allowed percentage of unhealthy applications before reporting an
   * error. For example, to allow 10% of applications to be unhealthy, this value
   * would be 10.
   *
   * @param {object}
   * [clusterUpdateParameters.upgradeDescription.deltaHealthPolicy] The delta
   * health policy used when upgrading the cluster.
   *
   * @param {number}
   * clusterUpdateParameters.upgradeDescription.deltaHealthPolicy.maxPercentDeltaUnhealthyNodes
   * The maximum allowed percentage of nodes health degradation allowed during
   * cluster upgrades. The delta is measured between the state of the nodes at
   * the beginning of upgrade and the state of the nodes at the time of the
   * health evaluation. The check is performed after every upgrade domain upgrade
   * completion to make sure the global state of the cluster is within tolerated
   * limits.
   *
   * @param {number}
   * clusterUpdateParameters.upgradeDescription.deltaHealthPolicy.maxPercentUpgradeDomainDeltaUnhealthyNodes
   * The maximum allowed percentage of upgrade domain nodes health degradation
   * allowed during cluster upgrades. The delta is measured between the state of
   * the upgrade domain nodes at the beginning of upgrade and the state of the
   * upgrade domain nodes at the time of the health evaluation. The check is
   * performed after every upgrade domain upgrade completion for all completed
   * upgrade domains to make sure the state of the upgrade domains is within
   * tolerated limits.
   *
   * @param {number}
   * clusterUpdateParameters.upgradeDescription.deltaHealthPolicy.maxPercentDeltaUnhealthyApplications
   * The maximum allowed percentage of applications health degradation allowed
   * during cluster upgrades. The delta is measured between the state of the
   * applications at the beginning of upgrade and the state of the applications
   * at the time of the health evaluation. The check is performed after every
   * upgrade domain upgrade completion to make sure the global state of the
   * cluster is within tolerated limits. System services are not included in
   * this.
   *
   * @param {array} [clusterUpdateParameters.addOnFeatures] The list of add-on
   * features to enable in the cluster.
   *
   * @param {object} [clusterUpdateParameters.tags] Cluster update parameters
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Cluster>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  beginUpdateWithHttpOperationResponse(resourceGroupName, clusterName, clusterUpdateParameters, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._beginUpdate(resourceGroupName, clusterName, clusterUpdateParameters, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Update cluster configuration
   *
   * Update cluster configuration
   *
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} clusterName The name of the cluster resource
   *
   * @param {object} clusterUpdateParameters The parameters which contains the
   * property value and property name which used to update the cluster
   * configuration.
   *
   * @param {string} [clusterUpdateParameters.reliabilityLevel] The reliability
   * level sets the replica set size of system services. Learn about
   * [ReliabilityLevel](https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-cluster-capacity).
   * Possible values include: 'Bronze', 'Silver', 'Gold'
   *
   * @param {string} [clusterUpdateParameters.upgradeMode] The upgrade mode of
   * the cluster. This indicates if the cluster should be automatically upgraded
   * when new Service Fabric runtime version is available. Possible values
   * include: 'Automatic', 'Manual'
   *
   * @param {string} [clusterUpdateParameters.clusterCodeVersion] The Service
   * Fabric runtime version of the cluster. This property can only by set the
   * user when **upgradeMode** is set to 'Manual'. To get list of available
   * Service Fabric versions for new clusters use [ClusterVersion
   * API](./ClusterVersion.md). To get the list of available version for existing
   * clusters use **availableClusterVersions**.
   *
   * @param {object} [clusterUpdateParameters.certificate] The certificate to use
   * for securing the cluster. The certificate provided will be used for  node to
   * node security within the cluster, SSL certificate for cluster management
   * endpoint and default  admin client.
   *
   * @param {array} [clusterUpdateParameters.clientCertificateThumbprints] The
   * list of client certificates referenced by thumbprint that are allowed to
   * manage the cluster. This will overwrite the existing list.
   *
   * @param {array} [clusterUpdateParameters.clientCertificateCommonNames] The
   * list of client certificates referenced by common name that are allowed to
   * manage the cluster. This will overwrite the existing list.
   *
   * @param {array} [clusterUpdateParameters.fabricSettings] The list of custom
   * fabric settings to configure the cluster. This will overwrite the existing
   * list.
   *
   * @param {object} [clusterUpdateParameters.reverseProxyCertificate] The server
   * certificate used by reverse proxy.
   *
   * @param {string} clusterUpdateParameters.reverseProxyCertificate.thumbprint
   * Thumbprint of the primary certificate.
   *
   * @param {string}
   * [clusterUpdateParameters.reverseProxyCertificate.thumbprintSecondary]
   * Thumbprint of the secondary certificate.
   *
   * @param {string}
   * [clusterUpdateParameters.reverseProxyCertificate.x509StoreName] The local
   * certificate store location. Possible values include: 'AddressBook',
   * 'AuthRoot', 'CertificateAuthority', 'Disallowed', 'My', 'Root',
   * 'TrustedPeople', 'TrustedPublisher'
   *
   * @param {array} [clusterUpdateParameters.nodeTypes] The list of node types in
   * the cluster. This will overwrite the existing list.
   *
   * @param {object} [clusterUpdateParameters.upgradeDescription] The policy to
   * use when upgrading the cluster.
   *
   * @param {boolean} [clusterUpdateParameters.upgradeDescription.forceRestart]
   * If true, then processes are forcefully restarted during upgrade even when
   * the code version has not changed (the upgrade only changes configuration or
   * data).
   *
   * @param {string}
   * clusterUpdateParameters.upgradeDescription.upgradeReplicaSetCheckTimeout The
   * maximum amount of time to block processing of an upgrade domain and revent
   * loss of availability when there are unexpected issues. When this timeout
   * expires, processing of the upgrade domain will proceed regardless of
   * availability loss issues. The timeout is reset at the start of each upgrade
   * domain. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
   *
   * @param {string}
   * clusterUpdateParameters.upgradeDescription.healthCheckWaitDuration The
   * length of time to wait after completing an upgrade domain before performing
   * health checks. The duration can be in either hh:mm:ss or in d.hh:mm:ss.ms
   * format.
   *
   * @param {string}
   * clusterUpdateParameters.upgradeDescription.healthCheckStableDuration The
   * amount of time that the application or cluster must remain healthy before
   * the upgrade proceeds to the next upgrade domain. The duration can be in
   * either hh:mm:ss or in d.hh:mm:ss.ms format.
   *
   * @param {string}
   * clusterUpdateParameters.upgradeDescription.healthCheckRetryTimeout The
   * amount of time to retry health evaluation when the application or cluster is
   * unhealthy before the upgrade rolls back. The timeout can be in either
   * hh:mm:ss or in d.hh:mm:ss.ms format.
   *
   * @param {string} clusterUpdateParameters.upgradeDescription.upgradeTimeout
   * The amount of time the overall upgrade has to complete before the upgrade
   * rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms
   * format.
   *
   * @param {string}
   * clusterUpdateParameters.upgradeDescription.upgradeDomainTimeout The amount
   * of time each upgrade domain has to complete before the upgrade rolls back.
   * The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
   *
   * @param {object} clusterUpdateParameters.upgradeDescription.healthPolicy The
   * cluster health policy used when upgrading the cluster.
   *
   * @param {number}
   * [clusterUpdateParameters.upgradeDescription.healthPolicy.maxPercentUnhealthyNodes]
   * The maximum allowed percentage of unhealthy nodes before reporting an error.
   * For example, to allow 10% of nodes to be unhealthy, this value would be 10.
   *
   * @param {number}
   * [clusterUpdateParameters.upgradeDescription.healthPolicy.maxPercentUnhealthyApplications]
   * The maximum allowed percentage of unhealthy applications before reporting an
   * error. For example, to allow 10% of applications to be unhealthy, this value
   * would be 10.
   *
   * @param {object}
   * [clusterUpdateParameters.upgradeDescription.deltaHealthPolicy] The delta
   * health policy used when upgrading the cluster.
   *
   * @param {number}
   * clusterUpdateParameters.upgradeDescription.deltaHealthPolicy.maxPercentDeltaUnhealthyNodes
   * The maximum allowed percentage of nodes health degradation allowed during
   * cluster upgrades. The delta is measured between the state of the nodes at
   * the beginning of upgrade and the state of the nodes at the time of the
   * health evaluation. The check is performed after every upgrade domain upgrade
   * completion to make sure the global state of the cluster is within tolerated
   * limits.
   *
   * @param {number}
   * clusterUpdateParameters.upgradeDescription.deltaHealthPolicy.maxPercentUpgradeDomainDeltaUnhealthyNodes
   * The maximum allowed percentage of upgrade domain nodes health degradation
   * allowed during cluster upgrades. The delta is measured between the state of
   * the upgrade domain nodes at the beginning of upgrade and the state of the
   * upgrade domain nodes at the time of the health evaluation. The check is
   * performed after every upgrade domain upgrade completion for all completed
   * upgrade domains to make sure the state of the upgrade domains is within
   * tolerated limits.
   *
   * @param {number}
   * clusterUpdateParameters.upgradeDescription.deltaHealthPolicy.maxPercentDeltaUnhealthyApplications
   * The maximum allowed percentage of applications health degradation allowed
   * during cluster upgrades. The delta is measured between the state of the
   * applications at the beginning of upgrade and the state of the applications
   * at the time of the health evaluation. The check is performed after every
   * upgrade domain upgrade completion to make sure the global state of the
   * cluster is within tolerated limits. System services are not included in
   * this.
   *
   * @param {array} [clusterUpdateParameters.addOnFeatures] The list of add-on
   * features to enable in the cluster.
   *
   * @param {object} [clusterUpdateParameters.tags] Cluster update parameters
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Cluster} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Cluster} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  beginUpdate(resourceGroupName, clusterName, clusterUpdateParameters, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._beginUpdate(resourceGroupName, clusterName, clusterUpdateParameters, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._beginUpdate(resourceGroupName, clusterName, clusterUpdateParameters, options, optionalCallback);
    }
  }

}

module.exports = Clusters;
