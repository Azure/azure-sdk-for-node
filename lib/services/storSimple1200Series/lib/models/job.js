/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * The Job.
 *
 * @extends models['BaseModel']
 */
class Job extends models['BaseModel'] {
  /**
   * Create a Job.
   * @member {string} status Current status of the job. Possible values
   * include: 'Invalid', 'Running', 'Succeeded', 'Failed', 'Canceled',
   * 'Paused', 'Scheduled'
   * @member {date} [startTime] The UTC time at which the job was started
   * @member {date} [endTime] The UTC time at which the job completed
   * @member {number} percentComplete The percentage of the job that is already
   * complete
   * @member {object} [error] The Error details.
   * @member {array} [error.errorDetails] The error details.
   * @member {string} [error.code] The code intended for programmatic access
   * @member {string} [error.message] The message intended to describe the
   * error in detail
   * @member {string} jobType Type of the job. Possible values include:
   * 'Backup', 'Clone', 'Failover', 'DownloadUpdates', 'InstallUpdates'
   * @member {string} [targetId] Id of the object that is created by the job
   * @member {string} [entityId] The entity identifier for which the job ran.
   * @member {string} [entityType] The entity type for which the job ran.
   * @member {array} [jobStages] The job stages.
   * @member {string} [deviceId] The device id in which the job is currently
   * running
   * @member {boolean} [isCancellable] Represents whether the job is
   * cancellable or not
   * @member {object} [stats] stats properties for the job
   * @member {number} [stats.completedWorkItemCount] Completed work item count.
   * @member {number} [stats.totalWorkItemCount] Total work item count.
   * @member {number} [stats.estimatedTimeRemaining] The estimated time
   * remaining.
   * @member {string} [targetType] The target type of the backup. Possible
   * values include: 'FileServer', 'DiskServer'
   * @member {string} [sourceDeviceId] The source device identifier of the
   * failover job.
   * @member {date} [backupPointInTime] The time of the backup used for the
   * failover.
   * @member {object} [downloadProgress] The download progress.
   * @member {string} [downloadProgress.downloadPhase] The download phase.
   * Possible values include: 'Unknown', 'Initializing', 'Downloading',
   * 'Verifying'
   * @member {number} [downloadProgress.percentComplete] Percentage of
   * completion.
   * @member {number} [downloadProgress.totalBytesToDownload] Total bytes to
   * download.
   * @member {number} [downloadProgress.totalBytesDownloaded] Total bytes
   * downloaded.
   * @member {number} [downloadProgress.numberOfUpdatesToDownload] Number of
   * updates to download.
   * @member {number} [downloadProgress.numberOfUpdatesDownloaded] Number of
   * updates downloaded.
   * @member {object} [installProgress] The install progress.
   * @member {number} [installProgress.percentComplete] Percentage of
   * completion.
   * @member {number} [installProgress.numberOfUpdatesToInstall] Number of
   * updates to install.
   * @member {number} [installProgress.numberOfUpdatesInstalled] Number of
   * updates installed.
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of Job
   *
   * @returns {object} metadata of Job
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'Job',
      type: {
        name: 'Composite',
        className: 'Job',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          status: {
            required: true,
            serializedName: 'status',
            type: {
              name: 'Enum',
              allowedValues: [ 'Invalid', 'Running', 'Succeeded', 'Failed', 'Canceled', 'Paused', 'Scheduled' ]
            }
          },
          startTime: {
            required: false,
            serializedName: 'startTime',
            type: {
              name: 'DateTime'
            }
          },
          endTime: {
            required: false,
            serializedName: 'endTime',
            type: {
              name: 'DateTime'
            }
          },
          percentComplete: {
            required: true,
            serializedName: 'percentComplete',
            type: {
              name: 'Number'
            }
          },
          error: {
            required: false,
            serializedName: 'error',
            type: {
              name: 'Composite',
              className: 'JobErrorDetails'
            }
          },
          jobType: {
            required: true,
            serializedName: 'properties.jobType',
            type: {
              name: 'Enum',
              allowedValues: [ 'Backup', 'Clone', 'Failover', 'DownloadUpdates', 'InstallUpdates' ]
            }
          },
          targetId: {
            required: false,
            serializedName: 'properties.targetId',
            type: {
              name: 'String'
            }
          },
          entityId: {
            required: false,
            serializedName: 'properties.entityId',
            type: {
              name: 'String'
            }
          },
          entityType: {
            required: false,
            serializedName: 'properties.entityType',
            type: {
              name: 'String'
            }
          },
          jobStages: {
            required: false,
            serializedName: 'properties.jobStages',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'JobStageElementType',
                  type: {
                    name: 'Composite',
                    className: 'JobStage'
                  }
              }
            }
          },
          deviceId: {
            required: false,
            serializedName: 'properties.deviceId',
            type: {
              name: 'String'
            }
          },
          isCancellable: {
            required: false,
            serializedName: 'properties.isCancellable',
            type: {
              name: 'Boolean'
            }
          },
          stats: {
            required: false,
            serializedName: 'properties.stats',
            type: {
              name: 'Composite',
              className: 'JobStats'
            }
          },
          targetType: {
            required: false,
            serializedName: 'properties.targetType',
            type: {
              name: 'Enum',
              allowedValues: [ 'FileServer', 'DiskServer' ]
            }
          },
          sourceDeviceId: {
            required: false,
            serializedName: 'properties.sourceDeviceId',
            type: {
              name: 'String'
            }
          },
          backupPointInTime: {
            required: false,
            serializedName: 'properties.backupPointInTime',
            type: {
              name: 'DateTime'
            }
          },
          downloadProgress: {
            required: false,
            serializedName: 'properties.downloadProgress',
            type: {
              name: 'Composite',
              className: 'UpdateDownloadProgress'
            }
          },
          installProgress: {
            required: false,
            serializedName: 'properties.installProgress',
            type: {
              name: 'Composite',
              className: 'UpdateInstallProgress'
            }
          }
        }
      }
    };
  }
}

module.exports = Job;
