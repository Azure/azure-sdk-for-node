/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback, HttpOperationResponse } from 'ms-rest';
import * as models from '../models';


/**
 * @class
 * Operations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the HybridDataManagementClient.
 */
export interface Operations {


    /**
     * @summary This method gets all the operations.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AvailableProviderOperations>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AvailableProviderOperations>>;

    /**
     * @summary This method gets all the operations.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AvailableProviderOperations} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AvailableProviderOperations} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AvailableProviderOperations} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AvailableProviderOperations>;
    list(callback: ServiceCallback<models.AvailableProviderOperations>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AvailableProviderOperations>): void;


    /**
     * @summary This method gets all the operations.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AvailableProviderOperations>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AvailableProviderOperations>>;

    /**
     * @summary This method gets all the operations.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AvailableProviderOperations} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AvailableProviderOperations} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AvailableProviderOperations} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AvailableProviderOperations>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.AvailableProviderOperations>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AvailableProviderOperations>): void;
}

/**
 * @class
 * DataManagers
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the HybridDataManagementClient.
 */
export interface DataManagers {


    /**
     * Lists all the data manager resources available under the subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DataManagerList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DataManagerList>>;

    /**
     * Lists all the data manager resources available under the subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DataManagerList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DataManagerList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DataManagerList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DataManagerList>;
    list(callback: ServiceCallback<models.DataManagerList>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DataManagerList>): void;


    /**
     * Lists all the data manager resources available under the given resource
     * group.
     *
     * @param {string} resourceGroupName The Resource Group Name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DataManagerList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupWithHttpOperationResponse(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DataManagerList>>;

    /**
     * Lists all the data manager resources available under the given resource
     * group.
     *
     * @param {string} resourceGroupName The Resource Group Name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DataManagerList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DataManagerList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DataManagerList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroup(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DataManagerList>;
    listByResourceGroup(resourceGroupName: string, callback: ServiceCallback<models.DataManagerList>): void;
    listByResourceGroup(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DataManagerList>): void;


    /**
     * Gets information about the specified data manager resource.
     *
     * @param {string} resourceGroupName The Resource Group Name
     *
     * @param {string} dataManagerName The name of the DataManager Resource within
     * the specified resource group. DataManager names must be between 3 and 24
     * characters in length and use any alphanumeric and underscore only
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DataManager>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, dataManagerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DataManager>>;

    /**
     * Gets information about the specified data manager resource.
     *
     * @param {string} resourceGroupName The Resource Group Name
     *
     * @param {string} dataManagerName The name of the DataManager Resource within
     * the specified resource group. DataManager names must be between 3 and 24
     * characters in length and use any alphanumeric and underscore only
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DataManager} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DataManager} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DataManager} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, dataManagerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DataManager>;
    get(resourceGroupName: string, dataManagerName: string, callback: ServiceCallback<models.DataManager>): void;
    get(resourceGroupName: string, dataManagerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DataManager>): void;


    /**
     * Creates a new data manager resource with the specified parameters. Existing
     * resources cannot be updated with this API
     * and should instead be updated with the Update data manager resource API.
     *
     * @param {string} resourceGroupName The Resource Group Name
     *
     * @param {string} dataManagerName The name of the DataManager Resource within
     * the specified resource group. DataManager names must be between 3 and 24
     * characters in length and use any alphanumeric and underscore only
     *
     * @param {object} dataManager Data manager resource details from request body.
     *
     * @param {string} [dataManager.etag] Etag of the Resource.
     *
     * @param {string} dataManager.location The location of the resource. This will
     * be one of the supported and registered Azure Geo Regions (e.g. West US, East
     * US, Southeast Asia, etc.). The geo region of a resource cannot be changed
     * once it is created, but if an identical geo
     * region is specified on update the request will succeed.
     *
     * @param {object} [dataManager.tags] The list of key value pairs that describe
     * the resource. These tags can be used in viewing and grouping this resource
     * (across resource groups).
     *
     * @param {object} [dataManager.sku] The sku type.
     *
     * @param {string} [dataManager.sku.name] The sku name. Required for data
     * manager creation, optional for update.
     *
     * @param {string} [dataManager.sku.tier] The sku tier. This is based on the
     * SKU name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DataManager>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createWithHttpOperationResponse(resourceGroupName: string, dataManagerName: string, dataManager: models.DataManager, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DataManager>>;

    /**
     * Creates a new data manager resource with the specified parameters. Existing
     * resources cannot be updated with this API
     * and should instead be updated with the Update data manager resource API.
     *
     * @param {string} resourceGroupName The Resource Group Name
     *
     * @param {string} dataManagerName The name of the DataManager Resource within
     * the specified resource group. DataManager names must be between 3 and 24
     * characters in length and use any alphanumeric and underscore only
     *
     * @param {object} dataManager Data manager resource details from request body.
     *
     * @param {string} [dataManager.etag] Etag of the Resource.
     *
     * @param {string} dataManager.location The location of the resource. This will
     * be one of the supported and registered Azure Geo Regions (e.g. West US, East
     * US, Southeast Asia, etc.). The geo region of a resource cannot be changed
     * once it is created, but if an identical geo
     * region is specified on update the request will succeed.
     *
     * @param {object} [dataManager.tags] The list of key value pairs that describe
     * the resource. These tags can be used in viewing and grouping this resource
     * (across resource groups).
     *
     * @param {object} [dataManager.sku] The sku type.
     *
     * @param {string} [dataManager.sku.name] The sku name. Required for data
     * manager creation, optional for update.
     *
     * @param {string} [dataManager.sku.tier] The sku tier. This is based on the
     * SKU name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DataManager} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DataManager} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DataManager} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    create(resourceGroupName: string, dataManagerName: string, dataManager: models.DataManager, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DataManager>;
    create(resourceGroupName: string, dataManagerName: string, dataManager: models.DataManager, callback: ServiceCallback<models.DataManager>): void;
    create(resourceGroupName: string, dataManagerName: string, dataManager: models.DataManager, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DataManager>): void;


    /**
     * Deletes a data manager resource in Microsoft Azure.
     *
     * @param {string} resourceGroupName The Resource Group Name
     *
     * @param {string} dataManagerName The name of the DataManager Resource within
     * the specified resource group. DataManager names must be between 3 and 24
     * characters in length and use any alphanumeric and underscore only
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, dataManagerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a data manager resource in Microsoft Azure.
     *
     * @param {string} resourceGroupName The Resource Group Name
     *
     * @param {string} dataManagerName The name of the DataManager Resource within
     * the specified resource group. DataManager names must be between 3 and 24
     * characters in length and use any alphanumeric and underscore only
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, dataManagerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, dataManagerName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, dataManagerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Creates a new data manager resource with the specified parameters. Existing
     * resources cannot be updated with this API
     * and should instead be updated with the Update data manager resource API.
     *
     * @param {string} resourceGroupName The Resource Group Name
     *
     * @param {string} dataManagerName The name of the DataManager Resource within
     * the specified resource group. DataManager names must be between 3 and 24
     * characters in length and use any alphanumeric and underscore only
     *
     * @param {object} dataManager Data manager resource details from request body.
     *
     * @param {string} [dataManager.etag] Etag of the Resource.
     *
     * @param {string} dataManager.location The location of the resource. This will
     * be one of the supported and registered Azure Geo Regions (e.g. West US, East
     * US, Southeast Asia, etc.). The geo region of a resource cannot be changed
     * once it is created, but if an identical geo
     * region is specified on update the request will succeed.
     *
     * @param {object} [dataManager.tags] The list of key value pairs that describe
     * the resource. These tags can be used in viewing and grouping this resource
     * (across resource groups).
     *
     * @param {object} [dataManager.sku] The sku type.
     *
     * @param {string} [dataManager.sku.name] The sku name. Required for data
     * manager creation, optional for update.
     *
     * @param {string} [dataManager.sku.tier] The sku tier. This is based on the
     * SKU name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DataManager>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateWithHttpOperationResponse(resourceGroupName: string, dataManagerName: string, dataManager: models.DataManager, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DataManager>>;

    /**
     * Creates a new data manager resource with the specified parameters. Existing
     * resources cannot be updated with this API
     * and should instead be updated with the Update data manager resource API.
     *
     * @param {string} resourceGroupName The Resource Group Name
     *
     * @param {string} dataManagerName The name of the DataManager Resource within
     * the specified resource group. DataManager names must be between 3 and 24
     * characters in length and use any alphanumeric and underscore only
     *
     * @param {object} dataManager Data manager resource details from request body.
     *
     * @param {string} [dataManager.etag] Etag of the Resource.
     *
     * @param {string} dataManager.location The location of the resource. This will
     * be one of the supported and registered Azure Geo Regions (e.g. West US, East
     * US, Southeast Asia, etc.). The geo region of a resource cannot be changed
     * once it is created, but if an identical geo
     * region is specified on update the request will succeed.
     *
     * @param {object} [dataManager.tags] The list of key value pairs that describe
     * the resource. These tags can be used in viewing and grouping this resource
     * (across resource groups).
     *
     * @param {object} [dataManager.sku] The sku type.
     *
     * @param {string} [dataManager.sku.name] The sku name. Required for data
     * manager creation, optional for update.
     *
     * @param {string} [dataManager.sku.tier] The sku tier. This is based on the
     * SKU name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DataManager} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DataManager} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DataManager} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreate(resourceGroupName: string, dataManagerName: string, dataManager: models.DataManager, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DataManager>;
    beginCreate(resourceGroupName: string, dataManagerName: string, dataManager: models.DataManager, callback: ServiceCallback<models.DataManager>): void;
    beginCreate(resourceGroupName: string, dataManagerName: string, dataManager: models.DataManager, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DataManager>): void;


    /**
     * Deletes a data manager resource in Microsoft Azure.
     *
     * @param {string} resourceGroupName The Resource Group Name
     *
     * @param {string} dataManagerName The name of the DataManager Resource within
     * the specified resource group. DataManager names must be between 3 and 24
     * characters in length and use any alphanumeric and underscore only
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, dataManagerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a data manager resource in Microsoft Azure.
     *
     * @param {string} resourceGroupName The Resource Group Name
     *
     * @param {string} dataManagerName The name of the DataManager Resource within
     * the specified resource group. DataManager names must be between 3 and 24
     * characters in length and use any alphanumeric and underscore only
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(resourceGroupName: string, dataManagerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(resourceGroupName: string, dataManagerName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, dataManagerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
}

/**
 * @class
 * DataServices
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the HybridDataManagementClient.
 */
export interface DataServices {


    /**
     * This method gets all the data services.
     *
     * @param {string} resourceGroupName The Resource Group Name
     *
     * @param {string} dataManagerName The name of the DataManager Resource within
     * the specified resource group. DataManager names must be between 3 and 24
     * characters in length and use any alphanumeric and underscore only
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DataServiceList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByDataManagerWithHttpOperationResponse(resourceGroupName: string, dataManagerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DataServiceList>>;

    /**
     * This method gets all the data services.
     *
     * @param {string} resourceGroupName The Resource Group Name
     *
     * @param {string} dataManagerName The name of the DataManager Resource within
     * the specified resource group. DataManager names must be between 3 and 24
     * characters in length and use any alphanumeric and underscore only
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DataServiceList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DataServiceList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DataServiceList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByDataManager(resourceGroupName: string, dataManagerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DataServiceList>;
    listByDataManager(resourceGroupName: string, dataManagerName: string, callback: ServiceCallback<models.DataServiceList>): void;
    listByDataManager(resourceGroupName: string, dataManagerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DataServiceList>): void;


    /**
     * Gets the data service that match the data service name given.
     *
     * @param {string} dataServiceName The name of the data service that is being
     * queried.
     *
     * @param {string} resourceGroupName The Resource Group Name
     *
     * @param {string} dataManagerName The name of the DataManager Resource within
     * the specified resource group. DataManager names must be between 3 and 24
     * characters in length and use any alphanumeric and underscore only
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DataService>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(dataServiceName: string, resourceGroupName: string, dataManagerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DataService>>;

    /**
     * Gets the data service that match the data service name given.
     *
     * @param {string} dataServiceName The name of the data service that is being
     * queried.
     *
     * @param {string} resourceGroupName The Resource Group Name
     *
     * @param {string} dataManagerName The name of the DataManager Resource within
     * the specified resource group. DataManager names must be between 3 and 24
     * characters in length and use any alphanumeric and underscore only
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DataService} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DataService} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DataService} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(dataServiceName: string, resourceGroupName: string, dataManagerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DataService>;
    get(dataServiceName: string, resourceGroupName: string, dataManagerName: string, callback: ServiceCallback<models.DataService>): void;
    get(dataServiceName: string, resourceGroupName: string, dataManagerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DataService>): void;


    /**
     * This method gets all the data services.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DataServiceList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByDataManagerNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DataServiceList>>;

    /**
     * This method gets all the data services.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DataServiceList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DataServiceList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DataServiceList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByDataManagerNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DataServiceList>;
    listByDataManagerNext(nextPageLink: string, callback: ServiceCallback<models.DataServiceList>): void;
    listByDataManagerNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DataServiceList>): void;
}

/**
 * @class
 * JobDefinitions
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the HybridDataManagementClient.
 */
export interface JobDefinitions {


    /**
     * This method gets all the job definitions of the given data service name.
     *
     * @param {string} dataServiceName The data service type of interest.
     *
     * @param {string} resourceGroupName The Resource Group Name
     *
     * @param {string} dataManagerName The name of the DataManager Resource within
     * the specified resource group. DataManager names must be between 3 and 24
     * characters in length and use any alphanumeric and underscore only
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] OData Filter options
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<JobDefinitionList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByDataServiceWithHttpOperationResponse(dataServiceName: string, resourceGroupName: string, dataManagerName: string, options?: { filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.JobDefinitionList>>;

    /**
     * This method gets all the job definitions of the given data service name.
     *
     * @param {string} dataServiceName The data service type of interest.
     *
     * @param {string} resourceGroupName The Resource Group Name
     *
     * @param {string} dataManagerName The name of the DataManager Resource within
     * the specified resource group. DataManager names must be between 3 and 24
     * characters in length and use any alphanumeric and underscore only
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] OData Filter options
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {JobDefinitionList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {JobDefinitionList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link JobDefinitionList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByDataService(dataServiceName: string, resourceGroupName: string, dataManagerName: string, options?: { filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.JobDefinitionList>;
    listByDataService(dataServiceName: string, resourceGroupName: string, dataManagerName: string, callback: ServiceCallback<models.JobDefinitionList>): void;
    listByDataService(dataServiceName: string, resourceGroupName: string, dataManagerName: string, options: { filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.JobDefinitionList>): void;


    /**
     * This method gets job definition object by name.
     *
     * @param {string} dataServiceName The data service name of the job definition
     *
     * @param {string} jobDefinitionName The job definition name that is being
     * queried.
     *
     * @param {string} resourceGroupName The Resource Group Name
     *
     * @param {string} dataManagerName The name of the DataManager Resource within
     * the specified resource group. DataManager names must be between 3 and 24
     * characters in length and use any alphanumeric and underscore only
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<JobDefinition>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(dataServiceName: string, jobDefinitionName: string, resourceGroupName: string, dataManagerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.JobDefinition>>;

    /**
     * This method gets job definition object by name.
     *
     * @param {string} dataServiceName The data service name of the job definition
     *
     * @param {string} jobDefinitionName The job definition name that is being
     * queried.
     *
     * @param {string} resourceGroupName The Resource Group Name
     *
     * @param {string} dataManagerName The name of the DataManager Resource within
     * the specified resource group. DataManager names must be between 3 and 24
     * characters in length and use any alphanumeric and underscore only
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {JobDefinition} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {JobDefinition} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link JobDefinition} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(dataServiceName: string, jobDefinitionName: string, resourceGroupName: string, dataManagerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.JobDefinition>;
    get(dataServiceName: string, jobDefinitionName: string, resourceGroupName: string, dataManagerName: string, callback: ServiceCallback<models.JobDefinition>): void;
    get(dataServiceName: string, jobDefinitionName: string, resourceGroupName: string, dataManagerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.JobDefinition>): void;


    /**
     * Creates or updates a job definition.
     *
     * @param {string} dataServiceName The data service type of the job definition.
     *
     * @param {string} jobDefinitionName The job definition name to be created or
     * updated.
     *
     * @param {object} jobDefinition Job Definition object to be created or
     * updated.
     *
     * @param {string} jobDefinition.dataSourceId Data Source Id associated to the
     * job definition.
     *
     * @param {string} jobDefinition.dataSinkId Data Sink Id associated to the job
     * definition.
     *
     * @param {array} [jobDefinition.schedules] Schedule for running the job
     * definition
     *
     * @param {string} jobDefinition.state State of the job definition. Possible
     * values include: 'Disabled', 'Enabled', 'Supported'
     *
     * @param {date} [jobDefinition.lastModifiedTime] Last modified time of the job
     * definition.
     *
     * @param {string} [jobDefinition.runLocation] This is the preferred geo
     * location for the job to run. Possible values include: 'none',
     * 'australiaeast', 'australiasoutheast', 'brazilsouth', 'canadacentral',
     * 'canadaeast', 'centralindia', 'centralus', 'eastasia', 'eastus', 'eastus2',
     * 'japaneast', 'japanwest', 'koreacentral', 'koreasouth', 'southeastasia',
     * 'southcentralus', 'southindia', 'northcentralus', 'northeurope', 'uksouth',
     * 'ukwest', 'westcentralus', 'westeurope', 'westindia', 'westus', 'westus2'
     *
     * @param {string} [jobDefinition.userConfirmation] Enum to detect if user
     * confirmation is required. If not passed will default to NotRequired.
     * Possible values include: 'NotRequired', 'Required'
     *
     * @param {object} [jobDefinition.dataServiceInput] A generic json used
     * differently by each data service type.
     *
     * @param {array} [jobDefinition.customerSecrets] List of customer secrets
     * containing a key identifier and key value. The key identifier is a way for
     * the specific data source to understand the key. Value contains customer
     * secret encrypted by the encryptionKeys.
     *
     * @param {string} resourceGroupName The Resource Group Name
     *
     * @param {string} dataManagerName The name of the DataManager Resource within
     * the specified resource group. DataManager names must be between 3 and 24
     * characters in length and use any alphanumeric and underscore only
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<JobDefinition>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(dataServiceName: string, jobDefinitionName: string, jobDefinition: models.JobDefinition, resourceGroupName: string, dataManagerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.JobDefinition>>;

    /**
     * Creates or updates a job definition.
     *
     * @param {string} dataServiceName The data service type of the job definition.
     *
     * @param {string} jobDefinitionName The job definition name to be created or
     * updated.
     *
     * @param {object} jobDefinition Job Definition object to be created or
     * updated.
     *
     * @param {string} jobDefinition.dataSourceId Data Source Id associated to the
     * job definition.
     *
     * @param {string} jobDefinition.dataSinkId Data Sink Id associated to the job
     * definition.
     *
     * @param {array} [jobDefinition.schedules] Schedule for running the job
     * definition
     *
     * @param {string} jobDefinition.state State of the job definition. Possible
     * values include: 'Disabled', 'Enabled', 'Supported'
     *
     * @param {date} [jobDefinition.lastModifiedTime] Last modified time of the job
     * definition.
     *
     * @param {string} [jobDefinition.runLocation] This is the preferred geo
     * location for the job to run. Possible values include: 'none',
     * 'australiaeast', 'australiasoutheast', 'brazilsouth', 'canadacentral',
     * 'canadaeast', 'centralindia', 'centralus', 'eastasia', 'eastus', 'eastus2',
     * 'japaneast', 'japanwest', 'koreacentral', 'koreasouth', 'southeastasia',
     * 'southcentralus', 'southindia', 'northcentralus', 'northeurope', 'uksouth',
     * 'ukwest', 'westcentralus', 'westeurope', 'westindia', 'westus', 'westus2'
     *
     * @param {string} [jobDefinition.userConfirmation] Enum to detect if user
     * confirmation is required. If not passed will default to NotRequired.
     * Possible values include: 'NotRequired', 'Required'
     *
     * @param {object} [jobDefinition.dataServiceInput] A generic json used
     * differently by each data service type.
     *
     * @param {array} [jobDefinition.customerSecrets] List of customer secrets
     * containing a key identifier and key value. The key identifier is a way for
     * the specific data source to understand the key. Value contains customer
     * secret encrypted by the encryptionKeys.
     *
     * @param {string} resourceGroupName The Resource Group Name
     *
     * @param {string} dataManagerName The name of the DataManager Resource within
     * the specified resource group. DataManager names must be between 3 and 24
     * characters in length and use any alphanumeric and underscore only
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {JobDefinition} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {JobDefinition} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link JobDefinition} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(dataServiceName: string, jobDefinitionName: string, jobDefinition: models.JobDefinition, resourceGroupName: string, dataManagerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.JobDefinition>;
    createOrUpdate(dataServiceName: string, jobDefinitionName: string, jobDefinition: models.JobDefinition, resourceGroupName: string, dataManagerName: string, callback: ServiceCallback<models.JobDefinition>): void;
    createOrUpdate(dataServiceName: string, jobDefinitionName: string, jobDefinition: models.JobDefinition, resourceGroupName: string, dataManagerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.JobDefinition>): void;


    /**
     * This method deletes the given job definition.
     *
     * @param {string} dataServiceName The data service type of the job definition.
     *
     * @param {string} jobDefinitionName The job definition name to be deleted.
     *
     * @param {string} resourceGroupName The Resource Group Name
     *
     * @param {string} dataManagerName The name of the DataManager Resource within
     * the specified resource group. DataManager names must be between 3 and 24
     * characters in length and use any alphanumeric and underscore only
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(dataServiceName: string, jobDefinitionName: string, resourceGroupName: string, dataManagerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * This method deletes the given job definition.
     *
     * @param {string} dataServiceName The data service type of the job definition.
     *
     * @param {string} jobDefinitionName The job definition name to be deleted.
     *
     * @param {string} resourceGroupName The Resource Group Name
     *
     * @param {string} dataManagerName The name of the DataManager Resource within
     * the specified resource group. DataManager names must be between 3 and 24
     * characters in length and use any alphanumeric and underscore only
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(dataServiceName: string, jobDefinitionName: string, resourceGroupName: string, dataManagerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(dataServiceName: string, jobDefinitionName: string, resourceGroupName: string, dataManagerName: string, callback: ServiceCallback<void>): void;
    deleteMethod(dataServiceName: string, jobDefinitionName: string, resourceGroupName: string, dataManagerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * This method runs a job instance of the given job definition.
     *
     * @param {string} dataServiceName The data service type of the job definition.
     *
     * @param {string} jobDefinitionName Name of the job definition.
     *
     * @param {object} runParameters Run time parameters for the job definition.
     *
     * @param {string} [runParameters.userConfirmation] Enum to detect if user
     * confirmation is required. If not passed will default to NotRequired.
     * Possible values include: 'NotRequired', 'Required'
     *
     * @param {object} [runParameters.dataServiceInput] A generic json used
     * differently by each data service type.
     *
     * @param {array} [runParameters.customerSecrets] List of customer secrets
     * containing a key identifier and key value. The key identifier is a way for
     * the specific data source to understand the key. Value contains customer
     * secret encrypted by the encryptionKeys.
     *
     * @param {string} resourceGroupName The Resource Group Name
     *
     * @param {string} dataManagerName The name of the DataManager Resource within
     * the specified resource group. DataManager names must be between 3 and 24
     * characters in length and use any alphanumeric and underscore only
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    runWithHttpOperationResponse(dataServiceName: string, jobDefinitionName: string, runParameters: models.RunParameters, resourceGroupName: string, dataManagerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * This method runs a job instance of the given job definition.
     *
     * @param {string} dataServiceName The data service type of the job definition.
     *
     * @param {string} jobDefinitionName Name of the job definition.
     *
     * @param {object} runParameters Run time parameters for the job definition.
     *
     * @param {string} [runParameters.userConfirmation] Enum to detect if user
     * confirmation is required. If not passed will default to NotRequired.
     * Possible values include: 'NotRequired', 'Required'
     *
     * @param {object} [runParameters.dataServiceInput] A generic json used
     * differently by each data service type.
     *
     * @param {array} [runParameters.customerSecrets] List of customer secrets
     * containing a key identifier and key value. The key identifier is a way for
     * the specific data source to understand the key. Value contains customer
     * secret encrypted by the encryptionKeys.
     *
     * @param {string} resourceGroupName The Resource Group Name
     *
     * @param {string} dataManagerName The name of the DataManager Resource within
     * the specified resource group. DataManager names must be between 3 and 24
     * characters in length and use any alphanumeric and underscore only
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    run(dataServiceName: string, jobDefinitionName: string, runParameters: models.RunParameters, resourceGroupName: string, dataManagerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    run(dataServiceName: string, jobDefinitionName: string, runParameters: models.RunParameters, resourceGroupName: string, dataManagerName: string, callback: ServiceCallback<void>): void;
    run(dataServiceName: string, jobDefinitionName: string, runParameters: models.RunParameters, resourceGroupName: string, dataManagerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * This method gets all the job definitions of the given data manager resource.
     *
     * @param {string} resourceGroupName The Resource Group Name
     *
     * @param {string} dataManagerName The name of the DataManager Resource within
     * the specified resource group. DataManager names must be between 3 and 24
     * characters in length and use any alphanumeric and underscore only
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] OData Filter options
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<JobDefinitionList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByDataManagerWithHttpOperationResponse(resourceGroupName: string, dataManagerName: string, options?: { filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.JobDefinitionList>>;

    /**
     * This method gets all the job definitions of the given data manager resource.
     *
     * @param {string} resourceGroupName The Resource Group Name
     *
     * @param {string} dataManagerName The name of the DataManager Resource within
     * the specified resource group. DataManager names must be between 3 and 24
     * characters in length and use any alphanumeric and underscore only
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] OData Filter options
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {JobDefinitionList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {JobDefinitionList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link JobDefinitionList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByDataManager(resourceGroupName: string, dataManagerName: string, options?: { filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.JobDefinitionList>;
    listByDataManager(resourceGroupName: string, dataManagerName: string, callback: ServiceCallback<models.JobDefinitionList>): void;
    listByDataManager(resourceGroupName: string, dataManagerName: string, options: { filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.JobDefinitionList>): void;


    /**
     * Creates or updates a job definition.
     *
     * @param {string} dataServiceName The data service type of the job definition.
     *
     * @param {string} jobDefinitionName The job definition name to be created or
     * updated.
     *
     * @param {object} jobDefinition Job Definition object to be created or
     * updated.
     *
     * @param {string} jobDefinition.dataSourceId Data Source Id associated to the
     * job definition.
     *
     * @param {string} jobDefinition.dataSinkId Data Sink Id associated to the job
     * definition.
     *
     * @param {array} [jobDefinition.schedules] Schedule for running the job
     * definition
     *
     * @param {string} jobDefinition.state State of the job definition. Possible
     * values include: 'Disabled', 'Enabled', 'Supported'
     *
     * @param {date} [jobDefinition.lastModifiedTime] Last modified time of the job
     * definition.
     *
     * @param {string} [jobDefinition.runLocation] This is the preferred geo
     * location for the job to run. Possible values include: 'none',
     * 'australiaeast', 'australiasoutheast', 'brazilsouth', 'canadacentral',
     * 'canadaeast', 'centralindia', 'centralus', 'eastasia', 'eastus', 'eastus2',
     * 'japaneast', 'japanwest', 'koreacentral', 'koreasouth', 'southeastasia',
     * 'southcentralus', 'southindia', 'northcentralus', 'northeurope', 'uksouth',
     * 'ukwest', 'westcentralus', 'westeurope', 'westindia', 'westus', 'westus2'
     *
     * @param {string} [jobDefinition.userConfirmation] Enum to detect if user
     * confirmation is required. If not passed will default to NotRequired.
     * Possible values include: 'NotRequired', 'Required'
     *
     * @param {object} [jobDefinition.dataServiceInput] A generic json used
     * differently by each data service type.
     *
     * @param {array} [jobDefinition.customerSecrets] List of customer secrets
     * containing a key identifier and key value. The key identifier is a way for
     * the specific data source to understand the key. Value contains customer
     * secret encrypted by the encryptionKeys.
     *
     * @param {string} resourceGroupName The Resource Group Name
     *
     * @param {string} dataManagerName The name of the DataManager Resource within
     * the specified resource group. DataManager names must be between 3 and 24
     * characters in length and use any alphanumeric and underscore only
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<JobDefinition>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(dataServiceName: string, jobDefinitionName: string, jobDefinition: models.JobDefinition, resourceGroupName: string, dataManagerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.JobDefinition>>;

    /**
     * Creates or updates a job definition.
     *
     * @param {string} dataServiceName The data service type of the job definition.
     *
     * @param {string} jobDefinitionName The job definition name to be created or
     * updated.
     *
     * @param {object} jobDefinition Job Definition object to be created or
     * updated.
     *
     * @param {string} jobDefinition.dataSourceId Data Source Id associated to the
     * job definition.
     *
     * @param {string} jobDefinition.dataSinkId Data Sink Id associated to the job
     * definition.
     *
     * @param {array} [jobDefinition.schedules] Schedule for running the job
     * definition
     *
     * @param {string} jobDefinition.state State of the job definition. Possible
     * values include: 'Disabled', 'Enabled', 'Supported'
     *
     * @param {date} [jobDefinition.lastModifiedTime] Last modified time of the job
     * definition.
     *
     * @param {string} [jobDefinition.runLocation] This is the preferred geo
     * location for the job to run. Possible values include: 'none',
     * 'australiaeast', 'australiasoutheast', 'brazilsouth', 'canadacentral',
     * 'canadaeast', 'centralindia', 'centralus', 'eastasia', 'eastus', 'eastus2',
     * 'japaneast', 'japanwest', 'koreacentral', 'koreasouth', 'southeastasia',
     * 'southcentralus', 'southindia', 'northcentralus', 'northeurope', 'uksouth',
     * 'ukwest', 'westcentralus', 'westeurope', 'westindia', 'westus', 'westus2'
     *
     * @param {string} [jobDefinition.userConfirmation] Enum to detect if user
     * confirmation is required. If not passed will default to NotRequired.
     * Possible values include: 'NotRequired', 'Required'
     *
     * @param {object} [jobDefinition.dataServiceInput] A generic json used
     * differently by each data service type.
     *
     * @param {array} [jobDefinition.customerSecrets] List of customer secrets
     * containing a key identifier and key value. The key identifier is a way for
     * the specific data source to understand the key. Value contains customer
     * secret encrypted by the encryptionKeys.
     *
     * @param {string} resourceGroupName The Resource Group Name
     *
     * @param {string} dataManagerName The name of the DataManager Resource within
     * the specified resource group. DataManager names must be between 3 and 24
     * characters in length and use any alphanumeric and underscore only
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {JobDefinition} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {JobDefinition} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link JobDefinition} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(dataServiceName: string, jobDefinitionName: string, jobDefinition: models.JobDefinition, resourceGroupName: string, dataManagerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.JobDefinition>;
    beginCreateOrUpdate(dataServiceName: string, jobDefinitionName: string, jobDefinition: models.JobDefinition, resourceGroupName: string, dataManagerName: string, callback: ServiceCallback<models.JobDefinition>): void;
    beginCreateOrUpdate(dataServiceName: string, jobDefinitionName: string, jobDefinition: models.JobDefinition, resourceGroupName: string, dataManagerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.JobDefinition>): void;


    /**
     * This method deletes the given job definition.
     *
     * @param {string} dataServiceName The data service type of the job definition.
     *
     * @param {string} jobDefinitionName The job definition name to be deleted.
     *
     * @param {string} resourceGroupName The Resource Group Name
     *
     * @param {string} dataManagerName The name of the DataManager Resource within
     * the specified resource group. DataManager names must be between 3 and 24
     * characters in length and use any alphanumeric and underscore only
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(dataServiceName: string, jobDefinitionName: string, resourceGroupName: string, dataManagerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * This method deletes the given job definition.
     *
     * @param {string} dataServiceName The data service type of the job definition.
     *
     * @param {string} jobDefinitionName The job definition name to be deleted.
     *
     * @param {string} resourceGroupName The Resource Group Name
     *
     * @param {string} dataManagerName The name of the DataManager Resource within
     * the specified resource group. DataManager names must be between 3 and 24
     * characters in length and use any alphanumeric and underscore only
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(dataServiceName: string, jobDefinitionName: string, resourceGroupName: string, dataManagerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(dataServiceName: string, jobDefinitionName: string, resourceGroupName: string, dataManagerName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(dataServiceName: string, jobDefinitionName: string, resourceGroupName: string, dataManagerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * This method runs a job instance of the given job definition.
     *
     * @param {string} dataServiceName The data service type of the job definition.
     *
     * @param {string} jobDefinitionName Name of the job definition.
     *
     * @param {object} runParameters Run time parameters for the job definition.
     *
     * @param {string} [runParameters.userConfirmation] Enum to detect if user
     * confirmation is required. If not passed will default to NotRequired.
     * Possible values include: 'NotRequired', 'Required'
     *
     * @param {object} [runParameters.dataServiceInput] A generic json used
     * differently by each data service type.
     *
     * @param {array} [runParameters.customerSecrets] List of customer secrets
     * containing a key identifier and key value. The key identifier is a way for
     * the specific data source to understand the key. Value contains customer
     * secret encrypted by the encryptionKeys.
     *
     * @param {string} resourceGroupName The Resource Group Name
     *
     * @param {string} dataManagerName The name of the DataManager Resource within
     * the specified resource group. DataManager names must be between 3 and 24
     * characters in length and use any alphanumeric and underscore only
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginRunWithHttpOperationResponse(dataServiceName: string, jobDefinitionName: string, runParameters: models.RunParameters, resourceGroupName: string, dataManagerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * This method runs a job instance of the given job definition.
     *
     * @param {string} dataServiceName The data service type of the job definition.
     *
     * @param {string} jobDefinitionName Name of the job definition.
     *
     * @param {object} runParameters Run time parameters for the job definition.
     *
     * @param {string} [runParameters.userConfirmation] Enum to detect if user
     * confirmation is required. If not passed will default to NotRequired.
     * Possible values include: 'NotRequired', 'Required'
     *
     * @param {object} [runParameters.dataServiceInput] A generic json used
     * differently by each data service type.
     *
     * @param {array} [runParameters.customerSecrets] List of customer secrets
     * containing a key identifier and key value. The key identifier is a way for
     * the specific data source to understand the key. Value contains customer
     * secret encrypted by the encryptionKeys.
     *
     * @param {string} resourceGroupName The Resource Group Name
     *
     * @param {string} dataManagerName The name of the DataManager Resource within
     * the specified resource group. DataManager names must be between 3 and 24
     * characters in length and use any alphanumeric and underscore only
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginRun(dataServiceName: string, jobDefinitionName: string, runParameters: models.RunParameters, resourceGroupName: string, dataManagerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginRun(dataServiceName: string, jobDefinitionName: string, runParameters: models.RunParameters, resourceGroupName: string, dataManagerName: string, callback: ServiceCallback<void>): void;
    beginRun(dataServiceName: string, jobDefinitionName: string, runParameters: models.RunParameters, resourceGroupName: string, dataManagerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * This method gets all the job definitions of the given data service name.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<JobDefinitionList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByDataServiceNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.JobDefinitionList>>;

    /**
     * This method gets all the job definitions of the given data service name.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {JobDefinitionList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {JobDefinitionList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link JobDefinitionList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByDataServiceNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.JobDefinitionList>;
    listByDataServiceNext(nextPageLink: string, callback: ServiceCallback<models.JobDefinitionList>): void;
    listByDataServiceNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.JobDefinitionList>): void;


    /**
     * This method gets all the job definitions of the given data manager resource.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<JobDefinitionList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByDataManagerNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.JobDefinitionList>>;

    /**
     * This method gets all the job definitions of the given data manager resource.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {JobDefinitionList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {JobDefinitionList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link JobDefinitionList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByDataManagerNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.JobDefinitionList>;
    listByDataManagerNext(nextPageLink: string, callback: ServiceCallback<models.JobDefinitionList>): void;
    listByDataManagerNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.JobDefinitionList>): void;
}

/**
 * @class
 * Jobs
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the HybridDataManagementClient.
 */
export interface Jobs {


    /**
     * This method gets all the jobs of a given job definition.
     *
     * @param {string} dataServiceName The name of the data service of the job
     * definition.
     *
     * @param {string} jobDefinitionName The name of the job definition for which
     * jobs are needed.
     *
     * @param {string} resourceGroupName The Resource Group Name
     *
     * @param {string} dataManagerName The name of the DataManager Resource within
     * the specified resource group. DataManager names must be between 3 and 24
     * characters in length and use any alphanumeric and underscore only
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] OData Filter options
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<JobList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByJobDefinitionWithHttpOperationResponse(dataServiceName: string, jobDefinitionName: string, resourceGroupName: string, dataManagerName: string, options?: { filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.JobList>>;

    /**
     * This method gets all the jobs of a given job definition.
     *
     * @param {string} dataServiceName The name of the data service of the job
     * definition.
     *
     * @param {string} jobDefinitionName The name of the job definition for which
     * jobs are needed.
     *
     * @param {string} resourceGroupName The Resource Group Name
     *
     * @param {string} dataManagerName The name of the DataManager Resource within
     * the specified resource group. DataManager names must be between 3 and 24
     * characters in length and use any alphanumeric and underscore only
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] OData Filter options
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {JobList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {JobList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link JobList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByJobDefinition(dataServiceName: string, jobDefinitionName: string, resourceGroupName: string, dataManagerName: string, options?: { filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.JobList>;
    listByJobDefinition(dataServiceName: string, jobDefinitionName: string, resourceGroupName: string, dataManagerName: string, callback: ServiceCallback<models.JobList>): void;
    listByJobDefinition(dataServiceName: string, jobDefinitionName: string, resourceGroupName: string, dataManagerName: string, options: { filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.JobList>): void;


    /**
     * This method gets a data manager job given the jobId.
     *
     * @param {string} dataServiceName The name of the data service of the job
     * definition.
     *
     * @param {string} jobDefinitionName The name of the job definition of the job.
     *
     * @param {string} jobId The job id of the job queried.
     *
     * @param {string} resourceGroupName The Resource Group Name
     *
     * @param {string} dataManagerName The name of the DataManager Resource within
     * the specified resource group. DataManager names must be between 3 and 24
     * characters in length and use any alphanumeric and underscore only
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] $expand is supported on details parameter
     * for job, which provides details on the job stages.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Job>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(dataServiceName: string, jobDefinitionName: string, jobId: string, resourceGroupName: string, dataManagerName: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Job>>;

    /**
     * This method gets a data manager job given the jobId.
     *
     * @param {string} dataServiceName The name of the data service of the job
     * definition.
     *
     * @param {string} jobDefinitionName The name of the job definition of the job.
     *
     * @param {string} jobId The job id of the job queried.
     *
     * @param {string} resourceGroupName The Resource Group Name
     *
     * @param {string} dataManagerName The name of the DataManager Resource within
     * the specified resource group. DataManager names must be between 3 and 24
     * characters in length and use any alphanumeric and underscore only
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] $expand is supported on details parameter
     * for job, which provides details on the job stages.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Job} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Job} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Job} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(dataServiceName: string, jobDefinitionName: string, jobId: string, resourceGroupName: string, dataManagerName: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.Job>;
    get(dataServiceName: string, jobDefinitionName: string, jobId: string, resourceGroupName: string, dataManagerName: string, callback: ServiceCallback<models.Job>): void;
    get(dataServiceName: string, jobDefinitionName: string, jobId: string, resourceGroupName: string, dataManagerName: string, options: { expand? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Job>): void;


    /**
     * Cancels the given job.
     *
     * @param {string} dataServiceName The name of the data service of the job
     * definition.
     *
     * @param {string} jobDefinitionName The name of the job definition of the job.
     *
     * @param {string} jobId The job id of the job queried.
     *
     * @param {string} resourceGroupName The Resource Group Name
     *
     * @param {string} dataManagerName The name of the DataManager Resource within
     * the specified resource group. DataManager names must be between 3 and 24
     * characters in length and use any alphanumeric and underscore only
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    cancelWithHttpOperationResponse(dataServiceName: string, jobDefinitionName: string, jobId: string, resourceGroupName: string, dataManagerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Cancels the given job.
     *
     * @param {string} dataServiceName The name of the data service of the job
     * definition.
     *
     * @param {string} jobDefinitionName The name of the job definition of the job.
     *
     * @param {string} jobId The job id of the job queried.
     *
     * @param {string} resourceGroupName The Resource Group Name
     *
     * @param {string} dataManagerName The name of the DataManager Resource within
     * the specified resource group. DataManager names must be between 3 and 24
     * characters in length and use any alphanumeric and underscore only
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    cancel(dataServiceName: string, jobDefinitionName: string, jobId: string, resourceGroupName: string, dataManagerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    cancel(dataServiceName: string, jobDefinitionName: string, jobId: string, resourceGroupName: string, dataManagerName: string, callback: ServiceCallback<void>): void;
    cancel(dataServiceName: string, jobDefinitionName: string, jobId: string, resourceGroupName: string, dataManagerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Resumes the given job.
     *
     * @param {string} dataServiceName The name of the data service of the job
     * definition.
     *
     * @param {string} jobDefinitionName The name of the job definition of the job.
     *
     * @param {string} jobId The job id of the job queried.
     *
     * @param {string} resourceGroupName The Resource Group Name
     *
     * @param {string} dataManagerName The name of the DataManager Resource within
     * the specified resource group. DataManager names must be between 3 and 24
     * characters in length and use any alphanumeric and underscore only
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    resumeWithHttpOperationResponse(dataServiceName: string, jobDefinitionName: string, jobId: string, resourceGroupName: string, dataManagerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Resumes the given job.
     *
     * @param {string} dataServiceName The name of the data service of the job
     * definition.
     *
     * @param {string} jobDefinitionName The name of the job definition of the job.
     *
     * @param {string} jobId The job id of the job queried.
     *
     * @param {string} resourceGroupName The Resource Group Name
     *
     * @param {string} dataManagerName The name of the DataManager Resource within
     * the specified resource group. DataManager names must be between 3 and 24
     * characters in length and use any alphanumeric and underscore only
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    resume(dataServiceName: string, jobDefinitionName: string, jobId: string, resourceGroupName: string, dataManagerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    resume(dataServiceName: string, jobDefinitionName: string, jobId: string, resourceGroupName: string, dataManagerName: string, callback: ServiceCallback<void>): void;
    resume(dataServiceName: string, jobDefinitionName: string, jobId: string, resourceGroupName: string, dataManagerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * This method gets all the jobs of a data service type in a given resource.
     *
     * @param {string} dataServiceName The name of the data service of interest.
     *
     * @param {string} resourceGroupName The Resource Group Name
     *
     * @param {string} dataManagerName The name of the DataManager Resource within
     * the specified resource group. DataManager names must be between 3 and 24
     * characters in length and use any alphanumeric and underscore only
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] OData Filter options
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<JobList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByDataServiceWithHttpOperationResponse(dataServiceName: string, resourceGroupName: string, dataManagerName: string, options?: { filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.JobList>>;

    /**
     * This method gets all the jobs of a data service type in a given resource.
     *
     * @param {string} dataServiceName The name of the data service of interest.
     *
     * @param {string} resourceGroupName The Resource Group Name
     *
     * @param {string} dataManagerName The name of the DataManager Resource within
     * the specified resource group. DataManager names must be between 3 and 24
     * characters in length and use any alphanumeric and underscore only
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] OData Filter options
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {JobList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {JobList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link JobList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByDataService(dataServiceName: string, resourceGroupName: string, dataManagerName: string, options?: { filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.JobList>;
    listByDataService(dataServiceName: string, resourceGroupName: string, dataManagerName: string, callback: ServiceCallback<models.JobList>): void;
    listByDataService(dataServiceName: string, resourceGroupName: string, dataManagerName: string, options: { filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.JobList>): void;


    /**
     * This method gets all the jobs at the data manager resource level.
     *
     * @param {string} resourceGroupName The Resource Group Name
     *
     * @param {string} dataManagerName The name of the DataManager Resource within
     * the specified resource group. DataManager names must be between 3 and 24
     * characters in length and use any alphanumeric and underscore only
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] OData Filter options
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<JobList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByDataManagerWithHttpOperationResponse(resourceGroupName: string, dataManagerName: string, options?: { filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.JobList>>;

    /**
     * This method gets all the jobs at the data manager resource level.
     *
     * @param {string} resourceGroupName The Resource Group Name
     *
     * @param {string} dataManagerName The name of the DataManager Resource within
     * the specified resource group. DataManager names must be between 3 and 24
     * characters in length and use any alphanumeric and underscore only
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] OData Filter options
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {JobList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {JobList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link JobList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByDataManager(resourceGroupName: string, dataManagerName: string, options?: { filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.JobList>;
    listByDataManager(resourceGroupName: string, dataManagerName: string, callback: ServiceCallback<models.JobList>): void;
    listByDataManager(resourceGroupName: string, dataManagerName: string, options: { filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.JobList>): void;


    /**
     * Cancels the given job.
     *
     * @param {string} dataServiceName The name of the data service of the job
     * definition.
     *
     * @param {string} jobDefinitionName The name of the job definition of the job.
     *
     * @param {string} jobId The job id of the job queried.
     *
     * @param {string} resourceGroupName The Resource Group Name
     *
     * @param {string} dataManagerName The name of the DataManager Resource within
     * the specified resource group. DataManager names must be between 3 and 24
     * characters in length and use any alphanumeric and underscore only
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCancelWithHttpOperationResponse(dataServiceName: string, jobDefinitionName: string, jobId: string, resourceGroupName: string, dataManagerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Cancels the given job.
     *
     * @param {string} dataServiceName The name of the data service of the job
     * definition.
     *
     * @param {string} jobDefinitionName The name of the job definition of the job.
     *
     * @param {string} jobId The job id of the job queried.
     *
     * @param {string} resourceGroupName The Resource Group Name
     *
     * @param {string} dataManagerName The name of the DataManager Resource within
     * the specified resource group. DataManager names must be between 3 and 24
     * characters in length and use any alphanumeric and underscore only
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCancel(dataServiceName: string, jobDefinitionName: string, jobId: string, resourceGroupName: string, dataManagerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginCancel(dataServiceName: string, jobDefinitionName: string, jobId: string, resourceGroupName: string, dataManagerName: string, callback: ServiceCallback<void>): void;
    beginCancel(dataServiceName: string, jobDefinitionName: string, jobId: string, resourceGroupName: string, dataManagerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Resumes the given job.
     *
     * @param {string} dataServiceName The name of the data service of the job
     * definition.
     *
     * @param {string} jobDefinitionName The name of the job definition of the job.
     *
     * @param {string} jobId The job id of the job queried.
     *
     * @param {string} resourceGroupName The Resource Group Name
     *
     * @param {string} dataManagerName The name of the DataManager Resource within
     * the specified resource group. DataManager names must be between 3 and 24
     * characters in length and use any alphanumeric and underscore only
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginResumeWithHttpOperationResponse(dataServiceName: string, jobDefinitionName: string, jobId: string, resourceGroupName: string, dataManagerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Resumes the given job.
     *
     * @param {string} dataServiceName The name of the data service of the job
     * definition.
     *
     * @param {string} jobDefinitionName The name of the job definition of the job.
     *
     * @param {string} jobId The job id of the job queried.
     *
     * @param {string} resourceGroupName The Resource Group Name
     *
     * @param {string} dataManagerName The name of the DataManager Resource within
     * the specified resource group. DataManager names must be between 3 and 24
     * characters in length and use any alphanumeric and underscore only
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginResume(dataServiceName: string, jobDefinitionName: string, jobId: string, resourceGroupName: string, dataManagerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginResume(dataServiceName: string, jobDefinitionName: string, jobId: string, resourceGroupName: string, dataManagerName: string, callback: ServiceCallback<void>): void;
    beginResume(dataServiceName: string, jobDefinitionName: string, jobId: string, resourceGroupName: string, dataManagerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * This method gets all the jobs of a given job definition.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<JobList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByJobDefinitionNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.JobList>>;

    /**
     * This method gets all the jobs of a given job definition.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {JobList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {JobList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link JobList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByJobDefinitionNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.JobList>;
    listByJobDefinitionNext(nextPageLink: string, callback: ServiceCallback<models.JobList>): void;
    listByJobDefinitionNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.JobList>): void;


    /**
     * This method gets all the jobs of a data service type in a given resource.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<JobList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByDataServiceNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.JobList>>;

    /**
     * This method gets all the jobs of a data service type in a given resource.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {JobList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {JobList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link JobList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByDataServiceNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.JobList>;
    listByDataServiceNext(nextPageLink: string, callback: ServiceCallback<models.JobList>): void;
    listByDataServiceNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.JobList>): void;


    /**
     * This method gets all the jobs at the data manager resource level.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<JobList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByDataManagerNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.JobList>>;

    /**
     * This method gets all the jobs at the data manager resource level.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {JobList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {JobList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link JobList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByDataManagerNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.JobList>;
    listByDataManagerNext(nextPageLink: string, callback: ServiceCallback<models.JobList>): void;
    listByDataManagerNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.JobList>): void;
}

/**
 * @class
 * DataStores
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the HybridDataManagementClient.
 */
export interface DataStores {


    /**
     * Gets all the data stores/repositories in the given resource.
     *
     * @param {string} resourceGroupName The Resource Group Name
     *
     * @param {string} dataManagerName The name of the DataManager Resource within
     * the specified resource group. DataManager names must be between 3 and 24
     * characters in length and use any alphanumeric and underscore only
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] OData Filter options
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DataStoreList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByDataManagerWithHttpOperationResponse(resourceGroupName: string, dataManagerName: string, options?: { filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DataStoreList>>;

    /**
     * Gets all the data stores/repositories in the given resource.
     *
     * @param {string} resourceGroupName The Resource Group Name
     *
     * @param {string} dataManagerName The name of the DataManager Resource within
     * the specified resource group. DataManager names must be between 3 and 24
     * characters in length and use any alphanumeric and underscore only
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] OData Filter options
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DataStoreList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DataStoreList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DataStoreList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByDataManager(resourceGroupName: string, dataManagerName: string, options?: { filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.DataStoreList>;
    listByDataManager(resourceGroupName: string, dataManagerName: string, callback: ServiceCallback<models.DataStoreList>): void;
    listByDataManager(resourceGroupName: string, dataManagerName: string, options: { filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DataStoreList>): void;


    /**
     * This method gets the data store/repository by name.
     *
     * @param {string} dataStoreName The data store/repository name queried.
     *
     * @param {string} resourceGroupName The Resource Group Name
     *
     * @param {string} dataManagerName The name of the DataManager Resource within
     * the specified resource group. DataManager names must be between 3 and 24
     * characters in length and use any alphanumeric and underscore only
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DataStore>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(dataStoreName: string, resourceGroupName: string, dataManagerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DataStore>>;

    /**
     * This method gets the data store/repository by name.
     *
     * @param {string} dataStoreName The data store/repository name queried.
     *
     * @param {string} resourceGroupName The Resource Group Name
     *
     * @param {string} dataManagerName The name of the DataManager Resource within
     * the specified resource group. DataManager names must be between 3 and 24
     * characters in length and use any alphanumeric and underscore only
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DataStore} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DataStore} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DataStore} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(dataStoreName: string, resourceGroupName: string, dataManagerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DataStore>;
    get(dataStoreName: string, resourceGroupName: string, dataManagerName: string, callback: ServiceCallback<models.DataStore>): void;
    get(dataStoreName: string, resourceGroupName: string, dataManagerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DataStore>): void;


    /**
     * Creates or updates the data store/repository in the data manager.
     *
     * @param {string} dataStoreName The data store/repository name to be created
     * or updated.
     *
     * @param {object} dataStore The data store/repository object to be created or
     * updated.
     *
     * @param {string} [dataStore.repositoryId] Arm Id for the manager resource to
     * which the data source is associated. This is optional.
     *
     * @param {string} dataStore.state State of the data source. Possible values
     * include: 'Disabled', 'Enabled', 'Supported'
     *
     * @param {object} [dataStore.extendedProperties] A generic json used
     * differently by each data source type.
     *
     * @param {string} dataStore.dataStoreTypeId The arm id of the data store type.
     *
     * @param {array} [dataStore.customerSecrets] List of customer secrets
     * containing a key identifier and key value. The key identifier is a way for
     * the specific data source to understand the key. Value contains customer
     * secret encrypted by the encryptionKeys.
     *
     * @param {string} resourceGroupName The Resource Group Name
     *
     * @param {string} dataManagerName The name of the DataManager Resource within
     * the specified resource group. DataManager names must be between 3 and 24
     * characters in length and use any alphanumeric and underscore only
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DataStore>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(dataStoreName: string, dataStore: models.DataStore, resourceGroupName: string, dataManagerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DataStore>>;

    /**
     * Creates or updates the data store/repository in the data manager.
     *
     * @param {string} dataStoreName The data store/repository name to be created
     * or updated.
     *
     * @param {object} dataStore The data store/repository object to be created or
     * updated.
     *
     * @param {string} [dataStore.repositoryId] Arm Id for the manager resource to
     * which the data source is associated. This is optional.
     *
     * @param {string} dataStore.state State of the data source. Possible values
     * include: 'Disabled', 'Enabled', 'Supported'
     *
     * @param {object} [dataStore.extendedProperties] A generic json used
     * differently by each data source type.
     *
     * @param {string} dataStore.dataStoreTypeId The arm id of the data store type.
     *
     * @param {array} [dataStore.customerSecrets] List of customer secrets
     * containing a key identifier and key value. The key identifier is a way for
     * the specific data source to understand the key. Value contains customer
     * secret encrypted by the encryptionKeys.
     *
     * @param {string} resourceGroupName The Resource Group Name
     *
     * @param {string} dataManagerName The name of the DataManager Resource within
     * the specified resource group. DataManager names must be between 3 and 24
     * characters in length and use any alphanumeric and underscore only
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DataStore} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DataStore} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DataStore} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(dataStoreName: string, dataStore: models.DataStore, resourceGroupName: string, dataManagerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DataStore>;
    createOrUpdate(dataStoreName: string, dataStore: models.DataStore, resourceGroupName: string, dataManagerName: string, callback: ServiceCallback<models.DataStore>): void;
    createOrUpdate(dataStoreName: string, dataStore: models.DataStore, resourceGroupName: string, dataManagerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DataStore>): void;


    /**
     * This method deletes the given data store/repository.
     *
     * @param {string} dataStoreName The data store/repository name to be deleted.
     *
     * @param {string} resourceGroupName The Resource Group Name
     *
     * @param {string} dataManagerName The name of the DataManager Resource within
     * the specified resource group. DataManager names must be between 3 and 24
     * characters in length and use any alphanumeric and underscore only
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(dataStoreName: string, resourceGroupName: string, dataManagerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * This method deletes the given data store/repository.
     *
     * @param {string} dataStoreName The data store/repository name to be deleted.
     *
     * @param {string} resourceGroupName The Resource Group Name
     *
     * @param {string} dataManagerName The name of the DataManager Resource within
     * the specified resource group. DataManager names must be between 3 and 24
     * characters in length and use any alphanumeric and underscore only
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(dataStoreName: string, resourceGroupName: string, dataManagerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(dataStoreName: string, resourceGroupName: string, dataManagerName: string, callback: ServiceCallback<void>): void;
    deleteMethod(dataStoreName: string, resourceGroupName: string, dataManagerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Creates or updates the data store/repository in the data manager.
     *
     * @param {string} dataStoreName The data store/repository name to be created
     * or updated.
     *
     * @param {object} dataStore The data store/repository object to be created or
     * updated.
     *
     * @param {string} [dataStore.repositoryId] Arm Id for the manager resource to
     * which the data source is associated. This is optional.
     *
     * @param {string} dataStore.state State of the data source. Possible values
     * include: 'Disabled', 'Enabled', 'Supported'
     *
     * @param {object} [dataStore.extendedProperties] A generic json used
     * differently by each data source type.
     *
     * @param {string} dataStore.dataStoreTypeId The arm id of the data store type.
     *
     * @param {array} [dataStore.customerSecrets] List of customer secrets
     * containing a key identifier and key value. The key identifier is a way for
     * the specific data source to understand the key. Value contains customer
     * secret encrypted by the encryptionKeys.
     *
     * @param {string} resourceGroupName The Resource Group Name
     *
     * @param {string} dataManagerName The name of the DataManager Resource within
     * the specified resource group. DataManager names must be between 3 and 24
     * characters in length and use any alphanumeric and underscore only
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DataStore>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(dataStoreName: string, dataStore: models.DataStore, resourceGroupName: string, dataManagerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DataStore>>;

    /**
     * Creates or updates the data store/repository in the data manager.
     *
     * @param {string} dataStoreName The data store/repository name to be created
     * or updated.
     *
     * @param {object} dataStore The data store/repository object to be created or
     * updated.
     *
     * @param {string} [dataStore.repositoryId] Arm Id for the manager resource to
     * which the data source is associated. This is optional.
     *
     * @param {string} dataStore.state State of the data source. Possible values
     * include: 'Disabled', 'Enabled', 'Supported'
     *
     * @param {object} [dataStore.extendedProperties] A generic json used
     * differently by each data source type.
     *
     * @param {string} dataStore.dataStoreTypeId The arm id of the data store type.
     *
     * @param {array} [dataStore.customerSecrets] List of customer secrets
     * containing a key identifier and key value. The key identifier is a way for
     * the specific data source to understand the key. Value contains customer
     * secret encrypted by the encryptionKeys.
     *
     * @param {string} resourceGroupName The Resource Group Name
     *
     * @param {string} dataManagerName The name of the DataManager Resource within
     * the specified resource group. DataManager names must be between 3 and 24
     * characters in length and use any alphanumeric and underscore only
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DataStore} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DataStore} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DataStore} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(dataStoreName: string, dataStore: models.DataStore, resourceGroupName: string, dataManagerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DataStore>;
    beginCreateOrUpdate(dataStoreName: string, dataStore: models.DataStore, resourceGroupName: string, dataManagerName: string, callback: ServiceCallback<models.DataStore>): void;
    beginCreateOrUpdate(dataStoreName: string, dataStore: models.DataStore, resourceGroupName: string, dataManagerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DataStore>): void;


    /**
     * This method deletes the given data store/repository.
     *
     * @param {string} dataStoreName The data store/repository name to be deleted.
     *
     * @param {string} resourceGroupName The Resource Group Name
     *
     * @param {string} dataManagerName The name of the DataManager Resource within
     * the specified resource group. DataManager names must be between 3 and 24
     * characters in length and use any alphanumeric and underscore only
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(dataStoreName: string, resourceGroupName: string, dataManagerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * This method deletes the given data store/repository.
     *
     * @param {string} dataStoreName The data store/repository name to be deleted.
     *
     * @param {string} resourceGroupName The Resource Group Name
     *
     * @param {string} dataManagerName The name of the DataManager Resource within
     * the specified resource group. DataManager names must be between 3 and 24
     * characters in length and use any alphanumeric and underscore only
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(dataStoreName: string, resourceGroupName: string, dataManagerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(dataStoreName: string, resourceGroupName: string, dataManagerName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(dataStoreName: string, resourceGroupName: string, dataManagerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets all the data stores/repositories in the given resource.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DataStoreList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByDataManagerNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DataStoreList>>;

    /**
     * Gets all the data stores/repositories in the given resource.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DataStoreList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DataStoreList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DataStoreList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByDataManagerNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DataStoreList>;
    listByDataManagerNext(nextPageLink: string, callback: ServiceCallback<models.DataStoreList>): void;
    listByDataManagerNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DataStoreList>): void;
}

/**
 * @class
 * DataStoreTypes
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the HybridDataManagementClient.
 */
export interface DataStoreTypes {


    /**
     * Gets all the data store/repository types that the resource supports.
     *
     * @param {string} resourceGroupName The Resource Group Name
     *
     * @param {string} dataManagerName The name of the DataManager Resource within
     * the specified resource group. DataManager names must be between 3 and 24
     * characters in length and use any alphanumeric and underscore only
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DataStoreTypeList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByDataManagerWithHttpOperationResponse(resourceGroupName: string, dataManagerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DataStoreTypeList>>;

    /**
     * Gets all the data store/repository types that the resource supports.
     *
     * @param {string} resourceGroupName The Resource Group Name
     *
     * @param {string} dataManagerName The name of the DataManager Resource within
     * the specified resource group. DataManager names must be between 3 and 24
     * characters in length and use any alphanumeric and underscore only
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DataStoreTypeList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DataStoreTypeList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DataStoreTypeList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByDataManager(resourceGroupName: string, dataManagerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DataStoreTypeList>;
    listByDataManager(resourceGroupName: string, dataManagerName: string, callback: ServiceCallback<models.DataStoreTypeList>): void;
    listByDataManager(resourceGroupName: string, dataManagerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DataStoreTypeList>): void;


    /**
     * Gets the data store/repository type given its name.
     *
     * @param {string} dataStoreTypeName The data store/repository type name for
     * which details are needed.
     *
     * @param {string} resourceGroupName The Resource Group Name
     *
     * @param {string} dataManagerName The name of the DataManager Resource within
     * the specified resource group. DataManager names must be between 3 and 24
     * characters in length and use any alphanumeric and underscore only
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DataStoreType>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(dataStoreTypeName: string, resourceGroupName: string, dataManagerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DataStoreType>>;

    /**
     * Gets the data store/repository type given its name.
     *
     * @param {string} dataStoreTypeName The data store/repository type name for
     * which details are needed.
     *
     * @param {string} resourceGroupName The Resource Group Name
     *
     * @param {string} dataManagerName The name of the DataManager Resource within
     * the specified resource group. DataManager names must be between 3 and 24
     * characters in length and use any alphanumeric and underscore only
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DataStoreType} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DataStoreType} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DataStoreType} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(dataStoreTypeName: string, resourceGroupName: string, dataManagerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DataStoreType>;
    get(dataStoreTypeName: string, resourceGroupName: string, dataManagerName: string, callback: ServiceCallback<models.DataStoreType>): void;
    get(dataStoreTypeName: string, resourceGroupName: string, dataManagerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DataStoreType>): void;


    /**
     * Gets all the data store/repository types that the resource supports.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DataStoreTypeList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByDataManagerNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DataStoreTypeList>>;

    /**
     * Gets all the data store/repository types that the resource supports.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DataStoreTypeList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DataStoreTypeList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DataStoreTypeList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByDataManagerNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DataStoreTypeList>;
    listByDataManagerNext(nextPageLink: string, callback: ServiceCallback<models.DataStoreTypeList>): void;
    listByDataManagerNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DataStoreTypeList>): void;
}

/**
 * @class
 * PublicKeys
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the HybridDataManagementClient.
 */
export interface PublicKeys {


    /**
     * This method gets the list view of public keys, however it will only have one
     * element.
     *
     * @param {string} resourceGroupName The Resource Group Name
     *
     * @param {string} dataManagerName The name of the DataManager Resource within
     * the specified resource group. DataManager names must be between 3 and 24
     * characters in length and use any alphanumeric and underscore only
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PublicKeyList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByDataManagerWithHttpOperationResponse(resourceGroupName: string, dataManagerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PublicKeyList>>;

    /**
     * This method gets the list view of public keys, however it will only have one
     * element.
     *
     * @param {string} resourceGroupName The Resource Group Name
     *
     * @param {string} dataManagerName The name of the DataManager Resource within
     * the specified resource group. DataManager names must be between 3 and 24
     * characters in length and use any alphanumeric and underscore only
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PublicKeyList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PublicKeyList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PublicKeyList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByDataManager(resourceGroupName: string, dataManagerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PublicKeyList>;
    listByDataManager(resourceGroupName: string, dataManagerName: string, callback: ServiceCallback<models.PublicKeyList>): void;
    listByDataManager(resourceGroupName: string, dataManagerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PublicKeyList>): void;


    /**
     * This method gets the public keys.
     *
     * @param {string} publicKeyName Name of the public key.
     *
     * @param {string} resourceGroupName The Resource Group Name
     *
     * @param {string} dataManagerName The name of the DataManager Resource within
     * the specified resource group. DataManager names must be between 3 and 24
     * characters in length and use any alphanumeric and underscore only
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PublicKey>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(publicKeyName: string, resourceGroupName: string, dataManagerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PublicKey>>;

    /**
     * This method gets the public keys.
     *
     * @param {string} publicKeyName Name of the public key.
     *
     * @param {string} resourceGroupName The Resource Group Name
     *
     * @param {string} dataManagerName The name of the DataManager Resource within
     * the specified resource group. DataManager names must be between 3 and 24
     * characters in length and use any alphanumeric and underscore only
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PublicKey} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PublicKey} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PublicKey} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(publicKeyName: string, resourceGroupName: string, dataManagerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PublicKey>;
    get(publicKeyName: string, resourceGroupName: string, dataManagerName: string, callback: ServiceCallback<models.PublicKey>): void;
    get(publicKeyName: string, resourceGroupName: string, dataManagerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PublicKey>): void;


    /**
     * This method gets the list view of public keys, however it will only have one
     * element.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PublicKeyList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByDataManagerNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PublicKeyList>>;

    /**
     * This method gets the list view of public keys, however it will only have one
     * element.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PublicKeyList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PublicKeyList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PublicKeyList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByDataManagerNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PublicKeyList>;
    listByDataManagerNext(nextPageLink: string, callback: ServiceCallback<models.PublicKeyList>): void;
    listByDataManagerNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PublicKeyList>): void;
}
