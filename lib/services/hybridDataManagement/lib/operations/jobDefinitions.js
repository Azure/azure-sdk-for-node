/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const msRest = require('ms-rest');
const msRestAzure = require('ms-rest-azure');
const WebResource = msRest.WebResource;

/**
 * This method gets all the job definitions of the given data service name.
 *
 * @param {string} dataServiceName The data service type of interest.
 *
 * @param {string} resourceGroupName The Resource Group Name
 *
 * @param {string} dataManagerName The name of the DataManager Resource within
 * the specified resource group. DataManager names must be between 3 and 24
 * characters in length and use any alphanumeric and underscore only
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {string} [options.filter] OData Filter options
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link JobDefinitionList} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _listByDataService(dataServiceName, resourceGroupName, dataManagerName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let filter = (options && options.filter !== undefined) ? options.filter : undefined;
  // Validate
  try {
    if (dataServiceName === null || dataServiceName === undefined || typeof dataServiceName.valueOf() !== 'string') {
      throw new Error('dataServiceName cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (dataManagerName === null || dataManagerName === undefined || typeof dataManagerName.valueOf() !== 'string') {
      throw new Error('dataManagerName cannot be null or undefined and it must be of type string.');
    }
    if (dataManagerName !== null && dataManagerName !== undefined) {
      if (dataManagerName.length > 24)
      {
        throw new Error('"dataManagerName" should satisfy the constraint - "MaxLength": 24');
      }
      if (dataManagerName.length < 3)
      {
        throw new Error('"dataManagerName" should satisfy the constraint - "MinLength": 3');
      }
      if (dataManagerName.match(/^[-\w\.]+$/) === null)
      {
        throw new Error('"dataManagerName" should satisfy the constraint - "Pattern": /^[-\w\.]+$/');
      }
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (filter !== null && filter !== undefined && typeof filter.valueOf() !== 'string') {
      throw new Error('filter must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataServices/{dataServiceName}/jobDefinitions';
  requestUrl = requestUrl.replace('{dataServiceName}', encodeURIComponent(dataServiceName));
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{dataManagerName}', encodeURIComponent(dataManagerName));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (filter !== null && filter !== undefined) {
    queryParameters.push('$filter=' + encodeURIComponent(filter));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['JobDefinitionList']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * This method gets job definition object by name.
 *
 * @param {string} dataServiceName The data service name of the job definition
 *
 * @param {string} jobDefinitionName The job definition name that is being
 * queried.
 *
 * @param {string} resourceGroupName The Resource Group Name
 *
 * @param {string} dataManagerName The name of the DataManager Resource within
 * the specified resource group. DataManager names must be between 3 and 24
 * characters in length and use any alphanumeric and underscore only
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link JobDefinition} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _get(dataServiceName, jobDefinitionName, resourceGroupName, dataManagerName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (dataServiceName === null || dataServiceName === undefined || typeof dataServiceName.valueOf() !== 'string') {
      throw new Error('dataServiceName cannot be null or undefined and it must be of type string.');
    }
    if (jobDefinitionName === null || jobDefinitionName === undefined || typeof jobDefinitionName.valueOf() !== 'string') {
      throw new Error('jobDefinitionName cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (dataManagerName === null || dataManagerName === undefined || typeof dataManagerName.valueOf() !== 'string') {
      throw new Error('dataManagerName cannot be null or undefined and it must be of type string.');
    }
    if (dataManagerName !== null && dataManagerName !== undefined) {
      if (dataManagerName.length > 24)
      {
        throw new Error('"dataManagerName" should satisfy the constraint - "MaxLength": 24');
      }
      if (dataManagerName.length < 3)
      {
        throw new Error('"dataManagerName" should satisfy the constraint - "MinLength": 3');
      }
      if (dataManagerName.match(/^[-\w\.]+$/) === null)
      {
        throw new Error('"dataManagerName" should satisfy the constraint - "Pattern": /^[-\w\.]+$/');
      }
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataServices/{dataServiceName}/jobDefinitions/{jobDefinitionName}';
  requestUrl = requestUrl.replace('{dataServiceName}', encodeURIComponent(dataServiceName));
  requestUrl = requestUrl.replace('{jobDefinitionName}', encodeURIComponent(jobDefinitionName));
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{dataManagerName}', encodeURIComponent(dataManagerName));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['JobDefinition']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}


/**
 * Creates or updates a job definition.
 *
 * @param {string} dataServiceName The data service type of the job definition.
 *
 * @param {string} jobDefinitionName The job definition name to be created or
 * updated.
 *
 * @param {object} jobDefinition Job Definition object to be created or
 * updated.
 *
 * @param {string} jobDefinition.dataSourceId Data Source Id associated to the
 * job definition.
 *
 * @param {string} jobDefinition.dataSinkId Data Sink Id associated to the job
 * definition.
 *
 * @param {array} [jobDefinition.schedules] Schedule for running the job
 * definition
 *
 * @param {string} jobDefinition.state State of the job definition. Possible
 * values include: 'Disabled', 'Enabled', 'Supported'
 *
 * @param {date} [jobDefinition.lastModifiedTime] Last modified time of the job
 * definition.
 *
 * @param {string} [jobDefinition.runLocation] This is the preferred geo
 * location for the job to run. Possible values include: 'none',
 * 'australiaeast', 'australiasoutheast', 'brazilsouth', 'canadacentral',
 * 'canadaeast', 'centralindia', 'centralus', 'eastasia', 'eastus', 'eastus2',
 * 'japaneast', 'japanwest', 'koreacentral', 'koreasouth', 'southeastasia',
 * 'southcentralus', 'southindia', 'northcentralus', 'northeurope', 'uksouth',
 * 'ukwest', 'westcentralus', 'westeurope', 'westindia', 'westus', 'westus2'
 *
 * @param {string} [jobDefinition.userConfirmation] Enum to detect if user
 * confirmation is required. If not passed will default to NotRequired.
 * Possible values include: 'NotRequired', 'Required'
 *
 * @param {object} [jobDefinition.dataServiceInput] A generic json used
 * differently by each data service type.
 *
 * @param {array} [jobDefinition.customerSecrets] List of customer secrets
 * containing a key identifier and key value. The key identifier is a way for
 * the specific data source to understand the key. Value contains customer
 * secret encrypted by the encryptionKeys.
 *
 * @param {string} resourceGroupName The Resource Group Name
 *
 * @param {string} dataManagerName The name of the DataManager Resource within
 * the specified resource group. DataManager names must be between 3 and 24
 * characters in length and use any alphanumeric and underscore only
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link JobDefinition} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _createOrUpdate(dataServiceName, jobDefinitionName, jobDefinition, resourceGroupName, dataManagerName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }

  if (!callback) {
    throw new Error('callback cannot be null.');
  }

  // Send request
  this.beginCreateOrUpdate(dataServiceName, jobDefinitionName, jobDefinition, resourceGroupName, dataManagerName, options, (err, parsedResult, httpRequest, response) => {
    if (err) return callback(err);

    let initialResult = new msRest.HttpOperationResponse();
    initialResult.request = httpRequest;
    initialResult.response = response;
    initialResult.body = response.body;
    client.getLongRunningOperationResult(initialResult, options, (err, pollingResult) => {
      if (err) return callback(err);

      // Create Result
      let result = null;

      httpRequest = pollingResult.request;
      response = pollingResult.response;
      let responseBody = pollingResult.body;
      if (responseBody === '') responseBody = null;

      // Deserialize Response
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['JobDefinition']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }

      return callback(null, result, httpRequest, response);
    });
  });
}


/**
 * This method deletes the given job definition.
 *
 * @param {string} dataServiceName The data service type of the job definition.
 *
 * @param {string} jobDefinitionName The job definition name to be deleted.
 *
 * @param {string} resourceGroupName The Resource Group Name
 *
 * @param {string} dataManagerName The name of the DataManager Resource within
 * the specified resource group. DataManager names must be between 3 and 24
 * characters in length and use any alphanumeric and underscore only
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _deleteMethod(dataServiceName, jobDefinitionName, resourceGroupName, dataManagerName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }

  if (!callback) {
    throw new Error('callback cannot be null.');
  }

  // Send request
  this.beginDeleteMethod(dataServiceName, jobDefinitionName, resourceGroupName, dataManagerName, options, (err, parsedResult, httpRequest, response) => {
    if (err) return callback(err);

    let initialResult = new msRest.HttpOperationResponse();
    initialResult.request = httpRequest;
    initialResult.response = response;
    initialResult.body = response.body;
    client.getLongRunningOperationResult(initialResult, options, (err, pollingResult) => {
      if (err) return callback(err);

      // Create Result
      let result = null;

      httpRequest = pollingResult.request;
      response = pollingResult.response;
      let responseBody = pollingResult.body;
      if (responseBody === '') responseBody = null;

      // Deserialize Response

      return callback(null, result, httpRequest, response);
    });
  });
}


/**
 * This method runs a job instance of the given job definition.
 *
 * @param {string} dataServiceName The data service type of the job definition.
 *
 * @param {string} jobDefinitionName Name of the job definition.
 *
 * @param {object} runParameters Run time parameters for the job definition.
 *
 * @param {string} [runParameters.userConfirmation] Enum to detect if user
 * confirmation is required. If not passed will default to NotRequired.
 * Possible values include: 'NotRequired', 'Required'
 *
 * @param {object} [runParameters.dataServiceInput] A generic json used
 * differently by each data service type.
 *
 * @param {array} [runParameters.customerSecrets] List of customer secrets
 * containing a key identifier and key value. The key identifier is a way for
 * the specific data source to understand the key. Value contains customer
 * secret encrypted by the encryptionKeys.
 *
 * @param {string} resourceGroupName The Resource Group Name
 *
 * @param {string} dataManagerName The name of the DataManager Resource within
 * the specified resource group. DataManager names must be between 3 and 24
 * characters in length and use any alphanumeric and underscore only
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _run(dataServiceName, jobDefinitionName, runParameters, resourceGroupName, dataManagerName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }

  if (!callback) {
    throw new Error('callback cannot be null.');
  }

  // Send request
  this.beginRun(dataServiceName, jobDefinitionName, runParameters, resourceGroupName, dataManagerName, options, (err, parsedResult, httpRequest, response) => {
    if (err) return callback(err);

    let initialResult = new msRest.HttpOperationResponse();
    initialResult.request = httpRequest;
    initialResult.response = response;
    initialResult.body = response.body;
    client.getLongRunningOperationResult(initialResult, options, (err, pollingResult) => {
      if (err) return callback(err);

      // Create Result
      let result = null;

      httpRequest = pollingResult.request;
      response = pollingResult.response;
      let responseBody = pollingResult.body;
      if (responseBody === '') responseBody = null;

      // Deserialize Response

      return callback(null, result, httpRequest, response);
    });
  });
}

/**
 * This method gets all the job definitions of the given data manager resource.
 *
 * @param {string} resourceGroupName The Resource Group Name
 *
 * @param {string} dataManagerName The name of the DataManager Resource within
 * the specified resource group. DataManager names must be between 3 and 24
 * characters in length and use any alphanumeric and underscore only
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {string} [options.filter] OData Filter options
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link JobDefinitionList} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _listByDataManager(resourceGroupName, dataManagerName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let filter = (options && options.filter !== undefined) ? options.filter : undefined;
  // Validate
  try {
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (dataManagerName === null || dataManagerName === undefined || typeof dataManagerName.valueOf() !== 'string') {
      throw new Error('dataManagerName cannot be null or undefined and it must be of type string.');
    }
    if (dataManagerName !== null && dataManagerName !== undefined) {
      if (dataManagerName.length > 24)
      {
        throw new Error('"dataManagerName" should satisfy the constraint - "MaxLength": 24');
      }
      if (dataManagerName.length < 3)
      {
        throw new Error('"dataManagerName" should satisfy the constraint - "MinLength": 3');
      }
      if (dataManagerName.match(/^[-\w\.]+$/) === null)
      {
        throw new Error('"dataManagerName" should satisfy the constraint - "Pattern": /^[-\w\.]+$/');
      }
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (filter !== null && filter !== undefined && typeof filter.valueOf() !== 'string') {
      throw new Error('filter must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/jobDefinitions';
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{dataManagerName}', encodeURIComponent(dataManagerName));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (filter !== null && filter !== undefined) {
    queryParameters.push('$filter=' + encodeURIComponent(filter));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['JobDefinitionList']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Creates or updates a job definition.
 *
 * @param {string} dataServiceName The data service type of the job definition.
 *
 * @param {string} jobDefinitionName The job definition name to be created or
 * updated.
 *
 * @param {object} jobDefinition Job Definition object to be created or
 * updated.
 *
 * @param {string} jobDefinition.dataSourceId Data Source Id associated to the
 * job definition.
 *
 * @param {string} jobDefinition.dataSinkId Data Sink Id associated to the job
 * definition.
 *
 * @param {array} [jobDefinition.schedules] Schedule for running the job
 * definition
 *
 * @param {string} jobDefinition.state State of the job definition. Possible
 * values include: 'Disabled', 'Enabled', 'Supported'
 *
 * @param {date} [jobDefinition.lastModifiedTime] Last modified time of the job
 * definition.
 *
 * @param {string} [jobDefinition.runLocation] This is the preferred geo
 * location for the job to run. Possible values include: 'none',
 * 'australiaeast', 'australiasoutheast', 'brazilsouth', 'canadacentral',
 * 'canadaeast', 'centralindia', 'centralus', 'eastasia', 'eastus', 'eastus2',
 * 'japaneast', 'japanwest', 'koreacentral', 'koreasouth', 'southeastasia',
 * 'southcentralus', 'southindia', 'northcentralus', 'northeurope', 'uksouth',
 * 'ukwest', 'westcentralus', 'westeurope', 'westindia', 'westus', 'westus2'
 *
 * @param {string} [jobDefinition.userConfirmation] Enum to detect if user
 * confirmation is required. If not passed will default to NotRequired.
 * Possible values include: 'NotRequired', 'Required'
 *
 * @param {object} [jobDefinition.dataServiceInput] A generic json used
 * differently by each data service type.
 *
 * @param {array} [jobDefinition.customerSecrets] List of customer secrets
 * containing a key identifier and key value. The key identifier is a way for
 * the specific data source to understand the key. Value contains customer
 * secret encrypted by the encryptionKeys.
 *
 * @param {string} resourceGroupName The Resource Group Name
 *
 * @param {string} dataManagerName The name of the DataManager Resource within
 * the specified resource group. DataManager names must be between 3 and 24
 * characters in length and use any alphanumeric and underscore only
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link JobDefinition} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _beginCreateOrUpdate(dataServiceName, jobDefinitionName, jobDefinition, resourceGroupName, dataManagerName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (dataServiceName === null || dataServiceName === undefined || typeof dataServiceName.valueOf() !== 'string') {
      throw new Error('dataServiceName cannot be null or undefined and it must be of type string.');
    }
    if (jobDefinitionName === null || jobDefinitionName === undefined || typeof jobDefinitionName.valueOf() !== 'string') {
      throw new Error('jobDefinitionName cannot be null or undefined and it must be of type string.');
    }
    if (jobDefinition === null || jobDefinition === undefined) {
      throw new Error('jobDefinition cannot be null or undefined.');
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (dataManagerName === null || dataManagerName === undefined || typeof dataManagerName.valueOf() !== 'string') {
      throw new Error('dataManagerName cannot be null or undefined and it must be of type string.');
    }
    if (dataManagerName !== null && dataManagerName !== undefined) {
      if (dataManagerName.length > 24)
      {
        throw new Error('"dataManagerName" should satisfy the constraint - "MaxLength": 24');
      }
      if (dataManagerName.length < 3)
      {
        throw new Error('"dataManagerName" should satisfy the constraint - "MinLength": 3');
      }
      if (dataManagerName.match(/^[-\w\.]+$/) === null)
      {
        throw new Error('"dataManagerName" should satisfy the constraint - "Pattern": /^[-\w\.]+$/');
      }
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataServices/{dataServiceName}/jobDefinitions/{jobDefinitionName}';
  requestUrl = requestUrl.replace('{dataServiceName}', encodeURIComponent(dataServiceName));
  requestUrl = requestUrl.replace('{jobDefinitionName}', encodeURIComponent(jobDefinitionName));
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{dataManagerName}', encodeURIComponent(dataManagerName));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PUT';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (jobDefinition !== null && jobDefinition !== undefined) {
      let requestModelMapper = new client.models['JobDefinition']().mapper();
      requestModel = client.serialize(requestModelMapper, jobDefinition, 'jobDefinition');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(jobDefinition, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200 && statusCode !== 202) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['JobDefinition']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * This method deletes the given job definition.
 *
 * @param {string} dataServiceName The data service type of the job definition.
 *
 * @param {string} jobDefinitionName The job definition name to be deleted.
 *
 * @param {string} resourceGroupName The Resource Group Name
 *
 * @param {string} dataManagerName The name of the DataManager Resource within
 * the specified resource group. DataManager names must be between 3 and 24
 * characters in length and use any alphanumeric and underscore only
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _beginDeleteMethod(dataServiceName, jobDefinitionName, resourceGroupName, dataManagerName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (dataServiceName === null || dataServiceName === undefined || typeof dataServiceName.valueOf() !== 'string') {
      throw new Error('dataServiceName cannot be null or undefined and it must be of type string.');
    }
    if (jobDefinitionName === null || jobDefinitionName === undefined || typeof jobDefinitionName.valueOf() !== 'string') {
      throw new Error('jobDefinitionName cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (dataManagerName === null || dataManagerName === undefined || typeof dataManagerName.valueOf() !== 'string') {
      throw new Error('dataManagerName cannot be null or undefined and it must be of type string.');
    }
    if (dataManagerName !== null && dataManagerName !== undefined) {
      if (dataManagerName.length > 24)
      {
        throw new Error('"dataManagerName" should satisfy the constraint - "MaxLength": 24');
      }
      if (dataManagerName.length < 3)
      {
        throw new Error('"dataManagerName" should satisfy the constraint - "MinLength": 3');
      }
      if (dataManagerName.match(/^[-\w\.]+$/) === null)
      {
        throw new Error('"dataManagerName" should satisfy the constraint - "Pattern": /^[-\w\.]+$/');
      }
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataServices/{dataServiceName}/jobDefinitions/{jobDefinitionName}';
  requestUrl = requestUrl.replace('{dataServiceName}', encodeURIComponent(dataServiceName));
  requestUrl = requestUrl.replace('{jobDefinitionName}', encodeURIComponent(jobDefinitionName));
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{dataManagerName}', encodeURIComponent(dataManagerName));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'DELETE';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 202 && statusCode !== 204) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * This method runs a job instance of the given job definition.
 *
 * @param {string} dataServiceName The data service type of the job definition.
 *
 * @param {string} jobDefinitionName Name of the job definition.
 *
 * @param {object} runParameters Run time parameters for the job definition.
 *
 * @param {string} [runParameters.userConfirmation] Enum to detect if user
 * confirmation is required. If not passed will default to NotRequired.
 * Possible values include: 'NotRequired', 'Required'
 *
 * @param {object} [runParameters.dataServiceInput] A generic json used
 * differently by each data service type.
 *
 * @param {array} [runParameters.customerSecrets] List of customer secrets
 * containing a key identifier and key value. The key identifier is a way for
 * the specific data source to understand the key. Value contains customer
 * secret encrypted by the encryptionKeys.
 *
 * @param {string} resourceGroupName The Resource Group Name
 *
 * @param {string} dataManagerName The name of the DataManager Resource within
 * the specified resource group. DataManager names must be between 3 and 24
 * characters in length and use any alphanumeric and underscore only
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _beginRun(dataServiceName, jobDefinitionName, runParameters, resourceGroupName, dataManagerName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (dataServiceName === null || dataServiceName === undefined || typeof dataServiceName.valueOf() !== 'string') {
      throw new Error('dataServiceName cannot be null or undefined and it must be of type string.');
    }
    if (jobDefinitionName === null || jobDefinitionName === undefined || typeof jobDefinitionName.valueOf() !== 'string') {
      throw new Error('jobDefinitionName cannot be null or undefined and it must be of type string.');
    }
    if (runParameters === null || runParameters === undefined) {
      throw new Error('runParameters cannot be null or undefined.');
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (dataManagerName === null || dataManagerName === undefined || typeof dataManagerName.valueOf() !== 'string') {
      throw new Error('dataManagerName cannot be null or undefined and it must be of type string.');
    }
    if (dataManagerName !== null && dataManagerName !== undefined) {
      if (dataManagerName.length > 24)
      {
        throw new Error('"dataManagerName" should satisfy the constraint - "MaxLength": 24');
      }
      if (dataManagerName.length < 3)
      {
        throw new Error('"dataManagerName" should satisfy the constraint - "MinLength": 3');
      }
      if (dataManagerName.match(/^[-\w\.]+$/) === null)
      {
        throw new Error('"dataManagerName" should satisfy the constraint - "Pattern": /^[-\w\.]+$/');
      }
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataServices/{dataServiceName}/jobDefinitions/{jobDefinitionName}/run';
  requestUrl = requestUrl.replace('{dataServiceName}', encodeURIComponent(dataServiceName));
  requestUrl = requestUrl.replace('{jobDefinitionName}', encodeURIComponent(jobDefinitionName));
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{dataManagerName}', encodeURIComponent(dataManagerName));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (runParameters !== null && runParameters !== undefined) {
      let requestModelMapper = new client.models['RunParameters']().mapper();
      requestModel = client.serialize(requestModelMapper, runParameters, 'runParameters');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(runParameters, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 202 && statusCode !== 204) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * This method gets all the job definitions of the given data service name.
 *
 * @param {string} nextPageLink The NextLink from the previous successful call
 * to List operation.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link JobDefinitionList} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _listByDataServiceNext(nextPageLink, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {
      throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let requestUrl = '{nextLink}';
  requestUrl = requestUrl.replace('{nextLink}', nextPageLink);

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['JobDefinitionList']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * This method gets all the job definitions of the given data manager resource.
 *
 * @param {string} nextPageLink The NextLink from the previous successful call
 * to List operation.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link JobDefinitionList} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _listByDataManagerNext(nextPageLink, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {
      throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let requestUrl = '{nextLink}';
  requestUrl = requestUrl.replace('{nextLink}', nextPageLink);

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['JobDefinitionList']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/** Class representing a JobDefinitions. */
class JobDefinitions {
  /**
   * Create a JobDefinitions.
   * @param {HybridDataManagementClient} client Reference to the service client.
   */
  constructor(client) {
    this.client = client;
    this._listByDataService = _listByDataService;
    this._get = _get;
    this._createOrUpdate = _createOrUpdate;
    this._deleteMethod = _deleteMethod;
    this._run = _run;
    this._listByDataManager = _listByDataManager;
    this._beginCreateOrUpdate = _beginCreateOrUpdate;
    this._beginDeleteMethod = _beginDeleteMethod;
    this._beginRun = _beginRun;
    this._listByDataServiceNext = _listByDataServiceNext;
    this._listByDataManagerNext = _listByDataManagerNext;
  }

  /**
   * This method gets all the job definitions of the given data service name.
   *
   * @param {string} dataServiceName The data service type of interest.
   *
   * @param {string} resourceGroupName The Resource Group Name
   *
   * @param {string} dataManagerName The name of the DataManager Resource within
   * the specified resource group. DataManager names must be between 3 and 24
   * characters in length and use any alphanumeric and underscore only
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.filter] OData Filter options
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<JobDefinitionList>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  listByDataServiceWithHttpOperationResponse(dataServiceName, resourceGroupName, dataManagerName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._listByDataService(dataServiceName, resourceGroupName, dataManagerName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * This method gets all the job definitions of the given data service name.
   *
   * @param {string} dataServiceName The data service type of interest.
   *
   * @param {string} resourceGroupName The Resource Group Name
   *
   * @param {string} dataManagerName The name of the DataManager Resource within
   * the specified resource group. DataManager names must be between 3 and 24
   * characters in length and use any alphanumeric and underscore only
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.filter] OData Filter options
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {JobDefinitionList} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link JobDefinitionList} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  listByDataService(dataServiceName, resourceGroupName, dataManagerName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._listByDataService(dataServiceName, resourceGroupName, dataManagerName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._listByDataService(dataServiceName, resourceGroupName, dataManagerName, options, optionalCallback);
    }
  }

  /**
   * This method gets job definition object by name.
   *
   * @param {string} dataServiceName The data service name of the job definition
   *
   * @param {string} jobDefinitionName The job definition name that is being
   * queried.
   *
   * @param {string} resourceGroupName The Resource Group Name
   *
   * @param {string} dataManagerName The name of the DataManager Resource within
   * the specified resource group. DataManager names must be between 3 and 24
   * characters in length and use any alphanumeric and underscore only
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<JobDefinition>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getWithHttpOperationResponse(dataServiceName, jobDefinitionName, resourceGroupName, dataManagerName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._get(dataServiceName, jobDefinitionName, resourceGroupName, dataManagerName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * This method gets job definition object by name.
   *
   * @param {string} dataServiceName The data service name of the job definition
   *
   * @param {string} jobDefinitionName The job definition name that is being
   * queried.
   *
   * @param {string} resourceGroupName The Resource Group Name
   *
   * @param {string} dataManagerName The name of the DataManager Resource within
   * the specified resource group. DataManager names must be between 3 and 24
   * characters in length and use any alphanumeric and underscore only
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {JobDefinition} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link JobDefinition} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  get(dataServiceName, jobDefinitionName, resourceGroupName, dataManagerName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._get(dataServiceName, jobDefinitionName, resourceGroupName, dataManagerName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._get(dataServiceName, jobDefinitionName, resourceGroupName, dataManagerName, options, optionalCallback);
    }
  }

  /**
   * Creates or updates a job definition.
   *
   * @param {string} dataServiceName The data service type of the job definition.
   *
   * @param {string} jobDefinitionName The job definition name to be created or
   * updated.
   *
   * @param {object} jobDefinition Job Definition object to be created or
   * updated.
   *
   * @param {string} jobDefinition.dataSourceId Data Source Id associated to the
   * job definition.
   *
   * @param {string} jobDefinition.dataSinkId Data Sink Id associated to the job
   * definition.
   *
   * @param {array} [jobDefinition.schedules] Schedule for running the job
   * definition
   *
   * @param {string} jobDefinition.state State of the job definition. Possible
   * values include: 'Disabled', 'Enabled', 'Supported'
   *
   * @param {date} [jobDefinition.lastModifiedTime] Last modified time of the job
   * definition.
   *
   * @param {string} [jobDefinition.runLocation] This is the preferred geo
   * location for the job to run. Possible values include: 'none',
   * 'australiaeast', 'australiasoutheast', 'brazilsouth', 'canadacentral',
   * 'canadaeast', 'centralindia', 'centralus', 'eastasia', 'eastus', 'eastus2',
   * 'japaneast', 'japanwest', 'koreacentral', 'koreasouth', 'southeastasia',
   * 'southcentralus', 'southindia', 'northcentralus', 'northeurope', 'uksouth',
   * 'ukwest', 'westcentralus', 'westeurope', 'westindia', 'westus', 'westus2'
   *
   * @param {string} [jobDefinition.userConfirmation] Enum to detect if user
   * confirmation is required. If not passed will default to NotRequired.
   * Possible values include: 'NotRequired', 'Required'
   *
   * @param {object} [jobDefinition.dataServiceInput] A generic json used
   * differently by each data service type.
   *
   * @param {array} [jobDefinition.customerSecrets] List of customer secrets
   * containing a key identifier and key value. The key identifier is a way for
   * the specific data source to understand the key. Value contains customer
   * secret encrypted by the encryptionKeys.
   *
   * @param {string} resourceGroupName The Resource Group Name
   *
   * @param {string} dataManagerName The name of the DataManager Resource within
   * the specified resource group. DataManager names must be between 3 and 24
   * characters in length and use any alphanumeric and underscore only
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<JobDefinition>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  createOrUpdateWithHttpOperationResponse(dataServiceName, jobDefinitionName, jobDefinition, resourceGroupName, dataManagerName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._createOrUpdate(dataServiceName, jobDefinitionName, jobDefinition, resourceGroupName, dataManagerName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Creates or updates a job definition.
   *
   * @param {string} dataServiceName The data service type of the job definition.
   *
   * @param {string} jobDefinitionName The job definition name to be created or
   * updated.
   *
   * @param {object} jobDefinition Job Definition object to be created or
   * updated.
   *
   * @param {string} jobDefinition.dataSourceId Data Source Id associated to the
   * job definition.
   *
   * @param {string} jobDefinition.dataSinkId Data Sink Id associated to the job
   * definition.
   *
   * @param {array} [jobDefinition.schedules] Schedule for running the job
   * definition
   *
   * @param {string} jobDefinition.state State of the job definition. Possible
   * values include: 'Disabled', 'Enabled', 'Supported'
   *
   * @param {date} [jobDefinition.lastModifiedTime] Last modified time of the job
   * definition.
   *
   * @param {string} [jobDefinition.runLocation] This is the preferred geo
   * location for the job to run. Possible values include: 'none',
   * 'australiaeast', 'australiasoutheast', 'brazilsouth', 'canadacentral',
   * 'canadaeast', 'centralindia', 'centralus', 'eastasia', 'eastus', 'eastus2',
   * 'japaneast', 'japanwest', 'koreacentral', 'koreasouth', 'southeastasia',
   * 'southcentralus', 'southindia', 'northcentralus', 'northeurope', 'uksouth',
   * 'ukwest', 'westcentralus', 'westeurope', 'westindia', 'westus', 'westus2'
   *
   * @param {string} [jobDefinition.userConfirmation] Enum to detect if user
   * confirmation is required. If not passed will default to NotRequired.
   * Possible values include: 'NotRequired', 'Required'
   *
   * @param {object} [jobDefinition.dataServiceInput] A generic json used
   * differently by each data service type.
   *
   * @param {array} [jobDefinition.customerSecrets] List of customer secrets
   * containing a key identifier and key value. The key identifier is a way for
   * the specific data source to understand the key. Value contains customer
   * secret encrypted by the encryptionKeys.
   *
   * @param {string} resourceGroupName The Resource Group Name
   *
   * @param {string} dataManagerName The name of the DataManager Resource within
   * the specified resource group. DataManager names must be between 3 and 24
   * characters in length and use any alphanumeric and underscore only
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {JobDefinition} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link JobDefinition} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  createOrUpdate(dataServiceName, jobDefinitionName, jobDefinition, resourceGroupName, dataManagerName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._createOrUpdate(dataServiceName, jobDefinitionName, jobDefinition, resourceGroupName, dataManagerName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._createOrUpdate(dataServiceName, jobDefinitionName, jobDefinition, resourceGroupName, dataManagerName, options, optionalCallback);
    }
  }

  /**
   * This method deletes the given job definition.
   *
   * @param {string} dataServiceName The data service type of the job definition.
   *
   * @param {string} jobDefinitionName The job definition name to be deleted.
   *
   * @param {string} resourceGroupName The Resource Group Name
   *
   * @param {string} dataManagerName The name of the DataManager Resource within
   * the specified resource group. DataManager names must be between 3 and 24
   * characters in length and use any alphanumeric and underscore only
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  deleteMethodWithHttpOperationResponse(dataServiceName, jobDefinitionName, resourceGroupName, dataManagerName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._deleteMethod(dataServiceName, jobDefinitionName, resourceGroupName, dataManagerName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * This method deletes the given job definition.
   *
   * @param {string} dataServiceName The data service type of the job definition.
   *
   * @param {string} jobDefinitionName The job definition name to be deleted.
   *
   * @param {string} resourceGroupName The Resource Group Name
   *
   * @param {string} dataManagerName The name of the DataManager Resource within
   * the specified resource group. DataManager names must be between 3 and 24
   * characters in length and use any alphanumeric and underscore only
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteMethod(dataServiceName, jobDefinitionName, resourceGroupName, dataManagerName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._deleteMethod(dataServiceName, jobDefinitionName, resourceGroupName, dataManagerName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._deleteMethod(dataServiceName, jobDefinitionName, resourceGroupName, dataManagerName, options, optionalCallback);
    }
  }

  /**
   * This method runs a job instance of the given job definition.
   *
   * @param {string} dataServiceName The data service type of the job definition.
   *
   * @param {string} jobDefinitionName Name of the job definition.
   *
   * @param {object} runParameters Run time parameters for the job definition.
   *
   * @param {string} [runParameters.userConfirmation] Enum to detect if user
   * confirmation is required. If not passed will default to NotRequired.
   * Possible values include: 'NotRequired', 'Required'
   *
   * @param {object} [runParameters.dataServiceInput] A generic json used
   * differently by each data service type.
   *
   * @param {array} [runParameters.customerSecrets] List of customer secrets
   * containing a key identifier and key value. The key identifier is a way for
   * the specific data source to understand the key. Value contains customer
   * secret encrypted by the encryptionKeys.
   *
   * @param {string} resourceGroupName The Resource Group Name
   *
   * @param {string} dataManagerName The name of the DataManager Resource within
   * the specified resource group. DataManager names must be between 3 and 24
   * characters in length and use any alphanumeric and underscore only
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  runWithHttpOperationResponse(dataServiceName, jobDefinitionName, runParameters, resourceGroupName, dataManagerName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._run(dataServiceName, jobDefinitionName, runParameters, resourceGroupName, dataManagerName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * This method runs a job instance of the given job definition.
   *
   * @param {string} dataServiceName The data service type of the job definition.
   *
   * @param {string} jobDefinitionName Name of the job definition.
   *
   * @param {object} runParameters Run time parameters for the job definition.
   *
   * @param {string} [runParameters.userConfirmation] Enum to detect if user
   * confirmation is required. If not passed will default to NotRequired.
   * Possible values include: 'NotRequired', 'Required'
   *
   * @param {object} [runParameters.dataServiceInput] A generic json used
   * differently by each data service type.
   *
   * @param {array} [runParameters.customerSecrets] List of customer secrets
   * containing a key identifier and key value. The key identifier is a way for
   * the specific data source to understand the key. Value contains customer
   * secret encrypted by the encryptionKeys.
   *
   * @param {string} resourceGroupName The Resource Group Name
   *
   * @param {string} dataManagerName The name of the DataManager Resource within
   * the specified resource group. DataManager names must be between 3 and 24
   * characters in length and use any alphanumeric and underscore only
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  run(dataServiceName, jobDefinitionName, runParameters, resourceGroupName, dataManagerName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._run(dataServiceName, jobDefinitionName, runParameters, resourceGroupName, dataManagerName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._run(dataServiceName, jobDefinitionName, runParameters, resourceGroupName, dataManagerName, options, optionalCallback);
    }
  }

  /**
   * This method gets all the job definitions of the given data manager resource.
   *
   * @param {string} resourceGroupName The Resource Group Name
   *
   * @param {string} dataManagerName The name of the DataManager Resource within
   * the specified resource group. DataManager names must be between 3 and 24
   * characters in length and use any alphanumeric and underscore only
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.filter] OData Filter options
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<JobDefinitionList>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  listByDataManagerWithHttpOperationResponse(resourceGroupName, dataManagerName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._listByDataManager(resourceGroupName, dataManagerName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * This method gets all the job definitions of the given data manager resource.
   *
   * @param {string} resourceGroupName The Resource Group Name
   *
   * @param {string} dataManagerName The name of the DataManager Resource within
   * the specified resource group. DataManager names must be between 3 and 24
   * characters in length and use any alphanumeric and underscore only
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.filter] OData Filter options
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {JobDefinitionList} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link JobDefinitionList} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  listByDataManager(resourceGroupName, dataManagerName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._listByDataManager(resourceGroupName, dataManagerName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._listByDataManager(resourceGroupName, dataManagerName, options, optionalCallback);
    }
  }

  /**
   * Creates or updates a job definition.
   *
   * @param {string} dataServiceName The data service type of the job definition.
   *
   * @param {string} jobDefinitionName The job definition name to be created or
   * updated.
   *
   * @param {object} jobDefinition Job Definition object to be created or
   * updated.
   *
   * @param {string} jobDefinition.dataSourceId Data Source Id associated to the
   * job definition.
   *
   * @param {string} jobDefinition.dataSinkId Data Sink Id associated to the job
   * definition.
   *
   * @param {array} [jobDefinition.schedules] Schedule for running the job
   * definition
   *
   * @param {string} jobDefinition.state State of the job definition. Possible
   * values include: 'Disabled', 'Enabled', 'Supported'
   *
   * @param {date} [jobDefinition.lastModifiedTime] Last modified time of the job
   * definition.
   *
   * @param {string} [jobDefinition.runLocation] This is the preferred geo
   * location for the job to run. Possible values include: 'none',
   * 'australiaeast', 'australiasoutheast', 'brazilsouth', 'canadacentral',
   * 'canadaeast', 'centralindia', 'centralus', 'eastasia', 'eastus', 'eastus2',
   * 'japaneast', 'japanwest', 'koreacentral', 'koreasouth', 'southeastasia',
   * 'southcentralus', 'southindia', 'northcentralus', 'northeurope', 'uksouth',
   * 'ukwest', 'westcentralus', 'westeurope', 'westindia', 'westus', 'westus2'
   *
   * @param {string} [jobDefinition.userConfirmation] Enum to detect if user
   * confirmation is required. If not passed will default to NotRequired.
   * Possible values include: 'NotRequired', 'Required'
   *
   * @param {object} [jobDefinition.dataServiceInput] A generic json used
   * differently by each data service type.
   *
   * @param {array} [jobDefinition.customerSecrets] List of customer secrets
   * containing a key identifier and key value. The key identifier is a way for
   * the specific data source to understand the key. Value contains customer
   * secret encrypted by the encryptionKeys.
   *
   * @param {string} resourceGroupName The Resource Group Name
   *
   * @param {string} dataManagerName The name of the DataManager Resource within
   * the specified resource group. DataManager names must be between 3 and 24
   * characters in length and use any alphanumeric and underscore only
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<JobDefinition>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  beginCreateOrUpdateWithHttpOperationResponse(dataServiceName, jobDefinitionName, jobDefinition, resourceGroupName, dataManagerName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._beginCreateOrUpdate(dataServiceName, jobDefinitionName, jobDefinition, resourceGroupName, dataManagerName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Creates or updates a job definition.
   *
   * @param {string} dataServiceName The data service type of the job definition.
   *
   * @param {string} jobDefinitionName The job definition name to be created or
   * updated.
   *
   * @param {object} jobDefinition Job Definition object to be created or
   * updated.
   *
   * @param {string} jobDefinition.dataSourceId Data Source Id associated to the
   * job definition.
   *
   * @param {string} jobDefinition.dataSinkId Data Sink Id associated to the job
   * definition.
   *
   * @param {array} [jobDefinition.schedules] Schedule for running the job
   * definition
   *
   * @param {string} jobDefinition.state State of the job definition. Possible
   * values include: 'Disabled', 'Enabled', 'Supported'
   *
   * @param {date} [jobDefinition.lastModifiedTime] Last modified time of the job
   * definition.
   *
   * @param {string} [jobDefinition.runLocation] This is the preferred geo
   * location for the job to run. Possible values include: 'none',
   * 'australiaeast', 'australiasoutheast', 'brazilsouth', 'canadacentral',
   * 'canadaeast', 'centralindia', 'centralus', 'eastasia', 'eastus', 'eastus2',
   * 'japaneast', 'japanwest', 'koreacentral', 'koreasouth', 'southeastasia',
   * 'southcentralus', 'southindia', 'northcentralus', 'northeurope', 'uksouth',
   * 'ukwest', 'westcentralus', 'westeurope', 'westindia', 'westus', 'westus2'
   *
   * @param {string} [jobDefinition.userConfirmation] Enum to detect if user
   * confirmation is required. If not passed will default to NotRequired.
   * Possible values include: 'NotRequired', 'Required'
   *
   * @param {object} [jobDefinition.dataServiceInput] A generic json used
   * differently by each data service type.
   *
   * @param {array} [jobDefinition.customerSecrets] List of customer secrets
   * containing a key identifier and key value. The key identifier is a way for
   * the specific data source to understand the key. Value contains customer
   * secret encrypted by the encryptionKeys.
   *
   * @param {string} resourceGroupName The Resource Group Name
   *
   * @param {string} dataManagerName The name of the DataManager Resource within
   * the specified resource group. DataManager names must be between 3 and 24
   * characters in length and use any alphanumeric and underscore only
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {JobDefinition} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link JobDefinition} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  beginCreateOrUpdate(dataServiceName, jobDefinitionName, jobDefinition, resourceGroupName, dataManagerName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._beginCreateOrUpdate(dataServiceName, jobDefinitionName, jobDefinition, resourceGroupName, dataManagerName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._beginCreateOrUpdate(dataServiceName, jobDefinitionName, jobDefinition, resourceGroupName, dataManagerName, options, optionalCallback);
    }
  }

  /**
   * This method deletes the given job definition.
   *
   * @param {string} dataServiceName The data service type of the job definition.
   *
   * @param {string} jobDefinitionName The job definition name to be deleted.
   *
   * @param {string} resourceGroupName The Resource Group Name
   *
   * @param {string} dataManagerName The name of the DataManager Resource within
   * the specified resource group. DataManager names must be between 3 and 24
   * characters in length and use any alphanumeric and underscore only
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  beginDeleteMethodWithHttpOperationResponse(dataServiceName, jobDefinitionName, resourceGroupName, dataManagerName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._beginDeleteMethod(dataServiceName, jobDefinitionName, resourceGroupName, dataManagerName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * This method deletes the given job definition.
   *
   * @param {string} dataServiceName The data service type of the job definition.
   *
   * @param {string} jobDefinitionName The job definition name to be deleted.
   *
   * @param {string} resourceGroupName The Resource Group Name
   *
   * @param {string} dataManagerName The name of the DataManager Resource within
   * the specified resource group. DataManager names must be between 3 and 24
   * characters in length and use any alphanumeric and underscore only
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  beginDeleteMethod(dataServiceName, jobDefinitionName, resourceGroupName, dataManagerName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._beginDeleteMethod(dataServiceName, jobDefinitionName, resourceGroupName, dataManagerName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._beginDeleteMethod(dataServiceName, jobDefinitionName, resourceGroupName, dataManagerName, options, optionalCallback);
    }
  }

  /**
   * This method runs a job instance of the given job definition.
   *
   * @param {string} dataServiceName The data service type of the job definition.
   *
   * @param {string} jobDefinitionName Name of the job definition.
   *
   * @param {object} runParameters Run time parameters for the job definition.
   *
   * @param {string} [runParameters.userConfirmation] Enum to detect if user
   * confirmation is required. If not passed will default to NotRequired.
   * Possible values include: 'NotRequired', 'Required'
   *
   * @param {object} [runParameters.dataServiceInput] A generic json used
   * differently by each data service type.
   *
   * @param {array} [runParameters.customerSecrets] List of customer secrets
   * containing a key identifier and key value. The key identifier is a way for
   * the specific data source to understand the key. Value contains customer
   * secret encrypted by the encryptionKeys.
   *
   * @param {string} resourceGroupName The Resource Group Name
   *
   * @param {string} dataManagerName The name of the DataManager Resource within
   * the specified resource group. DataManager names must be between 3 and 24
   * characters in length and use any alphanumeric and underscore only
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  beginRunWithHttpOperationResponse(dataServiceName, jobDefinitionName, runParameters, resourceGroupName, dataManagerName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._beginRun(dataServiceName, jobDefinitionName, runParameters, resourceGroupName, dataManagerName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * This method runs a job instance of the given job definition.
   *
   * @param {string} dataServiceName The data service type of the job definition.
   *
   * @param {string} jobDefinitionName Name of the job definition.
   *
   * @param {object} runParameters Run time parameters for the job definition.
   *
   * @param {string} [runParameters.userConfirmation] Enum to detect if user
   * confirmation is required. If not passed will default to NotRequired.
   * Possible values include: 'NotRequired', 'Required'
   *
   * @param {object} [runParameters.dataServiceInput] A generic json used
   * differently by each data service type.
   *
   * @param {array} [runParameters.customerSecrets] List of customer secrets
   * containing a key identifier and key value. The key identifier is a way for
   * the specific data source to understand the key. Value contains customer
   * secret encrypted by the encryptionKeys.
   *
   * @param {string} resourceGroupName The Resource Group Name
   *
   * @param {string} dataManagerName The name of the DataManager Resource within
   * the specified resource group. DataManager names must be between 3 and 24
   * characters in length and use any alphanumeric and underscore only
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  beginRun(dataServiceName, jobDefinitionName, runParameters, resourceGroupName, dataManagerName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._beginRun(dataServiceName, jobDefinitionName, runParameters, resourceGroupName, dataManagerName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._beginRun(dataServiceName, jobDefinitionName, runParameters, resourceGroupName, dataManagerName, options, optionalCallback);
    }
  }

  /**
   * This method gets all the job definitions of the given data service name.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<JobDefinitionList>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  listByDataServiceNextWithHttpOperationResponse(nextPageLink, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._listByDataServiceNext(nextPageLink, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * This method gets all the job definitions of the given data service name.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {JobDefinitionList} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link JobDefinitionList} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  listByDataServiceNext(nextPageLink, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._listByDataServiceNext(nextPageLink, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._listByDataServiceNext(nextPageLink, options, optionalCallback);
    }
  }

  /**
   * This method gets all the job definitions of the given data manager resource.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<JobDefinitionList>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  listByDataManagerNextWithHttpOperationResponse(nextPageLink, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._listByDataManagerNext(nextPageLink, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * This method gets all the job definitions of the given data manager resource.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {JobDefinitionList} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link JobDefinitionList} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  listByDataManagerNext(nextPageLink, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._listByDataManagerNext(nextPageLink, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._listByDataManagerNext(nextPageLink, options, optionalCallback);
    }
  }

}

module.exports = JobDefinitions;
