/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * Encryption Key.
 *
 */
class Key {
  /**
   * Create a Key.
   * @property {string} keyModulus Modulus of the encryption key.
   * @property {string} keyExponent Exponent of the encryption key.
   * @property {number} encryptionChunkSizeInBytes The maximum byte size that
   * can be encrypted by the key. For a key size larger than the size, break
   * into chunks and encrypt each chunk, append each encrypted chunk with : to
   * mark the end of the chunk.
   */
  constructor() {
  }

  /**
   * Defines the metadata of Key
   *
   * @returns {object} metadata of Key
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'Key',
      type: {
        name: 'Composite',
        className: 'Key',
        modelProperties: {
          keyModulus: {
            required: true,
            serializedName: 'keyModulus',
            type: {
              name: 'String'
            }
          },
          keyExponent: {
            required: true,
            serializedName: 'keyExponent',
            type: {
              name: 'String'
            }
          },
          encryptionChunkSizeInBytes: {
            required: true,
            serializedName: 'encryptionChunkSizeInBytes',
            type: {
              name: 'Number'
            }
          }
        }
      }
    };
  }
}

module.exports = Key;
