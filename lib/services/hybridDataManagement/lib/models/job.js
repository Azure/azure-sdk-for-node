/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Data service job.
 *
 * @extends models['DmsBaseObject']
 */
class Job extends models['DmsBaseObject'] {
  /**
   * Create a Job.
   * @property {string} status Status of the job. Possible values include:
   * 'None', 'InProgress', 'Succeeded', 'WaitingForAction', 'Failed',
   * 'Cancelled', 'Cancelling'
   * @property {date} startTime Time at which the job was started in UTC ISO
   * 8601 format.
   * @property {date} [endTime] Time at which the job ended in UTC ISO 8601
   * format.
   * @property {string} isCancellable Describes whether the job is cancellable.
   * Possible values include: 'NotCancellable', 'Cancellable'
   * @property {number} [bytesProcessed] Number of bytes processed by the job
   * as of now.
   * @property {number} [itemsProcessed] Number of items processed by the job
   * as of now
   * @property {number} [totalBytesToProcess] Number of bytes to be processed
   * by the job in total.
   * @property {number} [totalItemsToProcess] Number of items to be processed
   * by the job in total
   * @property {object} [details] Details of a job run. This field will only be
   * sent for expand details filter.
   * @property {array} [details.jobStages] List of stages that ran in the job
   * @property {object} [details.jobDefinition] JobDefinition at the time of
   * the run
   * @property {string} [details.jobDefinition.dataSourceId] Data Source Id
   * associated to the job definition.
   * @property {string} [details.jobDefinition.dataSinkId] Data Sink Id
   * associated to the job definition.
   * @property {array} [details.jobDefinition.schedules] Schedule for running
   * the job definition
   * @property {string} [details.jobDefinition.state] State of the job
   * definition. Possible values include: 'Disabled', 'Enabled', 'Supported'
   * @property {date} [details.jobDefinition.lastModifiedTime] Last modified
   * time of the job definition.
   * @property {string} [details.jobDefinition.runLocation] This is the
   * preferred geo location for the job to run. Possible values include:
   * 'none', 'australiaeast', 'australiasoutheast', 'brazilsouth',
   * 'canadacentral', 'canadaeast', 'centralindia', 'centralus', 'eastasia',
   * 'eastus', 'eastus2', 'japaneast', 'japanwest', 'koreacentral',
   * 'koreasouth', 'southeastasia', 'southcentralus', 'southindia',
   * 'northcentralus', 'northeurope', 'uksouth', 'ukwest', 'westcentralus',
   * 'westeurope', 'westindia', 'westus', 'westus2'
   * @property {string} [details.jobDefinition.userConfirmation] Enum to detect
   * if user confirmation is required. If not passed will default to
   * NotRequired. Possible values include: 'NotRequired', 'Required'
   * @property {object} [details.jobDefinition.dataServiceInput] A generic json
   * used differently by each data service type.
   * @property {array} [details.jobDefinition.customerSecrets] List of customer
   * secrets containing a key identifier and key value. The key identifier is a
   * way for the specific data source to understand the key. Value contains
   * customer secret encrypted by the encryptionKeys.
   * @property {array} [details.errorDetails] Error details for failure. This
   * is optional.
   * @property {string} [details.itemDetailsLink] Item Details Link to download
   * files or see details
   * @property {string} [dataSourceName] Name of the data source on which the
   * job was triggered.
   * @property {string} [dataSinkName] Name of the data sink on which the job
   * was triggered.
   * @property {object} [error] Top level error for the job.
   * @property {string} [error.code] Error code that can be used to
   * programmatically identify the error.
   * @property {string} [error.message] Describes the error in detail and
   * provides debugging information.
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of Job
   *
   * @returns {object} metadata of Job
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'Job',
      type: {
        name: 'Composite',
        className: 'Job',
        modelProperties: {
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          status: {
            required: true,
            serializedName: 'status',
            type: {
              name: 'Enum',
              allowedValues: [ 'None', 'InProgress', 'Succeeded', 'WaitingForAction', 'Failed', 'Cancelled', 'Cancelling' ]
            }
          },
          startTime: {
            required: true,
            serializedName: 'startTime',
            type: {
              name: 'DateTime'
            }
          },
          endTime: {
            required: false,
            serializedName: 'endTime',
            type: {
              name: 'DateTime'
            }
          },
          isCancellable: {
            required: true,
            serializedName: 'properties.isCancellable',
            type: {
              name: 'Enum',
              allowedValues: [ 'NotCancellable', 'Cancellable' ]
            }
          },
          bytesProcessed: {
            required: false,
            serializedName: 'properties.bytesProcessed',
            type: {
              name: 'Number'
            }
          },
          itemsProcessed: {
            required: false,
            serializedName: 'properties.itemsProcessed',
            type: {
              name: 'Number'
            }
          },
          totalBytesToProcess: {
            required: false,
            serializedName: 'properties.totalBytesToProcess',
            type: {
              name: 'Number'
            }
          },
          totalItemsToProcess: {
            required: false,
            serializedName: 'properties.totalItemsToProcess',
            type: {
              name: 'Number'
            }
          },
          details: {
            required: false,
            serializedName: 'properties.details',
            type: {
              name: 'Composite',
              className: 'JobDetails'
            }
          },
          dataSourceName: {
            required: false,
            serializedName: 'properties.dataSourceName',
            type: {
              name: 'String'
            }
          },
          dataSinkName: {
            required: false,
            serializedName: 'properties.dataSinkName',
            type: {
              name: 'String'
            }
          },
          error: {
            required: false,
            serializedName: 'error',
            type: {
              name: 'Composite',
              className: 'ErrorModel'
            }
          }
        }
      }
    };
  }
}

module.exports = Job;
