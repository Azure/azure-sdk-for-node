/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { BaseResource, CloudError } from "ms-rest-azure";
import * as moment from "moment";

export {

  BaseResource,
  CloudError
};

/**
 * Contains the localized display information for this particular operation / action.
 * These value will be used by several clients for
 * (1) custom role definitions for RBAC;
 * (2) complex query filters for the event service; and (3) audit history / records for management
 * operations.
 */
export interface AvailableProviderOperationDisplay {
  /**
   * Gets or sets Provider
   * The localized friendly form of the resource provider name – it is expected to also include the
   * publisher/company responsible.
   * It should use Title Casing and begin with “Microsoft” for 1st party services.
   */
  provider?: string;
  /**
   * Gets or sets Resource
   * The localized friendly form of the resource type related to this action/operation – it should
   * match the public documentation for the resource provider.
   * It should use Title Casing – for examples, please refer to the “name” section.
   */
  resource?: string;
  /**
   * Gets or sets Operation
   * The localized friendly name for the operation, as it should be shown to the user.
   * It should be concise (to fit in drop downs) but clear (i.e. self-documenting). It should use
   * Title Casing and include the entity/resource to which it applies.
   */
  operation?: string;
  /**
   * Gets or sets Description
   * The localized friendly description for the operation, as it should be shown to the user.
   * It should be thorough, yet concise – it will be used in tool tips and detailed views.
   */
  description?: string;
}

/**
 * Class represents provider operation
 */
export interface AvailableProviderOperation {
  /**
   * Gets or Sets Name of the operations
   */
  name: string;
  /**
   * Gets or sets Display information
   * Contains the localized display information for this particular operation/action
   */
  display?: AvailableProviderOperationDisplay;
  /**
   * Gets or sets Origin
   * The intended executor of the operation; governs the display of the operation in the RBAC UX
   * and the audit logs UX.
   * Default value is “user,system”
   */
  origin?: string;
  /**
   * Gets or sets Properties
   * Reserved for future use
   */
  properties?: any;
}

/**
 * The pair of customer secret.
 */
export interface CustomerSecret {
  /**
   * The identifier to the data service input object which this secret corresponds to.
   */
  keyIdentifier: string;
  /**
   * It contains the encrypted customer secret.
   */
  keyValue: string;
  /**
   * The encryption algorithm used to encrypt data. Possible values include: 'None', 'RSA1_5',
   * 'RSA_OAEP', 'PlainText'
   */
  algorithm: string;
}

/**
 * Model of the Resource.
 */
export interface Resource extends BaseResource {
  /**
   * The Resource Id.
   */
  readonly id?: string;
  /**
   * The Resource Name.
   */
  readonly name?: string;
  /**
   * The Resource type.
   */
  readonly type?: string;
  /**
   * The location of the resource. This will be one of the supported and registered Azure Geo
   * Regions (e.g. West US, East
   * US, Southeast Asia, etc.). The geo region of a resource cannot be changed once it is created,
   * but if an identical geo
   * region is specified on update the request will succeed.
   */
  location: string;
  /**
   * The list of key value pairs that describe the resource. These tags can be used in viewing and
   * grouping this resource
   * (across resource groups).
   */
  tags?: { [propertyName: string]: string };
  /**
   * The sku type.
   */
  sku?: Sku;
}

/**
 * The DataManager resource.
 */
export interface DataManager extends Resource {
  /**
   * Etag of the Resource.
   */
  etag?: string;
}

/**
 * Base class for all objects under DataManager.
 */
export interface DmsBaseObject {
  /**
   * Name of the object.
   */
  readonly name?: string;
  /**
   * Id of the object.
   */
  readonly id?: string;
  /**
   * Type of the object.
   */
  readonly type?: string;
}

/**
 * Data Service.
 */
export interface DataService extends DmsBaseObject {
  /**
   * State of the data service. Possible values include: 'Disabled', 'Enabled', 'Supported'
   */
  state: string;
  /**
   * Supported data store types which can be used as a sink.
   */
  supportedDataSinkTypes?: string[];
  /**
   * Supported data store types which can be used as a source.
   */
  supportedDataSourceTypes?: string[];
}

/**
 * Data store.
 */
export interface DataStore extends DmsBaseObject {
  /**
   * Arm Id for the manager resource to which the data source is associated. This is optional.
   */
  repositoryId?: string;
  /**
   * State of the data source. Possible values include: 'Disabled', 'Enabled', 'Supported'
   */
  state: string;
  /**
   * A generic json used differently by each data source type.
   */
  extendedProperties?: any;
  /**
   * The arm id of the data store type.
   */
  dataStoreTypeId: string;
  /**
   * List of customer secrets containing a key identifier and key value. The key identifier is a
   * way for the specific data source to understand the key. Value contains customer secret
   * encrypted by the encryptionKeys.
   */
  customerSecrets?: CustomerSecret[];
}

/**
 * Contains the information about the filters for the DataStore.
 */
export interface DataStoreFilter {
  /**
   * The data store type id.
   */
  dataStoreTypeId?: string;
}

/**
 * Data Store Type.
 */
export interface DataStoreType extends DmsBaseObject {
  /**
   * Arm type for the manager resource to which the data source type is associated. This is
   * optional.
   */
  repositoryType?: string;
  /**
   * State of the data store type. Possible values include: 'Disabled', 'Enabled', 'Supported'
   */
  state: string;
  /**
   * Supported data services where it can be used as a sink.
   */
  supportedDataServicesAsSink?: string[];
  /**
   * Supported data services where it can be used as a source.
   */
  supportedDataServicesAsSource?: string[];
}

/**
 * Top level error for the job.
 */
export interface ErrorModel {
  /**
   * Error code that can be used to programmatically identify the error.
   */
  code: string;
  /**
   * Describes the error in detail and provides debugging information.
   */
  message?: string;
}

/**
 * Error Details
 */
export interface ErrorDetails {
  /**
   * Error message.
   */
  errorMessage?: string;
  /**
   * Error code.
   */
  errorCode?: number;
  /**
   * Recommended action for the error.
   */
  recommendedAction?: string;
  /**
   * Contains the non localized exception message
   */
  exceptionMessage?: string;
}

/**
 * Job stages.
 */
export interface JobStages {
  /**
   * Name of the job stage.
   */
  stageName?: string;
  /**
   * Status of the job stage. Possible values include: 'None', 'InProgress', 'Succeeded',
   * 'WaitingForAction', 'Failed', 'Cancelled', 'Cancelling'
   */
  stageStatus: string;
  /**
   * Job Stage Details
   */
  jobStageDetails?: any;
  /**
   * Error details for the stage. This is optional
   */
  errorDetails?: ErrorDetails[];
}

/**
 * Schedule for the job run.
 */
export interface Schedule {
  /**
   * Name of the schedule.
   */
  name?: string;
  /**
   * A list of repetition intervals in ISO 8601 format.
   */
  policyList?: string[];
}

/**
 * Job Definition.
 */
export interface JobDefinition extends DmsBaseObject {
  /**
   * Data Source Id associated to the job definition.
   */
  dataSourceId: string;
  /**
   * Data Sink Id associated to the job definition.
   */
  dataSinkId: string;
  /**
   * Schedule for running the job definition
   */
  schedules?: Schedule[];
  /**
   * State of the job definition. Possible values include: 'Disabled', 'Enabled', 'Supported'
   */
  state: string;
  /**
   * Last modified time of the job definition.
   */
  lastModifiedTime?: Date;
  /**
   * This is the preferred geo location for the job to run. Possible values include: 'none',
   * 'australiaeast', 'australiasoutheast', 'brazilsouth', 'canadacentral', 'canadaeast',
   * 'centralindia', 'centralus', 'eastasia', 'eastus', 'eastus2', 'japaneast', 'japanwest',
   * 'koreacentral', 'koreasouth', 'southeastasia', 'southcentralus', 'southindia',
   * 'northcentralus', 'northeurope', 'uksouth', 'ukwest', 'westcentralus', 'westeurope',
   * 'westindia', 'westus', 'westus2'
   */
  runLocation?: string;
  /**
   * Enum to detect if user confirmation is required. If not passed will default to NotRequired.
   * Possible values include: 'NotRequired', 'Required'
   */
  userConfirmation?: string;
  /**
   * A generic json used differently by each data service type.
   */
  dataServiceInput?: any;
  /**
   * List of customer secrets containing a key identifier and key value. The key identifier is a
   * way for the specific data source to understand the key. Value contains customer secret
   * encrypted by the encryptionKeys.
   */
  customerSecrets?: CustomerSecret[];
}

/**
 * Job details.
 */
export interface JobDetails {
  /**
   * List of stages that ran in the job
   */
  jobStages?: JobStages[];
  /**
   * JobDefinition at the time of the run
   */
  jobDefinition?: JobDefinition;
  /**
   * Error details for failure. This is optional.
   */
  errorDetails?: ErrorDetails[];
  /**
   * Item Details Link to download files or see details
   */
  itemDetailsLink?: string;
}

/**
 * Data service job.
 */
export interface Job extends DmsBaseObject {
  /**
   * Status of the job. Possible values include: 'None', 'InProgress', 'Succeeded',
   * 'WaitingForAction', 'Failed', 'Cancelled', 'Cancelling'
   */
  status: string;
  /**
   * Time at which the job was started in UTC ISO 8601 format.
   */
  startTime: Date;
  /**
   * Time at which the job ended in UTC ISO 8601 format.
   */
  endTime?: Date;
  /**
   * Describes whether the job is cancellable. Possible values include: 'NotCancellable',
   * 'Cancellable'
   */
  isCancellable: string;
  /**
   * Number of bytes processed by the job as of now.
   */
  bytesProcessed?: number;
  /**
   * Number of items processed by the job as of now
   */
  itemsProcessed?: number;
  /**
   * Number of bytes to be processed by the job in total.
   */
  totalBytesToProcess?: number;
  /**
   * Number of items to be processed by the job in total
   */
  totalItemsToProcess?: number;
  /**
   * Details of a job run. This field will only be sent for expand details filter.
   */
  details?: JobDetails;
  /**
   * Name of the data source on which the job was triggered.
   */
  dataSourceName?: string;
  /**
   * Name of the data sink on which the job was triggered.
   */
  dataSinkName?: string;
  /**
   * Top level error for the job.
   */
  error?: ErrorModel;
}

/**
 * Contains the supported job definition filters.
 */
export interface JobDefinitionFilter {
  /**
   * The state of the job definition. Possible values include: 'Disabled', 'Enabled', 'Supported'
   */
  state: string;
  /**
   * The data source associated with the job definition
   */
  dataSource?: string;
  /**
   * The last modified date time of the data source.
   */
  lastModified?: Date;
}

/**
 * Contains the information about the filters for the job.
 */
export interface JobFilter {
  /**
   * The status of the job. Possible values include: 'None', 'InProgress', 'Succeeded',
   * 'WaitingForAction', 'Failed', 'Cancelled', 'Cancelling'
   */
  status: string;
  /**
   * The start time of the job.
   */
  startTime?: Date;
}

/**
 * Encryption Key.
 */
export interface Key {
  /**
   * Modulus of the encryption key.
   */
  keyModulus: string;
  /**
   * Exponent of the encryption key.
   */
  keyExponent: string;
  /**
   * The maximum byte size that can be encrypted by the key. For a key size larger than the size,
   * break into chunks and encrypt each chunk, append each encrypted chunk with : to mark the end
   * of the chunk.
   */
  encryptionChunkSizeInBytes: number;
}

/**
 * Public key
 */
export interface PublicKey extends DmsBaseObject {
  /**
   * Level one public key for encryption
   */
  dataServiceLevel1Key: Key;
  /**
   * Level two public key for encryption
   */
  dataServiceLevel2Key: Key;
}

/**
 * The sku type.
 */
export interface Sku {
  /**
   * The sku name. Required for data manager creation, optional for update.
   */
  name?: string;
  /**
   * The sku tier. This is based on the SKU name.
   */
  tier?: string;
}

/**
 * Run parameters for a job.
 */
export interface RunParameters {
  /**
   * Enum to detect if user confirmation is required. If not passed will default to NotRequired.
   * Possible values include: 'NotRequired', 'Required'
   */
  userConfirmation?: string;
  /**
   * A generic json used differently by each data service type.
   */
  dataServiceInput?: any;
  /**
   * List of customer secrets containing a key identifier and key value. The key identifier is a
   * way for the specific data source to understand the key. Value contains customer secret
   * encrypted by the encryptionKeys.
   */
  customerSecrets?: CustomerSecret[];
}

/**
 * Class for set of operations used for discovery of available provider operations.
 */
export interface AvailableProviderOperations extends Array<AvailableProviderOperation> {
  /**
   * Link for the next set of operations.
   */
  nextLink?: string;
}

/**
 * DataManager resources Collection.
 */
export interface DataManagerList extends Array<DataManager> {
  /**
   * Link for the next set of data stores.
   */
  nextLink?: string;
}

/**
 * Data Service Collection.
 */
export interface DataServiceList extends Array<DataService> {
  /**
   * Link for the next set of data services.
   */
  nextLink?: string;
}

/**
 * Job Definition Collection.
 */
export interface JobDefinitionList extends Array<JobDefinition> {
  /**
   * Link for the next set of job definitions.
   */
  nextLink?: string;
}

/**
 * Job Collection.
 */
export interface JobList extends Array<Job> {
  /**
   * Link for the next set of jobs.
   */
  nextLink?: string;
}

/**
 * Data Store Collection.
 */
export interface DataStoreList extends Array<DataStore> {
  /**
   * Link for the next set of data stores.
   */
  nextLink?: string;
}

/**
 * Data Store Type Collection.
 */
export interface DataStoreTypeList extends Array<DataStoreType> {
  /**
   * Link for the next set of data store types.
   */
  nextLink?: string;
}

/**
 * PublicKey Collection
 */
export interface PublicKeyList extends Array<PublicKey> {
  /**
   * Link for the next set of public keys.
   */
  nextLink?: string;
}
