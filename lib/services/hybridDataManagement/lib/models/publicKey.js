/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Public key
 *
 * @extends models['DmsBaseObject']
 */
class PublicKey extends models['DmsBaseObject'] {
  /**
   * Create a PublicKey.
   * @property {object} dataServiceLevel1Key Level one public key for
   * encryption
   * @property {string} [dataServiceLevel1Key.keyModulus] Modulus of the
   * encryption key.
   * @property {string} [dataServiceLevel1Key.keyExponent] Exponent of the
   * encryption key.
   * @property {number} [dataServiceLevel1Key.encryptionChunkSizeInBytes] The
   * maximum byte size that can be encrypted by the key. For a key size larger
   * than the size, break into chunks and encrypt each chunk, append each
   * encrypted chunk with : to mark the end of the chunk.
   * @property {object} dataServiceLevel2Key Level two public key for
   * encryption
   * @property {string} [dataServiceLevel2Key.keyModulus] Modulus of the
   * encryption key.
   * @property {string} [dataServiceLevel2Key.keyExponent] Exponent of the
   * encryption key.
   * @property {number} [dataServiceLevel2Key.encryptionChunkSizeInBytes] The
   * maximum byte size that can be encrypted by the key. For a key size larger
   * than the size, break into chunks and encrypt each chunk, append each
   * encrypted chunk with : to mark the end of the chunk.
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of PublicKey
   *
   * @returns {object} metadata of PublicKey
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'PublicKey',
      type: {
        name: 'Composite',
        className: 'PublicKey',
        modelProperties: {
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          dataServiceLevel1Key: {
            required: true,
            serializedName: 'properties.dataServiceLevel1Key',
            type: {
              name: 'Composite',
              className: 'Key'
            }
          },
          dataServiceLevel2Key: {
            required: true,
            serializedName: 'properties.dataServiceLevel2Key',
            type: {
              name: 'Composite',
              className: 'Key'
            }
          }
        }
      }
    };
  }
}

module.exports = PublicKey;
