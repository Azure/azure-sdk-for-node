/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Data store.
 *
 * @extends models['DmsBaseObject']
 */
class DataStore extends models['DmsBaseObject'] {
  /**
   * Create a DataStore.
   * @property {string} [repositoryId] Arm Id for the manager resource to which
   * the data source is associated. This is optional.
   * @property {string} state State of the data source. Possible values
   * include: 'Disabled', 'Enabled', 'Supported'
   * @property {object} [extendedProperties] A generic json used differently by
   * each data source type.
   * @property {string} dataStoreTypeId The arm id of the data store type.
   * @property {array} [customerSecrets] List of customer secrets containing a
   * key identifier and key value. The key identifier is a way for the specific
   * data source to understand the key. Value contains customer secret
   * encrypted by the encryptionKeys.
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of DataStore
   *
   * @returns {object} metadata of DataStore
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'DataStore',
      type: {
        name: 'Composite',
        className: 'DataStore',
        modelProperties: {
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          repositoryId: {
            required: false,
            serializedName: 'properties.repositoryId',
            type: {
              name: 'String'
            }
          },
          state: {
            required: true,
            serializedName: 'properties.state',
            type: {
              name: 'Enum',
              allowedValues: [ 'Disabled', 'Enabled', 'Supported' ]
            }
          },
          extendedProperties: {
            required: false,
            serializedName: 'properties.extendedProperties',
            type: {
              name: 'Object'
            }
          },
          dataStoreTypeId: {
            required: true,
            serializedName: 'properties.dataStoreTypeId',
            type: {
              name: 'String'
            }
          },
          customerSecrets: {
            required: false,
            serializedName: 'properties.customerSecrets',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'CustomerSecretElementType',
                  type: {
                    name: 'Composite',
                    className: 'CustomerSecret'
                  }
              }
            }
          }
        }
      }
    };
  }
}

module.exports = DataStore;
