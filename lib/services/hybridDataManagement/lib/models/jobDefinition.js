/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Job Definition.
 *
 * @extends models['DmsBaseObject']
 */
class JobDefinition extends models['DmsBaseObject'] {
  /**
   * Create a JobDefinition.
   * @property {string} dataSourceId Data Source Id associated to the job
   * definition.
   * @property {string} dataSinkId Data Sink Id associated to the job
   * definition.
   * @property {array} [schedules] Schedule for running the job definition
   * @property {string} state State of the job definition. Possible values
   * include: 'Disabled', 'Enabled', 'Supported'
   * @property {date} [lastModifiedTime] Last modified time of the job
   * definition.
   * @property {string} [runLocation] This is the preferred geo location for
   * the job to run. Possible values include: 'none', 'australiaeast',
   * 'australiasoutheast', 'brazilsouth', 'canadacentral', 'canadaeast',
   * 'centralindia', 'centralus', 'eastasia', 'eastus', 'eastus2', 'japaneast',
   * 'japanwest', 'koreacentral', 'koreasouth', 'southeastasia',
   * 'southcentralus', 'southindia', 'northcentralus', 'northeurope',
   * 'uksouth', 'ukwest', 'westcentralus', 'westeurope', 'westindia', 'westus',
   * 'westus2'
   * @property {string} [userConfirmation] Enum to detect if user confirmation
   * is required. If not passed will default to NotRequired. Possible values
   * include: 'NotRequired', 'Required'. Default value: 'NotRequired' .
   * @property {object} [dataServiceInput] A generic json used differently by
   * each data service type.
   * @property {array} [customerSecrets] List of customer secrets containing a
   * key identifier and key value. The key identifier is a way for the specific
   * data source to understand the key. Value contains customer secret
   * encrypted by the encryptionKeys.
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of JobDefinition
   *
   * @returns {object} metadata of JobDefinition
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'JobDefinition',
      type: {
        name: 'Composite',
        className: 'JobDefinition',
        modelProperties: {
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          dataSourceId: {
            required: true,
            serializedName: 'properties.dataSourceId',
            type: {
              name: 'String'
            }
          },
          dataSinkId: {
            required: true,
            serializedName: 'properties.dataSinkId',
            type: {
              name: 'String'
            }
          },
          schedules: {
            required: false,
            serializedName: 'properties.schedules',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ScheduleElementType',
                  type: {
                    name: 'Composite',
                    className: 'Schedule'
                  }
              }
            }
          },
          state: {
            required: true,
            serializedName: 'properties.state',
            type: {
              name: 'Enum',
              allowedValues: [ 'Disabled', 'Enabled', 'Supported' ]
            }
          },
          lastModifiedTime: {
            required: false,
            serializedName: 'properties.lastModifiedTime',
            type: {
              name: 'DateTime'
            }
          },
          runLocation: {
            required: false,
            serializedName: 'properties.runLocation',
            type: {
              name: 'Enum',
              allowedValues: [ 'none', 'australiaeast', 'australiasoutheast', 'brazilsouth', 'canadacentral', 'canadaeast', 'centralindia', 'centralus', 'eastasia', 'eastus', 'eastus2', 'japaneast', 'japanwest', 'koreacentral', 'koreasouth', 'southeastasia', 'southcentralus', 'southindia', 'northcentralus', 'northeurope', 'uksouth', 'ukwest', 'westcentralus', 'westeurope', 'westindia', 'westus', 'westus2' ]
            }
          },
          userConfirmation: {
            required: false,
            serializedName: 'properties.userConfirmation',
            defaultValue: 'NotRequired',
            type: {
              name: 'Enum',
              allowedValues: [ 'NotRequired', 'Required' ]
            }
          },
          dataServiceInput: {
            required: false,
            serializedName: 'properties.dataServiceInput',
            type: {
              name: 'Object'
            }
          },
          customerSecrets: {
            required: false,
            serializedName: 'properties.customerSecrets',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'CustomerSecretElementType',
                  type: {
                    name: 'Composite',
                    className: 'CustomerSecret'
                  }
              }
            }
          }
        }
      }
    };
  }
}

module.exports = JobDefinition;
