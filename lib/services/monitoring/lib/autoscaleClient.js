/* jshint latedef:false */
/* jshint forin:false */
/* jshint noempty:false */

// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

'use strict';

var util = require('util');
var moment = require('moment');
var azureCommon = require('azure-common');
var Service = azureCommon.Service;
var WebResource = azureCommon.WebResource;

var AutoscaleClient = ( /** @lends AutoscaleClient */ function() {
  /**
   * @class
   * Initializes a new instance of the AutoscaleClient class.
   * @constructor
   * 
   * @param {SubscriptionCloudCredentials} credentials Gets subscription
   * credentials which uniquely identify Microsoft Azure subscription. The
   * subscription ID forms part of the URI for every service call.
   * 
   * @param {string} [credentials.subscriptionId]
   * 
   * @param {string} [baseUri] Gets the URI used as the base for all cloud
   * service requests.
   * 
   * @param {Array} filters
   */
  function AutoscaleClient(credentials, baseUri, filters) {
    if (credentials === null || credentials === undefined) {
      throw new Error('credentials cannot be null.');
    }
    
    AutoscaleClient['super_'].call(this, credentials, filters);
    
    this.credentials = credentials;
    this.baseUri = baseUri;
    if (this.baseUri === null || this.baseUri === undefined) {
      this.baseUri = 'https://management.core.windows.net';
    }
    if (this.apiVersion === null || this.apiVersion === undefined) {
      this.apiVersion = '2014-04';
    }
    if (this.longRunningOperationInitialTimeout === null || this.longRunningOperationInitialTimeout === undefined) {
      this.longRunningOperationInitialTimeout = -1;
    }
    if (this.longRunningOperationRetryTimeout === null || this.longRunningOperationRetryTimeout === undefined) {
      this.longRunningOperationRetryTimeout = -1;
    }
    /**
     * Provides an instance of the [SettingOperations](-SettingOperations.html)
     * object.
     * @type {object}
     */
    this.settings = new SettingOperations(this);
  }
  
  util.inherits(AutoscaleClient, Service);
  
  
  return AutoscaleClient;
})();
exports.AutoscaleClient = AutoscaleClient;

var SettingOperations = ( /** @lends SettingOperations */ function() {
  /**
   * @class
   * Operations for managing the autoscale settings.
   * __NOTE__: An instance of this class is automatically created for an
   * instance of the [AutoscaleClient] {@link AutoscaleClient~AutoscaleClient}.
   * See [settings] {@link AutoscaleClient~AutoscaleClient#settings}.
   * Initializes a new instance of the SettingOperations class.
   * @constructor
   * 
   * @param {AutoscaleClient} client Reference to the service client.
   */
  function SettingOperations(client) {
    this.client = client;
  }
  
  /**
   * 
   * @param {string} resourceGroupName The resource name.
   * 
   * @param {string} autoscaleSettingName The autoscale setting name.
   * 
   * @param {AutoscaleSettingCreateOrUpdateParameters} parameters Parameters
   * supplied to the operation.
   * 
   * @param {string} [parameters.location] The location of the setting.
   * 
   * @param {object} [parameters.tags] The tags of the rule.
   * 
   * @param {AutoscaleSetting} [parameters.properties] The setting to create or
   * update.
   * 
   * @param {array} [parameters.properties.profiles]
   * 
   * @param {boolean} [parameters.properties.enabled]
   * 
   * @param {string} [parameters.properties.name]
   * 
   * @param {string} [parameters.properties.targetResourceUri]
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  SettingOperations.prototype.createOrUpdate = function(resourceGroupName, autoscaleSettingName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (autoscaleSettingName === null || autoscaleSettingName === undefined) {
      return callback(new Error('autoscaleSettingName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.properties) {
      if (parameters.properties.enabled === null || parameters.properties.enabled === undefined) {
        return callback(new Error('parameters.properties.enabled cannot be null.'));
      }
      if (parameters.properties.profiles) {
        for (var loweredIndex1 = 0; loweredIndex1 < parameters.properties.profiles.length; loweredIndex1 = loweredIndex1 + 1) {
          var profilesParameterItem = parameters.properties.profiles[loweredIndex1];
          if (profilesParameterItem.fixedDate) {
            if (profilesParameterItem.fixedDate.end === null || profilesParameterItem.fixedDate.end === undefined) {
              return callback(new Error('parameters.properties.profiles.fixedDate.end cannot be null.'));
            }
            if (profilesParameterItem.fixedDate.start === null || profilesParameterItem.fixedDate.start === undefined) {
              return callback(new Error('parameters.properties.profiles.fixedDate.start cannot be null.'));
            }
          }
          if (profilesParameterItem.rules) {
            for (var loweredIndex2 = 0; loweredIndex2 < profilesParameterItem.rules.length; loweredIndex2 = loweredIndex2 + 1) {
              var rulesParameterItem = profilesParameterItem.rules[loweredIndex2];
              if (rulesParameterItem.metricTrigger) {
                if (rulesParameterItem.metricTrigger.threshold === null || rulesParameterItem.metricTrigger.threshold === undefined) {
                  return callback(new Error('parameters.properties.profiles.rules.metricTrigger.threshold cannot be null.'));
                }
                if (rulesParameterItem.metricTrigger.timeGrain === null || rulesParameterItem.metricTrigger.timeGrain === undefined) {
                  return callback(new Error('parameters.properties.profiles.rules.metricTrigger.timeGrain cannot be null.'));
                }
                if (rulesParameterItem.metricTrigger.timeWindow === null || rulesParameterItem.metricTrigger.timeWindow === undefined) {
                  return callback(new Error('parameters.properties.profiles.rules.metricTrigger.timeWindow cannot be null.'));
                }
              }
              if (rulesParameterItem.scaleAction) {
                if (rulesParameterItem.scaleAction.cooldown === null || rulesParameterItem.scaleAction.cooldown === undefined) {
                  return callback(new Error('parameters.properties.profiles.rules.scaleAction.cooldown cannot be null.'));
                }
              }
            }
          }
        }
      }
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '/subscriptions/' + (this.client.credentials.subscriptionId ? this.client.credentials.subscriptionId.trim() : '') + '/resourcegroups/' + resourceGroupName.trim() + '/providers/microsoft.insights/autoscalesettings/' + autoscaleSettingName.trim() + '?';
    url2 = url2 + 'api-version=2014-04';
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Accept'] = 'application/json';
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = null;
    
    var autoscaleSettingCreateOrUpdateParametersValue = {};
    requestDoc = {};
    requestDoc['autoscaleSettingCreateOrUpdateParameters'] = autoscaleSettingCreateOrUpdateParametersValue;
    
    if (parameters.location) {
      autoscaleSettingCreateOrUpdateParametersValue['location'] = parameters.location;
    }
    
    var tagsDictionary = {};
    if (parameters.tags) {
      for (var tagsKey in parameters.tags) {
        var tagsValue = parameters.tags[tagsKey];
        tagsDictionary[tagsKey] = tagsValue;
      }
    }
    autoscaleSettingCreateOrUpdateParametersValue['tags'] = tagsDictionary;
    
    if (parameters.properties) {
      var propertiesValue = {};
      autoscaleSettingCreateOrUpdateParametersValue['properties'] = propertiesValue;
      
      if (parameters.properties.profiles) {
        var profilesArray = [];
        for (var loweredIndex3 = 0; loweredIndex3 < parameters.properties.profiles.length; loweredIndex3 = loweredIndex3 + 1) {
          var profilesItem = parameters.properties.profiles[loweredIndex3];
          var autoscaleProfileValue = {};
          profilesArray.push(autoscaleProfileValue);
          
          if (profilesItem.name) {
            autoscaleProfileValue['name'] = profilesItem.name;
          }
          
          if (profilesItem.capacity) {
            var capacityValue = {};
            autoscaleProfileValue['capacity'] = capacityValue;
            
            if (profilesItem.capacity.minimum) {
              capacityValue['minimum'] = profilesItem.capacity.minimum;
            }
            
            if (profilesItem.capacity.maximum) {
              capacityValue['maximum'] = profilesItem.capacity.maximum;
            }
            
            if (profilesItem.capacity.default) {
              capacityValue['default'] = profilesItem.capacity.default;
            }
          }
          
          if (profilesItem.rules) {
            var rulesArray = [];
            for (var loweredIndex4 = 0; loweredIndex4 < profilesItem.rules.length; loweredIndex4 = loweredIndex4 + 1) {
              var rulesItem = profilesItem.rules[loweredIndex4];
              var scaleRuleValue = {};
              rulesArray.push(scaleRuleValue);
              
              if (rulesItem.metricTrigger) {
                var metricTriggerValue = {};
                scaleRuleValue['metricTrigger'] = metricTriggerValue;
                
                if (rulesItem.metricTrigger.metricName) {
                  metricTriggerValue['metricName'] = rulesItem.metricTrigger.metricName;
                }
                
                if (rulesItem.metricTrigger.metricNamespace) {
                  metricTriggerValue['metricNamespace'] = rulesItem.metricTrigger.metricNamespace;
                }
                
                if (rulesItem.metricTrigger.metricResourceUri) {
                  metricTriggerValue['metricResourceUri'] = rulesItem.metricTrigger.metricResourceUri;
                }
                
                metricTriggerValue['timeGrain'] = rulesItem.metricTrigger.timeGrain.toIsoString();
                
                metricTriggerValue['statistic'] = rulesItem.metricTrigger.statistic ? rulesItem.metricTrigger.statistic.toString() : 'Average';
                
                metricTriggerValue['timeWindow'] = rulesItem.metricTrigger.timeWindow.toIsoString();
                
                metricTriggerValue['timeAggregation'] = rulesItem.metricTrigger.timeAggregation ? rulesItem.metricTrigger.timeAggregation.toString() : 'Average';
                
                metricTriggerValue['operator'] = rulesItem.metricTrigger.operator ? rulesItem.metricTrigger.operator.toString() : 'Equals';
                
                metricTriggerValue['threshold'] = rulesItem.metricTrigger.threshold;
              }
              
              if (rulesItem.scaleAction) {
                var scaleActionValue = {};
                scaleRuleValue['scaleAction'] = scaleActionValue;
                
                scaleActionValue['direction'] = rulesItem.scaleAction.direction ? rulesItem.scaleAction.direction.toString() : 'None';
                
                scaleActionValue['type'] = rulesItem.scaleAction.type ? rulesItem.scaleAction.type.toString() : 'ChangeSize';
                
                if (rulesItem.scaleAction.value) {
                  scaleActionValue['value'] = rulesItem.scaleAction.value;
                }
                
                scaleActionValue['cooldown'] = rulesItem.scaleAction.cooldown.toIsoString();
              }
            }
            autoscaleProfileValue['rules'] = rulesArray;
          }
          
          if (profilesItem.fixedDate) {
            var fixedDateValue = {};
            autoscaleProfileValue['fixedDate'] = fixedDateValue;
            
            if (profilesItem.fixedDate.timeZone) {
              fixedDateValue['timeZone'] = profilesItem.fixedDate.timeZone;
            }
            
            fixedDateValue['start'] = profilesItem.fixedDate.start;
            
            fixedDateValue['end'] = profilesItem.fixedDate.end;
          }
          
          if (profilesItem.recurrence) {
            var recurrenceValue = {};
            autoscaleProfileValue['recurrence'] = recurrenceValue;
            
            recurrenceValue['frequency'] = profilesItem.recurrence.frequency ? profilesItem.recurrence.frequency.toString() : 'None';
            
            if (profilesItem.recurrence.schedule) {
              var scheduleValue = {};
              recurrenceValue['schedule'] = scheduleValue;
              
              if (profilesItem.recurrence.schedule.timeZone) {
                scheduleValue['timeZone'] = profilesItem.recurrence.schedule.timeZone;
              }
              
              if (profilesItem.recurrence.schedule.days) {
                var daysArray = [];
                for (var loweredIndex5 = 0; loweredIndex5 < profilesItem.recurrence.schedule.days.length; loweredIndex5 = loweredIndex5 + 1) {
                  var daysItem = profilesItem.recurrence.schedule.days[loweredIndex5];
                  daysArray.push(daysItem);
                }
                scheduleValue['days'] = daysArray;
              }
              
              if (profilesItem.recurrence.schedule.hours) {
                var hoursArray = [];
                for (var loweredIndex6 = 0; loweredIndex6 < profilesItem.recurrence.schedule.hours.length; loweredIndex6 = loweredIndex6 + 1) {
                  var hoursItem = profilesItem.recurrence.schedule.hours[loweredIndex6];
                  hoursArray.push(hoursItem);
                }
                scheduleValue['hours'] = hoursArray;
              }
              
              if (profilesItem.recurrence.schedule.minutes) {
                var minutesArray = [];
                for (var loweredIndex7 = 0; loweredIndex7 < profilesItem.recurrence.schedule.minutes.length; loweredIndex7 = loweredIndex7 + 1) {
                  var minutesItem = profilesItem.recurrence.schedule.minutes[loweredIndex7];
                  minutesArray.push(minutesItem);
                }
                scheduleValue['minutes'] = minutesArray;
              }
            }
          }
        }
        propertiesValue['profiles'] = profilesArray;
      }
      
      propertiesValue['enabled'] = parameters.properties.enabled;
      
      if (parameters.properties.name) {
        propertiesValue['name'] = parameters.properties.name;
      }
      
      if (parameters.properties.targetResourceUri) {
        propertiesValue['targetResourceUri'] = parameters.properties.targetResourceUri;
      }
    }
    
    requestContent = JSON.stringify(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200 && statusCode !== 201) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * 
   * @param {string} resourceGroupName The resource name.
   * 
   * @param {string} autoscaleSettingName The autoscale setting name.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  SettingOperations.prototype.delete = function(resourceGroupName, autoscaleSettingName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (autoscaleSettingName === null || autoscaleSettingName === undefined) {
      return callback(new Error('autoscaleSettingName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '/subscriptions/' + (this.client.credentials.subscriptionId ? this.client.credentials.subscriptionId.trim() : '') + '/resourcegroups/' + resourceGroupName.trim() + '/providers/microsoft.insights/autoscalesettings/' + autoscaleSettingName.trim() + '?';
    url2 = url2 + 'api-version=2014-04';
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'DELETE';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Accept'] = 'application/json';
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * 
   * @param {string} resourceGroupName The resource name.
   * 
   * @param {string} autoscaleSettingName The autoscale setting name.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  SettingOperations.prototype.get = function(resourceGroupName, autoscaleSettingName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (autoscaleSettingName === null || autoscaleSettingName === undefined) {
      return callback(new Error('autoscaleSettingName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '/subscriptions/' + (this.client.credentials.subscriptionId ? this.client.credentials.subscriptionId.trim() : '') + '/resourcegroups/' + resourceGroupName.trim() + '/providers/microsoft.insights/autoscalesettings/' + autoscaleSettingName.trim() + '?';
    url2 = url2 + 'api-version=2014-04';
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Accept'] = 'application/json';
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = { tags: {} };
      var responseDoc = null;
      if (responseContent) {
        responseDoc = JSON.parse(responseContent);
      }
      
      if (responseDoc) {
        var idValue = responseDoc['id'];
        if (idValue) {
          var idInstance = idValue;
          result.id = idInstance;
        }
        
        var nameValue = responseDoc['name'];
        if (nameValue) {
          var nameInstance = nameValue;
          result.name = nameInstance;
        }
        
        var locationValue = responseDoc['location'];
        if (locationValue) {
          var locationInstance = locationValue;
          result.location = locationInstance;
        }
        
        var tagsSequenceElement = responseDoc['tags'];
        if (tagsSequenceElement) {
          for (var property in tagsSequenceElement) {
            var tagsKey = property;
            var tagsValue = tagsSequenceElement[property];
            result.tags[tagsKey] = tagsValue;
          }
        }
        
        var propertiesValue = responseDoc['properties'];
        if (propertiesValue) {
          var propertiesInstance = { profiles: [] };
          result.properties = propertiesInstance;
          
          var profilesArray = propertiesValue['profiles'];
          if (profilesArray) {
            for (var loweredIndex1 = 0; loweredIndex1 < profilesArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var profilesValue = profilesArray[loweredIndex1];
              var autoscaleProfileInstance = { rules: [] };
              propertiesInstance.profiles.push(autoscaleProfileInstance);
              
              var nameValue2 = profilesValue['name'];
              if (nameValue2) {
                var nameInstance2 = nameValue2;
                autoscaleProfileInstance.name = nameInstance2;
              }
              
              var capacityValue = profilesValue['capacity'];
              if (capacityValue) {
                var capacityInstance = {};
                autoscaleProfileInstance.capacity = capacityInstance;
                
                var minimumValue = capacityValue['minimum'];
                if (minimumValue) {
                  var minimumInstance = minimumValue;
                  capacityInstance.minimum = minimumInstance;
                }
                
                var maximumValue = capacityValue['maximum'];
                if (maximumValue) {
                  var maximumInstance = maximumValue;
                  capacityInstance.maximum = maximumInstance;
                }
                
                var defaultValue = capacityValue['default'];
                if (defaultValue) {
                  var defaultInstance = defaultValue;
                  capacityInstance.default = defaultInstance;
                }
              }
              
              var rulesArray = profilesValue['rules'];
              if (rulesArray) {
                for (var loweredIndex2 = 0; loweredIndex2 < rulesArray.length; loweredIndex2 = loweredIndex2 + 1) {
                  var rulesValue = rulesArray[loweredIndex2];
                  var scaleRuleInstance = {};
                  autoscaleProfileInstance.rules.push(scaleRuleInstance);
                  
                  var metricTriggerValue = rulesValue['metricTrigger'];
                  if (metricTriggerValue) {
                    var metricTriggerInstance = {};
                    scaleRuleInstance.metricTrigger = metricTriggerInstance;
                    
                    var metricNameValue = metricTriggerValue['metricName'];
                    if (metricNameValue) {
                      var metricNameInstance = metricNameValue;
                      metricTriggerInstance.metricName = metricNameInstance;
                    }
                    
                    var metricNamespaceValue = metricTriggerValue['metricNamespace'];
                    if (metricNamespaceValue) {
                      var metricNamespaceInstance = metricNamespaceValue;
                      metricTriggerInstance.metricNamespace = metricNamespaceInstance;
                    }
                    
                    var metricResourceUriValue = metricTriggerValue['metricResourceUri'];
                    if (metricResourceUriValue) {
                      var metricResourceUriInstance = metricResourceUriValue;
                      metricTriggerInstance.metricResourceUri = metricResourceUriInstance;
                    }
                    
                    var timeGrainValue = metricTriggerValue['timeGrain'];
                    if (timeGrainValue) {
                      var timeGrainInstance = moment.duration(timeGrainValue);
                      metricTriggerInstance.timeGrain = timeGrainInstance;
                    }
                    
                    var statisticValue = metricTriggerValue['statistic'];
                    if (statisticValue) {
                      var statisticInstance = statisticValue;
                      metricTriggerInstance.statistic = statisticInstance;
                    }
                    
                    var timeWindowValue = metricTriggerValue['timeWindow'];
                    if (timeWindowValue) {
                      var timeWindowInstance = moment.duration(timeWindowValue);
                      metricTriggerInstance.timeWindow = timeWindowInstance;
                    }
                    
                    var timeAggregationValue = metricTriggerValue['timeAggregation'];
                    if (timeAggregationValue) {
                      var timeAggregationInstance = timeAggregationValue;
                      metricTriggerInstance.timeAggregation = timeAggregationInstance;
                    }
                    
                    var operatorValue = metricTriggerValue['operator'];
                    if (operatorValue) {
                      var operatorInstance = operatorValue;
                      metricTriggerInstance.operator = operatorInstance;
                    }
                    
                    var thresholdValue = metricTriggerValue['threshold'];
                    if (thresholdValue) {
                      var thresholdInstance = thresholdValue;
                      metricTriggerInstance.threshold = thresholdInstance;
                    }
                  }
                  
                  var scaleActionValue = rulesValue['scaleAction'];
                  if (scaleActionValue) {
                    var scaleActionInstance = {};
                    scaleRuleInstance.scaleAction = scaleActionInstance;
                    
                    var directionValue = scaleActionValue['direction'];
                    if (directionValue) {
                      var directionInstance = directionValue;
                      scaleActionInstance.direction = directionInstance;
                    }
                    
                    var typeValue = scaleActionValue['type'];
                    if (typeValue) {
                      var typeInstance = typeValue;
                      scaleActionInstance.type = typeInstance;
                    }
                    
                    var valueValue = scaleActionValue['value'];
                    if (valueValue) {
                      var valueInstance = valueValue;
                      scaleActionInstance.value = valueInstance;
                    }
                    
                    var cooldownValue = scaleActionValue['cooldown'];
                    if (cooldownValue) {
                      var cooldownInstance = moment.duration(cooldownValue);
                      scaleActionInstance.cooldown = cooldownInstance;
                    }
                  }
                }
              }
              
              var fixedDateValue = profilesValue['fixedDate'];
              if (fixedDateValue) {
                var fixedDateInstance = {};
                autoscaleProfileInstance.fixedDate = fixedDateInstance;
                
                var timeZoneValue = fixedDateValue['timeZone'];
                if (timeZoneValue) {
                  var timeZoneInstance = timeZoneValue;
                  fixedDateInstance.timeZone = timeZoneInstance;
                }
                
                var startValue = fixedDateValue['start'];
                if (startValue) {
                  var startInstance = startValue;
                  fixedDateInstance.start = startInstance;
                }
                
                var endValue = fixedDateValue['end'];
                if (endValue) {
                  var endInstance = endValue;
                  fixedDateInstance.end = endInstance;
                }
              }
              
              var recurrenceValue = profilesValue['recurrence'];
              if (recurrenceValue) {
                var recurrenceInstance = {};
                autoscaleProfileInstance.recurrence = recurrenceInstance;
                
                var frequencyValue = recurrenceValue['frequency'];
                if (frequencyValue) {
                  var frequencyInstance = frequencyValue;
                  recurrenceInstance.frequency = frequencyInstance;
                }
                
                var scheduleValue = recurrenceValue['schedule'];
                if (scheduleValue) {
                  var scheduleInstance = { days: [], hours: [], minutes: [] };
                  recurrenceInstance.schedule = scheduleInstance;
                  
                  var timeZoneValue2 = scheduleValue['timeZone'];
                  if (timeZoneValue2) {
                    var timeZoneInstance2 = timeZoneValue2;
                    scheduleInstance.timeZone = timeZoneInstance2;
                  }
                  
                  var daysArray = scheduleValue['days'];
                  if (daysArray) {
                    for (var loweredIndex3 = 0; loweredIndex3 < daysArray.length; loweredIndex3 = loweredIndex3 + 1) {
                      var daysValue = daysArray[loweredIndex3];
                      scheduleInstance.days.push(daysValue);
                    }
                  }
                  
                  var hoursArray = scheduleValue['hours'];
                  if (hoursArray) {
                    for (var loweredIndex4 = 0; loweredIndex4 < hoursArray.length; loweredIndex4 = loweredIndex4 + 1) {
                      var hoursValue = hoursArray[loweredIndex4];
                      scheduleInstance.hours.push(hoursValue);
                    }
                  }
                  
                  var minutesArray = scheduleValue['minutes'];
                  if (minutesArray) {
                    for (var loweredIndex5 = 0; loweredIndex5 < minutesArray.length; loweredIndex5 = loweredIndex5 + 1) {
                      var minutesValue = minutesArray[loweredIndex5];
                      scheduleInstance.minutes.push(minutesValue);
                    }
                  }
                }
              }
            }
          }
          
          var enabledValue = propertiesValue['enabled'];
          if (enabledValue) {
            var enabledInstance = enabledValue;
            propertiesInstance.enabled = enabledInstance;
          }
          
          var nameValue3 = propertiesValue['name'];
          if (nameValue3) {
            var nameInstance3 = nameValue3;
            propertiesInstance.name = nameInstance3;
          }
          
          var targetResourceUriValue = propertiesValue['targetResourceUri'];
          if (targetResourceUriValue) {
            var targetResourceUriInstance = targetResourceUriValue;
            propertiesInstance.targetResourceUri = targetResourceUriInstance;
          }
        }
      }
      
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * 
   * @param {string} resourceGroupName The resource name.
   * 
   * @param {string} [targetResourceUri] The resource uri of the target of the
   * autoscale setting.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  SettingOperations.prototype.list = function(resourceGroupName, targetResourceUri, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '/subscriptions/' + (this.client.credentials.subscriptionId ? this.client.credentials.subscriptionId.trim() : '') + '/resourcegroups/' + resourceGroupName.trim() + '/providers/microsoft.insights/autoscalesettings?';
    url2 = url2 + 'api-version=2014-04';
    if (targetResourceUri) {
      url2 = url2 + '&$filter=targetResourceUri eq ' + encodeURIComponent(targetResourceUri ? targetResourceUri.trim() : '');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Accept'] = 'application/json';
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = {};
      var responseDoc = null;
      if (responseContent) {
        responseDoc = JSON.parse(responseContent);
      }
      
      if (responseDoc) {
        var autoscaleSettingResourceCollectionInstance = { value: [] };
        result.autoscaleSettingResourceCollection = autoscaleSettingResourceCollectionInstance;
        
        var valueArray = responseDoc['value'];
        if (valueArray) {
          for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
            var valueValue = valueArray[loweredIndex1];
            var autoscaleSettingResourceInstance = { tags: {} };
            autoscaleSettingResourceCollectionInstance.value.push(autoscaleSettingResourceInstance);
            
            var idValue = valueValue['id'];
            if (idValue) {
              var idInstance = idValue;
              autoscaleSettingResourceInstance.id = idInstance;
            }
            
            var nameValue = valueValue['name'];
            if (nameValue) {
              var nameInstance = nameValue;
              autoscaleSettingResourceInstance.name = nameInstance;
            }
            
            var locationValue = valueValue['location'];
            if (locationValue) {
              var locationInstance = locationValue;
              autoscaleSettingResourceInstance.location = locationInstance;
            }
            
            var tagsSequenceElement = valueValue['tags'];
            if (tagsSequenceElement) {
              for (var property in tagsSequenceElement) {
                var tagsKey = property;
                var tagsValue = tagsSequenceElement[property];
                autoscaleSettingResourceInstance.tags[tagsKey] = tagsValue;
              }
            }
            
            var propertiesValue = valueValue['properties'];
            if (propertiesValue) {
              var propertiesInstance = { profiles: [] };
              autoscaleSettingResourceInstance.properties = propertiesInstance;
              
              var profilesArray = propertiesValue['profiles'];
              if (profilesArray) {
                for (var loweredIndex2 = 0; loweredIndex2 < profilesArray.length; loweredIndex2 = loweredIndex2 + 1) {
                  var profilesValue = profilesArray[loweredIndex2];
                  var autoscaleProfileInstance = { rules: [] };
                  propertiesInstance.profiles.push(autoscaleProfileInstance);
                  
                  var nameValue2 = profilesValue['name'];
                  if (nameValue2) {
                    var nameInstance2 = nameValue2;
                    autoscaleProfileInstance.name = nameInstance2;
                  }
                  
                  var capacityValue = profilesValue['capacity'];
                  if (capacityValue) {
                    var capacityInstance = {};
                    autoscaleProfileInstance.capacity = capacityInstance;
                    
                    var minimumValue = capacityValue['minimum'];
                    if (minimumValue) {
                      var minimumInstance = minimumValue;
                      capacityInstance.minimum = minimumInstance;
                    }
                    
                    var maximumValue = capacityValue['maximum'];
                    if (maximumValue) {
                      var maximumInstance = maximumValue;
                      capacityInstance.maximum = maximumInstance;
                    }
                    
                    var defaultValue = capacityValue['default'];
                    if (defaultValue) {
                      var defaultInstance = defaultValue;
                      capacityInstance.default = defaultInstance;
                    }
                  }
                  
                  var rulesArray = profilesValue['rules'];
                  if (rulesArray) {
                    for (var loweredIndex3 = 0; loweredIndex3 < rulesArray.length; loweredIndex3 = loweredIndex3 + 1) {
                      var rulesValue = rulesArray[loweredIndex3];
                      var scaleRuleInstance = {};
                      autoscaleProfileInstance.rules.push(scaleRuleInstance);
                      
                      var metricTriggerValue = rulesValue['metricTrigger'];
                      if (metricTriggerValue) {
                        var metricTriggerInstance = {};
                        scaleRuleInstance.metricTrigger = metricTriggerInstance;
                        
                        var metricNameValue = metricTriggerValue['metricName'];
                        if (metricNameValue) {
                          var metricNameInstance = metricNameValue;
                          metricTriggerInstance.metricName = metricNameInstance;
                        }
                        
                        var metricNamespaceValue = metricTriggerValue['metricNamespace'];
                        if (metricNamespaceValue) {
                          var metricNamespaceInstance = metricNamespaceValue;
                          metricTriggerInstance.metricNamespace = metricNamespaceInstance;
                        }
                        
                        var metricResourceUriValue = metricTriggerValue['metricResourceUri'];
                        if (metricResourceUriValue) {
                          var metricResourceUriInstance = metricResourceUriValue;
                          metricTriggerInstance.metricResourceUri = metricResourceUriInstance;
                        }
                        
                        var timeGrainValue = metricTriggerValue['timeGrain'];
                        if (timeGrainValue) {
                          var timeGrainInstance = moment.duration(timeGrainValue);
                          metricTriggerInstance.timeGrain = timeGrainInstance;
                        }
                        
                        var statisticValue = metricTriggerValue['statistic'];
                        if (statisticValue) {
                          var statisticInstance = statisticValue;
                          metricTriggerInstance.statistic = statisticInstance;
                        }
                        
                        var timeWindowValue = metricTriggerValue['timeWindow'];
                        if (timeWindowValue) {
                          var timeWindowInstance = moment.duration(timeWindowValue);
                          metricTriggerInstance.timeWindow = timeWindowInstance;
                        }
                        
                        var timeAggregationValue = metricTriggerValue['timeAggregation'];
                        if (timeAggregationValue) {
                          var timeAggregationInstance = timeAggregationValue;
                          metricTriggerInstance.timeAggregation = timeAggregationInstance;
                        }
                        
                        var operatorValue = metricTriggerValue['operator'];
                        if (operatorValue) {
                          var operatorInstance = operatorValue;
                          metricTriggerInstance.operator = operatorInstance;
                        }
                        
                        var thresholdValue = metricTriggerValue['threshold'];
                        if (thresholdValue) {
                          var thresholdInstance = thresholdValue;
                          metricTriggerInstance.threshold = thresholdInstance;
                        }
                      }
                      
                      var scaleActionValue = rulesValue['scaleAction'];
                      if (scaleActionValue) {
                        var scaleActionInstance = {};
                        scaleRuleInstance.scaleAction = scaleActionInstance;
                        
                        var directionValue = scaleActionValue['direction'];
                        if (directionValue) {
                          var directionInstance = directionValue;
                          scaleActionInstance.direction = directionInstance;
                        }
                        
                        var typeValue = scaleActionValue['type'];
                        if (typeValue) {
                          var typeInstance = typeValue;
                          scaleActionInstance.type = typeInstance;
                        }
                        
                        var valueValue2 = scaleActionValue['value'];
                        if (valueValue2) {
                          var valueInstance = valueValue2;
                          scaleActionInstance.value = valueInstance;
                        }
                        
                        var cooldownValue = scaleActionValue['cooldown'];
                        if (cooldownValue) {
                          var cooldownInstance = moment.duration(cooldownValue);
                          scaleActionInstance.cooldown = cooldownInstance;
                        }
                      }
                    }
                  }
                  
                  var fixedDateValue = profilesValue['fixedDate'];
                  if (fixedDateValue) {
                    var fixedDateInstance = {};
                    autoscaleProfileInstance.fixedDate = fixedDateInstance;
                    
                    var timeZoneValue = fixedDateValue['timeZone'];
                    if (timeZoneValue) {
                      var timeZoneInstance = timeZoneValue;
                      fixedDateInstance.timeZone = timeZoneInstance;
                    }
                    
                    var startValue = fixedDateValue['start'];
                    if (startValue) {
                      var startInstance = startValue;
                      fixedDateInstance.start = startInstance;
                    }
                    
                    var endValue = fixedDateValue['end'];
                    if (endValue) {
                      var endInstance = endValue;
                      fixedDateInstance.end = endInstance;
                    }
                  }
                  
                  var recurrenceValue = profilesValue['recurrence'];
                  if (recurrenceValue) {
                    var recurrenceInstance = {};
                    autoscaleProfileInstance.recurrence = recurrenceInstance;
                    
                    var frequencyValue = recurrenceValue['frequency'];
                    if (frequencyValue) {
                      var frequencyInstance = frequencyValue;
                      recurrenceInstance.frequency = frequencyInstance;
                    }
                    
                    var scheduleValue = recurrenceValue['schedule'];
                    if (scheduleValue) {
                      var scheduleInstance = { days: [], hours: [], minutes: [] };
                      recurrenceInstance.schedule = scheduleInstance;
                      
                      var timeZoneValue2 = scheduleValue['timeZone'];
                      if (timeZoneValue2) {
                        var timeZoneInstance2 = timeZoneValue2;
                        scheduleInstance.timeZone = timeZoneInstance2;
                      }
                      
                      var daysArray = scheduleValue['days'];
                      if (daysArray) {
                        for (var loweredIndex4 = 0; loweredIndex4 < daysArray.length; loweredIndex4 = loweredIndex4 + 1) {
                          var daysValue = daysArray[loweredIndex4];
                          scheduleInstance.days.push(daysValue);
                        }
                      }
                      
                      var hoursArray = scheduleValue['hours'];
                      if (hoursArray) {
                        for (var loweredIndex5 = 0; loweredIndex5 < hoursArray.length; loweredIndex5 = loweredIndex5 + 1) {
                          var hoursValue = hoursArray[loweredIndex5];
                          scheduleInstance.hours.push(hoursValue);
                        }
                      }
                      
                      var minutesArray = scheduleValue['minutes'];
                      if (minutesArray) {
                        for (var loweredIndex6 = 0; loweredIndex6 < minutesArray.length; loweredIndex6 = loweredIndex6 + 1) {
                          var minutesValue = minutesArray[loweredIndex6];
                          scheduleInstance.minutes.push(minutesValue);
                        }
                      }
                    }
                  }
                }
              }
              
              var enabledValue = propertiesValue['enabled'];
              if (enabledValue) {
                var enabledInstance = enabledValue;
                propertiesInstance.enabled = enabledInstance;
              }
              
              var nameValue3 = propertiesValue['name'];
              if (nameValue3) {
                var nameInstance3 = nameValue3;
                propertiesInstance.name = nameInstance3;
              }
              
              var targetResourceUriValue = propertiesValue['targetResourceUri'];
              if (targetResourceUriValue) {
                var targetResourceUriInstance = targetResourceUriValue;
                propertiesInstance.targetResourceUri = targetResourceUriInstance;
              }
            }
          }
        }
      }
      
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * 
   * @param {string} resourceGroupName The resource name.
   * 
   * @param {string} autoscaleSettingName The autoscale setting name.
   * 
   * @param {AutoscaleSettingCreateOrUpdateParameters} parameters Parameters
   * supplied to the operation.
   * 
   * @param {string} [parameters.location] The location of the setting.
   * 
   * @param {object} [parameters.tags] The tags of the rule.
   * 
   * @param {AutoscaleSetting} [parameters.properties] The setting to create or
   * update.
   * 
   * @param {array} [parameters.properties.profiles]
   * 
   * @param {boolean} [parameters.properties.enabled]
   * 
   * @param {string} [parameters.properties.name]
   * 
   * @param {string} [parameters.properties.targetResourceUri]
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  SettingOperations.prototype.update = function(resourceGroupName, autoscaleSettingName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (autoscaleSettingName === null || autoscaleSettingName === undefined) {
      return callback(new Error('autoscaleSettingName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.properties) {
      if (parameters.properties.enabled === null || parameters.properties.enabled === undefined) {
        return callback(new Error('parameters.properties.enabled cannot be null.'));
      }
      if (parameters.properties.profiles) {
        for (var loweredIndex1 = 0; loweredIndex1 < parameters.properties.profiles.length; loweredIndex1 = loweredIndex1 + 1) {
          var profilesParameterItem = parameters.properties.profiles[loweredIndex1];
          if (profilesParameterItem.fixedDate) {
            if (profilesParameterItem.fixedDate.end === null || profilesParameterItem.fixedDate.end === undefined) {
              return callback(new Error('parameters.properties.profiles.fixedDate.end cannot be null.'));
            }
            if (profilesParameterItem.fixedDate.start === null || profilesParameterItem.fixedDate.start === undefined) {
              return callback(new Error('parameters.properties.profiles.fixedDate.start cannot be null.'));
            }
          }
          if (profilesParameterItem.rules) {
            for (var loweredIndex2 = 0; loweredIndex2 < profilesParameterItem.rules.length; loweredIndex2 = loweredIndex2 + 1) {
              var rulesParameterItem = profilesParameterItem.rules[loweredIndex2];
              if (rulesParameterItem.metricTrigger) {
                if (rulesParameterItem.metricTrigger.threshold === null || rulesParameterItem.metricTrigger.threshold === undefined) {
                  return callback(new Error('parameters.properties.profiles.rules.metricTrigger.threshold cannot be null.'));
                }
                if (rulesParameterItem.metricTrigger.timeGrain === null || rulesParameterItem.metricTrigger.timeGrain === undefined) {
                  return callback(new Error('parameters.properties.profiles.rules.metricTrigger.timeGrain cannot be null.'));
                }
                if (rulesParameterItem.metricTrigger.timeWindow === null || rulesParameterItem.metricTrigger.timeWindow === undefined) {
                  return callback(new Error('parameters.properties.profiles.rules.metricTrigger.timeWindow cannot be null.'));
                }
              }
              if (rulesParameterItem.scaleAction) {
                if (rulesParameterItem.scaleAction.cooldown === null || rulesParameterItem.scaleAction.cooldown === undefined) {
                  return callback(new Error('parameters.properties.profiles.rules.scaleAction.cooldown cannot be null.'));
                }
              }
            }
          }
        }
      }
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '/subscriptions/' + (this.client.credentials.subscriptionId ? this.client.credentials.subscriptionId.trim() : '') + '/resourcegroups/' + resourceGroupName.trim() + '/providers/microsoft.insights/autoscalesettings/' + autoscaleSettingName.trim() + '?';
    url2 = url2 + 'api-version=2014-04';
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PATCH';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Accept'] = 'application/json';
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = null;
    
    var autoscaleSettingCreateOrUpdateParametersValue = {};
    requestDoc = {};
    requestDoc['autoscaleSettingCreateOrUpdateParameters'] = autoscaleSettingCreateOrUpdateParametersValue;
    
    if (parameters.location) {
      autoscaleSettingCreateOrUpdateParametersValue['location'] = parameters.location;
    }
    
    var tagsDictionary = {};
    if (parameters.tags) {
      for (var tagsKey in parameters.tags) {
        var tagsValue = parameters.tags[tagsKey];
        tagsDictionary[tagsKey] = tagsValue;
      }
    }
    autoscaleSettingCreateOrUpdateParametersValue['tags'] = tagsDictionary;
    
    if (parameters.properties) {
      var propertiesValue = {};
      autoscaleSettingCreateOrUpdateParametersValue['properties'] = propertiesValue;
      
      if (parameters.properties.profiles) {
        var profilesArray = [];
        for (var loweredIndex3 = 0; loweredIndex3 < parameters.properties.profiles.length; loweredIndex3 = loweredIndex3 + 1) {
          var profilesItem = parameters.properties.profiles[loweredIndex3];
          var autoscaleProfileValue = {};
          profilesArray.push(autoscaleProfileValue);
          
          if (profilesItem.name) {
            autoscaleProfileValue['name'] = profilesItem.name;
          }
          
          if (profilesItem.capacity) {
            var capacityValue = {};
            autoscaleProfileValue['capacity'] = capacityValue;
            
            if (profilesItem.capacity.minimum) {
              capacityValue['minimum'] = profilesItem.capacity.minimum;
            }
            
            if (profilesItem.capacity.maximum) {
              capacityValue['maximum'] = profilesItem.capacity.maximum;
            }
            
            if (profilesItem.capacity.default) {
              capacityValue['default'] = profilesItem.capacity.default;
            }
          }
          
          if (profilesItem.rules) {
            var rulesArray = [];
            for (var loweredIndex4 = 0; loweredIndex4 < profilesItem.rules.length; loweredIndex4 = loweredIndex4 + 1) {
              var rulesItem = profilesItem.rules[loweredIndex4];
              var scaleRuleValue = {};
              rulesArray.push(scaleRuleValue);
              
              if (rulesItem.metricTrigger) {
                var metricTriggerValue = {};
                scaleRuleValue['metricTrigger'] = metricTriggerValue;
                
                if (rulesItem.metricTrigger.metricName) {
                  metricTriggerValue['metricName'] = rulesItem.metricTrigger.metricName;
                }
                
                if (rulesItem.metricTrigger.metricNamespace) {
                  metricTriggerValue['metricNamespace'] = rulesItem.metricTrigger.metricNamespace;
                }
                
                if (rulesItem.metricTrigger.metricResourceUri) {
                  metricTriggerValue['metricResourceUri'] = rulesItem.metricTrigger.metricResourceUri;
                }
                
                metricTriggerValue['timeGrain'] = rulesItem.metricTrigger.timeGrain.toIsoString();
                
                metricTriggerValue['statistic'] = rulesItem.metricTrigger.statistic ? rulesItem.metricTrigger.statistic.toString() : 'Average';
                
                metricTriggerValue['timeWindow'] = rulesItem.metricTrigger.timeWindow.toIsoString();
                
                metricTriggerValue['timeAggregation'] = rulesItem.metricTrigger.timeAggregation ? rulesItem.metricTrigger.timeAggregation.toString() : 'Average';
                
                metricTriggerValue['operator'] = rulesItem.metricTrigger.operator ? rulesItem.metricTrigger.operator.toString() : 'Equals';
                
                metricTriggerValue['threshold'] = rulesItem.metricTrigger.threshold;
              }
              
              if (rulesItem.scaleAction) {
                var scaleActionValue = {};
                scaleRuleValue['scaleAction'] = scaleActionValue;
                
                scaleActionValue['direction'] = rulesItem.scaleAction.direction ? rulesItem.scaleAction.direction.toString() : 'None';
                
                scaleActionValue['type'] = rulesItem.scaleAction.type ? rulesItem.scaleAction.type.toString() : 'ChangeSize';
                
                if (rulesItem.scaleAction.value) {
                  scaleActionValue['value'] = rulesItem.scaleAction.value;
                }
                
                scaleActionValue['cooldown'] = rulesItem.scaleAction.cooldown.toIsoString();
              }
            }
            autoscaleProfileValue['rules'] = rulesArray;
          }
          
          if (profilesItem.fixedDate) {
            var fixedDateValue = {};
            autoscaleProfileValue['fixedDate'] = fixedDateValue;
            
            if (profilesItem.fixedDate.timeZone) {
              fixedDateValue['timeZone'] = profilesItem.fixedDate.timeZone;
            }
            
            fixedDateValue['start'] = profilesItem.fixedDate.start;
            
            fixedDateValue['end'] = profilesItem.fixedDate.end;
          }
          
          if (profilesItem.recurrence) {
            var recurrenceValue = {};
            autoscaleProfileValue['recurrence'] = recurrenceValue;
            
            recurrenceValue['frequency'] = profilesItem.recurrence.frequency ? profilesItem.recurrence.frequency.toString() : 'None';
            
            if (profilesItem.recurrence.schedule) {
              var scheduleValue = {};
              recurrenceValue['schedule'] = scheduleValue;
              
              if (profilesItem.recurrence.schedule.timeZone) {
                scheduleValue['timeZone'] = profilesItem.recurrence.schedule.timeZone;
              }
              
              if (profilesItem.recurrence.schedule.days) {
                var daysArray = [];
                for (var loweredIndex5 = 0; loweredIndex5 < profilesItem.recurrence.schedule.days.length; loweredIndex5 = loweredIndex5 + 1) {
                  var daysItem = profilesItem.recurrence.schedule.days[loweredIndex5];
                  daysArray.push(daysItem);
                }
                scheduleValue['days'] = daysArray;
              }
              
              if (profilesItem.recurrence.schedule.hours) {
                var hoursArray = [];
                for (var loweredIndex6 = 0; loweredIndex6 < profilesItem.recurrence.schedule.hours.length; loweredIndex6 = loweredIndex6 + 1) {
                  var hoursItem = profilesItem.recurrence.schedule.hours[loweredIndex6];
                  hoursArray.push(hoursItem);
                }
                scheduleValue['hours'] = hoursArray;
              }
              
              if (profilesItem.recurrence.schedule.minutes) {
                var minutesArray = [];
                for (var loweredIndex7 = 0; loweredIndex7 < profilesItem.recurrence.schedule.minutes.length; loweredIndex7 = loweredIndex7 + 1) {
                  var minutesItem = profilesItem.recurrence.schedule.minutes[loweredIndex7];
                  minutesArray.push(minutesItem);
                }
                scheduleValue['minutes'] = minutesArray;
              }
            }
          }
        }
        propertiesValue['profiles'] = profilesArray;
      }
      
      propertiesValue['enabled'] = parameters.properties.enabled;
      
      if (parameters.properties.name) {
        propertiesValue['name'] = parameters.properties.name;
      }
      
      if (parameters.properties.targetResourceUri) {
        propertiesValue['targetResourceUri'] = parameters.properties.targetResourceUri;
      }
    }
    
    requestContent = JSON.stringify(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200 && statusCode !== 201) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  return SettingOperations;
})();
