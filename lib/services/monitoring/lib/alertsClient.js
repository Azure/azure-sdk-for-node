/* jshint latedef:false */
/* jshint forin:false */
/* jshint noempty:false */

// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

'use strict';

var util = require('util');
var moment = require('moment');
var azureCommon = require('azure-common');
var Service = azureCommon.Service;
var WebResource = azureCommon.WebResource;

var AlertsClient = ( /** @lends AlertsClient */ function() {
  /**
   * @class
   * Initializes a new instance of the AlertsClient class.
   * @constructor
   * 
   * @param {SubscriptionCloudCredentials} credentials Gets subscription
   * credentials which uniquely identify Microsoft Azure subscription. The
   * subscription ID forms part of the URI for every service call.
   * 
   * @param {string} [credentials.subscriptionId]
   * 
   * @param {string} [baseUri] Gets the URI used as the base for all cloud
   * service requests.
   * 
   * @param {Array} filters
   */
  function AlertsClient(credentials, baseUri, filters) {
    if (credentials === null || credentials === undefined) {
      throw new Error('credentials cannot be null.');
    }
    
    AlertsClient['super_'].call(this, credentials, filters);
    
    this.credentials = credentials;
    this.baseUri = baseUri;
    if (this.baseUri === null || this.baseUri === undefined) {
      this.baseUri = 'https://management.core.windows.net';
    }
    if (this.apiVersion === null || this.apiVersion === undefined) {
      this.apiVersion = '2014-04';
    }
    if (this.longRunningOperationInitialTimeout === null || this.longRunningOperationInitialTimeout === undefined) {
      this.longRunningOperationInitialTimeout = -1;
    }
    if (this.longRunningOperationRetryTimeout === null || this.longRunningOperationRetryTimeout === undefined) {
      this.longRunningOperationRetryTimeout = -1;
    }
    /**
     * Provides an instance of the
     * [IncidentOperations](-IncidentOperations.html) object.
     * @type {object}
     */
    this.incidents = new IncidentOperations(this);
    /**
     * Provides an instance of the [RuleOperations](-RuleOperations.html)
     * object.
     * @type {object}
     */
    this.rules = new RuleOperations(this);
  }
  
  util.inherits(AlertsClient, Service);
  
  
  return AlertsClient;
})();
exports.AlertsClient = AlertsClient;

var IncidentOperations = ( /** @lends IncidentOperations */ function() {
  /**
   * @class
   * Operations for managing the alert incidents.
   * __NOTE__: An instance of this class is automatically created for an
   * instance of the [AlertsClient] {@link AlertsClient~AlertsClient}.
   * See [incidents] {@link AlertsClient~AlertsClient#incidents}.
   * Initializes a new instance of the IncidentOperations class.
   * @constructor
   * 
   * @param {AlertsClient} client Reference to the service client.
   */
  function IncidentOperations(client) {
    this.client = client;
  }
  
  /**
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} ruleName The name of the rule.
   * 
   * @param {string} incidentName The name of the incident to retrieve.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  IncidentOperations.prototype.get = function(resourceGroupName, ruleName, incidentName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (ruleName === null || ruleName === undefined) {
      return callback(new Error('ruleName cannot be null.'));
    }
    if (incidentName === null || incidentName === undefined) {
      return callback(new Error('incidentName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '/subscriptions/' + (this.client.credentials.subscriptionId ? this.client.credentials.subscriptionId.trim() : '') + '/resourcegroups/' + resourceGroupName.trim() + '/providers/microsoft.insights/alertrules/' + ruleName.trim() + '/incidents/' + incidentName.trim() + '?';
    url2 = url2 + 'api-version=2014-04';
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Accept'] = 'application/json';
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = {};
      var responseDoc = null;
      if (responseContent) {
        responseDoc = JSON.parse(responseContent);
      }
      
      if (responseDoc) {
        var incidentInstance = {};
        result.incident = incidentInstance;
        
        var nameValue = responseDoc['name'];
        if (nameValue) {
          var nameInstance = nameValue;
          incidentInstance.name = nameInstance;
        }
        
        var ruleNameValue = responseDoc['ruleName'];
        if (ruleNameValue) {
          var ruleNameInstance = ruleNameValue;
          incidentInstance.ruleName = ruleNameInstance;
        }
        
        var isActiveValue = responseDoc['isActive'];
        if (isActiveValue) {
          var isActiveInstance = isActiveValue;
          incidentInstance.isActive = isActiveInstance;
        }
        
        var activatedTimeValue = responseDoc['activatedTime'];
        if (activatedTimeValue) {
          var activatedTimeInstance = activatedTimeValue;
          incidentInstance.activatedTime = activatedTimeInstance;
        }
        
        var resolvedTimeValue = responseDoc['resolvedTime'];
        if (resolvedTimeValue) {
          var resolvedTimeInstance = resolvedTimeValue;
          incidentInstance.resolvedTime = resolvedTimeInstance;
        }
      }
      
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} ruleName The name of the rule.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  IncidentOperations.prototype.listForRule = function(resourceGroupName, ruleName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (ruleName === null || ruleName === undefined) {
      return callback(new Error('ruleName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '/subscriptions/' + (this.client.credentials.subscriptionId ? this.client.credentials.subscriptionId.trim() : '') + '/resourcegroups/' + resourceGroupName.trim() + '/providers/microsoft.insights/alertrules/' + ruleName.trim() + '/incidents?';
    url2 = url2 + 'api-version=2014-04';
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Accept'] = 'application/json';
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = { value: [] };
      var responseDoc = null;
      if (responseContent) {
        responseDoc = JSON.parse(responseContent);
      }
      
      if (responseDoc) {
        var valueArray = responseDoc['value'];
        if (valueArray) {
          for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
            var valueValue = valueArray[loweredIndex1];
            var incidentInstance = {};
            result.value.push(incidentInstance);
            
            var nameValue = valueValue['name'];
            if (nameValue) {
              var nameInstance = nameValue;
              incidentInstance.name = nameInstance;
            }
            
            var ruleNameValue = valueValue['ruleName'];
            if (ruleNameValue) {
              var ruleNameInstance = ruleNameValue;
              incidentInstance.ruleName = ruleNameInstance;
            }
            
            var isActiveValue = valueValue['isActive'];
            if (isActiveValue) {
              var isActiveInstance = isActiveValue;
              incidentInstance.isActive = isActiveInstance;
            }
            
            var activatedTimeValue = valueValue['activatedTime'];
            if (activatedTimeValue) {
              var activatedTimeInstance = activatedTimeValue;
              incidentInstance.activatedTime = activatedTimeInstance;
            }
            
            var resolvedTimeValue = valueValue['resolvedTime'];
            if (resolvedTimeValue) {
              var resolvedTimeInstance = resolvedTimeValue;
              incidentInstance.resolvedTime = resolvedTimeInstance;
            }
          }
        }
      }
      
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  return IncidentOperations;
})();

var RuleOperations = ( /** @lends RuleOperations */ function() {
  /**
   * @class
   * Operations for managing the alert rules.
   * __NOTE__: An instance of this class is automatically created for an
   * instance of the [AlertsClient] {@link AlertsClient~AlertsClient}.
   * See [rules] {@link AlertsClient~AlertsClient#rules}.
   * Initializes a new instance of the RuleOperations class.
   * @constructor
   * 
   * @param {AlertsClient} client Reference to the service client.
   */
  function RuleOperations(client) {
    this.client = client;
  }
  
  /**
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {RuleCreateOrUpdateParameters} parameters The rule to create or
   * update.
   * 
   * @param {string} [parameters.location] The location of the rule.
   * 
   * @param {object} [parameters.tags] The tags of the rule.
   * 
   * @param {Rule} [parameters.properties] The rule to create or update.
   * 
   * @param {string} [parameters.properties.name] Rule name.
   * 
   * @param {string} [parameters.properties.description] Rule description.
   * 
   * @param {boolean} [parameters.properties.isEnabled] A flag that determines
   * whether the rule is enabled or disabled.
   * 
   * @param {RuleCondition} [parameters.properties.condition] Rule condition.
   * 
   * @param {RuleAction} [parameters.properties.action] Rule action.
   * 
   * @param {date} [parameters.properties.lastUpdatedTime] Rule last updated
   * time.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  RuleOperations.prototype.createOrUpdate = function(resourceGroupName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.properties) {
      if (parameters.properties.isEnabled === null || parameters.properties.isEnabled === undefined) {
        return callback(new Error('parameters.properties.isEnabled cannot be null.'));
      }
      if (parameters.properties.lastUpdatedTime === null || parameters.properties.lastUpdatedTime === undefined) {
        return callback(new Error('parameters.properties.lastUpdatedTime cannot be null.'));
      }
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '/subscriptions/' + (this.client.credentials.subscriptionId ? this.client.credentials.subscriptionId.trim() : '') + '/resourcegroups/' + resourceGroupName.trim() + '/providers/microsoft.insights/alertrules/' + (parameters.properties.name ? parameters.properties.name.trim() : '') + '?';
    url2 = url2 + 'api-version=2014-04';
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Accept'] = 'application/json';
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = null;
    
    var ruleCreateOrUpdateParametersValue = {};
    requestDoc = {};
    requestDoc['ruleCreateOrUpdateParameters'] = ruleCreateOrUpdateParametersValue;
    
    if (parameters.location) {
      ruleCreateOrUpdateParametersValue['location'] = parameters.location;
    }
    
    var tagsDictionary = {};
    if (parameters.tags) {
      for (var tagsKey in parameters.tags) {
        var tagsValue = parameters.tags[tagsKey];
        tagsDictionary[tagsKey] = tagsValue;
      }
    }
    ruleCreateOrUpdateParametersValue['tags'] = tagsDictionary;
    
    if (parameters.properties) {
      var propertiesValue = {};
      ruleCreateOrUpdateParametersValue['properties'] = propertiesValue;
      
      if (parameters.properties.name) {
        propertiesValue['name'] = parameters.properties.name;
      }
      
      if (parameters.properties.description) {
        propertiesValue['description'] = parameters.properties.description;
      }
      
      propertiesValue['isEnabled'] = parameters.properties.isEnabled;
      
      if (parameters.properties.condition) {
        var conditionValue = {};
        propertiesValue['condition'] = conditionValue;
        if (parameters.properties.condition.type === 'Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.ThresholdRuleCondition') {
          conditionValue['odata.type'] = parameters.properties.condition.type;
          var derived = parameters.properties.condition;
          
          if (derived.dataSource) {
            var dataSourceValue = {};
            conditionValue['dataSource'] = dataSourceValue;
            if (derived.dataSource.type === 'Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.RuleMetricDataSource') {
              dataSourceValue['odata.type'] = derived.dataSource.type;
              var derived2 = derived.dataSource;
              
              if (derived2.resourceUri) {
                dataSourceValue['resourceUri'] = derived2.resourceUri;
              }
              
              if (derived2.metricNamespace) {
                dataSourceValue['metricNamespace'] = derived2.metricNamespace;
              }
              
              if (derived2.metricName) {
                dataSourceValue['metricName'] = derived2.metricName;
              }
            }
          }
          
          conditionValue['operator'] = derived.operator ? derived.operator.toString() : 'GreaterThan';
          
          conditionValue['threshold'] = derived.threshold;
          
          conditionValue['windowSize'] = derived.windowSize.toIsoString();
        }
        if (parameters.properties.condition.type === 'Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.LocationThresholdRuleCondition') {
          conditionValue['odata.type'] = parameters.properties.condition.type;
          var derived3 = parameters.properties.condition;
          
          if (derived3.dataSource) {
            var dataSourceValue2 = {};
            conditionValue['dataSource'] = dataSourceValue2;
            if (derived3.dataSource.type === 'Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.RuleMetricDataSource') {
              dataSourceValue2['odata.type'] = derived3.dataSource.type;
              var derived4 = derived3.dataSource;
              
              if (derived4.resourceUri) {
                dataSourceValue2['resourceUri'] = derived4.resourceUri;
              }
              
              if (derived4.metricNamespace) {
                dataSourceValue2['metricNamespace'] = derived4.metricNamespace;
              }
              
              if (derived4.metricName) {
                dataSourceValue2['metricName'] = derived4.metricName;
              }
            }
          }
          
          conditionValue['windowSize'] = derived3.windowSize.toIsoString();
          
          conditionValue['failedLocationCount'] = derived3.failedLocationCount;
        }
      }
      
      if (parameters.properties.action) {
        var actionValue = {};
        propertiesValue['action'] = actionValue;
        if (parameters.properties.action.type === 'Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.RuleEmailAction') {
          actionValue['odata.type'] = parameters.properties.action.type;
          var derived5 = parameters.properties.action;
          
          actionValue['sendToServiceOwners'] = derived5.sendToServiceOwners;
          
          if (derived5.customEmails) {
            var customEmailsArray = [];
            for (var loweredIndex1 = 0; loweredIndex1 < derived5.customEmails.length; loweredIndex1 = loweredIndex1 + 1) {
              var customEmailsItem = derived5.customEmails[loweredIndex1];
              customEmailsArray.push(customEmailsItem);
            }
            actionValue['customEmails'] = customEmailsArray;
          }
        }
      }
      
      propertiesValue['lastUpdatedTime'] = parameters.properties.lastUpdatedTime;
    }
    
    requestContent = JSON.stringify(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200 && statusCode !== 201) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} ruleName The name of the rule to delete.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  RuleOperations.prototype.delete = function(resourceGroupName, ruleName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (ruleName === null || ruleName === undefined) {
      return callback(new Error('ruleName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '/subscriptions/' + (this.client.credentials.subscriptionId ? this.client.credentials.subscriptionId.trim() : '') + '/resourcegroups/' + resourceGroupName.trim() + '/providers/microsoft.insights/alertrules/' + ruleName.trim() + '?';
    url2 = url2 + 'api-version=2014-04';
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'DELETE';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Accept'] = 'application/json';
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} ruleName The name of the rule to retrieve.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  RuleOperations.prototype.get = function(resourceGroupName, ruleName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (ruleName === null || ruleName === undefined) {
      return callback(new Error('ruleName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '/subscriptions/' + (this.client.credentials.subscriptionId ? this.client.credentials.subscriptionId.trim() : '') + '/resourcegroups/' + resourceGroupName.trim() + '/providers/microsoft.insights/alertrules/' + ruleName.trim() + '?';
    url2 = url2 + 'api-version=2014-04';
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Accept'] = 'application/json';
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = { tags: {} };
      var responseDoc = null;
      if (responseContent) {
        responseDoc = JSON.parse(responseContent);
      }
      
      if (responseDoc) {
        var idValue = responseDoc['id'];
        if (idValue) {
          var idInstance = idValue;
          result.id = idInstance;
        }
        
        var nameValue = responseDoc['name'];
        if (nameValue) {
          var nameInstance = nameValue;
          result.name = nameInstance;
        }
        
        var locationValue = responseDoc['location'];
        if (locationValue) {
          var locationInstance = locationValue;
          result.location = locationInstance;
        }
        
        var tagsSequenceElement = responseDoc['tags'];
        if (tagsSequenceElement) {
          for (var property in tagsSequenceElement) {
            var tagsKey = property;
            var tagsValue = tagsSequenceElement[property];
            result.tags[tagsKey] = tagsValue;
          }
        }
        
        var propertiesValue = responseDoc['properties'];
        if (propertiesValue) {
          var propertiesInstance = {};
          result.properties = propertiesInstance;
          
          var nameValue2 = propertiesValue['name'];
          if (nameValue2) {
            var nameInstance2 = nameValue2;
            propertiesInstance.name = nameInstance2;
          }
          
          var descriptionValue = propertiesValue['description'];
          if (descriptionValue) {
            var descriptionInstance = descriptionValue;
            propertiesInstance.description = descriptionInstance;
          }
          
          var isEnabledValue = propertiesValue['isEnabled'];
          if (isEnabledValue) {
            var isEnabledInstance = isEnabledValue;
            propertiesInstance.isEnabled = isEnabledInstance;
          }
          
          var conditionValue = propertiesValue['condition'];
          if (conditionValue) {
            var typeName = conditionValue['odata.type'];
            if (typeName === 'Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.ThresholdRuleCondition') {
              var thresholdRuleConditionInstance = {};
              
              var dataSourceValue = conditionValue['dataSource'];
              if (dataSourceValue) {
                var typeName2 = dataSourceValue['odata.type'];
                if (typeName2 === 'Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.RuleMetricDataSource') {
                  var ruleMetricDataSourceInstance = {};
                  
                  var resourceUriValue = dataSourceValue['resourceUri'];
                  if (resourceUriValue) {
                    var resourceUriInstance = resourceUriValue;
                    ruleMetricDataSourceInstance.resourceUri = resourceUriInstance;
                  }
                  
                  var metricNamespaceValue = dataSourceValue['metricNamespace'];
                  if (metricNamespaceValue) {
                    var metricNamespaceInstance = metricNamespaceValue;
                    ruleMetricDataSourceInstance.metricNamespace = metricNamespaceInstance;
                  }
                  
                  var metricNameValue = dataSourceValue['metricName'];
                  if (metricNameValue) {
                    var metricNameInstance = metricNameValue;
                    ruleMetricDataSourceInstance.metricName = metricNameInstance;
                  }
                  thresholdRuleConditionInstance.dataSource = ruleMetricDataSourceInstance;
                }
              }
              
              var operatorValue = conditionValue['operator'];
              if (operatorValue) {
                var operatorInstance = operatorValue;
                thresholdRuleConditionInstance.operator = operatorInstance;
              }
              
              var thresholdValue = conditionValue['threshold'];
              if (thresholdValue) {
                var thresholdInstance = thresholdValue;
                thresholdRuleConditionInstance.threshold = thresholdInstance;
              }
              
              var windowSizeValue = conditionValue['windowSize'];
              if (windowSizeValue) {
                var windowSizeInstance = moment.duration(windowSizeValue);
                thresholdRuleConditionInstance.windowSize = windowSizeInstance;
              }
              propertiesInstance.condition = thresholdRuleConditionInstance;
            }
            if (typeName === 'Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.LocationThresholdRuleCondition') {
              var locationThresholdRuleConditionInstance = {};
              
              var dataSourceValue2 = conditionValue['dataSource'];
              if (dataSourceValue2) {
                var typeName3 = dataSourceValue2['odata.type'];
                if (typeName3 === 'Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.RuleMetricDataSource') {
                  var ruleMetricDataSourceInstance2 = {};
                  
                  var resourceUriValue2 = dataSourceValue2['resourceUri'];
                  if (resourceUriValue2) {
                    var resourceUriInstance2 = resourceUriValue2;
                    ruleMetricDataSourceInstance2.resourceUri = resourceUriInstance2;
                  }
                  
                  var metricNamespaceValue2 = dataSourceValue2['metricNamespace'];
                  if (metricNamespaceValue2) {
                    var metricNamespaceInstance2 = metricNamespaceValue2;
                    ruleMetricDataSourceInstance2.metricNamespace = metricNamespaceInstance2;
                  }
                  
                  var metricNameValue2 = dataSourceValue2['metricName'];
                  if (metricNameValue2) {
                    var metricNameInstance2 = metricNameValue2;
                    ruleMetricDataSourceInstance2.metricName = metricNameInstance2;
                  }
                  locationThresholdRuleConditionInstance.dataSource = ruleMetricDataSourceInstance2;
                }
              }
              
              var windowSizeValue2 = conditionValue['windowSize'];
              if (windowSizeValue2) {
                var windowSizeInstance2 = moment.duration(windowSizeValue2);
                locationThresholdRuleConditionInstance.windowSize = windowSizeInstance2;
              }
              
              var failedLocationCountValue = conditionValue['failedLocationCount'];
              if (failedLocationCountValue) {
                var failedLocationCountInstance = failedLocationCountValue;
                locationThresholdRuleConditionInstance.failedLocationCount = failedLocationCountInstance;
              }
              propertiesInstance.condition = locationThresholdRuleConditionInstance;
            }
          }
          
          var actionValue = propertiesValue['action'];
          if (actionValue) {
            var typeName4 = actionValue['odata.type'];
            if (typeName4 === 'Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.RuleEmailAction') {
              var ruleEmailActionInstance = { customEmails: [] };
              
              var sendToServiceOwnersValue = actionValue['sendToServiceOwners'];
              if (sendToServiceOwnersValue) {
                var sendToServiceOwnersInstance = sendToServiceOwnersValue;
                ruleEmailActionInstance.sendToServiceOwners = sendToServiceOwnersInstance;
              }
              
              var customEmailsArray = actionValue['customEmails'];
              if (customEmailsArray) {
                for (var loweredIndex1 = 0; loweredIndex1 < customEmailsArray.length; loweredIndex1 = loweredIndex1 + 1) {
                  var customEmailsValue = customEmailsArray[loweredIndex1];
                  ruleEmailActionInstance.customEmails.push(customEmailsValue);
                }
              }
              propertiesInstance.action = ruleEmailActionInstance;
            }
          }
          
          var lastUpdatedTimeValue = propertiesValue['lastUpdatedTime'];
          if (lastUpdatedTimeValue) {
            var lastUpdatedTimeInstance = lastUpdatedTimeValue;
            propertiesInstance.lastUpdatedTime = lastUpdatedTimeInstance;
          }
        }
      }
      
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * List the alert rules within a resource group.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} [targetResourceUri] The resource uri of the target of the
   * alert rule.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  RuleOperations.prototype.list = function(resourceGroupName, targetResourceUri, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '/subscriptions/' + (this.client.credentials.subscriptionId ? this.client.credentials.subscriptionId.trim() : '') + '/resourcegroups/' + resourceGroupName.trim() + '/providers/microsoft.insights/alertrules?';
    url2 = url2 + 'api-version=2014-04';
    if (targetResourceUri) {
      url2 = url2 + '&$filter=targetResourceUri eq ' + encodeURIComponent(targetResourceUri ? targetResourceUri.trim() : '');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Accept'] = 'application/json';
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = {};
      var responseDoc = null;
      if (responseContent) {
        responseDoc = JSON.parse(responseContent);
      }
      
      if (responseDoc) {
        var ruleResourceCollectionInstance = { value: [] };
        result.ruleResourceCollection = ruleResourceCollectionInstance;
        
        var valueArray = responseDoc['value'];
        if (valueArray) {
          for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
            var valueValue = valueArray[loweredIndex1];
            var ruleResourceInstance = { tags: {} };
            ruleResourceCollectionInstance.value.push(ruleResourceInstance);
            
            var idValue = valueValue['id'];
            if (idValue) {
              var idInstance = idValue;
              ruleResourceInstance.id = idInstance;
            }
            
            var nameValue = valueValue['name'];
            if (nameValue) {
              var nameInstance = nameValue;
              ruleResourceInstance.name = nameInstance;
            }
            
            var locationValue = valueValue['location'];
            if (locationValue) {
              var locationInstance = locationValue;
              ruleResourceInstance.location = locationInstance;
            }
            
            var tagsSequenceElement = valueValue['tags'];
            if (tagsSequenceElement) {
              for (var property in tagsSequenceElement) {
                var tagsKey = property;
                var tagsValue = tagsSequenceElement[property];
                ruleResourceInstance.tags[tagsKey] = tagsValue;
              }
            }
            
            var propertiesValue = valueValue['properties'];
            if (propertiesValue) {
              var propertiesInstance = {};
              ruleResourceInstance.properties = propertiesInstance;
              
              var nameValue2 = propertiesValue['name'];
              if (nameValue2) {
                var nameInstance2 = nameValue2;
                propertiesInstance.name = nameInstance2;
              }
              
              var descriptionValue = propertiesValue['description'];
              if (descriptionValue) {
                var descriptionInstance = descriptionValue;
                propertiesInstance.description = descriptionInstance;
              }
              
              var isEnabledValue = propertiesValue['isEnabled'];
              if (isEnabledValue) {
                var isEnabledInstance = isEnabledValue;
                propertiesInstance.isEnabled = isEnabledInstance;
              }
              
              var conditionValue = propertiesValue['condition'];
              if (conditionValue) {
                var typeName = conditionValue['odata.type'];
                if (typeName === 'Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.ThresholdRuleCondition') {
                  var thresholdRuleConditionInstance = {};
                  
                  var dataSourceValue = conditionValue['dataSource'];
                  if (dataSourceValue) {
                    var typeName2 = dataSourceValue['odata.type'];
                    if (typeName2 === 'Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.RuleMetricDataSource') {
                      var ruleMetricDataSourceInstance = {};
                      
                      var resourceUriValue = dataSourceValue['resourceUri'];
                      if (resourceUriValue) {
                        var resourceUriInstance = resourceUriValue;
                        ruleMetricDataSourceInstance.resourceUri = resourceUriInstance;
                      }
                      
                      var metricNamespaceValue = dataSourceValue['metricNamespace'];
                      if (metricNamespaceValue) {
                        var metricNamespaceInstance = metricNamespaceValue;
                        ruleMetricDataSourceInstance.metricNamespace = metricNamespaceInstance;
                      }
                      
                      var metricNameValue = dataSourceValue['metricName'];
                      if (metricNameValue) {
                        var metricNameInstance = metricNameValue;
                        ruleMetricDataSourceInstance.metricName = metricNameInstance;
                      }
                      thresholdRuleConditionInstance.dataSource = ruleMetricDataSourceInstance;
                    }
                  }
                  
                  var operatorValue = conditionValue['operator'];
                  if (operatorValue) {
                    var operatorInstance = operatorValue;
                    thresholdRuleConditionInstance.operator = operatorInstance;
                  }
                  
                  var thresholdValue = conditionValue['threshold'];
                  if (thresholdValue) {
                    var thresholdInstance = thresholdValue;
                    thresholdRuleConditionInstance.threshold = thresholdInstance;
                  }
                  
                  var windowSizeValue = conditionValue['windowSize'];
                  if (windowSizeValue) {
                    var windowSizeInstance = moment.duration(windowSizeValue);
                    thresholdRuleConditionInstance.windowSize = windowSizeInstance;
                  }
                  propertiesInstance.condition = thresholdRuleConditionInstance;
                }
                if (typeName === 'Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.LocationThresholdRuleCondition') {
                  var locationThresholdRuleConditionInstance = {};
                  
                  var dataSourceValue2 = conditionValue['dataSource'];
                  if (dataSourceValue2) {
                    var typeName3 = dataSourceValue2['odata.type'];
                    if (typeName3 === 'Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.RuleMetricDataSource') {
                      var ruleMetricDataSourceInstance2 = {};
                      
                      var resourceUriValue2 = dataSourceValue2['resourceUri'];
                      if (resourceUriValue2) {
                        var resourceUriInstance2 = resourceUriValue2;
                        ruleMetricDataSourceInstance2.resourceUri = resourceUriInstance2;
                      }
                      
                      var metricNamespaceValue2 = dataSourceValue2['metricNamespace'];
                      if (metricNamespaceValue2) {
                        var metricNamespaceInstance2 = metricNamespaceValue2;
                        ruleMetricDataSourceInstance2.metricNamespace = metricNamespaceInstance2;
                      }
                      
                      var metricNameValue2 = dataSourceValue2['metricName'];
                      if (metricNameValue2) {
                        var metricNameInstance2 = metricNameValue2;
                        ruleMetricDataSourceInstance2.metricName = metricNameInstance2;
                      }
                      locationThresholdRuleConditionInstance.dataSource = ruleMetricDataSourceInstance2;
                    }
                  }
                  
                  var windowSizeValue2 = conditionValue['windowSize'];
                  if (windowSizeValue2) {
                    var windowSizeInstance2 = moment.duration(windowSizeValue2);
                    locationThresholdRuleConditionInstance.windowSize = windowSizeInstance2;
                  }
                  
                  var failedLocationCountValue = conditionValue['failedLocationCount'];
                  if (failedLocationCountValue) {
                    var failedLocationCountInstance = failedLocationCountValue;
                    locationThresholdRuleConditionInstance.failedLocationCount = failedLocationCountInstance;
                  }
                  propertiesInstance.condition = locationThresholdRuleConditionInstance;
                }
              }
              
              var actionValue = propertiesValue['action'];
              if (actionValue) {
                var typeName4 = actionValue['odata.type'];
                if (typeName4 === 'Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.RuleEmailAction') {
                  var ruleEmailActionInstance = { customEmails: [] };
                  
                  var sendToServiceOwnersValue = actionValue['sendToServiceOwners'];
                  if (sendToServiceOwnersValue) {
                    var sendToServiceOwnersInstance = sendToServiceOwnersValue;
                    ruleEmailActionInstance.sendToServiceOwners = sendToServiceOwnersInstance;
                  }
                  
                  var customEmailsArray = actionValue['customEmails'];
                  if (customEmailsArray) {
                    for (var loweredIndex2 = 0; loweredIndex2 < customEmailsArray.length; loweredIndex2 = loweredIndex2 + 1) {
                      var customEmailsValue = customEmailsArray[loweredIndex2];
                      ruleEmailActionInstance.customEmails.push(customEmailsValue);
                    }
                  }
                  propertiesInstance.action = ruleEmailActionInstance;
                }
              }
              
              var lastUpdatedTimeValue = propertiesValue['lastUpdatedTime'];
              if (lastUpdatedTimeValue) {
                var lastUpdatedTimeInstance = lastUpdatedTimeValue;
                propertiesInstance.lastUpdatedTime = lastUpdatedTimeInstance;
              }
            }
          }
        }
      }
      
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {RuleCreateOrUpdateParameters} parameters The rule to update.
   * 
   * @param {string} [parameters.location] The location of the rule.
   * 
   * @param {object} [parameters.tags] The tags of the rule.
   * 
   * @param {Rule} [parameters.properties] The rule to create or update.
   * 
   * @param {string} [parameters.properties.name] Rule name.
   * 
   * @param {string} [parameters.properties.description] Rule description.
   * 
   * @param {boolean} [parameters.properties.isEnabled] A flag that determines
   * whether the rule is enabled or disabled.
   * 
   * @param {RuleCondition} [parameters.properties.condition] Rule condition.
   * 
   * @param {RuleAction} [parameters.properties.action] Rule action.
   * 
   * @param {date} [parameters.properties.lastUpdatedTime] Rule last updated
   * time.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  RuleOperations.prototype.update = function(resourceGroupName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.properties) {
      if (parameters.properties.isEnabled === null || parameters.properties.isEnabled === undefined) {
        return callback(new Error('parameters.properties.isEnabled cannot be null.'));
      }
      if (parameters.properties.lastUpdatedTime === null || parameters.properties.lastUpdatedTime === undefined) {
        return callback(new Error('parameters.properties.lastUpdatedTime cannot be null.'));
      }
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '/subscriptions/' + (this.client.credentials.subscriptionId ? this.client.credentials.subscriptionId.trim() : '') + '/resourcegroups/' + resourceGroupName.trim() + '/providers/microsoft.insights/alertrules/' + (parameters.properties.name ? parameters.properties.name.trim() : '') + '?';
    url2 = url2 + 'api-version=2014-04';
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PATCH';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Accept'] = 'application/json';
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = null;
    
    var ruleCreateOrUpdateParametersValue = {};
    requestDoc = {};
    requestDoc['ruleCreateOrUpdateParameters'] = ruleCreateOrUpdateParametersValue;
    
    if (parameters.location) {
      ruleCreateOrUpdateParametersValue['location'] = parameters.location;
    }
    
    var tagsDictionary = {};
    if (parameters.tags) {
      for (var tagsKey in parameters.tags) {
        var tagsValue = parameters.tags[tagsKey];
        tagsDictionary[tagsKey] = tagsValue;
      }
    }
    ruleCreateOrUpdateParametersValue['tags'] = tagsDictionary;
    
    if (parameters.properties) {
      var propertiesValue = {};
      ruleCreateOrUpdateParametersValue['properties'] = propertiesValue;
      
      if (parameters.properties.name) {
        propertiesValue['name'] = parameters.properties.name;
      }
      
      if (parameters.properties.description) {
        propertiesValue['description'] = parameters.properties.description;
      }
      
      propertiesValue['isEnabled'] = parameters.properties.isEnabled;
      
      if (parameters.properties.condition) {
        var conditionValue = {};
        propertiesValue['condition'] = conditionValue;
        if (parameters.properties.condition.type === 'Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.ThresholdRuleCondition') {
          conditionValue['odata.type'] = parameters.properties.condition.type;
          var derived = parameters.properties.condition;
          
          if (derived.dataSource) {
            var dataSourceValue = {};
            conditionValue['dataSource'] = dataSourceValue;
            if (derived.dataSource.type === 'Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.RuleMetricDataSource') {
              dataSourceValue['odata.type'] = derived.dataSource.type;
              var derived2 = derived.dataSource;
              
              if (derived2.resourceUri) {
                dataSourceValue['resourceUri'] = derived2.resourceUri;
              }
              
              if (derived2.metricNamespace) {
                dataSourceValue['metricNamespace'] = derived2.metricNamespace;
              }
              
              if (derived2.metricName) {
                dataSourceValue['metricName'] = derived2.metricName;
              }
            }
          }
          
          conditionValue['operator'] = derived.operator ? derived.operator.toString() : 'GreaterThan';
          
          conditionValue['threshold'] = derived.threshold;
          
          conditionValue['windowSize'] = derived.windowSize.toIsoString();
        }
        if (parameters.properties.condition.type === 'Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.LocationThresholdRuleCondition') {
          conditionValue['odata.type'] = parameters.properties.condition.type;
          var derived3 = parameters.properties.condition;
          
          if (derived3.dataSource) {
            var dataSourceValue2 = {};
            conditionValue['dataSource'] = dataSourceValue2;
            if (derived3.dataSource.type === 'Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.RuleMetricDataSource') {
              dataSourceValue2['odata.type'] = derived3.dataSource.type;
              var derived4 = derived3.dataSource;
              
              if (derived4.resourceUri) {
                dataSourceValue2['resourceUri'] = derived4.resourceUri;
              }
              
              if (derived4.metricNamespace) {
                dataSourceValue2['metricNamespace'] = derived4.metricNamespace;
              }
              
              if (derived4.metricName) {
                dataSourceValue2['metricName'] = derived4.metricName;
              }
            }
          }
          
          conditionValue['windowSize'] = derived3.windowSize.toIsoString();
          
          conditionValue['failedLocationCount'] = derived3.failedLocationCount;
        }
      }
      
      if (parameters.properties.action) {
        var actionValue = {};
        propertiesValue['action'] = actionValue;
        if (parameters.properties.action.type === 'Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.RuleEmailAction') {
          actionValue['odata.type'] = parameters.properties.action.type;
          var derived5 = parameters.properties.action;
          
          actionValue['sendToServiceOwners'] = derived5.sendToServiceOwners;
          
          if (derived5.customEmails) {
            var customEmailsArray = [];
            for (var loweredIndex1 = 0; loweredIndex1 < derived5.customEmails.length; loweredIndex1 = loweredIndex1 + 1) {
              var customEmailsItem = derived5.customEmails[loweredIndex1];
              customEmailsArray.push(customEmailsItem);
            }
            actionValue['customEmails'] = customEmailsArray;
          }
        }
      }
      
      propertiesValue['lastUpdatedTime'] = parameters.properties.lastUpdatedTime;
    }
    
    requestContent = JSON.stringify(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200 && statusCode !== 201) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  return RuleOperations;
})();
