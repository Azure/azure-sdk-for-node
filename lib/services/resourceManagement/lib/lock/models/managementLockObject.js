/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the ManagementLockObject class.
 * @constructor
 * Management lock information.
 *
 * @member {string} [level] Gets or sets the lock level of the management
 * lock. Possible values include: 'NotSpecified', 'CanNotDelete', 'ReadOnly'
 * 
 * @member {string} [notes] Gets or sets the notes of the management lock.
 * 
 * @member {string} [id] Gets or sets the Id of the lock.
 * 
 * @member {string} [type] Gets or sets the type of the lock.
 * 
 * @member {string} [name] Gets or sets the name of the lock.
 * 
 */
function ManagementLockObject() {
  ManagementLockObject['super_'].call(this);
}

util.inherits(ManagementLockObject, models['BaseResource']);

/**
 * Defines the metadata of ManagementLockObject
 *
 * @returns {object} metadata of ManagementLockObject
 *
 */
ManagementLockObject.prototype.mapper = function () {
  return {
    required: false,
    serializedName: 'ManagementLockObject',
    type: {
      name: 'Composite',
      className: 'ManagementLockObject',
      modelProperties: {
        level: {
          required: false,
          serializedName: 'properties.level',
          type: {
            name: 'String'
          }
        },
        notes: {
          required: false,
          serializedName: 'properties.notes',
          type: {
            name: 'String'
          }
        },
        id: {
          required: false,
          serializedName: 'id',
          type: {
            name: 'String'
          }
        },
        type: {
          required: false,
          serializedName: 'type',
          type: {
            name: 'String'
          }
        },
        name: {
          required: false,
          serializedName: 'name',
          type: {
            name: 'String'
          }
        }
      }
    }
  };
};

module.exports = ManagementLockObject;
