/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback, HttpOperationResponse } from 'ms-rest';
import * as models from '../models';


/**
 * @class
 * AuthorizationOperations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ManagementLockClient.
 */
export interface AuthorizationOperations {


    /**
     * Lists all of the available Microsoft.Authorization REST API operations.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OperationListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OperationListResult>>;

    /**
     * Lists all of the available Microsoft.Authorization REST API operations.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OperationListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OperationListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OperationListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.OperationListResult>;
    list(callback: ServiceCallback<models.OperationListResult>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OperationListResult>): void;


    /**
     * Lists all of the available Microsoft.Authorization REST API operations.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OperationListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OperationListResult>>;

    /**
     * Lists all of the available Microsoft.Authorization REST API operations.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OperationListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OperationListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OperationListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.OperationListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.OperationListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OperationListResult>): void;
}

/**
 * @class
 * ManagementLocks
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ManagementLockClient.
 */
export interface ManagementLocks {


    /**
     * @summary Creates or updates a management lock at the resource group level.
     *
     * When you apply a lock at a parent scope, all child resources inherit the
     * same lock. To create management locks, you must have access to
     * Microsoft.Authorization/* or Microsoft.Authorization/locks/* actions. Of the
     * built-in roles, only Owner and User Access Administrator are granted those
     * actions.
     *
     * @param {string} resourceGroupName The name of the resource group to lock.
     *
     * @param {string} lockName The lock name. The lock name can be a maximum of
     * 260 characters. It cannot contain <, > %, &, :, \, ?, /, or any control
     * characters.
     *
     * @param {object} parameters The management lock parameters.
     *
     * @param {string} parameters.level The level of the lock. Possible values are:
     * NotSpecified, CanNotDelete, ReadOnly. CanNotDelete means authorized users
     * are able to read and modify the resources, but not delete. ReadOnly means
     * authorized users can only read from a resource, but they can't modify or
     * delete it. Possible values include: 'NotSpecified', 'CanNotDelete',
     * 'ReadOnly'
     *
     * @param {string} [parameters.notes] Notes about the lock. Maximum of 512
     * characters.
     *
     * @param {array} [parameters.owners] The owners of the lock.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ManagementLockObject>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateAtResourceGroupLevelWithHttpOperationResponse(resourceGroupName: string, lockName: string, parameters: models.ManagementLockObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ManagementLockObject>>;

    /**
     * @summary Creates or updates a management lock at the resource group level.
     *
     * When you apply a lock at a parent scope, all child resources inherit the
     * same lock. To create management locks, you must have access to
     * Microsoft.Authorization/* or Microsoft.Authorization/locks/* actions. Of the
     * built-in roles, only Owner and User Access Administrator are granted those
     * actions.
     *
     * @param {string} resourceGroupName The name of the resource group to lock.
     *
     * @param {string} lockName The lock name. The lock name can be a maximum of
     * 260 characters. It cannot contain <, > %, &, :, \, ?, /, or any control
     * characters.
     *
     * @param {object} parameters The management lock parameters.
     *
     * @param {string} parameters.level The level of the lock. Possible values are:
     * NotSpecified, CanNotDelete, ReadOnly. CanNotDelete means authorized users
     * are able to read and modify the resources, but not delete. ReadOnly means
     * authorized users can only read from a resource, but they can't modify or
     * delete it. Possible values include: 'NotSpecified', 'CanNotDelete',
     * 'ReadOnly'
     *
     * @param {string} [parameters.notes] Notes about the lock. Maximum of 512
     * characters.
     *
     * @param {array} [parameters.owners] The owners of the lock.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ManagementLockObject} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ManagementLockObject} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ManagementLockObject} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdateAtResourceGroupLevel(resourceGroupName: string, lockName: string, parameters: models.ManagementLockObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ManagementLockObject>;
    createOrUpdateAtResourceGroupLevel(resourceGroupName: string, lockName: string, parameters: models.ManagementLockObject, callback: ServiceCallback<models.ManagementLockObject>): void;
    createOrUpdateAtResourceGroupLevel(resourceGroupName: string, lockName: string, parameters: models.ManagementLockObject, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ManagementLockObject>): void;


    /**
     * @summary Deletes a management lock at the resource group level.
     *
     * To delete management locks, you must have access to
     * Microsoft.Authorization/* or Microsoft.Authorization/locks/* actions. Of the
     * built-in roles, only Owner and User Access Administrator are granted those
     * actions.
     *
     * @param {string} resourceGroupName The name of the resource group containing
     * the lock.
     *
     * @param {string} lockName The name of lock to delete.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteAtResourceGroupLevelWithHttpOperationResponse(resourceGroupName: string, lockName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Deletes a management lock at the resource group level.
     *
     * To delete management locks, you must have access to
     * Microsoft.Authorization/* or Microsoft.Authorization/locks/* actions. Of the
     * built-in roles, only Owner and User Access Administrator are granted those
     * actions.
     *
     * @param {string} resourceGroupName The name of the resource group containing
     * the lock.
     *
     * @param {string} lockName The name of lock to delete.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteAtResourceGroupLevel(resourceGroupName: string, lockName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteAtResourceGroupLevel(resourceGroupName: string, lockName: string, callback: ServiceCallback<void>): void;
    deleteAtResourceGroupLevel(resourceGroupName: string, lockName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets a management lock at the resource group level.
     *
     * @param {string} resourceGroupName The name of the locked resource group.
     *
     * @param {string} lockName The name of the lock to get.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ManagementLockObject>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getAtResourceGroupLevelWithHttpOperationResponse(resourceGroupName: string, lockName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ManagementLockObject>>;

    /**
     * Gets a management lock at the resource group level.
     *
     * @param {string} resourceGroupName The name of the locked resource group.
     *
     * @param {string} lockName The name of the lock to get.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ManagementLockObject} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ManagementLockObject} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ManagementLockObject} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getAtResourceGroupLevel(resourceGroupName: string, lockName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ManagementLockObject>;
    getAtResourceGroupLevel(resourceGroupName: string, lockName: string, callback: ServiceCallback<models.ManagementLockObject>): void;
    getAtResourceGroupLevel(resourceGroupName: string, lockName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ManagementLockObject>): void;


    /**
     * Create or update a management lock by scope.
     *
     * @param {string} scope The scope for the lock. When providing a scope for the
     * assignment, use '/subscriptions/{subscriptionId}' for subscriptions,
     * '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}' for
     * resource groups, and
     * '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePathIfPresent}/{resourceType}/{resourceName}'
     * for resources.
     *
     * @param {string} lockName The name of lock.
     *
     * @param {object} parameters Create or update management lock parameters.
     *
     * @param {string} parameters.level The level of the lock. Possible values are:
     * NotSpecified, CanNotDelete, ReadOnly. CanNotDelete means authorized users
     * are able to read and modify the resources, but not delete. ReadOnly means
     * authorized users can only read from a resource, but they can't modify or
     * delete it. Possible values include: 'NotSpecified', 'CanNotDelete',
     * 'ReadOnly'
     *
     * @param {string} [parameters.notes] Notes about the lock. Maximum of 512
     * characters.
     *
     * @param {array} [parameters.owners] The owners of the lock.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ManagementLockObject>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateByScopeWithHttpOperationResponse(scope: string, lockName: string, parameters: models.ManagementLockObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ManagementLockObject>>;

    /**
     * Create or update a management lock by scope.
     *
     * @param {string} scope The scope for the lock. When providing a scope for the
     * assignment, use '/subscriptions/{subscriptionId}' for subscriptions,
     * '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}' for
     * resource groups, and
     * '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePathIfPresent}/{resourceType}/{resourceName}'
     * for resources.
     *
     * @param {string} lockName The name of lock.
     *
     * @param {object} parameters Create or update management lock parameters.
     *
     * @param {string} parameters.level The level of the lock. Possible values are:
     * NotSpecified, CanNotDelete, ReadOnly. CanNotDelete means authorized users
     * are able to read and modify the resources, but not delete. ReadOnly means
     * authorized users can only read from a resource, but they can't modify or
     * delete it. Possible values include: 'NotSpecified', 'CanNotDelete',
     * 'ReadOnly'
     *
     * @param {string} [parameters.notes] Notes about the lock. Maximum of 512
     * characters.
     *
     * @param {array} [parameters.owners] The owners of the lock.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ManagementLockObject} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ManagementLockObject} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ManagementLockObject} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdateByScope(scope: string, lockName: string, parameters: models.ManagementLockObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ManagementLockObject>;
    createOrUpdateByScope(scope: string, lockName: string, parameters: models.ManagementLockObject, callback: ServiceCallback<models.ManagementLockObject>): void;
    createOrUpdateByScope(scope: string, lockName: string, parameters: models.ManagementLockObject, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ManagementLockObject>): void;


    /**
     * Delete a management lock by scope.
     *
     * @param {string} scope The scope for the lock.
     *
     * @param {string} lockName The name of lock.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteByScopeWithHttpOperationResponse(scope: string, lockName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Delete a management lock by scope.
     *
     * @param {string} scope The scope for the lock.
     *
     * @param {string} lockName The name of lock.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteByScope(scope: string, lockName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteByScope(scope: string, lockName: string, callback: ServiceCallback<void>): void;
    deleteByScope(scope: string, lockName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Get a management lock by scope.
     *
     * @param {string} scope The scope for the lock.
     *
     * @param {string} lockName The name of lock.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ManagementLockObject>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getByScopeWithHttpOperationResponse(scope: string, lockName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ManagementLockObject>>;

    /**
     * Get a management lock by scope.
     *
     * @param {string} scope The scope for the lock.
     *
     * @param {string} lockName The name of lock.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ManagementLockObject} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ManagementLockObject} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ManagementLockObject} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getByScope(scope: string, lockName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ManagementLockObject>;
    getByScope(scope: string, lockName: string, callback: ServiceCallback<models.ManagementLockObject>): void;
    getByScope(scope: string, lockName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ManagementLockObject>): void;


    /**
     * @summary Creates or updates a management lock at the resource level or any
     * level below the resource.
     *
     * When you apply a lock at a parent scope, all child resources inherit the
     * same lock. To create management locks, you must have access to
     * Microsoft.Authorization/* or Microsoft.Authorization/locks/* actions. Of the
     * built-in roles, only Owner and User Access Administrator are granted those
     * actions.
     *
     * @param {string} resourceGroupName The name of the resource group containing
     * the resource to lock.
     *
     * @param {string} resourceProviderNamespace The resource provider namespace of
     * the resource to lock.
     *
     * @param {string} parentResourcePath The parent resource identity.
     *
     * @param {string} resourceType The resource type of the resource to lock.
     *
     * @param {string} resourceName The name of the resource to lock.
     *
     * @param {string} lockName The name of lock. The lock name can be a maximum of
     * 260 characters. It cannot contain <, > %, &, :, \, ?, /, or any control
     * characters.
     *
     * @param {object} parameters Parameters for creating or updating a  management
     * lock.
     *
     * @param {string} parameters.level The level of the lock. Possible values are:
     * NotSpecified, CanNotDelete, ReadOnly. CanNotDelete means authorized users
     * are able to read and modify the resources, but not delete. ReadOnly means
     * authorized users can only read from a resource, but they can't modify or
     * delete it. Possible values include: 'NotSpecified', 'CanNotDelete',
     * 'ReadOnly'
     *
     * @param {string} [parameters.notes] Notes about the lock. Maximum of 512
     * characters.
     *
     * @param {array} [parameters.owners] The owners of the lock.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ManagementLockObject>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateAtResourceLevelWithHttpOperationResponse(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, lockName: string, parameters: models.ManagementLockObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ManagementLockObject>>;

    /**
     * @summary Creates or updates a management lock at the resource level or any
     * level below the resource.
     *
     * When you apply a lock at a parent scope, all child resources inherit the
     * same lock. To create management locks, you must have access to
     * Microsoft.Authorization/* or Microsoft.Authorization/locks/* actions. Of the
     * built-in roles, only Owner and User Access Administrator are granted those
     * actions.
     *
     * @param {string} resourceGroupName The name of the resource group containing
     * the resource to lock.
     *
     * @param {string} resourceProviderNamespace The resource provider namespace of
     * the resource to lock.
     *
     * @param {string} parentResourcePath The parent resource identity.
     *
     * @param {string} resourceType The resource type of the resource to lock.
     *
     * @param {string} resourceName The name of the resource to lock.
     *
     * @param {string} lockName The name of lock. The lock name can be a maximum of
     * 260 characters. It cannot contain <, > %, &, :, \, ?, /, or any control
     * characters.
     *
     * @param {object} parameters Parameters for creating or updating a  management
     * lock.
     *
     * @param {string} parameters.level The level of the lock. Possible values are:
     * NotSpecified, CanNotDelete, ReadOnly. CanNotDelete means authorized users
     * are able to read and modify the resources, but not delete. ReadOnly means
     * authorized users can only read from a resource, but they can't modify or
     * delete it. Possible values include: 'NotSpecified', 'CanNotDelete',
     * 'ReadOnly'
     *
     * @param {string} [parameters.notes] Notes about the lock. Maximum of 512
     * characters.
     *
     * @param {array} [parameters.owners] The owners of the lock.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ManagementLockObject} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ManagementLockObject} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ManagementLockObject} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdateAtResourceLevel(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, lockName: string, parameters: models.ManagementLockObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ManagementLockObject>;
    createOrUpdateAtResourceLevel(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, lockName: string, parameters: models.ManagementLockObject, callback: ServiceCallback<models.ManagementLockObject>): void;
    createOrUpdateAtResourceLevel(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, lockName: string, parameters: models.ManagementLockObject, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ManagementLockObject>): void;


    /**
     * @summary Deletes the management lock of a resource or any level below the
     * resource.
     *
     * To delete management locks, you must have access to
     * Microsoft.Authorization/* or Microsoft.Authorization/locks/* actions. Of the
     * built-in roles, only Owner and User Access Administrator are granted those
     * actions.
     *
     * @param {string} resourceGroupName The name of the resource group containing
     * the resource with the lock to delete.
     *
     * @param {string} resourceProviderNamespace The resource provider namespace of
     * the resource with the lock to delete.
     *
     * @param {string} parentResourcePath The parent resource identity.
     *
     * @param {string} resourceType The resource type of the resource with the lock
     * to delete.
     *
     * @param {string} resourceName The name of the resource with the lock to
     * delete.
     *
     * @param {string} lockName The name of the lock to delete.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteAtResourceLevelWithHttpOperationResponse(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, lockName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Deletes the management lock of a resource or any level below the
     * resource.
     *
     * To delete management locks, you must have access to
     * Microsoft.Authorization/* or Microsoft.Authorization/locks/* actions. Of the
     * built-in roles, only Owner and User Access Administrator are granted those
     * actions.
     *
     * @param {string} resourceGroupName The name of the resource group containing
     * the resource with the lock to delete.
     *
     * @param {string} resourceProviderNamespace The resource provider namespace of
     * the resource with the lock to delete.
     *
     * @param {string} parentResourcePath The parent resource identity.
     *
     * @param {string} resourceType The resource type of the resource with the lock
     * to delete.
     *
     * @param {string} resourceName The name of the resource with the lock to
     * delete.
     *
     * @param {string} lockName The name of the lock to delete.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteAtResourceLevel(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, lockName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteAtResourceLevel(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, lockName: string, callback: ServiceCallback<void>): void;
    deleteAtResourceLevel(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, lockName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Get the management lock of a resource or any level below resource.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} resourceProviderNamespace The namespace of the resource
     * provider.
     *
     * @param {string} parentResourcePath An extra path parameter needed in some
     * services, like SQL Databases.
     *
     * @param {string} resourceType The type of the resource.
     *
     * @param {string} resourceName The name of the resource.
     *
     * @param {string} lockName The name of lock.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ManagementLockObject>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getAtResourceLevelWithHttpOperationResponse(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, lockName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ManagementLockObject>>;

    /**
     * Get the management lock of a resource or any level below resource.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} resourceProviderNamespace The namespace of the resource
     * provider.
     *
     * @param {string} parentResourcePath An extra path parameter needed in some
     * services, like SQL Databases.
     *
     * @param {string} resourceType The type of the resource.
     *
     * @param {string} resourceName The name of the resource.
     *
     * @param {string} lockName The name of lock.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ManagementLockObject} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ManagementLockObject} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ManagementLockObject} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getAtResourceLevel(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, lockName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ManagementLockObject>;
    getAtResourceLevel(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, lockName: string, callback: ServiceCallback<models.ManagementLockObject>): void;
    getAtResourceLevel(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, lockName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ManagementLockObject>): void;


    /**
     * @summary Creates or updates a management lock at the subscription level.
     *
     * When you apply a lock at a parent scope, all child resources inherit the
     * same lock. To create management locks, you must have access to
     * Microsoft.Authorization/* or Microsoft.Authorization/locks/* actions. Of the
     * built-in roles, only Owner and User Access Administrator are granted those
     * actions.
     *
     * @param {string} lockName The name of lock. The lock name can be a maximum of
     * 260 characters. It cannot contain <, > %, &, :, \, ?, /, or any control
     * characters.
     *
     * @param {object} parameters The management lock parameters.
     *
     * @param {string} parameters.level The level of the lock. Possible values are:
     * NotSpecified, CanNotDelete, ReadOnly. CanNotDelete means authorized users
     * are able to read and modify the resources, but not delete. ReadOnly means
     * authorized users can only read from a resource, but they can't modify or
     * delete it. Possible values include: 'NotSpecified', 'CanNotDelete',
     * 'ReadOnly'
     *
     * @param {string} [parameters.notes] Notes about the lock. Maximum of 512
     * characters.
     *
     * @param {array} [parameters.owners] The owners of the lock.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ManagementLockObject>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateAtSubscriptionLevelWithHttpOperationResponse(lockName: string, parameters: models.ManagementLockObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ManagementLockObject>>;

    /**
     * @summary Creates or updates a management lock at the subscription level.
     *
     * When you apply a lock at a parent scope, all child resources inherit the
     * same lock. To create management locks, you must have access to
     * Microsoft.Authorization/* or Microsoft.Authorization/locks/* actions. Of the
     * built-in roles, only Owner and User Access Administrator are granted those
     * actions.
     *
     * @param {string} lockName The name of lock. The lock name can be a maximum of
     * 260 characters. It cannot contain <, > %, &, :, \, ?, /, or any control
     * characters.
     *
     * @param {object} parameters The management lock parameters.
     *
     * @param {string} parameters.level The level of the lock. Possible values are:
     * NotSpecified, CanNotDelete, ReadOnly. CanNotDelete means authorized users
     * are able to read and modify the resources, but not delete. ReadOnly means
     * authorized users can only read from a resource, but they can't modify or
     * delete it. Possible values include: 'NotSpecified', 'CanNotDelete',
     * 'ReadOnly'
     *
     * @param {string} [parameters.notes] Notes about the lock. Maximum of 512
     * characters.
     *
     * @param {array} [parameters.owners] The owners of the lock.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ManagementLockObject} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ManagementLockObject} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ManagementLockObject} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdateAtSubscriptionLevel(lockName: string, parameters: models.ManagementLockObject, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ManagementLockObject>;
    createOrUpdateAtSubscriptionLevel(lockName: string, parameters: models.ManagementLockObject, callback: ServiceCallback<models.ManagementLockObject>): void;
    createOrUpdateAtSubscriptionLevel(lockName: string, parameters: models.ManagementLockObject, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ManagementLockObject>): void;


    /**
     * @summary Deletes the management lock at the subscription level.
     *
     * To delete management locks, you must have access to
     * Microsoft.Authorization/* or Microsoft.Authorization/locks/* actions. Of the
     * built-in roles, only Owner and User Access Administrator are granted those
     * actions.
     *
     * @param {string} lockName The name of lock to delete.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteAtSubscriptionLevelWithHttpOperationResponse(lockName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Deletes the management lock at the subscription level.
     *
     * To delete management locks, you must have access to
     * Microsoft.Authorization/* or Microsoft.Authorization/locks/* actions. Of the
     * built-in roles, only Owner and User Access Administrator are granted those
     * actions.
     *
     * @param {string} lockName The name of lock to delete.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteAtSubscriptionLevel(lockName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteAtSubscriptionLevel(lockName: string, callback: ServiceCallback<void>): void;
    deleteAtSubscriptionLevel(lockName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets a management lock at the subscription level.
     *
     * @param {string} lockName The name of the lock to get.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ManagementLockObject>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getAtSubscriptionLevelWithHttpOperationResponse(lockName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ManagementLockObject>>;

    /**
     * Gets a management lock at the subscription level.
     *
     * @param {string} lockName The name of the lock to get.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ManagementLockObject} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ManagementLockObject} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ManagementLockObject} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getAtSubscriptionLevel(lockName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ManagementLockObject>;
    getAtSubscriptionLevel(lockName: string, callback: ServiceCallback<models.ManagementLockObject>): void;
    getAtSubscriptionLevel(lockName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ManagementLockObject>): void;


    /**
     * Gets all the management locks for a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group containing
     * the locks to get.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] The filter to apply on the operation.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ManagementLockListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listAtResourceGroupLevelWithHttpOperationResponse(resourceGroupName: string, options?: { filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ManagementLockListResult>>;

    /**
     * Gets all the management locks for a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group containing
     * the locks to get.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] The filter to apply on the operation.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ManagementLockListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ManagementLockListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ManagementLockListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listAtResourceGroupLevel(resourceGroupName: string, options?: { filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.ManagementLockListResult>;
    listAtResourceGroupLevel(resourceGroupName: string, callback: ServiceCallback<models.ManagementLockListResult>): void;
    listAtResourceGroupLevel(resourceGroupName: string, options: { filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ManagementLockListResult>): void;


    /**
     * Gets all the management locks for a resource or any level below resource.
     *
     * @param {string} resourceGroupName The name of the resource group containing
     * the locked resource. The name is case insensitive.
     *
     * @param {string} resourceProviderNamespace The namespace of the resource
     * provider.
     *
     * @param {string} parentResourcePath The parent resource identity.
     *
     * @param {string} resourceType The resource type of the locked resource.
     *
     * @param {string} resourceName The name of the locked resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] The filter to apply on the operation.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ManagementLockListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listAtResourceLevelWithHttpOperationResponse(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, options?: { filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ManagementLockListResult>>;

    /**
     * Gets all the management locks for a resource or any level below resource.
     *
     * @param {string} resourceGroupName The name of the resource group containing
     * the locked resource. The name is case insensitive.
     *
     * @param {string} resourceProviderNamespace The namespace of the resource
     * provider.
     *
     * @param {string} parentResourcePath The parent resource identity.
     *
     * @param {string} resourceType The resource type of the locked resource.
     *
     * @param {string} resourceName The name of the locked resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] The filter to apply on the operation.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ManagementLockListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ManagementLockListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ManagementLockListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listAtResourceLevel(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, options?: { filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.ManagementLockListResult>;
    listAtResourceLevel(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, callback: ServiceCallback<models.ManagementLockListResult>): void;
    listAtResourceLevel(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, options: { filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ManagementLockListResult>): void;


    /**
     * Gets all the management locks for a subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] The filter to apply on the operation.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ManagementLockListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listAtSubscriptionLevelWithHttpOperationResponse(options?: { filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ManagementLockListResult>>;

    /**
     * Gets all the management locks for a subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] The filter to apply on the operation.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ManagementLockListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ManagementLockListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ManagementLockListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listAtSubscriptionLevel(options?: { filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.ManagementLockListResult>;
    listAtSubscriptionLevel(callback: ServiceCallback<models.ManagementLockListResult>): void;
    listAtSubscriptionLevel(options: { filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ManagementLockListResult>): void;


    /**
     * Gets all the management locks for a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ManagementLockListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listAtResourceGroupLevelNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ManagementLockListResult>>;

    /**
     * Gets all the management locks for a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ManagementLockListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ManagementLockListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ManagementLockListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listAtResourceGroupLevelNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ManagementLockListResult>;
    listAtResourceGroupLevelNext(nextPageLink: string, callback: ServiceCallback<models.ManagementLockListResult>): void;
    listAtResourceGroupLevelNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ManagementLockListResult>): void;


    /**
     * Gets all the management locks for a resource or any level below resource.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ManagementLockListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listAtResourceLevelNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ManagementLockListResult>>;

    /**
     * Gets all the management locks for a resource or any level below resource.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ManagementLockListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ManagementLockListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ManagementLockListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listAtResourceLevelNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ManagementLockListResult>;
    listAtResourceLevelNext(nextPageLink: string, callback: ServiceCallback<models.ManagementLockListResult>): void;
    listAtResourceLevelNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ManagementLockListResult>): void;


    /**
     * Gets all the management locks for a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ManagementLockListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listAtSubscriptionLevelNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ManagementLockListResult>>;

    /**
     * Gets all the management locks for a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ManagementLockListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ManagementLockListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ManagementLockListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listAtSubscriptionLevelNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ManagementLockListResult>;
    listAtSubscriptionLevelNext(nextPageLink: string, callback: ServiceCallback<models.ManagementLockListResult>): void;
    listAtSubscriptionLevelNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ManagementLockListResult>): void;
}
