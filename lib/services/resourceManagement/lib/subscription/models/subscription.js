/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.11.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * @class
 * Initializes a new instance of the Subscription class.
 * @constructor
 * Subscription information.
 * @member {string} [id] Gets or sets the ID of the resource
 * (/subscriptions/SubscriptionId).
 * 
 * @member {string} [subscriptionId] Gets or sets the subscription Id.
 * 
 * @member {string} [displayName] Gets or sets the subscription display name
 * 
 * @member {string} [state] Gets or sets the subscription state
 * 
 */
function Subscription(parameters) {
  if (parameters !== null && parameters !== undefined) {
    if (parameters.id !== null && parameters.id !== undefined) {
      this.id = parameters.id;
    }
    if (parameters.subscriptionId !== null && parameters.subscriptionId !== undefined) {
      this.subscriptionId = parameters.subscriptionId;
    }
    if (parameters.displayName !== null && parameters.displayName !== undefined) {
      this.displayName = parameters.displayName;
    }
    if (parameters.state !== null && parameters.state !== undefined) {
      this.state = parameters.state;
    }
  }    
}


/**
 * Validate the payload against the Subscription schema
 *
 * @param {JSON} payload
 *
 */
Subscription.prototype.serialize = function () {
  var payload = {};
  if (this['id'] !== null && this['id'] !== undefined) {
    if (typeof this['id'].valueOf() !== 'string') {
      throw new Error('this[\'id\'] must be of type string.');
    }
    payload['id'] = this['id'];
  }

  if (this['subscriptionId'] !== null && this['subscriptionId'] !== undefined) {
    if (typeof this['subscriptionId'].valueOf() !== 'string') {
      throw new Error('this[\'subscriptionId\'] must be of type string.');
    }
    payload['subscriptionId'] = this['subscriptionId'];
  }

  if (this['displayName'] !== null && this['displayName'] !== undefined) {
    if (typeof this['displayName'].valueOf() !== 'string') {
      throw new Error('this[\'displayName\'] must be of type string.');
    }
    payload['displayName'] = this['displayName'];
  }

  if (this['state'] !== null && this['state'] !== undefined) {
    if (typeof this['state'].valueOf() !== 'string') {
      throw new Error('this[\'state\'] must be of type string.');
    }
    payload['state'] = this['state'];
  }

  return payload;
};

/**
 * Deserialize the instance to Subscription schema
 *
 * @param {JSON} instance
 *
 */
Subscription.prototype.deserialize = function (instance) {
  if (instance) {
    if (instance['id'] !== null && instance['id'] !== undefined) {
      this['id'] = instance['id'];
    }

    if (instance['subscriptionId'] !== null && instance['subscriptionId'] !== undefined) {
      this['subscriptionId'] = instance['subscriptionId'];
    }

    if (instance['displayName'] !== null && instance['displayName'] !== undefined) {
      this['displayName'] = instance['displayName'];
    }

    if (instance['state'] !== null && instance['state'] !== undefined) {
      this['state'] = instance['state'];
    }
  }

  return this;
};

module.exports = Subscription;
