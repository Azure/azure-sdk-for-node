/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback, HttpOperationResponse } from 'ms-rest';
import * as models from '../models';


/**
 * @class
 * Appliances
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ManagedApplicationClient.
 */
export interface Appliances {


    /**
     * Gets the appliance.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} applianceName The name of the appliance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Appliance>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, applianceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Appliance>>;

    /**
     * Gets the appliance.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} applianceName The name of the appliance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Appliance} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Appliance} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Appliance} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, applianceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Appliance>;
    get(resourceGroupName: string, applianceName: string, callback: ServiceCallback<models.Appliance>): void;
    get(resourceGroupName: string, applianceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Appliance>): void;


    /**
     * Deletes the appliance.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} applianceName The name of the appliance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, applianceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the appliance.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} applianceName The name of the appliance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, applianceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, applianceName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, applianceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Creates a new appliance.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} applianceName The name of the appliance.
     *
     * @param {object} parameters Parameters supplied to the create or update an
     * appliance.
     *
     * @param {string} parameters.managedResourceGroupId The managed resource group
     * Id.
     *
     * @param {string} [parameters.applianceDefinitionId] The fully qualified path
     * of appliance definition Id.
     *
     * @param {object} [parameters.parameters] Name and value pairs that define the
     * appliance parameters. It can be a JObject or a well formed JSON string.
     *
     * @param {string} [parameters.uiDefinitionUri] The blob URI where the UI
     * definition file is located.
     *
     * @param {object} [parameters.plan] The plan information.
     *
     * @param {string} parameters.plan.name The plan name.
     *
     * @param {string} parameters.plan.publisher The publisher ID.
     *
     * @param {string} parameters.plan.product The product code.
     *
     * @param {string} [parameters.plan.promotionCode] The promotion code.
     *
     * @param {string} parameters.plan.version The plan's version.
     *
     * @param {string} [parameters.kind] The kind of the appliance. Allowed values
     * are MarketPlace and ServiceCatalog.
     *
     * @param {string} [parameters.managedBy] ID of the resource that manages this
     * resource.
     *
     * @param {object} [parameters.sku] The SKU of the resource.
     *
     * @param {string} parameters.sku.name The SKU name.
     *
     * @param {string} [parameters.sku.tier] The SKU tier.
     *
     * @param {string} [parameters.sku.size] The SKU size.
     *
     * @param {string} [parameters.sku.family] The SKU family.
     *
     * @param {string} [parameters.sku.model] The SKU model.
     *
     * @param {number} [parameters.sku.capacity] The SKU capacity.
     *
     * @param {object} [parameters.identity] The identity of the resource.
     *
     * @param {string} [parameters.identity.type] The identity type. Possible
     * values include: 'SystemAssigned'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Appliance>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, applianceName: string, parameters: models.Appliance, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Appliance>>;

    /**
     * Creates a new appliance.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} applianceName The name of the appliance.
     *
     * @param {object} parameters Parameters supplied to the create or update an
     * appliance.
     *
     * @param {string} parameters.managedResourceGroupId The managed resource group
     * Id.
     *
     * @param {string} [parameters.applianceDefinitionId] The fully qualified path
     * of appliance definition Id.
     *
     * @param {object} [parameters.parameters] Name and value pairs that define the
     * appliance parameters. It can be a JObject or a well formed JSON string.
     *
     * @param {string} [parameters.uiDefinitionUri] The blob URI where the UI
     * definition file is located.
     *
     * @param {object} [parameters.plan] The plan information.
     *
     * @param {string} parameters.plan.name The plan name.
     *
     * @param {string} parameters.plan.publisher The publisher ID.
     *
     * @param {string} parameters.plan.product The product code.
     *
     * @param {string} [parameters.plan.promotionCode] The promotion code.
     *
     * @param {string} parameters.plan.version The plan's version.
     *
     * @param {string} [parameters.kind] The kind of the appliance. Allowed values
     * are MarketPlace and ServiceCatalog.
     *
     * @param {string} [parameters.managedBy] ID of the resource that manages this
     * resource.
     *
     * @param {object} [parameters.sku] The SKU of the resource.
     *
     * @param {string} parameters.sku.name The SKU name.
     *
     * @param {string} [parameters.sku.tier] The SKU tier.
     *
     * @param {string} [parameters.sku.size] The SKU size.
     *
     * @param {string} [parameters.sku.family] The SKU family.
     *
     * @param {string} [parameters.sku.model] The SKU model.
     *
     * @param {number} [parameters.sku.capacity] The SKU capacity.
     *
     * @param {object} [parameters.identity] The identity of the resource.
     *
     * @param {string} [parameters.identity.type] The identity type. Possible
     * values include: 'SystemAssigned'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Appliance} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Appliance} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Appliance} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, applianceName: string, parameters: models.Appliance, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Appliance>;
    createOrUpdate(resourceGroupName: string, applianceName: string, parameters: models.Appliance, callback: ServiceCallback<models.Appliance>): void;
    createOrUpdate(resourceGroupName: string, applianceName: string, parameters: models.Appliance, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Appliance>): void;


    /**
     * Updates an existing appliance. The only value that can be updated via PATCH
     * currently is the tags.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} applianceName The name of the appliance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.parameters] Parameters supplied to update an
     * existing appliance.
     *
     * @param {string} options.parameters.managedResourceGroupId The managed
     * resource group Id.
     *
     * @param {string} [options.parameters.applianceDefinitionId] The fully
     * qualified path of appliance definition Id.
     *
     * @param {object} [options.parameters.parameters] Name and value pairs that
     * define the appliance parameters. It can be a JObject or a well formed JSON
     * string.
     *
     * @param {string} [options.parameters.uiDefinitionUri] The blob URI where the
     * UI definition file is located.
     *
     * @param {object} [options.parameters.plan] The plan information.
     *
     * @param {string} options.parameters.plan.name The plan name.
     *
     * @param {string} options.parameters.plan.publisher The publisher ID.
     *
     * @param {string} options.parameters.plan.product The product code.
     *
     * @param {string} [options.parameters.plan.promotionCode] The promotion code.
     *
     * @param {string} options.parameters.plan.version The plan's version.
     *
     * @param {string} [options.parameters.kind] The kind of the appliance. Allowed
     * values are MarketPlace and ServiceCatalog.
     *
     * @param {string} [options.parameters.managedBy] ID of the resource that
     * manages this resource.
     *
     * @param {object} [options.parameters.sku] The SKU of the resource.
     *
     * @param {string} options.parameters.sku.name The SKU name.
     *
     * @param {string} [options.parameters.sku.tier] The SKU tier.
     *
     * @param {string} [options.parameters.sku.size] The SKU size.
     *
     * @param {string} [options.parameters.sku.family] The SKU family.
     *
     * @param {string} [options.parameters.sku.model] The SKU model.
     *
     * @param {number} [options.parameters.sku.capacity] The SKU capacity.
     *
     * @param {object} [options.parameters.identity] The identity of the resource.
     *
     * @param {string} [options.parameters.identity.type] The identity type.
     * Possible values include: 'SystemAssigned'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Appliance>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, applianceName: string, options?: { parameters? : models.Appliance, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Appliance>>;

    /**
     * Updates an existing appliance. The only value that can be updated via PATCH
     * currently is the tags.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} applianceName The name of the appliance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.parameters] Parameters supplied to update an
     * existing appliance.
     *
     * @param {string} options.parameters.managedResourceGroupId The managed
     * resource group Id.
     *
     * @param {string} [options.parameters.applianceDefinitionId] The fully
     * qualified path of appliance definition Id.
     *
     * @param {object} [options.parameters.parameters] Name and value pairs that
     * define the appliance parameters. It can be a JObject or a well formed JSON
     * string.
     *
     * @param {string} [options.parameters.uiDefinitionUri] The blob URI where the
     * UI definition file is located.
     *
     * @param {object} [options.parameters.plan] The plan information.
     *
     * @param {string} options.parameters.plan.name The plan name.
     *
     * @param {string} options.parameters.plan.publisher The publisher ID.
     *
     * @param {string} options.parameters.plan.product The product code.
     *
     * @param {string} [options.parameters.plan.promotionCode] The promotion code.
     *
     * @param {string} options.parameters.plan.version The plan's version.
     *
     * @param {string} [options.parameters.kind] The kind of the appliance. Allowed
     * values are MarketPlace and ServiceCatalog.
     *
     * @param {string} [options.parameters.managedBy] ID of the resource that
     * manages this resource.
     *
     * @param {object} [options.parameters.sku] The SKU of the resource.
     *
     * @param {string} options.parameters.sku.name The SKU name.
     *
     * @param {string} [options.parameters.sku.tier] The SKU tier.
     *
     * @param {string} [options.parameters.sku.size] The SKU size.
     *
     * @param {string} [options.parameters.sku.family] The SKU family.
     *
     * @param {string} [options.parameters.sku.model] The SKU model.
     *
     * @param {number} [options.parameters.sku.capacity] The SKU capacity.
     *
     * @param {object} [options.parameters.identity] The identity of the resource.
     *
     * @param {string} [options.parameters.identity.type] The identity type.
     * Possible values include: 'SystemAssigned'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Appliance} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Appliance} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Appliance} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, applianceName: string, options?: { parameters? : models.Appliance, customHeaders? : { [headerName: string]: string; } }): Promise<models.Appliance>;
    update(resourceGroupName: string, applianceName: string, callback: ServiceCallback<models.Appliance>): void;
    update(resourceGroupName: string, applianceName: string, options: { parameters? : models.Appliance, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Appliance>): void;


    /**
     * Gets all the appliances within a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApplianceListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupWithHttpOperationResponse(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApplianceListResult>>;

    /**
     * Gets all the appliances within a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApplianceListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApplianceListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApplianceListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroup(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ApplianceListResult>;
    listByResourceGroup(resourceGroupName: string, callback: ServiceCallback<models.ApplianceListResult>): void;
    listByResourceGroup(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplianceListResult>): void;


    /**
     * Gets all the appliances within a subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApplianceListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listBySubscriptionWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApplianceListResult>>;

    /**
     * Gets all the appliances within a subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApplianceListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApplianceListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApplianceListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listBySubscription(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ApplianceListResult>;
    listBySubscription(callback: ServiceCallback<models.ApplianceListResult>): void;
    listBySubscription(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplianceListResult>): void;


    /**
     * Gets the appliance.
     *
     * @param {string} applianceId The fully qualified ID of the appliance,
     * including the appliance name and the appliance resource type. Use the
     * format,
     * /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/appliances/{appliance-name}
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Appliance>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getByIdWithHttpOperationResponse(applianceId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Appliance>>;

    /**
     * Gets the appliance.
     *
     * @param {string} applianceId The fully qualified ID of the appliance,
     * including the appliance name and the appliance resource type. Use the
     * format,
     * /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/appliances/{appliance-name}
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Appliance} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Appliance} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Appliance} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getById(applianceId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Appliance>;
    getById(applianceId: string, callback: ServiceCallback<models.Appliance>): void;
    getById(applianceId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Appliance>): void;


    /**
     * Deletes the appliance.
     *
     * @param {string} applianceId The fully qualified ID of the appliance,
     * including the appliance name and the appliance resource type. Use the
     * format,
     * /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/appliances/{appliance-name}
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteByIdWithHttpOperationResponse(applianceId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the appliance.
     *
     * @param {string} applianceId The fully qualified ID of the appliance,
     * including the appliance name and the appliance resource type. Use the
     * format,
     * /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/appliances/{appliance-name}
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteById(applianceId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteById(applianceId: string, callback: ServiceCallback<void>): void;
    deleteById(applianceId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Creates a new appliance.
     *
     * @param {string} applianceId The fully qualified ID of the appliance,
     * including the appliance name and the appliance resource type. Use the
     * format,
     * /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/appliances/{appliance-name}
     *
     * @param {object} parameters Parameters supplied to the create or update an
     * appliance.
     *
     * @param {string} parameters.managedResourceGroupId The managed resource group
     * Id.
     *
     * @param {string} [parameters.applianceDefinitionId] The fully qualified path
     * of appliance definition Id.
     *
     * @param {object} [parameters.parameters] Name and value pairs that define the
     * appliance parameters. It can be a JObject or a well formed JSON string.
     *
     * @param {string} [parameters.uiDefinitionUri] The blob URI where the UI
     * definition file is located.
     *
     * @param {object} [parameters.plan] The plan information.
     *
     * @param {string} parameters.plan.name The plan name.
     *
     * @param {string} parameters.plan.publisher The publisher ID.
     *
     * @param {string} parameters.plan.product The product code.
     *
     * @param {string} [parameters.plan.promotionCode] The promotion code.
     *
     * @param {string} parameters.plan.version The plan's version.
     *
     * @param {string} [parameters.kind] The kind of the appliance. Allowed values
     * are MarketPlace and ServiceCatalog.
     *
     * @param {string} [parameters.managedBy] ID of the resource that manages this
     * resource.
     *
     * @param {object} [parameters.sku] The SKU of the resource.
     *
     * @param {string} parameters.sku.name The SKU name.
     *
     * @param {string} [parameters.sku.tier] The SKU tier.
     *
     * @param {string} [parameters.sku.size] The SKU size.
     *
     * @param {string} [parameters.sku.family] The SKU family.
     *
     * @param {string} [parameters.sku.model] The SKU model.
     *
     * @param {number} [parameters.sku.capacity] The SKU capacity.
     *
     * @param {object} [parameters.identity] The identity of the resource.
     *
     * @param {string} [parameters.identity.type] The identity type. Possible
     * values include: 'SystemAssigned'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Appliance>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateByIdWithHttpOperationResponse(applianceId: string, parameters: models.Appliance, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Appliance>>;

    /**
     * Creates a new appliance.
     *
     * @param {string} applianceId The fully qualified ID of the appliance,
     * including the appliance name and the appliance resource type. Use the
     * format,
     * /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/appliances/{appliance-name}
     *
     * @param {object} parameters Parameters supplied to the create or update an
     * appliance.
     *
     * @param {string} parameters.managedResourceGroupId The managed resource group
     * Id.
     *
     * @param {string} [parameters.applianceDefinitionId] The fully qualified path
     * of appliance definition Id.
     *
     * @param {object} [parameters.parameters] Name and value pairs that define the
     * appliance parameters. It can be a JObject or a well formed JSON string.
     *
     * @param {string} [parameters.uiDefinitionUri] The blob URI where the UI
     * definition file is located.
     *
     * @param {object} [parameters.plan] The plan information.
     *
     * @param {string} parameters.plan.name The plan name.
     *
     * @param {string} parameters.plan.publisher The publisher ID.
     *
     * @param {string} parameters.plan.product The product code.
     *
     * @param {string} [parameters.plan.promotionCode] The promotion code.
     *
     * @param {string} parameters.plan.version The plan's version.
     *
     * @param {string} [parameters.kind] The kind of the appliance. Allowed values
     * are MarketPlace and ServiceCatalog.
     *
     * @param {string} [parameters.managedBy] ID of the resource that manages this
     * resource.
     *
     * @param {object} [parameters.sku] The SKU of the resource.
     *
     * @param {string} parameters.sku.name The SKU name.
     *
     * @param {string} [parameters.sku.tier] The SKU tier.
     *
     * @param {string} [parameters.sku.size] The SKU size.
     *
     * @param {string} [parameters.sku.family] The SKU family.
     *
     * @param {string} [parameters.sku.model] The SKU model.
     *
     * @param {number} [parameters.sku.capacity] The SKU capacity.
     *
     * @param {object} [parameters.identity] The identity of the resource.
     *
     * @param {string} [parameters.identity.type] The identity type. Possible
     * values include: 'SystemAssigned'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Appliance} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Appliance} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Appliance} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdateById(applianceId: string, parameters: models.Appliance, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Appliance>;
    createOrUpdateById(applianceId: string, parameters: models.Appliance, callback: ServiceCallback<models.Appliance>): void;
    createOrUpdateById(applianceId: string, parameters: models.Appliance, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Appliance>): void;


    /**
     * Updates an existing appliance. The only value that can be updated via PATCH
     * currently is the tags.
     *
     * @param {string} applianceId The fully qualified ID of the appliance,
     * including the appliance name and the appliance resource type. Use the
     * format,
     * /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/appliances/{appliance-name}
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.parameters] Parameters supplied to update an
     * existing appliance.
     *
     * @param {string} options.parameters.managedResourceGroupId The managed
     * resource group Id.
     *
     * @param {string} [options.parameters.applianceDefinitionId] The fully
     * qualified path of appliance definition Id.
     *
     * @param {object} [options.parameters.parameters] Name and value pairs that
     * define the appliance parameters. It can be a JObject or a well formed JSON
     * string.
     *
     * @param {string} [options.parameters.uiDefinitionUri] The blob URI where the
     * UI definition file is located.
     *
     * @param {object} [options.parameters.plan] The plan information.
     *
     * @param {string} options.parameters.plan.name The plan name.
     *
     * @param {string} options.parameters.plan.publisher The publisher ID.
     *
     * @param {string} options.parameters.plan.product The product code.
     *
     * @param {string} [options.parameters.plan.promotionCode] The promotion code.
     *
     * @param {string} options.parameters.plan.version The plan's version.
     *
     * @param {string} [options.parameters.kind] The kind of the appliance. Allowed
     * values are MarketPlace and ServiceCatalog.
     *
     * @param {string} [options.parameters.managedBy] ID of the resource that
     * manages this resource.
     *
     * @param {object} [options.parameters.sku] The SKU of the resource.
     *
     * @param {string} options.parameters.sku.name The SKU name.
     *
     * @param {string} [options.parameters.sku.tier] The SKU tier.
     *
     * @param {string} [options.parameters.sku.size] The SKU size.
     *
     * @param {string} [options.parameters.sku.family] The SKU family.
     *
     * @param {string} [options.parameters.sku.model] The SKU model.
     *
     * @param {number} [options.parameters.sku.capacity] The SKU capacity.
     *
     * @param {object} [options.parameters.identity] The identity of the resource.
     *
     * @param {string} [options.parameters.identity.type] The identity type.
     * Possible values include: 'SystemAssigned'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Appliance>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateByIdWithHttpOperationResponse(applianceId: string, options?: { parameters? : models.Appliance, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Appliance>>;

    /**
     * Updates an existing appliance. The only value that can be updated via PATCH
     * currently is the tags.
     *
     * @param {string} applianceId The fully qualified ID of the appliance,
     * including the appliance name and the appliance resource type. Use the
     * format,
     * /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/appliances/{appliance-name}
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.parameters] Parameters supplied to update an
     * existing appliance.
     *
     * @param {string} options.parameters.managedResourceGroupId The managed
     * resource group Id.
     *
     * @param {string} [options.parameters.applianceDefinitionId] The fully
     * qualified path of appliance definition Id.
     *
     * @param {object} [options.parameters.parameters] Name and value pairs that
     * define the appliance parameters. It can be a JObject or a well formed JSON
     * string.
     *
     * @param {string} [options.parameters.uiDefinitionUri] The blob URI where the
     * UI definition file is located.
     *
     * @param {object} [options.parameters.plan] The plan information.
     *
     * @param {string} options.parameters.plan.name The plan name.
     *
     * @param {string} options.parameters.plan.publisher The publisher ID.
     *
     * @param {string} options.parameters.plan.product The product code.
     *
     * @param {string} [options.parameters.plan.promotionCode] The promotion code.
     *
     * @param {string} options.parameters.plan.version The plan's version.
     *
     * @param {string} [options.parameters.kind] The kind of the appliance. Allowed
     * values are MarketPlace and ServiceCatalog.
     *
     * @param {string} [options.parameters.managedBy] ID of the resource that
     * manages this resource.
     *
     * @param {object} [options.parameters.sku] The SKU of the resource.
     *
     * @param {string} options.parameters.sku.name The SKU name.
     *
     * @param {string} [options.parameters.sku.tier] The SKU tier.
     *
     * @param {string} [options.parameters.sku.size] The SKU size.
     *
     * @param {string} [options.parameters.sku.family] The SKU family.
     *
     * @param {string} [options.parameters.sku.model] The SKU model.
     *
     * @param {number} [options.parameters.sku.capacity] The SKU capacity.
     *
     * @param {object} [options.parameters.identity] The identity of the resource.
     *
     * @param {string} [options.parameters.identity.type] The identity type.
     * Possible values include: 'SystemAssigned'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Appliance} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Appliance} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Appliance} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updateById(applianceId: string, options?: { parameters? : models.Appliance, customHeaders? : { [headerName: string]: string; } }): Promise<models.Appliance>;
    updateById(applianceId: string, callback: ServiceCallback<models.Appliance>): void;
    updateById(applianceId: string, options: { parameters? : models.Appliance, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Appliance>): void;


    /**
     * Deletes the appliance.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} applianceName The name of the appliance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, applianceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the appliance.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} applianceName The name of the appliance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(resourceGroupName: string, applianceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(resourceGroupName: string, applianceName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, applianceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Creates a new appliance.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} applianceName The name of the appliance.
     *
     * @param {object} parameters Parameters supplied to the create or update an
     * appliance.
     *
     * @param {string} parameters.managedResourceGroupId The managed resource group
     * Id.
     *
     * @param {string} [parameters.applianceDefinitionId] The fully qualified path
     * of appliance definition Id.
     *
     * @param {object} [parameters.parameters] Name and value pairs that define the
     * appliance parameters. It can be a JObject or a well formed JSON string.
     *
     * @param {string} [parameters.uiDefinitionUri] The blob URI where the UI
     * definition file is located.
     *
     * @param {object} [parameters.plan] The plan information.
     *
     * @param {string} parameters.plan.name The plan name.
     *
     * @param {string} parameters.plan.publisher The publisher ID.
     *
     * @param {string} parameters.plan.product The product code.
     *
     * @param {string} [parameters.plan.promotionCode] The promotion code.
     *
     * @param {string} parameters.plan.version The plan's version.
     *
     * @param {string} [parameters.kind] The kind of the appliance. Allowed values
     * are MarketPlace and ServiceCatalog.
     *
     * @param {string} [parameters.managedBy] ID of the resource that manages this
     * resource.
     *
     * @param {object} [parameters.sku] The SKU of the resource.
     *
     * @param {string} parameters.sku.name The SKU name.
     *
     * @param {string} [parameters.sku.tier] The SKU tier.
     *
     * @param {string} [parameters.sku.size] The SKU size.
     *
     * @param {string} [parameters.sku.family] The SKU family.
     *
     * @param {string} [parameters.sku.model] The SKU model.
     *
     * @param {number} [parameters.sku.capacity] The SKU capacity.
     *
     * @param {object} [parameters.identity] The identity of the resource.
     *
     * @param {string} [parameters.identity.type] The identity type. Possible
     * values include: 'SystemAssigned'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Appliance>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, applianceName: string, parameters: models.Appliance, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Appliance>>;

    /**
     * Creates a new appliance.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} applianceName The name of the appliance.
     *
     * @param {object} parameters Parameters supplied to the create or update an
     * appliance.
     *
     * @param {string} parameters.managedResourceGroupId The managed resource group
     * Id.
     *
     * @param {string} [parameters.applianceDefinitionId] The fully qualified path
     * of appliance definition Id.
     *
     * @param {object} [parameters.parameters] Name and value pairs that define the
     * appliance parameters. It can be a JObject or a well formed JSON string.
     *
     * @param {string} [parameters.uiDefinitionUri] The blob URI where the UI
     * definition file is located.
     *
     * @param {object} [parameters.plan] The plan information.
     *
     * @param {string} parameters.plan.name The plan name.
     *
     * @param {string} parameters.plan.publisher The publisher ID.
     *
     * @param {string} parameters.plan.product The product code.
     *
     * @param {string} [parameters.plan.promotionCode] The promotion code.
     *
     * @param {string} parameters.plan.version The plan's version.
     *
     * @param {string} [parameters.kind] The kind of the appliance. Allowed values
     * are MarketPlace and ServiceCatalog.
     *
     * @param {string} [parameters.managedBy] ID of the resource that manages this
     * resource.
     *
     * @param {object} [parameters.sku] The SKU of the resource.
     *
     * @param {string} parameters.sku.name The SKU name.
     *
     * @param {string} [parameters.sku.tier] The SKU tier.
     *
     * @param {string} [parameters.sku.size] The SKU size.
     *
     * @param {string} [parameters.sku.family] The SKU family.
     *
     * @param {string} [parameters.sku.model] The SKU model.
     *
     * @param {number} [parameters.sku.capacity] The SKU capacity.
     *
     * @param {object} [parameters.identity] The identity of the resource.
     *
     * @param {string} [parameters.identity.type] The identity type. Possible
     * values include: 'SystemAssigned'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Appliance} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Appliance} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Appliance} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(resourceGroupName: string, applianceName: string, parameters: models.Appliance, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Appliance>;
    beginCreateOrUpdate(resourceGroupName: string, applianceName: string, parameters: models.Appliance, callback: ServiceCallback<models.Appliance>): void;
    beginCreateOrUpdate(resourceGroupName: string, applianceName: string, parameters: models.Appliance, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Appliance>): void;


    /**
     * Deletes the appliance.
     *
     * @param {string} applianceId The fully qualified ID of the appliance,
     * including the appliance name and the appliance resource type. Use the
     * format,
     * /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/appliances/{appliance-name}
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteByIdWithHttpOperationResponse(applianceId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the appliance.
     *
     * @param {string} applianceId The fully qualified ID of the appliance,
     * including the appliance name and the appliance resource type. Use the
     * format,
     * /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/appliances/{appliance-name}
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteById(applianceId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteById(applianceId: string, callback: ServiceCallback<void>): void;
    beginDeleteById(applianceId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Creates a new appliance.
     *
     * @param {string} applianceId The fully qualified ID of the appliance,
     * including the appliance name and the appliance resource type. Use the
     * format,
     * /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/appliances/{appliance-name}
     *
     * @param {object} parameters Parameters supplied to the create or update an
     * appliance.
     *
     * @param {string} parameters.managedResourceGroupId The managed resource group
     * Id.
     *
     * @param {string} [parameters.applianceDefinitionId] The fully qualified path
     * of appliance definition Id.
     *
     * @param {object} [parameters.parameters] Name and value pairs that define the
     * appliance parameters. It can be a JObject or a well formed JSON string.
     *
     * @param {string} [parameters.uiDefinitionUri] The blob URI where the UI
     * definition file is located.
     *
     * @param {object} [parameters.plan] The plan information.
     *
     * @param {string} parameters.plan.name The plan name.
     *
     * @param {string} parameters.plan.publisher The publisher ID.
     *
     * @param {string} parameters.plan.product The product code.
     *
     * @param {string} [parameters.plan.promotionCode] The promotion code.
     *
     * @param {string} parameters.plan.version The plan's version.
     *
     * @param {string} [parameters.kind] The kind of the appliance. Allowed values
     * are MarketPlace and ServiceCatalog.
     *
     * @param {string} [parameters.managedBy] ID of the resource that manages this
     * resource.
     *
     * @param {object} [parameters.sku] The SKU of the resource.
     *
     * @param {string} parameters.sku.name The SKU name.
     *
     * @param {string} [parameters.sku.tier] The SKU tier.
     *
     * @param {string} [parameters.sku.size] The SKU size.
     *
     * @param {string} [parameters.sku.family] The SKU family.
     *
     * @param {string} [parameters.sku.model] The SKU model.
     *
     * @param {number} [parameters.sku.capacity] The SKU capacity.
     *
     * @param {object} [parameters.identity] The identity of the resource.
     *
     * @param {string} [parameters.identity.type] The identity type. Possible
     * values include: 'SystemAssigned'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Appliance>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateByIdWithHttpOperationResponse(applianceId: string, parameters: models.Appliance, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Appliance>>;

    /**
     * Creates a new appliance.
     *
     * @param {string} applianceId The fully qualified ID of the appliance,
     * including the appliance name and the appliance resource type. Use the
     * format,
     * /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/appliances/{appliance-name}
     *
     * @param {object} parameters Parameters supplied to the create or update an
     * appliance.
     *
     * @param {string} parameters.managedResourceGroupId The managed resource group
     * Id.
     *
     * @param {string} [parameters.applianceDefinitionId] The fully qualified path
     * of appliance definition Id.
     *
     * @param {object} [parameters.parameters] Name and value pairs that define the
     * appliance parameters. It can be a JObject or a well formed JSON string.
     *
     * @param {string} [parameters.uiDefinitionUri] The blob URI where the UI
     * definition file is located.
     *
     * @param {object} [parameters.plan] The plan information.
     *
     * @param {string} parameters.plan.name The plan name.
     *
     * @param {string} parameters.plan.publisher The publisher ID.
     *
     * @param {string} parameters.plan.product The product code.
     *
     * @param {string} [parameters.plan.promotionCode] The promotion code.
     *
     * @param {string} parameters.plan.version The plan's version.
     *
     * @param {string} [parameters.kind] The kind of the appliance. Allowed values
     * are MarketPlace and ServiceCatalog.
     *
     * @param {string} [parameters.managedBy] ID of the resource that manages this
     * resource.
     *
     * @param {object} [parameters.sku] The SKU of the resource.
     *
     * @param {string} parameters.sku.name The SKU name.
     *
     * @param {string} [parameters.sku.tier] The SKU tier.
     *
     * @param {string} [parameters.sku.size] The SKU size.
     *
     * @param {string} [parameters.sku.family] The SKU family.
     *
     * @param {string} [parameters.sku.model] The SKU model.
     *
     * @param {number} [parameters.sku.capacity] The SKU capacity.
     *
     * @param {object} [parameters.identity] The identity of the resource.
     *
     * @param {string} [parameters.identity.type] The identity type. Possible
     * values include: 'SystemAssigned'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Appliance} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Appliance} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Appliance} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdateById(applianceId: string, parameters: models.Appliance, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Appliance>;
    beginCreateOrUpdateById(applianceId: string, parameters: models.Appliance, callback: ServiceCallback<models.Appliance>): void;
    beginCreateOrUpdateById(applianceId: string, parameters: models.Appliance, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Appliance>): void;


    /**
     * Gets all the appliances within a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApplianceListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApplianceListResult>>;

    /**
     * Gets all the appliances within a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApplianceListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApplianceListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApplianceListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroupNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ApplianceListResult>;
    listByResourceGroupNext(nextPageLink: string, callback: ServiceCallback<models.ApplianceListResult>): void;
    listByResourceGroupNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplianceListResult>): void;


    /**
     * Gets all the appliances within a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApplianceListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listBySubscriptionNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApplianceListResult>>;

    /**
     * Gets all the appliances within a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApplianceListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApplianceListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApplianceListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listBySubscriptionNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ApplianceListResult>;
    listBySubscriptionNext(nextPageLink: string, callback: ServiceCallback<models.ApplianceListResult>): void;
    listBySubscriptionNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplianceListResult>): void;
}

/**
 * @class
 * ApplianceDefinitions
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ManagedApplicationClient.
 */
export interface ApplianceDefinitions {


    /**
     * Gets the appliance definition.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} applianceDefinitionName The name of the appliance
     * definition.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApplianceDefinition>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, applianceDefinitionName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApplianceDefinition>>;

    /**
     * Gets the appliance definition.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} applianceDefinitionName The name of the appliance
     * definition.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApplianceDefinition} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApplianceDefinition} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApplianceDefinition} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, applianceDefinitionName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ApplianceDefinition>;
    get(resourceGroupName: string, applianceDefinitionName: string, callback: ServiceCallback<models.ApplianceDefinition>): void;
    get(resourceGroupName: string, applianceDefinitionName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplianceDefinition>): void;


    /**
     * Deletes the appliance definition.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} applianceDefinitionName The name of the appliance definition
     * to delete.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, applianceDefinitionName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the appliance definition.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} applianceDefinitionName The name of the appliance definition
     * to delete.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, applianceDefinitionName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, applianceDefinitionName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, applianceDefinitionName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Creates a new appliance definition.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} applianceDefinitionName The name of the appliance
     * definition.
     *
     * @param {object} parameters Parameters supplied to the create or update an
     * appliance definition.
     *
     * @param {string} parameters.lockLevel The appliance lock level. Possible
     * values include: 'CanNotDelete', 'ReadOnly', 'None'
     *
     * @param {string} [parameters.displayName] The appliance definition display
     * name.
     *
     * @param {array} parameters.authorizations The appliance provider
     * authorizations.
     *
     * @param {array} [parameters.artifacts] The collection of appliance artifacts.
     * The portal will use the files specified as artifacts to construct the user
     * experience of creating an appliance from an appliance definition.
     *
     * @param {string} [parameters.description] The appliance definition
     * description.
     *
     * @param {string} parameters.packageFileUri The appliance definition package
     * file Uri.
     *
     * @param {string} [parameters.managedBy] ID of the resource that manages this
     * resource.
     *
     * @param {object} [parameters.sku] The SKU of the resource.
     *
     * @param {string} parameters.sku.name The SKU name.
     *
     * @param {string} [parameters.sku.tier] The SKU tier.
     *
     * @param {string} [parameters.sku.size] The SKU size.
     *
     * @param {string} [parameters.sku.family] The SKU family.
     *
     * @param {string} [parameters.sku.model] The SKU model.
     *
     * @param {number} [parameters.sku.capacity] The SKU capacity.
     *
     * @param {object} [parameters.identity] The identity of the resource.
     *
     * @param {string} [parameters.identity.type] The identity type. Possible
     * values include: 'SystemAssigned'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApplianceDefinition>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, applianceDefinitionName: string, parameters: models.ApplianceDefinition, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApplianceDefinition>>;

    /**
     * Creates a new appliance definition.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} applianceDefinitionName The name of the appliance
     * definition.
     *
     * @param {object} parameters Parameters supplied to the create or update an
     * appliance definition.
     *
     * @param {string} parameters.lockLevel The appliance lock level. Possible
     * values include: 'CanNotDelete', 'ReadOnly', 'None'
     *
     * @param {string} [parameters.displayName] The appliance definition display
     * name.
     *
     * @param {array} parameters.authorizations The appliance provider
     * authorizations.
     *
     * @param {array} [parameters.artifacts] The collection of appliance artifacts.
     * The portal will use the files specified as artifacts to construct the user
     * experience of creating an appliance from an appliance definition.
     *
     * @param {string} [parameters.description] The appliance definition
     * description.
     *
     * @param {string} parameters.packageFileUri The appliance definition package
     * file Uri.
     *
     * @param {string} [parameters.managedBy] ID of the resource that manages this
     * resource.
     *
     * @param {object} [parameters.sku] The SKU of the resource.
     *
     * @param {string} parameters.sku.name The SKU name.
     *
     * @param {string} [parameters.sku.tier] The SKU tier.
     *
     * @param {string} [parameters.sku.size] The SKU size.
     *
     * @param {string} [parameters.sku.family] The SKU family.
     *
     * @param {string} [parameters.sku.model] The SKU model.
     *
     * @param {number} [parameters.sku.capacity] The SKU capacity.
     *
     * @param {object} [parameters.identity] The identity of the resource.
     *
     * @param {string} [parameters.identity.type] The identity type. Possible
     * values include: 'SystemAssigned'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApplianceDefinition} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApplianceDefinition} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApplianceDefinition} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, applianceDefinitionName: string, parameters: models.ApplianceDefinition, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ApplianceDefinition>;
    createOrUpdate(resourceGroupName: string, applianceDefinitionName: string, parameters: models.ApplianceDefinition, callback: ServiceCallback<models.ApplianceDefinition>): void;
    createOrUpdate(resourceGroupName: string, applianceDefinitionName: string, parameters: models.ApplianceDefinition, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplianceDefinition>): void;


    /**
     * Lists the appliance definitions in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApplianceDefinitionListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupWithHttpOperationResponse(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApplianceDefinitionListResult>>;

    /**
     * Lists the appliance definitions in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApplianceDefinitionListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApplianceDefinitionListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApplianceDefinitionListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroup(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ApplianceDefinitionListResult>;
    listByResourceGroup(resourceGroupName: string, callback: ServiceCallback<models.ApplianceDefinitionListResult>): void;
    listByResourceGroup(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplianceDefinitionListResult>): void;


    /**
     * Gets the appliance definition.
     *
     * @param {string} applianceDefinitionId The fully qualified ID of the
     * appliance definition, including the appliance name and the appliance
     * definition resource type. Use the format,
     * /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/applianceDefinitions/{applianceDefinition-name}
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApplianceDefinition>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getByIdWithHttpOperationResponse(applianceDefinitionId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApplianceDefinition>>;

    /**
     * Gets the appliance definition.
     *
     * @param {string} applianceDefinitionId The fully qualified ID of the
     * appliance definition, including the appliance name and the appliance
     * definition resource type. Use the format,
     * /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/applianceDefinitions/{applianceDefinition-name}
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApplianceDefinition} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApplianceDefinition} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApplianceDefinition} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getById(applianceDefinitionId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ApplianceDefinition>;
    getById(applianceDefinitionId: string, callback: ServiceCallback<models.ApplianceDefinition>): void;
    getById(applianceDefinitionId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplianceDefinition>): void;


    /**
     * Deletes the appliance definition.
     *
     * @param {string} applianceDefinitionId The fully qualified ID of the
     * appliance definition, including the appliance name and the appliance
     * definition resource type. Use the format,
     * /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/applianceDefinitions/{applianceDefinition-name}
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteByIdWithHttpOperationResponse(applianceDefinitionId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the appliance definition.
     *
     * @param {string} applianceDefinitionId The fully qualified ID of the
     * appliance definition, including the appliance name and the appliance
     * definition resource type. Use the format,
     * /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/applianceDefinitions/{applianceDefinition-name}
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteById(applianceDefinitionId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteById(applianceDefinitionId: string, callback: ServiceCallback<void>): void;
    deleteById(applianceDefinitionId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Creates a new appliance definition.
     *
     * @param {string} applianceDefinitionId The fully qualified ID of the
     * appliance definition, including the appliance name and the appliance
     * definition resource type. Use the format,
     * /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/applianceDefinitions/{applianceDefinition-name}
     *
     * @param {object} parameters Parameters supplied to the create or update an
     * appliance definition.
     *
     * @param {string} parameters.lockLevel The appliance lock level. Possible
     * values include: 'CanNotDelete', 'ReadOnly', 'None'
     *
     * @param {string} [parameters.displayName] The appliance definition display
     * name.
     *
     * @param {array} parameters.authorizations The appliance provider
     * authorizations.
     *
     * @param {array} [parameters.artifacts] The collection of appliance artifacts.
     * The portal will use the files specified as artifacts to construct the user
     * experience of creating an appliance from an appliance definition.
     *
     * @param {string} [parameters.description] The appliance definition
     * description.
     *
     * @param {string} parameters.packageFileUri The appliance definition package
     * file Uri.
     *
     * @param {string} [parameters.managedBy] ID of the resource that manages this
     * resource.
     *
     * @param {object} [parameters.sku] The SKU of the resource.
     *
     * @param {string} parameters.sku.name The SKU name.
     *
     * @param {string} [parameters.sku.tier] The SKU tier.
     *
     * @param {string} [parameters.sku.size] The SKU size.
     *
     * @param {string} [parameters.sku.family] The SKU family.
     *
     * @param {string} [parameters.sku.model] The SKU model.
     *
     * @param {number} [parameters.sku.capacity] The SKU capacity.
     *
     * @param {object} [parameters.identity] The identity of the resource.
     *
     * @param {string} [parameters.identity.type] The identity type. Possible
     * values include: 'SystemAssigned'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApplianceDefinition>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateByIdWithHttpOperationResponse(applianceDefinitionId: string, parameters: models.ApplianceDefinition, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApplianceDefinition>>;

    /**
     * Creates a new appliance definition.
     *
     * @param {string} applianceDefinitionId The fully qualified ID of the
     * appliance definition, including the appliance name and the appliance
     * definition resource type. Use the format,
     * /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/applianceDefinitions/{applianceDefinition-name}
     *
     * @param {object} parameters Parameters supplied to the create or update an
     * appliance definition.
     *
     * @param {string} parameters.lockLevel The appliance lock level. Possible
     * values include: 'CanNotDelete', 'ReadOnly', 'None'
     *
     * @param {string} [parameters.displayName] The appliance definition display
     * name.
     *
     * @param {array} parameters.authorizations The appliance provider
     * authorizations.
     *
     * @param {array} [parameters.artifacts] The collection of appliance artifacts.
     * The portal will use the files specified as artifacts to construct the user
     * experience of creating an appliance from an appliance definition.
     *
     * @param {string} [parameters.description] The appliance definition
     * description.
     *
     * @param {string} parameters.packageFileUri The appliance definition package
     * file Uri.
     *
     * @param {string} [parameters.managedBy] ID of the resource that manages this
     * resource.
     *
     * @param {object} [parameters.sku] The SKU of the resource.
     *
     * @param {string} parameters.sku.name The SKU name.
     *
     * @param {string} [parameters.sku.tier] The SKU tier.
     *
     * @param {string} [parameters.sku.size] The SKU size.
     *
     * @param {string} [parameters.sku.family] The SKU family.
     *
     * @param {string} [parameters.sku.model] The SKU model.
     *
     * @param {number} [parameters.sku.capacity] The SKU capacity.
     *
     * @param {object} [parameters.identity] The identity of the resource.
     *
     * @param {string} [parameters.identity.type] The identity type. Possible
     * values include: 'SystemAssigned'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApplianceDefinition} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApplianceDefinition} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApplianceDefinition} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdateById(applianceDefinitionId: string, parameters: models.ApplianceDefinition, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ApplianceDefinition>;
    createOrUpdateById(applianceDefinitionId: string, parameters: models.ApplianceDefinition, callback: ServiceCallback<models.ApplianceDefinition>): void;
    createOrUpdateById(applianceDefinitionId: string, parameters: models.ApplianceDefinition, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplianceDefinition>): void;


    /**
     * Deletes the appliance definition.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} applianceDefinitionName The name of the appliance definition
     * to delete.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, applianceDefinitionName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the appliance definition.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} applianceDefinitionName The name of the appliance definition
     * to delete.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(resourceGroupName: string, applianceDefinitionName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(resourceGroupName: string, applianceDefinitionName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, applianceDefinitionName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Creates a new appliance definition.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} applianceDefinitionName The name of the appliance
     * definition.
     *
     * @param {object} parameters Parameters supplied to the create or update an
     * appliance definition.
     *
     * @param {string} parameters.lockLevel The appliance lock level. Possible
     * values include: 'CanNotDelete', 'ReadOnly', 'None'
     *
     * @param {string} [parameters.displayName] The appliance definition display
     * name.
     *
     * @param {array} parameters.authorizations The appliance provider
     * authorizations.
     *
     * @param {array} [parameters.artifacts] The collection of appliance artifacts.
     * The portal will use the files specified as artifacts to construct the user
     * experience of creating an appliance from an appliance definition.
     *
     * @param {string} [parameters.description] The appliance definition
     * description.
     *
     * @param {string} parameters.packageFileUri The appliance definition package
     * file Uri.
     *
     * @param {string} [parameters.managedBy] ID of the resource that manages this
     * resource.
     *
     * @param {object} [parameters.sku] The SKU of the resource.
     *
     * @param {string} parameters.sku.name The SKU name.
     *
     * @param {string} [parameters.sku.tier] The SKU tier.
     *
     * @param {string} [parameters.sku.size] The SKU size.
     *
     * @param {string} [parameters.sku.family] The SKU family.
     *
     * @param {string} [parameters.sku.model] The SKU model.
     *
     * @param {number} [parameters.sku.capacity] The SKU capacity.
     *
     * @param {object} [parameters.identity] The identity of the resource.
     *
     * @param {string} [parameters.identity.type] The identity type. Possible
     * values include: 'SystemAssigned'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApplianceDefinition>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, applianceDefinitionName: string, parameters: models.ApplianceDefinition, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApplianceDefinition>>;

    /**
     * Creates a new appliance definition.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} applianceDefinitionName The name of the appliance
     * definition.
     *
     * @param {object} parameters Parameters supplied to the create or update an
     * appliance definition.
     *
     * @param {string} parameters.lockLevel The appliance lock level. Possible
     * values include: 'CanNotDelete', 'ReadOnly', 'None'
     *
     * @param {string} [parameters.displayName] The appliance definition display
     * name.
     *
     * @param {array} parameters.authorizations The appliance provider
     * authorizations.
     *
     * @param {array} [parameters.artifacts] The collection of appliance artifacts.
     * The portal will use the files specified as artifacts to construct the user
     * experience of creating an appliance from an appliance definition.
     *
     * @param {string} [parameters.description] The appliance definition
     * description.
     *
     * @param {string} parameters.packageFileUri The appliance definition package
     * file Uri.
     *
     * @param {string} [parameters.managedBy] ID of the resource that manages this
     * resource.
     *
     * @param {object} [parameters.sku] The SKU of the resource.
     *
     * @param {string} parameters.sku.name The SKU name.
     *
     * @param {string} [parameters.sku.tier] The SKU tier.
     *
     * @param {string} [parameters.sku.size] The SKU size.
     *
     * @param {string} [parameters.sku.family] The SKU family.
     *
     * @param {string} [parameters.sku.model] The SKU model.
     *
     * @param {number} [parameters.sku.capacity] The SKU capacity.
     *
     * @param {object} [parameters.identity] The identity of the resource.
     *
     * @param {string} [parameters.identity.type] The identity type. Possible
     * values include: 'SystemAssigned'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApplianceDefinition} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApplianceDefinition} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApplianceDefinition} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(resourceGroupName: string, applianceDefinitionName: string, parameters: models.ApplianceDefinition, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ApplianceDefinition>;
    beginCreateOrUpdate(resourceGroupName: string, applianceDefinitionName: string, parameters: models.ApplianceDefinition, callback: ServiceCallback<models.ApplianceDefinition>): void;
    beginCreateOrUpdate(resourceGroupName: string, applianceDefinitionName: string, parameters: models.ApplianceDefinition, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplianceDefinition>): void;


    /**
     * Deletes the appliance definition.
     *
     * @param {string} applianceDefinitionId The fully qualified ID of the
     * appliance definition, including the appliance name and the appliance
     * definition resource type. Use the format,
     * /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/applianceDefinitions/{applianceDefinition-name}
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteByIdWithHttpOperationResponse(applianceDefinitionId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the appliance definition.
     *
     * @param {string} applianceDefinitionId The fully qualified ID of the
     * appliance definition, including the appliance name and the appliance
     * definition resource type. Use the format,
     * /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/applianceDefinitions/{applianceDefinition-name}
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteById(applianceDefinitionId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteById(applianceDefinitionId: string, callback: ServiceCallback<void>): void;
    beginDeleteById(applianceDefinitionId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Creates a new appliance definition.
     *
     * @param {string} applianceDefinitionId The fully qualified ID of the
     * appliance definition, including the appliance name and the appliance
     * definition resource type. Use the format,
     * /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/applianceDefinitions/{applianceDefinition-name}
     *
     * @param {object} parameters Parameters supplied to the create or update an
     * appliance definition.
     *
     * @param {string} parameters.lockLevel The appliance lock level. Possible
     * values include: 'CanNotDelete', 'ReadOnly', 'None'
     *
     * @param {string} [parameters.displayName] The appliance definition display
     * name.
     *
     * @param {array} parameters.authorizations The appliance provider
     * authorizations.
     *
     * @param {array} [parameters.artifacts] The collection of appliance artifacts.
     * The portal will use the files specified as artifacts to construct the user
     * experience of creating an appliance from an appliance definition.
     *
     * @param {string} [parameters.description] The appliance definition
     * description.
     *
     * @param {string} parameters.packageFileUri The appliance definition package
     * file Uri.
     *
     * @param {string} [parameters.managedBy] ID of the resource that manages this
     * resource.
     *
     * @param {object} [parameters.sku] The SKU of the resource.
     *
     * @param {string} parameters.sku.name The SKU name.
     *
     * @param {string} [parameters.sku.tier] The SKU tier.
     *
     * @param {string} [parameters.sku.size] The SKU size.
     *
     * @param {string} [parameters.sku.family] The SKU family.
     *
     * @param {string} [parameters.sku.model] The SKU model.
     *
     * @param {number} [parameters.sku.capacity] The SKU capacity.
     *
     * @param {object} [parameters.identity] The identity of the resource.
     *
     * @param {string} [parameters.identity.type] The identity type. Possible
     * values include: 'SystemAssigned'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApplianceDefinition>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateByIdWithHttpOperationResponse(applianceDefinitionId: string, parameters: models.ApplianceDefinition, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApplianceDefinition>>;

    /**
     * Creates a new appliance definition.
     *
     * @param {string} applianceDefinitionId The fully qualified ID of the
     * appliance definition, including the appliance name and the appliance
     * definition resource type. Use the format,
     * /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/applianceDefinitions/{applianceDefinition-name}
     *
     * @param {object} parameters Parameters supplied to the create or update an
     * appliance definition.
     *
     * @param {string} parameters.lockLevel The appliance lock level. Possible
     * values include: 'CanNotDelete', 'ReadOnly', 'None'
     *
     * @param {string} [parameters.displayName] The appliance definition display
     * name.
     *
     * @param {array} parameters.authorizations The appliance provider
     * authorizations.
     *
     * @param {array} [parameters.artifacts] The collection of appliance artifacts.
     * The portal will use the files specified as artifacts to construct the user
     * experience of creating an appliance from an appliance definition.
     *
     * @param {string} [parameters.description] The appliance definition
     * description.
     *
     * @param {string} parameters.packageFileUri The appliance definition package
     * file Uri.
     *
     * @param {string} [parameters.managedBy] ID of the resource that manages this
     * resource.
     *
     * @param {object} [parameters.sku] The SKU of the resource.
     *
     * @param {string} parameters.sku.name The SKU name.
     *
     * @param {string} [parameters.sku.tier] The SKU tier.
     *
     * @param {string} [parameters.sku.size] The SKU size.
     *
     * @param {string} [parameters.sku.family] The SKU family.
     *
     * @param {string} [parameters.sku.model] The SKU model.
     *
     * @param {number} [parameters.sku.capacity] The SKU capacity.
     *
     * @param {object} [parameters.identity] The identity of the resource.
     *
     * @param {string} [parameters.identity.type] The identity type. Possible
     * values include: 'SystemAssigned'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApplianceDefinition} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApplianceDefinition} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApplianceDefinition} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdateById(applianceDefinitionId: string, parameters: models.ApplianceDefinition, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ApplianceDefinition>;
    beginCreateOrUpdateById(applianceDefinitionId: string, parameters: models.ApplianceDefinition, callback: ServiceCallback<models.ApplianceDefinition>): void;
    beginCreateOrUpdateById(applianceDefinitionId: string, parameters: models.ApplianceDefinition, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplianceDefinition>): void;


    /**
     * Lists the appliance definitions in a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApplianceDefinitionListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApplianceDefinitionListResult>>;

    /**
     * Lists the appliance definitions in a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApplianceDefinitionListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApplianceDefinitionListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApplianceDefinitionListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroupNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ApplianceDefinitionListResult>;
    listByResourceGroupNext(nextPageLink: string, callback: ServiceCallback<models.ApplianceDefinitionListResult>): void;
    listByResourceGroupNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplianceDefinitionListResult>): void;
}
