/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback, HttpOperationResponse } from 'ms-rest';
import * as models from '../models';


/**
 * @class
 * Operations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ResourceManagementClient.
 */
export interface Operations {


    /**
     * Lists all of the available Microsoft.Resources REST API operations.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OperationListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OperationListResult>>;

    /**
     * Lists all of the available Microsoft.Resources REST API operations.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OperationListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OperationListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OperationListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.OperationListResult>;
    list(callback: ServiceCallback<models.OperationListResult>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OperationListResult>): void;


    /**
     * Lists all of the available Microsoft.Resources REST API operations.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OperationListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OperationListResult>>;

    /**
     * Lists all of the available Microsoft.Resources REST API operations.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OperationListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OperationListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OperationListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.OperationListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.OperationListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OperationListResult>): void;
}

/**
 * @class
 * Deployments
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ResourceManagementClient.
 */
export interface Deployments {


    /**
     * @summary Deletes a deployment from the deployment history.
     *
     * A template deployment that is currently running cannot be deleted. Deleting
     * a template deployment removes the associated deployment operations. This is
     * an asynchronous operation that returns a status of 202 until the template
     * deployment is successfully deleted. The Location response header contains
     * the URI that is used to obtain the status of the process. While the process
     * is running, a call to the URI in the Location header returns a status of
     * 202. When the process finishes, the URI in the Location header returns a
     * status of 204 on success. If the asynchronous request failed, the URI in the
     * Location header returns an error-level status code.
     *
     * @param {string} deploymentName The name of the deployment to delete.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteAtSubscriptionScopeWithHttpOperationResponse(deploymentName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Deletes a deployment from the deployment history.
     *
     * A template deployment that is currently running cannot be deleted. Deleting
     * a template deployment removes the associated deployment operations. This is
     * an asynchronous operation that returns a status of 202 until the template
     * deployment is successfully deleted. The Location response header contains
     * the URI that is used to obtain the status of the process. While the process
     * is running, a call to the URI in the Location header returns a status of
     * 202. When the process finishes, the URI in the Location header returns a
     * status of 204 on success. If the asynchronous request failed, the URI in the
     * Location header returns an error-level status code.
     *
     * @param {string} deploymentName The name of the deployment to delete.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteAtSubscriptionScope(deploymentName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteAtSubscriptionScope(deploymentName: string, callback: ServiceCallback<void>): void;
    deleteAtSubscriptionScope(deploymentName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Checks whether the deployment exists.
     *
     * @param {string} deploymentName The name of the deployment to check.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Boolean>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    checkExistenceAtSubscriptionScopeWithHttpOperationResponse(deploymentName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<boolean>>;

    /**
     * Checks whether the deployment exists.
     *
     * @param {string} deploymentName The name of the deployment to check.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Boolean} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Boolean} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    checkExistenceAtSubscriptionScope(deploymentName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<boolean>;
    checkExistenceAtSubscriptionScope(deploymentName: string, callback: ServiceCallback<boolean>): void;
    checkExistenceAtSubscriptionScope(deploymentName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<boolean>): void;


    /**
     * @summary Deploys resources at subscription scope.
     *
     * You can provide the template and parameters directly in the request or link
     * to JSON files.
     *
     * @param {string} deploymentName The name of the deployment.
     *
     * @param {object} parameters Additional parameters supplied to the operation.
     *
     * @param {string} [parameters.location] The location to store the deployment
     * data.
     *
     * @param {object} parameters.properties The deployment properties.
     *
     * @param {object} [parameters.properties.template] The template content. You
     * use this element when you want to pass the template syntax directly in the
     * request rather than link to an existing template. It can be a JObject or
     * well-formed JSON string. Use either the templateLink property or the
     * template property, but not both.
     *
     * @param {object} [parameters.properties.templateLink] The URI of the
     * template. Use either the templateLink property or the template property, but
     * not both.
     *
     * @param {string} parameters.properties.templateLink.uri The URI of the
     * template to deploy.
     *
     * @param {string} [parameters.properties.templateLink.contentVersion] If
     * included, must match the ContentVersion in the template.
     *
     * @param {object} [parameters.properties.parameters] Name and value pairs that
     * define the deployment parameters for the template. You use this element when
     * you want to provide the parameter values directly in the request rather than
     * link to an existing parameter file. Use either the parametersLink property
     * or the parameters property, but not both. It can be a JObject or a well
     * formed JSON string.
     *
     * @param {object} [parameters.properties.parametersLink] The URI of parameters
     * file. You use this element to link to an existing parameters file. Use
     * either the parametersLink property or the parameters property, but not both.
     *
     * @param {string} parameters.properties.parametersLink.uri The URI of the
     * parameters file.
     *
     * @param {string} [parameters.properties.parametersLink.contentVersion] If
     * included, must match the ContentVersion in the template.
     *
     * @param {string} parameters.properties.mode The mode that is used to deploy
     * resources. This value can be either Incremental or Complete. In Incremental
     * mode, resources are deployed without deleting existing resources that are
     * not included in the template. In Complete mode, resources are deployed and
     * existing resources in the resource group that are not included in the
     * template are deleted. Be careful when using Complete mode as you may
     * unintentionally delete resources. Possible values include: 'Incremental',
     * 'Complete'
     *
     * @param {object} [parameters.properties.debugSetting] The debug setting of
     * the deployment.
     *
     * @param {string} [parameters.properties.debugSetting.detailLevel] Specifies
     * the type of information to log for debugging. The permitted values are none,
     * requestContent, responseContent, or both requestContent and responseContent
     * separated by a comma. The default is none. When setting this value,
     * carefully consider the type of information you are passing in during
     * deployment. By logging information about the request or response, you could
     * potentially expose sensitive data that is retrieved through the deployment
     * operations.
     *
     * @param {object} [parameters.properties.onErrorDeployment] The deployment on
     * error behavior.
     *
     * @param {string} [parameters.properties.onErrorDeployment.type] The
     * deployment on error behavior type. Possible values are LastSuccessful and
     * SpecificDeployment. Possible values include: 'LastSuccessful',
     * 'SpecificDeployment'
     *
     * @param {string} [parameters.properties.onErrorDeployment.deploymentName] The
     * deployment to be used on error case.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DeploymentExtended>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateAtSubscriptionScopeWithHttpOperationResponse(deploymentName: string, parameters: models.Deployment, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DeploymentExtended>>;

    /**
     * @summary Deploys resources at subscription scope.
     *
     * You can provide the template and parameters directly in the request or link
     * to JSON files.
     *
     * @param {string} deploymentName The name of the deployment.
     *
     * @param {object} parameters Additional parameters supplied to the operation.
     *
     * @param {string} [parameters.location] The location to store the deployment
     * data.
     *
     * @param {object} parameters.properties The deployment properties.
     *
     * @param {object} [parameters.properties.template] The template content. You
     * use this element when you want to pass the template syntax directly in the
     * request rather than link to an existing template. It can be a JObject or
     * well-formed JSON string. Use either the templateLink property or the
     * template property, but not both.
     *
     * @param {object} [parameters.properties.templateLink] The URI of the
     * template. Use either the templateLink property or the template property, but
     * not both.
     *
     * @param {string} parameters.properties.templateLink.uri The URI of the
     * template to deploy.
     *
     * @param {string} [parameters.properties.templateLink.contentVersion] If
     * included, must match the ContentVersion in the template.
     *
     * @param {object} [parameters.properties.parameters] Name and value pairs that
     * define the deployment parameters for the template. You use this element when
     * you want to provide the parameter values directly in the request rather than
     * link to an existing parameter file. Use either the parametersLink property
     * or the parameters property, but not both. It can be a JObject or a well
     * formed JSON string.
     *
     * @param {object} [parameters.properties.parametersLink] The URI of parameters
     * file. You use this element to link to an existing parameters file. Use
     * either the parametersLink property or the parameters property, but not both.
     *
     * @param {string} parameters.properties.parametersLink.uri The URI of the
     * parameters file.
     *
     * @param {string} [parameters.properties.parametersLink.contentVersion] If
     * included, must match the ContentVersion in the template.
     *
     * @param {string} parameters.properties.mode The mode that is used to deploy
     * resources. This value can be either Incremental or Complete. In Incremental
     * mode, resources are deployed without deleting existing resources that are
     * not included in the template. In Complete mode, resources are deployed and
     * existing resources in the resource group that are not included in the
     * template are deleted. Be careful when using Complete mode as you may
     * unintentionally delete resources. Possible values include: 'Incremental',
     * 'Complete'
     *
     * @param {object} [parameters.properties.debugSetting] The debug setting of
     * the deployment.
     *
     * @param {string} [parameters.properties.debugSetting.detailLevel] Specifies
     * the type of information to log for debugging. The permitted values are none,
     * requestContent, responseContent, or both requestContent and responseContent
     * separated by a comma. The default is none. When setting this value,
     * carefully consider the type of information you are passing in during
     * deployment. By logging information about the request or response, you could
     * potentially expose sensitive data that is retrieved through the deployment
     * operations.
     *
     * @param {object} [parameters.properties.onErrorDeployment] The deployment on
     * error behavior.
     *
     * @param {string} [parameters.properties.onErrorDeployment.type] The
     * deployment on error behavior type. Possible values are LastSuccessful and
     * SpecificDeployment. Possible values include: 'LastSuccessful',
     * 'SpecificDeployment'
     *
     * @param {string} [parameters.properties.onErrorDeployment.deploymentName] The
     * deployment to be used on error case.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DeploymentExtended} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DeploymentExtended} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DeploymentExtended} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdateAtSubscriptionScope(deploymentName: string, parameters: models.Deployment, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DeploymentExtended>;
    createOrUpdateAtSubscriptionScope(deploymentName: string, parameters: models.Deployment, callback: ServiceCallback<models.DeploymentExtended>): void;
    createOrUpdateAtSubscriptionScope(deploymentName: string, parameters: models.Deployment, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeploymentExtended>): void;


    /**
     * Gets a deployment.
     *
     * @param {string} deploymentName The name of the deployment to get.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DeploymentExtended>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getAtSubscriptionScopeWithHttpOperationResponse(deploymentName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DeploymentExtended>>;

    /**
     * Gets a deployment.
     *
     * @param {string} deploymentName The name of the deployment to get.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DeploymentExtended} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DeploymentExtended} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DeploymentExtended} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getAtSubscriptionScope(deploymentName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DeploymentExtended>;
    getAtSubscriptionScope(deploymentName: string, callback: ServiceCallback<models.DeploymentExtended>): void;
    getAtSubscriptionScope(deploymentName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeploymentExtended>): void;


    /**
     * @summary Cancels a currently running template deployment.
     *
     * You can cancel a deployment only if the provisioningState is Accepted or
     * Running. After the deployment is canceled, the provisioningState is set to
     * Canceled. Canceling a template deployment stops the currently running
     * template deployment and leaves the resources partially deployed.
     *
     * @param {string} deploymentName The name of the deployment to cancel.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    cancelAtSubscriptionScopeWithHttpOperationResponse(deploymentName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Cancels a currently running template deployment.
     *
     * You can cancel a deployment only if the provisioningState is Accepted or
     * Running. After the deployment is canceled, the provisioningState is set to
     * Canceled. Canceling a template deployment stops the currently running
     * template deployment and leaves the resources partially deployed.
     *
     * @param {string} deploymentName The name of the deployment to cancel.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    cancelAtSubscriptionScope(deploymentName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    cancelAtSubscriptionScope(deploymentName: string, callback: ServiceCallback<void>): void;
    cancelAtSubscriptionScope(deploymentName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Validates whether the specified template is syntactically correct and will
     * be accepted by Azure Resource Manager..
     *
     * @param {string} deploymentName The name of the deployment.
     *
     * @param {object} parameters Parameters to validate.
     *
     * @param {string} [parameters.location] The location to store the deployment
     * data.
     *
     * @param {object} parameters.properties The deployment properties.
     *
     * @param {object} [parameters.properties.template] The template content. You
     * use this element when you want to pass the template syntax directly in the
     * request rather than link to an existing template. It can be a JObject or
     * well-formed JSON string. Use either the templateLink property or the
     * template property, but not both.
     *
     * @param {object} [parameters.properties.templateLink] The URI of the
     * template. Use either the templateLink property or the template property, but
     * not both.
     *
     * @param {string} parameters.properties.templateLink.uri The URI of the
     * template to deploy.
     *
     * @param {string} [parameters.properties.templateLink.contentVersion] If
     * included, must match the ContentVersion in the template.
     *
     * @param {object} [parameters.properties.parameters] Name and value pairs that
     * define the deployment parameters for the template. You use this element when
     * you want to provide the parameter values directly in the request rather than
     * link to an existing parameter file. Use either the parametersLink property
     * or the parameters property, but not both. It can be a JObject or a well
     * formed JSON string.
     *
     * @param {object} [parameters.properties.parametersLink] The URI of parameters
     * file. You use this element to link to an existing parameters file. Use
     * either the parametersLink property or the parameters property, but not both.
     *
     * @param {string} parameters.properties.parametersLink.uri The URI of the
     * parameters file.
     *
     * @param {string} [parameters.properties.parametersLink.contentVersion] If
     * included, must match the ContentVersion in the template.
     *
     * @param {string} parameters.properties.mode The mode that is used to deploy
     * resources. This value can be either Incremental or Complete. In Incremental
     * mode, resources are deployed without deleting existing resources that are
     * not included in the template. In Complete mode, resources are deployed and
     * existing resources in the resource group that are not included in the
     * template are deleted. Be careful when using Complete mode as you may
     * unintentionally delete resources. Possible values include: 'Incremental',
     * 'Complete'
     *
     * @param {object} [parameters.properties.debugSetting] The debug setting of
     * the deployment.
     *
     * @param {string} [parameters.properties.debugSetting.detailLevel] Specifies
     * the type of information to log for debugging. The permitted values are none,
     * requestContent, responseContent, or both requestContent and responseContent
     * separated by a comma. The default is none. When setting this value,
     * carefully consider the type of information you are passing in during
     * deployment. By logging information about the request or response, you could
     * potentially expose sensitive data that is retrieved through the deployment
     * operations.
     *
     * @param {object} [parameters.properties.onErrorDeployment] The deployment on
     * error behavior.
     *
     * @param {string} [parameters.properties.onErrorDeployment.type] The
     * deployment on error behavior type. Possible values are LastSuccessful and
     * SpecificDeployment. Possible values include: 'LastSuccessful',
     * 'SpecificDeployment'
     *
     * @param {string} [parameters.properties.onErrorDeployment.deploymentName] The
     * deployment to be used on error case.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DeploymentValidateResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    validateAtSubscriptionScopeWithHttpOperationResponse(deploymentName: string, parameters: models.Deployment, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DeploymentValidateResult>>;

    /**
     * Validates whether the specified template is syntactically correct and will
     * be accepted by Azure Resource Manager..
     *
     * @param {string} deploymentName The name of the deployment.
     *
     * @param {object} parameters Parameters to validate.
     *
     * @param {string} [parameters.location] The location to store the deployment
     * data.
     *
     * @param {object} parameters.properties The deployment properties.
     *
     * @param {object} [parameters.properties.template] The template content. You
     * use this element when you want to pass the template syntax directly in the
     * request rather than link to an existing template. It can be a JObject or
     * well-formed JSON string. Use either the templateLink property or the
     * template property, but not both.
     *
     * @param {object} [parameters.properties.templateLink] The URI of the
     * template. Use either the templateLink property or the template property, but
     * not both.
     *
     * @param {string} parameters.properties.templateLink.uri The URI of the
     * template to deploy.
     *
     * @param {string} [parameters.properties.templateLink.contentVersion] If
     * included, must match the ContentVersion in the template.
     *
     * @param {object} [parameters.properties.parameters] Name and value pairs that
     * define the deployment parameters for the template. You use this element when
     * you want to provide the parameter values directly in the request rather than
     * link to an existing parameter file. Use either the parametersLink property
     * or the parameters property, but not both. It can be a JObject or a well
     * formed JSON string.
     *
     * @param {object} [parameters.properties.parametersLink] The URI of parameters
     * file. You use this element to link to an existing parameters file. Use
     * either the parametersLink property or the parameters property, but not both.
     *
     * @param {string} parameters.properties.parametersLink.uri The URI of the
     * parameters file.
     *
     * @param {string} [parameters.properties.parametersLink.contentVersion] If
     * included, must match the ContentVersion in the template.
     *
     * @param {string} parameters.properties.mode The mode that is used to deploy
     * resources. This value can be either Incremental or Complete. In Incremental
     * mode, resources are deployed without deleting existing resources that are
     * not included in the template. In Complete mode, resources are deployed and
     * existing resources in the resource group that are not included in the
     * template are deleted. Be careful when using Complete mode as you may
     * unintentionally delete resources. Possible values include: 'Incremental',
     * 'Complete'
     *
     * @param {object} [parameters.properties.debugSetting] The debug setting of
     * the deployment.
     *
     * @param {string} [parameters.properties.debugSetting.detailLevel] Specifies
     * the type of information to log for debugging. The permitted values are none,
     * requestContent, responseContent, or both requestContent and responseContent
     * separated by a comma. The default is none. When setting this value,
     * carefully consider the type of information you are passing in during
     * deployment. By logging information about the request or response, you could
     * potentially expose sensitive data that is retrieved through the deployment
     * operations.
     *
     * @param {object} [parameters.properties.onErrorDeployment] The deployment on
     * error behavior.
     *
     * @param {string} [parameters.properties.onErrorDeployment.type] The
     * deployment on error behavior type. Possible values are LastSuccessful and
     * SpecificDeployment. Possible values include: 'LastSuccessful',
     * 'SpecificDeployment'
     *
     * @param {string} [parameters.properties.onErrorDeployment.deploymentName] The
     * deployment to be used on error case.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DeploymentValidateResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DeploymentValidateResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DeploymentValidateResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    validateAtSubscriptionScope(deploymentName: string, parameters: models.Deployment, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DeploymentValidateResult>;
    validateAtSubscriptionScope(deploymentName: string, parameters: models.Deployment, callback: ServiceCallback<models.DeploymentValidateResult>): void;
    validateAtSubscriptionScope(deploymentName: string, parameters: models.Deployment, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeploymentValidateResult>): void;


    /**
     * Exports the template used for specified deployment.
     *
     * @param {string} deploymentName The name of the deployment from which to get
     * the template.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DeploymentExportResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    exportTemplateAtSubscriptionScopeWithHttpOperationResponse(deploymentName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DeploymentExportResult>>;

    /**
     * Exports the template used for specified deployment.
     *
     * @param {string} deploymentName The name of the deployment from which to get
     * the template.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DeploymentExportResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DeploymentExportResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DeploymentExportResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    exportTemplateAtSubscriptionScope(deploymentName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DeploymentExportResult>;
    exportTemplateAtSubscriptionScope(deploymentName: string, callback: ServiceCallback<models.DeploymentExportResult>): void;
    exportTemplateAtSubscriptionScope(deploymentName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeploymentExportResult>): void;


    /**
     * Get all the deployments for a subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] The filter to apply on the operation. For
     * example, you can use $filter=provisioningState eq '{state}'.
     *
     * @param {number} [options.top] The number of results to get. If null is
     * passed, returns all deployments.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DeploymentListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listAtSubscriptionScopeWithHttpOperationResponse(options?: { filter? : string, top? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DeploymentListResult>>;

    /**
     * Get all the deployments for a subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] The filter to apply on the operation. For
     * example, you can use $filter=provisioningState eq '{state}'.
     *
     * @param {number} [options.top] The number of results to get. If null is
     * passed, returns all deployments.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DeploymentListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DeploymentListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DeploymentListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listAtSubscriptionScope(options?: { filter? : string, top? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.DeploymentListResult>;
    listAtSubscriptionScope(callback: ServiceCallback<models.DeploymentListResult>): void;
    listAtSubscriptionScope(options: { filter? : string, top? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeploymentListResult>): void;


    /**
     * @summary Deletes a deployment from the deployment history.
     *
     * A template deployment that is currently running cannot be deleted. Deleting
     * a template deployment removes the associated deployment operations. Deleting
     * a template deployment does not affect the state of the resource group. This
     * is an asynchronous operation that returns a status of 202 until the template
     * deployment is successfully deleted. The Location response header contains
     * the URI that is used to obtain the status of the process. While the process
     * is running, a call to the URI in the Location header returns a status of
     * 202. When the process finishes, the URI in the Location header returns a
     * status of 204 on success. If the asynchronous request failed, the URI in the
     * Location header returns an error-level status code.
     *
     * @param {string} resourceGroupName The name of the resource group with the
     * deployment to delete. The name is case insensitive.
     *
     * @param {string} deploymentName The name of the deployment to delete.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, deploymentName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Deletes a deployment from the deployment history.
     *
     * A template deployment that is currently running cannot be deleted. Deleting
     * a template deployment removes the associated deployment operations. Deleting
     * a template deployment does not affect the state of the resource group. This
     * is an asynchronous operation that returns a status of 202 until the template
     * deployment is successfully deleted. The Location response header contains
     * the URI that is used to obtain the status of the process. While the process
     * is running, a call to the URI in the Location header returns a status of
     * 202. When the process finishes, the URI in the Location header returns a
     * status of 204 on success. If the asynchronous request failed, the URI in the
     * Location header returns an error-level status code.
     *
     * @param {string} resourceGroupName The name of the resource group with the
     * deployment to delete. The name is case insensitive.
     *
     * @param {string} deploymentName The name of the deployment to delete.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, deploymentName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, deploymentName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, deploymentName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Checks whether the deployment exists.
     *
     * @param {string} resourceGroupName The name of the resource group with the
     * deployment to check. The name is case insensitive.
     *
     * @param {string} deploymentName The name of the deployment to check.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Boolean>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    checkExistenceWithHttpOperationResponse(resourceGroupName: string, deploymentName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<boolean>>;

    /**
     * Checks whether the deployment exists.
     *
     * @param {string} resourceGroupName The name of the resource group with the
     * deployment to check. The name is case insensitive.
     *
     * @param {string} deploymentName The name of the deployment to check.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Boolean} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Boolean} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    checkExistence(resourceGroupName: string, deploymentName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<boolean>;
    checkExistence(resourceGroupName: string, deploymentName: string, callback: ServiceCallback<boolean>): void;
    checkExistence(resourceGroupName: string, deploymentName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<boolean>): void;


    /**
     * @summary Deploys resources to a resource group.
     *
     * You can provide the template and parameters directly in the request or link
     * to JSON files.
     *
     * @param {string} resourceGroupName The name of the resource group to deploy
     * the resources to. The name is case insensitive. The resource group must
     * already exist.
     *
     * @param {string} deploymentName The name of the deployment.
     *
     * @param {object} parameters Additional parameters supplied to the operation.
     *
     * @param {string} [parameters.location] The location to store the deployment
     * data.
     *
     * @param {object} parameters.properties The deployment properties.
     *
     * @param {object} [parameters.properties.template] The template content. You
     * use this element when you want to pass the template syntax directly in the
     * request rather than link to an existing template. It can be a JObject or
     * well-formed JSON string. Use either the templateLink property or the
     * template property, but not both.
     *
     * @param {object} [parameters.properties.templateLink] The URI of the
     * template. Use either the templateLink property or the template property, but
     * not both.
     *
     * @param {string} parameters.properties.templateLink.uri The URI of the
     * template to deploy.
     *
     * @param {string} [parameters.properties.templateLink.contentVersion] If
     * included, must match the ContentVersion in the template.
     *
     * @param {object} [parameters.properties.parameters] Name and value pairs that
     * define the deployment parameters for the template. You use this element when
     * you want to provide the parameter values directly in the request rather than
     * link to an existing parameter file. Use either the parametersLink property
     * or the parameters property, but not both. It can be a JObject or a well
     * formed JSON string.
     *
     * @param {object} [parameters.properties.parametersLink] The URI of parameters
     * file. You use this element to link to an existing parameters file. Use
     * either the parametersLink property or the parameters property, but not both.
     *
     * @param {string} parameters.properties.parametersLink.uri The URI of the
     * parameters file.
     *
     * @param {string} [parameters.properties.parametersLink.contentVersion] If
     * included, must match the ContentVersion in the template.
     *
     * @param {string} parameters.properties.mode The mode that is used to deploy
     * resources. This value can be either Incremental or Complete. In Incremental
     * mode, resources are deployed without deleting existing resources that are
     * not included in the template. In Complete mode, resources are deployed and
     * existing resources in the resource group that are not included in the
     * template are deleted. Be careful when using Complete mode as you may
     * unintentionally delete resources. Possible values include: 'Incremental',
     * 'Complete'
     *
     * @param {object} [parameters.properties.debugSetting] The debug setting of
     * the deployment.
     *
     * @param {string} [parameters.properties.debugSetting.detailLevel] Specifies
     * the type of information to log for debugging. The permitted values are none,
     * requestContent, responseContent, or both requestContent and responseContent
     * separated by a comma. The default is none. When setting this value,
     * carefully consider the type of information you are passing in during
     * deployment. By logging information about the request or response, you could
     * potentially expose sensitive data that is retrieved through the deployment
     * operations.
     *
     * @param {object} [parameters.properties.onErrorDeployment] The deployment on
     * error behavior.
     *
     * @param {string} [parameters.properties.onErrorDeployment.type] The
     * deployment on error behavior type. Possible values are LastSuccessful and
     * SpecificDeployment. Possible values include: 'LastSuccessful',
     * 'SpecificDeployment'
     *
     * @param {string} [parameters.properties.onErrorDeployment.deploymentName] The
     * deployment to be used on error case.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DeploymentExtended>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, deploymentName: string, parameters: models.Deployment, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DeploymentExtended>>;

    /**
     * @summary Deploys resources to a resource group.
     *
     * You can provide the template and parameters directly in the request or link
     * to JSON files.
     *
     * @param {string} resourceGroupName The name of the resource group to deploy
     * the resources to. The name is case insensitive. The resource group must
     * already exist.
     *
     * @param {string} deploymentName The name of the deployment.
     *
     * @param {object} parameters Additional parameters supplied to the operation.
     *
     * @param {string} [parameters.location] The location to store the deployment
     * data.
     *
     * @param {object} parameters.properties The deployment properties.
     *
     * @param {object} [parameters.properties.template] The template content. You
     * use this element when you want to pass the template syntax directly in the
     * request rather than link to an existing template. It can be a JObject or
     * well-formed JSON string. Use either the templateLink property or the
     * template property, but not both.
     *
     * @param {object} [parameters.properties.templateLink] The URI of the
     * template. Use either the templateLink property or the template property, but
     * not both.
     *
     * @param {string} parameters.properties.templateLink.uri The URI of the
     * template to deploy.
     *
     * @param {string} [parameters.properties.templateLink.contentVersion] If
     * included, must match the ContentVersion in the template.
     *
     * @param {object} [parameters.properties.parameters] Name and value pairs that
     * define the deployment parameters for the template. You use this element when
     * you want to provide the parameter values directly in the request rather than
     * link to an existing parameter file. Use either the parametersLink property
     * or the parameters property, but not both. It can be a JObject or a well
     * formed JSON string.
     *
     * @param {object} [parameters.properties.parametersLink] The URI of parameters
     * file. You use this element to link to an existing parameters file. Use
     * either the parametersLink property or the parameters property, but not both.
     *
     * @param {string} parameters.properties.parametersLink.uri The URI of the
     * parameters file.
     *
     * @param {string} [parameters.properties.parametersLink.contentVersion] If
     * included, must match the ContentVersion in the template.
     *
     * @param {string} parameters.properties.mode The mode that is used to deploy
     * resources. This value can be either Incremental or Complete. In Incremental
     * mode, resources are deployed without deleting existing resources that are
     * not included in the template. In Complete mode, resources are deployed and
     * existing resources in the resource group that are not included in the
     * template are deleted. Be careful when using Complete mode as you may
     * unintentionally delete resources. Possible values include: 'Incremental',
     * 'Complete'
     *
     * @param {object} [parameters.properties.debugSetting] The debug setting of
     * the deployment.
     *
     * @param {string} [parameters.properties.debugSetting.detailLevel] Specifies
     * the type of information to log for debugging. The permitted values are none,
     * requestContent, responseContent, or both requestContent and responseContent
     * separated by a comma. The default is none. When setting this value,
     * carefully consider the type of information you are passing in during
     * deployment. By logging information about the request or response, you could
     * potentially expose sensitive data that is retrieved through the deployment
     * operations.
     *
     * @param {object} [parameters.properties.onErrorDeployment] The deployment on
     * error behavior.
     *
     * @param {string} [parameters.properties.onErrorDeployment.type] The
     * deployment on error behavior type. Possible values are LastSuccessful and
     * SpecificDeployment. Possible values include: 'LastSuccessful',
     * 'SpecificDeployment'
     *
     * @param {string} [parameters.properties.onErrorDeployment.deploymentName] The
     * deployment to be used on error case.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DeploymentExtended} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DeploymentExtended} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DeploymentExtended} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, deploymentName: string, parameters: models.Deployment, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DeploymentExtended>;
    createOrUpdate(resourceGroupName: string, deploymentName: string, parameters: models.Deployment, callback: ServiceCallback<models.DeploymentExtended>): void;
    createOrUpdate(resourceGroupName: string, deploymentName: string, parameters: models.Deployment, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeploymentExtended>): void;


    /**
     * Gets a deployment.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} deploymentName The name of the deployment to get.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DeploymentExtended>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, deploymentName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DeploymentExtended>>;

    /**
     * Gets a deployment.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} deploymentName The name of the deployment to get.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DeploymentExtended} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DeploymentExtended} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DeploymentExtended} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, deploymentName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DeploymentExtended>;
    get(resourceGroupName: string, deploymentName: string, callback: ServiceCallback<models.DeploymentExtended>): void;
    get(resourceGroupName: string, deploymentName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeploymentExtended>): void;


    /**
     * @summary Cancels a currently running template deployment.
     *
     * You can cancel a deployment only if the provisioningState is Accepted or
     * Running. After the deployment is canceled, the provisioningState is set to
     * Canceled. Canceling a template deployment stops the currently running
     * template deployment and leaves the resource group partially deployed.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} deploymentName The name of the deployment to cancel.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    cancelWithHttpOperationResponse(resourceGroupName: string, deploymentName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Cancels a currently running template deployment.
     *
     * You can cancel a deployment only if the provisioningState is Accepted or
     * Running. After the deployment is canceled, the provisioningState is set to
     * Canceled. Canceling a template deployment stops the currently running
     * template deployment and leaves the resource group partially deployed.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} deploymentName The name of the deployment to cancel.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    cancel(resourceGroupName: string, deploymentName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    cancel(resourceGroupName: string, deploymentName: string, callback: ServiceCallback<void>): void;
    cancel(resourceGroupName: string, deploymentName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Validates whether the specified template is syntactically correct and will
     * be accepted by Azure Resource Manager..
     *
     * @param {string} resourceGroupName The name of the resource group the
     * template will be deployed to. The name is case insensitive.
     *
     * @param {string} deploymentName The name of the deployment.
     *
     * @param {object} parameters Parameters to validate.
     *
     * @param {string} [parameters.location] The location to store the deployment
     * data.
     *
     * @param {object} parameters.properties The deployment properties.
     *
     * @param {object} [parameters.properties.template] The template content. You
     * use this element when you want to pass the template syntax directly in the
     * request rather than link to an existing template. It can be a JObject or
     * well-formed JSON string. Use either the templateLink property or the
     * template property, but not both.
     *
     * @param {object} [parameters.properties.templateLink] The URI of the
     * template. Use either the templateLink property or the template property, but
     * not both.
     *
     * @param {string} parameters.properties.templateLink.uri The URI of the
     * template to deploy.
     *
     * @param {string} [parameters.properties.templateLink.contentVersion] If
     * included, must match the ContentVersion in the template.
     *
     * @param {object} [parameters.properties.parameters] Name and value pairs that
     * define the deployment parameters for the template. You use this element when
     * you want to provide the parameter values directly in the request rather than
     * link to an existing parameter file. Use either the parametersLink property
     * or the parameters property, but not both. It can be a JObject or a well
     * formed JSON string.
     *
     * @param {object} [parameters.properties.parametersLink] The URI of parameters
     * file. You use this element to link to an existing parameters file. Use
     * either the parametersLink property or the parameters property, but not both.
     *
     * @param {string} parameters.properties.parametersLink.uri The URI of the
     * parameters file.
     *
     * @param {string} [parameters.properties.parametersLink.contentVersion] If
     * included, must match the ContentVersion in the template.
     *
     * @param {string} parameters.properties.mode The mode that is used to deploy
     * resources. This value can be either Incremental or Complete. In Incremental
     * mode, resources are deployed without deleting existing resources that are
     * not included in the template. In Complete mode, resources are deployed and
     * existing resources in the resource group that are not included in the
     * template are deleted. Be careful when using Complete mode as you may
     * unintentionally delete resources. Possible values include: 'Incremental',
     * 'Complete'
     *
     * @param {object} [parameters.properties.debugSetting] The debug setting of
     * the deployment.
     *
     * @param {string} [parameters.properties.debugSetting.detailLevel] Specifies
     * the type of information to log for debugging. The permitted values are none,
     * requestContent, responseContent, or both requestContent and responseContent
     * separated by a comma. The default is none. When setting this value,
     * carefully consider the type of information you are passing in during
     * deployment. By logging information about the request or response, you could
     * potentially expose sensitive data that is retrieved through the deployment
     * operations.
     *
     * @param {object} [parameters.properties.onErrorDeployment] The deployment on
     * error behavior.
     *
     * @param {string} [parameters.properties.onErrorDeployment.type] The
     * deployment on error behavior type. Possible values are LastSuccessful and
     * SpecificDeployment. Possible values include: 'LastSuccessful',
     * 'SpecificDeployment'
     *
     * @param {string} [parameters.properties.onErrorDeployment.deploymentName] The
     * deployment to be used on error case.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DeploymentValidateResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    validateWithHttpOperationResponse(resourceGroupName: string, deploymentName: string, parameters: models.Deployment, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DeploymentValidateResult>>;

    /**
     * Validates whether the specified template is syntactically correct and will
     * be accepted by Azure Resource Manager..
     *
     * @param {string} resourceGroupName The name of the resource group the
     * template will be deployed to. The name is case insensitive.
     *
     * @param {string} deploymentName The name of the deployment.
     *
     * @param {object} parameters Parameters to validate.
     *
     * @param {string} [parameters.location] The location to store the deployment
     * data.
     *
     * @param {object} parameters.properties The deployment properties.
     *
     * @param {object} [parameters.properties.template] The template content. You
     * use this element when you want to pass the template syntax directly in the
     * request rather than link to an existing template. It can be a JObject or
     * well-formed JSON string. Use either the templateLink property or the
     * template property, but not both.
     *
     * @param {object} [parameters.properties.templateLink] The URI of the
     * template. Use either the templateLink property or the template property, but
     * not both.
     *
     * @param {string} parameters.properties.templateLink.uri The URI of the
     * template to deploy.
     *
     * @param {string} [parameters.properties.templateLink.contentVersion] If
     * included, must match the ContentVersion in the template.
     *
     * @param {object} [parameters.properties.parameters] Name and value pairs that
     * define the deployment parameters for the template. You use this element when
     * you want to provide the parameter values directly in the request rather than
     * link to an existing parameter file. Use either the parametersLink property
     * or the parameters property, but not both. It can be a JObject or a well
     * formed JSON string.
     *
     * @param {object} [parameters.properties.parametersLink] The URI of parameters
     * file. You use this element to link to an existing parameters file. Use
     * either the parametersLink property or the parameters property, but not both.
     *
     * @param {string} parameters.properties.parametersLink.uri The URI of the
     * parameters file.
     *
     * @param {string} [parameters.properties.parametersLink.contentVersion] If
     * included, must match the ContentVersion in the template.
     *
     * @param {string} parameters.properties.mode The mode that is used to deploy
     * resources. This value can be either Incremental or Complete. In Incremental
     * mode, resources are deployed without deleting existing resources that are
     * not included in the template. In Complete mode, resources are deployed and
     * existing resources in the resource group that are not included in the
     * template are deleted. Be careful when using Complete mode as you may
     * unintentionally delete resources. Possible values include: 'Incremental',
     * 'Complete'
     *
     * @param {object} [parameters.properties.debugSetting] The debug setting of
     * the deployment.
     *
     * @param {string} [parameters.properties.debugSetting.detailLevel] Specifies
     * the type of information to log for debugging. The permitted values are none,
     * requestContent, responseContent, or both requestContent and responseContent
     * separated by a comma. The default is none. When setting this value,
     * carefully consider the type of information you are passing in during
     * deployment. By logging information about the request or response, you could
     * potentially expose sensitive data that is retrieved through the deployment
     * operations.
     *
     * @param {object} [parameters.properties.onErrorDeployment] The deployment on
     * error behavior.
     *
     * @param {string} [parameters.properties.onErrorDeployment.type] The
     * deployment on error behavior type. Possible values are LastSuccessful and
     * SpecificDeployment. Possible values include: 'LastSuccessful',
     * 'SpecificDeployment'
     *
     * @param {string} [parameters.properties.onErrorDeployment.deploymentName] The
     * deployment to be used on error case.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DeploymentValidateResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DeploymentValidateResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DeploymentValidateResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    validate(resourceGroupName: string, deploymentName: string, parameters: models.Deployment, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DeploymentValidateResult>;
    validate(resourceGroupName: string, deploymentName: string, parameters: models.Deployment, callback: ServiceCallback<models.DeploymentValidateResult>): void;
    validate(resourceGroupName: string, deploymentName: string, parameters: models.Deployment, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeploymentValidateResult>): void;


    /**
     * Exports the template used for specified deployment.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} deploymentName The name of the deployment from which to get
     * the template.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DeploymentExportResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    exportTemplateWithHttpOperationResponse(resourceGroupName: string, deploymentName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DeploymentExportResult>>;

    /**
     * Exports the template used for specified deployment.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} deploymentName The name of the deployment from which to get
     * the template.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DeploymentExportResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DeploymentExportResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DeploymentExportResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    exportTemplate(resourceGroupName: string, deploymentName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DeploymentExportResult>;
    exportTemplate(resourceGroupName: string, deploymentName: string, callback: ServiceCallback<models.DeploymentExportResult>): void;
    exportTemplate(resourceGroupName: string, deploymentName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeploymentExportResult>): void;


    /**
     * Get all the deployments for a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group with the
     * deployments to get. The name is case insensitive.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] The filter to apply on the operation. For
     * example, you can use $filter=provisioningState eq '{state}'.
     *
     * @param {number} [options.top] The number of results to get. If null is
     * passed, returns all deployments.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DeploymentListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupWithHttpOperationResponse(resourceGroupName: string, options?: { filter? : string, top? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DeploymentListResult>>;

    /**
     * Get all the deployments for a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group with the
     * deployments to get. The name is case insensitive.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] The filter to apply on the operation. For
     * example, you can use $filter=provisioningState eq '{state}'.
     *
     * @param {number} [options.top] The number of results to get. If null is
     * passed, returns all deployments.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DeploymentListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DeploymentListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DeploymentListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroup(resourceGroupName: string, options?: { filter? : string, top? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.DeploymentListResult>;
    listByResourceGroup(resourceGroupName: string, callback: ServiceCallback<models.DeploymentListResult>): void;
    listByResourceGroup(resourceGroupName: string, options: { filter? : string, top? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeploymentListResult>): void;


    /**
     * @summary Deletes a deployment from the deployment history.
     *
     * A template deployment that is currently running cannot be deleted. Deleting
     * a template deployment removes the associated deployment operations. This is
     * an asynchronous operation that returns a status of 202 until the template
     * deployment is successfully deleted. The Location response header contains
     * the URI that is used to obtain the status of the process. While the process
     * is running, a call to the URI in the Location header returns a status of
     * 202. When the process finishes, the URI in the Location header returns a
     * status of 204 on success. If the asynchronous request failed, the URI in the
     * Location header returns an error-level status code.
     *
     * @param {string} deploymentName The name of the deployment to delete.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteAtSubscriptionScopeWithHttpOperationResponse(deploymentName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Deletes a deployment from the deployment history.
     *
     * A template deployment that is currently running cannot be deleted. Deleting
     * a template deployment removes the associated deployment operations. This is
     * an asynchronous operation that returns a status of 202 until the template
     * deployment is successfully deleted. The Location response header contains
     * the URI that is used to obtain the status of the process. While the process
     * is running, a call to the URI in the Location header returns a status of
     * 202. When the process finishes, the URI in the Location header returns a
     * status of 204 on success. If the asynchronous request failed, the URI in the
     * Location header returns an error-level status code.
     *
     * @param {string} deploymentName The name of the deployment to delete.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteAtSubscriptionScope(deploymentName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteAtSubscriptionScope(deploymentName: string, callback: ServiceCallback<void>): void;
    beginDeleteAtSubscriptionScope(deploymentName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Deploys resources at subscription scope.
     *
     * You can provide the template and parameters directly in the request or link
     * to JSON files.
     *
     * @param {string} deploymentName The name of the deployment.
     *
     * @param {object} parameters Additional parameters supplied to the operation.
     *
     * @param {string} [parameters.location] The location to store the deployment
     * data.
     *
     * @param {object} parameters.properties The deployment properties.
     *
     * @param {object} [parameters.properties.template] The template content. You
     * use this element when you want to pass the template syntax directly in the
     * request rather than link to an existing template. It can be a JObject or
     * well-formed JSON string. Use either the templateLink property or the
     * template property, but not both.
     *
     * @param {object} [parameters.properties.templateLink] The URI of the
     * template. Use either the templateLink property or the template property, but
     * not both.
     *
     * @param {string} parameters.properties.templateLink.uri The URI of the
     * template to deploy.
     *
     * @param {string} [parameters.properties.templateLink.contentVersion] If
     * included, must match the ContentVersion in the template.
     *
     * @param {object} [parameters.properties.parameters] Name and value pairs that
     * define the deployment parameters for the template. You use this element when
     * you want to provide the parameter values directly in the request rather than
     * link to an existing parameter file. Use either the parametersLink property
     * or the parameters property, but not both. It can be a JObject or a well
     * formed JSON string.
     *
     * @param {object} [parameters.properties.parametersLink] The URI of parameters
     * file. You use this element to link to an existing parameters file. Use
     * either the parametersLink property or the parameters property, but not both.
     *
     * @param {string} parameters.properties.parametersLink.uri The URI of the
     * parameters file.
     *
     * @param {string} [parameters.properties.parametersLink.contentVersion] If
     * included, must match the ContentVersion in the template.
     *
     * @param {string} parameters.properties.mode The mode that is used to deploy
     * resources. This value can be either Incremental or Complete. In Incremental
     * mode, resources are deployed without deleting existing resources that are
     * not included in the template. In Complete mode, resources are deployed and
     * existing resources in the resource group that are not included in the
     * template are deleted. Be careful when using Complete mode as you may
     * unintentionally delete resources. Possible values include: 'Incremental',
     * 'Complete'
     *
     * @param {object} [parameters.properties.debugSetting] The debug setting of
     * the deployment.
     *
     * @param {string} [parameters.properties.debugSetting.detailLevel] Specifies
     * the type of information to log for debugging. The permitted values are none,
     * requestContent, responseContent, or both requestContent and responseContent
     * separated by a comma. The default is none. When setting this value,
     * carefully consider the type of information you are passing in during
     * deployment. By logging information about the request or response, you could
     * potentially expose sensitive data that is retrieved through the deployment
     * operations.
     *
     * @param {object} [parameters.properties.onErrorDeployment] The deployment on
     * error behavior.
     *
     * @param {string} [parameters.properties.onErrorDeployment.type] The
     * deployment on error behavior type. Possible values are LastSuccessful and
     * SpecificDeployment. Possible values include: 'LastSuccessful',
     * 'SpecificDeployment'
     *
     * @param {string} [parameters.properties.onErrorDeployment.deploymentName] The
     * deployment to be used on error case.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DeploymentExtended>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateAtSubscriptionScopeWithHttpOperationResponse(deploymentName: string, parameters: models.Deployment, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DeploymentExtended>>;

    /**
     * @summary Deploys resources at subscription scope.
     *
     * You can provide the template and parameters directly in the request or link
     * to JSON files.
     *
     * @param {string} deploymentName The name of the deployment.
     *
     * @param {object} parameters Additional parameters supplied to the operation.
     *
     * @param {string} [parameters.location] The location to store the deployment
     * data.
     *
     * @param {object} parameters.properties The deployment properties.
     *
     * @param {object} [parameters.properties.template] The template content. You
     * use this element when you want to pass the template syntax directly in the
     * request rather than link to an existing template. It can be a JObject or
     * well-formed JSON string. Use either the templateLink property or the
     * template property, but not both.
     *
     * @param {object} [parameters.properties.templateLink] The URI of the
     * template. Use either the templateLink property or the template property, but
     * not both.
     *
     * @param {string} parameters.properties.templateLink.uri The URI of the
     * template to deploy.
     *
     * @param {string} [parameters.properties.templateLink.contentVersion] If
     * included, must match the ContentVersion in the template.
     *
     * @param {object} [parameters.properties.parameters] Name and value pairs that
     * define the deployment parameters for the template. You use this element when
     * you want to provide the parameter values directly in the request rather than
     * link to an existing parameter file. Use either the parametersLink property
     * or the parameters property, but not both. It can be a JObject or a well
     * formed JSON string.
     *
     * @param {object} [parameters.properties.parametersLink] The URI of parameters
     * file. You use this element to link to an existing parameters file. Use
     * either the parametersLink property or the parameters property, but not both.
     *
     * @param {string} parameters.properties.parametersLink.uri The URI of the
     * parameters file.
     *
     * @param {string} [parameters.properties.parametersLink.contentVersion] If
     * included, must match the ContentVersion in the template.
     *
     * @param {string} parameters.properties.mode The mode that is used to deploy
     * resources. This value can be either Incremental or Complete. In Incremental
     * mode, resources are deployed without deleting existing resources that are
     * not included in the template. In Complete mode, resources are deployed and
     * existing resources in the resource group that are not included in the
     * template are deleted. Be careful when using Complete mode as you may
     * unintentionally delete resources. Possible values include: 'Incremental',
     * 'Complete'
     *
     * @param {object} [parameters.properties.debugSetting] The debug setting of
     * the deployment.
     *
     * @param {string} [parameters.properties.debugSetting.detailLevel] Specifies
     * the type of information to log for debugging. The permitted values are none,
     * requestContent, responseContent, or both requestContent and responseContent
     * separated by a comma. The default is none. When setting this value,
     * carefully consider the type of information you are passing in during
     * deployment. By logging information about the request or response, you could
     * potentially expose sensitive data that is retrieved through the deployment
     * operations.
     *
     * @param {object} [parameters.properties.onErrorDeployment] The deployment on
     * error behavior.
     *
     * @param {string} [parameters.properties.onErrorDeployment.type] The
     * deployment on error behavior type. Possible values are LastSuccessful and
     * SpecificDeployment. Possible values include: 'LastSuccessful',
     * 'SpecificDeployment'
     *
     * @param {string} [parameters.properties.onErrorDeployment.deploymentName] The
     * deployment to be used on error case.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DeploymentExtended} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DeploymentExtended} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DeploymentExtended} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdateAtSubscriptionScope(deploymentName: string, parameters: models.Deployment, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DeploymentExtended>;
    beginCreateOrUpdateAtSubscriptionScope(deploymentName: string, parameters: models.Deployment, callback: ServiceCallback<models.DeploymentExtended>): void;
    beginCreateOrUpdateAtSubscriptionScope(deploymentName: string, parameters: models.Deployment, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeploymentExtended>): void;


    /**
     * @summary Deletes a deployment from the deployment history.
     *
     * A template deployment that is currently running cannot be deleted. Deleting
     * a template deployment removes the associated deployment operations. Deleting
     * a template deployment does not affect the state of the resource group. This
     * is an asynchronous operation that returns a status of 202 until the template
     * deployment is successfully deleted. The Location response header contains
     * the URI that is used to obtain the status of the process. While the process
     * is running, a call to the URI in the Location header returns a status of
     * 202. When the process finishes, the URI in the Location header returns a
     * status of 204 on success. If the asynchronous request failed, the URI in the
     * Location header returns an error-level status code.
     *
     * @param {string} resourceGroupName The name of the resource group with the
     * deployment to delete. The name is case insensitive.
     *
     * @param {string} deploymentName The name of the deployment to delete.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, deploymentName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Deletes a deployment from the deployment history.
     *
     * A template deployment that is currently running cannot be deleted. Deleting
     * a template deployment removes the associated deployment operations. Deleting
     * a template deployment does not affect the state of the resource group. This
     * is an asynchronous operation that returns a status of 202 until the template
     * deployment is successfully deleted. The Location response header contains
     * the URI that is used to obtain the status of the process. While the process
     * is running, a call to the URI in the Location header returns a status of
     * 202. When the process finishes, the URI in the Location header returns a
     * status of 204 on success. If the asynchronous request failed, the URI in the
     * Location header returns an error-level status code.
     *
     * @param {string} resourceGroupName The name of the resource group with the
     * deployment to delete. The name is case insensitive.
     *
     * @param {string} deploymentName The name of the deployment to delete.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(resourceGroupName: string, deploymentName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(resourceGroupName: string, deploymentName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, deploymentName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Deploys resources to a resource group.
     *
     * You can provide the template and parameters directly in the request or link
     * to JSON files.
     *
     * @param {string} resourceGroupName The name of the resource group to deploy
     * the resources to. The name is case insensitive. The resource group must
     * already exist.
     *
     * @param {string} deploymentName The name of the deployment.
     *
     * @param {object} parameters Additional parameters supplied to the operation.
     *
     * @param {string} [parameters.location] The location to store the deployment
     * data.
     *
     * @param {object} parameters.properties The deployment properties.
     *
     * @param {object} [parameters.properties.template] The template content. You
     * use this element when you want to pass the template syntax directly in the
     * request rather than link to an existing template. It can be a JObject or
     * well-formed JSON string. Use either the templateLink property or the
     * template property, but not both.
     *
     * @param {object} [parameters.properties.templateLink] The URI of the
     * template. Use either the templateLink property or the template property, but
     * not both.
     *
     * @param {string} parameters.properties.templateLink.uri The URI of the
     * template to deploy.
     *
     * @param {string} [parameters.properties.templateLink.contentVersion] If
     * included, must match the ContentVersion in the template.
     *
     * @param {object} [parameters.properties.parameters] Name and value pairs that
     * define the deployment parameters for the template. You use this element when
     * you want to provide the parameter values directly in the request rather than
     * link to an existing parameter file. Use either the parametersLink property
     * or the parameters property, but not both. It can be a JObject or a well
     * formed JSON string.
     *
     * @param {object} [parameters.properties.parametersLink] The URI of parameters
     * file. You use this element to link to an existing parameters file. Use
     * either the parametersLink property or the parameters property, but not both.
     *
     * @param {string} parameters.properties.parametersLink.uri The URI of the
     * parameters file.
     *
     * @param {string} [parameters.properties.parametersLink.contentVersion] If
     * included, must match the ContentVersion in the template.
     *
     * @param {string} parameters.properties.mode The mode that is used to deploy
     * resources. This value can be either Incremental or Complete. In Incremental
     * mode, resources are deployed without deleting existing resources that are
     * not included in the template. In Complete mode, resources are deployed and
     * existing resources in the resource group that are not included in the
     * template are deleted. Be careful when using Complete mode as you may
     * unintentionally delete resources. Possible values include: 'Incremental',
     * 'Complete'
     *
     * @param {object} [parameters.properties.debugSetting] The debug setting of
     * the deployment.
     *
     * @param {string} [parameters.properties.debugSetting.detailLevel] Specifies
     * the type of information to log for debugging. The permitted values are none,
     * requestContent, responseContent, or both requestContent and responseContent
     * separated by a comma. The default is none. When setting this value,
     * carefully consider the type of information you are passing in during
     * deployment. By logging information about the request or response, you could
     * potentially expose sensitive data that is retrieved through the deployment
     * operations.
     *
     * @param {object} [parameters.properties.onErrorDeployment] The deployment on
     * error behavior.
     *
     * @param {string} [parameters.properties.onErrorDeployment.type] The
     * deployment on error behavior type. Possible values are LastSuccessful and
     * SpecificDeployment. Possible values include: 'LastSuccessful',
     * 'SpecificDeployment'
     *
     * @param {string} [parameters.properties.onErrorDeployment.deploymentName] The
     * deployment to be used on error case.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DeploymentExtended>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, deploymentName: string, parameters: models.Deployment, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DeploymentExtended>>;

    /**
     * @summary Deploys resources to a resource group.
     *
     * You can provide the template and parameters directly in the request or link
     * to JSON files.
     *
     * @param {string} resourceGroupName The name of the resource group to deploy
     * the resources to. The name is case insensitive. The resource group must
     * already exist.
     *
     * @param {string} deploymentName The name of the deployment.
     *
     * @param {object} parameters Additional parameters supplied to the operation.
     *
     * @param {string} [parameters.location] The location to store the deployment
     * data.
     *
     * @param {object} parameters.properties The deployment properties.
     *
     * @param {object} [parameters.properties.template] The template content. You
     * use this element when you want to pass the template syntax directly in the
     * request rather than link to an existing template. It can be a JObject or
     * well-formed JSON string. Use either the templateLink property or the
     * template property, but not both.
     *
     * @param {object} [parameters.properties.templateLink] The URI of the
     * template. Use either the templateLink property or the template property, but
     * not both.
     *
     * @param {string} parameters.properties.templateLink.uri The URI of the
     * template to deploy.
     *
     * @param {string} [parameters.properties.templateLink.contentVersion] If
     * included, must match the ContentVersion in the template.
     *
     * @param {object} [parameters.properties.parameters] Name and value pairs that
     * define the deployment parameters for the template. You use this element when
     * you want to provide the parameter values directly in the request rather than
     * link to an existing parameter file. Use either the parametersLink property
     * or the parameters property, but not both. It can be a JObject or a well
     * formed JSON string.
     *
     * @param {object} [parameters.properties.parametersLink] The URI of parameters
     * file. You use this element to link to an existing parameters file. Use
     * either the parametersLink property or the parameters property, but not both.
     *
     * @param {string} parameters.properties.parametersLink.uri The URI of the
     * parameters file.
     *
     * @param {string} [parameters.properties.parametersLink.contentVersion] If
     * included, must match the ContentVersion in the template.
     *
     * @param {string} parameters.properties.mode The mode that is used to deploy
     * resources. This value can be either Incremental or Complete. In Incremental
     * mode, resources are deployed without deleting existing resources that are
     * not included in the template. In Complete mode, resources are deployed and
     * existing resources in the resource group that are not included in the
     * template are deleted. Be careful when using Complete mode as you may
     * unintentionally delete resources. Possible values include: 'Incremental',
     * 'Complete'
     *
     * @param {object} [parameters.properties.debugSetting] The debug setting of
     * the deployment.
     *
     * @param {string} [parameters.properties.debugSetting.detailLevel] Specifies
     * the type of information to log for debugging. The permitted values are none,
     * requestContent, responseContent, or both requestContent and responseContent
     * separated by a comma. The default is none. When setting this value,
     * carefully consider the type of information you are passing in during
     * deployment. By logging information about the request or response, you could
     * potentially expose sensitive data that is retrieved through the deployment
     * operations.
     *
     * @param {object} [parameters.properties.onErrorDeployment] The deployment on
     * error behavior.
     *
     * @param {string} [parameters.properties.onErrorDeployment.type] The
     * deployment on error behavior type. Possible values are LastSuccessful and
     * SpecificDeployment. Possible values include: 'LastSuccessful',
     * 'SpecificDeployment'
     *
     * @param {string} [parameters.properties.onErrorDeployment.deploymentName] The
     * deployment to be used on error case.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DeploymentExtended} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DeploymentExtended} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DeploymentExtended} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(resourceGroupName: string, deploymentName: string, parameters: models.Deployment, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DeploymentExtended>;
    beginCreateOrUpdate(resourceGroupName: string, deploymentName: string, parameters: models.Deployment, callback: ServiceCallback<models.DeploymentExtended>): void;
    beginCreateOrUpdate(resourceGroupName: string, deploymentName: string, parameters: models.Deployment, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeploymentExtended>): void;


    /**
     * Get all the deployments for a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DeploymentListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listAtSubscriptionScopeNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DeploymentListResult>>;

    /**
     * Get all the deployments for a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DeploymentListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DeploymentListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DeploymentListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listAtSubscriptionScopeNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DeploymentListResult>;
    listAtSubscriptionScopeNext(nextPageLink: string, callback: ServiceCallback<models.DeploymentListResult>): void;
    listAtSubscriptionScopeNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeploymentListResult>): void;


    /**
     * Get all the deployments for a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DeploymentListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DeploymentListResult>>;

    /**
     * Get all the deployments for a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DeploymentListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DeploymentListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DeploymentListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroupNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DeploymentListResult>;
    listByResourceGroupNext(nextPageLink: string, callback: ServiceCallback<models.DeploymentListResult>): void;
    listByResourceGroupNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeploymentListResult>): void;
}

/**
 * @class
 * Providers
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ResourceManagementClient.
 */
export interface Providers {


    /**
     * Unregisters a subscription from a resource provider.
     *
     * @param {string} resourceProviderNamespace The namespace of the resource
     * provider to unregister.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Provider>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    unregisterWithHttpOperationResponse(resourceProviderNamespace: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Provider>>;

    /**
     * Unregisters a subscription from a resource provider.
     *
     * @param {string} resourceProviderNamespace The namespace of the resource
     * provider to unregister.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Provider} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Provider} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Provider} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    unregister(resourceProviderNamespace: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Provider>;
    unregister(resourceProviderNamespace: string, callback: ServiceCallback<models.Provider>): void;
    unregister(resourceProviderNamespace: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Provider>): void;


    /**
     * Registers a subscription with a resource provider.
     *
     * @param {string} resourceProviderNamespace The namespace of the resource
     * provider to register.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Provider>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    registerWithHttpOperationResponse(resourceProviderNamespace: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Provider>>;

    /**
     * Registers a subscription with a resource provider.
     *
     * @param {string} resourceProviderNamespace The namespace of the resource
     * provider to register.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Provider} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Provider} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Provider} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    register(resourceProviderNamespace: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Provider>;
    register(resourceProviderNamespace: string, callback: ServiceCallback<models.Provider>): void;
    register(resourceProviderNamespace: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Provider>): void;


    /**
     * Gets all resource providers for a subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.top] The number of results to return. If null is
     * passed returns all deployments.
     *
     * @param {string} [options.expand] The properties to include in the results.
     * For example, use &$expand=metadata in the query string to retrieve resource
     * provider metadata. To include property aliases in response, use
     * $expand=resourceTypes/aliases.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ProviderListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { top? : number, expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ProviderListResult>>;

    /**
     * Gets all resource providers for a subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.top] The number of results to return. If null is
     * passed returns all deployments.
     *
     * @param {string} [options.expand] The properties to include in the results.
     * For example, use &$expand=metadata in the query string to retrieve resource
     * provider metadata. To include property aliases in response, use
     * $expand=resourceTypes/aliases.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ProviderListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ProviderListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ProviderListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { top? : number, expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.ProviderListResult>;
    list(callback: ServiceCallback<models.ProviderListResult>): void;
    list(options: { top? : number, expand? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProviderListResult>): void;


    /**
     * Gets the specified resource provider.
     *
     * @param {string} resourceProviderNamespace The namespace of the resource
     * provider.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] The $expand query parameter. For example,
     * to include property aliases in response, use $expand=resourceTypes/aliases.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Provider>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceProviderNamespace: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Provider>>;

    /**
     * Gets the specified resource provider.
     *
     * @param {string} resourceProviderNamespace The namespace of the resource
     * provider.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] The $expand query parameter. For example,
     * to include property aliases in response, use $expand=resourceTypes/aliases.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Provider} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Provider} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Provider} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceProviderNamespace: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.Provider>;
    get(resourceProviderNamespace: string, callback: ServiceCallback<models.Provider>): void;
    get(resourceProviderNamespace: string, options: { expand? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Provider>): void;


    /**
     * Gets all resource providers for a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ProviderListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ProviderListResult>>;

    /**
     * Gets all resource providers for a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ProviderListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ProviderListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ProviderListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ProviderListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.ProviderListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProviderListResult>): void;
}

/**
 * @class
 * Resources
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ResourceManagementClient.
 */
export interface Resources {


    /**
     * Get all the resources for a resource group.
     *
     * @param {string} resourceGroupName The resource group with the resources to
     * get.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] The filter to apply on the
     * operation.<br><br>The properties you can use for eq (equals) or ne (not
     * equals) are: location, resourceType, name, resourceGroup, identity,
     * identity/principalId, plan, plan/publisher, plan/product, plan/name,
     * plan/version, and plan/promotionCode.<br><br>For example, to filter by a
     * resource type, use: $filter=resourceType eq
     * 'Microsoft.Network/virtualNetworks'<br><br>You can use substringof(value,
     * property) in the filter. The properties you can use for substring are: name
     * and resourceGroup.<br><br>For example, to get all resources with 'demo'
     * anywhere in the name, use: $filter=substringof('demo', name)<br><br>You can
     * link more than one substringof together by adding and/or
     * operators.<br><br>You can filter by tag names and values. For example, to
     * filter for a tag name and value, use $filter=tagName eq 'tag1' and tagValue
     * eq 'Value1'<br><br>You can use some properties together when filtering. The
     * combinations you can use are: substringof and/or resourceType, plan and
     * plan/publisher and plan/name, identity and identity/principalId.
     *
     * @param {string} [options.expand] The $expand query parameter. You can expand
     * createdTime and changedTime. For example, to expand both properties, use
     * $expand=changedTime,createdTime
     *
     * @param {number} [options.top] The number of results to return. If null is
     * passed, returns all resources.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResourceListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupWithHttpOperationResponse(resourceGroupName: string, options?: { filter? : string, expand? : string, top? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResourceListResult>>;

    /**
     * Get all the resources for a resource group.
     *
     * @param {string} resourceGroupName The resource group with the resources to
     * get.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] The filter to apply on the
     * operation.<br><br>The properties you can use for eq (equals) or ne (not
     * equals) are: location, resourceType, name, resourceGroup, identity,
     * identity/principalId, plan, plan/publisher, plan/product, plan/name,
     * plan/version, and plan/promotionCode.<br><br>For example, to filter by a
     * resource type, use: $filter=resourceType eq
     * 'Microsoft.Network/virtualNetworks'<br><br>You can use substringof(value,
     * property) in the filter. The properties you can use for substring are: name
     * and resourceGroup.<br><br>For example, to get all resources with 'demo'
     * anywhere in the name, use: $filter=substringof('demo', name)<br><br>You can
     * link more than one substringof together by adding and/or
     * operators.<br><br>You can filter by tag names and values. For example, to
     * filter for a tag name and value, use $filter=tagName eq 'tag1' and tagValue
     * eq 'Value1'<br><br>You can use some properties together when filtering. The
     * combinations you can use are: substringof and/or resourceType, plan and
     * plan/publisher and plan/name, identity and identity/principalId.
     *
     * @param {string} [options.expand] The $expand query parameter. You can expand
     * createdTime and changedTime. For example, to expand both properties, use
     * $expand=changedTime,createdTime
     *
     * @param {number} [options.top] The number of results to return. If null is
     * passed, returns all resources.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResourceListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResourceListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResourceListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroup(resourceGroupName: string, options?: { filter? : string, expand? : string, top? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.ResourceListResult>;
    listByResourceGroup(resourceGroupName: string, callback: ServiceCallback<models.ResourceListResult>): void;
    listByResourceGroup(resourceGroupName: string, options: { filter? : string, expand? : string, top? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceListResult>): void;


    /**
     * @summary Moves resources from one resource group to another resource group.
     *
     * The resources to move must be in the same source resource group. The target
     * resource group may be in a different subscription. When moving resources,
     * both the source group and the target group are locked for the duration of
     * the operation. Write and delete operations are blocked on the groups until
     * the move completes.
     *
     * @param {string} sourceResourceGroupName The name of the resource group
     * containing the resources to move.
     *
     * @param {object} parameters Parameters for moving resources.
     *
     * @param {array} [parameters.resources] The IDs of the resources.
     *
     * @param {string} [parameters.targetResourceGroup] The target resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    moveResourcesWithHttpOperationResponse(sourceResourceGroupName: string, parameters: models.ResourcesMoveInfo, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Moves resources from one resource group to another resource group.
     *
     * The resources to move must be in the same source resource group. The target
     * resource group may be in a different subscription. When moving resources,
     * both the source group and the target group are locked for the duration of
     * the operation. Write and delete operations are blocked on the groups until
     * the move completes.
     *
     * @param {string} sourceResourceGroupName The name of the resource group
     * containing the resources to move.
     *
     * @param {object} parameters Parameters for moving resources.
     *
     * @param {array} [parameters.resources] The IDs of the resources.
     *
     * @param {string} [parameters.targetResourceGroup] The target resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    moveResources(sourceResourceGroupName: string, parameters: models.ResourcesMoveInfo, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    moveResources(sourceResourceGroupName: string, parameters: models.ResourcesMoveInfo, callback: ServiceCallback<void>): void;
    moveResources(sourceResourceGroupName: string, parameters: models.ResourcesMoveInfo, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Validates whether resources can be moved from one resource group to
     * another resource group.
     *
     * This operation checks whether the specified resources can be moved to the
     * target. The resources to move must be in the same source resource group. The
     * target resource group may be in a different subscription. If validation
     * succeeds, it returns HTTP response code 204 (no content). If validation
     * fails, it returns HTTP response code 409 (Conflict) with an error message.
     * Retrieve the URL in the Location header value to check the result of the
     * long-running operation.
     *
     * @param {string} sourceResourceGroupName The name of the resource group
     * containing the resources to validate for move.
     *
     * @param {object} parameters Parameters for moving resources.
     *
     * @param {array} [parameters.resources] The IDs of the resources.
     *
     * @param {string} [parameters.targetResourceGroup] The target resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    validateMoveResourcesWithHttpOperationResponse(sourceResourceGroupName: string, parameters: models.ResourcesMoveInfo, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Validates whether resources can be moved from one resource group to
     * another resource group.
     *
     * This operation checks whether the specified resources can be moved to the
     * target. The resources to move must be in the same source resource group. The
     * target resource group may be in a different subscription. If validation
     * succeeds, it returns HTTP response code 204 (no content). If validation
     * fails, it returns HTTP response code 409 (Conflict) with an error message.
     * Retrieve the URL in the Location header value to check the result of the
     * long-running operation.
     *
     * @param {string} sourceResourceGroupName The name of the resource group
     * containing the resources to validate for move.
     *
     * @param {object} parameters Parameters for moving resources.
     *
     * @param {array} [parameters.resources] The IDs of the resources.
     *
     * @param {string} [parameters.targetResourceGroup] The target resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    validateMoveResources(sourceResourceGroupName: string, parameters: models.ResourcesMoveInfo, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    validateMoveResources(sourceResourceGroupName: string, parameters: models.ResourcesMoveInfo, callback: ServiceCallback<void>): void;
    validateMoveResources(sourceResourceGroupName: string, parameters: models.ResourcesMoveInfo, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Get all the resources in a subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] The filter to apply on the
     * operation.<br><br>The properties you can use for eq (equals) or ne (not
     * equals) are: location, resourceType, name, resourceGroup, identity,
     * identity/principalId, plan, plan/publisher, plan/product, plan/name,
     * plan/version, and plan/promotionCode.<br><br>For example, to filter by a
     * resource type, use: $filter=resourceType eq
     * 'Microsoft.Network/virtualNetworks'<br><br>You can use substringof(value,
     * property) in the filter. The properties you can use for substring are: name
     * and resourceGroup.<br><br>For example, to get all resources with 'demo'
     * anywhere in the name, use: $filter=substringof('demo', name)<br><br>You can
     * link more than one substringof together by adding and/or
     * operators.<br><br>You can filter by tag names and values. For example, to
     * filter for a tag name and value, use $filter=tagName eq 'tag1' and tagValue
     * eq 'Value1'<br><br>You can use some properties together when filtering. The
     * combinations you can use are: substringof and/or resourceType, plan and
     * plan/publisher and plan/name, identity and identity/principalId.
     *
     * @param {string} [options.expand] The $expand query parameter. You can expand
     * createdTime and changedTime. For example, to expand both properties, use
     * $expand=changedTime,createdTime
     *
     * @param {number} [options.top] The number of results to return. If null is
     * passed, returns all resource groups.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResourceListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { filter? : string, expand? : string, top? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResourceListResult>>;

    /**
     * Get all the resources in a subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] The filter to apply on the
     * operation.<br><br>The properties you can use for eq (equals) or ne (not
     * equals) are: location, resourceType, name, resourceGroup, identity,
     * identity/principalId, plan, plan/publisher, plan/product, plan/name,
     * plan/version, and plan/promotionCode.<br><br>For example, to filter by a
     * resource type, use: $filter=resourceType eq
     * 'Microsoft.Network/virtualNetworks'<br><br>You can use substringof(value,
     * property) in the filter. The properties you can use for substring are: name
     * and resourceGroup.<br><br>For example, to get all resources with 'demo'
     * anywhere in the name, use: $filter=substringof('demo', name)<br><br>You can
     * link more than one substringof together by adding and/or
     * operators.<br><br>You can filter by tag names and values. For example, to
     * filter for a tag name and value, use $filter=tagName eq 'tag1' and tagValue
     * eq 'Value1'<br><br>You can use some properties together when filtering. The
     * combinations you can use are: substringof and/or resourceType, plan and
     * plan/publisher and plan/name, identity and identity/principalId.
     *
     * @param {string} [options.expand] The $expand query parameter. You can expand
     * createdTime and changedTime. For example, to expand both properties, use
     * $expand=changedTime,createdTime
     *
     * @param {number} [options.top] The number of results to return. If null is
     * passed, returns all resource groups.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResourceListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResourceListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResourceListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { filter? : string, expand? : string, top? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.ResourceListResult>;
    list(callback: ServiceCallback<models.ResourceListResult>): void;
    list(options: { filter? : string, expand? : string, top? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceListResult>): void;


    /**
     * Checks whether a resource exists.
     *
     * @param {string} resourceGroupName The name of the resource group containing
     * the resource to check. The name is case insensitive.
     *
     * @param {string} resourceProviderNamespace The resource provider of the
     * resource to check.
     *
     * @param {string} parentResourcePath The parent resource identity.
     *
     * @param {string} resourceType The resource type.
     *
     * @param {string} resourceName The name of the resource to check whether it
     * exists.
     *
     * @param {string} apiVersion The API version to use for the operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Boolean>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    checkExistenceWithHttpOperationResponse(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, apiVersion: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<boolean>>;

    /**
     * Checks whether a resource exists.
     *
     * @param {string} resourceGroupName The name of the resource group containing
     * the resource to check. The name is case insensitive.
     *
     * @param {string} resourceProviderNamespace The resource provider of the
     * resource to check.
     *
     * @param {string} parentResourcePath The parent resource identity.
     *
     * @param {string} resourceType The resource type.
     *
     * @param {string} resourceName The name of the resource to check whether it
     * exists.
     *
     * @param {string} apiVersion The API version to use for the operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Boolean} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Boolean} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    checkExistence(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, apiVersion: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<boolean>;
    checkExistence(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, apiVersion: string, callback: ServiceCallback<boolean>): void;
    checkExistence(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, apiVersion: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<boolean>): void;


    /**
     * Deletes a resource.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource to delete. The name is case insensitive.
     *
     * @param {string} resourceProviderNamespace The namespace of the resource
     * provider.
     *
     * @param {string} parentResourcePath The parent resource identity.
     *
     * @param {string} resourceType The resource type.
     *
     * @param {string} resourceName The name of the resource to delete.
     *
     * @param {string} apiVersion The API version to use for the operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, apiVersion: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a resource.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource to delete. The name is case insensitive.
     *
     * @param {string} resourceProviderNamespace The namespace of the resource
     * provider.
     *
     * @param {string} parentResourcePath The parent resource identity.
     *
     * @param {string} resourceType The resource type.
     *
     * @param {string} resourceName The name of the resource to delete.
     *
     * @param {string} apiVersion The API version to use for the operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, apiVersion: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, apiVersion: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, apiVersion: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Creates a resource.
     *
     * @param {string} resourceGroupName The name of the resource group for the
     * resource. The name is case insensitive.
     *
     * @param {string} resourceProviderNamespace The namespace of the resource
     * provider.
     *
     * @param {string} parentResourcePath The parent resource identity.
     *
     * @param {string} resourceType The resource type of the resource to create.
     *
     * @param {string} resourceName The name of the resource to create.
     *
     * @param {string} apiVersion The API version to use for the operation.
     *
     * @param {object} parameters Parameters for creating or updating the resource.
     *
     * @param {object} [parameters.plan] The plan of the resource.
     *
     * @param {string} [parameters.plan.name] The plan ID.
     *
     * @param {string} [parameters.plan.publisher] The publisher ID.
     *
     * @param {string} [parameters.plan.product] The offer ID.
     *
     * @param {string} [parameters.plan.promotionCode] The promotion code.
     *
     * @param {string} [parameters.plan.version] The plan's version.
     *
     * @param {object} [parameters.properties] The resource properties.
     *
     * @param {string} [parameters.kind] The kind of the resource.
     *
     * @param {string} [parameters.managedBy] ID of the resource that manages this
     * resource.
     *
     * @param {object} [parameters.sku] The SKU of the resource.
     *
     * @param {string} [parameters.sku.name] The SKU name.
     *
     * @param {string} [parameters.sku.tier] The SKU tier.
     *
     * @param {string} [parameters.sku.size] The SKU size.
     *
     * @param {string} [parameters.sku.family] The SKU family.
     *
     * @param {string} [parameters.sku.model] The SKU model.
     *
     * @param {number} [parameters.sku.capacity] The SKU capacity.
     *
     * @param {object} [parameters.identity] The identity of the resource.
     *
     * @param {string} [parameters.identity.type] The identity type. Possible
     * values include: 'SystemAssigned', 'UserAssigned', 'SystemAssigned,
     * UserAssigned', 'None'
     *
     * @param {object} [parameters.identity.userAssignedIdentities] The list of
     * user identities associated with the resource. The user identity dictionary
     * key references will be ARM resource ids in the form:
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
     *
     * @param {string} [parameters.location] Resource location
     *
     * @param {object} [parameters.tags] Resource tags
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GenericResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, apiVersion: string, parameters: models.GenericResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GenericResource>>;

    /**
     * Creates a resource.
     *
     * @param {string} resourceGroupName The name of the resource group for the
     * resource. The name is case insensitive.
     *
     * @param {string} resourceProviderNamespace The namespace of the resource
     * provider.
     *
     * @param {string} parentResourcePath The parent resource identity.
     *
     * @param {string} resourceType The resource type of the resource to create.
     *
     * @param {string} resourceName The name of the resource to create.
     *
     * @param {string} apiVersion The API version to use for the operation.
     *
     * @param {object} parameters Parameters for creating or updating the resource.
     *
     * @param {object} [parameters.plan] The plan of the resource.
     *
     * @param {string} [parameters.plan.name] The plan ID.
     *
     * @param {string} [parameters.plan.publisher] The publisher ID.
     *
     * @param {string} [parameters.plan.product] The offer ID.
     *
     * @param {string} [parameters.plan.promotionCode] The promotion code.
     *
     * @param {string} [parameters.plan.version] The plan's version.
     *
     * @param {object} [parameters.properties] The resource properties.
     *
     * @param {string} [parameters.kind] The kind of the resource.
     *
     * @param {string} [parameters.managedBy] ID of the resource that manages this
     * resource.
     *
     * @param {object} [parameters.sku] The SKU of the resource.
     *
     * @param {string} [parameters.sku.name] The SKU name.
     *
     * @param {string} [parameters.sku.tier] The SKU tier.
     *
     * @param {string} [parameters.sku.size] The SKU size.
     *
     * @param {string} [parameters.sku.family] The SKU family.
     *
     * @param {string} [parameters.sku.model] The SKU model.
     *
     * @param {number} [parameters.sku.capacity] The SKU capacity.
     *
     * @param {object} [parameters.identity] The identity of the resource.
     *
     * @param {string} [parameters.identity.type] The identity type. Possible
     * values include: 'SystemAssigned', 'UserAssigned', 'SystemAssigned,
     * UserAssigned', 'None'
     *
     * @param {object} [parameters.identity.userAssignedIdentities] The list of
     * user identities associated with the resource. The user identity dictionary
     * key references will be ARM resource ids in the form:
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
     *
     * @param {string} [parameters.location] Resource location
     *
     * @param {object} [parameters.tags] Resource tags
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GenericResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GenericResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GenericResource} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, apiVersion: string, parameters: models.GenericResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GenericResource>;
    createOrUpdate(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, apiVersion: string, parameters: models.GenericResource, callback: ServiceCallback<models.GenericResource>): void;
    createOrUpdate(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, apiVersion: string, parameters: models.GenericResource, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GenericResource>): void;


    /**
     * Updates a resource.
     *
     * @param {string} resourceGroupName The name of the resource group for the
     * resource. The name is case insensitive.
     *
     * @param {string} resourceProviderNamespace The namespace of the resource
     * provider.
     *
     * @param {string} parentResourcePath The parent resource identity.
     *
     * @param {string} resourceType The resource type of the resource to update.
     *
     * @param {string} resourceName The name of the resource to update.
     *
     * @param {string} apiVersion The API version to use for the operation.
     *
     * @param {object} parameters Parameters for updating the resource.
     *
     * @param {object} [parameters.plan] The plan of the resource.
     *
     * @param {string} [parameters.plan.name] The plan ID.
     *
     * @param {string} [parameters.plan.publisher] The publisher ID.
     *
     * @param {string} [parameters.plan.product] The offer ID.
     *
     * @param {string} [parameters.plan.promotionCode] The promotion code.
     *
     * @param {string} [parameters.plan.version] The plan's version.
     *
     * @param {object} [parameters.properties] The resource properties.
     *
     * @param {string} [parameters.kind] The kind of the resource.
     *
     * @param {string} [parameters.managedBy] ID of the resource that manages this
     * resource.
     *
     * @param {object} [parameters.sku] The SKU of the resource.
     *
     * @param {string} [parameters.sku.name] The SKU name.
     *
     * @param {string} [parameters.sku.tier] The SKU tier.
     *
     * @param {string} [parameters.sku.size] The SKU size.
     *
     * @param {string} [parameters.sku.family] The SKU family.
     *
     * @param {string} [parameters.sku.model] The SKU model.
     *
     * @param {number} [parameters.sku.capacity] The SKU capacity.
     *
     * @param {object} [parameters.identity] The identity of the resource.
     *
     * @param {string} [parameters.identity.type] The identity type. Possible
     * values include: 'SystemAssigned', 'UserAssigned', 'SystemAssigned,
     * UserAssigned', 'None'
     *
     * @param {object} [parameters.identity.userAssignedIdentities] The list of
     * user identities associated with the resource. The user identity dictionary
     * key references will be ARM resource ids in the form:
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
     *
     * @param {string} [parameters.location] Resource location
     *
     * @param {object} [parameters.tags] Resource tags
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GenericResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, apiVersion: string, parameters: models.GenericResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GenericResource>>;

    /**
     * Updates a resource.
     *
     * @param {string} resourceGroupName The name of the resource group for the
     * resource. The name is case insensitive.
     *
     * @param {string} resourceProviderNamespace The namespace of the resource
     * provider.
     *
     * @param {string} parentResourcePath The parent resource identity.
     *
     * @param {string} resourceType The resource type of the resource to update.
     *
     * @param {string} resourceName The name of the resource to update.
     *
     * @param {string} apiVersion The API version to use for the operation.
     *
     * @param {object} parameters Parameters for updating the resource.
     *
     * @param {object} [parameters.plan] The plan of the resource.
     *
     * @param {string} [parameters.plan.name] The plan ID.
     *
     * @param {string} [parameters.plan.publisher] The publisher ID.
     *
     * @param {string} [parameters.plan.product] The offer ID.
     *
     * @param {string} [parameters.plan.promotionCode] The promotion code.
     *
     * @param {string} [parameters.plan.version] The plan's version.
     *
     * @param {object} [parameters.properties] The resource properties.
     *
     * @param {string} [parameters.kind] The kind of the resource.
     *
     * @param {string} [parameters.managedBy] ID of the resource that manages this
     * resource.
     *
     * @param {object} [parameters.sku] The SKU of the resource.
     *
     * @param {string} [parameters.sku.name] The SKU name.
     *
     * @param {string} [parameters.sku.tier] The SKU tier.
     *
     * @param {string} [parameters.sku.size] The SKU size.
     *
     * @param {string} [parameters.sku.family] The SKU family.
     *
     * @param {string} [parameters.sku.model] The SKU model.
     *
     * @param {number} [parameters.sku.capacity] The SKU capacity.
     *
     * @param {object} [parameters.identity] The identity of the resource.
     *
     * @param {string} [parameters.identity.type] The identity type. Possible
     * values include: 'SystemAssigned', 'UserAssigned', 'SystemAssigned,
     * UserAssigned', 'None'
     *
     * @param {object} [parameters.identity.userAssignedIdentities] The list of
     * user identities associated with the resource. The user identity dictionary
     * key references will be ARM resource ids in the form:
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
     *
     * @param {string} [parameters.location] Resource location
     *
     * @param {object} [parameters.tags] Resource tags
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GenericResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GenericResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GenericResource} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, apiVersion: string, parameters: models.GenericResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GenericResource>;
    update(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, apiVersion: string, parameters: models.GenericResource, callback: ServiceCallback<models.GenericResource>): void;
    update(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, apiVersion: string, parameters: models.GenericResource, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GenericResource>): void;


    /**
     * Gets a resource.
     *
     * @param {string} resourceGroupName The name of the resource group containing
     * the resource to get. The name is case insensitive.
     *
     * @param {string} resourceProviderNamespace The namespace of the resource
     * provider.
     *
     * @param {string} parentResourcePath The parent resource identity.
     *
     * @param {string} resourceType The resource type of the resource.
     *
     * @param {string} resourceName The name of the resource to get.
     *
     * @param {string} apiVersion The API version to use for the operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GenericResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, apiVersion: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GenericResource>>;

    /**
     * Gets a resource.
     *
     * @param {string} resourceGroupName The name of the resource group containing
     * the resource to get. The name is case insensitive.
     *
     * @param {string} resourceProviderNamespace The namespace of the resource
     * provider.
     *
     * @param {string} parentResourcePath The parent resource identity.
     *
     * @param {string} resourceType The resource type of the resource.
     *
     * @param {string} resourceName The name of the resource to get.
     *
     * @param {string} apiVersion The API version to use for the operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GenericResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GenericResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GenericResource} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, apiVersion: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GenericResource>;
    get(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, apiVersion: string, callback: ServiceCallback<models.GenericResource>): void;
    get(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, apiVersion: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GenericResource>): void;


    /**
     * Checks by ID whether a resource exists.
     *
     * @param {string} resourceId The fully qualified ID of the resource, including
     * the resource name and resource type. Use the format,
     * /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}
     *
     * @param {string} apiVersion The API version to use for the operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Boolean>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    checkExistenceByIdWithHttpOperationResponse(resourceId: string, apiVersion: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<boolean>>;

    /**
     * Checks by ID whether a resource exists.
     *
     * @param {string} resourceId The fully qualified ID of the resource, including
     * the resource name and resource type. Use the format,
     * /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}
     *
     * @param {string} apiVersion The API version to use for the operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Boolean} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Boolean} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    checkExistenceById(resourceId: string, apiVersion: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<boolean>;
    checkExistenceById(resourceId: string, apiVersion: string, callback: ServiceCallback<boolean>): void;
    checkExistenceById(resourceId: string, apiVersion: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<boolean>): void;


    /**
     * Deletes a resource by ID.
     *
     * @param {string} resourceId The fully qualified ID of the resource, including
     * the resource name and resource type. Use the format,
     * /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}
     *
     * @param {string} apiVersion The API version to use for the operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteByIdWithHttpOperationResponse(resourceId: string, apiVersion: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a resource by ID.
     *
     * @param {string} resourceId The fully qualified ID of the resource, including
     * the resource name and resource type. Use the format,
     * /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}
     *
     * @param {string} apiVersion The API version to use for the operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteById(resourceId: string, apiVersion: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteById(resourceId: string, apiVersion: string, callback: ServiceCallback<void>): void;
    deleteById(resourceId: string, apiVersion: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Create a resource by ID.
     *
     * @param {string} resourceId The fully qualified ID of the resource, including
     * the resource name and resource type. Use the format,
     * /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}
     *
     * @param {string} apiVersion The API version to use for the operation.
     *
     * @param {object} parameters Create or update resource parameters.
     *
     * @param {object} [parameters.plan] The plan of the resource.
     *
     * @param {string} [parameters.plan.name] The plan ID.
     *
     * @param {string} [parameters.plan.publisher] The publisher ID.
     *
     * @param {string} [parameters.plan.product] The offer ID.
     *
     * @param {string} [parameters.plan.promotionCode] The promotion code.
     *
     * @param {string} [parameters.plan.version] The plan's version.
     *
     * @param {object} [parameters.properties] The resource properties.
     *
     * @param {string} [parameters.kind] The kind of the resource.
     *
     * @param {string} [parameters.managedBy] ID of the resource that manages this
     * resource.
     *
     * @param {object} [parameters.sku] The SKU of the resource.
     *
     * @param {string} [parameters.sku.name] The SKU name.
     *
     * @param {string} [parameters.sku.tier] The SKU tier.
     *
     * @param {string} [parameters.sku.size] The SKU size.
     *
     * @param {string} [parameters.sku.family] The SKU family.
     *
     * @param {string} [parameters.sku.model] The SKU model.
     *
     * @param {number} [parameters.sku.capacity] The SKU capacity.
     *
     * @param {object} [parameters.identity] The identity of the resource.
     *
     * @param {string} [parameters.identity.type] The identity type. Possible
     * values include: 'SystemAssigned', 'UserAssigned', 'SystemAssigned,
     * UserAssigned', 'None'
     *
     * @param {object} [parameters.identity.userAssignedIdentities] The list of
     * user identities associated with the resource. The user identity dictionary
     * key references will be ARM resource ids in the form:
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
     *
     * @param {string} [parameters.location] Resource location
     *
     * @param {object} [parameters.tags] Resource tags
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GenericResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateByIdWithHttpOperationResponse(resourceId: string, apiVersion: string, parameters: models.GenericResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GenericResource>>;

    /**
     * Create a resource by ID.
     *
     * @param {string} resourceId The fully qualified ID of the resource, including
     * the resource name and resource type. Use the format,
     * /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}
     *
     * @param {string} apiVersion The API version to use for the operation.
     *
     * @param {object} parameters Create or update resource parameters.
     *
     * @param {object} [parameters.plan] The plan of the resource.
     *
     * @param {string} [parameters.plan.name] The plan ID.
     *
     * @param {string} [parameters.plan.publisher] The publisher ID.
     *
     * @param {string} [parameters.plan.product] The offer ID.
     *
     * @param {string} [parameters.plan.promotionCode] The promotion code.
     *
     * @param {string} [parameters.plan.version] The plan's version.
     *
     * @param {object} [parameters.properties] The resource properties.
     *
     * @param {string} [parameters.kind] The kind of the resource.
     *
     * @param {string} [parameters.managedBy] ID of the resource that manages this
     * resource.
     *
     * @param {object} [parameters.sku] The SKU of the resource.
     *
     * @param {string} [parameters.sku.name] The SKU name.
     *
     * @param {string} [parameters.sku.tier] The SKU tier.
     *
     * @param {string} [parameters.sku.size] The SKU size.
     *
     * @param {string} [parameters.sku.family] The SKU family.
     *
     * @param {string} [parameters.sku.model] The SKU model.
     *
     * @param {number} [parameters.sku.capacity] The SKU capacity.
     *
     * @param {object} [parameters.identity] The identity of the resource.
     *
     * @param {string} [parameters.identity.type] The identity type. Possible
     * values include: 'SystemAssigned', 'UserAssigned', 'SystemAssigned,
     * UserAssigned', 'None'
     *
     * @param {object} [parameters.identity.userAssignedIdentities] The list of
     * user identities associated with the resource. The user identity dictionary
     * key references will be ARM resource ids in the form:
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
     *
     * @param {string} [parameters.location] Resource location
     *
     * @param {object} [parameters.tags] Resource tags
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GenericResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GenericResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GenericResource} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdateById(resourceId: string, apiVersion: string, parameters: models.GenericResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GenericResource>;
    createOrUpdateById(resourceId: string, apiVersion: string, parameters: models.GenericResource, callback: ServiceCallback<models.GenericResource>): void;
    createOrUpdateById(resourceId: string, apiVersion: string, parameters: models.GenericResource, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GenericResource>): void;


    /**
     * Updates a resource by ID.
     *
     * @param {string} resourceId The fully qualified ID of the resource, including
     * the resource name and resource type. Use the format,
     * /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}
     *
     * @param {string} apiVersion The API version to use for the operation.
     *
     * @param {object} parameters Update resource parameters.
     *
     * @param {object} [parameters.plan] The plan of the resource.
     *
     * @param {string} [parameters.plan.name] The plan ID.
     *
     * @param {string} [parameters.plan.publisher] The publisher ID.
     *
     * @param {string} [parameters.plan.product] The offer ID.
     *
     * @param {string} [parameters.plan.promotionCode] The promotion code.
     *
     * @param {string} [parameters.plan.version] The plan's version.
     *
     * @param {object} [parameters.properties] The resource properties.
     *
     * @param {string} [parameters.kind] The kind of the resource.
     *
     * @param {string} [parameters.managedBy] ID of the resource that manages this
     * resource.
     *
     * @param {object} [parameters.sku] The SKU of the resource.
     *
     * @param {string} [parameters.sku.name] The SKU name.
     *
     * @param {string} [parameters.sku.tier] The SKU tier.
     *
     * @param {string} [parameters.sku.size] The SKU size.
     *
     * @param {string} [parameters.sku.family] The SKU family.
     *
     * @param {string} [parameters.sku.model] The SKU model.
     *
     * @param {number} [parameters.sku.capacity] The SKU capacity.
     *
     * @param {object} [parameters.identity] The identity of the resource.
     *
     * @param {string} [parameters.identity.type] The identity type. Possible
     * values include: 'SystemAssigned', 'UserAssigned', 'SystemAssigned,
     * UserAssigned', 'None'
     *
     * @param {object} [parameters.identity.userAssignedIdentities] The list of
     * user identities associated with the resource. The user identity dictionary
     * key references will be ARM resource ids in the form:
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
     *
     * @param {string} [parameters.location] Resource location
     *
     * @param {object} [parameters.tags] Resource tags
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GenericResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateByIdWithHttpOperationResponse(resourceId: string, apiVersion: string, parameters: models.GenericResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GenericResource>>;

    /**
     * Updates a resource by ID.
     *
     * @param {string} resourceId The fully qualified ID of the resource, including
     * the resource name and resource type. Use the format,
     * /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}
     *
     * @param {string} apiVersion The API version to use for the operation.
     *
     * @param {object} parameters Update resource parameters.
     *
     * @param {object} [parameters.plan] The plan of the resource.
     *
     * @param {string} [parameters.plan.name] The plan ID.
     *
     * @param {string} [parameters.plan.publisher] The publisher ID.
     *
     * @param {string} [parameters.plan.product] The offer ID.
     *
     * @param {string} [parameters.plan.promotionCode] The promotion code.
     *
     * @param {string} [parameters.plan.version] The plan's version.
     *
     * @param {object} [parameters.properties] The resource properties.
     *
     * @param {string} [parameters.kind] The kind of the resource.
     *
     * @param {string} [parameters.managedBy] ID of the resource that manages this
     * resource.
     *
     * @param {object} [parameters.sku] The SKU of the resource.
     *
     * @param {string} [parameters.sku.name] The SKU name.
     *
     * @param {string} [parameters.sku.tier] The SKU tier.
     *
     * @param {string} [parameters.sku.size] The SKU size.
     *
     * @param {string} [parameters.sku.family] The SKU family.
     *
     * @param {string} [parameters.sku.model] The SKU model.
     *
     * @param {number} [parameters.sku.capacity] The SKU capacity.
     *
     * @param {object} [parameters.identity] The identity of the resource.
     *
     * @param {string} [parameters.identity.type] The identity type. Possible
     * values include: 'SystemAssigned', 'UserAssigned', 'SystemAssigned,
     * UserAssigned', 'None'
     *
     * @param {object} [parameters.identity.userAssignedIdentities] The list of
     * user identities associated with the resource. The user identity dictionary
     * key references will be ARM resource ids in the form:
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
     *
     * @param {string} [parameters.location] Resource location
     *
     * @param {object} [parameters.tags] Resource tags
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GenericResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GenericResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GenericResource} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updateById(resourceId: string, apiVersion: string, parameters: models.GenericResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GenericResource>;
    updateById(resourceId: string, apiVersion: string, parameters: models.GenericResource, callback: ServiceCallback<models.GenericResource>): void;
    updateById(resourceId: string, apiVersion: string, parameters: models.GenericResource, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GenericResource>): void;


    /**
     * Gets a resource by ID.
     *
     * @param {string} resourceId The fully qualified ID of the resource, including
     * the resource name and resource type. Use the format,
     * /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}
     *
     * @param {string} apiVersion The API version to use for the operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GenericResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getByIdWithHttpOperationResponse(resourceId: string, apiVersion: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GenericResource>>;

    /**
     * Gets a resource by ID.
     *
     * @param {string} resourceId The fully qualified ID of the resource, including
     * the resource name and resource type. Use the format,
     * /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}
     *
     * @param {string} apiVersion The API version to use for the operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GenericResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GenericResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GenericResource} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getById(resourceId: string, apiVersion: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GenericResource>;
    getById(resourceId: string, apiVersion: string, callback: ServiceCallback<models.GenericResource>): void;
    getById(resourceId: string, apiVersion: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GenericResource>): void;


    /**
     * @summary Moves resources from one resource group to another resource group.
     *
     * The resources to move must be in the same source resource group. The target
     * resource group may be in a different subscription. When moving resources,
     * both the source group and the target group are locked for the duration of
     * the operation. Write and delete operations are blocked on the groups until
     * the move completes.
     *
     * @param {string} sourceResourceGroupName The name of the resource group
     * containing the resources to move.
     *
     * @param {object} parameters Parameters for moving resources.
     *
     * @param {array} [parameters.resources] The IDs of the resources.
     *
     * @param {string} [parameters.targetResourceGroup] The target resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginMoveResourcesWithHttpOperationResponse(sourceResourceGroupName: string, parameters: models.ResourcesMoveInfo, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Moves resources from one resource group to another resource group.
     *
     * The resources to move must be in the same source resource group. The target
     * resource group may be in a different subscription. When moving resources,
     * both the source group and the target group are locked for the duration of
     * the operation. Write and delete operations are blocked on the groups until
     * the move completes.
     *
     * @param {string} sourceResourceGroupName The name of the resource group
     * containing the resources to move.
     *
     * @param {object} parameters Parameters for moving resources.
     *
     * @param {array} [parameters.resources] The IDs of the resources.
     *
     * @param {string} [parameters.targetResourceGroup] The target resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginMoveResources(sourceResourceGroupName: string, parameters: models.ResourcesMoveInfo, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginMoveResources(sourceResourceGroupName: string, parameters: models.ResourcesMoveInfo, callback: ServiceCallback<void>): void;
    beginMoveResources(sourceResourceGroupName: string, parameters: models.ResourcesMoveInfo, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Validates whether resources can be moved from one resource group to
     * another resource group.
     *
     * This operation checks whether the specified resources can be moved to the
     * target. The resources to move must be in the same source resource group. The
     * target resource group may be in a different subscription. If validation
     * succeeds, it returns HTTP response code 204 (no content). If validation
     * fails, it returns HTTP response code 409 (Conflict) with an error message.
     * Retrieve the URL in the Location header value to check the result of the
     * long-running operation.
     *
     * @param {string} sourceResourceGroupName The name of the resource group
     * containing the resources to validate for move.
     *
     * @param {object} parameters Parameters for moving resources.
     *
     * @param {array} [parameters.resources] The IDs of the resources.
     *
     * @param {string} [parameters.targetResourceGroup] The target resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginValidateMoveResourcesWithHttpOperationResponse(sourceResourceGroupName: string, parameters: models.ResourcesMoveInfo, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Validates whether resources can be moved from one resource group to
     * another resource group.
     *
     * This operation checks whether the specified resources can be moved to the
     * target. The resources to move must be in the same source resource group. The
     * target resource group may be in a different subscription. If validation
     * succeeds, it returns HTTP response code 204 (no content). If validation
     * fails, it returns HTTP response code 409 (Conflict) with an error message.
     * Retrieve the URL in the Location header value to check the result of the
     * long-running operation.
     *
     * @param {string} sourceResourceGroupName The name of the resource group
     * containing the resources to validate for move.
     *
     * @param {object} parameters Parameters for moving resources.
     *
     * @param {array} [parameters.resources] The IDs of the resources.
     *
     * @param {string} [parameters.targetResourceGroup] The target resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginValidateMoveResources(sourceResourceGroupName: string, parameters: models.ResourcesMoveInfo, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginValidateMoveResources(sourceResourceGroupName: string, parameters: models.ResourcesMoveInfo, callback: ServiceCallback<void>): void;
    beginValidateMoveResources(sourceResourceGroupName: string, parameters: models.ResourcesMoveInfo, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Deletes a resource.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource to delete. The name is case insensitive.
     *
     * @param {string} resourceProviderNamespace The namespace of the resource
     * provider.
     *
     * @param {string} parentResourcePath The parent resource identity.
     *
     * @param {string} resourceType The resource type.
     *
     * @param {string} resourceName The name of the resource to delete.
     *
     * @param {string} apiVersion The API version to use for the operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, apiVersion: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a resource.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource to delete. The name is case insensitive.
     *
     * @param {string} resourceProviderNamespace The namespace of the resource
     * provider.
     *
     * @param {string} parentResourcePath The parent resource identity.
     *
     * @param {string} resourceType The resource type.
     *
     * @param {string} resourceName The name of the resource to delete.
     *
     * @param {string} apiVersion The API version to use for the operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, apiVersion: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, apiVersion: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, apiVersion: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Creates a resource.
     *
     * @param {string} resourceGroupName The name of the resource group for the
     * resource. The name is case insensitive.
     *
     * @param {string} resourceProviderNamespace The namespace of the resource
     * provider.
     *
     * @param {string} parentResourcePath The parent resource identity.
     *
     * @param {string} resourceType The resource type of the resource to create.
     *
     * @param {string} resourceName The name of the resource to create.
     *
     * @param {string} apiVersion The API version to use for the operation.
     *
     * @param {object} parameters Parameters for creating or updating the resource.
     *
     * @param {object} [parameters.plan] The plan of the resource.
     *
     * @param {string} [parameters.plan.name] The plan ID.
     *
     * @param {string} [parameters.plan.publisher] The publisher ID.
     *
     * @param {string} [parameters.plan.product] The offer ID.
     *
     * @param {string} [parameters.plan.promotionCode] The promotion code.
     *
     * @param {string} [parameters.plan.version] The plan's version.
     *
     * @param {object} [parameters.properties] The resource properties.
     *
     * @param {string} [parameters.kind] The kind of the resource.
     *
     * @param {string} [parameters.managedBy] ID of the resource that manages this
     * resource.
     *
     * @param {object} [parameters.sku] The SKU of the resource.
     *
     * @param {string} [parameters.sku.name] The SKU name.
     *
     * @param {string} [parameters.sku.tier] The SKU tier.
     *
     * @param {string} [parameters.sku.size] The SKU size.
     *
     * @param {string} [parameters.sku.family] The SKU family.
     *
     * @param {string} [parameters.sku.model] The SKU model.
     *
     * @param {number} [parameters.sku.capacity] The SKU capacity.
     *
     * @param {object} [parameters.identity] The identity of the resource.
     *
     * @param {string} [parameters.identity.type] The identity type. Possible
     * values include: 'SystemAssigned', 'UserAssigned', 'SystemAssigned,
     * UserAssigned', 'None'
     *
     * @param {object} [parameters.identity.userAssignedIdentities] The list of
     * user identities associated with the resource. The user identity dictionary
     * key references will be ARM resource ids in the form:
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
     *
     * @param {string} [parameters.location] Resource location
     *
     * @param {object} [parameters.tags] Resource tags
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GenericResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, apiVersion: string, parameters: models.GenericResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GenericResource>>;

    /**
     * Creates a resource.
     *
     * @param {string} resourceGroupName The name of the resource group for the
     * resource. The name is case insensitive.
     *
     * @param {string} resourceProviderNamespace The namespace of the resource
     * provider.
     *
     * @param {string} parentResourcePath The parent resource identity.
     *
     * @param {string} resourceType The resource type of the resource to create.
     *
     * @param {string} resourceName The name of the resource to create.
     *
     * @param {string} apiVersion The API version to use for the operation.
     *
     * @param {object} parameters Parameters for creating or updating the resource.
     *
     * @param {object} [parameters.plan] The plan of the resource.
     *
     * @param {string} [parameters.plan.name] The plan ID.
     *
     * @param {string} [parameters.plan.publisher] The publisher ID.
     *
     * @param {string} [parameters.plan.product] The offer ID.
     *
     * @param {string} [parameters.plan.promotionCode] The promotion code.
     *
     * @param {string} [parameters.plan.version] The plan's version.
     *
     * @param {object} [parameters.properties] The resource properties.
     *
     * @param {string} [parameters.kind] The kind of the resource.
     *
     * @param {string} [parameters.managedBy] ID of the resource that manages this
     * resource.
     *
     * @param {object} [parameters.sku] The SKU of the resource.
     *
     * @param {string} [parameters.sku.name] The SKU name.
     *
     * @param {string} [parameters.sku.tier] The SKU tier.
     *
     * @param {string} [parameters.sku.size] The SKU size.
     *
     * @param {string} [parameters.sku.family] The SKU family.
     *
     * @param {string} [parameters.sku.model] The SKU model.
     *
     * @param {number} [parameters.sku.capacity] The SKU capacity.
     *
     * @param {object} [parameters.identity] The identity of the resource.
     *
     * @param {string} [parameters.identity.type] The identity type. Possible
     * values include: 'SystemAssigned', 'UserAssigned', 'SystemAssigned,
     * UserAssigned', 'None'
     *
     * @param {object} [parameters.identity.userAssignedIdentities] The list of
     * user identities associated with the resource. The user identity dictionary
     * key references will be ARM resource ids in the form:
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
     *
     * @param {string} [parameters.location] Resource location
     *
     * @param {object} [parameters.tags] Resource tags
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GenericResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GenericResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GenericResource} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, apiVersion: string, parameters: models.GenericResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GenericResource>;
    beginCreateOrUpdate(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, apiVersion: string, parameters: models.GenericResource, callback: ServiceCallback<models.GenericResource>): void;
    beginCreateOrUpdate(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, apiVersion: string, parameters: models.GenericResource, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GenericResource>): void;


    /**
     * Updates a resource.
     *
     * @param {string} resourceGroupName The name of the resource group for the
     * resource. The name is case insensitive.
     *
     * @param {string} resourceProviderNamespace The namespace of the resource
     * provider.
     *
     * @param {string} parentResourcePath The parent resource identity.
     *
     * @param {string} resourceType The resource type of the resource to update.
     *
     * @param {string} resourceName The name of the resource to update.
     *
     * @param {string} apiVersion The API version to use for the operation.
     *
     * @param {object} parameters Parameters for updating the resource.
     *
     * @param {object} [parameters.plan] The plan of the resource.
     *
     * @param {string} [parameters.plan.name] The plan ID.
     *
     * @param {string} [parameters.plan.publisher] The publisher ID.
     *
     * @param {string} [parameters.plan.product] The offer ID.
     *
     * @param {string} [parameters.plan.promotionCode] The promotion code.
     *
     * @param {string} [parameters.plan.version] The plan's version.
     *
     * @param {object} [parameters.properties] The resource properties.
     *
     * @param {string} [parameters.kind] The kind of the resource.
     *
     * @param {string} [parameters.managedBy] ID of the resource that manages this
     * resource.
     *
     * @param {object} [parameters.sku] The SKU of the resource.
     *
     * @param {string} [parameters.sku.name] The SKU name.
     *
     * @param {string} [parameters.sku.tier] The SKU tier.
     *
     * @param {string} [parameters.sku.size] The SKU size.
     *
     * @param {string} [parameters.sku.family] The SKU family.
     *
     * @param {string} [parameters.sku.model] The SKU model.
     *
     * @param {number} [parameters.sku.capacity] The SKU capacity.
     *
     * @param {object} [parameters.identity] The identity of the resource.
     *
     * @param {string} [parameters.identity.type] The identity type. Possible
     * values include: 'SystemAssigned', 'UserAssigned', 'SystemAssigned,
     * UserAssigned', 'None'
     *
     * @param {object} [parameters.identity.userAssignedIdentities] The list of
     * user identities associated with the resource. The user identity dictionary
     * key references will be ARM resource ids in the form:
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
     *
     * @param {string} [parameters.location] Resource location
     *
     * @param {object} [parameters.tags] Resource tags
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GenericResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginUpdateWithHttpOperationResponse(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, apiVersion: string, parameters: models.GenericResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GenericResource>>;

    /**
     * Updates a resource.
     *
     * @param {string} resourceGroupName The name of the resource group for the
     * resource. The name is case insensitive.
     *
     * @param {string} resourceProviderNamespace The namespace of the resource
     * provider.
     *
     * @param {string} parentResourcePath The parent resource identity.
     *
     * @param {string} resourceType The resource type of the resource to update.
     *
     * @param {string} resourceName The name of the resource to update.
     *
     * @param {string} apiVersion The API version to use for the operation.
     *
     * @param {object} parameters Parameters for updating the resource.
     *
     * @param {object} [parameters.plan] The plan of the resource.
     *
     * @param {string} [parameters.plan.name] The plan ID.
     *
     * @param {string} [parameters.plan.publisher] The publisher ID.
     *
     * @param {string} [parameters.plan.product] The offer ID.
     *
     * @param {string} [parameters.plan.promotionCode] The promotion code.
     *
     * @param {string} [parameters.plan.version] The plan's version.
     *
     * @param {object} [parameters.properties] The resource properties.
     *
     * @param {string} [parameters.kind] The kind of the resource.
     *
     * @param {string} [parameters.managedBy] ID of the resource that manages this
     * resource.
     *
     * @param {object} [parameters.sku] The SKU of the resource.
     *
     * @param {string} [parameters.sku.name] The SKU name.
     *
     * @param {string} [parameters.sku.tier] The SKU tier.
     *
     * @param {string} [parameters.sku.size] The SKU size.
     *
     * @param {string} [parameters.sku.family] The SKU family.
     *
     * @param {string} [parameters.sku.model] The SKU model.
     *
     * @param {number} [parameters.sku.capacity] The SKU capacity.
     *
     * @param {object} [parameters.identity] The identity of the resource.
     *
     * @param {string} [parameters.identity.type] The identity type. Possible
     * values include: 'SystemAssigned', 'UserAssigned', 'SystemAssigned,
     * UserAssigned', 'None'
     *
     * @param {object} [parameters.identity.userAssignedIdentities] The list of
     * user identities associated with the resource. The user identity dictionary
     * key references will be ARM resource ids in the form:
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
     *
     * @param {string} [parameters.location] Resource location
     *
     * @param {object} [parameters.tags] Resource tags
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GenericResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GenericResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GenericResource} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginUpdate(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, apiVersion: string, parameters: models.GenericResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GenericResource>;
    beginUpdate(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, apiVersion: string, parameters: models.GenericResource, callback: ServiceCallback<models.GenericResource>): void;
    beginUpdate(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, apiVersion: string, parameters: models.GenericResource, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GenericResource>): void;


    /**
     * Deletes a resource by ID.
     *
     * @param {string} resourceId The fully qualified ID of the resource, including
     * the resource name and resource type. Use the format,
     * /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}
     *
     * @param {string} apiVersion The API version to use for the operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteByIdWithHttpOperationResponse(resourceId: string, apiVersion: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a resource by ID.
     *
     * @param {string} resourceId The fully qualified ID of the resource, including
     * the resource name and resource type. Use the format,
     * /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}
     *
     * @param {string} apiVersion The API version to use for the operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteById(resourceId: string, apiVersion: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteById(resourceId: string, apiVersion: string, callback: ServiceCallback<void>): void;
    beginDeleteById(resourceId: string, apiVersion: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Create a resource by ID.
     *
     * @param {string} resourceId The fully qualified ID of the resource, including
     * the resource name and resource type. Use the format,
     * /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}
     *
     * @param {string} apiVersion The API version to use for the operation.
     *
     * @param {object} parameters Create or update resource parameters.
     *
     * @param {object} [parameters.plan] The plan of the resource.
     *
     * @param {string} [parameters.plan.name] The plan ID.
     *
     * @param {string} [parameters.plan.publisher] The publisher ID.
     *
     * @param {string} [parameters.plan.product] The offer ID.
     *
     * @param {string} [parameters.plan.promotionCode] The promotion code.
     *
     * @param {string} [parameters.plan.version] The plan's version.
     *
     * @param {object} [parameters.properties] The resource properties.
     *
     * @param {string} [parameters.kind] The kind of the resource.
     *
     * @param {string} [parameters.managedBy] ID of the resource that manages this
     * resource.
     *
     * @param {object} [parameters.sku] The SKU of the resource.
     *
     * @param {string} [parameters.sku.name] The SKU name.
     *
     * @param {string} [parameters.sku.tier] The SKU tier.
     *
     * @param {string} [parameters.sku.size] The SKU size.
     *
     * @param {string} [parameters.sku.family] The SKU family.
     *
     * @param {string} [parameters.sku.model] The SKU model.
     *
     * @param {number} [parameters.sku.capacity] The SKU capacity.
     *
     * @param {object} [parameters.identity] The identity of the resource.
     *
     * @param {string} [parameters.identity.type] The identity type. Possible
     * values include: 'SystemAssigned', 'UserAssigned', 'SystemAssigned,
     * UserAssigned', 'None'
     *
     * @param {object} [parameters.identity.userAssignedIdentities] The list of
     * user identities associated with the resource. The user identity dictionary
     * key references will be ARM resource ids in the form:
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
     *
     * @param {string} [parameters.location] Resource location
     *
     * @param {object} [parameters.tags] Resource tags
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GenericResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateByIdWithHttpOperationResponse(resourceId: string, apiVersion: string, parameters: models.GenericResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GenericResource>>;

    /**
     * Create a resource by ID.
     *
     * @param {string} resourceId The fully qualified ID of the resource, including
     * the resource name and resource type. Use the format,
     * /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}
     *
     * @param {string} apiVersion The API version to use for the operation.
     *
     * @param {object} parameters Create or update resource parameters.
     *
     * @param {object} [parameters.plan] The plan of the resource.
     *
     * @param {string} [parameters.plan.name] The plan ID.
     *
     * @param {string} [parameters.plan.publisher] The publisher ID.
     *
     * @param {string} [parameters.plan.product] The offer ID.
     *
     * @param {string} [parameters.plan.promotionCode] The promotion code.
     *
     * @param {string} [parameters.plan.version] The plan's version.
     *
     * @param {object} [parameters.properties] The resource properties.
     *
     * @param {string} [parameters.kind] The kind of the resource.
     *
     * @param {string} [parameters.managedBy] ID of the resource that manages this
     * resource.
     *
     * @param {object} [parameters.sku] The SKU of the resource.
     *
     * @param {string} [parameters.sku.name] The SKU name.
     *
     * @param {string} [parameters.sku.tier] The SKU tier.
     *
     * @param {string} [parameters.sku.size] The SKU size.
     *
     * @param {string} [parameters.sku.family] The SKU family.
     *
     * @param {string} [parameters.sku.model] The SKU model.
     *
     * @param {number} [parameters.sku.capacity] The SKU capacity.
     *
     * @param {object} [parameters.identity] The identity of the resource.
     *
     * @param {string} [parameters.identity.type] The identity type. Possible
     * values include: 'SystemAssigned', 'UserAssigned', 'SystemAssigned,
     * UserAssigned', 'None'
     *
     * @param {object} [parameters.identity.userAssignedIdentities] The list of
     * user identities associated with the resource. The user identity dictionary
     * key references will be ARM resource ids in the form:
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
     *
     * @param {string} [parameters.location] Resource location
     *
     * @param {object} [parameters.tags] Resource tags
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GenericResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GenericResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GenericResource} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdateById(resourceId: string, apiVersion: string, parameters: models.GenericResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GenericResource>;
    beginCreateOrUpdateById(resourceId: string, apiVersion: string, parameters: models.GenericResource, callback: ServiceCallback<models.GenericResource>): void;
    beginCreateOrUpdateById(resourceId: string, apiVersion: string, parameters: models.GenericResource, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GenericResource>): void;


    /**
     * Updates a resource by ID.
     *
     * @param {string} resourceId The fully qualified ID of the resource, including
     * the resource name and resource type. Use the format,
     * /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}
     *
     * @param {string} apiVersion The API version to use for the operation.
     *
     * @param {object} parameters Update resource parameters.
     *
     * @param {object} [parameters.plan] The plan of the resource.
     *
     * @param {string} [parameters.plan.name] The plan ID.
     *
     * @param {string} [parameters.plan.publisher] The publisher ID.
     *
     * @param {string} [parameters.plan.product] The offer ID.
     *
     * @param {string} [parameters.plan.promotionCode] The promotion code.
     *
     * @param {string} [parameters.plan.version] The plan's version.
     *
     * @param {object} [parameters.properties] The resource properties.
     *
     * @param {string} [parameters.kind] The kind of the resource.
     *
     * @param {string} [parameters.managedBy] ID of the resource that manages this
     * resource.
     *
     * @param {object} [parameters.sku] The SKU of the resource.
     *
     * @param {string} [parameters.sku.name] The SKU name.
     *
     * @param {string} [parameters.sku.tier] The SKU tier.
     *
     * @param {string} [parameters.sku.size] The SKU size.
     *
     * @param {string} [parameters.sku.family] The SKU family.
     *
     * @param {string} [parameters.sku.model] The SKU model.
     *
     * @param {number} [parameters.sku.capacity] The SKU capacity.
     *
     * @param {object} [parameters.identity] The identity of the resource.
     *
     * @param {string} [parameters.identity.type] The identity type. Possible
     * values include: 'SystemAssigned', 'UserAssigned', 'SystemAssigned,
     * UserAssigned', 'None'
     *
     * @param {object} [parameters.identity.userAssignedIdentities] The list of
     * user identities associated with the resource. The user identity dictionary
     * key references will be ARM resource ids in the form:
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
     *
     * @param {string} [parameters.location] Resource location
     *
     * @param {object} [parameters.tags] Resource tags
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GenericResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginUpdateByIdWithHttpOperationResponse(resourceId: string, apiVersion: string, parameters: models.GenericResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GenericResource>>;

    /**
     * Updates a resource by ID.
     *
     * @param {string} resourceId The fully qualified ID of the resource, including
     * the resource name and resource type. Use the format,
     * /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}
     *
     * @param {string} apiVersion The API version to use for the operation.
     *
     * @param {object} parameters Update resource parameters.
     *
     * @param {object} [parameters.plan] The plan of the resource.
     *
     * @param {string} [parameters.plan.name] The plan ID.
     *
     * @param {string} [parameters.plan.publisher] The publisher ID.
     *
     * @param {string} [parameters.plan.product] The offer ID.
     *
     * @param {string} [parameters.plan.promotionCode] The promotion code.
     *
     * @param {string} [parameters.plan.version] The plan's version.
     *
     * @param {object} [parameters.properties] The resource properties.
     *
     * @param {string} [parameters.kind] The kind of the resource.
     *
     * @param {string} [parameters.managedBy] ID of the resource that manages this
     * resource.
     *
     * @param {object} [parameters.sku] The SKU of the resource.
     *
     * @param {string} [parameters.sku.name] The SKU name.
     *
     * @param {string} [parameters.sku.tier] The SKU tier.
     *
     * @param {string} [parameters.sku.size] The SKU size.
     *
     * @param {string} [parameters.sku.family] The SKU family.
     *
     * @param {string} [parameters.sku.model] The SKU model.
     *
     * @param {number} [parameters.sku.capacity] The SKU capacity.
     *
     * @param {object} [parameters.identity] The identity of the resource.
     *
     * @param {string} [parameters.identity.type] The identity type. Possible
     * values include: 'SystemAssigned', 'UserAssigned', 'SystemAssigned,
     * UserAssigned', 'None'
     *
     * @param {object} [parameters.identity.userAssignedIdentities] The list of
     * user identities associated with the resource. The user identity dictionary
     * key references will be ARM resource ids in the form:
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
     *
     * @param {string} [parameters.location] Resource location
     *
     * @param {object} [parameters.tags] Resource tags
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GenericResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GenericResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GenericResource} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginUpdateById(resourceId: string, apiVersion: string, parameters: models.GenericResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GenericResource>;
    beginUpdateById(resourceId: string, apiVersion: string, parameters: models.GenericResource, callback: ServiceCallback<models.GenericResource>): void;
    beginUpdateById(resourceId: string, apiVersion: string, parameters: models.GenericResource, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GenericResource>): void;


    /**
     * Get all the resources for a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResourceListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResourceListResult>>;

    /**
     * Get all the resources for a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResourceListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResourceListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResourceListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroupNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ResourceListResult>;
    listByResourceGroupNext(nextPageLink: string, callback: ServiceCallback<models.ResourceListResult>): void;
    listByResourceGroupNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceListResult>): void;


    /**
     * Get all the resources in a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResourceListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResourceListResult>>;

    /**
     * Get all the resources in a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResourceListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResourceListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResourceListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ResourceListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.ResourceListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceListResult>): void;
}

/**
 * @class
 * ResourceGroups
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ResourceManagementClient.
 */
export interface ResourceGroups {


    /**
     * Checks whether a resource group exists.
     *
     * @param {string} resourceGroupName The name of the resource group to check.
     * The name is case insensitive.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Boolean>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    checkExistenceWithHttpOperationResponse(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<boolean>>;

    /**
     * Checks whether a resource group exists.
     *
     * @param {string} resourceGroupName The name of the resource group to check.
     * The name is case insensitive.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Boolean} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Boolean} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    checkExistence(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<boolean>;
    checkExistence(resourceGroupName: string, callback: ServiceCallback<boolean>): void;
    checkExistence(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<boolean>): void;


    /**
     * Creates or updates a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group to create
     * or update. Can include alphanumeric, underscore, parentheses, hyphen, period
     * (except at end), and Unicode characters that match the allowed characters.
     *
     * @param {object} parameters Parameters supplied to the create or update a
     * resource group.
     *
     * @param {object} [parameters.properties]
     *
     * @param {string} parameters.location The location of the resource group. It
     * cannot be changed after the resource group has been created. It must be one
     * of the supported Azure locations.
     *
     * @param {string} [parameters.managedBy] The ID of the resource that manages
     * this resource group.
     *
     * @param {object} [parameters.tags] The tags attached to the resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResourceGroup>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, parameters: models.ResourceGroup, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResourceGroup>>;

    /**
     * Creates or updates a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group to create
     * or update. Can include alphanumeric, underscore, parentheses, hyphen, period
     * (except at end), and Unicode characters that match the allowed characters.
     *
     * @param {object} parameters Parameters supplied to the create or update a
     * resource group.
     *
     * @param {object} [parameters.properties]
     *
     * @param {string} parameters.location The location of the resource group. It
     * cannot be changed after the resource group has been created. It must be one
     * of the supported Azure locations.
     *
     * @param {string} [parameters.managedBy] The ID of the resource that manages
     * this resource group.
     *
     * @param {object} [parameters.tags] The tags attached to the resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResourceGroup} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResourceGroup} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResourceGroup} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, parameters: models.ResourceGroup, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ResourceGroup>;
    createOrUpdate(resourceGroupName: string, parameters: models.ResourceGroup, callback: ServiceCallback<models.ResourceGroup>): void;
    createOrUpdate(resourceGroupName: string, parameters: models.ResourceGroup, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceGroup>): void;


    /**
     * @summary Deletes a resource group.
     *
     * When you delete a resource group, all of its resources are also deleted.
     * Deleting a resource group deletes all of its template deployments and
     * currently stored operations.
     *
     * @param {string} resourceGroupName The name of the resource group to delete.
     * The name is case insensitive.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Deletes a resource group.
     *
     * When you delete a resource group, all of its resources are also deleted.
     * Deleting a resource group deletes all of its template deployments and
     * currently stored operations.
     *
     * @param {string} resourceGroupName The name of the resource group to delete.
     * The name is case insensitive.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group to get. The
     * name is case insensitive.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResourceGroup>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResourceGroup>>;

    /**
     * Gets a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group to get. The
     * name is case insensitive.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResourceGroup} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResourceGroup} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResourceGroup} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ResourceGroup>;
    get(resourceGroupName: string, callback: ServiceCallback<models.ResourceGroup>): void;
    get(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceGroup>): void;


    /**
     * @summary Updates a resource group.
     *
     * Resource groups can be updated through a simple PATCH operation to a group
     * address. The format of the request is the same as that for creating a
     * resource group. If a field is unspecified, the current value is retained.
     *
     * @param {string} resourceGroupName The name of the resource group to update.
     * The name is case insensitive.
     *
     * @param {object} parameters Parameters supplied to update a resource group.
     *
     * @param {string} [parameters.name] The name of the resource group.
     *
     * @param {object} [parameters.properties]
     *
     * @param {string} [parameters.managedBy] The ID of the resource that manages
     * this resource group.
     *
     * @param {object} [parameters.tags] The tags attached to the resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResourceGroup>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, parameters: models.ResourceGroupPatchable, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResourceGroup>>;

    /**
     * @summary Updates a resource group.
     *
     * Resource groups can be updated through a simple PATCH operation to a group
     * address. The format of the request is the same as that for creating a
     * resource group. If a field is unspecified, the current value is retained.
     *
     * @param {string} resourceGroupName The name of the resource group to update.
     * The name is case insensitive.
     *
     * @param {object} parameters Parameters supplied to update a resource group.
     *
     * @param {string} [parameters.name] The name of the resource group.
     *
     * @param {object} [parameters.properties]
     *
     * @param {string} [parameters.managedBy] The ID of the resource that manages
     * this resource group.
     *
     * @param {object} [parameters.tags] The tags attached to the resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResourceGroup} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResourceGroup} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResourceGroup} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, parameters: models.ResourceGroupPatchable, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ResourceGroup>;
    update(resourceGroupName: string, parameters: models.ResourceGroupPatchable, callback: ServiceCallback<models.ResourceGroup>): void;
    update(resourceGroupName: string, parameters: models.ResourceGroupPatchable, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceGroup>): void;


    /**
     * Captures the specified resource group as a template.
     *
     * @param {string} resourceGroupName The name of the resource group to export
     * as a template.
     *
     * @param {object} parameters Parameters for exporting the template.
     *
     * @param {array} [parameters.resources] The IDs of the resources. The only
     * supported string currently is '*' (all resources). Future updates will
     * support exporting specific resources.
     *
     * @param {string} [parameters.options] The export template options. Supported
     * values include 'IncludeParameterDefaultValue', 'IncludeComments' or
     * 'IncludeParameterDefaultValue, IncludeComments
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResourceGroupExportResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    exportTemplateWithHttpOperationResponse(resourceGroupName: string, parameters: models.ExportTemplateRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResourceGroupExportResult>>;

    /**
     * Captures the specified resource group as a template.
     *
     * @param {string} resourceGroupName The name of the resource group to export
     * as a template.
     *
     * @param {object} parameters Parameters for exporting the template.
     *
     * @param {array} [parameters.resources] The IDs of the resources. The only
     * supported string currently is '*' (all resources). Future updates will
     * support exporting specific resources.
     *
     * @param {string} [parameters.options] The export template options. Supported
     * values include 'IncludeParameterDefaultValue', 'IncludeComments' or
     * 'IncludeParameterDefaultValue, IncludeComments
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResourceGroupExportResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResourceGroupExportResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResourceGroupExportResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    exportTemplate(resourceGroupName: string, parameters: models.ExportTemplateRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ResourceGroupExportResult>;
    exportTemplate(resourceGroupName: string, parameters: models.ExportTemplateRequest, callback: ServiceCallback<models.ResourceGroupExportResult>): void;
    exportTemplate(resourceGroupName: string, parameters: models.ExportTemplateRequest, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceGroupExportResult>): void;


    /**
     * Gets all the resource groups for a subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] The filter to apply on the
     * operation.<br><br>You can filter by tag names and values. For example, to
     * filter for a tag name and value, use $filter=tagName eq 'tag1' and tagValue
     * eq 'Value1'
     *
     * @param {number} [options.top] The number of results to return. If null is
     * passed, returns all resource groups.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResourceGroupListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { filter? : string, top? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResourceGroupListResult>>;

    /**
     * Gets all the resource groups for a subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] The filter to apply on the
     * operation.<br><br>You can filter by tag names and values. For example, to
     * filter for a tag name and value, use $filter=tagName eq 'tag1' and tagValue
     * eq 'Value1'
     *
     * @param {number} [options.top] The number of results to return. If null is
     * passed, returns all resource groups.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResourceGroupListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResourceGroupListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResourceGroupListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { filter? : string, top? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.ResourceGroupListResult>;
    list(callback: ServiceCallback<models.ResourceGroupListResult>): void;
    list(options: { filter? : string, top? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceGroupListResult>): void;


    /**
     * @summary Deletes a resource group.
     *
     * When you delete a resource group, all of its resources are also deleted.
     * Deleting a resource group deletes all of its template deployments and
     * currently stored operations.
     *
     * @param {string} resourceGroupName The name of the resource group to delete.
     * The name is case insensitive.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Deletes a resource group.
     *
     * When you delete a resource group, all of its resources are also deleted.
     * Deleting a resource group deletes all of its template deployments and
     * currently stored operations.
     *
     * @param {string} resourceGroupName The name of the resource group to delete.
     * The name is case insensitive.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(resourceGroupName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets all the resource groups for a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResourceGroupListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResourceGroupListResult>>;

    /**
     * Gets all the resource groups for a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResourceGroupListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResourceGroupListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResourceGroupListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ResourceGroupListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.ResourceGroupListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceGroupListResult>): void;
}

/**
 * @class
 * Tags
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ResourceManagementClient.
 */
export interface Tags {


    /**
     * Deletes a tag value.
     *
     * @param {string} tagName The name of the tag.
     *
     * @param {string} tagValue The value of the tag to delete.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteValueWithHttpOperationResponse(tagName: string, tagValue: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a tag value.
     *
     * @param {string} tagName The name of the tag.
     *
     * @param {string} tagValue The value of the tag to delete.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteValue(tagName: string, tagValue: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteValue(tagName: string, tagValue: string, callback: ServiceCallback<void>): void;
    deleteValue(tagName: string, tagValue: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Creates a tag value. The name of the tag must already exist.
     *
     * @param {string} tagName The name of the tag.
     *
     * @param {string} tagValue The value of the tag to create.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<TagValue>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateValueWithHttpOperationResponse(tagName: string, tagValue: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TagValue>>;

    /**
     * Creates a tag value. The name of the tag must already exist.
     *
     * @param {string} tagName The name of the tag.
     *
     * @param {string} tagValue The value of the tag to create.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {TagValue} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {TagValue} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link TagValue} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdateValue(tagName: string, tagValue: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.TagValue>;
    createOrUpdateValue(tagName: string, tagValue: string, callback: ServiceCallback<models.TagValue>): void;
    createOrUpdateValue(tagName: string, tagValue: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TagValue>): void;


    /**
     * @summary Creates a tag in the subscription.
     *
     * The tag name can have a maximum of 512 characters and is case insensitive.
     * Tag names created by Azure have prefixes of microsoft, azure, or windows.
     * You cannot create tags with one of these prefixes.
     *
     * @param {string} tagName The name of the tag to create.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<TagDetails>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(tagName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TagDetails>>;

    /**
     * @summary Creates a tag in the subscription.
     *
     * The tag name can have a maximum of 512 characters and is case insensitive.
     * Tag names created by Azure have prefixes of microsoft, azure, or windows.
     * You cannot create tags with one of these prefixes.
     *
     * @param {string} tagName The name of the tag to create.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {TagDetails} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {TagDetails} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link TagDetails} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(tagName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.TagDetails>;
    createOrUpdate(tagName: string, callback: ServiceCallback<models.TagDetails>): void;
    createOrUpdate(tagName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TagDetails>): void;


    /**
     * @summary Deletes a tag from the subscription.
     *
     * You must remove all values from a resource tag before you can delete it.
     *
     * @param {string} tagName The name of the tag.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(tagName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Deletes a tag from the subscription.
     *
     * You must remove all values from a resource tag before you can delete it.
     *
     * @param {string} tagName The name of the tag.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(tagName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(tagName: string, callback: ServiceCallback<void>): void;
    deleteMethod(tagName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets the names and values of all resource tags that are defined in a
     * subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<TagsListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TagsListResult>>;

    /**
     * Gets the names and values of all resource tags that are defined in a
     * subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {TagsListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {TagsListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link TagsListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.TagsListResult>;
    list(callback: ServiceCallback<models.TagsListResult>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TagsListResult>): void;


    /**
     * Gets the names and values of all resource tags that are defined in a
     * subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<TagsListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TagsListResult>>;

    /**
     * Gets the names and values of all resource tags that are defined in a
     * subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {TagsListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {TagsListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link TagsListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.TagsListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.TagsListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TagsListResult>): void;
}

/**
 * @class
 * DeploymentOperations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ResourceManagementClient.
 */
export interface DeploymentOperations {


    /**
     * Gets a deployments operation.
     *
     * @param {string} deploymentName The name of the deployment.
     *
     * @param {string} operationId The ID of the operation to get.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DeploymentOperation>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getAtSubscriptionScopeWithHttpOperationResponse(deploymentName: string, operationId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DeploymentOperation>>;

    /**
     * Gets a deployments operation.
     *
     * @param {string} deploymentName The name of the deployment.
     *
     * @param {string} operationId The ID of the operation to get.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DeploymentOperation} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DeploymentOperation} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DeploymentOperation} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getAtSubscriptionScope(deploymentName: string, operationId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DeploymentOperation>;
    getAtSubscriptionScope(deploymentName: string, operationId: string, callback: ServiceCallback<models.DeploymentOperation>): void;
    getAtSubscriptionScope(deploymentName: string, operationId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeploymentOperation>): void;


    /**
     * Gets all deployments operations for a deployment.
     *
     * @param {string} deploymentName The name of the deployment with the operation
     * to get.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.top] The number of results to return.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DeploymentOperationsListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listAtSubscriptionScopeWithHttpOperationResponse(deploymentName: string, options?: { top? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DeploymentOperationsListResult>>;

    /**
     * Gets all deployments operations for a deployment.
     *
     * @param {string} deploymentName The name of the deployment with the operation
     * to get.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.top] The number of results to return.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DeploymentOperationsListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DeploymentOperationsListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DeploymentOperationsListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listAtSubscriptionScope(deploymentName: string, options?: { top? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.DeploymentOperationsListResult>;
    listAtSubscriptionScope(deploymentName: string, callback: ServiceCallback<models.DeploymentOperationsListResult>): void;
    listAtSubscriptionScope(deploymentName: string, options: { top? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeploymentOperationsListResult>): void;


    /**
     * Gets a deployments operation.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} deploymentName The name of the deployment.
     *
     * @param {string} operationId The ID of the operation to get.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DeploymentOperation>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, deploymentName: string, operationId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DeploymentOperation>>;

    /**
     * Gets a deployments operation.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} deploymentName The name of the deployment.
     *
     * @param {string} operationId The ID of the operation to get.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DeploymentOperation} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DeploymentOperation} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DeploymentOperation} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, deploymentName: string, operationId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DeploymentOperation>;
    get(resourceGroupName: string, deploymentName: string, operationId: string, callback: ServiceCallback<models.DeploymentOperation>): void;
    get(resourceGroupName: string, deploymentName: string, operationId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeploymentOperation>): void;


    /**
     * Gets all deployments operations for a deployment.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} deploymentName The name of the deployment with the operation
     * to get.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.top] The number of results to return.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DeploymentOperationsListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(resourceGroupName: string, deploymentName: string, options?: { top? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DeploymentOperationsListResult>>;

    /**
     * Gets all deployments operations for a deployment.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} deploymentName The name of the deployment with the operation
     * to get.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.top] The number of results to return.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DeploymentOperationsListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DeploymentOperationsListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DeploymentOperationsListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(resourceGroupName: string, deploymentName: string, options?: { top? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.DeploymentOperationsListResult>;
    list(resourceGroupName: string, deploymentName: string, callback: ServiceCallback<models.DeploymentOperationsListResult>): void;
    list(resourceGroupName: string, deploymentName: string, options: { top? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeploymentOperationsListResult>): void;


    /**
     * Gets all deployments operations for a deployment.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DeploymentOperationsListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listAtSubscriptionScopeNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DeploymentOperationsListResult>>;

    /**
     * Gets all deployments operations for a deployment.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DeploymentOperationsListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DeploymentOperationsListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DeploymentOperationsListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listAtSubscriptionScopeNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DeploymentOperationsListResult>;
    listAtSubscriptionScopeNext(nextPageLink: string, callback: ServiceCallback<models.DeploymentOperationsListResult>): void;
    listAtSubscriptionScopeNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeploymentOperationsListResult>): void;


    /**
     * Gets all deployments operations for a deployment.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DeploymentOperationsListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DeploymentOperationsListResult>>;

    /**
     * Gets all deployments operations for a deployment.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DeploymentOperationsListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DeploymentOperationsListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DeploymentOperationsListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DeploymentOperationsListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.DeploymentOperationsListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeploymentOperationsListResult>): void;
}
