/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback } from 'ms-rest';
import * as models from '../models';


/**
 * @class
 * Deployments
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ResourceManagementClient.
 */
export interface Deployments {

    /**
     * @summary Deletes a deployment from the deployment history.
     *
     * A template deployment that is currently running cannot be deleted. Deleting
     * a template deployment removes the associated deployment operations.
     * Deleting a template deployment does not affect the state of the resource
     * group. This is an asynchronous operation that returns a status of 202
     * until the template deployment is successfully deleted. The Location
     * response header contains the URI that is used to obtain the status of the
     * process. While the process is running, a call to the URI in the Location
     * header returns a status of 202. When the process finishes, the URI in the
     * Location header returns a status of 204 on success. If the asynchronous
     * request failed, the URI in the Location header returns an error-level
     * status code.
     *
     * @param {string} resourceGroupName The name of the resource group with the
     * deployment to delete. The name is case insensitive.
     * 
     * @param {string} deploymentName The name of the deployment to delete.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteMethod(resourceGroupName: string, deploymentName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, deploymentName: string, callback: ServiceCallback<void>): void;

    /**
     * @summary Deletes a deployment from the deployment history.
     *
     * A template deployment that is currently running cannot be deleted. Deleting
     * a template deployment removes the associated deployment operations.
     * Deleting a template deployment does not affect the state of the resource
     * group. This is an asynchronous operation that returns a status of 202
     * until the template deployment is successfully deleted. The Location
     * response header contains the URI that is used to obtain the status of the
     * process. While the process is running, a call to the URI in the Location
     * header returns a status of 202. When the process finishes, the URI in the
     * Location header returns a status of 204 on success. If the asynchronous
     * request failed, the URI in the Location header returns an error-level
     * status code.
     *
     * @param {string} resourceGroupName The name of the resource group with the
     * deployment to delete. The name is case insensitive.
     * 
     * @param {string} deploymentName The name of the deployment to delete.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginDeleteMethod(resourceGroupName: string, deploymentName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, deploymentName: string, callback: ServiceCallback<void>): void;

    /**
     * Checks whether the deployment exists.
     *
     * @param {string} resourceGroupName The name of the resource group with the
     * deployment to check. The name is case insensitive.
     * 
     * @param {string} deploymentName The name of the deployment to check.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    checkExistence(resourceGroupName: string, deploymentName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<boolean>): void;
    checkExistence(resourceGroupName: string, deploymentName: string, callback: ServiceCallback<boolean>): void;

    /**
     * @summary Deploys resources to a resource group.
     *
     * You can provide the template and parameters directly in the request or link
     * to JSON files.
     *
     * @param {string} resourceGroupName The name of the resource group to deploy
     * the resources to. The name is case insensitive. The resource group must
     * already exist.
     * 
     * @param {string} deploymentName The name of the deployment.
     * 
     * @param {object} parameters Additional parameters supplied to the operation.
     * 
     * @param {object} [parameters.properties] The deployment properties.
     * 
     * @param {object} [parameters.properties.template] The template content. You
     * use this element when you want to pass the template syntax directly in the
     * request rather than link to an existing template. It can be a JObject or
     * well-formed JSON string. Use either the templateLink property or the
     * template property, but not both.
     * 
     * @param {object} [parameters.properties.templateLink] The URI of the
     * template. Use either the templateLink property or the template property,
     * but not both.
     * 
     * @param {string} parameters.properties.templateLink.uri The URI of the
     * template to deploy.
     * 
     * @param {string} [parameters.properties.templateLink.contentVersion] If
     * included, must match the ContentVersion in the template.
     * 
     * @param {object} [parameters.properties.parameters] Name and value pairs
     * that define the deployment parameters for the template. You use this
     * element when you want to provide the parameter values directly in the
     * request rather than link to an existing parameter file. Use either the
     * parametersLink property or the parameters property, but not both. It can
     * be a JObject or a well formed JSON string.
     * 
     * @param {object} [parameters.properties.parametersLink] The URI of
     * parameters file. You use this element to link to an existing parameters
     * file. Use either the parametersLink property or the parameters property,
     * but not both.
     * 
     * @param {string} parameters.properties.parametersLink.uri The URI of the
     * parameters file.
     * 
     * @param {string} [parameters.properties.parametersLink.contentVersion] If
     * included, must match the ContentVersion in the template.
     * 
     * @param {string} parameters.properties.mode The mode that is used to deploy
     * resources. This value can be either Incremental or Complete. In
     * Incremental mode, resources are deployed without deleting existing
     * resources that are not included in the template. In Complete mode,
     * resources are deployed and existing resources in the resource group that
     * are not included in the template are deleted. Be careful when using
     * Complete mode as you may unintentionally delete resources. Possible values
     * include: 'Incremental', 'Complete'
     * 
     * @param {object} [parameters.properties.debugSetting] The debug setting of
     * the deployment.
     * 
     * @param {string} [parameters.properties.debugSetting.detailLevel] Specifies
     * the type of information to log for debugging. The permitted values are
     * none, requestContent, responseContent, or both requestContent and
     * responseContent separated by a comma. The default is none. When setting
     * this value, carefully consider the type of information you are passing in
     * during deployment. By logging information about the request or response,
     * you could potentially expose sensitive data that is retrieved through the
     * deployment operations.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createOrUpdate(resourceGroupName: string, deploymentName: string, parameters: models.Deployment, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeploymentExtended>): void;
    createOrUpdate(resourceGroupName: string, deploymentName: string, parameters: models.Deployment, callback: ServiceCallback<models.DeploymentExtended>): void;

    /**
     * @summary Deploys resources to a resource group.
     *
     * You can provide the template and parameters directly in the request or link
     * to JSON files.
     *
     * @param {string} resourceGroupName The name of the resource group to deploy
     * the resources to. The name is case insensitive. The resource group must
     * already exist.
     * 
     * @param {string} deploymentName The name of the deployment.
     * 
     * @param {object} parameters Additional parameters supplied to the operation.
     * 
     * @param {object} [parameters.properties] The deployment properties.
     * 
     * @param {object} [parameters.properties.template] The template content. You
     * use this element when you want to pass the template syntax directly in the
     * request rather than link to an existing template. It can be a JObject or
     * well-formed JSON string. Use either the templateLink property or the
     * template property, but not both.
     * 
     * @param {object} [parameters.properties.templateLink] The URI of the
     * template. Use either the templateLink property or the template property,
     * but not both.
     * 
     * @param {string} parameters.properties.templateLink.uri The URI of the
     * template to deploy.
     * 
     * @param {string} [parameters.properties.templateLink.contentVersion] If
     * included, must match the ContentVersion in the template.
     * 
     * @param {object} [parameters.properties.parameters] Name and value pairs
     * that define the deployment parameters for the template. You use this
     * element when you want to provide the parameter values directly in the
     * request rather than link to an existing parameter file. Use either the
     * parametersLink property or the parameters property, but not both. It can
     * be a JObject or a well formed JSON string.
     * 
     * @param {object} [parameters.properties.parametersLink] The URI of
     * parameters file. You use this element to link to an existing parameters
     * file. Use either the parametersLink property or the parameters property,
     * but not both.
     * 
     * @param {string} parameters.properties.parametersLink.uri The URI of the
     * parameters file.
     * 
     * @param {string} [parameters.properties.parametersLink.contentVersion] If
     * included, must match the ContentVersion in the template.
     * 
     * @param {string} parameters.properties.mode The mode that is used to deploy
     * resources. This value can be either Incremental or Complete. In
     * Incremental mode, resources are deployed without deleting existing
     * resources that are not included in the template. In Complete mode,
     * resources are deployed and existing resources in the resource group that
     * are not included in the template are deleted. Be careful when using
     * Complete mode as you may unintentionally delete resources. Possible values
     * include: 'Incremental', 'Complete'
     * 
     * @param {object} [parameters.properties.debugSetting] The debug setting of
     * the deployment.
     * 
     * @param {string} [parameters.properties.debugSetting.detailLevel] Specifies
     * the type of information to log for debugging. The permitted values are
     * none, requestContent, responseContent, or both requestContent and
     * responseContent separated by a comma. The default is none. When setting
     * this value, carefully consider the type of information you are passing in
     * during deployment. By logging information about the request or response,
     * you could potentially expose sensitive data that is retrieved through the
     * deployment operations.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginCreateOrUpdate(resourceGroupName: string, deploymentName: string, parameters: models.Deployment, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeploymentExtended>): void;
    beginCreateOrUpdate(resourceGroupName: string, deploymentName: string, parameters: models.Deployment, callback: ServiceCallback<models.DeploymentExtended>): void;

    /**
     * Gets a deployment.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     * 
     * @param {string} deploymentName The name of the deployment to get.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(resourceGroupName: string, deploymentName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeploymentExtended>): void;
    get(resourceGroupName: string, deploymentName: string, callback: ServiceCallback<models.DeploymentExtended>): void;

    /**
     * @summary Cancels a currently running template deployment.
     *
     * You can cancel a deployment only if the provisioningState is Accepted or
     * Running. After the deployment is canceled, the provisioningState is set to
     * Canceled. Canceling a template deployment stops the currently running
     * template deployment and leaves the resource group partially deployed.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     * 
     * @param {string} deploymentName The name of the deployment to cancel.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    cancel(resourceGroupName: string, deploymentName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    cancel(resourceGroupName: string, deploymentName: string, callback: ServiceCallback<void>): void;

    /**
     * Validates whether the specified template is syntactically correct and will
     * be accepted by Azure Resource Manager..
     *
     * @param {string} resourceGroupName The name of the resource group the
     * template will be deployed to. The name is case insensitive.
     * 
     * @param {string} deploymentName The name of the deployment.
     * 
     * @param {object} parameters Parameters to validate.
     * 
     * @param {object} [parameters.properties] The deployment properties.
     * 
     * @param {object} [parameters.properties.template] The template content. You
     * use this element when you want to pass the template syntax directly in the
     * request rather than link to an existing template. It can be a JObject or
     * well-formed JSON string. Use either the templateLink property or the
     * template property, but not both.
     * 
     * @param {object} [parameters.properties.templateLink] The URI of the
     * template. Use either the templateLink property or the template property,
     * but not both.
     * 
     * @param {string} parameters.properties.templateLink.uri The URI of the
     * template to deploy.
     * 
     * @param {string} [parameters.properties.templateLink.contentVersion] If
     * included, must match the ContentVersion in the template.
     * 
     * @param {object} [parameters.properties.parameters] Name and value pairs
     * that define the deployment parameters for the template. You use this
     * element when you want to provide the parameter values directly in the
     * request rather than link to an existing parameter file. Use either the
     * parametersLink property or the parameters property, but not both. It can
     * be a JObject or a well formed JSON string.
     * 
     * @param {object} [parameters.properties.parametersLink] The URI of
     * parameters file. You use this element to link to an existing parameters
     * file. Use either the parametersLink property or the parameters property,
     * but not both.
     * 
     * @param {string} parameters.properties.parametersLink.uri The URI of the
     * parameters file.
     * 
     * @param {string} [parameters.properties.parametersLink.contentVersion] If
     * included, must match the ContentVersion in the template.
     * 
     * @param {string} parameters.properties.mode The mode that is used to deploy
     * resources. This value can be either Incremental or Complete. In
     * Incremental mode, resources are deployed without deleting existing
     * resources that are not included in the template. In Complete mode,
     * resources are deployed and existing resources in the resource group that
     * are not included in the template are deleted. Be careful when using
     * Complete mode as you may unintentionally delete resources. Possible values
     * include: 'Incremental', 'Complete'
     * 
     * @param {object} [parameters.properties.debugSetting] The debug setting of
     * the deployment.
     * 
     * @param {string} [parameters.properties.debugSetting.detailLevel] Specifies
     * the type of information to log for debugging. The permitted values are
     * none, requestContent, responseContent, or both requestContent and
     * responseContent separated by a comma. The default is none. When setting
     * this value, carefully consider the type of information you are passing in
     * during deployment. By logging information about the request or response,
     * you could potentially expose sensitive data that is retrieved through the
     * deployment operations.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    validate(resourceGroupName: string, deploymentName: string, parameters: models.Deployment, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeploymentValidateResult>): void;
    validate(resourceGroupName: string, deploymentName: string, parameters: models.Deployment, callback: ServiceCallback<models.DeploymentValidateResult>): void;

    /**
     * Exports the template used for specified deployment.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     * 
     * @param {string} deploymentName The name of the deployment from which to get
     * the template.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    exportTemplate(resourceGroupName: string, deploymentName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeploymentExportResult>): void;
    exportTemplate(resourceGroupName: string, deploymentName: string, callback: ServiceCallback<models.DeploymentExportResult>): void;

    /**
     * Get all the deployments for a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group with the
     * deployments to get. The name is case insensitive.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.filter] The filter to apply on the operation. For
     * example, you can use $filter=provisioningState eq '{state}'.
     * 
     * @param {number} [options.top] The number of results to get. If null is
     * passed, returns all deployments.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    list(resourceGroupName: string, options: { filter? : string, top? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeploymentListResult>): void;
    list(resourceGroupName: string, callback: ServiceCallback<models.DeploymentListResult>): void;

    /**
     * Get all the deployments for a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeploymentListResult>): void;
    listNext(nextPageLink: string, callback: ServiceCallback<models.DeploymentListResult>): void;
}

/**
 * @class
 * Providers
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ResourceManagementClient.
 */
export interface Providers {

    /**
     * Unregisters a subscription from a resource provider.
     *
     * @param {string} resourceProviderNamespace The namespace of the resource
     * provider to unregister.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    unregister(resourceProviderNamespace: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Provider>): void;
    unregister(resourceProviderNamespace: string, callback: ServiceCallback<models.Provider>): void;

    /**
     * Registers a subscription with a resource provider.
     *
     * @param {string} resourceProviderNamespace The namespace of the resource
     * provider to register.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    register(resourceProviderNamespace: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Provider>): void;
    register(resourceProviderNamespace: string, callback: ServiceCallback<models.Provider>): void;

    /**
     * Gets all resource providers for a subscription.
     *
     * @param {object} [options] Optional Parameters.
     * 
     * @param {number} [options.top] The number of results to return. If null is
     * passed returns all deployments.
     * 
     * @param {string} [options.expand] The properties to include in the results.
     * For example, use &$expand=metadata in the query string to retrieve
     * resource provider metadata. To include property aliases in response, use
     * $expand=resourceTypes/aliases.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    list(options: { top? : number, expand? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProviderListResult>): void;
    list(callback: ServiceCallback<models.ProviderListResult>): void;

    /**
     * Gets the specified resource provider.
     *
     * @param {string} resourceProviderNamespace The namespace of the resource
     * provider.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.expand] The $expand query parameter. For example,
     * to include property aliases in response, use $expand=resourceTypes/aliases.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(resourceProviderNamespace: string, options: { expand? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Provider>): void;
    get(resourceProviderNamespace: string, callback: ServiceCallback<models.Provider>): void;

    /**
     * Gets all resource providers for a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProviderListResult>): void;
    listNext(nextPageLink: string, callback: ServiceCallback<models.ProviderListResult>): void;
}

/**
 * @class
 * ResourceGroups
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ResourceManagementClient.
 */
export interface ResourceGroups {

    /**
     * Get all the resources for a resource group.
     *
     * @param {string} resourceGroupName The resource group with the resources to
     * get.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.filter] The filter to apply on the operation.
     * 
     * @param {string} [options.expand] The $expand query parameter
     * 
     * @param {number} [options.top] The number of results to return. If null is
     * passed, returns all resources.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listResources(resourceGroupName: string, options: { filter? : string, expand? : string, top? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceListResult>): void;
    listResources(resourceGroupName: string, callback: ServiceCallback<models.ResourceListResult>): void;

    /**
     * Checks whether a resource group exists.
     *
     * @param {string} resourceGroupName The name of the resource group to check.
     * The name is case insensitive.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    checkExistence(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<boolean>): void;
    checkExistence(resourceGroupName: string, callback: ServiceCallback<boolean>): void;

    /**
     * Creates a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group to create
     * or update.
     * 
     * @param {object} parameters Parameters supplied to the create or update a
     * resource group.
     * 
     * @param {string} [parameters.name] The name of the resource group.
     * 
     * @param {object} [parameters.properties]
     * 
     * @param {string} parameters.location The location of the resource group. It
     * cannot be changed after the resource group has been created. It muct be
     * one of the supported Azure locations.
     * 
     * @param {string} [parameters.managedBy] The ID of the resource that manages
     * this resource group.
     * 
     * @param {object} [parameters.tags] The tags attached to the resource group.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createOrUpdate(resourceGroupName: string, parameters: models.ResourceGroup, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceGroup>): void;
    createOrUpdate(resourceGroupName: string, parameters: models.ResourceGroup, callback: ServiceCallback<models.ResourceGroup>): void;

    /**
     * @summary Deletes a resource group.
     *
     * When you delete a resource group, all of its resources are also deleted.
     * Deleting a resource group deletes all of its template deployments and
     * currently stored operations.
     *
     * @param {string} resourceGroupName The name of the resource group to delete.
     * The name is case insensitive.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteMethod(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, callback: ServiceCallback<void>): void;

    /**
     * @summary Deletes a resource group.
     *
     * When you delete a resource group, all of its resources are also deleted.
     * Deleting a resource group deletes all of its template deployments and
     * currently stored operations.
     *
     * @param {string} resourceGroupName The name of the resource group to delete.
     * The name is case insensitive.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginDeleteMethod(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, callback: ServiceCallback<void>): void;

    /**
     * Gets a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group to get.
     * The name is case insensitive.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceGroup>): void;
    get(resourceGroupName: string, callback: ServiceCallback<models.ResourceGroup>): void;

    /**
     * @summary Updates a resource group.
     *
     * Resource groups can be updated through a simple PATCH operation to a group
     * address. The format of the request is the same as that for creating a
     * resource group. If a field is unspecified, the current value is retained.
     *
     * @param {string} resourceGroupName The name of the resource group to update.
     * The name is case insensitive.
     * 
     * @param {object} parameters Parameters supplied to update a resource group.
     * 
     * @param {string} [parameters.name] The name of the resource group.
     * 
     * @param {object} [parameters.properties]
     * 
     * @param {string} parameters.location The location of the resource group. It
     * cannot be changed after the resource group has been created. It muct be
     * one of the supported Azure locations.
     * 
     * @param {string} [parameters.managedBy] The ID of the resource that manages
     * this resource group.
     * 
     * @param {object} [parameters.tags] The tags attached to the resource group.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    patch(resourceGroupName: string, parameters: models.ResourceGroup, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceGroup>): void;
    patch(resourceGroupName: string, parameters: models.ResourceGroup, callback: ServiceCallback<models.ResourceGroup>): void;

    /**
     * Captures the specified resource group as a template.
     *
     * @param {string} resourceGroupName The name of the resource group to export
     * as a template.
     * 
     * @param {object} parameters Parameters for exporting the template.
     * 
     * @param {array} [parameters.resources] The IDs of the resources. The only
     * supported string currently is '*' (all resources). Future updates will
     * support exporting specific resources.
     * 
     * @param {string} [parameters.options] The export template options. Supported
     * values include 'IncludeParameterDefaultValue', 'IncludeComments' or
     * 'IncludeParameterDefaultValue, IncludeComments
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    exportTemplate(resourceGroupName: string, parameters: models.ExportTemplateRequest, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceGroupExportResult>): void;
    exportTemplate(resourceGroupName: string, parameters: models.ExportTemplateRequest, callback: ServiceCallback<models.ResourceGroupExportResult>): void;

    /**
     * Gets all the resource groups for a subscription.
     *
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.filter] The filter to apply on the operation.
     * 
     * @param {number} [options.top] The number of results to return. If null is
     * passed, returns all resource groups.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    list(options: { filter? : string, top? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceGroupListResult>): void;
    list(callback: ServiceCallback<models.ResourceGroupListResult>): void;

    /**
     * Get all the resources for a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listResourcesNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceListResult>): void;
    listResourcesNext(nextPageLink: string, callback: ServiceCallback<models.ResourceListResult>): void;

    /**
     * Gets all the resource groups for a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceGroupListResult>): void;
    listNext(nextPageLink: string, callback: ServiceCallback<models.ResourceGroupListResult>): void;
}

/**
 * @class
 * Resources
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ResourceManagementClient.
 */
export interface Resources {

    /**
     * @summary Moves resources from one resource group to another resource group.
     *
     * The resources to move must be in the same source resource group. The target
     * resource group may be in a different subscription. When moving resources,
     * both the source group and the target group are locked for the duration of
     * the operation. Write and delete operations are blocked on the groups until
     * the move completes.
     *
     * @param {string} sourceResourceGroupName The name of the resource group
     * containing the rsources to move.
     * 
     * @param {object} parameters Parameters for moving resources.
     * 
     * @param {array} [parameters.resources] The IDs of the resources.
     * 
     * @param {string} [parameters.targetResourceGroup] The target resource group.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    moveResources(sourceResourceGroupName: string, parameters: models.ResourcesMoveInfo, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    moveResources(sourceResourceGroupName: string, parameters: models.ResourcesMoveInfo, callback: ServiceCallback<void>): void;

    /**
     * @summary Moves resources from one resource group to another resource group.
     *
     * The resources to move must be in the same source resource group. The target
     * resource group may be in a different subscription. When moving resources,
     * both the source group and the target group are locked for the duration of
     * the operation. Write and delete operations are blocked on the groups until
     * the move completes.
     *
     * @param {string} sourceResourceGroupName The name of the resource group
     * containing the rsources to move.
     * 
     * @param {object} parameters Parameters for moving resources.
     * 
     * @param {array} [parameters.resources] The IDs of the resources.
     * 
     * @param {string} [parameters.targetResourceGroup] The target resource group.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginMoveResources(sourceResourceGroupName: string, parameters: models.ResourcesMoveInfo, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    beginMoveResources(sourceResourceGroupName: string, parameters: models.ResourcesMoveInfo, callback: ServiceCallback<void>): void;

    /**
     * Get all the resources in a subscription.
     *
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.filter] The filter to apply on the operation.
     * 
     * @param {string} [options.expand] The $expand query parameter.
     * 
     * @param {number} [options.top] The number of results to return. If null is
     * passed, returns all resource groups.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    list(options: { filter? : string, expand? : string, top? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceListResult>): void;
    list(callback: ServiceCallback<models.ResourceListResult>): void;

    /**
     * Checks whether a resource exists.
     *
     * @param {string} resourceGroupName The name of the resource group containing
     * the resource to check. The name is case insensitive.
     * 
     * @param {string} resourceProviderNamespace The resource provider of the
     * resource to check.
     * 
     * @param {string} parentResourcePath The parent resource identity.
     * 
     * @param {string} resourceType The resource type.
     * 
     * @param {string} resourceName The name of the resource to check whether it
     * exists.
     * 
     * @param {string} apiVersion The API version to use for the operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    checkExistence(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, apiVersion: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<boolean>): void;
    checkExistence(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, apiVersion: string, callback: ServiceCallback<boolean>): void;

    /**
     * Deletes a resource.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource to delete. The name is case insensitive.
     * 
     * @param {string} resourceProviderNamespace The namespace of the resource
     * provider.
     * 
     * @param {string} parentResourcePath The parent resource identity.
     * 
     * @param {string} resourceType The resource type.
     * 
     * @param {string} resourceName The name of the resource to delete.
     * 
     * @param {string} apiVersion The API version to use for the operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteMethod(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, apiVersion: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, apiVersion: string, callback: ServiceCallback<void>): void;

    /**
     * Deletes a resource.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource to delete. The name is case insensitive.
     * 
     * @param {string} resourceProviderNamespace The namespace of the resource
     * provider.
     * 
     * @param {string} parentResourcePath The parent resource identity.
     * 
     * @param {string} resourceType The resource type.
     * 
     * @param {string} resourceName The name of the resource to delete.
     * 
     * @param {string} apiVersion The API version to use for the operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginDeleteMethod(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, apiVersion: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, apiVersion: string, callback: ServiceCallback<void>): void;

    /**
     * Creates a resource.
     *
     * @param {string} resourceGroupName The name of the resource group for the
     * resource. The name is case insensitive.
     * 
     * @param {string} resourceProviderNamespace The namespace of the resource
     * provider.
     * 
     * @param {string} parentResourcePath The parent resource identity.
     * 
     * @param {string} resourceType The resource type of the resource to create.
     * 
     * @param {string} resourceName The name of the resource to create.
     * 
     * @param {string} apiVersion The API version to use for the operation.
     * 
     * @param {object} parameters Parameters for creating or updating the resource.
     * 
     * @param {object} [parameters.plan] The plan of the resource.
     * 
     * @param {string} [parameters.plan.name] The plan ID.
     * 
     * @param {string} [parameters.plan.publisher] The publisher ID.
     * 
     * @param {string} [parameters.plan.product] The offer ID.
     * 
     * @param {string} [parameters.plan.promotionCode] The promotion code.
     * 
     * @param {object} [parameters.properties] The resource properties.
     * 
     * @param {string} [parameters.kind] The kind of the resource.
     * 
     * @param {string} [parameters.managedBy] ID of the resource that manages this
     * resource.
     * 
     * @param {object} [parameters.sku] The SKU of the resource.
     * 
     * @param {string} [parameters.sku.name] The SKU name.
     * 
     * @param {string} [parameters.sku.tier] The SKU tier.
     * 
     * @param {string} [parameters.sku.size] The SKU size.
     * 
     * @param {string} [parameters.sku.family] The SKU family.
     * 
     * @param {string} [parameters.sku.model] The SKU model.
     * 
     * @param {number} [parameters.sku.capacity] The SKU capacity.
     * 
     * @param {object} [parameters.identity] The identity of the resource.
     * 
     * @param {string} [parameters.identity.type] The identity type. Possible
     * values include: 'SystemAssigned'
     * 
     * @param {string} [parameters.location] Resource location
     * 
     * @param {object} [parameters.tags] Resource tags
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createOrUpdate(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, apiVersion: string, parameters: models.GenericResource, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GenericResource>): void;
    createOrUpdate(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, apiVersion: string, parameters: models.GenericResource, callback: ServiceCallback<models.GenericResource>): void;

    /**
     * Creates a resource.
     *
     * @param {string} resourceGroupName The name of the resource group for the
     * resource. The name is case insensitive.
     * 
     * @param {string} resourceProviderNamespace The namespace of the resource
     * provider.
     * 
     * @param {string} parentResourcePath The parent resource identity.
     * 
     * @param {string} resourceType The resource type of the resource to create.
     * 
     * @param {string} resourceName The name of the resource to create.
     * 
     * @param {string} apiVersion The API version to use for the operation.
     * 
     * @param {object} parameters Parameters for creating or updating the resource.
     * 
     * @param {object} [parameters.plan] The plan of the resource.
     * 
     * @param {string} [parameters.plan.name] The plan ID.
     * 
     * @param {string} [parameters.plan.publisher] The publisher ID.
     * 
     * @param {string} [parameters.plan.product] The offer ID.
     * 
     * @param {string} [parameters.plan.promotionCode] The promotion code.
     * 
     * @param {object} [parameters.properties] The resource properties.
     * 
     * @param {string} [parameters.kind] The kind of the resource.
     * 
     * @param {string} [parameters.managedBy] ID of the resource that manages this
     * resource.
     * 
     * @param {object} [parameters.sku] The SKU of the resource.
     * 
     * @param {string} [parameters.sku.name] The SKU name.
     * 
     * @param {string} [parameters.sku.tier] The SKU tier.
     * 
     * @param {string} [parameters.sku.size] The SKU size.
     * 
     * @param {string} [parameters.sku.family] The SKU family.
     * 
     * @param {string} [parameters.sku.model] The SKU model.
     * 
     * @param {number} [parameters.sku.capacity] The SKU capacity.
     * 
     * @param {object} [parameters.identity] The identity of the resource.
     * 
     * @param {string} [parameters.identity.type] The identity type. Possible
     * values include: 'SystemAssigned'
     * 
     * @param {string} [parameters.location] Resource location
     * 
     * @param {object} [parameters.tags] Resource tags
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginCreateOrUpdate(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, apiVersion: string, parameters: models.GenericResource, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GenericResource>): void;
    beginCreateOrUpdate(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, apiVersion: string, parameters: models.GenericResource, callback: ServiceCallback<models.GenericResource>): void;

    /**
     * Gets a resource.
     *
     * @param {string} resourceGroupName The name of the resource group containing
     * the resource to get. The name is case insensitive.
     * 
     * @param {string} resourceProviderNamespace The namespace of the resource
     * provider.
     * 
     * @param {string} parentResourcePath The parent resource identity.
     * 
     * @param {string} resourceType The resource type of the resource.
     * 
     * @param {string} resourceName The name of the resource to get.
     * 
     * @param {string} apiVersion The API version to use for the operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, apiVersion: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GenericResource>): void;
    get(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, apiVersion: string, callback: ServiceCallback<models.GenericResource>): void;

    /**
     * Checks by ID whether a resource exists.
     *
     * @param {string} resourceId The fully qualified ID of the resource,
     * including the resource name and resource type. Use the format,
     * /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}
     * 
     * @param {string} apiVersion The API version to use for the operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    checkExistenceById(resourceId: string, apiVersion: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<boolean>): void;
    checkExistenceById(resourceId: string, apiVersion: string, callback: ServiceCallback<boolean>): void;

    /**
     * Deletes a resource by ID.
     *
     * @param {string} resourceId The fully qualified ID of the resource,
     * including the resource name and resource type. Use the format,
     * /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}
     * 
     * @param {string} apiVersion The API version to use for the operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteById(resourceId: string, apiVersion: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    deleteById(resourceId: string, apiVersion: string, callback: ServiceCallback<void>): void;

    /**
     * Deletes a resource by ID.
     *
     * @param {string} resourceId The fully qualified ID of the resource,
     * including the resource name and resource type. Use the format,
     * /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}
     * 
     * @param {string} apiVersion The API version to use for the operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginDeleteById(resourceId: string, apiVersion: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    beginDeleteById(resourceId: string, apiVersion: string, callback: ServiceCallback<void>): void;

    /**
     * Create a resource by ID.
     *
     * @param {string} resourceId The fully qualified ID of the resource,
     * including the resource name and resource type. Use the format,
     * /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}
     * 
     * @param {string} apiVersion The API version to use for the operation.
     * 
     * @param {object} parameters Create or update resource parameters.
     * 
     * @param {object} [parameters.plan] The plan of the resource.
     * 
     * @param {string} [parameters.plan.name] The plan ID.
     * 
     * @param {string} [parameters.plan.publisher] The publisher ID.
     * 
     * @param {string} [parameters.plan.product] The offer ID.
     * 
     * @param {string} [parameters.plan.promotionCode] The promotion code.
     * 
     * @param {object} [parameters.properties] The resource properties.
     * 
     * @param {string} [parameters.kind] The kind of the resource.
     * 
     * @param {string} [parameters.managedBy] ID of the resource that manages this
     * resource.
     * 
     * @param {object} [parameters.sku] The SKU of the resource.
     * 
     * @param {string} [parameters.sku.name] The SKU name.
     * 
     * @param {string} [parameters.sku.tier] The SKU tier.
     * 
     * @param {string} [parameters.sku.size] The SKU size.
     * 
     * @param {string} [parameters.sku.family] The SKU family.
     * 
     * @param {string} [parameters.sku.model] The SKU model.
     * 
     * @param {number} [parameters.sku.capacity] The SKU capacity.
     * 
     * @param {object} [parameters.identity] The identity of the resource.
     * 
     * @param {string} [parameters.identity.type] The identity type. Possible
     * values include: 'SystemAssigned'
     * 
     * @param {string} [parameters.location] Resource location
     * 
     * @param {object} [parameters.tags] Resource tags
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createOrUpdateById(resourceId: string, apiVersion: string, parameters: models.GenericResource, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GenericResource>): void;
    createOrUpdateById(resourceId: string, apiVersion: string, parameters: models.GenericResource, callback: ServiceCallback<models.GenericResource>): void;

    /**
     * Create a resource by ID.
     *
     * @param {string} resourceId The fully qualified ID of the resource,
     * including the resource name and resource type. Use the format,
     * /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}
     * 
     * @param {string} apiVersion The API version to use for the operation.
     * 
     * @param {object} parameters Create or update resource parameters.
     * 
     * @param {object} [parameters.plan] The plan of the resource.
     * 
     * @param {string} [parameters.plan.name] The plan ID.
     * 
     * @param {string} [parameters.plan.publisher] The publisher ID.
     * 
     * @param {string} [parameters.plan.product] The offer ID.
     * 
     * @param {string} [parameters.plan.promotionCode] The promotion code.
     * 
     * @param {object} [parameters.properties] The resource properties.
     * 
     * @param {string} [parameters.kind] The kind of the resource.
     * 
     * @param {string} [parameters.managedBy] ID of the resource that manages this
     * resource.
     * 
     * @param {object} [parameters.sku] The SKU of the resource.
     * 
     * @param {string} [parameters.sku.name] The SKU name.
     * 
     * @param {string} [parameters.sku.tier] The SKU tier.
     * 
     * @param {string} [parameters.sku.size] The SKU size.
     * 
     * @param {string} [parameters.sku.family] The SKU family.
     * 
     * @param {string} [parameters.sku.model] The SKU model.
     * 
     * @param {number} [parameters.sku.capacity] The SKU capacity.
     * 
     * @param {object} [parameters.identity] The identity of the resource.
     * 
     * @param {string} [parameters.identity.type] The identity type. Possible
     * values include: 'SystemAssigned'
     * 
     * @param {string} [parameters.location] Resource location
     * 
     * @param {object} [parameters.tags] Resource tags
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginCreateOrUpdateById(resourceId: string, apiVersion: string, parameters: models.GenericResource, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GenericResource>): void;
    beginCreateOrUpdateById(resourceId: string, apiVersion: string, parameters: models.GenericResource, callback: ServiceCallback<models.GenericResource>): void;

    /**
     * Gets a resource by ID.
     *
     * @param {string} resourceId The fully qualified ID of the resource,
     * including the resource name and resource type. Use the format,
     * /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}
     * 
     * @param {string} apiVersion The API version to use for the operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getById(resourceId: string, apiVersion: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GenericResource>): void;
    getById(resourceId: string, apiVersion: string, callback: ServiceCallback<models.GenericResource>): void;

    /**
     * Get all the resources in a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceListResult>): void;
    listNext(nextPageLink: string, callback: ServiceCallback<models.ResourceListResult>): void;
}

/**
 * @class
 * Tags
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ResourceManagementClient.
 */
export interface Tags {

    /**
     * Deletes a tag value.
     *
     * @param {string} tagName The name of the tag.
     * 
     * @param {string} tagValue The value of the tag to delete.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteValue(tagName: string, tagValue: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    deleteValue(tagName: string, tagValue: string, callback: ServiceCallback<void>): void;

    /**
     * Creates a tag value. The name of the tag must already exist.
     *
     * @param {string} tagName The name of the tag.
     * 
     * @param {string} tagValue The value of the tag to create.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createOrUpdateValue(tagName: string, tagValue: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TagValue>): void;
    createOrUpdateValue(tagName: string, tagValue: string, callback: ServiceCallback<models.TagValue>): void;

    /**
     * @summary Creates a tag in the subscription.
     *
     * The tag name can have a maximum of 512 characters and is case insensitive.
     * Tag names created by Azure have prefixes of microsoft, azure, or windows.
     * You cannot create tags with one of these prefixes.
     *
     * @param {string} tagName The name of the tag to create.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createOrUpdate(tagName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TagDetails>): void;
    createOrUpdate(tagName: string, callback: ServiceCallback<models.TagDetails>): void;

    /**
     * @summary Deletes a tag from the subscription.
     *
     * You must remove all values from a resource tag before you can delete it.
     *
     * @param {string} tagName The name of the tag.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteMethod(tagName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    deleteMethod(tagName: string, callback: ServiceCallback<void>): void;

    /**
     * Gets the names and values of all resource tags that are defined in a
     * subscription.
     *
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TagsListResult>): void;
    list(callback: ServiceCallback<models.TagsListResult>): void;

    /**
     * Gets the names and values of all resource tags that are defined in a
     * subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TagsListResult>): void;
    listNext(nextPageLink: string, callback: ServiceCallback<models.TagsListResult>): void;
}

/**
 * @class
 * DeploymentOperations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ResourceManagementClient.
 */
export interface DeploymentOperations {

    /**
     * Gets a deployments operation.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     * 
     * @param {string} deploymentName The name of the deployment.
     * 
     * @param {string} operationId The ID of the operation to get.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(resourceGroupName: string, deploymentName: string, operationId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeploymentOperation>): void;
    get(resourceGroupName: string, deploymentName: string, operationId: string, callback: ServiceCallback<models.DeploymentOperation>): void;

    /**
     * Gets all deployments operations for a deployment.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     * 
     * @param {string} deploymentName The name of the deployment with the
     * operation to get.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {number} [options.top] The number of results to return.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    list(resourceGroupName: string, deploymentName: string, options: { top? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeploymentOperationsListResult>): void;
    list(resourceGroupName: string, deploymentName: string, callback: ServiceCallback<models.DeploymentOperationsListResult>): void;

    /**
     * Gets all deployments operations for a deployment.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeploymentOperationsListResult>): void;
    listNext(nextPageLink: string, callback: ServiceCallback<models.DeploymentOperationsListResult>): void;
}
