/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.11.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the DeploymentPropertiesExtended class.
 * @constructor
 * Deployment properties with additional details.
 * @member {string} [provisioningState] Gets or sets the state of the
 * provisioning.
 * 
 * @member {string} [correlationId] Gets or sets the correlation ID of the
 * deployment.
 * 
 * @member {date} [timestamp] Gets or sets the timestamp of the template
 * deployment.
 * 
 * @member {object} [outputs] Gets or sets key/value pairs that represent
 * deploymentoutput.
 * 
 * @member {array} [providers] Gets the list of resource providers needed for
 * the deployment.
 * 
 * @member {array} [dependencies] Gets the list of deployment dependencies.
 * 
 * @member {object} [template] Gets or sets the template content. Use only one
 * of Template or TemplateLink.
 * 
 * @member {object} [templateLink] Gets or sets the URI referencing the
 * template. Use only one of Template or TemplateLink.
 * 
 * @member {string} [templateLink.uri] URI referencing the template.
 * 
 * @member {string} [templateLink.contentVersion] If included it must match
 * the ContentVersion in the template.
 * 
 * @member {object} [parameters] Deployment parameters. Use only one of
 * Parameters or ParametersLink.
 * 
 * @member {object} [parametersLink] Gets or sets the URI referencing the
 * parameters. Use only one of Parameters or ParametersLink.
 * 
 * @member {string} [parametersLink.uri] URI referencing the template.
 * 
 * @member {string} [parametersLink.contentVersion] If included it must match
 * the ContentVersion in the template.
 * 
 * @member {string} [mode] Gets or sets the deployment mode. Possible values
 * for this property include: 'Incremental'.
 * 
 */
function DeploymentPropertiesExtended(parameters) {
  if (parameters !== null && parameters !== undefined) {
    if (parameters.provisioningState !== null && parameters.provisioningState !== undefined) {
      this.provisioningState = parameters.provisioningState;
    }
    if (parameters.correlationId !== null && parameters.correlationId !== undefined) {
      this.correlationId = parameters.correlationId;
    }
    if (parameters.timestamp !== null && parameters.timestamp !== undefined) {
      this.timestamp = parameters.timestamp;
    }
    if (parameters.outputs !== null && parameters.outputs !== undefined) {
      this.outputs = parameters.outputs;
    }
    if (parameters.providers) {
      var tempParametersproviders = [];
      parameters.providers.forEach(function(element) {
        if (element) {
          element = new models['Provider'](element);
        }
        tempParametersproviders.push(element);
      });
      this.providers = tempParametersproviders;
    }
    if (parameters.dependencies) {
      var tempParametersdependencies = [];
      parameters.dependencies.forEach(function(element1) {
        if (element1) {
          element1 = new models['Dependency'](element1);
        }
        tempParametersdependencies.push(element1);
      });
      this.dependencies = tempParametersdependencies;
    }
    if (parameters.template !== null && parameters.template !== undefined) {
      this.template = parameters.template;
    }
    if (parameters.templateLink) {
      this.templateLink = new models['TemplateLink'](parameters.templateLink);
    }
    if (parameters.parameters !== null && parameters.parameters !== undefined) {
      this.parameters = parameters.parameters;
    }
    if (parameters.parametersLink) {
      this.parametersLink = new models['ParametersLink'](parameters.parametersLink);
    }
    if (parameters.mode !== null && parameters.mode !== undefined) {
      this.mode = parameters.mode;
    }
  }    
}


/**
 * Validate the payload against the DeploymentPropertiesExtended schema
 *
 * @param {JSON} payload
 *
 */
DeploymentPropertiesExtended.prototype.serialize = function () {
  var payload = {};
  if (this['provisioningState'] !== null && this['provisioningState'] !== undefined) {
    if (typeof this['provisioningState'].valueOf() !== 'string') {
      throw new Error('this[\'provisioningState\'] must be of type string.');
    }
    payload['provisioningState'] = this['provisioningState'];
  }

  if (this['correlationId'] !== null && this['correlationId'] !== undefined) {
    if (typeof this['correlationId'].valueOf() !== 'string') {
      throw new Error('this[\'correlationId\'] must be of type string.');
    }
    payload['correlationId'] = this['correlationId'];
  }

  if (this['timestamp']) {
    if (!(this['timestamp'] instanceof Date || typeof this['timestamp'].valueOf() === 'string' && !isNaN(Date.parse(this['timestamp'])))) {
      throw new Error('this[\'timestamp\'] must be of type date.');
    }
    payload['timestamp'] = (this['timestamp'] instanceof Date) ? this['timestamp'].toISOString() : this['timestamp'];
  }

  if (this['outputs'] !== null && this['outputs'] !== undefined) {
    if (typeof this['outputs'] !== 'object') {
      throw new Error('this[\'outputs\'] must be of type object.');
    }
    payload['outputs'] = this['outputs'];
  }

  if (util.isArray(this['providers'])) {
    payload['providers'] = [];
    for (var i = 0; i < this['providers'].length; i++) {
      if (this['providers'][i]) {
        if (payload['providers'] === null || payload['providers'] === undefined) {
          payload['providers'] = {};
        }
        payload['providers'][i] = this['providers'][i].serialize();
      }
    }
  }

  if (util.isArray(this['dependencies'])) {
    payload['dependencies'] = [];
    for (var i1 = 0; i1 < this['dependencies'].length; i1++) {
      if (this['dependencies'][i1]) {
        if (payload['dependencies'] === null || payload['dependencies'] === undefined) {
          payload['dependencies'] = {};
        }
        payload['dependencies'][i1] = this['dependencies'][i1].serialize();
      }
    }
  }

  if (this['template'] !== null && this['template'] !== undefined) {
    if (typeof this['template'] !== 'object') {
      throw new Error('this[\'template\'] must be of type object.');
    }
    payload['template'] = this['template'];
  }

  if (this['templateLink']) {
    payload['templateLink'] = this['templateLink'].serialize();
  }

  if (this['parameters'] !== null && this['parameters'] !== undefined) {
    if (typeof this['parameters'] !== 'object') {
      throw new Error('this[\'parameters\'] must be of type object.');
    }
    payload['parameters'] = this['parameters'];
  }

  if (this['parametersLink']) {
    payload['parametersLink'] = this['parametersLink'].serialize();
  }

  if (this['mode'] !== null && this['mode'] !== undefined) {
    var allowedValues = [ 'Incremental' ];
    var thismode = this['mode'];
    if (!allowedValues.some( function(item) { return item === thismode; })) {
      throw new Error(this['mode'] + ' is not a valid value. The valid values are: ' + allowedValues);
    }
    payload['mode'] = this['mode'];
  }

  return payload;
};

/**
 * Deserialize the instance to DeploymentPropertiesExtended schema
 *
 * @param {JSON} instance
 *
 */
DeploymentPropertiesExtended.prototype.deserialize = function (instance) {
  if (instance) {
    if (instance['provisioningState'] !== null && instance['provisioningState'] !== undefined) {
      this['provisioningState'] = instance['provisioningState'];
    }

    if (instance['correlationId'] !== null && instance['correlationId'] !== undefined) {
      this['correlationId'] = instance['correlationId'];
    }

    if (instance['timestamp'] !== null && instance['timestamp'] !== undefined) {
      this['timestamp'] = new Date(instance['timestamp']);
    }

    if (instance['outputs'] !== null && instance['outputs'] !== undefined) {
      this['outputs'] = instance['outputs'];
    }

    if (instance['providers']) {
      var tempInstanceproviders = [];
      instance['providers'].forEach(function(element2) {
        if (element2) {
          element2 = new models['Provider']().deserialize(element2);
        }
        tempInstanceproviders.push(element2);
      });
      this['providers'] = tempInstanceproviders;
    }

    if (instance['dependencies']) {
      var tempInstancedependencies = [];
      instance['dependencies'].forEach(function(element3) {
        if (element3) {
          element3 = new models['Dependency']().deserialize(element3);
        }
        tempInstancedependencies.push(element3);
      });
      this['dependencies'] = tempInstancedependencies;
    }

    if (instance['template'] !== null && instance['template'] !== undefined) {
      this['template'] = instance['template'];
    }

    if (instance['templateLink']) {
      this['templateLink'] = new models['TemplateLink']().deserialize(instance['templateLink']);
    }

    if (instance['parameters'] !== null && instance['parameters'] !== undefined) {
      this['parameters'] = instance['parameters'];
    }

    if (instance['parametersLink']) {
      this['parametersLink'] = new models['ParametersLink']().deserialize(instance['parametersLink']);
    }

    if (instance['mode'] !== null && instance['mode'] !== undefined) {
      this['mode'] = instance['mode'];
    }
  }

  return this;
};

module.exports = DeploymentPropertiesExtended;
