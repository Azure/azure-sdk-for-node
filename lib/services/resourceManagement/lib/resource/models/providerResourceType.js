/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.11.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var util = require('util');

/**
 * @class
 * Initializes a new instance of the ProviderResourceType class.
 * @constructor
 * Resource type managed by the resource provider.
 * @member {string} [resourceType] Gets or sets the resource type.
 * 
 * @member {array} [locations] Gets or sets the collection of locations where
 * this resource type can be created in.
 * 
 * @member {array} [apiVersions] Gets or sets the api version.
 * 
 * @member {object} [properties] Gets or sets the properties.
 * 
 */
function ProviderResourceType(parameters) {
  if (parameters !== null && parameters !== undefined) {
    if (parameters.resourceType !== null && parameters.resourceType !== undefined) {
      this.resourceType = parameters.resourceType;
    }
    if (parameters.locations) {
      var tempParameterslocations = [];
      parameters.locations.forEach(function(element) {
        if (element !== null && element !== undefined) {
          element = element;
        }
        tempParameterslocations.push(element);
      });
      this.locations = tempParameterslocations;
    }
    if (parameters.apiVersions) {
      var tempParametersapiVersions = [];
      parameters.apiVersions.forEach(function(element1) {
        if (element1 !== null && element1 !== undefined) {
          element1 = element1;
        }
        tempParametersapiVersions.push(element1);
      });
      this.apiVersions = tempParametersapiVersions;
    }
    if (parameters.properties) {
      this.properties = {};
      for(var valueElement in parameters.properties) {
        if (parameters.properties[valueElement] !== null && parameters.properties[valueElement] !== undefined) {
          this.properties[valueElement] = parameters.properties[valueElement];
        }
        else {
          this.properties[valueElement] = parameters.properties[valueElement];
        }
      }
    }
  }    
}


/**
 * Validate the payload against the ProviderResourceType schema
 *
 * @param {JSON} payload
 *
 */
ProviderResourceType.prototype.serialize = function () {
  var payload = {};
  if (this['resourceType'] !== null && this['resourceType'] !== undefined) {
    if (typeof this['resourceType'].valueOf() !== 'string') {
      throw new Error('this[\'resourceType\'] must be of type string.');
    }
    payload['resourceType'] = this['resourceType'];
  }

  if (util.isArray(this['locations'])) {
    payload['locations'] = [];
    for (var i = 0; i < this['locations'].length; i++) {
      if (this['locations'][i] !== null && this['locations'][i] !== undefined) {
        if (typeof this['locations'][i].valueOf() !== 'string') {
          throw new Error('this[\'locations\'][i] must be of type string.');
        }
        if (payload['locations'] === null || payload['locations'] === undefined) {
          payload['locations'] = {};
        }
        payload['locations'][i] = this['locations'][i];
      }
    }
  }

  if (util.isArray(this['apiVersions'])) {
    payload['apiVersions'] = [];
    for (var i1 = 0; i1 < this['apiVersions'].length; i1++) {
      if (this['apiVersions'][i1] !== null && this['apiVersions'][i1] !== undefined) {
        if (typeof this['apiVersions'][i1].valueOf() !== 'string') {
          throw new Error('this[\'apiVersions\'][i1] must be of type string.');
        }
        if (payload['apiVersions'] === null || payload['apiVersions'] === undefined) {
          payload['apiVersions'] = {};
        }
        payload['apiVersions'][i1] = this['apiVersions'][i1];
      }
    }
  }

  if (this['properties'] && typeof this['properties'] === 'object') {
    payload['properties'] = {};
    for(var valueElement1 in this['properties']) {
      if (this['properties'][valueElement1] !== null && this['properties'][valueElement1] !== undefined) {
        if (typeof this['properties'][valueElement1].valueOf() !== 'string') {
          throw new Error('this[\'properties\'][valueElement1] must be of type string.');
        }
        if (payload['properties'] === null || payload['properties'] === undefined) {
          payload['properties'] = {};
        }
        payload['properties'][valueElement1] = this['properties'][valueElement1];
      }
      else {
        payload['properties'][valueElement1] = this['properties'][valueElement1];
      }
    }
  }

  return payload;
};

/**
 * Deserialize the instance to ProviderResourceType schema
 *
 * @param {JSON} instance
 *
 */
ProviderResourceType.prototype.deserialize = function (instance) {
  if (instance) {
    if (instance['resourceType'] !== null && instance['resourceType'] !== undefined) {
      this['resourceType'] = instance['resourceType'];
    }

    if (instance['locations']) {
      var tempInstancelocations = [];
      instance['locations'].forEach(function(element2) {
        if (element2 !== null && element2 !== undefined) {
          element2 = element2;
        }
        tempInstancelocations.push(element2);
      });
      this['locations'] = tempInstancelocations;
    }

    if (instance['apiVersions']) {
      var tempInstanceapiVersions = [];
      instance['apiVersions'].forEach(function(element3) {
        if (element3 !== null && element3 !== undefined) {
          element3 = element3;
        }
        tempInstanceapiVersions.push(element3);
      });
      this['apiVersions'] = tempInstanceapiVersions;
    }

    if (instance['properties']) {
      this['properties'] = {};
      for(var valueElement2 in instance['properties']) {
        if (instance['properties'] !== null && instance['properties'] !== undefined) {
          if (instance['properties'][valueElement2] !== null && instance['properties'][valueElement2] !== undefined) {
            this['properties'][valueElement2] = instance['properties'][valueElement2];
          }
          else {
            this['properties'][valueElement2] = instance['properties'][valueElement2];
          }
        }
        else {
          this['properties'][valueElement2] = instance['properties'][valueElement2];
        }
      }
    }
  }

  return this;
};

module.exports = ProviderResourceType;
