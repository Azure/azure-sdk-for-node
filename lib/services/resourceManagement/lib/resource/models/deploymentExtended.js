/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.11.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

/**
 * @class
 * Initializes a new instance of the DeploymentExtended class.
 * @constructor
 * Deployment information.
 * @member {string} [id] Gets or sets the ID of the deployment.
 * 
 * @member {string} [name] Gets or sets the name of the deployment.
 * 
 * @member {object} [properties] Gets or sets deployment properties.
 * 
 * @member {string} [properties.provisioningState] Gets or sets the state of
 * the provisioning.
 * 
 * @member {string} [properties.correlationId] Gets or sets the correlation ID
 * of the deployment.
 * 
 * @member {date} [properties.timestamp] Gets or sets the timestamp of the
 * template deployment.
 * 
 * @member {object} [properties.outputs] Gets or sets key/value pairs that
 * represent deploymentoutput.
 * 
 * @member {array} [properties.providers] Gets the list of resource providers
 * needed for the deployment.
 * 
 * @member {array} [properties.dependencies] Gets the list of deployment
 * dependencies.
 * 
 * @member {object} [properties.template] Gets or sets the template content.
 * Use only one of Template or TemplateLink.
 * 
 * @member {object} [properties.templateLink] Gets or sets the URI referencing
 * the template. Use only one of Template or TemplateLink.
 * 
 * @member {string} [properties.templateLink.uri] URI referencing the template.
 * 
 * @member {string} [properties.templateLink.contentVersion] If included it
 * must match the ContentVersion in the template.
 * 
 * @member {object} [properties.parameters] Deployment parameters. Use only
 * one of Parameters or ParametersLink.
 * 
 * @member {object} [properties.parametersLink] Gets or sets the URI
 * referencing the parameters. Use only one of Parameters or ParametersLink.
 * 
 * @member {string} [properties.parametersLink.uri] URI referencing the
 * template.
 * 
 * @member {string} [properties.parametersLink.contentVersion] If included it
 * must match the ContentVersion in the template.
 * 
 * @member {string} [properties.mode] Gets or sets the deployment mode.
 * Possible values for this property include: 'Incremental'.
 * 
 */
function DeploymentExtended(parameters) {
  if (parameters !== null && parameters !== undefined) {
    if (parameters.id !== null && parameters.id !== undefined) {
      this.id = parameters.id;
    }
    if (parameters.name !== null && parameters.name !== undefined) {
      this.name = parameters.name;
    }
    if (parameters.properties) {
      this.properties = new models['DeploymentPropertiesExtended'](parameters.properties);
    }
  }    
}


/**
 * Validate the payload against the DeploymentExtended schema
 *
 * @param {JSON} payload
 *
 */
DeploymentExtended.prototype.serialize = function () {
  var payload = {};
  if (this['id'] !== null && this['id'] !== undefined) {
    if (typeof this['id'].valueOf() !== 'string') {
      throw new Error('this[\'id\'] must be of type string.');
    }
    payload['id'] = this['id'];
  }

  if (this['name'] !== null && this['name'] !== undefined) {
    if (typeof this['name'].valueOf() !== 'string') {
      throw new Error('this[\'name\'] must be of type string.');
    }
    payload['name'] = this['name'];
  }

  if (this['properties']) {
    payload['properties'] = this['properties'].serialize();
  }

  return payload;
};

/**
 * Deserialize the instance to DeploymentExtended schema
 *
 * @param {JSON} instance
 *
 */
DeploymentExtended.prototype.deserialize = function (instance) {
  if (instance) {
    if (instance['id'] !== null && instance['id'] !== undefined) {
      this['id'] = instance['id'];
    }

    if (instance['name'] !== null && instance['name'] !== undefined) {
      this['name'] = instance['name'];
    }

    if (instance['properties']) {
      this['properties'] = new models['DeploymentPropertiesExtended']().deserialize(instance['properties']);
    }
  }

  return this;
};

module.exports = DeploymentExtended;
