/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.11.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

/**
 * @class
 * Initializes a new instance of the DeploymentOperation class.
 * @constructor
 * Deployment operation information.
 * @member {string} [id] Gets or sets full deployment operation id.
 * 
 * @member {string} [operationId] Gets or sets deployment operation id.
 * 
 * @member {object} [properties] Gets or sets deployment properties.
 * 
 * @member {string} [properties.provisioningState] Gets or sets the state of
 * the provisioning.
 * 
 * @member {date} [properties.timestamp] Gets or sets the date and time of the
 * operation.
 * 
 * @member {string} [properties.statusCode] Gets or sets operation status code.
 * 
 * @member {object} [properties.statusMessage] Gets or sets operation status
 * message.
 * 
 * @member {object} [properties.targetResource] Gets or sets the target
 * resource.
 * 
 * @member {string} [properties.targetResource.id] Gets or sets the ID of the
 * resource.
 * 
 * @member {string} [properties.targetResource.resourceName] Gets or sets the
 * name of the resource.
 * 
 * @member {string} [properties.targetResource.resourceType] Gets or sets the
 * type of the resource.
 * 
 */
function DeploymentOperation(parameters) {
  if (parameters !== null && parameters !== undefined) {
    if (parameters.id !== null && parameters.id !== undefined) {
      this.id = parameters.id;
    }
    if (parameters.operationId !== null && parameters.operationId !== undefined) {
      this.operationId = parameters.operationId;
    }
    if (parameters.properties) {
      this.properties = new models['DeploymentOperationProperties'](parameters.properties);
    }
  }    
}


/**
 * Validate the payload against the DeploymentOperation schema
 *
 * @param {JSON} payload
 *
 */
DeploymentOperation.prototype.serialize = function () {
  var payload = {};
  if (this['id'] !== null && this['id'] !== undefined) {
    if (typeof this['id'].valueOf() !== 'string') {
      throw new Error('this[\'id\'] must be of type string.');
    }
    payload['id'] = this['id'];
  }

  if (this['operationId'] !== null && this['operationId'] !== undefined) {
    if (typeof this['operationId'].valueOf() !== 'string') {
      throw new Error('this[\'operationId\'] must be of type string.');
    }
    payload['operationId'] = this['operationId'];
  }

  if (this['properties']) {
    payload['properties'] = this['properties'].serialize();
  }

  return payload;
};

/**
 * Deserialize the instance to DeploymentOperation schema
 *
 * @param {JSON} instance
 *
 */
DeploymentOperation.prototype.deserialize = function (instance) {
  if (instance) {
    if (instance['id'] !== null && instance['id'] !== undefined) {
      this['id'] = instance['id'];
    }

    if (instance['operationId'] !== null && instance['operationId'] !== undefined) {
      this['operationId'] = instance['operationId'];
    }

    if (instance['properties']) {
      this['properties'] = new models['DeploymentOperationProperties']().deserialize(instance['properties']);
    }
  }

  return this;
};

module.exports = DeploymentOperation;
