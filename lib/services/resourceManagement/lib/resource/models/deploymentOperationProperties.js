/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.11.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

/**
 * @class
 * Initializes a new instance of the DeploymentOperationProperties class.
 * @constructor
 * Deployment operation properties.
 * @member {string} [provisioningState] Gets or sets the state of the
 * provisioning.
 * 
 * @member {date} [timestamp] Gets or sets the date and time of the operation.
 * 
 * @member {string} [statusCode] Gets or sets operation status code.
 * 
 * @member {object} [statusMessage] Gets or sets operation status message.
 * 
 * @member {object} [targetResource] Gets or sets the target resource.
 * 
 * @member {string} [targetResource.id] Gets or sets the ID of the resource.
 * 
 * @member {string} [targetResource.resourceName] Gets or sets the name of the
 * resource.
 * 
 * @member {string} [targetResource.resourceType] Gets or sets the type of the
 * resource.
 * 
 */
function DeploymentOperationProperties(parameters) {
  if (parameters !== null && parameters !== undefined) {
    if (parameters.provisioningState !== null && parameters.provisioningState !== undefined) {
      this.provisioningState = parameters.provisioningState;
    }
    if (parameters.timestamp !== null && parameters.timestamp !== undefined) {
      this.timestamp = parameters.timestamp;
    }
    if (parameters.statusCode !== null && parameters.statusCode !== undefined) {
      this.statusCode = parameters.statusCode;
    }
    if (parameters.statusMessage !== null && parameters.statusMessage !== undefined) {
      this.statusMessage = parameters.statusMessage;
    }
    if (parameters.targetResource) {
      this.targetResource = new models['TargetResource'](parameters.targetResource);
    }
  }    
}


/**
 * Validate the payload against the DeploymentOperationProperties schema
 *
 * @param {JSON} payload
 *
 */
DeploymentOperationProperties.prototype.serialize = function () {
  var payload = {};
  if (this['provisioningState'] !== null && this['provisioningState'] !== undefined) {
    if (typeof this['provisioningState'].valueOf() !== 'string') {
      throw new Error('this[\'provisioningState\'] must be of type string.');
    }
    payload['provisioningState'] = this['provisioningState'];
  }

  if (this['timestamp']) {
    if (!(this['timestamp'] instanceof Date || typeof this['timestamp'].valueOf() === 'string' && !isNaN(Date.parse(this['timestamp'])))) {
      throw new Error('this[\'timestamp\'] must be of type date.');
    }
    payload['timestamp'] = (this['timestamp'] instanceof Date) ? this['timestamp'].toISOString() : this['timestamp'];
  }

  if (this['statusCode'] !== null && this['statusCode'] !== undefined) {
    if (typeof this['statusCode'].valueOf() !== 'string') {
      throw new Error('this[\'statusCode\'] must be of type string.');
    }
    payload['statusCode'] = this['statusCode'];
  }

  if (this['statusMessage'] !== null && this['statusMessage'] !== undefined) {
    if (typeof this['statusMessage'] !== 'object') {
      throw new Error('this[\'statusMessage\'] must be of type object.');
    }
    payload['statusMessage'] = this['statusMessage'];
  }

  if (this['targetResource']) {
    payload['targetResource'] = this['targetResource'].serialize();
  }

  return payload;
};

/**
 * Deserialize the instance to DeploymentOperationProperties schema
 *
 * @param {JSON} instance
 *
 */
DeploymentOperationProperties.prototype.deserialize = function (instance) {
  if (instance) {
    if (instance['provisioningState'] !== null && instance['provisioningState'] !== undefined) {
      this['provisioningState'] = instance['provisioningState'];
    }

    if (instance['timestamp'] !== null && instance['timestamp'] !== undefined) {
      this['timestamp'] = new Date(instance['timestamp']);
    }

    if (instance['statusCode'] !== null && instance['statusCode'] !== undefined) {
      this['statusCode'] = instance['statusCode'];
    }

    if (instance['statusMessage'] !== null && instance['statusMessage'] !== undefined) {
      this['statusMessage'] = instance['statusMessage'];
    }

    if (instance['targetResource']) {
      this['targetResource'] = new models['TargetResource']().deserialize(instance['targetResource']);
    }
  }

  return this;
};

module.exports = DeploymentOperationProperties;
