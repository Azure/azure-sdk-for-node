/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.11.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the Provider class.
 * @constructor
 * Resource provider information.
 * @member {string} [id] Gets or sets the provider id.
 * 
 * @member {string} [namespace] Gets or sets the namespace of the provider.
 * 
 * @member {string} [registrationState] Gets or sets the registration state of
 * the provider.
 * 
 * @member {array} [resourceTypes] Gets or sets the collection of provider
 * resource types.
 * 
 */
function Provider(parameters) {
  if (parameters !== null && parameters !== undefined) {
    if (parameters.id !== null && parameters.id !== undefined) {
      this.id = parameters.id;
    }
    if (parameters.namespace !== null && parameters.namespace !== undefined) {
      this.namespace = parameters.namespace;
    }
    if (parameters.registrationState !== null && parameters.registrationState !== undefined) {
      this.registrationState = parameters.registrationState;
    }
    if (parameters.resourceTypes) {
      var tempParametersresourceTypes = [];
      parameters.resourceTypes.forEach(function(element) {
        if (element) {
          element = new models['ProviderResourceType'](element);
        }
        tempParametersresourceTypes.push(element);
      });
      this.resourceTypes = tempParametersresourceTypes;
    }
  }    
}


/**
 * Validate the payload against the Provider schema
 *
 * @param {JSON} payload
 *
 */
Provider.prototype.serialize = function () {
  var payload = {};
  if (this['id'] !== null && this['id'] !== undefined) {
    if (typeof this['id'].valueOf() !== 'string') {
      throw new Error('this[\'id\'] must be of type string.');
    }
    payload['id'] = this['id'];
  }

  if (this['namespace'] !== null && this['namespace'] !== undefined) {
    if (typeof this['namespace'].valueOf() !== 'string') {
      throw new Error('this[\'namespace\'] must be of type string.');
    }
    payload['namespace'] = this['namespace'];
  }

  if (this['registrationState'] !== null && this['registrationState'] !== undefined) {
    if (typeof this['registrationState'].valueOf() !== 'string') {
      throw new Error('this[\'registrationState\'] must be of type string.');
    }
    payload['registrationState'] = this['registrationState'];
  }

  if (util.isArray(this['resourceTypes'])) {
    payload['resourceTypes'] = [];
    for (var i = 0; i < this['resourceTypes'].length; i++) {
      if (this['resourceTypes'][i]) {
        if (payload['resourceTypes'] === null || payload['resourceTypes'] === undefined) {
          payload['resourceTypes'] = {};
        }
        payload['resourceTypes'][i] = this['resourceTypes'][i].serialize();
      }
    }
  }

  return payload;
};

/**
 * Deserialize the instance to Provider schema
 *
 * @param {JSON} instance
 *
 */
Provider.prototype.deserialize = function (instance) {
  if (instance) {
    if (instance['id'] !== null && instance['id'] !== undefined) {
      this['id'] = instance['id'];
    }

    if (instance['namespace'] !== null && instance['namespace'] !== undefined) {
      this['namespace'] = instance['namespace'];
    }

    if (instance['registrationState'] !== null && instance['registrationState'] !== undefined) {
      this['registrationState'] = instance['registrationState'];
    }

    if (instance['resourceTypes']) {
      var tempInstanceresourceTypes = [];
      instance['resourceTypes'].forEach(function(element1) {
        if (element1) {
          element1 = new models['ProviderResourceType']().deserialize(element1);
        }
        tempInstanceresourceTypes.push(element1);
      });
      this['resourceTypes'] = tempInstanceresourceTypes;
    }
  }

  return this;
};

module.exports = Provider;
