/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.11.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

/**
 * @class
 * Initializes a new instance of the Deployment class.
 * @constructor
 * Deployment operation parameters.
 * @member {object} [properties] Gets or sets the deployment properties.
 * 
 * @member {object} [properties.template] Gets or sets the template content.
 * Use only one of Template or TemplateLink.
 * 
 * @member {object} [properties.templateLink] Gets or sets the URI referencing
 * the template. Use only one of Template or TemplateLink.
 * 
 * @member {string} [properties.templateLink.uri] URI referencing the template.
 * 
 * @member {string} [properties.templateLink.contentVersion] If included it
 * must match the ContentVersion in the template.
 * 
 * @member {object} [properties.parameters] Deployment parameters. Use only
 * one of Parameters or ParametersLink.
 * 
 * @member {object} [properties.parametersLink] Gets or sets the URI
 * referencing the parameters. Use only one of Parameters or ParametersLink.
 * 
 * @member {string} [properties.parametersLink.uri] URI referencing the
 * template.
 * 
 * @member {string} [properties.parametersLink.contentVersion] If included it
 * must match the ContentVersion in the template.
 * 
 * @member {string} [properties.mode] Gets or sets the deployment mode.
 * Possible values for this property include: 'Incremental'.
 * 
 */
function Deployment(parameters) {
  if (parameters !== null && parameters !== undefined) {
    if (parameters.properties) {
      this.properties = new models['DeploymentProperties'](parameters.properties);
    }
  }    
}


/**
 * Validate the payload against the Deployment schema
 *
 * @param {JSON} payload
 *
 */
Deployment.prototype.serialize = function () {
  var payload = {};
  if (this['properties']) {
    payload['properties'] = this['properties'].serialize();
  }

  return payload;
};

/**
 * Deserialize the instance to Deployment schema
 *
 * @param {JSON} instance
 *
 */
Deployment.prototype.deserialize = function (instance) {
  if (instance) {
    if (instance['properties']) {
      this['properties'] = new models['DeploymentProperties']().deserialize(instance['properties']);
    }
  }

  return this;
};

module.exports = Deployment;
