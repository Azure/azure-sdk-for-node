/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.11.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the Dependency class.
 * @constructor
 * Deployment dependency information.
 * @member {array} [dependsOn] Gets the list of dependencies.
 * 
 * @member {string} [id] Gets or sets the ID of the dependency.
 * 
 * @member {string} [resourceType] Gets or sets the dependency resource type.
 * 
 * @member {string} [resourceName] Gets or sets the dependency resource name.
 * 
 */
function Dependency(parameters) {
  if (parameters !== null && parameters !== undefined) {
    if (parameters.dependsOn) {
      var tempParametersdependsOn = [];
      parameters.dependsOn.forEach(function(element) {
        if (element) {
          element = new models['BasicDependency'](element);
        }
        tempParametersdependsOn.push(element);
      });
      this.dependsOn = tempParametersdependsOn;
    }
    if (parameters.id !== null && parameters.id !== undefined) {
      this.id = parameters.id;
    }
    if (parameters.resourceType !== null && parameters.resourceType !== undefined) {
      this.resourceType = parameters.resourceType;
    }
    if (parameters.resourceName !== null && parameters.resourceName !== undefined) {
      this.resourceName = parameters.resourceName;
    }
  }    
}


/**
 * Validate the payload against the Dependency schema
 *
 * @param {JSON} payload
 *
 */
Dependency.prototype.serialize = function () {
  var payload = {};
  if (util.isArray(this['dependsOn'])) {
    payload['dependsOn'] = [];
    for (var i = 0; i < this['dependsOn'].length; i++) {
      if (this['dependsOn'][i]) {
        if (payload['dependsOn'] === null || payload['dependsOn'] === undefined) {
          payload['dependsOn'] = {};
        }
        payload['dependsOn'][i] = this['dependsOn'][i].serialize();
      }
    }
  }

  if (this['id'] !== null && this['id'] !== undefined) {
    if (typeof this['id'].valueOf() !== 'string') {
      throw new Error('this[\'id\'] must be of type string.');
    }
    payload['id'] = this['id'];
  }

  if (this['resourceType'] !== null && this['resourceType'] !== undefined) {
    if (typeof this['resourceType'].valueOf() !== 'string') {
      throw new Error('this[\'resourceType\'] must be of type string.');
    }
    payload['resourceType'] = this['resourceType'];
  }

  if (this['resourceName'] !== null && this['resourceName'] !== undefined) {
    if (typeof this['resourceName'].valueOf() !== 'string') {
      throw new Error('this[\'resourceName\'] must be of type string.');
    }
    payload['resourceName'] = this['resourceName'];
  }

  return payload;
};

/**
 * Deserialize the instance to Dependency schema
 *
 * @param {JSON} instance
 *
 */
Dependency.prototype.deserialize = function (instance) {
  if (instance) {
    if (instance['dependsOn']) {
      var tempInstancedependsOn = [];
      instance['dependsOn'].forEach(function(element1) {
        if (element1) {
          element1 = new models['BasicDependency']().deserialize(element1);
        }
        tempInstancedependsOn.push(element1);
      });
      this['dependsOn'] = tempInstancedependsOn;
    }

    if (instance['id'] !== null && instance['id'] !== undefined) {
      this['id'] = instance['id'];
    }

    if (instance['resourceType'] !== null && instance['resourceType'] !== undefined) {
      this['resourceType'] = instance['resourceType'];
    }

    if (instance['resourceName'] !== null && instance['resourceName'] !== undefined) {
      this['resourceName'] = instance['resourceName'];
    }
  }

  return this;
};

module.exports = Dependency;
