/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.11.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

/**
 * @class
 * Initializes a new instance of the DeploymentProperties class.
 * @constructor
 * Deployment properties.
 * @member {object} [template] Gets or sets the template content. Use only one
 * of Template or TemplateLink.
 * 
 * @member {object} [templateLink] Gets or sets the URI referencing the
 * template. Use only one of Template or TemplateLink.
 * 
 * @member {string} [templateLink.uri] URI referencing the template.
 * 
 * @member {string} [templateLink.contentVersion] If included it must match
 * the ContentVersion in the template.
 * 
 * @member {object} [parameters] Deployment parameters. Use only one of
 * Parameters or ParametersLink.
 * 
 * @member {object} [parametersLink] Gets or sets the URI referencing the
 * parameters. Use only one of Parameters or ParametersLink.
 * 
 * @member {string} [parametersLink.uri] URI referencing the template.
 * 
 * @member {string} [parametersLink.contentVersion] If included it must match
 * the ContentVersion in the template.
 * 
 * @member {string} [mode] Gets or sets the deployment mode. Possible values
 * for this property include: 'Incremental'.
 * 
 */
function DeploymentProperties(parameters) {
  if (parameters !== null && parameters !== undefined) {
    if (parameters.template !== null && parameters.template !== undefined) {
      this.template = parameters.template;
    }
    if (parameters.templateLink) {
      this.templateLink = new models['TemplateLink'](parameters.templateLink);
    }
    if (parameters.parameters !== null && parameters.parameters !== undefined) {
      this.parameters = parameters.parameters;
    }
    if (parameters.parametersLink) {
      this.parametersLink = new models['ParametersLink'](parameters.parametersLink);
    }
    if (parameters.mode !== null && parameters.mode !== undefined) {
      this.mode = parameters.mode;
    }
  }    
}


/**
 * Validate the payload against the DeploymentProperties schema
 *
 * @param {JSON} payload
 *
 */
DeploymentProperties.prototype.serialize = function () {
  var payload = {};
  if (this['template'] !== null && this['template'] !== undefined) {
    if (typeof this['template'] !== 'object') {
      throw new Error('this[\'template\'] must be of type object.');
    }
    payload['template'] = this['template'];
  }

  if (this['templateLink']) {
    payload['templateLink'] = this['templateLink'].serialize();
  }

  if (this['parameters'] !== null && this['parameters'] !== undefined) {
    if (typeof this['parameters'] !== 'object') {
      throw new Error('this[\'parameters\'] must be of type object.');
    }
    payload['parameters'] = this['parameters'];
  }

  if (this['parametersLink']) {
    payload['parametersLink'] = this['parametersLink'].serialize();
  }

  if (this['mode'] !== null && this['mode'] !== undefined) {
    var allowedValues = [ 'Incremental' ];
    var thismode = this['mode'];
    if (!allowedValues.some( function(item) { return item === thismode; })) {
      throw new Error(this['mode'] + ' is not a valid value. The valid values are: ' + allowedValues);
    }
    payload['mode'] = this['mode'];
  }

  return payload;
};

/**
 * Deserialize the instance to DeploymentProperties schema
 *
 * @param {JSON} instance
 *
 */
DeploymentProperties.prototype.deserialize = function (instance) {
  if (instance) {
    if (instance['template'] !== null && instance['template'] !== undefined) {
      this['template'] = instance['template'];
    }

    if (instance['templateLink']) {
      this['templateLink'] = new models['TemplateLink']().deserialize(instance['templateLink']);
    }

    if (instance['parameters'] !== null && instance['parameters'] !== undefined) {
      this['parameters'] = instance['parameters'];
    }

    if (instance['parametersLink']) {
      this['parametersLink'] = new models['ParametersLink']().deserialize(instance['parametersLink']);
    }

    if (instance['mode'] !== null && instance['mode'] !== undefined) {
      this['mode'] = instance['mode'];
    }
  }

  return this;
};

module.exports = DeploymentProperties;
