/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.11.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var util = require('util');

/**
 * @class
 * Initializes a new instance of the ResourcesMoveInfo class.
 * @constructor
 * Parameters of move resources.
 * @member {array} [resources] Gets or sets the ids of the resources.
 * 
 * @member {string} [targetResourceGroup] The target resource group.
 * 
 */
function ResourcesMoveInfo(parameters) {
  if (parameters !== null && parameters !== undefined) {
    if (parameters.resources) {
      var tempParametersresources = [];
      parameters.resources.forEach(function(element) {
        if (element !== null && element !== undefined) {
          element = element;
        }
        tempParametersresources.push(element);
      });
      this.resources = tempParametersresources;
    }
    if (parameters.targetResourceGroup !== null && parameters.targetResourceGroup !== undefined) {
      this.targetResourceGroup = parameters.targetResourceGroup;
    }
  }    
}


/**
 * Validate the payload against the ResourcesMoveInfo schema
 *
 * @param {JSON} payload
 *
 */
ResourcesMoveInfo.prototype.serialize = function () {
  var payload = {};
  if (util.isArray(this['resources'])) {
    payload['resources'] = [];
    for (var i = 0; i < this['resources'].length; i++) {
      if (this['resources'][i] !== null && this['resources'][i] !== undefined) {
        if (typeof this['resources'][i].valueOf() !== 'string') {
          throw new Error('this[\'resources\'][i] must be of type string.');
        }
        if (payload['resources'] === null || payload['resources'] === undefined) {
          payload['resources'] = {};
        }
        payload['resources'][i] = this['resources'][i];
      }
    }
  }

  if (this['targetResourceGroup'] !== null && this['targetResourceGroup'] !== undefined) {
    if (typeof this['targetResourceGroup'].valueOf() !== 'string') {
      throw new Error('this[\'targetResourceGroup\'] must be of type string.');
    }
    payload['targetResourceGroup'] = this['targetResourceGroup'];
  }

  return payload;
};

/**
 * Deserialize the instance to ResourcesMoveInfo schema
 *
 * @param {JSON} instance
 *
 */
ResourcesMoveInfo.prototype.deserialize = function (instance) {
  if (instance) {
    if (instance['resources']) {
      var tempInstanceresources = [];
      instance['resources'].forEach(function(element1) {
        if (element1 !== null && element1 !== undefined) {
          element1 = element1;
        }
        tempInstanceresources.push(element1);
      });
      this['resources'] = tempInstanceresources;
    }

    if (instance['targetResourceGroup'] !== null && instance['targetResourceGroup'] !== undefined) {
      this['targetResourceGroup'] = instance['targetResourceGroup'];
    }
  }

  return this;
};

module.exports = ResourcesMoveInfo;
