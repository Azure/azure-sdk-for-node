/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.11.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

/**
 * @class
 * Initializes a new instance of the ManagementLock class.
 * @constructor
 * Management lock information.
 * @member {object} [properties] Gets or sets the properties of the lock.
 * 
 * @member {string} [properties.level] Gets or sets the lock level of the
 * management lock. Possible values for this property include:
 * 'NotSpecified', 'CanNotDelete', 'ReadOnly'.
 * 
 * @member {string} [properties.notes] Gets or sets the notes of the
 * management lock.
 * 
 * @member {string} [id] Gets the Id of the lock.
 * 
 * @member {string} [type] Gets the type of the lock.
 * 
 * @member {string} [name] Gets the name of the lock.
 * 
 */
function ManagementLock(parameters) {
  if (parameters !== null && parameters !== undefined) {
    if (parameters.properties) {
      this.properties = new models['ManagementLockProperties'](parameters.properties);
    }
    if (parameters.id !== null && parameters.id !== undefined) {
      this.id = parameters.id;
    }
    if (parameters.type !== null && parameters.type !== undefined) {
      this.type = parameters.type;
    }
    if (parameters.name !== null && parameters.name !== undefined) {
      this.name = parameters.name;
    }
  }    
}


/**
 * Validate the payload against the ManagementLock schema
 *
 * @param {JSON} payload
 *
 */
ManagementLock.prototype.serialize = function () {
  var payload = {};
  if (this['properties']) {
    payload['properties'] = this['properties'].serialize();
  }

  if (this['id'] !== null && this['id'] !== undefined) {
    if (typeof this['id'].valueOf() !== 'string') {
      throw new Error('this[\'id\'] must be of type string.');
    }
    payload['id'] = this['id'];
  }

  if (this['type'] !== null && this['type'] !== undefined) {
    if (typeof this['type'].valueOf() !== 'string') {
      throw new Error('this[\'type\'] must be of type string.');
    }
    payload['type'] = this['type'];
  }

  if (this['name'] !== null && this['name'] !== undefined) {
    if (typeof this['name'].valueOf() !== 'string') {
      throw new Error('this[\'name\'] must be of type string.');
    }
    payload['name'] = this['name'];
  }

  return payload;
};

/**
 * Deserialize the instance to ManagementLock schema
 *
 * @param {JSON} instance
 *
 */
ManagementLock.prototype.deserialize = function (instance) {
  if (instance) {
    if (instance['properties']) {
      this['properties'] = new models['ManagementLockProperties']().deserialize(instance['properties']);
    }

    if (instance['id'] !== null && instance['id'] !== undefined) {
      this['id'] = instance['id'];
    }

    if (instance['type'] !== null && instance['type'] !== undefined) {
      this['type'] = instance['type'];
    }

    if (instance['name'] !== null && instance['name'] !== undefined) {
      this['name'] = instance['name'];
    }
  }

  return this;
};

module.exports = ManagementLock;
