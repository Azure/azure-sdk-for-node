/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * The policy definition.
 *
 * @extends models['BaseResource']
 */
class PolicyDefinition extends models['BaseResource'] {
  /**
   * Create a PolicyDefinition.
   * @property {string} [policyType] The type of policy definition. Possible
   * values are NotSpecified, BuiltIn, and Custom. Possible values include:
   * 'NotSpecified', 'BuiltIn', 'Custom'
   * @property {string} [mode] The policy definition mode. Possible values are
   * NotSpecified, Indexed, and All. Possible values include: 'NotSpecified',
   * 'Indexed', 'All'
   * @property {string} [displayName] The display name of the policy
   * definition.
   * @property {string} [description] The policy definition description.
   * @property {object} [policyRule] The policy rule.
   * @property {object} [metadata] The policy definition metadata.
   * @property {object} [parameters] Required if a parameter is used in policy
   * rule.
   * @property {string} [id] The ID of the policy definition.
   * @property {string} [name] The name of the policy definition.
   * @property {string} [type] The type of the resource
   * (Microsoft.Authorization/policyDefinitions).
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of PolicyDefinition
   *
   * @returns {object} metadata of PolicyDefinition
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'PolicyDefinition',
      type: {
        name: 'Composite',
        className: 'PolicyDefinition',
        modelProperties: {
          policyType: {
            required: false,
            serializedName: 'properties.policyType',
            type: {
              name: 'String'
            }
          },
          mode: {
            required: false,
            serializedName: 'properties.mode',
            type: {
              name: 'String'
            }
          },
          displayName: {
            required: false,
            serializedName: 'properties.displayName',
            type: {
              name: 'String'
            }
          },
          description: {
            required: false,
            serializedName: 'properties.description',
            type: {
              name: 'String'
            }
          },
          policyRule: {
            required: false,
            serializedName: 'properties.policyRule',
            type: {
              name: 'Object'
            }
          },
          metadata: {
            required: false,
            serializedName: 'properties.metadata',
            type: {
              name: 'Object'
            }
          },
          parameters: {
            required: false,
            serializedName: 'properties.parameters',
            type: {
              name: 'Object'
            }
          },
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = PolicyDefinition;
