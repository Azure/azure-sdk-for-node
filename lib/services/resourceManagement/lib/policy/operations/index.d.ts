/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback } from 'ms-rest';
import * as models from '../models';


/**
 * @class
 * PolicyAssignments
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the PolicyClient.
 */
export interface PolicyAssignments {

    /**
     * Deletes a policy assignment.
     *
     * @param {string} scope The scope of the policy assignment.
     * 
     * @param {string} policyAssignmentName The name of the policy assignment to
     * delete.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteMethod(scope: string, policyAssignmentName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PolicyAssignment>): void;
    deleteMethod(scope: string, policyAssignmentName: string, callback: ServiceCallback<models.PolicyAssignment>): void;

    /**
     * @summary Creates a policy assignment.
     *
     * Policy assignments are inherited by child resources. For example, when you
     * apply a policy to a resource group that policy is assigned to all
     * resources in the group.
     *
     * @param {string} scope The scope of the policy assignment.
     * 
     * @param {string} policyAssignmentName The name of the policy assignment.
     * 
     * @param {object} parameters Parameters for the policy assignment.
     * 
     * @param {string} [parameters.displayName] The display name of the policy
     * assignment.
     * 
     * @param {string} [parameters.policyDefinitionId] The ID of the policy
     * definition.
     * 
     * @param {string} [parameters.scope] The scope for the policy assignment.
     * 
     * @param {string} [parameters.id] The ID of the policy assignment.
     * 
     * @param {string} [parameters.type] The type of the policy assignment.
     * 
     * @param {string} [parameters.name] The name of the policy assignment.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    create(scope: string, policyAssignmentName: string, parameters: models.PolicyAssignment, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PolicyAssignment>): void;
    create(scope: string, policyAssignmentName: string, parameters: models.PolicyAssignment, callback: ServiceCallback<models.PolicyAssignment>): void;

    /**
     * Gets a policy assignment.
     *
     * @param {string} scope The scope of the policy assignment.
     * 
     * @param {string} policyAssignmentName The name of the policy assignment to
     * get.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(scope: string, policyAssignmentName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PolicyAssignment>): void;
    get(scope: string, policyAssignmentName: string, callback: ServiceCallback<models.PolicyAssignment>): void;

    /**
     * Gets policy assignments for the resource group.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains policy assignments.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.filter] The filter to apply on the operation.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listForResourceGroup(resourceGroupName: string, options: { filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PolicyAssignmentListResult>): void;
    listForResourceGroup(resourceGroupName: string, callback: ServiceCallback<models.PolicyAssignmentListResult>): void;

    /**
     * Gets policy assignments for a resource.
     *
     * @param {string} resourceGroupName The name of the resource group containing
     * the resource. The name is case insensitive.
     * 
     * @param {string} resourceProviderNamespace The namespace of the resource
     * provider.
     * 
     * @param {string} parentResourcePath The parent resource path.
     * 
     * @param {string} resourceType The resource type.
     * 
     * @param {string} resourceName The name of the resource with policy
     * assignments.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.filter] The filter to apply on the operation.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listForResource(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, options: { filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PolicyAssignmentListResult>): void;
    listForResource(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, callback: ServiceCallback<models.PolicyAssignmentListResult>): void;

    /**
     * Gets all the policy assignments for a subscription.
     *
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.filter] The filter to apply on the operation.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    list(options: { filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PolicyAssignmentListResult>): void;
    list(callback: ServiceCallback<models.PolicyAssignmentListResult>): void;

    /**
     * @summary Deletes a policy assignment by ID.
     *
     * When providing a scope for the assigment, use
     * '/subscriptions/{subscription-id}/' for subscriptions,
     * '/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}'
     * for resource groups, and
     * '/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/providers/{resource-provider-namespace}/{resource-type}/{resource-name}'
     * for resources.
     *
     * @param {string} policyAssignmentId The ID of the policy assignment to
     * delete. Use the format
     * '/{scope}/providers/Microsoft.Authorization/policyAssignments/{policy-assignment-name}'.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteById(policyAssignmentId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PolicyAssignment>): void;
    deleteById(policyAssignmentId: string, callback: ServiceCallback<models.PolicyAssignment>): void;

    /**
     * @summary Creates a policy assignment by ID.
     *
     * Policy assignments are inherited by child resources. For example, when you
     * apply a policy to a resource group that policy is assigned to all
     * resources in the group. When providing a scope for the assigment, use
     * '/subscriptions/{subscription-id}/' for subscriptions,
     * '/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}'
     * for resource groups, and
     * '/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/providers/{resource-provider-namespace}/{resource-type}/{resource-name}'
     * for resources.
     *
     * @param {string} policyAssignmentId The ID of the policy assignment to
     * create. Use the format
     * '/{scope}/providers/Microsoft.Authorization/policyAssignments/{policy-assignment-name}'.
     * 
     * @param {object} parameters Parameters for policy assignment.
     * 
     * @param {string} [parameters.displayName] The display name of the policy
     * assignment.
     * 
     * @param {string} [parameters.policyDefinitionId] The ID of the policy
     * definition.
     * 
     * @param {string} [parameters.scope] The scope for the policy assignment.
     * 
     * @param {string} [parameters.id] The ID of the policy assignment.
     * 
     * @param {string} [parameters.type] The type of the policy assignment.
     * 
     * @param {string} [parameters.name] The name of the policy assignment.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createById(policyAssignmentId: string, parameters: models.PolicyAssignment, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PolicyAssignment>): void;
    createById(policyAssignmentId: string, parameters: models.PolicyAssignment, callback: ServiceCallback<models.PolicyAssignment>): void;

    /**
     * @summary Gets a policy assignment by ID.
     *
     * When providing a scope for the assigment, use
     * '/subscriptions/{subscription-id}/' for subscriptions,
     * '/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}'
     * for resource groups, and
     * '/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/providers/{resource-provider-namespace}/{resource-type}/{resource-name}'
     * for resources.
     *
     * @param {string} policyAssignmentId The ID of the policy assignment to get.
     * Use the format
     * '/{scope}/providers/Microsoft.Authorization/policyAssignments/{policy-assignment-name}'.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getById(policyAssignmentId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PolicyAssignment>): void;
    getById(policyAssignmentId: string, callback: ServiceCallback<models.PolicyAssignment>): void;

    /**
     * Gets policy assignments for the resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listForResourceGroupNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PolicyAssignmentListResult>): void;
    listForResourceGroupNext(nextPageLink: string, callback: ServiceCallback<models.PolicyAssignmentListResult>): void;

    /**
     * Gets policy assignments for a resource.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listForResourceNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PolicyAssignmentListResult>): void;
    listForResourceNext(nextPageLink: string, callback: ServiceCallback<models.PolicyAssignmentListResult>): void;

    /**
     * Gets all the policy assignments for a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PolicyAssignmentListResult>): void;
    listNext(nextPageLink: string, callback: ServiceCallback<models.PolicyAssignmentListResult>): void;
}

/**
 * @class
 * PolicyDefinitions
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the PolicyClient.
 */
export interface PolicyDefinitions {

    /**
     * Creates or updates a policy definition.
     *
     * @param {string} policyDefinitionName The name of the policy definition to
     * create.
     * 
     * @param {object} parameters The policy definition properties.
     * 
     * @param {string} [parameters.policyType] The type of policy definition.
     * Possible values are NotSpecified, BuiltIn, and Custom. Possible values
     * include: 'NotSpecified', 'BuiltIn', 'Custom'
     * 
     * @param {string} [parameters.displayName] The display name of the policy
     * definition.
     * 
     * @param {string} [parameters.description] The policy definition description.
     * 
     * @param {object} [parameters.policyRule] The policy rule.
     * 
     * @param {string} [parameters.id] The ID of the policy definition.
     * 
     * @param {string} [parameters.name] The name of the policy definition. If you
     * do not specify a value for name, the value is inferred from the name value
     * in the request URI.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createOrUpdate(policyDefinitionName: string, parameters: models.PolicyDefinition, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PolicyDefinition>): void;
    createOrUpdate(policyDefinitionName: string, parameters: models.PolicyDefinition, callback: ServiceCallback<models.PolicyDefinition>): void;

    /**
     * Deletes a policy definition.
     *
     * @param {string} policyDefinitionName The name of the policy definition to
     * delete.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteMethod(policyDefinitionName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    deleteMethod(policyDefinitionName: string, callback: ServiceCallback<void>): void;

    /**
     * Gets the policy definition.
     *
     * @param {string} policyDefinitionName The name of the policy definition to
     * get.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(policyDefinitionName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PolicyDefinition>): void;
    get(policyDefinitionName: string, callback: ServiceCallback<models.PolicyDefinition>): void;

    /**
     * Gets all the policy definitions for a subscription.
     *
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.filter] The filter to apply on the operation.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    list(options: { filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PolicyDefinitionListResult>): void;
    list(callback: ServiceCallback<models.PolicyDefinitionListResult>): void;

    /**
     * Gets all the policy definitions for a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PolicyDefinitionListResult>): void;
    listNext(nextPageLink: string, callback: ServiceCallback<models.PolicyDefinitionListResult>): void;
}
