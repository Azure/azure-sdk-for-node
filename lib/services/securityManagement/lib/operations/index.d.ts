/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback, HttpOperationResponse } from 'ms-rest';
import * as models from '../models';


/**
 * @class
 * Pricings
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SecurityCenter.
 */
export interface Pricings {


    /**
     * Security pricing configurations in the subscription
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PricingList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PricingList>>;

    /**
     * Security pricing configurations in the subscription
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PricingList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PricingList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PricingList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PricingList>;
    list(callback: ServiceCallback<models.PricingList>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PricingList>): void;


    /**
     * Security pricing configurations in the resource group
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription. The name is case insensitive.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PricingList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupWithHttpOperationResponse(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PricingList>>;

    /**
     * Security pricing configurations in the resource group
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription. The name is case insensitive.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PricingList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PricingList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PricingList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroup(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PricingList>;
    listByResourceGroup(resourceGroupName: string, callback: ServiceCallback<models.PricingList>): void;
    listByResourceGroup(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PricingList>): void;


    /**
     * Security pricing configuration in the subscriptionSecurity pricing
     * configuration in the subscription
     *
     * @param {string} pricingName name of the pricing configuration
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Pricing>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getSubscriptionPricingWithHttpOperationResponse(pricingName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Pricing>>;

    /**
     * Security pricing configuration in the subscriptionSecurity pricing
     * configuration in the subscription
     *
     * @param {string} pricingName name of the pricing configuration
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Pricing} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Pricing} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Pricing} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getSubscriptionPricing(pricingName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Pricing>;
    getSubscriptionPricing(pricingName: string, callback: ServiceCallback<models.Pricing>): void;
    getSubscriptionPricing(pricingName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Pricing>): void;


    /**
     * Security pricing configuration in the subscription
     *
     * @param {string} pricingName name of the pricing configuration
     *
     * @param {object} pricing Pricing object
     *
     * @param {string} pricing.pricingTier Pricing tier type. Possible values
     * include: 'Free', 'Standard'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Pricing>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateSubscriptionPricingWithHttpOperationResponse(pricingName: string, pricing: models.Pricing, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Pricing>>;

    /**
     * Security pricing configuration in the subscription
     *
     * @param {string} pricingName name of the pricing configuration
     *
     * @param {object} pricing Pricing object
     *
     * @param {string} pricing.pricingTier Pricing tier type. Possible values
     * include: 'Free', 'Standard'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Pricing} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Pricing} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Pricing} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updateSubscriptionPricing(pricingName: string, pricing: models.Pricing, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Pricing>;
    updateSubscriptionPricing(pricingName: string, pricing: models.Pricing, callback: ServiceCallback<models.Pricing>): void;
    updateSubscriptionPricing(pricingName: string, pricing: models.Pricing, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Pricing>): void;


    /**
     * Security pricing configuration in the resource group
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription. The name is case insensitive.
     *
     * @param {string} pricingName name of the pricing configuration
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Pricing>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getResourceGroupPricingWithHttpOperationResponse(resourceGroupName: string, pricingName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Pricing>>;

    /**
     * Security pricing configuration in the resource group
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription. The name is case insensitive.
     *
     * @param {string} pricingName name of the pricing configuration
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Pricing} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Pricing} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Pricing} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getResourceGroupPricing(resourceGroupName: string, pricingName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Pricing>;
    getResourceGroupPricing(resourceGroupName: string, pricingName: string, callback: ServiceCallback<models.Pricing>): void;
    getResourceGroupPricing(resourceGroupName: string, pricingName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Pricing>): void;


    /**
     * Security pricing configuration in the resource group
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription. The name is case insensitive.
     *
     * @param {string} pricingName name of the pricing configuration
     *
     * @param {object} pricing Pricing object
     *
     * @param {string} pricing.pricingTier Pricing tier type. Possible values
     * include: 'Free', 'Standard'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Pricing>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateResourceGroupPricingWithHttpOperationResponse(resourceGroupName: string, pricingName: string, pricing: models.Pricing, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Pricing>>;

    /**
     * Security pricing configuration in the resource group
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription. The name is case insensitive.
     *
     * @param {string} pricingName name of the pricing configuration
     *
     * @param {object} pricing Pricing object
     *
     * @param {string} pricing.pricingTier Pricing tier type. Possible values
     * include: 'Free', 'Standard'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Pricing} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Pricing} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Pricing} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdateResourceGroupPricing(resourceGroupName: string, pricingName: string, pricing: models.Pricing, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Pricing>;
    createOrUpdateResourceGroupPricing(resourceGroupName: string, pricingName: string, pricing: models.Pricing, callback: ServiceCallback<models.Pricing>): void;
    createOrUpdateResourceGroupPricing(resourceGroupName: string, pricingName: string, pricing: models.Pricing, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Pricing>): void;


    /**
     * Security pricing configurations in the subscription
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PricingList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PricingList>>;

    /**
     * Security pricing configurations in the subscription
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PricingList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PricingList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PricingList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PricingList>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.PricingList>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PricingList>): void;


    /**
     * Security pricing configurations in the resource group
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PricingList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PricingList>>;

    /**
     * Security pricing configurations in the resource group
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PricingList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PricingList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PricingList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroupNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PricingList>;
    listByResourceGroupNext(nextPageLink: string, callback: ServiceCallback<models.PricingList>): void;
    listByResourceGroupNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PricingList>): void;
}

/**
 * @class
 * SecurityContacts
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SecurityCenter.
 */
export interface SecurityContacts {


    /**
     * Security contact configurations for the subscription
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SecurityContactList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SecurityContactList>>;

    /**
     * Security contact configurations for the subscription
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SecurityContactList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SecurityContactList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SecurityContactList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SecurityContactList>;
    list(callback: ServiceCallback<models.SecurityContactList>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SecurityContactList>): void;


    /**
     * Security contact configurations for the subscription
     *
     * @param {string} securityContactName Name of the security contact object
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SecurityContact>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(securityContactName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SecurityContact>>;

    /**
     * Security contact configurations for the subscription
     *
     * @param {string} securityContactName Name of the security contact object
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SecurityContact} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SecurityContact} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SecurityContact} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(securityContactName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SecurityContact>;
    get(securityContactName: string, callback: ServiceCallback<models.SecurityContact>): void;
    get(securityContactName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SecurityContact>): void;


    /**
     * Security contact configurations for the subscription
     *
     * @param {string} securityContactName Name of the security contact object
     *
     * @param {object} securityContact Security contact object
     *
     * @param {string} securityContact.email The email of this security contact
     *
     * @param {string} [securityContact.phone] The phone number of this security
     * contact
     *
     * @param {string} securityContact.alertNotifications Whether to send security
     * alerts notifications to the security contact. Possible values include: 'On',
     * 'Off'
     *
     * @param {string} securityContact.alertsToAdmins Whether to send security
     * alerts notifications to subscription admins. Possible values include: 'On',
     * 'Off'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SecurityContact>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createWithHttpOperationResponse(securityContactName: string, securityContact: models.SecurityContact, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SecurityContact>>;

    /**
     * Security contact configurations for the subscription
     *
     * @param {string} securityContactName Name of the security contact object
     *
     * @param {object} securityContact Security contact object
     *
     * @param {string} securityContact.email The email of this security contact
     *
     * @param {string} [securityContact.phone] The phone number of this security
     * contact
     *
     * @param {string} securityContact.alertNotifications Whether to send security
     * alerts notifications to the security contact. Possible values include: 'On',
     * 'Off'
     *
     * @param {string} securityContact.alertsToAdmins Whether to send security
     * alerts notifications to subscription admins. Possible values include: 'On',
     * 'Off'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SecurityContact} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SecurityContact} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SecurityContact} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    create(securityContactName: string, securityContact: models.SecurityContact, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SecurityContact>;
    create(securityContactName: string, securityContact: models.SecurityContact, callback: ServiceCallback<models.SecurityContact>): void;
    create(securityContactName: string, securityContact: models.SecurityContact, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SecurityContact>): void;


    /**
     * Security contact configurations for the subscription
     *
     * @param {string} securityContactName Name of the security contact object
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(securityContactName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Security contact configurations for the subscription
     *
     * @param {string} securityContactName Name of the security contact object
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(securityContactName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(securityContactName: string, callback: ServiceCallback<void>): void;
    deleteMethod(securityContactName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Security contact configurations for the subscription
     *
     * @param {string} securityContactName Name of the security contact object
     *
     * @param {object} securityContact Security contact object
     *
     * @param {string} securityContact.email The email of this security contact
     *
     * @param {string} [securityContact.phone] The phone number of this security
     * contact
     *
     * @param {string} securityContact.alertNotifications Whether to send security
     * alerts notifications to the security contact. Possible values include: 'On',
     * 'Off'
     *
     * @param {string} securityContact.alertsToAdmins Whether to send security
     * alerts notifications to subscription admins. Possible values include: 'On',
     * 'Off'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SecurityContact>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(securityContactName: string, securityContact: models.SecurityContact, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SecurityContact>>;

    /**
     * Security contact configurations for the subscription
     *
     * @param {string} securityContactName Name of the security contact object
     *
     * @param {object} securityContact Security contact object
     *
     * @param {string} securityContact.email The email of this security contact
     *
     * @param {string} [securityContact.phone] The phone number of this security
     * contact
     *
     * @param {string} securityContact.alertNotifications Whether to send security
     * alerts notifications to the security contact. Possible values include: 'On',
     * 'Off'
     *
     * @param {string} securityContact.alertsToAdmins Whether to send security
     * alerts notifications to subscription admins. Possible values include: 'On',
     * 'Off'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SecurityContact} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SecurityContact} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SecurityContact} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(securityContactName: string, securityContact: models.SecurityContact, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SecurityContact>;
    update(securityContactName: string, securityContact: models.SecurityContact, callback: ServiceCallback<models.SecurityContact>): void;
    update(securityContactName: string, securityContact: models.SecurityContact, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SecurityContact>): void;


    /**
     * Security contact configurations for the subscription
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SecurityContactList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SecurityContactList>>;

    /**
     * Security contact configurations for the subscription
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SecurityContactList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SecurityContactList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SecurityContactList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SecurityContactList>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.SecurityContactList>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SecurityContactList>): void;
}

/**
 * @class
 * WorkspaceSettings
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SecurityCenter.
 */
export interface WorkspaceSettings {


    /**
     * Settings about where we should store your security data and logs
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<WorkspaceSettingList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.WorkspaceSettingList>>;

    /**
     * Settings about where we should store your security data and logs
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {WorkspaceSettingList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {WorkspaceSettingList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link WorkspaceSettingList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.WorkspaceSettingList>;
    list(callback: ServiceCallback<models.WorkspaceSettingList>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WorkspaceSettingList>): void;


    /**
     * Settings about where we should store your security data and logs
     *
     * @param {string} workspaceSettingName Name of the security setting
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<WorkspaceSetting>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(workspaceSettingName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.WorkspaceSetting>>;

    /**
     * Settings about where we should store your security data and logs
     *
     * @param {string} workspaceSettingName Name of the security setting
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {WorkspaceSetting} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {WorkspaceSetting} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link WorkspaceSetting} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(workspaceSettingName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.WorkspaceSetting>;
    get(workspaceSettingName: string, callback: ServiceCallback<models.WorkspaceSetting>): void;
    get(workspaceSettingName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WorkspaceSetting>): void;


    /**
     * creating settings about where we should store your security data and logs
     *
     * @param {string} workspaceSettingName Name of the security setting
     *
     * @param {object} workspaceSetting Security data setting object
     *
     * @param {string} workspaceSetting.workspaceId The full Azure ID of the
     * workspace to save the data in
     *
     * @param {string} workspaceSetting.scope All the VMs in this scope will send
     * their security data to the mentioned workspace unless overridden by a
     * setting with more specific scope
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<WorkspaceSetting>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createWithHttpOperationResponse(workspaceSettingName: string, workspaceSetting: models.WorkspaceSetting, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.WorkspaceSetting>>;

    /**
     * creating settings about where we should store your security data and logs
     *
     * @param {string} workspaceSettingName Name of the security setting
     *
     * @param {object} workspaceSetting Security data setting object
     *
     * @param {string} workspaceSetting.workspaceId The full Azure ID of the
     * workspace to save the data in
     *
     * @param {string} workspaceSetting.scope All the VMs in this scope will send
     * their security data to the mentioned workspace unless overridden by a
     * setting with more specific scope
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {WorkspaceSetting} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {WorkspaceSetting} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link WorkspaceSetting} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    create(workspaceSettingName: string, workspaceSetting: models.WorkspaceSetting, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.WorkspaceSetting>;
    create(workspaceSettingName: string, workspaceSetting: models.WorkspaceSetting, callback: ServiceCallback<models.WorkspaceSetting>): void;
    create(workspaceSettingName: string, workspaceSetting: models.WorkspaceSetting, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WorkspaceSetting>): void;


    /**
     * Settings about where we should store your security data and logs
     *
     * @param {string} workspaceSettingName Name of the security setting
     *
     * @param {object} workspaceSetting Security data setting object
     *
     * @param {string} workspaceSetting.workspaceId The full Azure ID of the
     * workspace to save the data in
     *
     * @param {string} workspaceSetting.scope All the VMs in this scope will send
     * their security data to the mentioned workspace unless overridden by a
     * setting with more specific scope
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<WorkspaceSetting>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(workspaceSettingName: string, workspaceSetting: models.WorkspaceSetting, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.WorkspaceSetting>>;

    /**
     * Settings about where we should store your security data and logs
     *
     * @param {string} workspaceSettingName Name of the security setting
     *
     * @param {object} workspaceSetting Security data setting object
     *
     * @param {string} workspaceSetting.workspaceId The full Azure ID of the
     * workspace to save the data in
     *
     * @param {string} workspaceSetting.scope All the VMs in this scope will send
     * their security data to the mentioned workspace unless overridden by a
     * setting with more specific scope
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {WorkspaceSetting} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {WorkspaceSetting} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link WorkspaceSetting} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(workspaceSettingName: string, workspaceSetting: models.WorkspaceSetting, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.WorkspaceSetting>;
    update(workspaceSettingName: string, workspaceSetting: models.WorkspaceSetting, callback: ServiceCallback<models.WorkspaceSetting>): void;
    update(workspaceSettingName: string, workspaceSetting: models.WorkspaceSetting, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WorkspaceSetting>): void;


    /**
     * Deletes the custom workspace settings for this subscription. new VMs will
     * report to the default workspace
     *
     * @param {string} workspaceSettingName Name of the security setting
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(workspaceSettingName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the custom workspace settings for this subscription. new VMs will
     * report to the default workspace
     *
     * @param {string} workspaceSettingName Name of the security setting
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(workspaceSettingName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(workspaceSettingName: string, callback: ServiceCallback<void>): void;
    deleteMethod(workspaceSettingName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Settings about where we should store your security data and logs
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<WorkspaceSettingList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.WorkspaceSettingList>>;

    /**
     * Settings about where we should store your security data and logs
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {WorkspaceSettingList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {WorkspaceSettingList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link WorkspaceSettingList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.WorkspaceSettingList>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.WorkspaceSettingList>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WorkspaceSettingList>): void;
}

/**
 * @class
 * AutoProvisioningSettings
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SecurityCenter.
 */
export interface AutoProvisioningSettings {


    /**
     * Exposes the auto provisioning settings of the subscriptions
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AutoProvisioningSettingList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AutoProvisioningSettingList>>;

    /**
     * Exposes the auto provisioning settings of the subscriptions
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AutoProvisioningSettingList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AutoProvisioningSettingList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AutoProvisioningSettingList} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AutoProvisioningSettingList>;
    list(callback: ServiceCallback<models.AutoProvisioningSettingList>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AutoProvisioningSettingList>): void;


    /**
     * Details of a specific setting
     *
     * @param {string} settingName Auto provisioning setting key
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AutoProvisioningSetting>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(settingName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AutoProvisioningSetting>>;

    /**
     * Details of a specific setting
     *
     * @param {string} settingName Auto provisioning setting key
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AutoProvisioningSetting} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AutoProvisioningSetting} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AutoProvisioningSetting} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(settingName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AutoProvisioningSetting>;
    get(settingName: string, callback: ServiceCallback<models.AutoProvisioningSetting>): void;
    get(settingName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AutoProvisioningSetting>): void;


    /**
     * Details of a specific setting
     *
     * @param {string} settingName Auto provisioning setting key
     *
     * @param {object} setting Auto provisioning setting key
     *
     * @param {string} setting.autoProvision Describes what kind of security agent
     * provisioning action to take. Possible values include: 'On', 'Off'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AutoProvisioningSetting>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createWithHttpOperationResponse(settingName: string, setting: models.AutoProvisioningSetting, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AutoProvisioningSetting>>;

    /**
     * Details of a specific setting
     *
     * @param {string} settingName Auto provisioning setting key
     *
     * @param {object} setting Auto provisioning setting key
     *
     * @param {string} setting.autoProvision Describes what kind of security agent
     * provisioning action to take. Possible values include: 'On', 'Off'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AutoProvisioningSetting} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AutoProvisioningSetting} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AutoProvisioningSetting} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    create(settingName: string, setting: models.AutoProvisioningSetting, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AutoProvisioningSetting>;
    create(settingName: string, setting: models.AutoProvisioningSetting, callback: ServiceCallback<models.AutoProvisioningSetting>): void;
    create(settingName: string, setting: models.AutoProvisioningSetting, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AutoProvisioningSetting>): void;


    /**
     * Exposes the auto provisioning settings of the subscriptions
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AutoProvisioningSettingList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AutoProvisioningSettingList>>;

    /**
     * Exposes the auto provisioning settings of the subscriptions
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AutoProvisioningSettingList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AutoProvisioningSettingList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AutoProvisioningSettingList} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AutoProvisioningSettingList>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.AutoProvisioningSettingList>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AutoProvisioningSettingList>): void;
}

/**
 * @class
 * Compliances
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SecurityCenter.
 */
export interface Compliances {


    /**
     * The Compliance scores of the specific management group.
     *
     * @param {string} scope Scope of the query, can be subscription
     * (/subscriptions/0b06d9ea-afe6-4779-bd59-30e5c2d9d13f) or management group
     * (/providers/Microsoft.Management/managementGroups/mgName).
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ComplianceList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(scope: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ComplianceList>>;

    /**
     * The Compliance scores of the specific management group.
     *
     * @param {string} scope Scope of the query, can be subscription
     * (/subscriptions/0b06d9ea-afe6-4779-bd59-30e5c2d9d13f) or management group
     * (/providers/Microsoft.Management/managementGroups/mgName).
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ComplianceList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ComplianceList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ComplianceList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(scope: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ComplianceList>;
    list(scope: string, callback: ServiceCallback<models.ComplianceList>): void;
    list(scope: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ComplianceList>): void;


    /**
     * Details of a specific Compliance.
     *
     * @param {string} scope Scope of the query, can be subscription
     * (/subscriptions/0b06d9ea-afe6-4779-bd59-30e5c2d9d13f) or management group
     * (/providers/Microsoft.Management/managementGroups/mgName).
     *
     * @param {string} complianceName name of the Compliance
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Compliance>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(scope: string, complianceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Compliance>>;

    /**
     * Details of a specific Compliance.
     *
     * @param {string} scope Scope of the query, can be subscription
     * (/subscriptions/0b06d9ea-afe6-4779-bd59-30e5c2d9d13f) or management group
     * (/providers/Microsoft.Management/managementGroups/mgName).
     *
     * @param {string} complianceName name of the Compliance
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Compliance} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Compliance} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Compliance} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(scope: string, complianceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Compliance>;
    get(scope: string, complianceName: string, callback: ServiceCallback<models.Compliance>): void;
    get(scope: string, complianceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Compliance>): void;


    /**
     * The Compliance scores of the specific management group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ComplianceList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ComplianceList>>;

    /**
     * The Compliance scores of the specific management group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ComplianceList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ComplianceList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ComplianceList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ComplianceList>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.ComplianceList>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ComplianceList>): void;
}

/**
 * @class
 * AdvancedThreatProtection
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SecurityCenter.
 */
export interface AdvancedThreatProtection {


    /**
     * Gets the Advanced Threat Protection settings for the specified resource.
     *
     * @param {string} resourceId The identifier of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AdvancedThreatProtectionSetting>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AdvancedThreatProtectionSetting>>;

    /**
     * Gets the Advanced Threat Protection settings for the specified resource.
     *
     * @param {string} resourceId The identifier of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AdvancedThreatProtectionSetting} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AdvancedThreatProtectionSetting} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AdvancedThreatProtectionSetting} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AdvancedThreatProtectionSetting>;
    get(resourceId: string, callback: ServiceCallback<models.AdvancedThreatProtectionSetting>): void;
    get(resourceId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AdvancedThreatProtectionSetting>): void;


    /**
     * Creates or updates the Advanced Threat Protection settings on a specified
     * resource.
     *
     * @param {string} resourceId The identifier of the resource.
     *
     * @param {object} advancedThreatProtectionSetting Advanced Threat Protection
     * Settings
     *
     * @param {boolean} [advancedThreatProtectionSetting.isEnabled] Indicates
     * whether Advanced Threat Protection is enabled.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AdvancedThreatProtectionSetting>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createWithHttpOperationResponse(resourceId: string, advancedThreatProtectionSetting: models.AdvancedThreatProtectionSetting, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AdvancedThreatProtectionSetting>>;

    /**
     * Creates or updates the Advanced Threat Protection settings on a specified
     * resource.
     *
     * @param {string} resourceId The identifier of the resource.
     *
     * @param {object} advancedThreatProtectionSetting Advanced Threat Protection
     * Settings
     *
     * @param {boolean} [advancedThreatProtectionSetting.isEnabled] Indicates
     * whether Advanced Threat Protection is enabled.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AdvancedThreatProtectionSetting} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AdvancedThreatProtectionSetting} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AdvancedThreatProtectionSetting} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    create(resourceId: string, advancedThreatProtectionSetting: models.AdvancedThreatProtectionSetting, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AdvancedThreatProtectionSetting>;
    create(resourceId: string, advancedThreatProtectionSetting: models.AdvancedThreatProtectionSetting, callback: ServiceCallback<models.AdvancedThreatProtectionSetting>): void;
    create(resourceId: string, advancedThreatProtectionSetting: models.AdvancedThreatProtectionSetting, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AdvancedThreatProtectionSetting>): void;
}

/**
 * @class
 * Settings
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SecurityCenter.
 */
export interface Settings {


    /**
     * Settings about different configurations in security center
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SettingsList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SettingsList>>;

    /**
     * Settings about different configurations in security center
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SettingsList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SettingsList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SettingsList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SettingsList>;
    list(callback: ServiceCallback<models.SettingsList>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SettingsList>): void;


    /**
     * Settings of different configurations in security center
     *
     * @param {string} settingName Name of setting: (MCAS/WDATP). Possible values
     * include: 'MCAS', 'WDATP'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Setting>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(settingName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Setting>>;

    /**
     * Settings of different configurations in security center
     *
     * @param {string} settingName Name of setting: (MCAS/WDATP). Possible values
     * include: 'MCAS', 'WDATP'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Setting} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Setting} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Setting} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(settingName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Setting>;
    get(settingName: string, callback: ServiceCallback<models.Setting>): void;
    get(settingName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Setting>): void;


    /**
     * updating settings about different configurations in security center
     *
     * @param {string} settingName Name of setting: (MCAS/WDATP). Possible values
     * include: 'MCAS', 'WDATP'
     *
     * @param {object} setting Setting object
     *
     * @param {string} setting.kind the kind of the settings string
     * (DataExportSetting). Possible values include: 'DataExportSetting',
     * 'AlertSuppressionSetting'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Setting>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(settingName: string, setting: models.Setting, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Setting>>;

    /**
     * updating settings about different configurations in security center
     *
     * @param {string} settingName Name of setting: (MCAS/WDATP). Possible values
     * include: 'MCAS', 'WDATP'
     *
     * @param {object} setting Setting object
     *
     * @param {string} setting.kind the kind of the settings string
     * (DataExportSetting). Possible values include: 'DataExportSetting',
     * 'AlertSuppressionSetting'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Setting} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Setting} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Setting} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(settingName: string, setting: models.Setting, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Setting>;
    update(settingName: string, setting: models.Setting, callback: ServiceCallback<models.Setting>): void;
    update(settingName: string, setting: models.Setting, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Setting>): void;


    /**
     * Settings about different configurations in security center
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SettingsList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SettingsList>>;

    /**
     * Settings about different configurations in security center
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SettingsList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SettingsList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SettingsList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SettingsList>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.SettingsList>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SettingsList>): void;
}

/**
 * @class
 * InformationProtectionPolicies
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SecurityCenter.
 */
export interface InformationProtectionPolicies {


    /**
     * Details of the information protection policy.
     *
     * @param {string} scope Scope of the query, can be subscription
     * (/subscriptions/0b06d9ea-afe6-4779-bd59-30e5c2d9d13f) or management group
     * (/providers/Microsoft.Management/managementGroups/mgName).
     *
     * @param {string} informationProtectionPolicyName Name of the information
     * protection policy. Possible values include: 'effective', 'custom'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<InformationProtectionPolicy>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(scope: string, informationProtectionPolicyName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.InformationProtectionPolicy>>;

    /**
     * Details of the information protection policy.
     *
     * @param {string} scope Scope of the query, can be subscription
     * (/subscriptions/0b06d9ea-afe6-4779-bd59-30e5c2d9d13f) or management group
     * (/providers/Microsoft.Management/managementGroups/mgName).
     *
     * @param {string} informationProtectionPolicyName Name of the information
     * protection policy. Possible values include: 'effective', 'custom'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {InformationProtectionPolicy} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {InformationProtectionPolicy} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link InformationProtectionPolicy} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(scope: string, informationProtectionPolicyName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.InformationProtectionPolicy>;
    get(scope: string, informationProtectionPolicyName: string, callback: ServiceCallback<models.InformationProtectionPolicy>): void;
    get(scope: string, informationProtectionPolicyName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.InformationProtectionPolicy>): void;


    /**
     * Details of the information protection policy.
     *
     * @param {string} scope Scope of the query, can be subscription
     * (/subscriptions/0b06d9ea-afe6-4779-bd59-30e5c2d9d13f) or management group
     * (/providers/Microsoft.Management/managementGroups/mgName).
     *
     * @param {string} informationProtectionPolicyName Name of the information
     * protection policy. Possible values include: 'effective', 'custom'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<InformationProtectionPolicy>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(scope: string, informationProtectionPolicyName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.InformationProtectionPolicy>>;

    /**
     * Details of the information protection policy.
     *
     * @param {string} scope Scope of the query, can be subscription
     * (/subscriptions/0b06d9ea-afe6-4779-bd59-30e5c2d9d13f) or management group
     * (/providers/Microsoft.Management/managementGroups/mgName).
     *
     * @param {string} informationProtectionPolicyName Name of the information
     * protection policy. Possible values include: 'effective', 'custom'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {InformationProtectionPolicy} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {InformationProtectionPolicy} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link InformationProtectionPolicy} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(scope: string, informationProtectionPolicyName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.InformationProtectionPolicy>;
    createOrUpdate(scope: string, informationProtectionPolicyName: string, callback: ServiceCallback<models.InformationProtectionPolicy>): void;
    createOrUpdate(scope: string, informationProtectionPolicyName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.InformationProtectionPolicy>): void;


    /**
     * Information protection policies of a specific management group.
     *
     * @param {string} scope Scope of the query, can be subscription
     * (/subscriptions/0b06d9ea-afe6-4779-bd59-30e5c2d9d13f) or management group
     * (/providers/Microsoft.Management/managementGroups/mgName).
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<InformationProtectionPolicyList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(scope: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.InformationProtectionPolicyList>>;

    /**
     * Information protection policies of a specific management group.
     *
     * @param {string} scope Scope of the query, can be subscription
     * (/subscriptions/0b06d9ea-afe6-4779-bd59-30e5c2d9d13f) or management group
     * (/providers/Microsoft.Management/managementGroups/mgName).
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {InformationProtectionPolicyList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {InformationProtectionPolicyList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link InformationProtectionPolicyList} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(scope: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.InformationProtectionPolicyList>;
    list(scope: string, callback: ServiceCallback<models.InformationProtectionPolicyList>): void;
    list(scope: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.InformationProtectionPolicyList>): void;


    /**
     * Information protection policies of a specific management group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<InformationProtectionPolicyList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.InformationProtectionPolicyList>>;

    /**
     * Information protection policies of a specific management group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {InformationProtectionPolicyList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {InformationProtectionPolicyList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link InformationProtectionPolicyList} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.InformationProtectionPolicyList>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.InformationProtectionPolicyList>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.InformationProtectionPolicyList>): void;
}

/**
 * @class
 * Operations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SecurityCenter.
 */
export interface Operations {


    /**
     * Exposes all available operations for discovery purposes.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OperationList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OperationList>>;

    /**
     * Exposes all available operations for discovery purposes.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OperationList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OperationList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OperationList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.OperationList>;
    list(callback: ServiceCallback<models.OperationList>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OperationList>): void;


    /**
     * Exposes all available operations for discovery purposes.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OperationList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OperationList>>;

    /**
     * Exposes all available operations for discovery purposes.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OperationList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OperationList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OperationList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.OperationList>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.OperationList>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OperationList>): void;
}

/**
 * @class
 * Locations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SecurityCenter.
 */
export interface Locations {


    /**
     * The location of the responsible ASC of the specific subscription (home
     * region). For each subscription there is only one responsible location. The
     * location in the response should be used to read or write other resources in
     * ASC according to their ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AscLocationList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AscLocationList>>;

    /**
     * The location of the responsible ASC of the specific subscription (home
     * region). For each subscription there is only one responsible location. The
     * location in the response should be used to read or write other resources in
     * ASC according to their ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AscLocationList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AscLocationList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AscLocationList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AscLocationList>;
    list(callback: ServiceCallback<models.AscLocationList>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AscLocationList>): void;


    /**
     * Details of a specific location
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AscLocation>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AscLocation>>;

    /**
     * Details of a specific location
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AscLocation} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AscLocation} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AscLocation} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AscLocation>;
    get(callback: ServiceCallback<models.AscLocation>): void;
    get(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AscLocation>): void;


    /**
     * The location of the responsible ASC of the specific subscription (home
     * region). For each subscription there is only one responsible location. The
     * location in the response should be used to read or write other resources in
     * ASC according to their ID.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AscLocationList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AscLocationList>>;

    /**
     * The location of the responsible ASC of the specific subscription (home
     * region). For each subscription there is only one responsible location. The
     * location in the response should be used to read or write other resources in
     * ASC according to their ID.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AscLocationList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AscLocationList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AscLocationList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AscLocationList>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.AscLocationList>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AscLocationList>): void;
}

/**
 * @class
 * Tasks
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SecurityCenter.
 */
export interface Tasks {


    /**
     * Recommended tasks that will help improve the security of the subscription
     * proactively
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] OData filter. Optional.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SecurityTaskList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SecurityTaskList>>;

    /**
     * Recommended tasks that will help improve the security of the subscription
     * proactively
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] OData filter. Optional.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SecurityTaskList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SecurityTaskList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SecurityTaskList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.SecurityTaskList>;
    list(callback: ServiceCallback<models.SecurityTaskList>): void;
    list(options: { filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SecurityTaskList>): void;


    /**
     * Recommended tasks that will help improve the security of the subscription
     * proactively
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] OData filter. Optional.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SecurityTaskList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByHomeRegionWithHttpOperationResponse(options?: { filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SecurityTaskList>>;

    /**
     * Recommended tasks that will help improve the security of the subscription
     * proactively
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] OData filter. Optional.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SecurityTaskList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SecurityTaskList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SecurityTaskList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByHomeRegion(options?: { filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.SecurityTaskList>;
    listByHomeRegion(callback: ServiceCallback<models.SecurityTaskList>): void;
    listByHomeRegion(options: { filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SecurityTaskList>): void;


    /**
     * Recommended tasks that will help improve the security of the subscription
     * proactively
     *
     * @param {string} taskName Name of the task object, will be a GUID
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SecurityTask>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getSubscriptionLevelTaskWithHttpOperationResponse(taskName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SecurityTask>>;

    /**
     * Recommended tasks that will help improve the security of the subscription
     * proactively
     *
     * @param {string} taskName Name of the task object, will be a GUID
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SecurityTask} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SecurityTask} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SecurityTask} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getSubscriptionLevelTask(taskName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SecurityTask>;
    getSubscriptionLevelTask(taskName: string, callback: ServiceCallback<models.SecurityTask>): void;
    getSubscriptionLevelTask(taskName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SecurityTask>): void;


    /**
     * Recommended tasks that will help improve the security of the subscription
     * proactively
     *
     * @param {string} taskName Name of the task object, will be a GUID
     *
     * @param {string} taskUpdateActionType Type of the action to do on the task.
     * Possible values include: 'Activate', 'Dismiss', 'Start', 'Resolve', 'Close'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateSubscriptionLevelTaskStateWithHttpOperationResponse(taskName: string, taskUpdateActionType: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Recommended tasks that will help improve the security of the subscription
     * proactively
     *
     * @param {string} taskName Name of the task object, will be a GUID
     *
     * @param {string} taskUpdateActionType Type of the action to do on the task.
     * Possible values include: 'Activate', 'Dismiss', 'Start', 'Resolve', 'Close'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updateSubscriptionLevelTaskState(taskName: string, taskUpdateActionType: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    updateSubscriptionLevelTaskState(taskName: string, taskUpdateActionType: string, callback: ServiceCallback<void>): void;
    updateSubscriptionLevelTaskState(taskName: string, taskUpdateActionType: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Recommended tasks that will help improve the security of the subscription
     * proactively
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription. The name is case insensitive.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] OData filter. Optional.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SecurityTaskList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupWithHttpOperationResponse(resourceGroupName: string, options?: { filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SecurityTaskList>>;

    /**
     * Recommended tasks that will help improve the security of the subscription
     * proactively
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription. The name is case insensitive.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] OData filter. Optional.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SecurityTaskList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SecurityTaskList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SecurityTaskList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroup(resourceGroupName: string, options?: { filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.SecurityTaskList>;
    listByResourceGroup(resourceGroupName: string, callback: ServiceCallback<models.SecurityTaskList>): void;
    listByResourceGroup(resourceGroupName: string, options: { filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SecurityTaskList>): void;


    /**
     * Recommended tasks that will help improve the security of the subscription
     * proactively
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription. The name is case insensitive.
     *
     * @param {string} taskName Name of the task object, will be a GUID
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SecurityTask>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getResourceGroupLevelTaskWithHttpOperationResponse(resourceGroupName: string, taskName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SecurityTask>>;

    /**
     * Recommended tasks that will help improve the security of the subscription
     * proactively
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription. The name is case insensitive.
     *
     * @param {string} taskName Name of the task object, will be a GUID
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SecurityTask} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SecurityTask} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SecurityTask} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getResourceGroupLevelTask(resourceGroupName: string, taskName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SecurityTask>;
    getResourceGroupLevelTask(resourceGroupName: string, taskName: string, callback: ServiceCallback<models.SecurityTask>): void;
    getResourceGroupLevelTask(resourceGroupName: string, taskName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SecurityTask>): void;


    /**
     * Recommended tasks that will help improve the security of the subscription
     * proactively
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription. The name is case insensitive.
     *
     * @param {string} taskName Name of the task object, will be a GUID
     *
     * @param {string} taskUpdateActionType Type of the action to do on the task.
     * Possible values include: 'Activate', 'Dismiss', 'Start', 'Resolve', 'Close'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateResourceGroupLevelTaskStateWithHttpOperationResponse(resourceGroupName: string, taskName: string, taskUpdateActionType: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Recommended tasks that will help improve the security of the subscription
     * proactively
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription. The name is case insensitive.
     *
     * @param {string} taskName Name of the task object, will be a GUID
     *
     * @param {string} taskUpdateActionType Type of the action to do on the task.
     * Possible values include: 'Activate', 'Dismiss', 'Start', 'Resolve', 'Close'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updateResourceGroupLevelTaskState(resourceGroupName: string, taskName: string, taskUpdateActionType: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    updateResourceGroupLevelTaskState(resourceGroupName: string, taskName: string, taskUpdateActionType: string, callback: ServiceCallback<void>): void;
    updateResourceGroupLevelTaskState(resourceGroupName: string, taskName: string, taskUpdateActionType: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Recommended tasks that will help improve the security of the subscription
     * proactively
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SecurityTaskList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SecurityTaskList>>;

    /**
     * Recommended tasks that will help improve the security of the subscription
     * proactively
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SecurityTaskList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SecurityTaskList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SecurityTaskList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SecurityTaskList>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.SecurityTaskList>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SecurityTaskList>): void;


    /**
     * Recommended tasks that will help improve the security of the subscription
     * proactively
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SecurityTaskList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByHomeRegionNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SecurityTaskList>>;

    /**
     * Recommended tasks that will help improve the security of the subscription
     * proactively
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SecurityTaskList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SecurityTaskList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SecurityTaskList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByHomeRegionNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SecurityTaskList>;
    listByHomeRegionNext(nextPageLink: string, callback: ServiceCallback<models.SecurityTaskList>): void;
    listByHomeRegionNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SecurityTaskList>): void;


    /**
     * Recommended tasks that will help improve the security of the subscription
     * proactively
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SecurityTaskList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SecurityTaskList>>;

    /**
     * Recommended tasks that will help improve the security of the subscription
     * proactively
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SecurityTaskList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SecurityTaskList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SecurityTaskList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroupNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SecurityTaskList>;
    listByResourceGroupNext(nextPageLink: string, callback: ServiceCallback<models.SecurityTaskList>): void;
    listByResourceGroupNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SecurityTaskList>): void;
}

/**
 * @class
 * Alerts
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SecurityCenter.
 */
export interface Alerts {


    /**
     * List all the alerts that are associated with the subscription
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] OData filter. Optional.
     *
     * @param {string} [options.select] OData select. Optional.
     *
     * @param {string} [options.expand] OData expand. Optional.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AlertList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { filter? : string, select? : string, expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AlertList>>;

    /**
     * List all the alerts that are associated with the subscription
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] OData filter. Optional.
     *
     * @param {string} [options.select] OData select. Optional.
     *
     * @param {string} [options.expand] OData expand. Optional.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AlertList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AlertList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AlertList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { filter? : string, select? : string, expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.AlertList>;
    list(callback: ServiceCallback<models.AlertList>): void;
    list(options: { filter? : string, select? : string, expand? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AlertList>): void;


    /**
     * List all the alerts that are associated with the resource group
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription. The name is case insensitive.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] OData filter. Optional.
     *
     * @param {string} [options.select] OData select. Optional.
     *
     * @param {string} [options.expand] OData expand. Optional.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AlertList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupWithHttpOperationResponse(resourceGroupName: string, options?: { filter? : string, select? : string, expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AlertList>>;

    /**
     * List all the alerts that are associated with the resource group
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription. The name is case insensitive.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] OData filter. Optional.
     *
     * @param {string} [options.select] OData select. Optional.
     *
     * @param {string} [options.expand] OData expand. Optional.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AlertList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AlertList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AlertList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroup(resourceGroupName: string, options?: { filter? : string, select? : string, expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.AlertList>;
    listByResourceGroup(resourceGroupName: string, callback: ServiceCallback<models.AlertList>): void;
    listByResourceGroup(resourceGroupName: string, options: { filter? : string, select? : string, expand? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AlertList>): void;


    /**
     * List all the alerts that are associated with the subscription that are
     * stored in a specific location
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] OData filter. Optional.
     *
     * @param {string} [options.select] OData select. Optional.
     *
     * @param {string} [options.expand] OData expand. Optional.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AlertList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listSubscriptionLevelAlertsByRegionWithHttpOperationResponse(options?: { filter? : string, select? : string, expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AlertList>>;

    /**
     * List all the alerts that are associated with the subscription that are
     * stored in a specific location
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] OData filter. Optional.
     *
     * @param {string} [options.select] OData select. Optional.
     *
     * @param {string} [options.expand] OData expand. Optional.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AlertList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AlertList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AlertList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listSubscriptionLevelAlertsByRegion(options?: { filter? : string, select? : string, expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.AlertList>;
    listSubscriptionLevelAlertsByRegion(callback: ServiceCallback<models.AlertList>): void;
    listSubscriptionLevelAlertsByRegion(options: { filter? : string, select? : string, expand? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AlertList>): void;


    /**
     * List all the alerts that are associated with the resource group that are
     * stored in a specific location
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription. The name is case insensitive.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] OData filter. Optional.
     *
     * @param {string} [options.select] OData select. Optional.
     *
     * @param {string} [options.expand] OData expand. Optional.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AlertList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listResourceGroupLevelAlertsByRegionWithHttpOperationResponse(resourceGroupName: string, options?: { filter? : string, select? : string, expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AlertList>>;

    /**
     * List all the alerts that are associated with the resource group that are
     * stored in a specific location
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription. The name is case insensitive.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] OData filter. Optional.
     *
     * @param {string} [options.select] OData select. Optional.
     *
     * @param {string} [options.expand] OData expand. Optional.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AlertList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AlertList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AlertList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listResourceGroupLevelAlertsByRegion(resourceGroupName: string, options?: { filter? : string, select? : string, expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.AlertList>;
    listResourceGroupLevelAlertsByRegion(resourceGroupName: string, callback: ServiceCallback<models.AlertList>): void;
    listResourceGroupLevelAlertsByRegion(resourceGroupName: string, options: { filter? : string, select? : string, expand? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AlertList>): void;


    /**
     * Get an alert that is associated with a subscription
     *
     * @param {string} alertName Name of the alert object
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Alert>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getSubscriptionLevelAlertWithHttpOperationResponse(alertName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Alert>>;

    /**
     * Get an alert that is associated with a subscription
     *
     * @param {string} alertName Name of the alert object
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Alert} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Alert} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Alert} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getSubscriptionLevelAlert(alertName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Alert>;
    getSubscriptionLevelAlert(alertName: string, callback: ServiceCallback<models.Alert>): void;
    getSubscriptionLevelAlert(alertName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Alert>): void;


    /**
     * Get an alert that is associated a resource group or a resource in a resource
     * group
     *
     * @param {string} alertName Name of the alert object
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription. The name is case insensitive.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Alert>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getResourceGroupLevelAlertsWithHttpOperationResponse(alertName: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Alert>>;

    /**
     * Get an alert that is associated a resource group or a resource in a resource
     * group
     *
     * @param {string} alertName Name of the alert object
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription. The name is case insensitive.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Alert} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Alert} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Alert} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getResourceGroupLevelAlerts(alertName: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Alert>;
    getResourceGroupLevelAlerts(alertName: string, resourceGroupName: string, callback: ServiceCallback<models.Alert>): void;
    getResourceGroupLevelAlerts(alertName: string, resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Alert>): void;


    /**
     * Update the alert's state
     *
     * @param {string} alertName Name of the alert object
     *
     * @param {string} alertUpdateActionType Type of the action to do on the alert.
     * Possible values include: 'Dismiss', 'Reactivate'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateSubscriptionLevelAlertStateWithHttpOperationResponse(alertName: string, alertUpdateActionType: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Update the alert's state
     *
     * @param {string} alertName Name of the alert object
     *
     * @param {string} alertUpdateActionType Type of the action to do on the alert.
     * Possible values include: 'Dismiss', 'Reactivate'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updateSubscriptionLevelAlertState(alertName: string, alertUpdateActionType: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    updateSubscriptionLevelAlertState(alertName: string, alertUpdateActionType: string, callback: ServiceCallback<void>): void;
    updateSubscriptionLevelAlertState(alertName: string, alertUpdateActionType: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Update the alert's state
     *
     * @param {string} alertName Name of the alert object
     *
     * @param {string} alertUpdateActionType Type of the action to do on the alert.
     * Possible values include: 'Dismiss', 'Reactivate'
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription. The name is case insensitive.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateResourceGroupLevelAlertStateWithHttpOperationResponse(alertName: string, alertUpdateActionType: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Update the alert's state
     *
     * @param {string} alertName Name of the alert object
     *
     * @param {string} alertUpdateActionType Type of the action to do on the alert.
     * Possible values include: 'Dismiss', 'Reactivate'
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription. The name is case insensitive.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updateResourceGroupLevelAlertState(alertName: string, alertUpdateActionType: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    updateResourceGroupLevelAlertState(alertName: string, alertUpdateActionType: string, resourceGroupName: string, callback: ServiceCallback<void>): void;
    updateResourceGroupLevelAlertState(alertName: string, alertUpdateActionType: string, resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * List all the alerts that are associated with the subscription
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AlertList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AlertList>>;

    /**
     * List all the alerts that are associated with the subscription
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AlertList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AlertList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AlertList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AlertList>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.AlertList>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AlertList>): void;


    /**
     * List all the alerts that are associated with the resource group
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AlertList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AlertList>>;

    /**
     * List all the alerts that are associated with the resource group
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AlertList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AlertList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AlertList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroupNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AlertList>;
    listByResourceGroupNext(nextPageLink: string, callback: ServiceCallback<models.AlertList>): void;
    listByResourceGroupNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AlertList>): void;


    /**
     * List all the alerts that are associated with the subscription that are
     * stored in a specific location
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AlertList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listSubscriptionLevelAlertsByRegionNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AlertList>>;

    /**
     * List all the alerts that are associated with the subscription that are
     * stored in a specific location
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AlertList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AlertList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AlertList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listSubscriptionLevelAlertsByRegionNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AlertList>;
    listSubscriptionLevelAlertsByRegionNext(nextPageLink: string, callback: ServiceCallback<models.AlertList>): void;
    listSubscriptionLevelAlertsByRegionNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AlertList>): void;


    /**
     * List all the alerts that are associated with the resource group that are
     * stored in a specific location
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AlertList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listResourceGroupLevelAlertsByRegionNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AlertList>>;

    /**
     * List all the alerts that are associated with the resource group that are
     * stored in a specific location
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AlertList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AlertList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AlertList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listResourceGroupLevelAlertsByRegionNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AlertList>;
    listResourceGroupLevelAlertsByRegionNext(nextPageLink: string, callback: ServiceCallback<models.AlertList>): void;
    listResourceGroupLevelAlertsByRegionNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AlertList>): void;
}

/**
 * @class
 * DiscoveredSecuritySolutions
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SecurityCenter.
 */
export interface DiscoveredSecuritySolutions {


    /**
     * Gets a list of discovered Security Solutions for the subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DiscoveredSecuritySolutionList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DiscoveredSecuritySolutionList>>;

    /**
     * Gets a list of discovered Security Solutions for the subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DiscoveredSecuritySolutionList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DiscoveredSecuritySolutionList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DiscoveredSecuritySolutionList} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DiscoveredSecuritySolutionList>;
    list(callback: ServiceCallback<models.DiscoveredSecuritySolutionList>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DiscoveredSecuritySolutionList>): void;


    /**
     * Gets a list of discovered Security Solutions for the subscription and
     * location.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DiscoveredSecuritySolutionList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByHomeRegionWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DiscoveredSecuritySolutionList>>;

    /**
     * Gets a list of discovered Security Solutions for the subscription and
     * location.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DiscoveredSecuritySolutionList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DiscoveredSecuritySolutionList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DiscoveredSecuritySolutionList} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByHomeRegion(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DiscoveredSecuritySolutionList>;
    listByHomeRegion(callback: ServiceCallback<models.DiscoveredSecuritySolutionList>): void;
    listByHomeRegion(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DiscoveredSecuritySolutionList>): void;


    /**
     * Gets a specific discovered Security Solution.
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription. The name is case insensitive.
     *
     * @param {string} discoveredSecuritySolutionName Name of a discovered security
     * solution.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DiscoveredSecuritySolution>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, discoveredSecuritySolutionName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DiscoveredSecuritySolution>>;

    /**
     * Gets a specific discovered Security Solution.
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription. The name is case insensitive.
     *
     * @param {string} discoveredSecuritySolutionName Name of a discovered security
     * solution.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DiscoveredSecuritySolution} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DiscoveredSecuritySolution} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DiscoveredSecuritySolution} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, discoveredSecuritySolutionName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DiscoveredSecuritySolution>;
    get(resourceGroupName: string, discoveredSecuritySolutionName: string, callback: ServiceCallback<models.DiscoveredSecuritySolution>): void;
    get(resourceGroupName: string, discoveredSecuritySolutionName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DiscoveredSecuritySolution>): void;


    /**
     * Gets a list of discovered Security Solutions for the subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DiscoveredSecuritySolutionList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DiscoveredSecuritySolutionList>>;

    /**
     * Gets a list of discovered Security Solutions for the subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DiscoveredSecuritySolutionList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DiscoveredSecuritySolutionList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DiscoveredSecuritySolutionList} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DiscoveredSecuritySolutionList>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.DiscoveredSecuritySolutionList>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DiscoveredSecuritySolutionList>): void;


    /**
     * Gets a list of discovered Security Solutions for the subscription and
     * location.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DiscoveredSecuritySolutionList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByHomeRegionNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DiscoveredSecuritySolutionList>>;

    /**
     * Gets a list of discovered Security Solutions for the subscription and
     * location.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DiscoveredSecuritySolutionList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DiscoveredSecuritySolutionList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DiscoveredSecuritySolutionList} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByHomeRegionNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DiscoveredSecuritySolutionList>;
    listByHomeRegionNext(nextPageLink: string, callback: ServiceCallback<models.DiscoveredSecuritySolutionList>): void;
    listByHomeRegionNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DiscoveredSecuritySolutionList>): void;
}

/**
 * @class
 * JitNetworkAccessPolicies
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SecurityCenter.
 */
export interface JitNetworkAccessPolicies {


    /**
     * Policies for protecting resources using Just-in-Time access control.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<JitNetworkAccessPoliciesList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.JitNetworkAccessPoliciesList>>;

    /**
     * Policies for protecting resources using Just-in-Time access control.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {JitNetworkAccessPoliciesList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {JitNetworkAccessPoliciesList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link JitNetworkAccessPoliciesList} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.JitNetworkAccessPoliciesList>;
    list(callback: ServiceCallback<models.JitNetworkAccessPoliciesList>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.JitNetworkAccessPoliciesList>): void;


    /**
     * Policies for protecting resources using Just-in-Time access control for the
     * subscription, location
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<JitNetworkAccessPoliciesList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByRegionWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.JitNetworkAccessPoliciesList>>;

    /**
     * Policies for protecting resources using Just-in-Time access control for the
     * subscription, location
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {JitNetworkAccessPoliciesList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {JitNetworkAccessPoliciesList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link JitNetworkAccessPoliciesList} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByRegion(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.JitNetworkAccessPoliciesList>;
    listByRegion(callback: ServiceCallback<models.JitNetworkAccessPoliciesList>): void;
    listByRegion(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.JitNetworkAccessPoliciesList>): void;


    /**
     * Policies for protecting resources using Just-in-Time access control for the
     * subscription, location
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription. The name is case insensitive.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<JitNetworkAccessPoliciesList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupWithHttpOperationResponse(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.JitNetworkAccessPoliciesList>>;

    /**
     * Policies for protecting resources using Just-in-Time access control for the
     * subscription, location
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription. The name is case insensitive.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {JitNetworkAccessPoliciesList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {JitNetworkAccessPoliciesList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link JitNetworkAccessPoliciesList} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroup(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.JitNetworkAccessPoliciesList>;
    listByResourceGroup(resourceGroupName: string, callback: ServiceCallback<models.JitNetworkAccessPoliciesList>): void;
    listByResourceGroup(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.JitNetworkAccessPoliciesList>): void;


    /**
     * Policies for protecting resources using Just-in-Time access control for the
     * subscription, location
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription. The name is case insensitive.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<JitNetworkAccessPoliciesList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupAndRegionWithHttpOperationResponse(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.JitNetworkAccessPoliciesList>>;

    /**
     * Policies for protecting resources using Just-in-Time access control for the
     * subscription, location
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription. The name is case insensitive.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {JitNetworkAccessPoliciesList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {JitNetworkAccessPoliciesList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link JitNetworkAccessPoliciesList} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroupAndRegion(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.JitNetworkAccessPoliciesList>;
    listByResourceGroupAndRegion(resourceGroupName: string, callback: ServiceCallback<models.JitNetworkAccessPoliciesList>): void;
    listByResourceGroupAndRegion(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.JitNetworkAccessPoliciesList>): void;


    /**
     * Policies for protecting resources using Just-in-Time access control for the
     * subscription, location
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription. The name is case insensitive.
     *
     * @param {string} jitNetworkAccessPolicyName Name of a Just-in-Time access
     * configuration policy.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<JitNetworkAccessPolicy>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, jitNetworkAccessPolicyName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.JitNetworkAccessPolicy>>;

    /**
     * Policies for protecting resources using Just-in-Time access control for the
     * subscription, location
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription. The name is case insensitive.
     *
     * @param {string} jitNetworkAccessPolicyName Name of a Just-in-Time access
     * configuration policy.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {JitNetworkAccessPolicy} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {JitNetworkAccessPolicy} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link JitNetworkAccessPolicy} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, jitNetworkAccessPolicyName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.JitNetworkAccessPolicy>;
    get(resourceGroupName: string, jitNetworkAccessPolicyName: string, callback: ServiceCallback<models.JitNetworkAccessPolicy>): void;
    get(resourceGroupName: string, jitNetworkAccessPolicyName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.JitNetworkAccessPolicy>): void;


    /**
     * Create a policy for protecting resources using Just-in-Time access control
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription. The name is case insensitive.
     *
     * @param {string} jitNetworkAccessPolicyName Name of a Just-in-Time access
     * configuration policy.
     *
     * @param {object} body
     *
     * @param {string} [body.kind] Kind of the resource
     *
     * @param {array} body.virtualMachines Configurations for
     * Microsoft.Compute/virtualMachines resource type.
     *
     * @param {array} [body.requests]
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<JitNetworkAccessPolicy>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, jitNetworkAccessPolicyName: string, body: models.JitNetworkAccessPolicy, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.JitNetworkAccessPolicy>>;

    /**
     * Create a policy for protecting resources using Just-in-Time access control
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription. The name is case insensitive.
     *
     * @param {string} jitNetworkAccessPolicyName Name of a Just-in-Time access
     * configuration policy.
     *
     * @param {object} body
     *
     * @param {string} [body.kind] Kind of the resource
     *
     * @param {array} body.virtualMachines Configurations for
     * Microsoft.Compute/virtualMachines resource type.
     *
     * @param {array} [body.requests]
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {JitNetworkAccessPolicy} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {JitNetworkAccessPolicy} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link JitNetworkAccessPolicy} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, jitNetworkAccessPolicyName: string, body: models.JitNetworkAccessPolicy, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.JitNetworkAccessPolicy>;
    createOrUpdate(resourceGroupName: string, jitNetworkAccessPolicyName: string, body: models.JitNetworkAccessPolicy, callback: ServiceCallback<models.JitNetworkAccessPolicy>): void;
    createOrUpdate(resourceGroupName: string, jitNetworkAccessPolicyName: string, body: models.JitNetworkAccessPolicy, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.JitNetworkAccessPolicy>): void;


    /**
     * Delete a Just-in-Time access control policy.
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription. The name is case insensitive.
     *
     * @param {string} jitNetworkAccessPolicyName Name of a Just-in-Time access
     * configuration policy.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, jitNetworkAccessPolicyName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Delete a Just-in-Time access control policy.
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription. The name is case insensitive.
     *
     * @param {string} jitNetworkAccessPolicyName Name of a Just-in-Time access
     * configuration policy.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, jitNetworkAccessPolicyName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, jitNetworkAccessPolicyName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, jitNetworkAccessPolicyName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Initiate a JIT access from a specific Just-in-Time policy configuration.
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription. The name is case insensitive.
     *
     * @param {string} jitNetworkAccessPolicyName Name of a Just-in-Time access
     * configuration policy.
     *
     * @param {object} body
     *
     * @param {array} body.virtualMachines A list of virtual machines & ports to
     * open access for
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<JitNetworkAccessRequest>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    initiateWithHttpOperationResponse(resourceGroupName: string, jitNetworkAccessPolicyName: string, body: models.JitNetworkAccessPolicyInitiateRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.JitNetworkAccessRequest>>;

    /**
     * Initiate a JIT access from a specific Just-in-Time policy configuration.
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription. The name is case insensitive.
     *
     * @param {string} jitNetworkAccessPolicyName Name of a Just-in-Time access
     * configuration policy.
     *
     * @param {object} body
     *
     * @param {array} body.virtualMachines A list of virtual machines & ports to
     * open access for
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {JitNetworkAccessRequest} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {JitNetworkAccessRequest} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link JitNetworkAccessRequest} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    initiate(resourceGroupName: string, jitNetworkAccessPolicyName: string, body: models.JitNetworkAccessPolicyInitiateRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.JitNetworkAccessRequest>;
    initiate(resourceGroupName: string, jitNetworkAccessPolicyName: string, body: models.JitNetworkAccessPolicyInitiateRequest, callback: ServiceCallback<models.JitNetworkAccessRequest>): void;
    initiate(resourceGroupName: string, jitNetworkAccessPolicyName: string, body: models.JitNetworkAccessPolicyInitiateRequest, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.JitNetworkAccessRequest>): void;


    /**
     * Policies for protecting resources using Just-in-Time access control.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<JitNetworkAccessPoliciesList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.JitNetworkAccessPoliciesList>>;

    /**
     * Policies for protecting resources using Just-in-Time access control.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {JitNetworkAccessPoliciesList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {JitNetworkAccessPoliciesList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link JitNetworkAccessPoliciesList} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.JitNetworkAccessPoliciesList>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.JitNetworkAccessPoliciesList>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.JitNetworkAccessPoliciesList>): void;


    /**
     * Policies for protecting resources using Just-in-Time access control for the
     * subscription, location
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<JitNetworkAccessPoliciesList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByRegionNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.JitNetworkAccessPoliciesList>>;

    /**
     * Policies for protecting resources using Just-in-Time access control for the
     * subscription, location
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {JitNetworkAccessPoliciesList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {JitNetworkAccessPoliciesList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link JitNetworkAccessPoliciesList} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByRegionNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.JitNetworkAccessPoliciesList>;
    listByRegionNext(nextPageLink: string, callback: ServiceCallback<models.JitNetworkAccessPoliciesList>): void;
    listByRegionNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.JitNetworkAccessPoliciesList>): void;


    /**
     * Policies for protecting resources using Just-in-Time access control for the
     * subscription, location
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<JitNetworkAccessPoliciesList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.JitNetworkAccessPoliciesList>>;

    /**
     * Policies for protecting resources using Just-in-Time access control for the
     * subscription, location
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {JitNetworkAccessPoliciesList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {JitNetworkAccessPoliciesList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link JitNetworkAccessPoliciesList} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroupNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.JitNetworkAccessPoliciesList>;
    listByResourceGroupNext(nextPageLink: string, callback: ServiceCallback<models.JitNetworkAccessPoliciesList>): void;
    listByResourceGroupNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.JitNetworkAccessPoliciesList>): void;


    /**
     * Policies for protecting resources using Just-in-Time access control for the
     * subscription, location
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<JitNetworkAccessPoliciesList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupAndRegionNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.JitNetworkAccessPoliciesList>>;

    /**
     * Policies for protecting resources using Just-in-Time access control for the
     * subscription, location
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {JitNetworkAccessPoliciesList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {JitNetworkAccessPoliciesList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link JitNetworkAccessPoliciesList} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroupAndRegionNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.JitNetworkAccessPoliciesList>;
    listByResourceGroupAndRegionNext(nextPageLink: string, callback: ServiceCallback<models.JitNetworkAccessPoliciesList>): void;
    listByResourceGroupAndRegionNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.JitNetworkAccessPoliciesList>): void;
}

/**
 * @class
 * ExternalSecuritySolutions
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SecurityCenter.
 */
export interface ExternalSecuritySolutions {


    /**
     * Gets a list of external security solutions for the subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ExternalSecuritySolutionList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ExternalSecuritySolutionList>>;

    /**
     * Gets a list of external security solutions for the subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ExternalSecuritySolutionList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ExternalSecuritySolutionList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ExternalSecuritySolutionList} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ExternalSecuritySolutionList>;
    list(callback: ServiceCallback<models.ExternalSecuritySolutionList>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExternalSecuritySolutionList>): void;


    /**
     * Gets a list of external Security Solutions for the subscription and
     * location.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ExternalSecuritySolutionList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByHomeRegionWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ExternalSecuritySolutionList>>;

    /**
     * Gets a list of external Security Solutions for the subscription and
     * location.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ExternalSecuritySolutionList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ExternalSecuritySolutionList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ExternalSecuritySolutionList} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByHomeRegion(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ExternalSecuritySolutionList>;
    listByHomeRegion(callback: ServiceCallback<models.ExternalSecuritySolutionList>): void;
    listByHomeRegion(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExternalSecuritySolutionList>): void;


    /**
     * Gets a specific external Security Solution.
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription. The name is case insensitive.
     *
     * @param {string} externalSecuritySolutionsName Name of an external security
     * solution.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ExternalSecuritySolution>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, externalSecuritySolutionsName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ExternalSecuritySolution>>;

    /**
     * Gets a specific external Security Solution.
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription. The name is case insensitive.
     *
     * @param {string} externalSecuritySolutionsName Name of an external security
     * solution.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ExternalSecuritySolution} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ExternalSecuritySolution} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ExternalSecuritySolution} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, externalSecuritySolutionsName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ExternalSecuritySolution>;
    get(resourceGroupName: string, externalSecuritySolutionsName: string, callback: ServiceCallback<models.ExternalSecuritySolution>): void;
    get(resourceGroupName: string, externalSecuritySolutionsName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExternalSecuritySolution>): void;


    /**
     * Gets a list of external security solutions for the subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ExternalSecuritySolutionList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ExternalSecuritySolutionList>>;

    /**
     * Gets a list of external security solutions for the subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ExternalSecuritySolutionList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ExternalSecuritySolutionList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ExternalSecuritySolutionList} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ExternalSecuritySolutionList>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.ExternalSecuritySolutionList>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExternalSecuritySolutionList>): void;


    /**
     * Gets a list of external Security Solutions for the subscription and
     * location.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ExternalSecuritySolutionList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByHomeRegionNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ExternalSecuritySolutionList>>;

    /**
     * Gets a list of external Security Solutions for the subscription and
     * location.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ExternalSecuritySolutionList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ExternalSecuritySolutionList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ExternalSecuritySolutionList} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByHomeRegionNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ExternalSecuritySolutionList>;
    listByHomeRegionNext(nextPageLink: string, callback: ServiceCallback<models.ExternalSecuritySolutionList>): void;
    listByHomeRegionNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExternalSecuritySolutionList>): void;
}

/**
 * @class
 * Topology
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SecurityCenter.
 */
export interface Topology {


    /**
     * Gets a list that allows to build a topology view of a subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<TopologyList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TopologyList>>;

    /**
     * Gets a list that allows to build a topology view of a subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {TopologyList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {TopologyList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link TopologyList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.TopologyList>;
    list(callback: ServiceCallback<models.TopologyList>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TopologyList>): void;


    /**
     * Gets a list that allows to build a topology view of a subscription and
     * location.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<TopologyList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByHomeRegionWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TopologyList>>;

    /**
     * Gets a list that allows to build a topology view of a subscription and
     * location.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {TopologyList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {TopologyList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link TopologyList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByHomeRegion(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.TopologyList>;
    listByHomeRegion(callback: ServiceCallback<models.TopologyList>): void;
    listByHomeRegion(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TopologyList>): void;


    /**
     * Gets a specific topology component.
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription. The name is case insensitive.
     *
     * @param {string} topologyResourceName Name of a topology resources
     * collection.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<TopologyResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, topologyResourceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TopologyResource>>;

    /**
     * Gets a specific topology component.
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription. The name is case insensitive.
     *
     * @param {string} topologyResourceName Name of a topology resources
     * collection.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {TopologyResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {TopologyResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link TopologyResource} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, topologyResourceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.TopologyResource>;
    get(resourceGroupName: string, topologyResourceName: string, callback: ServiceCallback<models.TopologyResource>): void;
    get(resourceGroupName: string, topologyResourceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TopologyResource>): void;


    /**
     * Gets a list that allows to build a topology view of a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<TopologyList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TopologyList>>;

    /**
     * Gets a list that allows to build a topology view of a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {TopologyList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {TopologyList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link TopologyList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.TopologyList>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.TopologyList>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TopologyList>): void;


    /**
     * Gets a list that allows to build a topology view of a subscription and
     * location.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<TopologyList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByHomeRegionNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TopologyList>>;

    /**
     * Gets a list that allows to build a topology view of a subscription and
     * location.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {TopologyList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {TopologyList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link TopologyList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByHomeRegionNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.TopologyList>;
    listByHomeRegionNext(nextPageLink: string, callback: ServiceCallback<models.TopologyList>): void;
    listByHomeRegionNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TopologyList>): void;
}

/**
 * @class
 * AllowedConnections
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SecurityCenter.
 */
export interface AllowedConnections {


    /**
     * Gets the list of all possible traffic between resources for the subscription
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AllowedConnectionsList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AllowedConnectionsList>>;

    /**
     * Gets the list of all possible traffic between resources for the subscription
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AllowedConnectionsList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AllowedConnectionsList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AllowedConnectionsList} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AllowedConnectionsList>;
    list(callback: ServiceCallback<models.AllowedConnectionsList>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AllowedConnectionsList>): void;


    /**
     * Gets the list of all possible traffic between resources for the subscription
     * and location.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AllowedConnectionsList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByHomeRegionWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AllowedConnectionsList>>;

    /**
     * Gets the list of all possible traffic between resources for the subscription
     * and location.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AllowedConnectionsList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AllowedConnectionsList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AllowedConnectionsList} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByHomeRegion(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AllowedConnectionsList>;
    listByHomeRegion(callback: ServiceCallback<models.AllowedConnectionsList>): void;
    listByHomeRegion(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AllowedConnectionsList>): void;


    /**
     * Gets the list of all possible traffic between resources for the subscription
     * and location, based on connection type.
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription. The name is case insensitive.
     *
     * @param {string} connectionType The type of allowed connections (Internal,
     * External). Possible values include: 'Internal', 'External'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AllowedConnectionsResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, connectionType: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AllowedConnectionsResource>>;

    /**
     * Gets the list of all possible traffic between resources for the subscription
     * and location, based on connection type.
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription. The name is case insensitive.
     *
     * @param {string} connectionType The type of allowed connections (Internal,
     * External). Possible values include: 'Internal', 'External'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AllowedConnectionsResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AllowedConnectionsResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AllowedConnectionsResource} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, connectionType: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AllowedConnectionsResource>;
    get(resourceGroupName: string, connectionType: string, callback: ServiceCallback<models.AllowedConnectionsResource>): void;
    get(resourceGroupName: string, connectionType: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AllowedConnectionsResource>): void;


    /**
     * Gets the list of all possible traffic between resources for the subscription
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AllowedConnectionsList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AllowedConnectionsList>>;

    /**
     * Gets the list of all possible traffic between resources for the subscription
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AllowedConnectionsList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AllowedConnectionsList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AllowedConnectionsList} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AllowedConnectionsList>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.AllowedConnectionsList>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AllowedConnectionsList>): void;


    /**
     * Gets the list of all possible traffic between resources for the subscription
     * and location.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AllowedConnectionsList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByHomeRegionNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AllowedConnectionsList>>;

    /**
     * Gets the list of all possible traffic between resources for the subscription
     * and location.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AllowedConnectionsList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AllowedConnectionsList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AllowedConnectionsList} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByHomeRegionNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AllowedConnectionsList>;
    listByHomeRegionNext(nextPageLink: string, callback: ServiceCallback<models.AllowedConnectionsList>): void;
    listByHomeRegionNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AllowedConnectionsList>): void;
}
