/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Regulatory compliance control details and state
 *
 * @extends models['Resource']
 */
class RegulatoryComplianceControl extends models['Resource'] {
  /**
   * Create a RegulatoryComplianceControl.
   * @property {string} [description] The description of the regulatory
   * compliance control
   * @property {string} [state] Aggregative state based on the control's
   * supported assessments states. Possible values include: 'Passed', 'Failed',
   * 'Skipped', 'Unsupported'
   * @property {number} [passedAssessments] The number of supported regulatory
   * compliance assessments of the given control with a passed state
   * @property {number} [failedAssessments] The number of supported regulatory
   * compliance assessments of the given control with a failed state
   * @property {number} [skippedAssessments] The number of supported regulatory
   * compliance assessments of the given control with a skipped state
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of RegulatoryComplianceControl
   *
   * @returns {object} metadata of RegulatoryComplianceControl
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'RegulatoryComplianceControl',
      type: {
        name: 'Composite',
        className: 'RegulatoryComplianceControl',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          description: {
            required: false,
            readOnly: true,
            serializedName: 'properties.description',
            type: {
              name: 'String'
            }
          },
          state: {
            required: false,
            serializedName: 'properties.state',
            type: {
              name: 'String'
            }
          },
          passedAssessments: {
            required: false,
            readOnly: true,
            serializedName: 'properties.passedAssessments',
            type: {
              name: 'Number'
            }
          },
          failedAssessments: {
            required: false,
            readOnly: true,
            serializedName: 'properties.failedAssessments',
            type: {
              name: 'Number'
            }
          },
          skippedAssessments: {
            required: false,
            readOnly: true,
            serializedName: 'properties.skippedAssessments',
            type: {
              name: 'Number'
            }
          }
        }
      }
    };
  }
}

module.exports = RegulatoryComplianceControl;
