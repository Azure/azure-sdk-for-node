/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Regulatory compliance standard details and state
 *
 * @extends models['Resource']
 */
class RegulatoryComplianceStandard extends models['Resource'] {
  /**
   * Create a RegulatoryComplianceStandard.
   * @property {string} [state] Aggregative state based on the standard's
   * supported controls states. Possible values include: 'Passed', 'Failed',
   * 'Skipped', 'Unsupported'
   * @property {number} [passedControls] The number of supported regulatory
   * compliance controls of the given standard with a passed state
   * @property {number} [failedControls] The number of supported regulatory
   * compliance controls of the given standard with a failed state
   * @property {number} [skippedControls] The number of supported regulatory
   * compliance controls of the given standard with a skipped state
   * @property {number} [unsupportedControls] The number of regulatory
   * compliance controls of the given standard which are unsupported by
   * automated assessments
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of RegulatoryComplianceStandard
   *
   * @returns {object} metadata of RegulatoryComplianceStandard
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'RegulatoryComplianceStandard',
      type: {
        name: 'Composite',
        className: 'RegulatoryComplianceStandard',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          state: {
            required: false,
            serializedName: 'properties.state',
            type: {
              name: 'String'
            }
          },
          passedControls: {
            required: false,
            readOnly: true,
            serializedName: 'properties.passedControls',
            type: {
              name: 'Number'
            }
          },
          failedControls: {
            required: false,
            readOnly: true,
            serializedName: 'properties.failedControls',
            type: {
              name: 'Number'
            }
          },
          skippedControls: {
            required: false,
            readOnly: true,
            serializedName: 'properties.skippedControls',
            type: {
              name: 'Number'
            }
          },
          unsupportedControls: {
            required: false,
            readOnly: true,
            serializedName: 'properties.unsupportedControls',
            type: {
              name: 'Number'
            }
          }
        }
      }
    };
  }
}

module.exports = RegulatoryComplianceStandard;
