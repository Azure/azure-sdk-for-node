/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback, HttpOperationResponse } from 'ms-rest';
import * as models from '../models';


/**
 * @class
 * Domains
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the EventGridManagementClient.
 */
export interface Domains {


    /**
     * @summary Get a domain
     *
     * Get properties of a domain
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription.
     *
     * @param {string} domainName Name of the domain
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Domain>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, domainName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Domain>>;

    /**
     * @summary Get a domain
     *
     * Get properties of a domain
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription.
     *
     * @param {string} domainName Name of the domain
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Domain} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Domain} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Domain} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, domainName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Domain>;
    get(resourceGroupName: string, domainName: string, callback: ServiceCallback<models.Domain>): void;
    get(resourceGroupName: string, domainName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Domain>): void;


    /**
     * @summary Create a domain
     *
     * Asynchronously creates a new domain with the specified parameters.
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription.
     *
     * @param {string} domainName Name of the domain
     *
     * @param {object} domainInfo Domain information
     *
     * @param {string} [domainInfo.inputSchema] This determines the format that
     * Event Grid should expect for incoming events published to the domain.
     * Possible values include: 'EventGridSchema', 'CustomEventSchema',
     * 'CloudEventV01Schema'
     *
     * @param {object} [domainInfo.inputSchemaMapping] Information about the
     * InputSchemaMapping which specified the info about mapping event payload.
     *
     * @param {string} domainInfo.inputSchemaMapping.inputSchemaMappingType
     * Polymorphic Discriminator
     *
     * @param {string} domainInfo.location Location of the resource
     *
     * @param {object} [domainInfo.tags] Tags of the resource
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Domain>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, domainName: string, domainInfo: models.Domain, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Domain>>;

    /**
     * @summary Create a domain
     *
     * Asynchronously creates a new domain with the specified parameters.
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription.
     *
     * @param {string} domainName Name of the domain
     *
     * @param {object} domainInfo Domain information
     *
     * @param {string} [domainInfo.inputSchema] This determines the format that
     * Event Grid should expect for incoming events published to the domain.
     * Possible values include: 'EventGridSchema', 'CustomEventSchema',
     * 'CloudEventV01Schema'
     *
     * @param {object} [domainInfo.inputSchemaMapping] Information about the
     * InputSchemaMapping which specified the info about mapping event payload.
     *
     * @param {string} domainInfo.inputSchemaMapping.inputSchemaMappingType
     * Polymorphic Discriminator
     *
     * @param {string} domainInfo.location Location of the resource
     *
     * @param {object} [domainInfo.tags] Tags of the resource
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Domain} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Domain} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Domain} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, domainName: string, domainInfo: models.Domain, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Domain>;
    createOrUpdate(resourceGroupName: string, domainName: string, domainInfo: models.Domain, callback: ServiceCallback<models.Domain>): void;
    createOrUpdate(resourceGroupName: string, domainName: string, domainInfo: models.Domain, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Domain>): void;


    /**
     * @summary Delete a domain
     *
     * Delete existing domain
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription.
     *
     * @param {string} domainName Name of the domain
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, domainName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Delete a domain
     *
     * Delete existing domain
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription.
     *
     * @param {string} domainName Name of the domain
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, domainName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, domainName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, domainName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Update a domain
     *
     * Asynchronously updates a domain with the specified parameters.
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription.
     *
     * @param {string} domainName Name of the domain
     *
     * @param {object} domainUpdateParameters Domain update information
     *
     * @param {object} [domainUpdateParameters.tags] Tags of the domains resource
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Domain>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, domainName: string, domainUpdateParameters: models.DomainUpdateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Domain>>;

    /**
     * @summary Update a domain
     *
     * Asynchronously updates a domain with the specified parameters.
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription.
     *
     * @param {string} domainName Name of the domain
     *
     * @param {object} domainUpdateParameters Domain update information
     *
     * @param {object} [domainUpdateParameters.tags] Tags of the domains resource
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Domain} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Domain} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Domain} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, domainName: string, domainUpdateParameters: models.DomainUpdateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Domain>;
    update(resourceGroupName: string, domainName: string, domainUpdateParameters: models.DomainUpdateParameters, callback: ServiceCallback<models.Domain>): void;
    update(resourceGroupName: string, domainName: string, domainUpdateParameters: models.DomainUpdateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Domain>): void;


    /**
     * @summary List domains under an Azure subscription
     *
     * List all the domains under an Azure subscription
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DomainsListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listBySubscriptionWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DomainsListResult>>;

    /**
     * @summary List domains under an Azure subscription
     *
     * List all the domains under an Azure subscription
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DomainsListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DomainsListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DomainsListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listBySubscription(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DomainsListResult>;
    listBySubscription(callback: ServiceCallback<models.DomainsListResult>): void;
    listBySubscription(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DomainsListResult>): void;


    /**
     * @summary List domains under a resource group
     *
     * List all the domains under a resource group
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DomainsListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupWithHttpOperationResponse(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DomainsListResult>>;

    /**
     * @summary List domains under a resource group
     *
     * List all the domains under a resource group
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DomainsListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DomainsListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DomainsListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroup(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DomainsListResult>;
    listByResourceGroup(resourceGroupName: string, callback: ServiceCallback<models.DomainsListResult>): void;
    listByResourceGroup(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DomainsListResult>): void;


    /**
     * @summary List keys for a domain
     *
     * List the two keys used to publish to a domain
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription.
     *
     * @param {string} domainName Name of the domain
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DomainSharedAccessKeys>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listSharedAccessKeysWithHttpOperationResponse(resourceGroupName: string, domainName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DomainSharedAccessKeys>>;

    /**
     * @summary List keys for a domain
     *
     * List the two keys used to publish to a domain
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription.
     *
     * @param {string} domainName Name of the domain
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DomainSharedAccessKeys} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DomainSharedAccessKeys} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DomainSharedAccessKeys} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listSharedAccessKeys(resourceGroupName: string, domainName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DomainSharedAccessKeys>;
    listSharedAccessKeys(resourceGroupName: string, domainName: string, callback: ServiceCallback<models.DomainSharedAccessKeys>): void;
    listSharedAccessKeys(resourceGroupName: string, domainName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DomainSharedAccessKeys>): void;


    /**
     * @summary Regenerate key for a domain
     *
     * Regenerate a shared access key for a domain
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription.
     *
     * @param {string} domainName Name of the domain
     *
     * @param {object} regenerateKeyRequest Request body to regenerate key
     *
     * @param {string} regenerateKeyRequest.keyName Key name to regenerate key1 or
     * key2
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DomainSharedAccessKeys>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    regenerateKeyWithHttpOperationResponse(resourceGroupName: string, domainName: string, regenerateKeyRequest: models.DomainRegenerateKeyRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DomainSharedAccessKeys>>;

    /**
     * @summary Regenerate key for a domain
     *
     * Regenerate a shared access key for a domain
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription.
     *
     * @param {string} domainName Name of the domain
     *
     * @param {object} regenerateKeyRequest Request body to regenerate key
     *
     * @param {string} regenerateKeyRequest.keyName Key name to regenerate key1 or
     * key2
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DomainSharedAccessKeys} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DomainSharedAccessKeys} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DomainSharedAccessKeys} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    regenerateKey(resourceGroupName: string, domainName: string, regenerateKeyRequest: models.DomainRegenerateKeyRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DomainSharedAccessKeys>;
    regenerateKey(resourceGroupName: string, domainName: string, regenerateKeyRequest: models.DomainRegenerateKeyRequest, callback: ServiceCallback<models.DomainSharedAccessKeys>): void;
    regenerateKey(resourceGroupName: string, domainName: string, regenerateKeyRequest: models.DomainRegenerateKeyRequest, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DomainSharedAccessKeys>): void;


    /**
     * @summary Create a domain
     *
     * Asynchronously creates a new domain with the specified parameters.
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription.
     *
     * @param {string} domainName Name of the domain
     *
     * @param {object} domainInfo Domain information
     *
     * @param {string} [domainInfo.inputSchema] This determines the format that
     * Event Grid should expect for incoming events published to the domain.
     * Possible values include: 'EventGridSchema', 'CustomEventSchema',
     * 'CloudEventV01Schema'
     *
     * @param {object} [domainInfo.inputSchemaMapping] Information about the
     * InputSchemaMapping which specified the info about mapping event payload.
     *
     * @param {string} domainInfo.inputSchemaMapping.inputSchemaMappingType
     * Polymorphic Discriminator
     *
     * @param {string} domainInfo.location Location of the resource
     *
     * @param {object} [domainInfo.tags] Tags of the resource
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Domain>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, domainName: string, domainInfo: models.Domain, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Domain>>;

    /**
     * @summary Create a domain
     *
     * Asynchronously creates a new domain with the specified parameters.
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription.
     *
     * @param {string} domainName Name of the domain
     *
     * @param {object} domainInfo Domain information
     *
     * @param {string} [domainInfo.inputSchema] This determines the format that
     * Event Grid should expect for incoming events published to the domain.
     * Possible values include: 'EventGridSchema', 'CustomEventSchema',
     * 'CloudEventV01Schema'
     *
     * @param {object} [domainInfo.inputSchemaMapping] Information about the
     * InputSchemaMapping which specified the info about mapping event payload.
     *
     * @param {string} domainInfo.inputSchemaMapping.inputSchemaMappingType
     * Polymorphic Discriminator
     *
     * @param {string} domainInfo.location Location of the resource
     *
     * @param {object} [domainInfo.tags] Tags of the resource
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Domain} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Domain} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Domain} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(resourceGroupName: string, domainName: string, domainInfo: models.Domain, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Domain>;
    beginCreateOrUpdate(resourceGroupName: string, domainName: string, domainInfo: models.Domain, callback: ServiceCallback<models.Domain>): void;
    beginCreateOrUpdate(resourceGroupName: string, domainName: string, domainInfo: models.Domain, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Domain>): void;


    /**
     * @summary Delete a domain
     *
     * Delete existing domain
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription.
     *
     * @param {string} domainName Name of the domain
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, domainName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Delete a domain
     *
     * Delete existing domain
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription.
     *
     * @param {string} domainName Name of the domain
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(resourceGroupName: string, domainName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(resourceGroupName: string, domainName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, domainName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Update a domain
     *
     * Asynchronously updates a domain with the specified parameters.
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription.
     *
     * @param {string} domainName Name of the domain
     *
     * @param {object} domainUpdateParameters Domain update information
     *
     * @param {object} [domainUpdateParameters.tags] Tags of the domains resource
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Domain>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginUpdateWithHttpOperationResponse(resourceGroupName: string, domainName: string, domainUpdateParameters: models.DomainUpdateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Domain>>;

    /**
     * @summary Update a domain
     *
     * Asynchronously updates a domain with the specified parameters.
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription.
     *
     * @param {string} domainName Name of the domain
     *
     * @param {object} domainUpdateParameters Domain update information
     *
     * @param {object} [domainUpdateParameters.tags] Tags of the domains resource
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Domain} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Domain} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Domain} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginUpdate(resourceGroupName: string, domainName: string, domainUpdateParameters: models.DomainUpdateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Domain>;
    beginUpdate(resourceGroupName: string, domainName: string, domainUpdateParameters: models.DomainUpdateParameters, callback: ServiceCallback<models.Domain>): void;
    beginUpdate(resourceGroupName: string, domainName: string, domainUpdateParameters: models.DomainUpdateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Domain>): void;
}

/**
 * @class
 * DomainTopics
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the EventGridManagementClient.
 */
export interface DomainTopics {


    /**
     * @summary Get a domain topic
     *
     * Get properties of a domain topic
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription.
     *
     * @param {string} domainName Name of the domain
     *
     * @param {string} topicName Name of the topic
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DomainTopic>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, domainName: string, topicName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DomainTopic>>;

    /**
     * @summary Get a domain topic
     *
     * Get properties of a domain topic
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription.
     *
     * @param {string} domainName Name of the domain
     *
     * @param {string} topicName Name of the topic
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DomainTopic} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DomainTopic} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DomainTopic} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, domainName: string, topicName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DomainTopic>;
    get(resourceGroupName: string, domainName: string, topicName: string, callback: ServiceCallback<models.DomainTopic>): void;
    get(resourceGroupName: string, domainName: string, topicName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DomainTopic>): void;


    /**
     * @summary List domain topics.
     *
     * List all the topics in a domain.
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription.
     *
     * @param {string} domainName Domain name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DomainTopicsListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByDomainWithHttpOperationResponse(resourceGroupName: string, domainName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DomainTopicsListResult>>;

    /**
     * @summary List domain topics.
     *
     * List all the topics in a domain.
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription.
     *
     * @param {string} domainName Domain name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DomainTopicsListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DomainTopicsListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DomainTopicsListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByDomain(resourceGroupName: string, domainName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DomainTopicsListResult>;
    listByDomain(resourceGroupName: string, domainName: string, callback: ServiceCallback<models.DomainTopicsListResult>): void;
    listByDomain(resourceGroupName: string, domainName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DomainTopicsListResult>): void;
}

/**
 * @class
 * EventSubscriptions
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the EventGridManagementClient.
 */
export interface EventSubscriptions {


    /**
     * @summary Get an event subscription
     *
     * Get properties of an event subscription
     *
     * @param {string} scope The scope of the event subscription. The scope can be
     * a subscription, or a resource group, or a top level resource belonging to a
     * resource provider namespace, or an EventGrid topic. For example, use
     * '/subscriptions/{subscriptionId}/' for a subscription,
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a
     * resource group, and
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
     * for a resource, and
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
     * for an EventGrid topic.
     *
     * @param {string} eventSubscriptionName Name of the event subscription
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<EventSubscription>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(scope: string, eventSubscriptionName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.EventSubscription>>;

    /**
     * @summary Get an event subscription
     *
     * Get properties of an event subscription
     *
     * @param {string} scope The scope of the event subscription. The scope can be
     * a subscription, or a resource group, or a top level resource belonging to a
     * resource provider namespace, or an EventGrid topic. For example, use
     * '/subscriptions/{subscriptionId}/' for a subscription,
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a
     * resource group, and
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
     * for a resource, and
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
     * for an EventGrid topic.
     *
     * @param {string} eventSubscriptionName Name of the event subscription
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {EventSubscription} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {EventSubscription} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link EventSubscription} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(scope: string, eventSubscriptionName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.EventSubscription>;
    get(scope: string, eventSubscriptionName: string, callback: ServiceCallback<models.EventSubscription>): void;
    get(scope: string, eventSubscriptionName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EventSubscription>): void;


    /**
     * @summary Create or update an event subscription
     *
     * Asynchronously creates a new event subscription or updates an existing event
     * subscription based on the specified scope.
     *
     * @param {string} scope The identifier of the resource to which the event
     * subscription needs to be created or updated. The scope can be a
     * subscription, or a resource group, or a top level resource belonging to a
     * resource provider namespace, or an EventGrid topic. For example, use
     * '/subscriptions/{subscriptionId}/' for a subscription,
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a
     * resource group, and
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
     * for a resource, and
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
     * for an EventGrid topic.
     *
     * @param {string} eventSubscriptionName Name of the event subscription. Event
     * subscription names must be between 3 and 64 characters in length and should
     * use alphanumeric letters only.
     *
     * @param {object} eventSubscriptionInfo Event subscription properties
     * containing the destination and filter information
     *
     * @param {object} [eventSubscriptionInfo.destination] Information about the
     * destination where events have to be delivered for the event subscription.
     *
     * @param {string} eventSubscriptionInfo.destination.endpointType Polymorphic
     * Discriminator
     *
     * @param {object} [eventSubscriptionInfo.filter] Information about the filter
     * for the event subscription.
     *
     * @param {string} [eventSubscriptionInfo.filter.subjectBeginsWith] An optional
     * string to filter events for an event subscription based on a resource path
     * prefix.
     * The format of this depends on the publisher of the events.
     * Wildcard characters are not supported in this path.
     *
     * @param {string} [eventSubscriptionInfo.filter.subjectEndsWith] An optional
     * string to filter events for an event subscription based on a resource path
     * suffix.
     * Wildcard characters are not supported in this path.
     *
     * @param {array} [eventSubscriptionInfo.filter.includedEventTypes] A list of
     * applicable event types that need to be part of the event subscription.
     * If it is desired to subscribe to all event types, the string "all" needs to
     * be specified as an element in this list.
     *
     * @param {boolean} [eventSubscriptionInfo.filter.isSubjectCaseSensitive]
     * Specifies if the SubjectBeginsWith and SubjectEndsWith properties of the
     * filter
     * should be compared in a case sensitive manner.
     *
     * @param {array} [eventSubscriptionInfo.filter.advancedFilters] A list of
     * advanced filters.
     *
     * @param {array} [eventSubscriptionInfo.labels] List of user defined labels.
     *
     * @param {date} [eventSubscriptionInfo.expirationTimeUtc] Expiration time of
     * the event subscription.
     *
     * @param {string} [eventSubscriptionInfo.eventDeliverySchema] The event
     * delivery schema for the event subscription. Possible values include:
     * 'EventGridSchema', 'CloudEventV01Schema', 'CustomInputSchema'
     *
     * @param {object} [eventSubscriptionInfo.retryPolicy] The retry policy for
     * events. This can be used to configure maximum number of delivery attempts
     * and time to live for events.
     *
     * @param {number} [eventSubscriptionInfo.retryPolicy.maxDeliveryAttempts]
     * Maximum number of delivery retry attempts for events.
     *
     * @param {number} [eventSubscriptionInfo.retryPolicy.eventTimeToLiveInMinutes]
     * Time To Live (in minutes) for events.
     *
     * @param {object} [eventSubscriptionInfo.deadLetterDestination] The DeadLetter
     * destination of the event subscription.
     *
     * @param {string} eventSubscriptionInfo.deadLetterDestination.endpointType
     * Polymorphic Discriminator
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<EventSubscription>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(scope: string, eventSubscriptionName: string, eventSubscriptionInfo: models.EventSubscription, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.EventSubscription>>;

    /**
     * @summary Create or update an event subscription
     *
     * Asynchronously creates a new event subscription or updates an existing event
     * subscription based on the specified scope.
     *
     * @param {string} scope The identifier of the resource to which the event
     * subscription needs to be created or updated. The scope can be a
     * subscription, or a resource group, or a top level resource belonging to a
     * resource provider namespace, or an EventGrid topic. For example, use
     * '/subscriptions/{subscriptionId}/' for a subscription,
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a
     * resource group, and
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
     * for a resource, and
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
     * for an EventGrid topic.
     *
     * @param {string} eventSubscriptionName Name of the event subscription. Event
     * subscription names must be between 3 and 64 characters in length and should
     * use alphanumeric letters only.
     *
     * @param {object} eventSubscriptionInfo Event subscription properties
     * containing the destination and filter information
     *
     * @param {object} [eventSubscriptionInfo.destination] Information about the
     * destination where events have to be delivered for the event subscription.
     *
     * @param {string} eventSubscriptionInfo.destination.endpointType Polymorphic
     * Discriminator
     *
     * @param {object} [eventSubscriptionInfo.filter] Information about the filter
     * for the event subscription.
     *
     * @param {string} [eventSubscriptionInfo.filter.subjectBeginsWith] An optional
     * string to filter events for an event subscription based on a resource path
     * prefix.
     * The format of this depends on the publisher of the events.
     * Wildcard characters are not supported in this path.
     *
     * @param {string} [eventSubscriptionInfo.filter.subjectEndsWith] An optional
     * string to filter events for an event subscription based on a resource path
     * suffix.
     * Wildcard characters are not supported in this path.
     *
     * @param {array} [eventSubscriptionInfo.filter.includedEventTypes] A list of
     * applicable event types that need to be part of the event subscription.
     * If it is desired to subscribe to all event types, the string "all" needs to
     * be specified as an element in this list.
     *
     * @param {boolean} [eventSubscriptionInfo.filter.isSubjectCaseSensitive]
     * Specifies if the SubjectBeginsWith and SubjectEndsWith properties of the
     * filter
     * should be compared in a case sensitive manner.
     *
     * @param {array} [eventSubscriptionInfo.filter.advancedFilters] A list of
     * advanced filters.
     *
     * @param {array} [eventSubscriptionInfo.labels] List of user defined labels.
     *
     * @param {date} [eventSubscriptionInfo.expirationTimeUtc] Expiration time of
     * the event subscription.
     *
     * @param {string} [eventSubscriptionInfo.eventDeliverySchema] The event
     * delivery schema for the event subscription. Possible values include:
     * 'EventGridSchema', 'CloudEventV01Schema', 'CustomInputSchema'
     *
     * @param {object} [eventSubscriptionInfo.retryPolicy] The retry policy for
     * events. This can be used to configure maximum number of delivery attempts
     * and time to live for events.
     *
     * @param {number} [eventSubscriptionInfo.retryPolicy.maxDeliveryAttempts]
     * Maximum number of delivery retry attempts for events.
     *
     * @param {number} [eventSubscriptionInfo.retryPolicy.eventTimeToLiveInMinutes]
     * Time To Live (in minutes) for events.
     *
     * @param {object} [eventSubscriptionInfo.deadLetterDestination] The DeadLetter
     * destination of the event subscription.
     *
     * @param {string} eventSubscriptionInfo.deadLetterDestination.endpointType
     * Polymorphic Discriminator
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {EventSubscription} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {EventSubscription} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link EventSubscription} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(scope: string, eventSubscriptionName: string, eventSubscriptionInfo: models.EventSubscription, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.EventSubscription>;
    createOrUpdate(scope: string, eventSubscriptionName: string, eventSubscriptionInfo: models.EventSubscription, callback: ServiceCallback<models.EventSubscription>): void;
    createOrUpdate(scope: string, eventSubscriptionName: string, eventSubscriptionInfo: models.EventSubscription, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EventSubscription>): void;


    /**
     * @summary Delete an event subscription
     *
     * Delete an existing event subscription
     *
     * @param {string} scope The scope of the event subscription. The scope can be
     * a subscription, or a resource group, or a top level resource belonging to a
     * resource provider namespace, or an EventGrid topic. For example, use
     * '/subscriptions/{subscriptionId}/' for a subscription,
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a
     * resource group, and
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
     * for a resource, and
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
     * for an EventGrid topic.
     *
     * @param {string} eventSubscriptionName Name of the event subscription
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(scope: string, eventSubscriptionName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Delete an event subscription
     *
     * Delete an existing event subscription
     *
     * @param {string} scope The scope of the event subscription. The scope can be
     * a subscription, or a resource group, or a top level resource belonging to a
     * resource provider namespace, or an EventGrid topic. For example, use
     * '/subscriptions/{subscriptionId}/' for a subscription,
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a
     * resource group, and
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
     * for a resource, and
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
     * for an EventGrid topic.
     *
     * @param {string} eventSubscriptionName Name of the event subscription
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(scope: string, eventSubscriptionName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(scope: string, eventSubscriptionName: string, callback: ServiceCallback<void>): void;
    deleteMethod(scope: string, eventSubscriptionName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Update an event subscription
     *
     * Asynchronously updates an existing event subscription.
     *
     * @param {string} scope The scope of existing event subscription. The scope
     * can be a subscription, or a resource group, or a top level resource
     * belonging to a resource provider namespace, or an EventGrid topic. For
     * example, use '/subscriptions/{subscriptionId}/' for a subscription,
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a
     * resource group, and
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
     * for a resource, and
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
     * for an EventGrid topic.
     *
     * @param {string} eventSubscriptionName Name of the event subscription to be
     * updated
     *
     * @param {object} eventSubscriptionUpdateParameters Updated event subscription
     * information
     *
     * @param {object} [eventSubscriptionUpdateParameters.destination] Information
     * about the destination where events have to be delivered for the event
     * subscription.
     *
     * @param {string} eventSubscriptionUpdateParameters.destination.endpointType
     * Polymorphic Discriminator
     *
     * @param {object} [eventSubscriptionUpdateParameters.filter] Information about
     * the filter for the event subscription.
     *
     * @param {string} [eventSubscriptionUpdateParameters.filter.subjectBeginsWith]
     * An optional string to filter events for an event subscription based on a
     * resource path prefix.
     * The format of this depends on the publisher of the events.
     * Wildcard characters are not supported in this path.
     *
     * @param {string} [eventSubscriptionUpdateParameters.filter.subjectEndsWith]
     * An optional string to filter events for an event subscription based on a
     * resource path suffix.
     * Wildcard characters are not supported in this path.
     *
     * @param {array} [eventSubscriptionUpdateParameters.filter.includedEventTypes]
     * A list of applicable event types that need to be part of the event
     * subscription.
     * If it is desired to subscribe to all event types, the string "all" needs to
     * be specified as an element in this list.
     *
     * @param {boolean}
     * [eventSubscriptionUpdateParameters.filter.isSubjectCaseSensitive] Specifies
     * if the SubjectBeginsWith and SubjectEndsWith properties of the filter
     * should be compared in a case sensitive manner.
     *
     * @param {array} [eventSubscriptionUpdateParameters.filter.advancedFilters] A
     * list of advanced filters.
     *
     * @param {array} [eventSubscriptionUpdateParameters.labels] List of user
     * defined labels.
     *
     * @param {date} [eventSubscriptionUpdateParameters.expirationTimeUtc]
     * Information about the expiration time for the event subscription.
     *
     * @param {string} [eventSubscriptionUpdateParameters.eventDeliverySchema] The
     * event delivery schema for the event subscription. Possible values include:
     * 'EventGridSchema', 'CloudEventV01Schema', 'CustomInputSchema'
     *
     * @param {object} [eventSubscriptionUpdateParameters.retryPolicy] The retry
     * policy for events. This can be used to configure maximum number of delivery
     * attempts and time to live for events.
     *
     * @param {number}
     * [eventSubscriptionUpdateParameters.retryPolicy.maxDeliveryAttempts] Maximum
     * number of delivery retry attempts for events.
     *
     * @param {number}
     * [eventSubscriptionUpdateParameters.retryPolicy.eventTimeToLiveInMinutes]
     * Time To Live (in minutes) for events.
     *
     * @param {object} [eventSubscriptionUpdateParameters.deadLetterDestination]
     * The DeadLetter destination of the event subscription.
     *
     * @param {string}
     * eventSubscriptionUpdateParameters.deadLetterDestination.endpointType
     * Polymorphic Discriminator
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<EventSubscription>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(scope: string, eventSubscriptionName: string, eventSubscriptionUpdateParameters: models.EventSubscriptionUpdateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.EventSubscription>>;

    /**
     * @summary Update an event subscription
     *
     * Asynchronously updates an existing event subscription.
     *
     * @param {string} scope The scope of existing event subscription. The scope
     * can be a subscription, or a resource group, or a top level resource
     * belonging to a resource provider namespace, or an EventGrid topic. For
     * example, use '/subscriptions/{subscriptionId}/' for a subscription,
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a
     * resource group, and
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
     * for a resource, and
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
     * for an EventGrid topic.
     *
     * @param {string} eventSubscriptionName Name of the event subscription to be
     * updated
     *
     * @param {object} eventSubscriptionUpdateParameters Updated event subscription
     * information
     *
     * @param {object} [eventSubscriptionUpdateParameters.destination] Information
     * about the destination where events have to be delivered for the event
     * subscription.
     *
     * @param {string} eventSubscriptionUpdateParameters.destination.endpointType
     * Polymorphic Discriminator
     *
     * @param {object} [eventSubscriptionUpdateParameters.filter] Information about
     * the filter for the event subscription.
     *
     * @param {string} [eventSubscriptionUpdateParameters.filter.subjectBeginsWith]
     * An optional string to filter events for an event subscription based on a
     * resource path prefix.
     * The format of this depends on the publisher of the events.
     * Wildcard characters are not supported in this path.
     *
     * @param {string} [eventSubscriptionUpdateParameters.filter.subjectEndsWith]
     * An optional string to filter events for an event subscription based on a
     * resource path suffix.
     * Wildcard characters are not supported in this path.
     *
     * @param {array} [eventSubscriptionUpdateParameters.filter.includedEventTypes]
     * A list of applicable event types that need to be part of the event
     * subscription.
     * If it is desired to subscribe to all event types, the string "all" needs to
     * be specified as an element in this list.
     *
     * @param {boolean}
     * [eventSubscriptionUpdateParameters.filter.isSubjectCaseSensitive] Specifies
     * if the SubjectBeginsWith and SubjectEndsWith properties of the filter
     * should be compared in a case sensitive manner.
     *
     * @param {array} [eventSubscriptionUpdateParameters.filter.advancedFilters] A
     * list of advanced filters.
     *
     * @param {array} [eventSubscriptionUpdateParameters.labels] List of user
     * defined labels.
     *
     * @param {date} [eventSubscriptionUpdateParameters.expirationTimeUtc]
     * Information about the expiration time for the event subscription.
     *
     * @param {string} [eventSubscriptionUpdateParameters.eventDeliverySchema] The
     * event delivery schema for the event subscription. Possible values include:
     * 'EventGridSchema', 'CloudEventV01Schema', 'CustomInputSchema'
     *
     * @param {object} [eventSubscriptionUpdateParameters.retryPolicy] The retry
     * policy for events. This can be used to configure maximum number of delivery
     * attempts and time to live for events.
     *
     * @param {number}
     * [eventSubscriptionUpdateParameters.retryPolicy.maxDeliveryAttempts] Maximum
     * number of delivery retry attempts for events.
     *
     * @param {number}
     * [eventSubscriptionUpdateParameters.retryPolicy.eventTimeToLiveInMinutes]
     * Time To Live (in minutes) for events.
     *
     * @param {object} [eventSubscriptionUpdateParameters.deadLetterDestination]
     * The DeadLetter destination of the event subscription.
     *
     * @param {string}
     * eventSubscriptionUpdateParameters.deadLetterDestination.endpointType
     * Polymorphic Discriminator
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {EventSubscription} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {EventSubscription} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link EventSubscription} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(scope: string, eventSubscriptionName: string, eventSubscriptionUpdateParameters: models.EventSubscriptionUpdateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.EventSubscription>;
    update(scope: string, eventSubscriptionName: string, eventSubscriptionUpdateParameters: models.EventSubscriptionUpdateParameters, callback: ServiceCallback<models.EventSubscription>): void;
    update(scope: string, eventSubscriptionName: string, eventSubscriptionUpdateParameters: models.EventSubscriptionUpdateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EventSubscription>): void;


    /**
     * @summary Get full URL of an event subscription
     *
     * Get the full endpoint URL for an event subscription
     *
     * @param {string} scope The scope of the event subscription. The scope can be
     * a subscription, or a resource group, or a top level resource belonging to a
     * resource provider namespace, or an EventGrid topic. For example, use
     * '/subscriptions/{subscriptionId}/' for a subscription,
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a
     * resource group, and
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
     * for a resource, and
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
     * for an EventGrid topic.
     *
     * @param {string} eventSubscriptionName Name of the event subscription
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<EventSubscriptionFullUrl>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getFullUrlWithHttpOperationResponse(scope: string, eventSubscriptionName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.EventSubscriptionFullUrl>>;

    /**
     * @summary Get full URL of an event subscription
     *
     * Get the full endpoint URL for an event subscription
     *
     * @param {string} scope The scope of the event subscription. The scope can be
     * a subscription, or a resource group, or a top level resource belonging to a
     * resource provider namespace, or an EventGrid topic. For example, use
     * '/subscriptions/{subscriptionId}/' for a subscription,
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a
     * resource group, and
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
     * for a resource, and
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
     * for an EventGrid topic.
     *
     * @param {string} eventSubscriptionName Name of the event subscription
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {EventSubscriptionFullUrl} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {EventSubscriptionFullUrl} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link EventSubscriptionFullUrl} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getFullUrl(scope: string, eventSubscriptionName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.EventSubscriptionFullUrl>;
    getFullUrl(scope: string, eventSubscriptionName: string, callback: ServiceCallback<models.EventSubscriptionFullUrl>): void;
    getFullUrl(scope: string, eventSubscriptionName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EventSubscriptionFullUrl>): void;


    /**
     * @summary Get an aggregated list of all global event subscriptions under an
     * Azure subscription
     *
     * List all aggregated global event subscriptions under a specific Azure
     * subscription
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<EventSubscriptionsListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listGlobalBySubscriptionWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.EventSubscriptionsListResult>>;

    /**
     * @summary Get an aggregated list of all global event subscriptions under an
     * Azure subscription
     *
     * List all aggregated global event subscriptions under a specific Azure
     * subscription
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {EventSubscriptionsListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {EventSubscriptionsListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link EventSubscriptionsListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listGlobalBySubscription(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.EventSubscriptionsListResult>;
    listGlobalBySubscription(callback: ServiceCallback<models.EventSubscriptionsListResult>): void;
    listGlobalBySubscription(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EventSubscriptionsListResult>): void;


    /**
     * @summary List all global event subscriptions for a topic type
     *
     * List all global event subscriptions under an Azure subscription for a topic
     * type.
     *
     * @param {string} topicTypeName Name of the topic type
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<EventSubscriptionsListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listGlobalBySubscriptionForTopicTypeWithHttpOperationResponse(topicTypeName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.EventSubscriptionsListResult>>;

    /**
     * @summary List all global event subscriptions for a topic type
     *
     * List all global event subscriptions under an Azure subscription for a topic
     * type.
     *
     * @param {string} topicTypeName Name of the topic type
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {EventSubscriptionsListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {EventSubscriptionsListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link EventSubscriptionsListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listGlobalBySubscriptionForTopicType(topicTypeName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.EventSubscriptionsListResult>;
    listGlobalBySubscriptionForTopicType(topicTypeName: string, callback: ServiceCallback<models.EventSubscriptionsListResult>): void;
    listGlobalBySubscriptionForTopicType(topicTypeName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EventSubscriptionsListResult>): void;


    /**
     * @summary List all global event subscriptions under an Azure subscription and
     * resource group
     *
     * List all global event subscriptions under a specific Azure subscription and
     * resource group
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<EventSubscriptionsListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listGlobalByResourceGroupWithHttpOperationResponse(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.EventSubscriptionsListResult>>;

    /**
     * @summary List all global event subscriptions under an Azure subscription and
     * resource group
     *
     * List all global event subscriptions under a specific Azure subscription and
     * resource group
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {EventSubscriptionsListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {EventSubscriptionsListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link EventSubscriptionsListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listGlobalByResourceGroup(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.EventSubscriptionsListResult>;
    listGlobalByResourceGroup(resourceGroupName: string, callback: ServiceCallback<models.EventSubscriptionsListResult>): void;
    listGlobalByResourceGroup(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EventSubscriptionsListResult>): void;


    /**
     * @summary List all global event subscriptions under a resource group for a
     * topic type
     *
     * List all global event subscriptions under a resource group for a specific
     * topic type.
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription.
     *
     * @param {string} topicTypeName Name of the topic type
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<EventSubscriptionsListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listGlobalByResourceGroupForTopicTypeWithHttpOperationResponse(resourceGroupName: string, topicTypeName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.EventSubscriptionsListResult>>;

    /**
     * @summary List all global event subscriptions under a resource group for a
     * topic type
     *
     * List all global event subscriptions under a resource group for a specific
     * topic type.
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription.
     *
     * @param {string} topicTypeName Name of the topic type
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {EventSubscriptionsListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {EventSubscriptionsListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link EventSubscriptionsListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listGlobalByResourceGroupForTopicType(resourceGroupName: string, topicTypeName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.EventSubscriptionsListResult>;
    listGlobalByResourceGroupForTopicType(resourceGroupName: string, topicTypeName: string, callback: ServiceCallback<models.EventSubscriptionsListResult>): void;
    listGlobalByResourceGroupForTopicType(resourceGroupName: string, topicTypeName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EventSubscriptionsListResult>): void;


    /**
     * @summary List all regional event subscriptions under an Azure subscription
     *
     * List all event subscriptions from the given location under a specific Azure
     * subscription
     *
     * @param {string} location Name of the location
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<EventSubscriptionsListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listRegionalBySubscriptionWithHttpOperationResponse(location: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.EventSubscriptionsListResult>>;

    /**
     * @summary List all regional event subscriptions under an Azure subscription
     *
     * List all event subscriptions from the given location under a specific Azure
     * subscription
     *
     * @param {string} location Name of the location
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {EventSubscriptionsListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {EventSubscriptionsListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link EventSubscriptionsListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listRegionalBySubscription(location: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.EventSubscriptionsListResult>;
    listRegionalBySubscription(location: string, callback: ServiceCallback<models.EventSubscriptionsListResult>): void;
    listRegionalBySubscription(location: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EventSubscriptionsListResult>): void;


    /**
     * @summary List all regional event subscriptions under an Azure subscription
     * and resource group
     *
     * List all event subscriptions from the given location under a specific Azure
     * subscription and resource group
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription.
     *
     * @param {string} location Name of the location
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<EventSubscriptionsListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listRegionalByResourceGroupWithHttpOperationResponse(resourceGroupName: string, location: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.EventSubscriptionsListResult>>;

    /**
     * @summary List all regional event subscriptions under an Azure subscription
     * and resource group
     *
     * List all event subscriptions from the given location under a specific Azure
     * subscription and resource group
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription.
     *
     * @param {string} location Name of the location
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {EventSubscriptionsListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {EventSubscriptionsListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link EventSubscriptionsListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listRegionalByResourceGroup(resourceGroupName: string, location: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.EventSubscriptionsListResult>;
    listRegionalByResourceGroup(resourceGroupName: string, location: string, callback: ServiceCallback<models.EventSubscriptionsListResult>): void;
    listRegionalByResourceGroup(resourceGroupName: string, location: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EventSubscriptionsListResult>): void;


    /**
     * @summary List all regional event subscriptions under an Azure subscription
     * for a topic type
     *
     * List all event subscriptions from the given location under a specific Azure
     * subscription and topic type.
     *
     * @param {string} location Name of the location
     *
     * @param {string} topicTypeName Name of the topic type
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<EventSubscriptionsListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listRegionalBySubscriptionForTopicTypeWithHttpOperationResponse(location: string, topicTypeName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.EventSubscriptionsListResult>>;

    /**
     * @summary List all regional event subscriptions under an Azure subscription
     * for a topic type
     *
     * List all event subscriptions from the given location under a specific Azure
     * subscription and topic type.
     *
     * @param {string} location Name of the location
     *
     * @param {string} topicTypeName Name of the topic type
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {EventSubscriptionsListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {EventSubscriptionsListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link EventSubscriptionsListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listRegionalBySubscriptionForTopicType(location: string, topicTypeName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.EventSubscriptionsListResult>;
    listRegionalBySubscriptionForTopicType(location: string, topicTypeName: string, callback: ServiceCallback<models.EventSubscriptionsListResult>): void;
    listRegionalBySubscriptionForTopicType(location: string, topicTypeName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EventSubscriptionsListResult>): void;


    /**
     * @summary List all regional event subscriptions under an Azure subscription
     * and resource group for a topic type
     *
     * List all event subscriptions from the given location under a specific Azure
     * subscription and resource group and topic type
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription.
     *
     * @param {string} location Name of the location
     *
     * @param {string} topicTypeName Name of the topic type
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<EventSubscriptionsListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listRegionalByResourceGroupForTopicTypeWithHttpOperationResponse(resourceGroupName: string, location: string, topicTypeName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.EventSubscriptionsListResult>>;

    /**
     * @summary List all regional event subscriptions under an Azure subscription
     * and resource group for a topic type
     *
     * List all event subscriptions from the given location under a specific Azure
     * subscription and resource group and topic type
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription.
     *
     * @param {string} location Name of the location
     *
     * @param {string} topicTypeName Name of the topic type
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {EventSubscriptionsListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {EventSubscriptionsListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link EventSubscriptionsListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listRegionalByResourceGroupForTopicType(resourceGroupName: string, location: string, topicTypeName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.EventSubscriptionsListResult>;
    listRegionalByResourceGroupForTopicType(resourceGroupName: string, location: string, topicTypeName: string, callback: ServiceCallback<models.EventSubscriptionsListResult>): void;
    listRegionalByResourceGroupForTopicType(resourceGroupName: string, location: string, topicTypeName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EventSubscriptionsListResult>): void;


    /**
     * @summary List all event subscriptions for a specific topic
     *
     * List all event subscriptions that have been created for a specific topic
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription.
     *
     * @param {string} providerNamespace Namespace of the provider of the topic
     *
     * @param {string} resourceTypeName Name of the resource type
     *
     * @param {string} resourceName Name of the resource
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<EventSubscriptionsListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceWithHttpOperationResponse(resourceGroupName: string, providerNamespace: string, resourceTypeName: string, resourceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.EventSubscriptionsListResult>>;

    /**
     * @summary List all event subscriptions for a specific topic
     *
     * List all event subscriptions that have been created for a specific topic
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription.
     *
     * @param {string} providerNamespace Namespace of the provider of the topic
     *
     * @param {string} resourceTypeName Name of the resource type
     *
     * @param {string} resourceName Name of the resource
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {EventSubscriptionsListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {EventSubscriptionsListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link EventSubscriptionsListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResource(resourceGroupName: string, providerNamespace: string, resourceTypeName: string, resourceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.EventSubscriptionsListResult>;
    listByResource(resourceGroupName: string, providerNamespace: string, resourceTypeName: string, resourceName: string, callback: ServiceCallback<models.EventSubscriptionsListResult>): void;
    listByResource(resourceGroupName: string, providerNamespace: string, resourceTypeName: string, resourceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EventSubscriptionsListResult>): void;


    /**
     * @summary List all event subscriptions for a specific domain topic
     *
     * List all event subscriptions that have been created for a specific domain
     * topic
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription.
     *
     * @param {string} domainName Name of the top level domain
     *
     * @param {string} topicName Name of the domain topic
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<EventSubscriptionsListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByDomainTopicWithHttpOperationResponse(resourceGroupName: string, domainName: string, topicName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.EventSubscriptionsListResult>>;

    /**
     * @summary List all event subscriptions for a specific domain topic
     *
     * List all event subscriptions that have been created for a specific domain
     * topic
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription.
     *
     * @param {string} domainName Name of the top level domain
     *
     * @param {string} topicName Name of the domain topic
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {EventSubscriptionsListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {EventSubscriptionsListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link EventSubscriptionsListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByDomainTopic(resourceGroupName: string, domainName: string, topicName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.EventSubscriptionsListResult>;
    listByDomainTopic(resourceGroupName: string, domainName: string, topicName: string, callback: ServiceCallback<models.EventSubscriptionsListResult>): void;
    listByDomainTopic(resourceGroupName: string, domainName: string, topicName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EventSubscriptionsListResult>): void;


    /**
     * @summary Create or update an event subscription
     *
     * Asynchronously creates a new event subscription or updates an existing event
     * subscription based on the specified scope.
     *
     * @param {string} scope The identifier of the resource to which the event
     * subscription needs to be created or updated. The scope can be a
     * subscription, or a resource group, or a top level resource belonging to a
     * resource provider namespace, or an EventGrid topic. For example, use
     * '/subscriptions/{subscriptionId}/' for a subscription,
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a
     * resource group, and
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
     * for a resource, and
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
     * for an EventGrid topic.
     *
     * @param {string} eventSubscriptionName Name of the event subscription. Event
     * subscription names must be between 3 and 64 characters in length and should
     * use alphanumeric letters only.
     *
     * @param {object} eventSubscriptionInfo Event subscription properties
     * containing the destination and filter information
     *
     * @param {object} [eventSubscriptionInfo.destination] Information about the
     * destination where events have to be delivered for the event subscription.
     *
     * @param {string} eventSubscriptionInfo.destination.endpointType Polymorphic
     * Discriminator
     *
     * @param {object} [eventSubscriptionInfo.filter] Information about the filter
     * for the event subscription.
     *
     * @param {string} [eventSubscriptionInfo.filter.subjectBeginsWith] An optional
     * string to filter events for an event subscription based on a resource path
     * prefix.
     * The format of this depends on the publisher of the events.
     * Wildcard characters are not supported in this path.
     *
     * @param {string} [eventSubscriptionInfo.filter.subjectEndsWith] An optional
     * string to filter events for an event subscription based on a resource path
     * suffix.
     * Wildcard characters are not supported in this path.
     *
     * @param {array} [eventSubscriptionInfo.filter.includedEventTypes] A list of
     * applicable event types that need to be part of the event subscription.
     * If it is desired to subscribe to all event types, the string "all" needs to
     * be specified as an element in this list.
     *
     * @param {boolean} [eventSubscriptionInfo.filter.isSubjectCaseSensitive]
     * Specifies if the SubjectBeginsWith and SubjectEndsWith properties of the
     * filter
     * should be compared in a case sensitive manner.
     *
     * @param {array} [eventSubscriptionInfo.filter.advancedFilters] A list of
     * advanced filters.
     *
     * @param {array} [eventSubscriptionInfo.labels] List of user defined labels.
     *
     * @param {date} [eventSubscriptionInfo.expirationTimeUtc] Expiration time of
     * the event subscription.
     *
     * @param {string} [eventSubscriptionInfo.eventDeliverySchema] The event
     * delivery schema for the event subscription. Possible values include:
     * 'EventGridSchema', 'CloudEventV01Schema', 'CustomInputSchema'
     *
     * @param {object} [eventSubscriptionInfo.retryPolicy] The retry policy for
     * events. This can be used to configure maximum number of delivery attempts
     * and time to live for events.
     *
     * @param {number} [eventSubscriptionInfo.retryPolicy.maxDeliveryAttempts]
     * Maximum number of delivery retry attempts for events.
     *
     * @param {number} [eventSubscriptionInfo.retryPolicy.eventTimeToLiveInMinutes]
     * Time To Live (in minutes) for events.
     *
     * @param {object} [eventSubscriptionInfo.deadLetterDestination] The DeadLetter
     * destination of the event subscription.
     *
     * @param {string} eventSubscriptionInfo.deadLetterDestination.endpointType
     * Polymorphic Discriminator
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<EventSubscription>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(scope: string, eventSubscriptionName: string, eventSubscriptionInfo: models.EventSubscription, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.EventSubscription>>;

    /**
     * @summary Create or update an event subscription
     *
     * Asynchronously creates a new event subscription or updates an existing event
     * subscription based on the specified scope.
     *
     * @param {string} scope The identifier of the resource to which the event
     * subscription needs to be created or updated. The scope can be a
     * subscription, or a resource group, or a top level resource belonging to a
     * resource provider namespace, or an EventGrid topic. For example, use
     * '/subscriptions/{subscriptionId}/' for a subscription,
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a
     * resource group, and
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
     * for a resource, and
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
     * for an EventGrid topic.
     *
     * @param {string} eventSubscriptionName Name of the event subscription. Event
     * subscription names must be between 3 and 64 characters in length and should
     * use alphanumeric letters only.
     *
     * @param {object} eventSubscriptionInfo Event subscription properties
     * containing the destination and filter information
     *
     * @param {object} [eventSubscriptionInfo.destination] Information about the
     * destination where events have to be delivered for the event subscription.
     *
     * @param {string} eventSubscriptionInfo.destination.endpointType Polymorphic
     * Discriminator
     *
     * @param {object} [eventSubscriptionInfo.filter] Information about the filter
     * for the event subscription.
     *
     * @param {string} [eventSubscriptionInfo.filter.subjectBeginsWith] An optional
     * string to filter events for an event subscription based on a resource path
     * prefix.
     * The format of this depends on the publisher of the events.
     * Wildcard characters are not supported in this path.
     *
     * @param {string} [eventSubscriptionInfo.filter.subjectEndsWith] An optional
     * string to filter events for an event subscription based on a resource path
     * suffix.
     * Wildcard characters are not supported in this path.
     *
     * @param {array} [eventSubscriptionInfo.filter.includedEventTypes] A list of
     * applicable event types that need to be part of the event subscription.
     * If it is desired to subscribe to all event types, the string "all" needs to
     * be specified as an element in this list.
     *
     * @param {boolean} [eventSubscriptionInfo.filter.isSubjectCaseSensitive]
     * Specifies if the SubjectBeginsWith and SubjectEndsWith properties of the
     * filter
     * should be compared in a case sensitive manner.
     *
     * @param {array} [eventSubscriptionInfo.filter.advancedFilters] A list of
     * advanced filters.
     *
     * @param {array} [eventSubscriptionInfo.labels] List of user defined labels.
     *
     * @param {date} [eventSubscriptionInfo.expirationTimeUtc] Expiration time of
     * the event subscription.
     *
     * @param {string} [eventSubscriptionInfo.eventDeliverySchema] The event
     * delivery schema for the event subscription. Possible values include:
     * 'EventGridSchema', 'CloudEventV01Schema', 'CustomInputSchema'
     *
     * @param {object} [eventSubscriptionInfo.retryPolicy] The retry policy for
     * events. This can be used to configure maximum number of delivery attempts
     * and time to live for events.
     *
     * @param {number} [eventSubscriptionInfo.retryPolicy.maxDeliveryAttempts]
     * Maximum number of delivery retry attempts for events.
     *
     * @param {number} [eventSubscriptionInfo.retryPolicy.eventTimeToLiveInMinutes]
     * Time To Live (in minutes) for events.
     *
     * @param {object} [eventSubscriptionInfo.deadLetterDestination] The DeadLetter
     * destination of the event subscription.
     *
     * @param {string} eventSubscriptionInfo.deadLetterDestination.endpointType
     * Polymorphic Discriminator
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {EventSubscription} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {EventSubscription} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link EventSubscription} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(scope: string, eventSubscriptionName: string, eventSubscriptionInfo: models.EventSubscription, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.EventSubscription>;
    beginCreateOrUpdate(scope: string, eventSubscriptionName: string, eventSubscriptionInfo: models.EventSubscription, callback: ServiceCallback<models.EventSubscription>): void;
    beginCreateOrUpdate(scope: string, eventSubscriptionName: string, eventSubscriptionInfo: models.EventSubscription, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EventSubscription>): void;


    /**
     * @summary Delete an event subscription
     *
     * Delete an existing event subscription
     *
     * @param {string} scope The scope of the event subscription. The scope can be
     * a subscription, or a resource group, or a top level resource belonging to a
     * resource provider namespace, or an EventGrid topic. For example, use
     * '/subscriptions/{subscriptionId}/' for a subscription,
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a
     * resource group, and
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
     * for a resource, and
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
     * for an EventGrid topic.
     *
     * @param {string} eventSubscriptionName Name of the event subscription
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(scope: string, eventSubscriptionName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Delete an event subscription
     *
     * Delete an existing event subscription
     *
     * @param {string} scope The scope of the event subscription. The scope can be
     * a subscription, or a resource group, or a top level resource belonging to a
     * resource provider namespace, or an EventGrid topic. For example, use
     * '/subscriptions/{subscriptionId}/' for a subscription,
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a
     * resource group, and
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
     * for a resource, and
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
     * for an EventGrid topic.
     *
     * @param {string} eventSubscriptionName Name of the event subscription
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(scope: string, eventSubscriptionName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(scope: string, eventSubscriptionName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(scope: string, eventSubscriptionName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Update an event subscription
     *
     * Asynchronously updates an existing event subscription.
     *
     * @param {string} scope The scope of existing event subscription. The scope
     * can be a subscription, or a resource group, or a top level resource
     * belonging to a resource provider namespace, or an EventGrid topic. For
     * example, use '/subscriptions/{subscriptionId}/' for a subscription,
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a
     * resource group, and
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
     * for a resource, and
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
     * for an EventGrid topic.
     *
     * @param {string} eventSubscriptionName Name of the event subscription to be
     * updated
     *
     * @param {object} eventSubscriptionUpdateParameters Updated event subscription
     * information
     *
     * @param {object} [eventSubscriptionUpdateParameters.destination] Information
     * about the destination where events have to be delivered for the event
     * subscription.
     *
     * @param {string} eventSubscriptionUpdateParameters.destination.endpointType
     * Polymorphic Discriminator
     *
     * @param {object} [eventSubscriptionUpdateParameters.filter] Information about
     * the filter for the event subscription.
     *
     * @param {string} [eventSubscriptionUpdateParameters.filter.subjectBeginsWith]
     * An optional string to filter events for an event subscription based on a
     * resource path prefix.
     * The format of this depends on the publisher of the events.
     * Wildcard characters are not supported in this path.
     *
     * @param {string} [eventSubscriptionUpdateParameters.filter.subjectEndsWith]
     * An optional string to filter events for an event subscription based on a
     * resource path suffix.
     * Wildcard characters are not supported in this path.
     *
     * @param {array} [eventSubscriptionUpdateParameters.filter.includedEventTypes]
     * A list of applicable event types that need to be part of the event
     * subscription.
     * If it is desired to subscribe to all event types, the string "all" needs to
     * be specified as an element in this list.
     *
     * @param {boolean}
     * [eventSubscriptionUpdateParameters.filter.isSubjectCaseSensitive] Specifies
     * if the SubjectBeginsWith and SubjectEndsWith properties of the filter
     * should be compared in a case sensitive manner.
     *
     * @param {array} [eventSubscriptionUpdateParameters.filter.advancedFilters] A
     * list of advanced filters.
     *
     * @param {array} [eventSubscriptionUpdateParameters.labels] List of user
     * defined labels.
     *
     * @param {date} [eventSubscriptionUpdateParameters.expirationTimeUtc]
     * Information about the expiration time for the event subscription.
     *
     * @param {string} [eventSubscriptionUpdateParameters.eventDeliverySchema] The
     * event delivery schema for the event subscription. Possible values include:
     * 'EventGridSchema', 'CloudEventV01Schema', 'CustomInputSchema'
     *
     * @param {object} [eventSubscriptionUpdateParameters.retryPolicy] The retry
     * policy for events. This can be used to configure maximum number of delivery
     * attempts and time to live for events.
     *
     * @param {number}
     * [eventSubscriptionUpdateParameters.retryPolicy.maxDeliveryAttempts] Maximum
     * number of delivery retry attempts for events.
     *
     * @param {number}
     * [eventSubscriptionUpdateParameters.retryPolicy.eventTimeToLiveInMinutes]
     * Time To Live (in minutes) for events.
     *
     * @param {object} [eventSubscriptionUpdateParameters.deadLetterDestination]
     * The DeadLetter destination of the event subscription.
     *
     * @param {string}
     * eventSubscriptionUpdateParameters.deadLetterDestination.endpointType
     * Polymorphic Discriminator
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<EventSubscription>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginUpdateWithHttpOperationResponse(scope: string, eventSubscriptionName: string, eventSubscriptionUpdateParameters: models.EventSubscriptionUpdateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.EventSubscription>>;

    /**
     * @summary Update an event subscription
     *
     * Asynchronously updates an existing event subscription.
     *
     * @param {string} scope The scope of existing event subscription. The scope
     * can be a subscription, or a resource group, or a top level resource
     * belonging to a resource provider namespace, or an EventGrid topic. For
     * example, use '/subscriptions/{subscriptionId}/' for a subscription,
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a
     * resource group, and
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
     * for a resource, and
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
     * for an EventGrid topic.
     *
     * @param {string} eventSubscriptionName Name of the event subscription to be
     * updated
     *
     * @param {object} eventSubscriptionUpdateParameters Updated event subscription
     * information
     *
     * @param {object} [eventSubscriptionUpdateParameters.destination] Information
     * about the destination where events have to be delivered for the event
     * subscription.
     *
     * @param {string} eventSubscriptionUpdateParameters.destination.endpointType
     * Polymorphic Discriminator
     *
     * @param {object} [eventSubscriptionUpdateParameters.filter] Information about
     * the filter for the event subscription.
     *
     * @param {string} [eventSubscriptionUpdateParameters.filter.subjectBeginsWith]
     * An optional string to filter events for an event subscription based on a
     * resource path prefix.
     * The format of this depends on the publisher of the events.
     * Wildcard characters are not supported in this path.
     *
     * @param {string} [eventSubscriptionUpdateParameters.filter.subjectEndsWith]
     * An optional string to filter events for an event subscription based on a
     * resource path suffix.
     * Wildcard characters are not supported in this path.
     *
     * @param {array} [eventSubscriptionUpdateParameters.filter.includedEventTypes]
     * A list of applicable event types that need to be part of the event
     * subscription.
     * If it is desired to subscribe to all event types, the string "all" needs to
     * be specified as an element in this list.
     *
     * @param {boolean}
     * [eventSubscriptionUpdateParameters.filter.isSubjectCaseSensitive] Specifies
     * if the SubjectBeginsWith and SubjectEndsWith properties of the filter
     * should be compared in a case sensitive manner.
     *
     * @param {array} [eventSubscriptionUpdateParameters.filter.advancedFilters] A
     * list of advanced filters.
     *
     * @param {array} [eventSubscriptionUpdateParameters.labels] List of user
     * defined labels.
     *
     * @param {date} [eventSubscriptionUpdateParameters.expirationTimeUtc]
     * Information about the expiration time for the event subscription.
     *
     * @param {string} [eventSubscriptionUpdateParameters.eventDeliverySchema] The
     * event delivery schema for the event subscription. Possible values include:
     * 'EventGridSchema', 'CloudEventV01Schema', 'CustomInputSchema'
     *
     * @param {object} [eventSubscriptionUpdateParameters.retryPolicy] The retry
     * policy for events. This can be used to configure maximum number of delivery
     * attempts and time to live for events.
     *
     * @param {number}
     * [eventSubscriptionUpdateParameters.retryPolicy.maxDeliveryAttempts] Maximum
     * number of delivery retry attempts for events.
     *
     * @param {number}
     * [eventSubscriptionUpdateParameters.retryPolicy.eventTimeToLiveInMinutes]
     * Time To Live (in minutes) for events.
     *
     * @param {object} [eventSubscriptionUpdateParameters.deadLetterDestination]
     * The DeadLetter destination of the event subscription.
     *
     * @param {string}
     * eventSubscriptionUpdateParameters.deadLetterDestination.endpointType
     * Polymorphic Discriminator
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {EventSubscription} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {EventSubscription} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link EventSubscription} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginUpdate(scope: string, eventSubscriptionName: string, eventSubscriptionUpdateParameters: models.EventSubscriptionUpdateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.EventSubscription>;
    beginUpdate(scope: string, eventSubscriptionName: string, eventSubscriptionUpdateParameters: models.EventSubscriptionUpdateParameters, callback: ServiceCallback<models.EventSubscription>): void;
    beginUpdate(scope: string, eventSubscriptionName: string, eventSubscriptionUpdateParameters: models.EventSubscriptionUpdateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EventSubscription>): void;
}

/**
 * @class
 * Operations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the EventGridManagementClient.
 */
export interface Operations {


    /**
     * @summary List available operations
     *
     * List the available operations supported by the Microsoft.EventGrid resource
     * provider
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OperationsListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OperationsListResult>>;

    /**
     * @summary List available operations
     *
     * List the available operations supported by the Microsoft.EventGrid resource
     * provider
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OperationsListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OperationsListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OperationsListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.OperationsListResult>;
    list(callback: ServiceCallback<models.OperationsListResult>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OperationsListResult>): void;
}

/**
 * @class
 * Topics
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the EventGridManagementClient.
 */
export interface Topics {


    /**
     * @summary Get a topic
     *
     * Get properties of a topic
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription.
     *
     * @param {string} topicName Name of the topic
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Topic>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, topicName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Topic>>;

    /**
     * @summary Get a topic
     *
     * Get properties of a topic
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription.
     *
     * @param {string} topicName Name of the topic
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Topic} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Topic} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Topic} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, topicName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Topic>;
    get(resourceGroupName: string, topicName: string, callback: ServiceCallback<models.Topic>): void;
    get(resourceGroupName: string, topicName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Topic>): void;


    /**
     * @summary Create a topic
     *
     * Asynchronously creates a new topic with the specified parameters.
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription.
     *
     * @param {string} topicName Name of the topic
     *
     * @param {object} topicInfo Topic information
     *
     * @param {string} [topicInfo.inputSchema] This determines the format that
     * Event Grid should expect for incoming events published to the topic.
     * Possible values include: 'EventGridSchema', 'CustomEventSchema',
     * 'CloudEventV01Schema'
     *
     * @param {object} [topicInfo.inputSchemaMapping] This enables publishing using
     * custom event schemas. An InputSchemaMapping can be specified to map various
     * properties of a source schema to various required properties of the
     * EventGridEvent schema.
     *
     * @param {string} topicInfo.inputSchemaMapping.inputSchemaMappingType
     * Polymorphic Discriminator
     *
     * @param {string} topicInfo.location Location of the resource
     *
     * @param {object} [topicInfo.tags] Tags of the resource
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Topic>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, topicName: string, topicInfo: models.Topic, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Topic>>;

    /**
     * @summary Create a topic
     *
     * Asynchronously creates a new topic with the specified parameters.
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription.
     *
     * @param {string} topicName Name of the topic
     *
     * @param {object} topicInfo Topic information
     *
     * @param {string} [topicInfo.inputSchema] This determines the format that
     * Event Grid should expect for incoming events published to the topic.
     * Possible values include: 'EventGridSchema', 'CustomEventSchema',
     * 'CloudEventV01Schema'
     *
     * @param {object} [topicInfo.inputSchemaMapping] This enables publishing using
     * custom event schemas. An InputSchemaMapping can be specified to map various
     * properties of a source schema to various required properties of the
     * EventGridEvent schema.
     *
     * @param {string} topicInfo.inputSchemaMapping.inputSchemaMappingType
     * Polymorphic Discriminator
     *
     * @param {string} topicInfo.location Location of the resource
     *
     * @param {object} [topicInfo.tags] Tags of the resource
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Topic} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Topic} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Topic} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, topicName: string, topicInfo: models.Topic, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Topic>;
    createOrUpdate(resourceGroupName: string, topicName: string, topicInfo: models.Topic, callback: ServiceCallback<models.Topic>): void;
    createOrUpdate(resourceGroupName: string, topicName: string, topicInfo: models.Topic, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Topic>): void;


    /**
     * @summary Delete a topic
     *
     * Delete existing topic
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription.
     *
     * @param {string} topicName Name of the topic
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, topicName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Delete a topic
     *
     * Delete existing topic
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription.
     *
     * @param {string} topicName Name of the topic
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, topicName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, topicName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, topicName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Update a topic
     *
     * Asynchronously updates a topic with the specified parameters.
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription.
     *
     * @param {string} topicName Name of the topic
     *
     * @param {object} topicUpdateParameters Topic update information
     *
     * @param {object} [topicUpdateParameters.tags] Tags of the resource
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Topic>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, topicName: string, topicUpdateParameters: models.TopicUpdateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Topic>>;

    /**
     * @summary Update a topic
     *
     * Asynchronously updates a topic with the specified parameters.
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription.
     *
     * @param {string} topicName Name of the topic
     *
     * @param {object} topicUpdateParameters Topic update information
     *
     * @param {object} [topicUpdateParameters.tags] Tags of the resource
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Topic} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Topic} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Topic} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, topicName: string, topicUpdateParameters: models.TopicUpdateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Topic>;
    update(resourceGroupName: string, topicName: string, topicUpdateParameters: models.TopicUpdateParameters, callback: ServiceCallback<models.Topic>): void;
    update(resourceGroupName: string, topicName: string, topicUpdateParameters: models.TopicUpdateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Topic>): void;


    /**
     * @summary List topics under an Azure subscription
     *
     * List all the topics under an Azure subscription
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<TopicsListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listBySubscriptionWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TopicsListResult>>;

    /**
     * @summary List topics under an Azure subscription
     *
     * List all the topics under an Azure subscription
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {TopicsListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {TopicsListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link TopicsListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listBySubscription(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.TopicsListResult>;
    listBySubscription(callback: ServiceCallback<models.TopicsListResult>): void;
    listBySubscription(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TopicsListResult>): void;


    /**
     * @summary List topics under a resource group
     *
     * List all the topics under a resource group
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<TopicsListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupWithHttpOperationResponse(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TopicsListResult>>;

    /**
     * @summary List topics under a resource group
     *
     * List all the topics under a resource group
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {TopicsListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {TopicsListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link TopicsListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroup(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.TopicsListResult>;
    listByResourceGroup(resourceGroupName: string, callback: ServiceCallback<models.TopicsListResult>): void;
    listByResourceGroup(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TopicsListResult>): void;


    /**
     * @summary List keys for a topic
     *
     * List the two keys used to publish to a topic
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription.
     *
     * @param {string} topicName Name of the topic
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<TopicSharedAccessKeys>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listSharedAccessKeysWithHttpOperationResponse(resourceGroupName: string, topicName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TopicSharedAccessKeys>>;

    /**
     * @summary List keys for a topic
     *
     * List the two keys used to publish to a topic
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription.
     *
     * @param {string} topicName Name of the topic
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {TopicSharedAccessKeys} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {TopicSharedAccessKeys} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link TopicSharedAccessKeys} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listSharedAccessKeys(resourceGroupName: string, topicName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.TopicSharedAccessKeys>;
    listSharedAccessKeys(resourceGroupName: string, topicName: string, callback: ServiceCallback<models.TopicSharedAccessKeys>): void;
    listSharedAccessKeys(resourceGroupName: string, topicName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TopicSharedAccessKeys>): void;


    /**
     * @summary Regenerate key for a topic
     *
     * Regenerate a shared access key for a topic
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription.
     *
     * @param {string} topicName Name of the topic
     *
     * @param {object} regenerateKeyRequest Request body to regenerate key
     *
     * @param {string} regenerateKeyRequest.keyName Key name to regenerate key1 or
     * key2
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<TopicSharedAccessKeys>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    regenerateKeyWithHttpOperationResponse(resourceGroupName: string, topicName: string, regenerateKeyRequest: models.TopicRegenerateKeyRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TopicSharedAccessKeys>>;

    /**
     * @summary Regenerate key for a topic
     *
     * Regenerate a shared access key for a topic
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription.
     *
     * @param {string} topicName Name of the topic
     *
     * @param {object} regenerateKeyRequest Request body to regenerate key
     *
     * @param {string} regenerateKeyRequest.keyName Key name to regenerate key1 or
     * key2
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {TopicSharedAccessKeys} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {TopicSharedAccessKeys} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link TopicSharedAccessKeys} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    regenerateKey(resourceGroupName: string, topicName: string, regenerateKeyRequest: models.TopicRegenerateKeyRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.TopicSharedAccessKeys>;
    regenerateKey(resourceGroupName: string, topicName: string, regenerateKeyRequest: models.TopicRegenerateKeyRequest, callback: ServiceCallback<models.TopicSharedAccessKeys>): void;
    regenerateKey(resourceGroupName: string, topicName: string, regenerateKeyRequest: models.TopicRegenerateKeyRequest, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TopicSharedAccessKeys>): void;


    /**
     * @summary List topic event types
     *
     * List event types for a topic
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription.
     *
     * @param {string} providerNamespace Namespace of the provider of the topic
     *
     * @param {string} resourceTypeName Name of the topic type
     *
     * @param {string} resourceName Name of the topic
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<EventTypesListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listEventTypesWithHttpOperationResponse(resourceGroupName: string, providerNamespace: string, resourceTypeName: string, resourceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.EventTypesListResult>>;

    /**
     * @summary List topic event types
     *
     * List event types for a topic
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription.
     *
     * @param {string} providerNamespace Namespace of the provider of the topic
     *
     * @param {string} resourceTypeName Name of the topic type
     *
     * @param {string} resourceName Name of the topic
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {EventTypesListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {EventTypesListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link EventTypesListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listEventTypes(resourceGroupName: string, providerNamespace: string, resourceTypeName: string, resourceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.EventTypesListResult>;
    listEventTypes(resourceGroupName: string, providerNamespace: string, resourceTypeName: string, resourceName: string, callback: ServiceCallback<models.EventTypesListResult>): void;
    listEventTypes(resourceGroupName: string, providerNamespace: string, resourceTypeName: string, resourceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EventTypesListResult>): void;


    /**
     * @summary Create a topic
     *
     * Asynchronously creates a new topic with the specified parameters.
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription.
     *
     * @param {string} topicName Name of the topic
     *
     * @param {object} topicInfo Topic information
     *
     * @param {string} [topicInfo.inputSchema] This determines the format that
     * Event Grid should expect for incoming events published to the topic.
     * Possible values include: 'EventGridSchema', 'CustomEventSchema',
     * 'CloudEventV01Schema'
     *
     * @param {object} [topicInfo.inputSchemaMapping] This enables publishing using
     * custom event schemas. An InputSchemaMapping can be specified to map various
     * properties of a source schema to various required properties of the
     * EventGridEvent schema.
     *
     * @param {string} topicInfo.inputSchemaMapping.inputSchemaMappingType
     * Polymorphic Discriminator
     *
     * @param {string} topicInfo.location Location of the resource
     *
     * @param {object} [topicInfo.tags] Tags of the resource
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Topic>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, topicName: string, topicInfo: models.Topic, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Topic>>;

    /**
     * @summary Create a topic
     *
     * Asynchronously creates a new topic with the specified parameters.
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription.
     *
     * @param {string} topicName Name of the topic
     *
     * @param {object} topicInfo Topic information
     *
     * @param {string} [topicInfo.inputSchema] This determines the format that
     * Event Grid should expect for incoming events published to the topic.
     * Possible values include: 'EventGridSchema', 'CustomEventSchema',
     * 'CloudEventV01Schema'
     *
     * @param {object} [topicInfo.inputSchemaMapping] This enables publishing using
     * custom event schemas. An InputSchemaMapping can be specified to map various
     * properties of a source schema to various required properties of the
     * EventGridEvent schema.
     *
     * @param {string} topicInfo.inputSchemaMapping.inputSchemaMappingType
     * Polymorphic Discriminator
     *
     * @param {string} topicInfo.location Location of the resource
     *
     * @param {object} [topicInfo.tags] Tags of the resource
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Topic} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Topic} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Topic} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(resourceGroupName: string, topicName: string, topicInfo: models.Topic, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Topic>;
    beginCreateOrUpdate(resourceGroupName: string, topicName: string, topicInfo: models.Topic, callback: ServiceCallback<models.Topic>): void;
    beginCreateOrUpdate(resourceGroupName: string, topicName: string, topicInfo: models.Topic, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Topic>): void;


    /**
     * @summary Delete a topic
     *
     * Delete existing topic
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription.
     *
     * @param {string} topicName Name of the topic
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, topicName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Delete a topic
     *
     * Delete existing topic
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription.
     *
     * @param {string} topicName Name of the topic
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(resourceGroupName: string, topicName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(resourceGroupName: string, topicName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, topicName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Update a topic
     *
     * Asynchronously updates a topic with the specified parameters.
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription.
     *
     * @param {string} topicName Name of the topic
     *
     * @param {object} topicUpdateParameters Topic update information
     *
     * @param {object} [topicUpdateParameters.tags] Tags of the resource
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Topic>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginUpdateWithHttpOperationResponse(resourceGroupName: string, topicName: string, topicUpdateParameters: models.TopicUpdateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Topic>>;

    /**
     * @summary Update a topic
     *
     * Asynchronously updates a topic with the specified parameters.
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription.
     *
     * @param {string} topicName Name of the topic
     *
     * @param {object} topicUpdateParameters Topic update information
     *
     * @param {object} [topicUpdateParameters.tags] Tags of the resource
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Topic} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Topic} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Topic} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginUpdate(resourceGroupName: string, topicName: string, topicUpdateParameters: models.TopicUpdateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Topic>;
    beginUpdate(resourceGroupName: string, topicName: string, topicUpdateParameters: models.TopicUpdateParameters, callback: ServiceCallback<models.Topic>): void;
    beginUpdate(resourceGroupName: string, topicName: string, topicUpdateParameters: models.TopicUpdateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Topic>): void;
}

/**
 * @class
 * TopicTypes
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the EventGridManagementClient.
 */
export interface TopicTypes {


    /**
     * @summary List topic types
     *
     * List all registered topic types
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<TopicTypesListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TopicTypesListResult>>;

    /**
     * @summary List topic types
     *
     * List all registered topic types
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {TopicTypesListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {TopicTypesListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link TopicTypesListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.TopicTypesListResult>;
    list(callback: ServiceCallback<models.TopicTypesListResult>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TopicTypesListResult>): void;


    /**
     * @summary Get a topic type
     *
     * Get information about a topic type
     *
     * @param {string} topicTypeName Name of the topic type
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<TopicTypeInfo>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(topicTypeName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TopicTypeInfo>>;

    /**
     * @summary Get a topic type
     *
     * Get information about a topic type
     *
     * @param {string} topicTypeName Name of the topic type
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {TopicTypeInfo} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {TopicTypeInfo} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link TopicTypeInfo} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(topicTypeName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.TopicTypeInfo>;
    get(topicTypeName: string, callback: ServiceCallback<models.TopicTypeInfo>): void;
    get(topicTypeName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TopicTypeInfo>): void;


    /**
     * @summary List event types
     *
     * List event types for a topic type
     *
     * @param {string} topicTypeName Name of the topic type
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<EventTypesListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listEventTypesWithHttpOperationResponse(topicTypeName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.EventTypesListResult>>;

    /**
     * @summary List event types
     *
     * List event types for a topic type
     *
     * @param {string} topicTypeName Name of the topic type
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {EventTypesListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {EventTypesListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link EventTypesListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listEventTypes(topicTypeName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.EventTypesListResult>;
    listEventTypes(topicTypeName: string, callback: ServiceCallback<models.EventTypesListResult>): void;
    listEventTypes(topicTypeName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EventTypesListResult>): void;
}
