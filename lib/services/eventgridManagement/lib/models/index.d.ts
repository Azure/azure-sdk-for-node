/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { BaseResource, CloudError } from "ms-rest-azure";
import * as moment from "moment";

export {

  BaseResource,
  CloudError
};

/**
 * By default, Event Grid expects events to be in the Event Grid event schema. Specifying an input
 * schema mapping enables publishing to Event Grid using a custom input schema. Currently, the only
 * supported type of InputSchemaMapping is 'JsonInputSchemaMapping'.
 */
export interface InputSchemaMapping {
  /**
   * Polymorphic Discriminator
   */
  inputSchemaMappingType: string;
}

/**
 * Definition of a Resource
 */
export interface Resource extends BaseResource {
  /**
   * Fully qualified identifier of the resource
   */
  readonly id?: string;
  /**
   * Name of the resource
   */
  readonly name?: string;
  /**
   * Type of the resource
   */
  readonly type?: string;
}

/**
 * This is used to express the source of an input schema mapping for a single target field in the
 * Event Grid Event schema. This is currently used in the mappings for the 'id', 'topic' and
 * 'eventtime' properties. This represents a field in the input event schema.
 */
export interface JsonField {
  /**
   * Name of a field in the input event schema that's to be used as the source of a mapping.
   */
  sourceField?: string;
}

/**
 * This is used to express the source of an input schema mapping for a single target field
 * in the Event Grid Event schema. This is currently used in the mappings for the 'subject',
 * 'eventtype' and 'dataversion' properties. This represents a field in the input event schema
 * along with a default value to be used, and at least one of these two properties should be
 * provided.
 */
export interface JsonFieldWithDefault {
  /**
   * Name of a field in the input event schema that's to be used as the source of a mapping.
   */
  sourceField?: string;
  /**
   * The default value to be used for mapping when a SourceField is not provided or if there's no
   * property with the specified name in the published JSON event payload.
   */
  defaultValue?: string;
}

/**
 * This enables publishing to Event Grid using a custom input schema. This can be used to map
 * properties from a custom input JSON schema to the Event Grid event schema.
 */
export interface JsonInputSchemaMapping extends InputSchemaMapping {
  /**
   * The mapping information for the Id property of the Event Grid Event.
   */
  id?: JsonField;
  /**
   * The mapping information for the Topic property of the Event Grid Event.
   */
  topic?: JsonField;
  /**
   * The mapping information for the EventTime property of the Event Grid Event.
   */
  eventTime?: JsonField;
  /**
   * The mapping information for the EventType property of the Event Grid Event.
   */
  eventType?: JsonFieldWithDefault;
  /**
   * The mapping information for the Subject property of the Event Grid Event.
   */
  subject?: JsonFieldWithDefault;
  /**
   * The mapping information for the DataVersion property of the Event Grid Event.
   */
  dataVersion?: JsonFieldWithDefault;
}

/**
 * Definition of a Tracked Resource
 */
export interface TrackedResource extends Resource {
  /**
   * Location of the resource
   */
  location: string;
  /**
   * Tags of the resource
   */
  tags?: { [propertyName: string]: string };
}

/**
 * EventGrid Domain
 */
export interface Domain extends TrackedResource {
  /**
   * Provisioning state of the domain. Possible values include: 'Creating', 'Updating', 'Deleting',
   * 'Succeeded', 'Canceled', 'Failed'
   */
  readonly provisioningState?: string;
  /**
   * Endpoint for the domain.
   */
  readonly endpoint?: string;
  /**
   * This determines the format that Event Grid should expect for incoming events published to the
   * domain. Possible values include: 'EventGridSchema', 'CustomEventSchema', 'CloudEventV01Schema'
   */
  inputSchema?: string;
  /**
   * Information about the InputSchemaMapping which specified the info about mapping event payload.
   */
  inputSchemaMapping?: InputSchemaMapping;
}

/**
 * Properties of the Domain update
 */
export interface DomainUpdateParameters {
  /**
   * Tags of the domains resource
   */
  tags?: { [propertyName: string]: string };
}

/**
 * Shared access keys of the Domain
 */
export interface DomainSharedAccessKeys {
  /**
   * Shared access key1 for the domain.
   */
  key1?: string;
  /**
   * Shared access key2 for the domain.
   */
  key2?: string;
}

/**
 * Domain regenerate share access key request
 */
export interface DomainRegenerateKeyRequest {
  /**
   * Key name to regenerate key1 or key2
   */
  keyName: string;
}

/**
 * Domain Topic
 */
export interface DomainTopic extends Resource {
  /**
   * Provisioning state of the domain topic. Possible values include: 'Creating', 'Updating',
   * 'Deleting', 'Succeeded', 'Canceled', 'Failed'
   */
  provisioningState?: string;
}

/**
 * Information about the destination for an event subscription
 */
export interface EventSubscriptionDestination {
  /**
   * Polymorphic Discriminator
   */
  endpointType: string;
}

/**
 * This is the base type that represents an advanced filter. To configure an advanced filter, do
 * not directly instantiate an object of this class. Instead, instantiate an object of a derived
 * class such as BoolEqualsAdvancedFilter, NumberInAdvancedFilter, StringEqualsAdvancedFilter etc.
 * depending on the type of the key based on which you want to filter.
 */
export interface AdvancedFilter {
  /**
   * The field/property in the event based on which you want to filter.
   */
  key?: string;
  /**
   * Polymorphic Discriminator
   */
  operatorType: string;
}

/**
 * Filter for the Event Subscription
 */
export interface EventSubscriptionFilter {
  /**
   * An optional string to filter events for an event subscription based on a resource path prefix.
   * The format of this depends on the publisher of the events.
   * Wildcard characters are not supported in this path.
   */
  subjectBeginsWith?: string;
  /**
   * An optional string to filter events for an event subscription based on a resource path suffix.
   * Wildcard characters are not supported in this path.
   */
  subjectEndsWith?: string;
  /**
   * A list of applicable event types that need to be part of the event subscription. If it is
   * desired to subscribe to all default event types, set the IncludedEventTypes to null.
   */
  includedEventTypes?: string[];
  /**
   * Specifies if the SubjectBeginsWith and SubjectEndsWith properties of the filter
   * should be compared in a case sensitive manner.
   */
  isSubjectCaseSensitive?: boolean;
  /**
   * An array of advanced filters that are used for filtering event subscriptions.
   */
  advancedFilters?: AdvancedFilter[];
}

/**
 * Information about the retry policy for an event subscription
 */
export interface RetryPolicy {
  /**
   * Maximum number of delivery retry attempts for events.
   */
  maxDeliveryAttempts?: number;
  /**
   * Time To Live (in minutes) for events.
   */
  eventTimeToLiveInMinutes?: number;
}

/**
 * Information about the dead letter destination for an event subscription. To configure a
 * deadletter destination, do not directly instantiate an object of this class. Instead,
 * instantiate an object of a derived class. Currently, StorageBlobDeadLetterDestination is the
 * only class that derives from this class.
 */
export interface DeadLetterDestination {
  /**
   * Polymorphic Discriminator
   */
  endpointType: string;
}

/**
 * NumberIn Advanced Filter.
 */
export interface NumberInAdvancedFilter extends AdvancedFilter {
  /**
   * The set of filter values.
   */
  values?: number[];
}

/**
 * Information about the storage blob based dead letter destination.
 */
export interface StorageBlobDeadLetterDestination extends DeadLetterDestination {
  /**
   * The Azure Resource ID of the storage account that is the destination of the deadletter events
   */
  resourceId?: string;
  /**
   * The name of the Storage blob container that is the destination of the deadletter events
   */
  blobContainerName?: string;
}

/**
 * NumberNotIn Advanced Filter.
 */
export interface NumberNotInAdvancedFilter extends AdvancedFilter {
  /**
   * The set of filter values.
   */
  values?: number[];
}

/**
 * NumberLessThan Advanced Filter.
 */
export interface NumberLessThanAdvancedFilter extends AdvancedFilter {
  /**
   * The filter value.
   */
  value?: number;
}

/**
 * NumberGreaterThan Advanced Filter.
 */
export interface NumberGreaterThanAdvancedFilter extends AdvancedFilter {
  /**
   * The filter value.
   */
  value?: number;
}

/**
 * NumberLessThanOrEquals Advanced Filter.
 */
export interface NumberLessThanOrEqualsAdvancedFilter extends AdvancedFilter {
  /**
   * The filter value.
   */
  value?: number;
}

/**
 * NumberGreaterThanOrEquals Advanced Filter.
 */
export interface NumberGreaterThanOrEqualsAdvancedFilter extends AdvancedFilter {
  /**
   * The filter value.
   */
  value?: number;
}

/**
 * BoolEquals Advanced Filter.
 */
export interface BoolEqualsAdvancedFilter extends AdvancedFilter {
  /**
   * The boolean filter value.
   */
  value?: boolean;
}

/**
 * StringIn Advanced Filter.
 */
export interface StringInAdvancedFilter extends AdvancedFilter {
  /**
   * The set of filter values.
   */
  values?: string[];
}

/**
 * StringNotIn Advanced Filter.
 */
export interface StringNotInAdvancedFilter extends AdvancedFilter {
  /**
   * The set of filter values.
   */
  values?: string[];
}

/**
 * StringBeginsWith Advanced Filter.
 */
export interface StringBeginsWithAdvancedFilter extends AdvancedFilter {
  /**
   * The set of filter values.
   */
  values?: string[];
}

/**
 * StringEndsWith Advanced Filter.
 */
export interface StringEndsWithAdvancedFilter extends AdvancedFilter {
  /**
   * The set of filter values.
   */
  values?: string[];
}

/**
 * StringContains Advanced Filter.
 */
export interface StringContainsAdvancedFilter extends AdvancedFilter {
  /**
   * The set of filter values.
   */
  values?: string[];
}

/**
 * Information about the webhook destination for an event subscription
 */
export interface WebHookEventSubscriptionDestination extends EventSubscriptionDestination {
  /**
   * The URL that represents the endpoint of the destination of an event subscription.
   */
  endpointUrl?: string;
  /**
   * The base URL that represents the endpoint of the destination of an event subscription.
   */
  readonly endpointBaseUrl?: string;
}

/**
 * Information about the event hub destination for an event subscription
 */
export interface EventHubEventSubscriptionDestination extends EventSubscriptionDestination {
  /**
   * The Azure Resource Id that represents the endpoint of an Event Hub destination of an event
   * subscription.
   */
  resourceId?: string;
}

/**
 * Information about the storage queue destination for an event subscription.
 */
export interface StorageQueueEventSubscriptionDestination extends EventSubscriptionDestination {
  /**
   * The Azure Resource ID of the storage account that contains the queue that is the destination
   * of an event subscription.
   */
  resourceId?: string;
  /**
   * The name of the Storage queue under a storage account that is the destination of an event
   * subscription.
   */
  queueName?: string;
}

/**
 * Information about the HybridConnection destination for an event subscription.
 */
export interface HybridConnectionEventSubscriptionDestination extends EventSubscriptionDestination {
  /**
   * The Azure Resource ID of an hybrid connection that is the destination of an event
   * subscription.
   */
  resourceId?: string;
}

/**
 * Information about the service bus destination for an event subscription
 */
export interface ServiceBusQueueEventSubscriptionDestination extends EventSubscriptionDestination {
  /**
   * The Azure Resource Id that represents the endpoint of the Service Bus destination of an event
   * subscription.
   */
  resourceId?: string;
}

/**
 * Event Subscription
 */
export interface EventSubscription extends Resource {
  /**
   * Name of the topic of the event subscription.
   */
  readonly topic?: string;
  /**
   * Provisioning state of the event subscription. Possible values include: 'Creating', 'Updating',
   * 'Deleting', 'Succeeded', 'Canceled', 'Failed', 'AwaitingManualAction'
   */
  readonly provisioningState?: string;
  /**
   * Information about the destination where events have to be delivered for the event
   * subscription.
   */
  destination?: EventSubscriptionDestination;
  /**
   * Information about the filter for the event subscription.
   */
  filter?: EventSubscriptionFilter;
  /**
   * List of user defined labels.
   */
  labels?: string[];
  /**
   * Expiration time of the event subscription.
   */
  expirationTimeUtc?: Date;
  /**
   * The event delivery schema for the event subscription. Possible values include:
   * 'EventGridSchema', 'CloudEventV01Schema', 'CustomInputSchema'
   */
  eventDeliverySchema?: string;
  /**
   * The retry policy for events. This can be used to configure maximum number of delivery attempts
   * and time to live for events.
   */
  retryPolicy?: RetryPolicy;
  /**
   * The DeadLetter destination of the event subscription.
   */
  deadLetterDestination?: DeadLetterDestination;
}

/**
 * Properties of the Event Subscription update
 */
export interface EventSubscriptionUpdateParameters {
  /**
   * Information about the destination where events have to be delivered for the event
   * subscription.
   */
  destination?: EventSubscriptionDestination;
  /**
   * Information about the filter for the event subscription.
   */
  filter?: EventSubscriptionFilter;
  /**
   * List of user defined labels.
   */
  labels?: string[];
  /**
   * Information about the expiration time for the event subscription.
   */
  expirationTimeUtc?: Date;
  /**
   * The event delivery schema for the event subscription. Possible values include:
   * 'EventGridSchema', 'CloudEventV01Schema', 'CustomInputSchema'
   */
  eventDeliverySchema?: string;
  /**
   * The retry policy for events. This can be used to configure maximum number of delivery attempts
   * and time to live for events.
   */
  retryPolicy?: RetryPolicy;
  /**
   * The DeadLetter destination of the event subscription.
   */
  deadLetterDestination?: DeadLetterDestination;
}

/**
 * Full endpoint url of an event subscription
 */
export interface EventSubscriptionFullUrl {
  /**
   * The URL that represents the endpoint of the destination of an event subscription.
   */
  endpointUrl?: string;
}

/**
 * Information about an operation
 */
export interface OperationInfo {
  /**
   * Name of the provider
   */
  provider?: string;
  /**
   * Name of the resource type
   */
  resource?: string;
  /**
   * Name of the operation
   */
  operation?: string;
  /**
   * Description of the operation
   */
  description?: string;
}

/**
 * Represents an operation returned by the GetOperations request
 */
export interface Operation {
  /**
   * Name of the operation
   */
  name?: string;
  /**
   * Display name of the operation
   */
  display?: OperationInfo;
  /**
   * Origin of the operation
   */
  origin?: string;
  /**
   * Properties of the operation
   */
  properties?: any;
}

/**
 * EventGrid Topic
 */
export interface Topic extends TrackedResource {
  /**
   * Provisioning state of the topic. Possible values include: 'Creating', 'Updating', 'Deleting',
   * 'Succeeded', 'Canceled', 'Failed'
   */
  readonly provisioningState?: string;
  /**
   * Endpoint for the topic.
   */
  readonly endpoint?: string;
  /**
   * This determines the format that Event Grid should expect for incoming events published to the
   * topic. Possible values include: 'EventGridSchema', 'CustomEventSchema', 'CloudEventV01Schema'
   */
  inputSchema?: string;
  /**
   * This enables publishing using custom event schemas. An InputSchemaMapping can be specified to
   * map various properties of a source schema to various required properties of the EventGridEvent
   * schema.
   */
  inputSchemaMapping?: InputSchemaMapping;
}

/**
 * Properties of the Topic update
 */
export interface TopicUpdateParameters {
  /**
   * Tags of the resource
   */
  tags?: { [propertyName: string]: string };
}

/**
 * Shared access keys of the Topic
 */
export interface TopicSharedAccessKeys {
  /**
   * Shared access key1 for the topic.
   */
  key1?: string;
  /**
   * Shared access key2 for the topic.
   */
  key2?: string;
}

/**
 * Topic regenerate share access key request
 */
export interface TopicRegenerateKeyRequest {
  /**
   * Key name to regenerate key1 or key2
   */
  keyName: string;
}

/**
 * Event Type for a subject under a topic
 */
export interface EventType extends Resource {
  /**
   * Display name of the event type.
   */
  displayName?: string;
  /**
   * Description of the event type.
   */
  description?: string;
  /**
   * Url of the schema for this event type.
   */
  schemaUrl?: string;
  /**
   * IsInDefaultSet flag of the event type.
   */
  isInDefaultSet?: boolean;
}

/**
 * Properties of a topic type info.
 */
export interface TopicTypeInfo extends Resource {
  /**
   * Namespace of the provider of the topic type.
   */
  provider?: string;
  /**
   * Display Name for the topic type.
   */
  displayName?: string;
  /**
   * Description of the topic type.
   */
  description?: string;
  /**
   * Region type of the resource. Possible values include: 'RegionalResource', 'GlobalResource'
   */
  resourceRegionType?: string;
  /**
   * Provisioning state of the topic type. Possible values include: 'Creating', 'Updating',
   * 'Deleting', 'Succeeded', 'Canceled', 'Failed'
   */
  provisioningState?: string;
  /**
   * List of locations supported by this topic type.
   */
  supportedLocations?: string[];
}

/**
 * Result of the List Domains operation
 */
export interface DomainsListResult extends Array<Domain> {
  /**
   * A link for the next page of domains
   */
  nextLink?: string;
}

/**
 * Result of the List Domain Topics operation
 */
export interface DomainTopicsListResult extends Array<DomainTopic> {
  /**
   * A link for the next page of domain topics
   */
  nextLink?: string;
}

/**
 * Result of the List EventSubscriptions operation
 */
export interface EventSubscriptionsListResult extends Array<EventSubscription> {
  /**
   * A link for the next page of event subscriptions
   */
  nextLink?: string;
}

/**
 * Result of the List Operations operation
 */
export interface OperationsListResult extends Array<Operation> {
}

/**
 * Result of the List Topics operation
 */
export interface TopicsListResult extends Array<Topic> {
  /**
   * A link for the next page of topics
   */
  nextLink?: string;
}

/**
 * Result of the List Event Types operation
 */
export interface EventTypesListResult extends Array<EventType> {
}

/**
 * Result of the List Topic Types operation
 */
export interface TopicTypesListResult extends Array<TopicTypeInfo> {
}
