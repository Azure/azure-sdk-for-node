/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * EventGrid Topic
 *
 * @extends models['TrackedResource']
 */
class Topic extends models['TrackedResource'] {
  /**
   * Create a Topic.
   * @property {string} [provisioningState] Provisioning state of the topic.
   * Possible values include: 'Creating', 'Updating', 'Deleting', 'Succeeded',
   * 'Canceled', 'Failed'
   * @property {string} [endpoint] Endpoint for the topic.
   * @property {string} [inputSchema] This determines the format that Event
   * Grid should expect for incoming events published to the topic. Possible
   * values include: 'EventGridSchema', 'CustomEventSchema',
   * 'CloudEventV01Schema'. Default value: 'EventGridSchema' .
   * @property {object} [inputSchemaMapping] This enables publishing using
   * custom event schemas. An InputSchemaMapping can be specified to map
   * various properties of a source schema to various required properties of
   * the EventGridEvent schema.
   * @property {string} [inputSchemaMapping.inputSchemaMappingType] Polymorphic
   * Discriminator
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of Topic
   *
   * @returns {object} metadata of Topic
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'Topic',
      type: {
        name: 'Composite',
        className: 'Topic',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          location: {
            required: true,
            serializedName: 'location',
            type: {
              name: 'String'
            }
          },
          tags: {
            required: false,
            serializedName: 'tags',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          provisioningState: {
            required: false,
            readOnly: true,
            serializedName: 'properties.provisioningState',
            type: {
              name: 'String'
            }
          },
          endpoint: {
            required: false,
            readOnly: true,
            serializedName: 'properties.endpoint',
            type: {
              name: 'String'
            }
          },
          inputSchema: {
            required: false,
            serializedName: 'properties.inputSchema',
            defaultValue: 'EventGridSchema',
            type: {
              name: 'String'
            }
          },
          inputSchemaMapping: {
            required: false,
            serializedName: 'properties.inputSchemaMapping',
            type: {
              name: 'Composite',
              polymorphicDiscriminator: {
                serializedName: 'inputSchemaMappingType',
                clientName: 'inputSchemaMappingType'
              },
              uberParent: 'InputSchemaMapping',
              className: 'InputSchemaMapping'
            }
          }
        }
      }
    };
  }
}

module.exports = Topic;
