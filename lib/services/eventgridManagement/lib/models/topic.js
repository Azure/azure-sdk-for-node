/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * EventGrid Topic
 *
 * @extends models['TrackedResource']
 */
class Topic extends models['TrackedResource'] {
  /**
   * Create a Topic.
   * @member {string} [provisioningState] Provisioning state of the topic.
   * Possible values include: 'Creating', 'Updating', 'Deleting', 'Succeeded',
   * 'Canceled', 'Failed'
   * @member {string} [endpoint] Endpoint for the topic.
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of Topic
   *
   * @returns {object} metadata of Topic
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'Topic',
      type: {
        name: 'Composite',
        className: 'Topic',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          location: {
            required: true,
            serializedName: 'location',
            type: {
              name: 'String'
            }
          },
          tags: {
            required: false,
            serializedName: 'tags',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          provisioningState: {
            required: false,
            readOnly: true,
            serializedName: 'properties.provisioningState',
            type: {
              name: 'String'
            }
          },
          endpoint: {
            required: false,
            readOnly: true,
            serializedName: 'properties.endpoint',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = Topic;
