/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * VM Insights onboarding status for a resource.
 *
 * @extends models['ProxyResource']
 */
class VMInsightsOnboardingStatus extends models['ProxyResource'] {
  /**
   * Create a VMInsightsOnboardingStatus.
   * @property {string} resourceId Azure Resource Manager identifier of the
   * resource whose onboarding status is being represented.
   * @property {string} onboardingStatus The onboarding status for the
   * resource. Note that, a higher level scope, e.g., resource group or
   * subscription, is considered onboarded if at least one resource under it is
   * onboarded. Possible values include: 'onboarded', 'notOnboarded', 'unknown'
   * @property {string} dataStatus The status of VM Insights data from the
   * resource. When reported as `present` the data array will contain
   * information about the data containers to which data for the specified
   * resource is being routed. Possible values include: 'present', 'notPresent'
   * @property {array} [data] Containers that currently store VM Insights data
   * for the specified resource.
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of VMInsightsOnboardingStatus
   *
   * @returns {object} metadata of VMInsightsOnboardingStatus
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'VMInsightsOnboardingStatus',
      type: {
        name: 'Composite',
        className: 'VMInsightsOnboardingStatus',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          resourceId: {
            required: true,
            serializedName: 'properties.resourceId',
            type: {
              name: 'String'
            }
          },
          onboardingStatus: {
            required: true,
            serializedName: 'properties.onboardingStatus',
            type: {
              name: 'String'
            }
          },
          dataStatus: {
            required: true,
            serializedName: 'properties.dataStatus',
            type: {
              name: 'String'
            }
          },
          data: {
            required: false,
            serializedName: 'properties.data',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'DataContainerElementType',
                  type: {
                    name: 'Composite',
                    className: 'DataContainer'
                  }
              }
            }
          }
        }
      }
    };
  }
}

module.exports = VMInsightsOnboardingStatus;
