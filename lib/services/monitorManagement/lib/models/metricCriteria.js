/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Criterion to filter metrics.
 *
 */
class MetricCriteria {
  /**
   * Create a MetricCriteria.
   * @member {string} name Name of the criteria.
   * @member {string} metricName Name of the metric.
   * @member {string} [metricNamespace] Namespace of the metric.
   * @member {string} operator the criteria operator. Possible values include:
   * 'Equals', 'NotEquals', 'GreaterThan', 'GreaterThanOrEqual', 'LessThan',
   * 'LessThanOrEqual'
   * @member {string} timeAggregation the criteria time aggregation types.
   * Possible values include: 'Average', 'Minimum', 'Maximum', 'Total'
   * @member {number} threshold the criteria threshold value that activates the
   * alert.
   * @member {array} [dimensions] List of dimension conditions.
   */
  constructor() {
  }

  /**
   * Defines the metadata of MetricCriteria
   *
   * @returns {object} metadata of MetricCriteria
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'MetricCriteria',
      type: {
        name: 'Composite',
        className: 'MetricCriteria',
        modelProperties: {
          name: {
            required: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          metricName: {
            required: true,
            serializedName: 'metricName',
            type: {
              name: 'String'
            }
          },
          metricNamespace: {
            required: false,
            serializedName: 'metricNamespace',
            type: {
              name: 'String'
            }
          },
          operator: {
            required: true,
            serializedName: 'operator',
            type: {
              name: 'String'
            }
          },
          timeAggregation: {
            required: true,
            serializedName: 'timeAggregation',
            type: {
              name: 'String'
            }
          },
          threshold: {
            required: true,
            serializedName: 'threshold',
            type: {
              name: 'Number'
            }
          },
          dimensions: {
            required: false,
            serializedName: 'dimensions',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'MetricDimensionElementType',
                  type: {
                    name: 'Composite',
                    className: 'MetricDimension'
                  }
              }
            }
          }
        }
      }
    };
  }
}

module.exports = MetricCriteria;
