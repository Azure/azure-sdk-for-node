/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback, HttpOperationResponse } from 'ms-rest';
import * as models from '../models';


/**
 * @class
 * AutoscaleSettings
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the MonitorManagementClient.
 */
export interface AutoscaleSettings {


    /**
     * Lists the autoscale settings for a resource group
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AutoscaleSettingResourceCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupWithHttpOperationResponse(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AutoscaleSettingResourceCollection>>;

    /**
     * Lists the autoscale settings for a resource group
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AutoscaleSettingResourceCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AutoscaleSettingResourceCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AutoscaleSettingResourceCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroup(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AutoscaleSettingResourceCollection>;
    listByResourceGroup(resourceGroupName: string, callback: ServiceCallback<models.AutoscaleSettingResourceCollection>): void;
    listByResourceGroup(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AutoscaleSettingResourceCollection>): void;


    /**
     * Creates or updates an autoscale setting.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} autoscaleSettingName The autoscale setting name.
     *
     * @param {object} parameters Parameters supplied to the operation.
     *
     * @param {array} parameters.profiles the collection of automatic scaling
     * profiles that specify different scaling parameters for different time
     * periods. A maximum of 20 profiles can be specified.
     *
     * @param {array} [parameters.notifications] the collection of notifications.
     *
     * @param {boolean} [parameters.enabled] the enabled flag. Specifies whether
     * automatic scaling is enabled for the resource. The default value is 'true'.
     *
     * @param {string} [parameters.autoscaleSettingResourceName] the name of the
     * autoscale setting.
     *
     * @param {string} [parameters.targetResourceUri] the resource identifier of
     * the resource that the autoscale setting should be added to.
     *
     * @param {string} parameters.location Resource location
     *
     * @param {object} [parameters.tags] Resource tags
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AutoscaleSettingResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, autoscaleSettingName: string, parameters: models.AutoscaleSettingResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AutoscaleSettingResource>>;

    /**
     * Creates or updates an autoscale setting.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} autoscaleSettingName The autoscale setting name.
     *
     * @param {object} parameters Parameters supplied to the operation.
     *
     * @param {array} parameters.profiles the collection of automatic scaling
     * profiles that specify different scaling parameters for different time
     * periods. A maximum of 20 profiles can be specified.
     *
     * @param {array} [parameters.notifications] the collection of notifications.
     *
     * @param {boolean} [parameters.enabled] the enabled flag. Specifies whether
     * automatic scaling is enabled for the resource. The default value is 'true'.
     *
     * @param {string} [parameters.autoscaleSettingResourceName] the name of the
     * autoscale setting.
     *
     * @param {string} [parameters.targetResourceUri] the resource identifier of
     * the resource that the autoscale setting should be added to.
     *
     * @param {string} parameters.location Resource location
     *
     * @param {object} [parameters.tags] Resource tags
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AutoscaleSettingResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AutoscaleSettingResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AutoscaleSettingResource} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, autoscaleSettingName: string, parameters: models.AutoscaleSettingResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AutoscaleSettingResource>;
    createOrUpdate(resourceGroupName: string, autoscaleSettingName: string, parameters: models.AutoscaleSettingResource, callback: ServiceCallback<models.AutoscaleSettingResource>): void;
    createOrUpdate(resourceGroupName: string, autoscaleSettingName: string, parameters: models.AutoscaleSettingResource, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AutoscaleSettingResource>): void;


    /**
     * Deletes and autoscale setting
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} autoscaleSettingName The autoscale setting name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, autoscaleSettingName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes and autoscale setting
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} autoscaleSettingName The autoscale setting name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, autoscaleSettingName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, autoscaleSettingName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, autoscaleSettingName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets an autoscale setting
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} autoscaleSettingName The autoscale setting name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AutoscaleSettingResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, autoscaleSettingName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AutoscaleSettingResource>>;

    /**
     * Gets an autoscale setting
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} autoscaleSettingName The autoscale setting name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AutoscaleSettingResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AutoscaleSettingResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AutoscaleSettingResource} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, autoscaleSettingName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AutoscaleSettingResource>;
    get(resourceGroupName: string, autoscaleSettingName: string, callback: ServiceCallback<models.AutoscaleSettingResource>): void;
    get(resourceGroupName: string, autoscaleSettingName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AutoscaleSettingResource>): void;


    /**
     * Updates an existing AutoscaleSettingsResource. To update other fields use
     * the CreateOrUpdate method.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} autoscaleSettingName The autoscale setting name.
     *
     * @param {object} autoscaleSettingResource Parameters supplied to the
     * operation.
     *
     * @param {object} [autoscaleSettingResource.tags] Resource tags
     *
     * @param {array} autoscaleSettingResource.profiles the collection of automatic
     * scaling profiles that specify different scaling parameters for different
     * time periods. A maximum of 20 profiles can be specified.
     *
     * @param {array} [autoscaleSettingResource.notifications] the collection of
     * notifications.
     *
     * @param {boolean} [autoscaleSettingResource.enabled] the enabled flag.
     * Specifies whether automatic scaling is enabled for the resource. The default
     * value is 'true'.
     *
     * @param {string} [autoscaleSettingResource.name] the name of the autoscale
     * setting.
     *
     * @param {string} [autoscaleSettingResource.targetResourceUri] the resource
     * identifier of the resource that the autoscale setting should be added to.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AutoscaleSettingResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, autoscaleSettingName: string, autoscaleSettingResource: models.AutoscaleSettingResourcePatch, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AutoscaleSettingResource>>;

    /**
     * Updates an existing AutoscaleSettingsResource. To update other fields use
     * the CreateOrUpdate method.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} autoscaleSettingName The autoscale setting name.
     *
     * @param {object} autoscaleSettingResource Parameters supplied to the
     * operation.
     *
     * @param {object} [autoscaleSettingResource.tags] Resource tags
     *
     * @param {array} autoscaleSettingResource.profiles the collection of automatic
     * scaling profiles that specify different scaling parameters for different
     * time periods. A maximum of 20 profiles can be specified.
     *
     * @param {array} [autoscaleSettingResource.notifications] the collection of
     * notifications.
     *
     * @param {boolean} [autoscaleSettingResource.enabled] the enabled flag.
     * Specifies whether automatic scaling is enabled for the resource. The default
     * value is 'true'.
     *
     * @param {string} [autoscaleSettingResource.name] the name of the autoscale
     * setting.
     *
     * @param {string} [autoscaleSettingResource.targetResourceUri] the resource
     * identifier of the resource that the autoscale setting should be added to.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AutoscaleSettingResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AutoscaleSettingResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AutoscaleSettingResource} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, autoscaleSettingName: string, autoscaleSettingResource: models.AutoscaleSettingResourcePatch, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AutoscaleSettingResource>;
    update(resourceGroupName: string, autoscaleSettingName: string, autoscaleSettingResource: models.AutoscaleSettingResourcePatch, callback: ServiceCallback<models.AutoscaleSettingResource>): void;
    update(resourceGroupName: string, autoscaleSettingName: string, autoscaleSettingResource: models.AutoscaleSettingResourcePatch, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AutoscaleSettingResource>): void;


    /**
     * Lists the autoscale settings for a resource group
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AutoscaleSettingResourceCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AutoscaleSettingResourceCollection>>;

    /**
     * Lists the autoscale settings for a resource group
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AutoscaleSettingResourceCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AutoscaleSettingResourceCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AutoscaleSettingResourceCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroupNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AutoscaleSettingResourceCollection>;
    listByResourceGroupNext(nextPageLink: string, callback: ServiceCallback<models.AutoscaleSettingResourceCollection>): void;
    listByResourceGroupNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AutoscaleSettingResourceCollection>): void;
}

/**
 * @class
 * Operations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the MonitorManagementClient.
 */
export interface Operations {


    /**
     * Lists all of the available operations from Microsoft.Insights provider.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OperationListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OperationListResult>>;

    /**
     * Lists all of the available operations from Microsoft.Insights provider.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OperationListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OperationListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OperationListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.OperationListResult>;
    list(callback: ServiceCallback<models.OperationListResult>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OperationListResult>): void;
}

/**
 * @class
 * AlertRuleIncidents
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the MonitorManagementClient.
 */
export interface AlertRuleIncidents {


    /**
     * Gets an incident associated to an alert rule
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} ruleName The name of the rule.
     *
     * @param {string} incidentName The name of the incident to retrieve.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Incident>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, ruleName: string, incidentName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Incident>>;

    /**
     * Gets an incident associated to an alert rule
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} ruleName The name of the rule.
     *
     * @param {string} incidentName The name of the incident to retrieve.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Incident} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Incident} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Incident} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, ruleName: string, incidentName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Incident>;
    get(resourceGroupName: string, ruleName: string, incidentName: string, callback: ServiceCallback<models.Incident>): void;
    get(resourceGroupName: string, ruleName: string, incidentName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Incident>): void;


    /**
     * Gets a list of incidents associated to an alert rule
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} ruleName The name of the rule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<IncidentListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByAlertRuleWithHttpOperationResponse(resourceGroupName: string, ruleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.IncidentListResult>>;

    /**
     * Gets a list of incidents associated to an alert rule
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} ruleName The name of the rule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {IncidentListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {IncidentListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link IncidentListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByAlertRule(resourceGroupName: string, ruleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.IncidentListResult>;
    listByAlertRule(resourceGroupName: string, ruleName: string, callback: ServiceCallback<models.IncidentListResult>): void;
    listByAlertRule(resourceGroupName: string, ruleName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.IncidentListResult>): void;
}

/**
 * @class
 * AlertRules
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the MonitorManagementClient.
 */
export interface AlertRules {


    /**
     * Creates or updates an alert rule.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} ruleName The name of the rule.
     *
     * @param {object} parameters The parameters of the rule to create or update.
     *
     * @param {string} parameters.alertRuleResourceName the name of the alert rule.
     *
     * @param {string} [parameters.description] the description of the alert rule
     * that will be included in the alert email.
     *
     * @param {boolean} parameters.isEnabled the flag that indicates whether the
     * alert rule is enabled.
     *
     * @param {object} parameters.condition the condition that results in the alert
     * rule being activated.
     *
     * @param {object} [parameters.condition.dataSource] the resource from which
     * the rule collects its data. For this type dataSource will always be of type
     * RuleMetricDataSource.
     *
     * @param {string} [parameters.condition.dataSource.resourceUri] the resource
     * identifier of the resource the rule monitors. **NOTE**: this property cannot
     * be updated for an existing rule.
     *
     * @param {string} parameters.condition.dataSource.odatatype Polymorphic
     * Discriminator
     *
     * @param {string} parameters.condition.odatatype Polymorphic Discriminator
     *
     * @param {array} [parameters.actions] the array of actions that are performed
     * when the alert rule becomes active, and when an alert condition is resolved.
     *
     * @param {string} parameters.location Resource location
     *
     * @param {object} [parameters.tags] Resource tags
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AlertRuleResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, ruleName: string, parameters: models.AlertRuleResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AlertRuleResource>>;

    /**
     * Creates or updates an alert rule.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} ruleName The name of the rule.
     *
     * @param {object} parameters The parameters of the rule to create or update.
     *
     * @param {string} parameters.alertRuleResourceName the name of the alert rule.
     *
     * @param {string} [parameters.description] the description of the alert rule
     * that will be included in the alert email.
     *
     * @param {boolean} parameters.isEnabled the flag that indicates whether the
     * alert rule is enabled.
     *
     * @param {object} parameters.condition the condition that results in the alert
     * rule being activated.
     *
     * @param {object} [parameters.condition.dataSource] the resource from which
     * the rule collects its data. For this type dataSource will always be of type
     * RuleMetricDataSource.
     *
     * @param {string} [parameters.condition.dataSource.resourceUri] the resource
     * identifier of the resource the rule monitors. **NOTE**: this property cannot
     * be updated for an existing rule.
     *
     * @param {string} parameters.condition.dataSource.odatatype Polymorphic
     * Discriminator
     *
     * @param {string} parameters.condition.odatatype Polymorphic Discriminator
     *
     * @param {array} [parameters.actions] the array of actions that are performed
     * when the alert rule becomes active, and when an alert condition is resolved.
     *
     * @param {string} parameters.location Resource location
     *
     * @param {object} [parameters.tags] Resource tags
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AlertRuleResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AlertRuleResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AlertRuleResource} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, ruleName: string, parameters: models.AlertRuleResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AlertRuleResource>;
    createOrUpdate(resourceGroupName: string, ruleName: string, parameters: models.AlertRuleResource, callback: ServiceCallback<models.AlertRuleResource>): void;
    createOrUpdate(resourceGroupName: string, ruleName: string, parameters: models.AlertRuleResource, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AlertRuleResource>): void;


    /**
     * Deletes an alert rule
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} ruleName The name of the rule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, ruleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes an alert rule
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} ruleName The name of the rule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, ruleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, ruleName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, ruleName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets an alert rule
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} ruleName The name of the rule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AlertRuleResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, ruleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AlertRuleResource>>;

    /**
     * Gets an alert rule
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} ruleName The name of the rule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AlertRuleResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AlertRuleResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AlertRuleResource} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, ruleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AlertRuleResource>;
    get(resourceGroupName: string, ruleName: string, callback: ServiceCallback<models.AlertRuleResource>): void;
    get(resourceGroupName: string, ruleName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AlertRuleResource>): void;


    /**
     * Updates an existing AlertRuleResource. To update other fields use the
     * CreateOrUpdate method.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} ruleName The name of the rule.
     *
     * @param {object} alertRulesResource Parameters supplied to the operation.
     *
     * @param {object} [alertRulesResource.tags] Resource tags
     *
     * @param {string} alertRulesResource.name the name of the alert rule.
     *
     * @param {string} [alertRulesResource.description] the description of the
     * alert rule that will be included in the alert email.
     *
     * @param {boolean} alertRulesResource.isEnabled the flag that indicates
     * whether the alert rule is enabled.
     *
     * @param {object} alertRulesResource.condition the condition that results in
     * the alert rule being activated.
     *
     * @param {object} [alertRulesResource.condition.dataSource] the resource from
     * which the rule collects its data. For this type dataSource will always be of
     * type RuleMetricDataSource.
     *
     * @param {string} [alertRulesResource.condition.dataSource.resourceUri] the
     * resource identifier of the resource the rule monitors. **NOTE**: this
     * property cannot be updated for an existing rule.
     *
     * @param {string} alertRulesResource.condition.dataSource.odatatype
     * Polymorphic Discriminator
     *
     * @param {string} alertRulesResource.condition.odatatype Polymorphic
     * Discriminator
     *
     * @param {array} [alertRulesResource.actions] the array of actions that are
     * performed when the alert rule becomes active, and when an alert condition is
     * resolved.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AlertRuleResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, ruleName: string, alertRulesResource: models.AlertRuleResourcePatch, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AlertRuleResource>>;

    /**
     * Updates an existing AlertRuleResource. To update other fields use the
     * CreateOrUpdate method.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} ruleName The name of the rule.
     *
     * @param {object} alertRulesResource Parameters supplied to the operation.
     *
     * @param {object} [alertRulesResource.tags] Resource tags
     *
     * @param {string} alertRulesResource.name the name of the alert rule.
     *
     * @param {string} [alertRulesResource.description] the description of the
     * alert rule that will be included in the alert email.
     *
     * @param {boolean} alertRulesResource.isEnabled the flag that indicates
     * whether the alert rule is enabled.
     *
     * @param {object} alertRulesResource.condition the condition that results in
     * the alert rule being activated.
     *
     * @param {object} [alertRulesResource.condition.dataSource] the resource from
     * which the rule collects its data. For this type dataSource will always be of
     * type RuleMetricDataSource.
     *
     * @param {string} [alertRulesResource.condition.dataSource.resourceUri] the
     * resource identifier of the resource the rule monitors. **NOTE**: this
     * property cannot be updated for an existing rule.
     *
     * @param {string} alertRulesResource.condition.dataSource.odatatype
     * Polymorphic Discriminator
     *
     * @param {string} alertRulesResource.condition.odatatype Polymorphic
     * Discriminator
     *
     * @param {array} [alertRulesResource.actions] the array of actions that are
     * performed when the alert rule becomes active, and when an alert condition is
     * resolved.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AlertRuleResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AlertRuleResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AlertRuleResource} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, ruleName: string, alertRulesResource: models.AlertRuleResourcePatch, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AlertRuleResource>;
    update(resourceGroupName: string, ruleName: string, alertRulesResource: models.AlertRuleResourcePatch, callback: ServiceCallback<models.AlertRuleResource>): void;
    update(resourceGroupName: string, ruleName: string, alertRulesResource: models.AlertRuleResourcePatch, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AlertRuleResource>): void;


    /**
     * List the alert rules within a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AlertRuleResourceCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupWithHttpOperationResponse(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AlertRuleResourceCollection>>;

    /**
     * List the alert rules within a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AlertRuleResourceCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AlertRuleResourceCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AlertRuleResourceCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroup(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AlertRuleResourceCollection>;
    listByResourceGroup(resourceGroupName: string, callback: ServiceCallback<models.AlertRuleResourceCollection>): void;
    listByResourceGroup(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AlertRuleResourceCollection>): void;
}

/**
 * @class
 * LogProfiles
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the MonitorManagementClient.
 */
export interface LogProfiles {


    /**
     * Deletes the log profile.
     *
     * @param {string} logProfileName The name of the log profile.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(logProfileName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the log profile.
     *
     * @param {string} logProfileName The name of the log profile.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(logProfileName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(logProfileName: string, callback: ServiceCallback<void>): void;
    deleteMethod(logProfileName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets the log profile.
     *
     * @param {string} logProfileName The name of the log profile.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<LogProfileResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(logProfileName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.LogProfileResource>>;

    /**
     * Gets the log profile.
     *
     * @param {string} logProfileName The name of the log profile.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {LogProfileResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {LogProfileResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link LogProfileResource} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(logProfileName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.LogProfileResource>;
    get(logProfileName: string, callback: ServiceCallback<models.LogProfileResource>): void;
    get(logProfileName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.LogProfileResource>): void;


    /**
     * Create or update a log profile in Azure Monitoring REST API.
     *
     * @param {string} logProfileName The name of the log profile.
     *
     * @param {object} parameters Parameters supplied to the operation.
     *
     * @param {string} [parameters.storageAccountId] the resource id of the storage
     * account to which you would like to send the Activity Log.
     *
     * @param {string} [parameters.serviceBusRuleId] The service bus rule ID of the
     * service bus namespace in which you would like to have Event Hubs created for
     * streaming the Activity Log. The rule ID is of the format: '{service bus
     * resource ID}/authorizationrules/{key name}'.
     *
     * @param {array} parameters.locations List of regions for which Activity Log
     * events should be stored or streamed. It is a comma separated list of valid
     * ARM locations including the 'global' location.
     *
     * @param {array} parameters.categories the categories of the logs. These
     * categories are created as is convenient to the user. Some values are:
     * 'Write', 'Delete', and/or 'Action.'
     *
     * @param {object} parameters.retentionPolicy the retention policy for the
     * events in the log.
     *
     * @param {boolean} parameters.retentionPolicy.enabled a value indicating
     * whether the retention policy is enabled.
     *
     * @param {number} parameters.retentionPolicy.days the number of days for the
     * retention in days. A value of 0 will retain the events indefinitely.
     *
     * @param {string} parameters.location Resource location
     *
     * @param {object} [parameters.tags] Resource tags
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<LogProfileResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(logProfileName: string, parameters: models.LogProfileResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.LogProfileResource>>;

    /**
     * Create or update a log profile in Azure Monitoring REST API.
     *
     * @param {string} logProfileName The name of the log profile.
     *
     * @param {object} parameters Parameters supplied to the operation.
     *
     * @param {string} [parameters.storageAccountId] the resource id of the storage
     * account to which you would like to send the Activity Log.
     *
     * @param {string} [parameters.serviceBusRuleId] The service bus rule ID of the
     * service bus namespace in which you would like to have Event Hubs created for
     * streaming the Activity Log. The rule ID is of the format: '{service bus
     * resource ID}/authorizationrules/{key name}'.
     *
     * @param {array} parameters.locations List of regions for which Activity Log
     * events should be stored or streamed. It is a comma separated list of valid
     * ARM locations including the 'global' location.
     *
     * @param {array} parameters.categories the categories of the logs. These
     * categories are created as is convenient to the user. Some values are:
     * 'Write', 'Delete', and/or 'Action.'
     *
     * @param {object} parameters.retentionPolicy the retention policy for the
     * events in the log.
     *
     * @param {boolean} parameters.retentionPolicy.enabled a value indicating
     * whether the retention policy is enabled.
     *
     * @param {number} parameters.retentionPolicy.days the number of days for the
     * retention in days. A value of 0 will retain the events indefinitely.
     *
     * @param {string} parameters.location Resource location
     *
     * @param {object} [parameters.tags] Resource tags
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {LogProfileResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {LogProfileResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link LogProfileResource} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(logProfileName: string, parameters: models.LogProfileResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.LogProfileResource>;
    createOrUpdate(logProfileName: string, parameters: models.LogProfileResource, callback: ServiceCallback<models.LogProfileResource>): void;
    createOrUpdate(logProfileName: string, parameters: models.LogProfileResource, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.LogProfileResource>): void;


    /**
     * Updates an existing LogProfilesResource. To update other fields use the
     * CreateOrUpdate method.
     *
     * @param {string} logProfileName The name of the log profile.
     *
     * @param {object} logProfilesResource Parameters supplied to the operation.
     *
     * @param {object} [logProfilesResource.tags] Resource tags
     *
     * @param {string} [logProfilesResource.storageAccountId] the resource id of
     * the storage account to which you would like to send the Activity Log.
     *
     * @param {string} [logProfilesResource.serviceBusRuleId] The service bus rule
     * ID of the service bus namespace in which you would like to have Event Hubs
     * created for streaming the Activity Log. The rule ID is of the format:
     * '{service bus resource ID}/authorizationrules/{key name}'.
     *
     * @param {array} logProfilesResource.locations List of regions for which
     * Activity Log events should be stored or streamed. It is a comma separated
     * list of valid ARM locations including the 'global' location.
     *
     * @param {array} logProfilesResource.categories the categories of the logs.
     * These categories are created as is convenient to the user. Some values are:
     * 'Write', 'Delete', and/or 'Action.'
     *
     * @param {object} logProfilesResource.retentionPolicy the retention policy for
     * the events in the log.
     *
     * @param {boolean} logProfilesResource.retentionPolicy.enabled a value
     * indicating whether the retention policy is enabled.
     *
     * @param {number} logProfilesResource.retentionPolicy.days the number of days
     * for the retention in days. A value of 0 will retain the events indefinitely.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<LogProfileResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(logProfileName: string, logProfilesResource: models.LogProfileResourcePatch, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.LogProfileResource>>;

    /**
     * Updates an existing LogProfilesResource. To update other fields use the
     * CreateOrUpdate method.
     *
     * @param {string} logProfileName The name of the log profile.
     *
     * @param {object} logProfilesResource Parameters supplied to the operation.
     *
     * @param {object} [logProfilesResource.tags] Resource tags
     *
     * @param {string} [logProfilesResource.storageAccountId] the resource id of
     * the storage account to which you would like to send the Activity Log.
     *
     * @param {string} [logProfilesResource.serviceBusRuleId] The service bus rule
     * ID of the service bus namespace in which you would like to have Event Hubs
     * created for streaming the Activity Log. The rule ID is of the format:
     * '{service bus resource ID}/authorizationrules/{key name}'.
     *
     * @param {array} logProfilesResource.locations List of regions for which
     * Activity Log events should be stored or streamed. It is a comma separated
     * list of valid ARM locations including the 'global' location.
     *
     * @param {array} logProfilesResource.categories the categories of the logs.
     * These categories are created as is convenient to the user. Some values are:
     * 'Write', 'Delete', and/or 'Action.'
     *
     * @param {object} logProfilesResource.retentionPolicy the retention policy for
     * the events in the log.
     *
     * @param {boolean} logProfilesResource.retentionPolicy.enabled a value
     * indicating whether the retention policy is enabled.
     *
     * @param {number} logProfilesResource.retentionPolicy.days the number of days
     * for the retention in days. A value of 0 will retain the events indefinitely.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {LogProfileResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {LogProfileResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link LogProfileResource} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(logProfileName: string, logProfilesResource: models.LogProfileResourcePatch, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.LogProfileResource>;
    update(logProfileName: string, logProfilesResource: models.LogProfileResourcePatch, callback: ServiceCallback<models.LogProfileResource>): void;
    update(logProfileName: string, logProfilesResource: models.LogProfileResourcePatch, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.LogProfileResource>): void;


    /**
     * List the log profiles.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<LogProfileCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.LogProfileCollection>>;

    /**
     * List the log profiles.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {LogProfileCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {LogProfileCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link LogProfileCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.LogProfileCollection>;
    list(callback: ServiceCallback<models.LogProfileCollection>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.LogProfileCollection>): void;
}

/**
 * @class
 * DiagnosticSettingsOperations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the MonitorManagementClient.
 */
export interface DiagnosticSettingsOperations {


    /**
     * Gets the active diagnostic settings for the specified resource.
     *
     * @param {string} resourceUri The identifier of the resource.
     *
     * @param {string} name The name of the diagnostic setting.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DiagnosticSettingsResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceUri: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DiagnosticSettingsResource>>;

    /**
     * Gets the active diagnostic settings for the specified resource.
     *
     * @param {string} resourceUri The identifier of the resource.
     *
     * @param {string} name The name of the diagnostic setting.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DiagnosticSettingsResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DiagnosticSettingsResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DiagnosticSettingsResource} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceUri: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DiagnosticSettingsResource>;
    get(resourceUri: string, name: string, callback: ServiceCallback<models.DiagnosticSettingsResource>): void;
    get(resourceUri: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DiagnosticSettingsResource>): void;


    /**
     * Creates or updates diagnostic settings for the specified resource.
     *
     * @param {string} resourceUri The identifier of the resource.
     *
     * @param {object} parameters Parameters supplied to the operation.
     *
     * @param {string} [parameters.storageAccountId] The resource ID of the storage
     * account to which you would like to send Diagnostic Logs.
     *
     * @param {string} [parameters.eventHubAuthorizationRuleId] The resource Id for
     * the event hub authorization rule.
     *
     * @param {string} [parameters.eventHubName] The name of the event hub. If none
     * is specified, the default event hub will be selected.
     *
     * @param {array} [parameters.metrics] the list of metric settings.
     *
     * @param {array} [parameters.logs] the list of logs settings.
     *
     * @param {string} [parameters.workspaceId] The workspace ID (resource ID of a
     * Log Analytics workspace) for a Log Analytics workspace to which you would
     * like to send Diagnostic Logs. Example:
     * /subscriptions/4b9e8510-67ab-4e9a-95a9-e2f1e570ea9c/resourceGroups/insights-integration/providers/Microsoft.OperationalInsights/workspaces/viruela2
     *
     * @param {string} name The name of the diagnostic setting.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DiagnosticSettingsResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceUri: string, parameters: models.DiagnosticSettingsResource, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DiagnosticSettingsResource>>;

    /**
     * Creates or updates diagnostic settings for the specified resource.
     *
     * @param {string} resourceUri The identifier of the resource.
     *
     * @param {object} parameters Parameters supplied to the operation.
     *
     * @param {string} [parameters.storageAccountId] The resource ID of the storage
     * account to which you would like to send Diagnostic Logs.
     *
     * @param {string} [parameters.eventHubAuthorizationRuleId] The resource Id for
     * the event hub authorization rule.
     *
     * @param {string} [parameters.eventHubName] The name of the event hub. If none
     * is specified, the default event hub will be selected.
     *
     * @param {array} [parameters.metrics] the list of metric settings.
     *
     * @param {array} [parameters.logs] the list of logs settings.
     *
     * @param {string} [parameters.workspaceId] The workspace ID (resource ID of a
     * Log Analytics workspace) for a Log Analytics workspace to which you would
     * like to send Diagnostic Logs. Example:
     * /subscriptions/4b9e8510-67ab-4e9a-95a9-e2f1e570ea9c/resourceGroups/insights-integration/providers/Microsoft.OperationalInsights/workspaces/viruela2
     *
     * @param {string} name The name of the diagnostic setting.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DiagnosticSettingsResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DiagnosticSettingsResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DiagnosticSettingsResource} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceUri: string, parameters: models.DiagnosticSettingsResource, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DiagnosticSettingsResource>;
    createOrUpdate(resourceUri: string, parameters: models.DiagnosticSettingsResource, name: string, callback: ServiceCallback<models.DiagnosticSettingsResource>): void;
    createOrUpdate(resourceUri: string, parameters: models.DiagnosticSettingsResource, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DiagnosticSettingsResource>): void;


    /**
     * Deletes existing diagnostic settings for the specified resource.
     *
     * @param {string} resourceUri The identifier of the resource.
     *
     * @param {string} name The name of the diagnostic setting.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceUri: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes existing diagnostic settings for the specified resource.
     *
     * @param {string} resourceUri The identifier of the resource.
     *
     * @param {string} name The name of the diagnostic setting.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceUri: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceUri: string, name: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceUri: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets the active diagnostic settings list for the specified resource.
     *
     * @param {string} resourceUri The identifier of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DiagnosticSettingsResourceCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(resourceUri: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DiagnosticSettingsResourceCollection>>;

    /**
     * Gets the active diagnostic settings list for the specified resource.
     *
     * @param {string} resourceUri The identifier of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DiagnosticSettingsResourceCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DiagnosticSettingsResourceCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DiagnosticSettingsResourceCollection} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(resourceUri: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DiagnosticSettingsResourceCollection>;
    list(resourceUri: string, callback: ServiceCallback<models.DiagnosticSettingsResourceCollection>): void;
    list(resourceUri: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DiagnosticSettingsResourceCollection>): void;
}

/**
 * @class
 * DiagnosticSettingsCategoryOperations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the MonitorManagementClient.
 */
export interface DiagnosticSettingsCategoryOperations {


    /**
     * Gets the diagnostic settings category for the specified resource.
     *
     * @param {string} resourceUri The identifier of the resource.
     *
     * @param {string} name The name of the diagnostic setting.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DiagnosticSettingsCategoryResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceUri: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DiagnosticSettingsCategoryResource>>;

    /**
     * Gets the diagnostic settings category for the specified resource.
     *
     * @param {string} resourceUri The identifier of the resource.
     *
     * @param {string} name The name of the diagnostic setting.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DiagnosticSettingsCategoryResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DiagnosticSettingsCategoryResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DiagnosticSettingsCategoryResource} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceUri: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DiagnosticSettingsCategoryResource>;
    get(resourceUri: string, name: string, callback: ServiceCallback<models.DiagnosticSettingsCategoryResource>): void;
    get(resourceUri: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DiagnosticSettingsCategoryResource>): void;


    /**
     * Lists the diagnostic settings categories for the specified resource.
     *
     * @param {string} resourceUri The identifier of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DiagnosticSettingsCategoryResourceCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(resourceUri: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DiagnosticSettingsCategoryResourceCollection>>;

    /**
     * Lists the diagnostic settings categories for the specified resource.
     *
     * @param {string} resourceUri The identifier of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DiagnosticSettingsCategoryResourceCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DiagnosticSettingsCategoryResourceCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link
     *                      DiagnosticSettingsCategoryResourceCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(resourceUri: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DiagnosticSettingsCategoryResourceCollection>;
    list(resourceUri: string, callback: ServiceCallback<models.DiagnosticSettingsCategoryResourceCollection>): void;
    list(resourceUri: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DiagnosticSettingsCategoryResourceCollection>): void;
}

/**
 * @class
 * ActionGroups
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the MonitorManagementClient.
 */
export interface ActionGroups {


    /**
     * Create a new action group or update an existing one.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} actionGroupName The name of the action group.
     *
     * @param {object} actionGroup The action group to create or use for the
     * update.
     *
     * @param {string} actionGroup.groupShortName The short name of the action
     * group. This will be used in SMS messages.
     *
     * @param {boolean} actionGroup.enabled Indicates whether this action group is
     * enabled. If an action group is not enabled, then none of its receivers will
     * receive communications.
     *
     * @param {array} [actionGroup.emailReceivers] The list of email receivers that
     * are part of this action group.
     *
     * @param {array} [actionGroup.smsReceivers] The list of SMS receivers that are
     * part of this action group.
     *
     * @param {array} [actionGroup.webhookReceivers] The list of webhook receivers
     * that are part of this action group.
     *
     * @param {string} actionGroup.location Resource location
     *
     * @param {object} [actionGroup.tags] Resource tags
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ActionGroupResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, actionGroupName: string, actionGroup: models.ActionGroupResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ActionGroupResource>>;

    /**
     * Create a new action group or update an existing one.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} actionGroupName The name of the action group.
     *
     * @param {object} actionGroup The action group to create or use for the
     * update.
     *
     * @param {string} actionGroup.groupShortName The short name of the action
     * group. This will be used in SMS messages.
     *
     * @param {boolean} actionGroup.enabled Indicates whether this action group is
     * enabled. If an action group is not enabled, then none of its receivers will
     * receive communications.
     *
     * @param {array} [actionGroup.emailReceivers] The list of email receivers that
     * are part of this action group.
     *
     * @param {array} [actionGroup.smsReceivers] The list of SMS receivers that are
     * part of this action group.
     *
     * @param {array} [actionGroup.webhookReceivers] The list of webhook receivers
     * that are part of this action group.
     *
     * @param {string} actionGroup.location Resource location
     *
     * @param {object} [actionGroup.tags] Resource tags
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ActionGroupResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ActionGroupResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ActionGroupResource} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, actionGroupName: string, actionGroup: models.ActionGroupResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ActionGroupResource>;
    createOrUpdate(resourceGroupName: string, actionGroupName: string, actionGroup: models.ActionGroupResource, callback: ServiceCallback<models.ActionGroupResource>): void;
    createOrUpdate(resourceGroupName: string, actionGroupName: string, actionGroup: models.ActionGroupResource, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ActionGroupResource>): void;


    /**
     * Get an action group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} actionGroupName The name of the action group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ActionGroupResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, actionGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ActionGroupResource>>;

    /**
     * Get an action group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} actionGroupName The name of the action group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ActionGroupResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ActionGroupResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ActionGroupResource} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, actionGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ActionGroupResource>;
    get(resourceGroupName: string, actionGroupName: string, callback: ServiceCallback<models.ActionGroupResource>): void;
    get(resourceGroupName: string, actionGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ActionGroupResource>): void;


    /**
     * Delete an action group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} actionGroupName The name of the action group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, actionGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Delete an action group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} actionGroupName The name of the action group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, actionGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, actionGroupName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, actionGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Get a list of all action groups in a subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ActionGroupList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listBySubscriptionIdWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ActionGroupList>>;

    /**
     * Get a list of all action groups in a subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ActionGroupList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ActionGroupList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ActionGroupList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listBySubscriptionId(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ActionGroupList>;
    listBySubscriptionId(callback: ServiceCallback<models.ActionGroupList>): void;
    listBySubscriptionId(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ActionGroupList>): void;


    /**
     * Get a list of all action groups in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ActionGroupList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupWithHttpOperationResponse(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ActionGroupList>>;

    /**
     * Get a list of all action groups in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ActionGroupList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ActionGroupList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ActionGroupList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroup(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ActionGroupList>;
    listByResourceGroup(resourceGroupName: string, callback: ServiceCallback<models.ActionGroupList>): void;
    listByResourceGroup(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ActionGroupList>): void;


    /**
     * Enable a receiver in an action group. This changes the receiver's status
     * from Disabled to Enabled.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} actionGroupName The name of the action group.
     *
     * @param {string} receiverName The name of the receiver to resubscribe.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    enableReceiverWithHttpOperationResponse(resourceGroupName: string, actionGroupName: string, receiverName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Enable a receiver in an action group. This changes the receiver's status
     * from Disabled to Enabled.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} actionGroupName The name of the action group.
     *
     * @param {string} receiverName The name of the receiver to resubscribe.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    enableReceiver(resourceGroupName: string, actionGroupName: string, receiverName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    enableReceiver(resourceGroupName: string, actionGroupName: string, receiverName: string, callback: ServiceCallback<void>): void;
    enableReceiver(resourceGroupName: string, actionGroupName: string, receiverName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
}

/**
 * @class
 * ActivityLogAlerts
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the MonitorManagementClient.
 */
export interface ActivityLogAlerts {


    /**
     * Create a new activity log alert or update an existing one.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} activityLogAlertName The name of the activity log alert.
     *
     * @param {object} activityLogAlert The activity log alert to create or use for
     * the update.
     *
     * @param {array} activityLogAlert.scopes A list of resourceIds that will be
     * used as prefixes. The alert will only apply to activityLogs with resourceIds
     * that fall under one of these prefixes. This list must include at least one
     * item.
     *
     * @param {boolean} [activityLogAlert.enabled] Indicates whether this activity
     * log alert is enabled. If an activity log alert is not enabled, then none of
     * its actions will be activated.
     *
     * @param {object} activityLogAlert.condition The condition that will cause
     * this alert to activate.
     *
     * @param {array} activityLogAlert.condition.allOf The list of activity log
     * alert conditions.
     *
     * @param {object} activityLogAlert.actions The actions that will activate when
     * the condition is met.
     *
     * @param {array} [activityLogAlert.actions.actionGroups] The list of activity
     * log alerts.
     *
     * @param {string} [activityLogAlert.description] A description of this
     * activity log alert.
     *
     * @param {string} activityLogAlert.location Resource location
     *
     * @param {object} [activityLogAlert.tags] Resource tags
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ActivityLogAlertResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, activityLogAlertName: string, activityLogAlert: models.ActivityLogAlertResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ActivityLogAlertResource>>;

    /**
     * Create a new activity log alert or update an existing one.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} activityLogAlertName The name of the activity log alert.
     *
     * @param {object} activityLogAlert The activity log alert to create or use for
     * the update.
     *
     * @param {array} activityLogAlert.scopes A list of resourceIds that will be
     * used as prefixes. The alert will only apply to activityLogs with resourceIds
     * that fall under one of these prefixes. This list must include at least one
     * item.
     *
     * @param {boolean} [activityLogAlert.enabled] Indicates whether this activity
     * log alert is enabled. If an activity log alert is not enabled, then none of
     * its actions will be activated.
     *
     * @param {object} activityLogAlert.condition The condition that will cause
     * this alert to activate.
     *
     * @param {array} activityLogAlert.condition.allOf The list of activity log
     * alert conditions.
     *
     * @param {object} activityLogAlert.actions The actions that will activate when
     * the condition is met.
     *
     * @param {array} [activityLogAlert.actions.actionGroups] The list of activity
     * log alerts.
     *
     * @param {string} [activityLogAlert.description] A description of this
     * activity log alert.
     *
     * @param {string} activityLogAlert.location Resource location
     *
     * @param {object} [activityLogAlert.tags] Resource tags
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ActivityLogAlertResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ActivityLogAlertResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ActivityLogAlertResource} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, activityLogAlertName: string, activityLogAlert: models.ActivityLogAlertResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ActivityLogAlertResource>;
    createOrUpdate(resourceGroupName: string, activityLogAlertName: string, activityLogAlert: models.ActivityLogAlertResource, callback: ServiceCallback<models.ActivityLogAlertResource>): void;
    createOrUpdate(resourceGroupName: string, activityLogAlertName: string, activityLogAlert: models.ActivityLogAlertResource, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ActivityLogAlertResource>): void;


    /**
     * Get an activity log alert.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} activityLogAlertName The name of the activity log alert.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ActivityLogAlertResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, activityLogAlertName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ActivityLogAlertResource>>;

    /**
     * Get an activity log alert.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} activityLogAlertName The name of the activity log alert.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ActivityLogAlertResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ActivityLogAlertResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ActivityLogAlertResource} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, activityLogAlertName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ActivityLogAlertResource>;
    get(resourceGroupName: string, activityLogAlertName: string, callback: ServiceCallback<models.ActivityLogAlertResource>): void;
    get(resourceGroupName: string, activityLogAlertName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ActivityLogAlertResource>): void;


    /**
     * Delete an activity log alert.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} activityLogAlertName The name of the activity log alert.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, activityLogAlertName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Delete an activity log alert.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} activityLogAlertName The name of the activity log alert.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, activityLogAlertName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, activityLogAlertName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, activityLogAlertName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Updates an existing ActivityLogAlertResource's tags. To update other fields
     * use the CreateOrUpdate method.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} activityLogAlertName The name of the activity log alert.
     *
     * @param {object} activityLogAlertPatch Parameters supplied to the operation.
     *
     * @param {object} [activityLogAlertPatch.tags] Resource tags
     *
     * @param {boolean} [activityLogAlertPatch.enabled] Indicates whether this
     * activity log alert is enabled. If an activity log alert is not enabled, then
     * none of its actions will be activated.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ActivityLogAlertResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, activityLogAlertName: string, activityLogAlertPatch: models.ActivityLogAlertPatchBody, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ActivityLogAlertResource>>;

    /**
     * Updates an existing ActivityLogAlertResource's tags. To update other fields
     * use the CreateOrUpdate method.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} activityLogAlertName The name of the activity log alert.
     *
     * @param {object} activityLogAlertPatch Parameters supplied to the operation.
     *
     * @param {object} [activityLogAlertPatch.tags] Resource tags
     *
     * @param {boolean} [activityLogAlertPatch.enabled] Indicates whether this
     * activity log alert is enabled. If an activity log alert is not enabled, then
     * none of its actions will be activated.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ActivityLogAlertResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ActivityLogAlertResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ActivityLogAlertResource} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, activityLogAlertName: string, activityLogAlertPatch: models.ActivityLogAlertPatchBody, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ActivityLogAlertResource>;
    update(resourceGroupName: string, activityLogAlertName: string, activityLogAlertPatch: models.ActivityLogAlertPatchBody, callback: ServiceCallback<models.ActivityLogAlertResource>): void;
    update(resourceGroupName: string, activityLogAlertName: string, activityLogAlertPatch: models.ActivityLogAlertPatchBody, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ActivityLogAlertResource>): void;


    /**
     * Get a list of all activity log alerts in a subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ActivityLogAlertList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listBySubscriptionIdWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ActivityLogAlertList>>;

    /**
     * Get a list of all activity log alerts in a subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ActivityLogAlertList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ActivityLogAlertList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ActivityLogAlertList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listBySubscriptionId(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ActivityLogAlertList>;
    listBySubscriptionId(callback: ServiceCallback<models.ActivityLogAlertList>): void;
    listBySubscriptionId(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ActivityLogAlertList>): void;


    /**
     * Get a list of all activity log alerts in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ActivityLogAlertList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupWithHttpOperationResponse(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ActivityLogAlertList>>;

    /**
     * Get a list of all activity log alerts in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ActivityLogAlertList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ActivityLogAlertList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ActivityLogAlertList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroup(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ActivityLogAlertList>;
    listByResourceGroup(resourceGroupName: string, callback: ServiceCallback<models.ActivityLogAlertList>): void;
    listByResourceGroup(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ActivityLogAlertList>): void;
}
