/* jshint latedef:false */
/* jshint forin:false */
/* jshint noempty:false */

// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

'use strict';

var util = require('util');
var _ = require('underscore');
var moment = require('moment');
var azureCommon = require('azure-common');
var Service = azureCommon.Service;
var WebResource = azureCommon.WebResource;

var DataLakeAnalyticsJobManagementClient = ( /** @lends DataLakeAnalyticsJobManagementClient */ function() {
  /**
   * @class
   * Creates an Azure Data Lake Analytics job management client.
   * Initializes a new instance of the DataLakeAnalyticsJobManagementClient
   * class.
   * @constructor
   * 
   * @param {SubscriptionCloudCredentials} credentials Gets subscription
   * credentials which uniquely identify Microsoft Azure subscription. The
   * subscription ID forms part of the URI for every service call.
   * 
   * @param {string} [credentials.subscriptionId]
   * 
   * @param {string} [jobServiceUri] Gets the URI used as the base for all
   * cloud service requests.
   * 
   * @param {Array} filters
   */
  function DataLakeAnalyticsJobManagementClient(credentials, jobServiceUri, filters) {
    if (credentials === null || credentials === undefined) {
      throw new Error('credentials cannot be null.');
    }
    
    DataLakeAnalyticsJobManagementClient['super_'].call(this, credentials, filters);
    
    this.credentials = credentials;
    this.jobServiceUri = jobServiceUri;
    if (this.userAgentSuffix === null || this.userAgentSuffix === undefined) {
      this.userAgentSuffix = '';
    }
    if (this.apiVersion === null || this.apiVersion === undefined) {
      this.apiVersion = '2015-11-01-preview';
    }
    if (this.longRunningOperationInitialTimeout === null || this.longRunningOperationInitialTimeout === undefined) {
      this.longRunningOperationInitialTimeout = -1;
    }
    if (this.longRunningOperationRetryTimeout === null || this.longRunningOperationRetryTimeout === undefined) {
      this.longRunningOperationRetryTimeout = -1;
    }
    /**
     * Provides an instance of the [JobOperations](-JobOperations.html) object.
     * @type {object}
     */
    this.jobs = new JobOperations(this);
  }
  
  util.inherits(DataLakeAnalyticsJobManagementClient, Service);
  
  
  return DataLakeAnalyticsJobManagementClient;
})();
exports.DataLakeAnalyticsJobManagementClient = DataLakeAnalyticsJobManagementClient;

var JobOperations = ( /** @lends JobOperations */ function() {
  /**
   * @class
   * Operations for submitting and cancelling Data Lake Analytics jobs and
   * retrieving their status and history
   * __NOTE__: An instance of this class is automatically created for an
   * instance of the [DataLakeAnalyticsJobManagementClient] {@link
   * DataLakeAnalyticsJobManagementClient~DataLakeAnalyticsJobManagementClient}.
   * See [jobs] {@link
   * DataLakeAnalyticsJobManagementClient~DataLakeAnalyticsJobManagementClient#jobs}.
   * Initializes a new instance of the JobOperations class.
   * @constructor
   * 
   * @param {DataLakeAnalyticsJobManagementClient} client Reference to the
   * service client.
   */
  function JobOperations(client) {
    this.client = client;
  }
  
  /**
   * Builds (compiles) the specified job in the specified Data Lake Analytics
   * account for job correctness and validation.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} accountName The name of the Data Lake Analytics account to
   * build the job for
   * 
   * @param {JobInfoBuildOrCreateParameters} parameters The parameters to build
   * a job, which simulates submission.
   * 
   * @param {JobInformation} [parameters.job] Gets or sets a job information
   * object.
   * 
   * @param {Guid} [parameters.job.jobId] Gets or sets the job's unique
   * identifier.
   * 
   * @param {string} [parameters.job.name] Gets or sets the friendly name of
   * the job.
   * 
   * @param {string} [parameters.job.type] Gets or sets the job type of the
   * current job (i.e. Hive or U-SQL).
   * 
   * @param {string} [parameters.job.submitter] Gets or sets the user or
   * account that submitted the job.
   * 
   * @param {ICollection} [parameters.job.errorMessage] Gets or sets the error
   * message details for the job, if it failed.
   * 
   * @param {number} [parameters.job.degreeOfParallelism] Gets or sets the
   * degree of parallelism used for this job. This must have a minimum value
   * of 2
   * 
   * @param {number} [parameters.job.priority] Gets or sets the priority value
   * for the current job which must be greater than 1.
   * 
   * @param {DateTimeOffset} [parameters.job.submitTime] Gets or sets the time
   * the job was submitted to the service.
   * 
   * @param {DateTimeOffset} [parameters.job.startTime] Gets or sets the start
   * time of the job.
   * 
   * @param {DateTimeOffset} [parameters.job.endTime] Gets or sets the
   * completion time of the job
   * 
   * @param {JobState} [parameters.job.state] Gets or sets a more detailed
   * state of the job than the result. Especially used for intermediate states
   * and errors
   * 
   * @param {JobResult} [parameters.job.result] Gets or sets the result of job
   * execution or the current result of the running job.
   * 
   * @param {ICollection} [parameters.job.stateAuditRecords] Gets or sets the
   * job state audit records, indicating when various operations have been
   * performed on this job.
   * 
   * @param {JobProperties} [parameters.job.properties] Gets or sets the job
   * specific properties.
   * 
   * @param {string} [parameters.job.properties.runtimeVersion] Gets or sets
   * the runtime version of the U-SQL engine to use
   * 
   * @param {string} [parameters.job.properties.script] Gets or sets the U-SQL
   * script to run
   * 
   * @param {string} [parameters.job.properties.type] Gets or sets the job type
   * of the current job (i.e. Hive or U-SQL).
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  JobOperations.prototype.build = function(resourceGroupName, accountName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (accountName === null || accountName === undefined) {
      return callback(new Error('accountName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.job !== null && parameters.job !== undefined) {
      if (parameters.job.jobId === null || parameters.job.jobId === undefined) {
        return callback(new Error('parameters.job.jobId cannot be null.'));
      }
      if (parameters.job.name === null || parameters.job.name === undefined) {
        return callback(new Error('parameters.job.name cannot be null.'));
      }
      if (parameters.job.properties === null || parameters.job.properties === undefined) {
        return callback(new Error('parameters.job.properties cannot be null.'));
      }
      if (parameters.job.properties.script === null || parameters.job.properties.script === undefined) {
        return callback(new Error('parameters.job.properties.script cannot be null.'));
      }
      if (parameters.job.type === null || parameters.job.type === undefined) {
        return callback(new Error('parameters.job.type cannot be null.'));
      }
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + 'https://';
    url2 = url2 + encodeURIComponent(accountName);
    url2 = url2 + '.';
    if (this.client.jobServiceUri !== null && this.client.jobServiceUri !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.jobServiceUri);
    }
    url2 = url2 + '/BuildJob';
    var queryParameters = [];
    queryParameters.push('api-version=2015-11-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsJob 0.9.6-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsJob 0.9.6-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['useragent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsJob 0.9.6-preview' + this.client.userAgentSuffix;
    }
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsJob 0.9.6-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsJob 0.9.6-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['User-Agent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsJob 0.9.6-preview' + this.client.userAgentSuffix;
    }
    if (resourceGroupName !== null && resourceGroupName !== undefined) {
      httpRequest.headers['x-ms-client-resource-group-name'] = resourceGroupName;
    }
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      httpRequest.headers['x-ms-client-subscription-id'] = this.client.credentials.subscriptionId;
    }
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = null;
    
    var jobInfoBuildOrCreateParametersValue = {};
    requestDoc = jobInfoBuildOrCreateParametersValue;
    
    if (parameters.job !== null && parameters.job !== undefined) {
      jobInfoBuildOrCreateParametersValue['jobId'] = parameters.job.jobId;
      
      jobInfoBuildOrCreateParametersValue['name'] = parameters.job.name;
      
      jobInfoBuildOrCreateParametersValue['type'] = parameters.job.type;
      
      if (parameters.job.submitter !== null && parameters.job.submitter !== undefined) {
        jobInfoBuildOrCreateParametersValue['submitter'] = parameters.job.submitter;
      }
      
      if (parameters.job.errorMessage !== null && parameters.job.errorMessage !== undefined) {
        var errorMessageArray = [];
        for (var loweredIndex1 = 0; loweredIndex1 < parameters.job.errorMessage.length; loweredIndex1 = loweredIndex1 + 1) {
          var errorMessageItem = parameters.job.errorMessage[loweredIndex1];
          var errorMessageValue = {};
          errorMessageArray.push(errorMessageValue);
          
          if (errorMessageItem.description !== null && errorMessageItem.description !== undefined) {
            errorMessageValue['description'] = errorMessageItem.description;
          }
          
          if (errorMessageItem.details !== null && errorMessageItem.details !== undefined) {
            errorMessageValue['details'] = errorMessageItem.details;
          }
          
          if (errorMessageItem.endOffset !== null && errorMessageItem.endOffset !== undefined) {
            errorMessageValue['endOffset'] = errorMessageItem.endOffset;
          }
          
          if (errorMessageItem.errorId !== null && errorMessageItem.errorId !== undefined) {
            errorMessageValue['errorId'] = errorMessageItem.errorId;
          }
          
          if (errorMessageItem.filePath !== null && errorMessageItem.filePath !== undefined) {
            errorMessageValue['filePath'] = errorMessageItem.filePath;
          }
          
          if (errorMessageItem.helpLink !== null && errorMessageItem.helpLink !== undefined) {
            errorMessageValue['helpLink'] = errorMessageItem.helpLink;
          }
          
          if (errorMessageItem.internalDiagnostics !== null && errorMessageItem.internalDiagnostics !== undefined) {
            errorMessageValue['internalDiagnostics'] = errorMessageItem.internalDiagnostics;
          }
          
          if (errorMessageItem.lineNumber !== null && errorMessageItem.lineNumber !== undefined) {
            errorMessageValue['lineNumber'] = errorMessageItem.lineNumber;
          }
          
          if (errorMessageItem.message !== null && errorMessageItem.message !== undefined) {
            errorMessageValue['message'] = errorMessageItem.message;
          }
          
          if (errorMessageItem.resolution !== null && errorMessageItem.resolution !== undefined) {
            errorMessageValue['resolution'] = errorMessageItem.resolution;
          }
          
          if (errorMessageItem.severity !== null && errorMessageItem.severity !== undefined) {
            errorMessageValue['severity'] = errorMessageItem.severity;
          }
          
          if (errorMessageItem.source !== null && errorMessageItem.source !== undefined) {
            errorMessageValue['source'] = errorMessageItem.source;
          }
          
          if (errorMessageItem.startOffset !== null && errorMessageItem.startOffset !== undefined) {
            errorMessageValue['startOffset'] = errorMessageItem.startOffset;
          }
        }
        jobInfoBuildOrCreateParametersValue['errorMessage'] = errorMessageArray;
      }
      
      if (parameters.job.degreeOfParallelism !== null && parameters.job.degreeOfParallelism !== undefined) {
        jobInfoBuildOrCreateParametersValue['degreeOfParallelism'] = parameters.job.degreeOfParallelism;
      }
      
      if (parameters.job.priority !== null && parameters.job.priority !== undefined) {
        jobInfoBuildOrCreateParametersValue['priority'] = parameters.job.priority;
      }
      
      if (parameters.job.submitTime !== null && parameters.job.submitTime !== undefined) {
        jobInfoBuildOrCreateParametersValue['submitTime'] = parameters.job.submitTime;
      }
      
      if (parameters.job.startTime !== null && parameters.job.startTime !== undefined) {
        jobInfoBuildOrCreateParametersValue['startTime'] = parameters.job.startTime;
      }
      
      if (parameters.job.endTime !== null && parameters.job.endTime !== undefined) {
        jobInfoBuildOrCreateParametersValue['endTime'] = parameters.job.endTime;
      }
      
      if (parameters.job.state !== null && parameters.job.state !== undefined) {
        jobInfoBuildOrCreateParametersValue['state'] = parameters.job.state !== null && parameters.job.state !== undefined ? parameters.job.state.toString() : 'Accepted';
      }
      
      if (parameters.job.result !== null && parameters.job.result !== undefined) {
        jobInfoBuildOrCreateParametersValue['result'] = parameters.job.result !== null && parameters.job.result !== undefined ? parameters.job.result.toString() : 'None';
      }
      
      if (parameters.job.stateAuditRecords !== null && parameters.job.stateAuditRecords !== undefined) {
        var stateAuditRecordsArray = [];
        for (var loweredIndex2 = 0; loweredIndex2 < parameters.job.stateAuditRecords.length; loweredIndex2 = loweredIndex2 + 1) {
          var stateAuditRecordsItem = parameters.job.stateAuditRecords[loweredIndex2];
          var jobStateAuditRecordValue = {};
          stateAuditRecordsArray.push(jobStateAuditRecordValue);
          
          if (stateAuditRecordsItem.newState !== null && stateAuditRecordsItem.newState !== undefined) {
            jobStateAuditRecordValue['newState'] = stateAuditRecordsItem.newState;
          }
          
          if (stateAuditRecordsItem.timeStamp !== null && stateAuditRecordsItem.timeStamp !== undefined) {
            jobStateAuditRecordValue['timeStamp'] = stateAuditRecordsItem.timeStamp;
          }
          
          if (stateAuditRecordsItem.requestedByUser !== null && stateAuditRecordsItem.requestedByUser !== undefined) {
            jobStateAuditRecordValue['requestedByUser'] = stateAuditRecordsItem.requestedByUser;
          }
          
          if (stateAuditRecordsItem.details !== null && stateAuditRecordsItem.details !== undefined) {
            jobStateAuditRecordValue['details'] = stateAuditRecordsItem.details;
          }
        }
        jobInfoBuildOrCreateParametersValue['stateAuditRecords'] = stateAuditRecordsArray;
      }
      
      var propertiesValue = {};
      jobInfoBuildOrCreateParametersValue['properties'] = propertiesValue;
      if (parameters.job.properties.type === 'Hive') {
        propertiesValue['type'] = 'Hive';
        var derived = parameters.job.properties;
        
        if (derived.statementCount !== null && derived.statementCount !== undefined) {
          propertiesValue['statementCount'] = derived.statementCount;
        }
        
        if (derived.executedStatementCount !== null && derived.executedStatementCount !== undefined) {
          propertiesValue['executedStatementCount'] = derived.executedStatementCount;
        }
        
        if (derived.logsLocation !== null && derived.logsLocation !== undefined) {
          propertiesValue['logsLocation'] = derived.logsLocation;
        }
        
        if (derived.statementInfo !== null && derived.statementInfo !== undefined) {
          var statementInfoArray = [];
          for (var loweredIndex3 = 0; loweredIndex3 < derived.statementInfo.length; loweredIndex3 = loweredIndex3 + 1) {
            var statementInfoItem = derived.statementInfo[loweredIndex3];
            var hiveJobStatementInfoValue = {};
            statementInfoArray.push(hiveJobStatementInfoValue);
            
            if (statementInfoItem.logLocation !== null && statementInfoItem.logLocation !== undefined) {
              hiveJobStatementInfoValue['logLocation'] = statementInfoItem.logLocation;
            }
            
            if (statementInfoItem.resultPreviewLocation !== null && statementInfoItem.resultPreviewLocation !== undefined) {
              hiveJobStatementInfoValue['resultPreviewLocation'] = statementInfoItem.resultPreviewLocation;
            }
            
            if (statementInfoItem.resultLocation !== null && statementInfoItem.resultLocation !== undefined) {
              hiveJobStatementInfoValue['resultLocation'] = statementInfoItem.resultLocation;
            }
            
            if (statementInfoItem.errorMessage !== null && statementInfoItem.errorMessage !== undefined) {
              hiveJobStatementInfoValue['errorMessage'] = statementInfoItem.errorMessage;
            }
          }
          propertiesValue['statementInfo'] = statementInfoArray;
        }
        
        if (derived.warehouseLocation !== null && derived.warehouseLocation !== undefined) {
          propertiesValue['warehouseLocation'] = derived.warehouseLocation;
        }
        
        if (derived.runtimeVersion !== null && derived.runtimeVersion !== undefined) {
          propertiesValue['runtimeVersion'] = derived.runtimeVersion;
        }
        
        propertiesValue['script'] = derived.script;
        
        if (derived.type !== null && derived.type !== undefined) {
          propertiesValue['type'] = derived.type;
        }
      }
      if (parameters.job.properties.type === 'USql') {
        propertiesValue['type'] = 'USql';
        var derived2 = parameters.job.properties;
        
        if (derived2.resources !== null && derived2.resources !== undefined) {
          var resourcesArray = [];
          for (var loweredIndex4 = 0; loweredIndex4 < derived2.resources.length; loweredIndex4 = loweredIndex4 + 1) {
            var resourcesItem = derived2.resources[loweredIndex4];
            var jobResourceValue = {};
            resourcesArray.push(jobResourceValue);
            
            if (resourcesItem.name !== null && resourcesItem.name !== undefined) {
              jobResourceValue['name'] = resourcesItem.name;
            }
            
            if (resourcesItem.resourcePath !== null && resourcesItem.resourcePath !== undefined) {
              jobResourceValue['resourcePath'] = resourcesItem.resourcePath;
            }
            
            if (resourcesItem.type !== null && resourcesItem.type !== undefined) {
              jobResourceValue['type'] = resourcesItem.type;
            }
          }
          propertiesValue['resources'] = resourcesArray;
        }
        
        if (derived2.algebraFilePath !== null && derived2.algebraFilePath !== undefined) {
          propertiesValue['algebraFilePath'] = derived2.algebraFilePath;
        }
        
        if (derived2.totalCompilationTime !== null && derived2.totalCompilationTime !== undefined) {
          propertiesValue['totalCompilationTime'] = derived2.totalCompilationTime.toIsoString();
        }
        
        if (derived2.totalPausedTime !== null && derived2.totalPausedTime !== undefined) {
          propertiesValue['totalPauseTime'] = derived2.totalPausedTime.toIsoString();
        }
        
        if (derived2.totalQueuedTime !== null && derived2.totalQueuedTime !== undefined) {
          propertiesValue['totalQueuedTime'] = derived2.totalQueuedTime.toIsoString();
        }
        
        if (derived2.totalRunningTime !== null && derived2.totalRunningTime !== undefined) {
          propertiesValue['totalRunningTime'] = derived2.totalRunningTime.toIsoString();
        }
        
        if (derived2.rootProcessNodeId !== null && derived2.rootProcessNodeId !== undefined) {
          propertiesValue['rootProcessNodeId'] = derived2.rootProcessNodeId;
        }
        
        if (derived2.yarnApplicationId !== null && derived2.yarnApplicationId !== undefined) {
          propertiesValue['yarnApplicationId'] = derived2.yarnApplicationId;
        }
        
        if (derived2.yarnApplicationTimeStamp !== null && derived2.yarnApplicationTimeStamp !== undefined) {
          propertiesValue['yarnApplicationTimeStamp'] = derived2.yarnApplicationTimeStamp;
        }
        
        if (derived2.compileMode !== null && derived2.compileMode !== undefined) {
          propertiesValue['compileMode'] = derived2.compileMode;
        }
        
        if (derived2.diagnostics !== null && derived2.diagnostics !== undefined) {
          var diagnosticsArray = [];
          for (var loweredIndex5 = 0; loweredIndex5 < derived2.diagnostics.length; loweredIndex5 = loweredIndex5 + 1) {
            var diagnosticsItem = derived2.diagnostics[loweredIndex5];
            var diagnosticsValue = {};
            diagnosticsArray.push(diagnosticsValue);
            
            if (diagnosticsItem.columnNumber !== null && diagnosticsItem.columnNumber !== undefined) {
              diagnosticsValue['columnNumber'] = diagnosticsItem.columnNumber;
            }
            
            if (diagnosticsItem.end !== null && diagnosticsItem.end !== undefined) {
              diagnosticsValue['end'] = diagnosticsItem.end;
            }
            
            if (diagnosticsItem.lineNumber !== null && diagnosticsItem.lineNumber !== undefined) {
              diagnosticsValue['lineNumber'] = diagnosticsItem.lineNumber;
            }
            
            if (diagnosticsItem.message !== null && diagnosticsItem.message !== undefined) {
              diagnosticsValue['message'] = diagnosticsItem.message;
            }
            
            if (diagnosticsItem.severity !== null && diagnosticsItem.severity !== undefined) {
              diagnosticsValue['severity'] = diagnosticsItem.severity;
            }
            
            if (diagnosticsItem.start !== null && diagnosticsItem.start !== undefined) {
              diagnosticsValue['start'] = diagnosticsItem.start;
            }
          }
          propertiesValue['diagnostics'] = diagnosticsArray;
        }
        
        if (derived2.runtimeVersion !== null && derived2.runtimeVersion !== undefined) {
          propertiesValue['runtimeVersion'] = derived2.runtimeVersion;
        }
        
        propertiesValue['script'] = derived2.script;
        
        if (derived2.type !== null && derived2.type !== undefined) {
          propertiesValue['type'] = derived2.type;
        }
      }
    }
    
    requestContent = JSON.stringify(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var jobInstance = { errorMessage: [], stateAuditRecords: [] };
          result.job = jobInstance;
          
          var jobIdValue = responseDoc['jobId'];
          if (jobIdValue !== null && jobIdValue !== undefined) {
            var jobIdInstance = jobIdValue;
            jobInstance.jobId = jobIdInstance;
          }
          
          var nameValue = responseDoc['name'];
          if (nameValue !== null && nameValue !== undefined) {
            var nameInstance = nameValue;
            jobInstance.name = nameInstance;
          }
          
          var typeValue = responseDoc['type'];
          if (typeValue !== null && typeValue !== undefined) {
            var typeInstance = typeValue;
            jobInstance.type = typeInstance;
          }
          
          var submitterValue = responseDoc['submitter'];
          if (submitterValue !== null && submitterValue !== undefined) {
            var submitterInstance = submitterValue;
            jobInstance.submitter = submitterInstance;
          }
          
          var errorMessageArray2 = responseDoc['errorMessage'];
          if (errorMessageArray2 !== null && errorMessageArray2 !== undefined) {
            for (var loweredIndex6 = 0; loweredIndex6 < errorMessageArray2.length; loweredIndex6 = loweredIndex6 + 1) {
              var errorMessageValue2 = errorMessageArray2[loweredIndex6];
              var errorMessageInstance = {};
              jobInstance.errorMessage.push(errorMessageInstance);
              
              var descriptionValue = errorMessageValue2['description'];
              if (descriptionValue !== null && descriptionValue !== undefined) {
                var descriptionInstance = descriptionValue;
                errorMessageInstance.description = descriptionInstance;
              }
              
              var detailsValue = errorMessageValue2['details'];
              if (detailsValue !== null && detailsValue !== undefined) {
                var detailsInstance = detailsValue;
                errorMessageInstance.details = detailsInstance;
              }
              
              var endOffsetValue = errorMessageValue2['endOffset'];
              if (endOffsetValue !== null && endOffsetValue !== undefined) {
                var endOffsetInstance = endOffsetValue;
                errorMessageInstance.endOffset = endOffsetInstance;
              }
              
              var errorIdValue = errorMessageValue2['errorId'];
              if (errorIdValue !== null && errorIdValue !== undefined) {
                var errorIdInstance = errorIdValue;
                errorMessageInstance.errorId = errorIdInstance;
              }
              
              var filePathValue = errorMessageValue2['filePath'];
              if (filePathValue !== null && filePathValue !== undefined) {
                var filePathInstance = filePathValue;
                errorMessageInstance.filePath = filePathInstance;
              }
              
              var helpLinkValue = errorMessageValue2['helpLink'];
              if (helpLinkValue !== null && helpLinkValue !== undefined) {
                var helpLinkInstance = helpLinkValue;
                errorMessageInstance.helpLink = helpLinkInstance;
              }
              
              var internalDiagnosticsValue = errorMessageValue2['internalDiagnostics'];
              if (internalDiagnosticsValue !== null && internalDiagnosticsValue !== undefined) {
                var internalDiagnosticsInstance = internalDiagnosticsValue;
                errorMessageInstance.internalDiagnostics = internalDiagnosticsInstance;
              }
              
              var lineNumberValue = errorMessageValue2['lineNumber'];
              if (lineNumberValue !== null && lineNumberValue !== undefined) {
                var lineNumberInstance = lineNumberValue;
                errorMessageInstance.lineNumber = lineNumberInstance;
              }
              
              var messageValue = errorMessageValue2['message'];
              if (messageValue !== null && messageValue !== undefined) {
                var messageInstance = messageValue;
                errorMessageInstance.message = messageInstance;
              }
              
              var resolutionValue = errorMessageValue2['resolution'];
              if (resolutionValue !== null && resolutionValue !== undefined) {
                var resolutionInstance = resolutionValue;
                errorMessageInstance.resolution = resolutionInstance;
              }
              
              var severityValue = errorMessageValue2['severity'];
              if (severityValue !== null && severityValue !== undefined) {
                var severityInstance = severityValue;
                errorMessageInstance.severity = severityInstance;
              }
              
              var sourceValue = errorMessageValue2['source'];
              if (sourceValue !== null && sourceValue !== undefined) {
                var sourceInstance = sourceValue;
                errorMessageInstance.source = sourceInstance;
              }
              
              var startOffsetValue = errorMessageValue2['startOffset'];
              if (startOffsetValue !== null && startOffsetValue !== undefined) {
                var startOffsetInstance = startOffsetValue;
                errorMessageInstance.startOffset = startOffsetInstance;
              }
            }
          }
          
          var degreeOfParallelismValue = responseDoc['degreeOfParallelism'];
          if (degreeOfParallelismValue !== null && degreeOfParallelismValue !== undefined) {
            var degreeOfParallelismInstance = degreeOfParallelismValue;
            jobInstance.degreeOfParallelism = degreeOfParallelismInstance;
          }
          
          var priorityValue = responseDoc['priority'];
          if (priorityValue !== null && priorityValue !== undefined) {
            var priorityInstance = priorityValue;
            jobInstance.priority = priorityInstance;
          }
          
          var submitTimeValue = responseDoc['submitTime'];
          if (submitTimeValue !== null && submitTimeValue !== undefined) {
            var submitTimeInstance = submitTimeValue;
            jobInstance.submitTime = submitTimeInstance;
          }
          
          var startTimeValue = responseDoc['startTime'];
          if (startTimeValue !== null && startTimeValue !== undefined) {
            var startTimeInstance = startTimeValue;
            jobInstance.startTime = startTimeInstance;
          }
          
          var endTimeValue = responseDoc['endTime'];
          if (endTimeValue !== null && endTimeValue !== undefined) {
            var endTimeInstance = endTimeValue;
            jobInstance.endTime = endTimeInstance;
          }
          
          var stateValue = responseDoc['state'];
          if (stateValue !== null && stateValue !== undefined) {
            var stateInstance = stateValue;
            jobInstance.state = stateInstance;
          }
          
          var resultValue = responseDoc['result'];
          if (resultValue !== null && resultValue !== undefined) {
            var resultInstance = resultValue;
            jobInstance.result = resultInstance;
          }
          
          var stateAuditRecordsArray2 = responseDoc['stateAuditRecords'];
          if (stateAuditRecordsArray2 !== null && stateAuditRecordsArray2 !== undefined) {
            for (var loweredIndex7 = 0; loweredIndex7 < stateAuditRecordsArray2.length; loweredIndex7 = loweredIndex7 + 1) {
              var stateAuditRecordsValue = stateAuditRecordsArray2[loweredIndex7];
              var jobStateAuditRecordInstance = {};
              jobInstance.stateAuditRecords.push(jobStateAuditRecordInstance);
              
              var newStateValue = stateAuditRecordsValue['newState'];
              if (newStateValue !== null && newStateValue !== undefined) {
                var newStateInstance = newStateValue;
                jobStateAuditRecordInstance.newState = newStateInstance;
              }
              
              var timeStampValue = stateAuditRecordsValue['timeStamp'];
              if (timeStampValue !== null && timeStampValue !== undefined) {
                var timeStampInstance = timeStampValue;
                jobStateAuditRecordInstance.timeStamp = timeStampInstance;
              }
              
              var requestedByUserValue = stateAuditRecordsValue['requestedByUser'];
              if (requestedByUserValue !== null && requestedByUserValue !== undefined) {
                var requestedByUserInstance = requestedByUserValue;
                jobStateAuditRecordInstance.requestedByUser = requestedByUserInstance;
              }
              
              var detailsValue2 = stateAuditRecordsValue['details'];
              if (detailsValue2 !== null && detailsValue2 !== undefined) {
                var detailsInstance2 = detailsValue2;
                jobStateAuditRecordInstance.details = detailsInstance2;
              }
            }
          }
          
          var propertiesValue2 = responseDoc['properties'];
          if (propertiesValue2 !== null && propertiesValue2 !== undefined) {
            var typeName = propertiesValue2['type'];
            if (typeName === 'Hive') {
              var hivePropertiesInstance = { statementInfo: [] };
              
              var statementCountValue = propertiesValue2['statementCount'];
              if (statementCountValue !== null && statementCountValue !== undefined) {
                var statementCountInstance = statementCountValue;
                hivePropertiesInstance.statementCount = statementCountInstance;
              }
              
              var executedStatementCountValue = propertiesValue2['executedStatementCount'];
              if (executedStatementCountValue !== null && executedStatementCountValue !== undefined) {
                var executedStatementCountInstance = executedStatementCountValue;
                hivePropertiesInstance.executedStatementCount = executedStatementCountInstance;
              }
              
              var logsLocationValue = propertiesValue2['logsLocation'];
              if (logsLocationValue !== null && logsLocationValue !== undefined) {
                var logsLocationInstance = logsLocationValue;
                hivePropertiesInstance.logsLocation = logsLocationInstance;
              }
              
              var statementInfoArray2 = propertiesValue2['statementInfo'];
              if (statementInfoArray2 !== null && statementInfoArray2 !== undefined) {
                for (var loweredIndex8 = 0; loweredIndex8 < statementInfoArray2.length; loweredIndex8 = loweredIndex8 + 1) {
                  var statementInfoValue = statementInfoArray2[loweredIndex8];
                  var hiveJobStatementInfoInstance = {};
                  hivePropertiesInstance.statementInfo.push(hiveJobStatementInfoInstance);
                  
                  var logLocationValue = statementInfoValue['logLocation'];
                  if (logLocationValue !== null && logLocationValue !== undefined) {
                    var logLocationInstance = logLocationValue;
                    hiveJobStatementInfoInstance.logLocation = logLocationInstance;
                  }
                  
                  var resultPreviewLocationValue = statementInfoValue['resultPreviewLocation'];
                  if (resultPreviewLocationValue !== null && resultPreviewLocationValue !== undefined) {
                    var resultPreviewLocationInstance = resultPreviewLocationValue;
                    hiveJobStatementInfoInstance.resultPreviewLocation = resultPreviewLocationInstance;
                  }
                  
                  var resultLocationValue = statementInfoValue['resultLocation'];
                  if (resultLocationValue !== null && resultLocationValue !== undefined) {
                    var resultLocationInstance = resultLocationValue;
                    hiveJobStatementInfoInstance.resultLocation = resultLocationInstance;
                  }
                  
                  var errorMessageValue3 = statementInfoValue['errorMessage'];
                  if (errorMessageValue3 !== null && errorMessageValue3 !== undefined) {
                    var errorMessageInstance2 = errorMessageValue3;
                    hiveJobStatementInfoInstance.errorMessage = errorMessageInstance2;
                  }
                }
              }
              
              var warehouseLocationValue = propertiesValue2['warehouseLocation'];
              if (warehouseLocationValue !== null && warehouseLocationValue !== undefined) {
                var warehouseLocationInstance = warehouseLocationValue;
                hivePropertiesInstance.warehouseLocation = warehouseLocationInstance;
              }
              
              var runtimeVersionValue = propertiesValue2['runtimeVersion'];
              if (runtimeVersionValue !== null && runtimeVersionValue !== undefined) {
                var runtimeVersionInstance = runtimeVersionValue;
                hivePropertiesInstance.runtimeVersion = runtimeVersionInstance;
              }
              
              var scriptValue = propertiesValue2['script'];
              if (scriptValue !== null && scriptValue !== undefined) {
                var scriptInstance = scriptValue;
                hivePropertiesInstance.script = scriptInstance;
              }
              
              var typeValue2 = propertiesValue2['type'];
              if (typeValue2 !== null && typeValue2 !== undefined) {
                var typeInstance2 = typeValue2;
                hivePropertiesInstance.type = typeInstance2;
              }
              jobInstance.properties = hivePropertiesInstance;
            }
            if (typeName === 'USql') {
              var uSqlPropertiesInstance = { diagnostics: [], resources: [] };
              
              var resourcesArray2 = propertiesValue2['resources'];
              if (resourcesArray2 !== null && resourcesArray2 !== undefined) {
                for (var loweredIndex9 = 0; loweredIndex9 < resourcesArray2.length; loweredIndex9 = loweredIndex9 + 1) {
                  var resourcesValue = resourcesArray2[loweredIndex9];
                  var jobResourceInstance = {};
                  uSqlPropertiesInstance.resources.push(jobResourceInstance);
                  
                  var nameValue2 = resourcesValue['name'];
                  if (nameValue2 !== null && nameValue2 !== undefined) {
                    var nameInstance2 = nameValue2;
                    jobResourceInstance.name = nameInstance2;
                  }
                  
                  var resourcePathValue = resourcesValue['resourcePath'];
                  if (resourcePathValue !== null && resourcePathValue !== undefined) {
                    var resourcePathInstance = resourcePathValue;
                    jobResourceInstance.resourcePath = resourcePathInstance;
                  }
                  
                  var typeValue3 = resourcesValue['type'];
                  if (typeValue3 !== null && typeValue3 !== undefined) {
                    var typeInstance3 = typeValue3;
                    jobResourceInstance.type = typeInstance3;
                  }
                }
              }
              
              var algebraFilePathValue = propertiesValue2['algebraFilePath'];
              if (algebraFilePathValue !== null && algebraFilePathValue !== undefined) {
                var algebraFilePathInstance = algebraFilePathValue;
                uSqlPropertiesInstance.algebraFilePath = algebraFilePathInstance;
              }
              
              var totalCompilationTimeValue = propertiesValue2['totalCompilationTime'];
              if (totalCompilationTimeValue !== null && totalCompilationTimeValue !== undefined) {
                var totalCompilationTimeInstance = moment.duration(totalCompilationTimeValue);
                uSqlPropertiesInstance.totalCompilationTime = totalCompilationTimeInstance;
              }
              
              var totalPauseTimeValue = propertiesValue2['totalPauseTime'];
              if (totalPauseTimeValue !== null && totalPauseTimeValue !== undefined) {
                var totalPauseTimeInstance = moment.duration(totalPauseTimeValue);
                uSqlPropertiesInstance.totalPausedTime = totalPauseTimeInstance;
              }
              
              var totalQueuedTimeValue = propertiesValue2['totalQueuedTime'];
              if (totalQueuedTimeValue !== null && totalQueuedTimeValue !== undefined) {
                var totalQueuedTimeInstance = moment.duration(totalQueuedTimeValue);
                uSqlPropertiesInstance.totalQueuedTime = totalQueuedTimeInstance;
              }
              
              var totalRunningTimeValue = propertiesValue2['totalRunningTime'];
              if (totalRunningTimeValue !== null && totalRunningTimeValue !== undefined) {
                var totalRunningTimeInstance = moment.duration(totalRunningTimeValue);
                uSqlPropertiesInstance.totalRunningTime = totalRunningTimeInstance;
              }
              
              var rootProcessNodeIdValue = propertiesValue2['rootProcessNodeId'];
              if (rootProcessNodeIdValue !== null && rootProcessNodeIdValue !== undefined) {
                var rootProcessNodeIdInstance = rootProcessNodeIdValue;
                uSqlPropertiesInstance.rootProcessNodeId = rootProcessNodeIdInstance;
              }
              
              var yarnApplicationIdValue = propertiesValue2['yarnApplicationId'];
              if (yarnApplicationIdValue !== null && yarnApplicationIdValue !== undefined) {
                var yarnApplicationIdInstance = yarnApplicationIdValue;
                uSqlPropertiesInstance.yarnApplicationId = yarnApplicationIdInstance;
              }
              
              var yarnApplicationTimeStampValue = propertiesValue2['yarnApplicationTimeStamp'];
              if (yarnApplicationTimeStampValue !== null && yarnApplicationTimeStampValue !== undefined) {
                var yarnApplicationTimeStampInstance = yarnApplicationTimeStampValue;
                uSqlPropertiesInstance.yarnApplicationTimeStamp = yarnApplicationTimeStampInstance;
              }
              
              var compileModeValue = propertiesValue2['compileMode'];
              if (compileModeValue !== null && compileModeValue !== undefined) {
                var compileModeInstance = compileModeValue;
                uSqlPropertiesInstance.compileMode = compileModeInstance;
              }
              
              var diagnosticsArray2 = propertiesValue2['diagnostics'];
              if (diagnosticsArray2 !== null && diagnosticsArray2 !== undefined) {
                for (var loweredIndex10 = 0; loweredIndex10 < diagnosticsArray2.length; loweredIndex10 = loweredIndex10 + 1) {
                  var diagnosticsValue2 = diagnosticsArray2[loweredIndex10];
                  var diagnosticsInstance = {};
                  uSqlPropertiesInstance.diagnostics.push(diagnosticsInstance);
                  
                  var columnNumberValue = diagnosticsValue2['columnNumber'];
                  if (columnNumberValue !== null && columnNumberValue !== undefined) {
                    var columnNumberInstance = columnNumberValue;
                    diagnosticsInstance.columnNumber = columnNumberInstance;
                  }
                  
                  var endValue = diagnosticsValue2['end'];
                  if (endValue !== null && endValue !== undefined) {
                    var endInstance = endValue;
                    diagnosticsInstance.end = endInstance;
                  }
                  
                  var lineNumberValue2 = diagnosticsValue2['lineNumber'];
                  if (lineNumberValue2 !== null && lineNumberValue2 !== undefined) {
                    var lineNumberInstance2 = lineNumberValue2;
                    diagnosticsInstance.lineNumber = lineNumberInstance2;
                  }
                  
                  var messageValue2 = diagnosticsValue2['message'];
                  if (messageValue2 !== null && messageValue2 !== undefined) {
                    var messageInstance2 = messageValue2;
                    diagnosticsInstance.message = messageInstance2;
                  }
                  
                  var severityValue2 = diagnosticsValue2['severity'];
                  if (severityValue2 !== null && severityValue2 !== undefined) {
                    var severityInstance2 = severityValue2;
                    diagnosticsInstance.severity = severityInstance2;
                  }
                  
                  var startValue = diagnosticsValue2['start'];
                  if (startValue !== null && startValue !== undefined) {
                    var startInstance = startValue;
                    diagnosticsInstance.start = startInstance;
                  }
                }
              }
              
              var runtimeVersionValue2 = propertiesValue2['runtimeVersion'];
              if (runtimeVersionValue2 !== null && runtimeVersionValue2 !== undefined) {
                var runtimeVersionInstance2 = runtimeVersionValue2;
                uSqlPropertiesInstance.runtimeVersion = runtimeVersionInstance2;
              }
              
              var scriptValue2 = propertiesValue2['script'];
              if (scriptValue2 !== null && scriptValue2 !== undefined) {
                var scriptInstance2 = scriptValue2;
                uSqlPropertiesInstance.script = scriptInstance2;
              }
              
              var typeValue4 = propertiesValue2['type'];
              if (typeValue4 !== null && typeValue4 !== undefined) {
                var typeInstance4 = typeValue4;
                uSqlPropertiesInstance.type = typeInstance4;
              }
              jobInstance.properties = uSqlPropertiesInstance;
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Cancels the running job specified by the job ID.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} accountName The name of the Data Lake Analytics account to
   * cancel the job for
   * 
   * @param {Guid} jobIdentity JobInfo ID to cancel.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  JobOperations.prototype.cancel = function(resourceGroupName, accountName, jobIdentity, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (accountName === null || accountName === undefined) {
      return callback(new Error('accountName cannot be null.'));
    }
    if (jobIdentity === null || jobIdentity === undefined) {
      return callback(new Error('jobIdentity cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + 'https://';
    url2 = url2 + encodeURIComponent(accountName);
    url2 = url2 + '.';
    if (this.client.jobServiceUri !== null && this.client.jobServiceUri !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.jobServiceUri);
    }
    url2 = url2 + '/Jobs/';
    url2 = url2 + encodeURIComponent(jobIdentity);
    url2 = url2 + '/CancelJob';
    var queryParameters = [];
    queryParameters.push('api-version=2015-11-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsJob 0.9.6-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsJob 0.9.6-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['useragent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsJob 0.9.6-preview' + this.client.userAgentSuffix;
    }
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsJob 0.9.6-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsJob 0.9.6-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['User-Agent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsJob 0.9.6-preview' + this.client.userAgentSuffix;
    }
    if (resourceGroupName !== null && resourceGroupName !== undefined) {
      httpRequest.headers['x-ms-client-resource-group-name'] = resourceGroupName;
    }
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      httpRequest.headers['x-ms-client-subscription-id'] = this.client.credentials.subscriptionId;
    }
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Submits the specified job to the specified Data Lake Analytics account for
   * computation.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} accountName The name of the Data Lake Analytics account to
   * create the job for
   * 
   * @param {JobInfoBuildOrCreateParameters} parameters The parameters to
   * submit a job.
   * 
   * @param {JobInformation} [parameters.job] Gets or sets a job information
   * object.
   * 
   * @param {Guid} [parameters.job.jobId] Gets or sets the job's unique
   * identifier.
   * 
   * @param {string} [parameters.job.name] Gets or sets the friendly name of
   * the job.
   * 
   * @param {string} [parameters.job.type] Gets or sets the job type of the
   * current job (i.e. Hive or U-SQL).
   * 
   * @param {string} [parameters.job.submitter] Gets or sets the user or
   * account that submitted the job.
   * 
   * @param {ICollection} [parameters.job.errorMessage] Gets or sets the error
   * message details for the job, if it failed.
   * 
   * @param {number} [parameters.job.degreeOfParallelism] Gets or sets the
   * degree of parallelism used for this job. This must have a minimum value
   * of 2
   * 
   * @param {number} [parameters.job.priority] Gets or sets the priority value
   * for the current job which must be greater than 1.
   * 
   * @param {DateTimeOffset} [parameters.job.submitTime] Gets or sets the time
   * the job was submitted to the service.
   * 
   * @param {DateTimeOffset} [parameters.job.startTime] Gets or sets the start
   * time of the job.
   * 
   * @param {DateTimeOffset} [parameters.job.endTime] Gets or sets the
   * completion time of the job
   * 
   * @param {JobState} [parameters.job.state] Gets or sets a more detailed
   * state of the job than the result. Especially used for intermediate states
   * and errors
   * 
   * @param {JobResult} [parameters.job.result] Gets or sets the result of job
   * execution or the current result of the running job.
   * 
   * @param {ICollection} [parameters.job.stateAuditRecords] Gets or sets the
   * job state audit records, indicating when various operations have been
   * performed on this job.
   * 
   * @param {JobProperties} [parameters.job.properties] Gets or sets the job
   * specific properties.
   * 
   * @param {string} [parameters.job.properties.runtimeVersion] Gets or sets
   * the runtime version of the U-SQL engine to use
   * 
   * @param {string} [parameters.job.properties.script] Gets or sets the U-SQL
   * script to run
   * 
   * @param {string} [parameters.job.properties.type] Gets or sets the job type
   * of the current job (i.e. Hive or U-SQL).
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  JobOperations.prototype.create = function(resourceGroupName, accountName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (accountName === null || accountName === undefined) {
      return callback(new Error('accountName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.job !== null && parameters.job !== undefined) {
      if (parameters.job.jobId === null || parameters.job.jobId === undefined) {
        return callback(new Error('parameters.job.jobId cannot be null.'));
      }
      if (parameters.job.name === null || parameters.job.name === undefined) {
        return callback(new Error('parameters.job.name cannot be null.'));
      }
      if (parameters.job.properties === null || parameters.job.properties === undefined) {
        return callback(new Error('parameters.job.properties cannot be null.'));
      }
      if (parameters.job.properties.script === null || parameters.job.properties.script === undefined) {
        return callback(new Error('parameters.job.properties.script cannot be null.'));
      }
      if (parameters.job.type === null || parameters.job.type === undefined) {
        return callback(new Error('parameters.job.type cannot be null.'));
      }
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + 'https://';
    url2 = url2 + encodeURIComponent(accountName);
    url2 = url2 + '.';
    if (this.client.jobServiceUri !== null && this.client.jobServiceUri !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.jobServiceUri);
    }
    url2 = url2 + '/Jobs/';
    if (parameters.job !== null && parameters.job !== undefined && parameters.job.jobId !== null && parameters.job.jobId !== undefined) {
      url2 = url2 + encodeURIComponent(parameters.job.jobId);
    }
    var queryParameters = [];
    queryParameters.push('api-version=2015-11-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsJob 0.9.6-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsJob 0.9.6-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['useragent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsJob 0.9.6-preview' + this.client.userAgentSuffix;
    }
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsJob 0.9.6-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsJob 0.9.6-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['User-Agent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsJob 0.9.6-preview' + this.client.userAgentSuffix;
    }
    if (resourceGroupName !== null && resourceGroupName !== undefined) {
      httpRequest.headers['x-ms-client-resource-group-name'] = resourceGroupName;
    }
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      httpRequest.headers['x-ms-client-subscription-id'] = this.client.credentials.subscriptionId;
    }
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = null;
    
    var jobInfoBuildOrCreateParametersValue = {};
    requestDoc = jobInfoBuildOrCreateParametersValue;
    
    if (parameters.job !== null && parameters.job !== undefined) {
      jobInfoBuildOrCreateParametersValue['jobId'] = parameters.job.jobId;
      
      jobInfoBuildOrCreateParametersValue['name'] = parameters.job.name;
      
      jobInfoBuildOrCreateParametersValue['type'] = parameters.job.type;
      
      if (parameters.job.submitter !== null && parameters.job.submitter !== undefined) {
        jobInfoBuildOrCreateParametersValue['submitter'] = parameters.job.submitter;
      }
      
      if (parameters.job.errorMessage !== null && parameters.job.errorMessage !== undefined) {
        var errorMessageArray = [];
        for (var loweredIndex1 = 0; loweredIndex1 < parameters.job.errorMessage.length; loweredIndex1 = loweredIndex1 + 1) {
          var errorMessageItem = parameters.job.errorMessage[loweredIndex1];
          var errorMessageValue = {};
          errorMessageArray.push(errorMessageValue);
          
          if (errorMessageItem.description !== null && errorMessageItem.description !== undefined) {
            errorMessageValue['description'] = errorMessageItem.description;
          }
          
          if (errorMessageItem.details !== null && errorMessageItem.details !== undefined) {
            errorMessageValue['details'] = errorMessageItem.details;
          }
          
          if (errorMessageItem.endOffset !== null && errorMessageItem.endOffset !== undefined) {
            errorMessageValue['endOffset'] = errorMessageItem.endOffset;
          }
          
          if (errorMessageItem.errorId !== null && errorMessageItem.errorId !== undefined) {
            errorMessageValue['errorId'] = errorMessageItem.errorId;
          }
          
          if (errorMessageItem.filePath !== null && errorMessageItem.filePath !== undefined) {
            errorMessageValue['filePath'] = errorMessageItem.filePath;
          }
          
          if (errorMessageItem.helpLink !== null && errorMessageItem.helpLink !== undefined) {
            errorMessageValue['helpLink'] = errorMessageItem.helpLink;
          }
          
          if (errorMessageItem.internalDiagnostics !== null && errorMessageItem.internalDiagnostics !== undefined) {
            errorMessageValue['internalDiagnostics'] = errorMessageItem.internalDiagnostics;
          }
          
          if (errorMessageItem.lineNumber !== null && errorMessageItem.lineNumber !== undefined) {
            errorMessageValue['lineNumber'] = errorMessageItem.lineNumber;
          }
          
          if (errorMessageItem.message !== null && errorMessageItem.message !== undefined) {
            errorMessageValue['message'] = errorMessageItem.message;
          }
          
          if (errorMessageItem.resolution !== null && errorMessageItem.resolution !== undefined) {
            errorMessageValue['resolution'] = errorMessageItem.resolution;
          }
          
          if (errorMessageItem.severity !== null && errorMessageItem.severity !== undefined) {
            errorMessageValue['severity'] = errorMessageItem.severity;
          }
          
          if (errorMessageItem.source !== null && errorMessageItem.source !== undefined) {
            errorMessageValue['source'] = errorMessageItem.source;
          }
          
          if (errorMessageItem.startOffset !== null && errorMessageItem.startOffset !== undefined) {
            errorMessageValue['startOffset'] = errorMessageItem.startOffset;
          }
        }
        jobInfoBuildOrCreateParametersValue['errorMessage'] = errorMessageArray;
      }
      
      if (parameters.job.degreeOfParallelism !== null && parameters.job.degreeOfParallelism !== undefined) {
        jobInfoBuildOrCreateParametersValue['degreeOfParallelism'] = parameters.job.degreeOfParallelism;
      }
      
      if (parameters.job.priority !== null && parameters.job.priority !== undefined) {
        jobInfoBuildOrCreateParametersValue['priority'] = parameters.job.priority;
      }
      
      if (parameters.job.submitTime !== null && parameters.job.submitTime !== undefined) {
        jobInfoBuildOrCreateParametersValue['submitTime'] = parameters.job.submitTime;
      }
      
      if (parameters.job.startTime !== null && parameters.job.startTime !== undefined) {
        jobInfoBuildOrCreateParametersValue['startTime'] = parameters.job.startTime;
      }
      
      if (parameters.job.endTime !== null && parameters.job.endTime !== undefined) {
        jobInfoBuildOrCreateParametersValue['endTime'] = parameters.job.endTime;
      }
      
      if (parameters.job.state !== null && parameters.job.state !== undefined) {
        jobInfoBuildOrCreateParametersValue['state'] = parameters.job.state !== null && parameters.job.state !== undefined ? parameters.job.state.toString() : 'Accepted';
      }
      
      if (parameters.job.result !== null && parameters.job.result !== undefined) {
        jobInfoBuildOrCreateParametersValue['result'] = parameters.job.result !== null && parameters.job.result !== undefined ? parameters.job.result.toString() : 'None';
      }
      
      if (parameters.job.stateAuditRecords !== null && parameters.job.stateAuditRecords !== undefined) {
        var stateAuditRecordsArray = [];
        for (var loweredIndex2 = 0; loweredIndex2 < parameters.job.stateAuditRecords.length; loweredIndex2 = loweredIndex2 + 1) {
          var stateAuditRecordsItem = parameters.job.stateAuditRecords[loweredIndex2];
          var jobStateAuditRecordValue = {};
          stateAuditRecordsArray.push(jobStateAuditRecordValue);
          
          if (stateAuditRecordsItem.newState !== null && stateAuditRecordsItem.newState !== undefined) {
            jobStateAuditRecordValue['newState'] = stateAuditRecordsItem.newState;
          }
          
          if (stateAuditRecordsItem.timeStamp !== null && stateAuditRecordsItem.timeStamp !== undefined) {
            jobStateAuditRecordValue['timeStamp'] = stateAuditRecordsItem.timeStamp;
          }
          
          if (stateAuditRecordsItem.requestedByUser !== null && stateAuditRecordsItem.requestedByUser !== undefined) {
            jobStateAuditRecordValue['requestedByUser'] = stateAuditRecordsItem.requestedByUser;
          }
          
          if (stateAuditRecordsItem.details !== null && stateAuditRecordsItem.details !== undefined) {
            jobStateAuditRecordValue['details'] = stateAuditRecordsItem.details;
          }
        }
        jobInfoBuildOrCreateParametersValue['stateAuditRecords'] = stateAuditRecordsArray;
      }
      
      var propertiesValue = {};
      jobInfoBuildOrCreateParametersValue['properties'] = propertiesValue;
      if (parameters.job.properties.type === 'Hive') {
        propertiesValue['type'] = 'Hive';
        var derived = parameters.job.properties;
        
        if (derived.statementCount !== null && derived.statementCount !== undefined) {
          propertiesValue['statementCount'] = derived.statementCount;
        }
        
        if (derived.executedStatementCount !== null && derived.executedStatementCount !== undefined) {
          propertiesValue['executedStatementCount'] = derived.executedStatementCount;
        }
        
        if (derived.logsLocation !== null && derived.logsLocation !== undefined) {
          propertiesValue['logsLocation'] = derived.logsLocation;
        }
        
        if (derived.statementInfo !== null && derived.statementInfo !== undefined) {
          var statementInfoArray = [];
          for (var loweredIndex3 = 0; loweredIndex3 < derived.statementInfo.length; loweredIndex3 = loweredIndex3 + 1) {
            var statementInfoItem = derived.statementInfo[loweredIndex3];
            var hiveJobStatementInfoValue = {};
            statementInfoArray.push(hiveJobStatementInfoValue);
            
            if (statementInfoItem.logLocation !== null && statementInfoItem.logLocation !== undefined) {
              hiveJobStatementInfoValue['logLocation'] = statementInfoItem.logLocation;
            }
            
            if (statementInfoItem.resultPreviewLocation !== null && statementInfoItem.resultPreviewLocation !== undefined) {
              hiveJobStatementInfoValue['resultPreviewLocation'] = statementInfoItem.resultPreviewLocation;
            }
            
            if (statementInfoItem.resultLocation !== null && statementInfoItem.resultLocation !== undefined) {
              hiveJobStatementInfoValue['resultLocation'] = statementInfoItem.resultLocation;
            }
            
            if (statementInfoItem.errorMessage !== null && statementInfoItem.errorMessage !== undefined) {
              hiveJobStatementInfoValue['errorMessage'] = statementInfoItem.errorMessage;
            }
          }
          propertiesValue['statementInfo'] = statementInfoArray;
        }
        
        if (derived.warehouseLocation !== null && derived.warehouseLocation !== undefined) {
          propertiesValue['warehouseLocation'] = derived.warehouseLocation;
        }
        
        if (derived.runtimeVersion !== null && derived.runtimeVersion !== undefined) {
          propertiesValue['runtimeVersion'] = derived.runtimeVersion;
        }
        
        propertiesValue['script'] = derived.script;
        
        if (derived.type !== null && derived.type !== undefined) {
          propertiesValue['type'] = derived.type;
        }
      }
      if (parameters.job.properties.type === 'USql') {
        propertiesValue['type'] = 'USql';
        var derived2 = parameters.job.properties;
        
        if (derived2.resources !== null && derived2.resources !== undefined) {
          var resourcesArray = [];
          for (var loweredIndex4 = 0; loweredIndex4 < derived2.resources.length; loweredIndex4 = loweredIndex4 + 1) {
            var resourcesItem = derived2.resources[loweredIndex4];
            var jobResourceValue = {};
            resourcesArray.push(jobResourceValue);
            
            if (resourcesItem.name !== null && resourcesItem.name !== undefined) {
              jobResourceValue['name'] = resourcesItem.name;
            }
            
            if (resourcesItem.resourcePath !== null && resourcesItem.resourcePath !== undefined) {
              jobResourceValue['resourcePath'] = resourcesItem.resourcePath;
            }
            
            if (resourcesItem.type !== null && resourcesItem.type !== undefined) {
              jobResourceValue['type'] = resourcesItem.type;
            }
          }
          propertiesValue['resources'] = resourcesArray;
        }
        
        if (derived2.algebraFilePath !== null && derived2.algebraFilePath !== undefined) {
          propertiesValue['algebraFilePath'] = derived2.algebraFilePath;
        }
        
        if (derived2.totalCompilationTime !== null && derived2.totalCompilationTime !== undefined) {
          propertiesValue['totalCompilationTime'] = derived2.totalCompilationTime.toIsoString();
        }
        
        if (derived2.totalPausedTime !== null && derived2.totalPausedTime !== undefined) {
          propertiesValue['totalPauseTime'] = derived2.totalPausedTime.toIsoString();
        }
        
        if (derived2.totalQueuedTime !== null && derived2.totalQueuedTime !== undefined) {
          propertiesValue['totalQueuedTime'] = derived2.totalQueuedTime.toIsoString();
        }
        
        if (derived2.totalRunningTime !== null && derived2.totalRunningTime !== undefined) {
          propertiesValue['totalRunningTime'] = derived2.totalRunningTime.toIsoString();
        }
        
        if (derived2.rootProcessNodeId !== null && derived2.rootProcessNodeId !== undefined) {
          propertiesValue['rootProcessNodeId'] = derived2.rootProcessNodeId;
        }
        
        if (derived2.yarnApplicationId !== null && derived2.yarnApplicationId !== undefined) {
          propertiesValue['yarnApplicationId'] = derived2.yarnApplicationId;
        }
        
        if (derived2.yarnApplicationTimeStamp !== null && derived2.yarnApplicationTimeStamp !== undefined) {
          propertiesValue['yarnApplicationTimeStamp'] = derived2.yarnApplicationTimeStamp;
        }
        
        if (derived2.compileMode !== null && derived2.compileMode !== undefined) {
          propertiesValue['compileMode'] = derived2.compileMode;
        }
        
        if (derived2.diagnostics !== null && derived2.diagnostics !== undefined) {
          var diagnosticsArray = [];
          for (var loweredIndex5 = 0; loweredIndex5 < derived2.diagnostics.length; loweredIndex5 = loweredIndex5 + 1) {
            var diagnosticsItem = derived2.diagnostics[loweredIndex5];
            var diagnosticsValue = {};
            diagnosticsArray.push(diagnosticsValue);
            
            if (diagnosticsItem.columnNumber !== null && diagnosticsItem.columnNumber !== undefined) {
              diagnosticsValue['columnNumber'] = diagnosticsItem.columnNumber;
            }
            
            if (diagnosticsItem.end !== null && diagnosticsItem.end !== undefined) {
              diagnosticsValue['end'] = diagnosticsItem.end;
            }
            
            if (diagnosticsItem.lineNumber !== null && diagnosticsItem.lineNumber !== undefined) {
              diagnosticsValue['lineNumber'] = diagnosticsItem.lineNumber;
            }
            
            if (diagnosticsItem.message !== null && diagnosticsItem.message !== undefined) {
              diagnosticsValue['message'] = diagnosticsItem.message;
            }
            
            if (diagnosticsItem.severity !== null && diagnosticsItem.severity !== undefined) {
              diagnosticsValue['severity'] = diagnosticsItem.severity;
            }
            
            if (diagnosticsItem.start !== null && diagnosticsItem.start !== undefined) {
              diagnosticsValue['start'] = diagnosticsItem.start;
            }
          }
          propertiesValue['diagnostics'] = diagnosticsArray;
        }
        
        if (derived2.runtimeVersion !== null && derived2.runtimeVersion !== undefined) {
          propertiesValue['runtimeVersion'] = derived2.runtimeVersion;
        }
        
        propertiesValue['script'] = derived2.script;
        
        if (derived2.type !== null && derived2.type !== undefined) {
          propertiesValue['type'] = derived2.type;
        }
      }
    }
    
    requestContent = JSON.stringify(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var jobInstance = { errorMessage: [], stateAuditRecords: [] };
          result.job = jobInstance;
          
          var jobIdValue = responseDoc['jobId'];
          if (jobIdValue !== null && jobIdValue !== undefined) {
            var jobIdInstance = jobIdValue;
            jobInstance.jobId = jobIdInstance;
          }
          
          var nameValue = responseDoc['name'];
          if (nameValue !== null && nameValue !== undefined) {
            var nameInstance = nameValue;
            jobInstance.name = nameInstance;
          }
          
          var typeValue = responseDoc['type'];
          if (typeValue !== null && typeValue !== undefined) {
            var typeInstance = typeValue;
            jobInstance.type = typeInstance;
          }
          
          var submitterValue = responseDoc['submitter'];
          if (submitterValue !== null && submitterValue !== undefined) {
            var submitterInstance = submitterValue;
            jobInstance.submitter = submitterInstance;
          }
          
          var errorMessageArray2 = responseDoc['errorMessage'];
          if (errorMessageArray2 !== null && errorMessageArray2 !== undefined) {
            for (var loweredIndex6 = 0; loweredIndex6 < errorMessageArray2.length; loweredIndex6 = loweredIndex6 + 1) {
              var errorMessageValue2 = errorMessageArray2[loweredIndex6];
              var errorMessageInstance = {};
              jobInstance.errorMessage.push(errorMessageInstance);
              
              var descriptionValue = errorMessageValue2['description'];
              if (descriptionValue !== null && descriptionValue !== undefined) {
                var descriptionInstance = descriptionValue;
                errorMessageInstance.description = descriptionInstance;
              }
              
              var detailsValue = errorMessageValue2['details'];
              if (detailsValue !== null && detailsValue !== undefined) {
                var detailsInstance = detailsValue;
                errorMessageInstance.details = detailsInstance;
              }
              
              var endOffsetValue = errorMessageValue2['endOffset'];
              if (endOffsetValue !== null && endOffsetValue !== undefined) {
                var endOffsetInstance = endOffsetValue;
                errorMessageInstance.endOffset = endOffsetInstance;
              }
              
              var errorIdValue = errorMessageValue2['errorId'];
              if (errorIdValue !== null && errorIdValue !== undefined) {
                var errorIdInstance = errorIdValue;
                errorMessageInstance.errorId = errorIdInstance;
              }
              
              var filePathValue = errorMessageValue2['filePath'];
              if (filePathValue !== null && filePathValue !== undefined) {
                var filePathInstance = filePathValue;
                errorMessageInstance.filePath = filePathInstance;
              }
              
              var helpLinkValue = errorMessageValue2['helpLink'];
              if (helpLinkValue !== null && helpLinkValue !== undefined) {
                var helpLinkInstance = helpLinkValue;
                errorMessageInstance.helpLink = helpLinkInstance;
              }
              
              var internalDiagnosticsValue = errorMessageValue2['internalDiagnostics'];
              if (internalDiagnosticsValue !== null && internalDiagnosticsValue !== undefined) {
                var internalDiagnosticsInstance = internalDiagnosticsValue;
                errorMessageInstance.internalDiagnostics = internalDiagnosticsInstance;
              }
              
              var lineNumberValue = errorMessageValue2['lineNumber'];
              if (lineNumberValue !== null && lineNumberValue !== undefined) {
                var lineNumberInstance = lineNumberValue;
                errorMessageInstance.lineNumber = lineNumberInstance;
              }
              
              var messageValue = errorMessageValue2['message'];
              if (messageValue !== null && messageValue !== undefined) {
                var messageInstance = messageValue;
                errorMessageInstance.message = messageInstance;
              }
              
              var resolutionValue = errorMessageValue2['resolution'];
              if (resolutionValue !== null && resolutionValue !== undefined) {
                var resolutionInstance = resolutionValue;
                errorMessageInstance.resolution = resolutionInstance;
              }
              
              var severityValue = errorMessageValue2['severity'];
              if (severityValue !== null && severityValue !== undefined) {
                var severityInstance = severityValue;
                errorMessageInstance.severity = severityInstance;
              }
              
              var sourceValue = errorMessageValue2['source'];
              if (sourceValue !== null && sourceValue !== undefined) {
                var sourceInstance = sourceValue;
                errorMessageInstance.source = sourceInstance;
              }
              
              var startOffsetValue = errorMessageValue2['startOffset'];
              if (startOffsetValue !== null && startOffsetValue !== undefined) {
                var startOffsetInstance = startOffsetValue;
                errorMessageInstance.startOffset = startOffsetInstance;
              }
            }
          }
          
          var degreeOfParallelismValue = responseDoc['degreeOfParallelism'];
          if (degreeOfParallelismValue !== null && degreeOfParallelismValue !== undefined) {
            var degreeOfParallelismInstance = degreeOfParallelismValue;
            jobInstance.degreeOfParallelism = degreeOfParallelismInstance;
          }
          
          var priorityValue = responseDoc['priority'];
          if (priorityValue !== null && priorityValue !== undefined) {
            var priorityInstance = priorityValue;
            jobInstance.priority = priorityInstance;
          }
          
          var submitTimeValue = responseDoc['submitTime'];
          if (submitTimeValue !== null && submitTimeValue !== undefined) {
            var submitTimeInstance = submitTimeValue;
            jobInstance.submitTime = submitTimeInstance;
          }
          
          var startTimeValue = responseDoc['startTime'];
          if (startTimeValue !== null && startTimeValue !== undefined) {
            var startTimeInstance = startTimeValue;
            jobInstance.startTime = startTimeInstance;
          }
          
          var endTimeValue = responseDoc['endTime'];
          if (endTimeValue !== null && endTimeValue !== undefined) {
            var endTimeInstance = endTimeValue;
            jobInstance.endTime = endTimeInstance;
          }
          
          var stateValue = responseDoc['state'];
          if (stateValue !== null && stateValue !== undefined) {
            var stateInstance = stateValue;
            jobInstance.state = stateInstance;
          }
          
          var resultValue = responseDoc['result'];
          if (resultValue !== null && resultValue !== undefined) {
            var resultInstance = resultValue;
            jobInstance.result = resultInstance;
          }
          
          var stateAuditRecordsArray2 = responseDoc['stateAuditRecords'];
          if (stateAuditRecordsArray2 !== null && stateAuditRecordsArray2 !== undefined) {
            for (var loweredIndex7 = 0; loweredIndex7 < stateAuditRecordsArray2.length; loweredIndex7 = loweredIndex7 + 1) {
              var stateAuditRecordsValue = stateAuditRecordsArray2[loweredIndex7];
              var jobStateAuditRecordInstance = {};
              jobInstance.stateAuditRecords.push(jobStateAuditRecordInstance);
              
              var newStateValue = stateAuditRecordsValue['newState'];
              if (newStateValue !== null && newStateValue !== undefined) {
                var newStateInstance = newStateValue;
                jobStateAuditRecordInstance.newState = newStateInstance;
              }
              
              var timeStampValue = stateAuditRecordsValue['timeStamp'];
              if (timeStampValue !== null && timeStampValue !== undefined) {
                var timeStampInstance = timeStampValue;
                jobStateAuditRecordInstance.timeStamp = timeStampInstance;
              }
              
              var requestedByUserValue = stateAuditRecordsValue['requestedByUser'];
              if (requestedByUserValue !== null && requestedByUserValue !== undefined) {
                var requestedByUserInstance = requestedByUserValue;
                jobStateAuditRecordInstance.requestedByUser = requestedByUserInstance;
              }
              
              var detailsValue2 = stateAuditRecordsValue['details'];
              if (detailsValue2 !== null && detailsValue2 !== undefined) {
                var detailsInstance2 = detailsValue2;
                jobStateAuditRecordInstance.details = detailsInstance2;
              }
            }
          }
          
          var propertiesValue2 = responseDoc['properties'];
          if (propertiesValue2 !== null && propertiesValue2 !== undefined) {
            var typeName = propertiesValue2['type'];
            if (typeName === 'Hive') {
              var hivePropertiesInstance = { statementInfo: [] };
              
              var statementCountValue = propertiesValue2['statementCount'];
              if (statementCountValue !== null && statementCountValue !== undefined) {
                var statementCountInstance = statementCountValue;
                hivePropertiesInstance.statementCount = statementCountInstance;
              }
              
              var executedStatementCountValue = propertiesValue2['executedStatementCount'];
              if (executedStatementCountValue !== null && executedStatementCountValue !== undefined) {
                var executedStatementCountInstance = executedStatementCountValue;
                hivePropertiesInstance.executedStatementCount = executedStatementCountInstance;
              }
              
              var logsLocationValue = propertiesValue2['logsLocation'];
              if (logsLocationValue !== null && logsLocationValue !== undefined) {
                var logsLocationInstance = logsLocationValue;
                hivePropertiesInstance.logsLocation = logsLocationInstance;
              }
              
              var statementInfoArray2 = propertiesValue2['statementInfo'];
              if (statementInfoArray2 !== null && statementInfoArray2 !== undefined) {
                for (var loweredIndex8 = 0; loweredIndex8 < statementInfoArray2.length; loweredIndex8 = loweredIndex8 + 1) {
                  var statementInfoValue = statementInfoArray2[loweredIndex8];
                  var hiveJobStatementInfoInstance = {};
                  hivePropertiesInstance.statementInfo.push(hiveJobStatementInfoInstance);
                  
                  var logLocationValue = statementInfoValue['logLocation'];
                  if (logLocationValue !== null && logLocationValue !== undefined) {
                    var logLocationInstance = logLocationValue;
                    hiveJobStatementInfoInstance.logLocation = logLocationInstance;
                  }
                  
                  var resultPreviewLocationValue = statementInfoValue['resultPreviewLocation'];
                  if (resultPreviewLocationValue !== null && resultPreviewLocationValue !== undefined) {
                    var resultPreviewLocationInstance = resultPreviewLocationValue;
                    hiveJobStatementInfoInstance.resultPreviewLocation = resultPreviewLocationInstance;
                  }
                  
                  var resultLocationValue = statementInfoValue['resultLocation'];
                  if (resultLocationValue !== null && resultLocationValue !== undefined) {
                    var resultLocationInstance = resultLocationValue;
                    hiveJobStatementInfoInstance.resultLocation = resultLocationInstance;
                  }
                  
                  var errorMessageValue3 = statementInfoValue['errorMessage'];
                  if (errorMessageValue3 !== null && errorMessageValue3 !== undefined) {
                    var errorMessageInstance2 = errorMessageValue3;
                    hiveJobStatementInfoInstance.errorMessage = errorMessageInstance2;
                  }
                }
              }
              
              var warehouseLocationValue = propertiesValue2['warehouseLocation'];
              if (warehouseLocationValue !== null && warehouseLocationValue !== undefined) {
                var warehouseLocationInstance = warehouseLocationValue;
                hivePropertiesInstance.warehouseLocation = warehouseLocationInstance;
              }
              
              var runtimeVersionValue = propertiesValue2['runtimeVersion'];
              if (runtimeVersionValue !== null && runtimeVersionValue !== undefined) {
                var runtimeVersionInstance = runtimeVersionValue;
                hivePropertiesInstance.runtimeVersion = runtimeVersionInstance;
              }
              
              var scriptValue = propertiesValue2['script'];
              if (scriptValue !== null && scriptValue !== undefined) {
                var scriptInstance = scriptValue;
                hivePropertiesInstance.script = scriptInstance;
              }
              
              var typeValue2 = propertiesValue2['type'];
              if (typeValue2 !== null && typeValue2 !== undefined) {
                var typeInstance2 = typeValue2;
                hivePropertiesInstance.type = typeInstance2;
              }
              jobInstance.properties = hivePropertiesInstance;
            }
            if (typeName === 'USql') {
              var uSqlPropertiesInstance = { diagnostics: [], resources: [] };
              
              var resourcesArray2 = propertiesValue2['resources'];
              if (resourcesArray2 !== null && resourcesArray2 !== undefined) {
                for (var loweredIndex9 = 0; loweredIndex9 < resourcesArray2.length; loweredIndex9 = loweredIndex9 + 1) {
                  var resourcesValue = resourcesArray2[loweredIndex9];
                  var jobResourceInstance = {};
                  uSqlPropertiesInstance.resources.push(jobResourceInstance);
                  
                  var nameValue2 = resourcesValue['name'];
                  if (nameValue2 !== null && nameValue2 !== undefined) {
                    var nameInstance2 = nameValue2;
                    jobResourceInstance.name = nameInstance2;
                  }
                  
                  var resourcePathValue = resourcesValue['resourcePath'];
                  if (resourcePathValue !== null && resourcePathValue !== undefined) {
                    var resourcePathInstance = resourcePathValue;
                    jobResourceInstance.resourcePath = resourcePathInstance;
                  }
                  
                  var typeValue3 = resourcesValue['type'];
                  if (typeValue3 !== null && typeValue3 !== undefined) {
                    var typeInstance3 = typeValue3;
                    jobResourceInstance.type = typeInstance3;
                  }
                }
              }
              
              var algebraFilePathValue = propertiesValue2['algebraFilePath'];
              if (algebraFilePathValue !== null && algebraFilePathValue !== undefined) {
                var algebraFilePathInstance = algebraFilePathValue;
                uSqlPropertiesInstance.algebraFilePath = algebraFilePathInstance;
              }
              
              var totalCompilationTimeValue = propertiesValue2['totalCompilationTime'];
              if (totalCompilationTimeValue !== null && totalCompilationTimeValue !== undefined) {
                var totalCompilationTimeInstance = moment.duration(totalCompilationTimeValue);
                uSqlPropertiesInstance.totalCompilationTime = totalCompilationTimeInstance;
              }
              
              var totalPauseTimeValue = propertiesValue2['totalPauseTime'];
              if (totalPauseTimeValue !== null && totalPauseTimeValue !== undefined) {
                var totalPauseTimeInstance = moment.duration(totalPauseTimeValue);
                uSqlPropertiesInstance.totalPausedTime = totalPauseTimeInstance;
              }
              
              var totalQueuedTimeValue = propertiesValue2['totalQueuedTime'];
              if (totalQueuedTimeValue !== null && totalQueuedTimeValue !== undefined) {
                var totalQueuedTimeInstance = moment.duration(totalQueuedTimeValue);
                uSqlPropertiesInstance.totalQueuedTime = totalQueuedTimeInstance;
              }
              
              var totalRunningTimeValue = propertiesValue2['totalRunningTime'];
              if (totalRunningTimeValue !== null && totalRunningTimeValue !== undefined) {
                var totalRunningTimeInstance = moment.duration(totalRunningTimeValue);
                uSqlPropertiesInstance.totalRunningTime = totalRunningTimeInstance;
              }
              
              var rootProcessNodeIdValue = propertiesValue2['rootProcessNodeId'];
              if (rootProcessNodeIdValue !== null && rootProcessNodeIdValue !== undefined) {
                var rootProcessNodeIdInstance = rootProcessNodeIdValue;
                uSqlPropertiesInstance.rootProcessNodeId = rootProcessNodeIdInstance;
              }
              
              var yarnApplicationIdValue = propertiesValue2['yarnApplicationId'];
              if (yarnApplicationIdValue !== null && yarnApplicationIdValue !== undefined) {
                var yarnApplicationIdInstance = yarnApplicationIdValue;
                uSqlPropertiesInstance.yarnApplicationId = yarnApplicationIdInstance;
              }
              
              var yarnApplicationTimeStampValue = propertiesValue2['yarnApplicationTimeStamp'];
              if (yarnApplicationTimeStampValue !== null && yarnApplicationTimeStampValue !== undefined) {
                var yarnApplicationTimeStampInstance = yarnApplicationTimeStampValue;
                uSqlPropertiesInstance.yarnApplicationTimeStamp = yarnApplicationTimeStampInstance;
              }
              
              var compileModeValue = propertiesValue2['compileMode'];
              if (compileModeValue !== null && compileModeValue !== undefined) {
                var compileModeInstance = compileModeValue;
                uSqlPropertiesInstance.compileMode = compileModeInstance;
              }
              
              var diagnosticsArray2 = propertiesValue2['diagnostics'];
              if (diagnosticsArray2 !== null && diagnosticsArray2 !== undefined) {
                for (var loweredIndex10 = 0; loweredIndex10 < diagnosticsArray2.length; loweredIndex10 = loweredIndex10 + 1) {
                  var diagnosticsValue2 = diagnosticsArray2[loweredIndex10];
                  var diagnosticsInstance = {};
                  uSqlPropertiesInstance.diagnostics.push(diagnosticsInstance);
                  
                  var columnNumberValue = diagnosticsValue2['columnNumber'];
                  if (columnNumberValue !== null && columnNumberValue !== undefined) {
                    var columnNumberInstance = columnNumberValue;
                    diagnosticsInstance.columnNumber = columnNumberInstance;
                  }
                  
                  var endValue = diagnosticsValue2['end'];
                  if (endValue !== null && endValue !== undefined) {
                    var endInstance = endValue;
                    diagnosticsInstance.end = endInstance;
                  }
                  
                  var lineNumberValue2 = diagnosticsValue2['lineNumber'];
                  if (lineNumberValue2 !== null && lineNumberValue2 !== undefined) {
                    var lineNumberInstance2 = lineNumberValue2;
                    diagnosticsInstance.lineNumber = lineNumberInstance2;
                  }
                  
                  var messageValue2 = diagnosticsValue2['message'];
                  if (messageValue2 !== null && messageValue2 !== undefined) {
                    var messageInstance2 = messageValue2;
                    diagnosticsInstance.message = messageInstance2;
                  }
                  
                  var severityValue2 = diagnosticsValue2['severity'];
                  if (severityValue2 !== null && severityValue2 !== undefined) {
                    var severityInstance2 = severityValue2;
                    diagnosticsInstance.severity = severityInstance2;
                  }
                  
                  var startValue = diagnosticsValue2['start'];
                  if (startValue !== null && startValue !== undefined) {
                    var startInstance = startValue;
                    diagnosticsInstance.start = startInstance;
                  }
                }
              }
              
              var runtimeVersionValue2 = propertiesValue2['runtimeVersion'];
              if (runtimeVersionValue2 !== null && runtimeVersionValue2 !== undefined) {
                var runtimeVersionInstance2 = runtimeVersionValue2;
                uSqlPropertiesInstance.runtimeVersion = runtimeVersionInstance2;
              }
              
              var scriptValue2 = propertiesValue2['script'];
              if (scriptValue2 !== null && scriptValue2 !== undefined) {
                var scriptInstance2 = scriptValue2;
                uSqlPropertiesInstance.script = scriptInstance2;
              }
              
              var typeValue4 = propertiesValue2['type'];
              if (typeValue4 !== null && typeValue4 !== undefined) {
                var typeInstance4 = typeValue4;
                uSqlPropertiesInstance.type = typeInstance4;
              }
              jobInstance.properties = uSqlPropertiesInstance;
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Gets the JobInfo object specified by the job ID.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} accountName The name of the Data Lake Analytics account to
   * get the job from
   * 
   * @param {Guid} jobIdentity JobInfo ID.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  JobOperations.prototype.get = function(resourceGroupName, accountName, jobIdentity, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (accountName === null || accountName === undefined) {
      return callback(new Error('accountName cannot be null.'));
    }
    if (jobIdentity === null || jobIdentity === undefined) {
      return callback(new Error('jobIdentity cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + 'https://';
    url2 = url2 + encodeURIComponent(accountName);
    url2 = url2 + '.';
    if (this.client.jobServiceUri !== null && this.client.jobServiceUri !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.jobServiceUri);
    }
    url2 = url2 + '/Jobs/';
    url2 = url2 + encodeURIComponent(jobIdentity);
    var queryParameters = [];
    queryParameters.push('api-version=2015-11-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsJob 0.9.6-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsJob 0.9.6-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['useragent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsJob 0.9.6-preview' + this.client.userAgentSuffix;
    }
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsJob 0.9.6-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsJob 0.9.6-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['User-Agent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsJob 0.9.6-preview' + this.client.userAgentSuffix;
    }
    if (resourceGroupName !== null && resourceGroupName !== undefined) {
      httpRequest.headers['x-ms-client-resource-group-name'] = resourceGroupName;
    }
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      httpRequest.headers['x-ms-client-subscription-id'] = this.client.credentials.subscriptionId;
    }
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var jobInstance = { errorMessage: [], stateAuditRecords: [] };
          result.job = jobInstance;
          
          var jobIdValue = responseDoc['jobId'];
          if (jobIdValue !== null && jobIdValue !== undefined) {
            var jobIdInstance = jobIdValue;
            jobInstance.jobId = jobIdInstance;
          }
          
          var nameValue = responseDoc['name'];
          if (nameValue !== null && nameValue !== undefined) {
            var nameInstance = nameValue;
            jobInstance.name = nameInstance;
          }
          
          var typeValue = responseDoc['type'];
          if (typeValue !== null && typeValue !== undefined) {
            var typeInstance = typeValue;
            jobInstance.type = typeInstance;
          }
          
          var submitterValue = responseDoc['submitter'];
          if (submitterValue !== null && submitterValue !== undefined) {
            var submitterInstance = submitterValue;
            jobInstance.submitter = submitterInstance;
          }
          
          var errorMessageArray = responseDoc['errorMessage'];
          if (errorMessageArray !== null && errorMessageArray !== undefined) {
            for (var loweredIndex1 = 0; loweredIndex1 < errorMessageArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var errorMessageValue = errorMessageArray[loweredIndex1];
              var errorMessageInstance = {};
              jobInstance.errorMessage.push(errorMessageInstance);
              
              var descriptionValue = errorMessageValue['description'];
              if (descriptionValue !== null && descriptionValue !== undefined) {
                var descriptionInstance = descriptionValue;
                errorMessageInstance.description = descriptionInstance;
              }
              
              var detailsValue = errorMessageValue['details'];
              if (detailsValue !== null && detailsValue !== undefined) {
                var detailsInstance = detailsValue;
                errorMessageInstance.details = detailsInstance;
              }
              
              var endOffsetValue = errorMessageValue['endOffset'];
              if (endOffsetValue !== null && endOffsetValue !== undefined) {
                var endOffsetInstance = endOffsetValue;
                errorMessageInstance.endOffset = endOffsetInstance;
              }
              
              var errorIdValue = errorMessageValue['errorId'];
              if (errorIdValue !== null && errorIdValue !== undefined) {
                var errorIdInstance = errorIdValue;
                errorMessageInstance.errorId = errorIdInstance;
              }
              
              var filePathValue = errorMessageValue['filePath'];
              if (filePathValue !== null && filePathValue !== undefined) {
                var filePathInstance = filePathValue;
                errorMessageInstance.filePath = filePathInstance;
              }
              
              var helpLinkValue = errorMessageValue['helpLink'];
              if (helpLinkValue !== null && helpLinkValue !== undefined) {
                var helpLinkInstance = helpLinkValue;
                errorMessageInstance.helpLink = helpLinkInstance;
              }
              
              var internalDiagnosticsValue = errorMessageValue['internalDiagnostics'];
              if (internalDiagnosticsValue !== null && internalDiagnosticsValue !== undefined) {
                var internalDiagnosticsInstance = internalDiagnosticsValue;
                errorMessageInstance.internalDiagnostics = internalDiagnosticsInstance;
              }
              
              var lineNumberValue = errorMessageValue['lineNumber'];
              if (lineNumberValue !== null && lineNumberValue !== undefined) {
                var lineNumberInstance = lineNumberValue;
                errorMessageInstance.lineNumber = lineNumberInstance;
              }
              
              var messageValue = errorMessageValue['message'];
              if (messageValue !== null && messageValue !== undefined) {
                var messageInstance = messageValue;
                errorMessageInstance.message = messageInstance;
              }
              
              var resolutionValue = errorMessageValue['resolution'];
              if (resolutionValue !== null && resolutionValue !== undefined) {
                var resolutionInstance = resolutionValue;
                errorMessageInstance.resolution = resolutionInstance;
              }
              
              var severityValue = errorMessageValue['severity'];
              if (severityValue !== null && severityValue !== undefined) {
                var severityInstance = severityValue;
                errorMessageInstance.severity = severityInstance;
              }
              
              var sourceValue = errorMessageValue['source'];
              if (sourceValue !== null && sourceValue !== undefined) {
                var sourceInstance = sourceValue;
                errorMessageInstance.source = sourceInstance;
              }
              
              var startOffsetValue = errorMessageValue['startOffset'];
              if (startOffsetValue !== null && startOffsetValue !== undefined) {
                var startOffsetInstance = startOffsetValue;
                errorMessageInstance.startOffset = startOffsetInstance;
              }
            }
          }
          
          var degreeOfParallelismValue = responseDoc['degreeOfParallelism'];
          if (degreeOfParallelismValue !== null && degreeOfParallelismValue !== undefined) {
            var degreeOfParallelismInstance = degreeOfParallelismValue;
            jobInstance.degreeOfParallelism = degreeOfParallelismInstance;
          }
          
          var priorityValue = responseDoc['priority'];
          if (priorityValue !== null && priorityValue !== undefined) {
            var priorityInstance = priorityValue;
            jobInstance.priority = priorityInstance;
          }
          
          var submitTimeValue = responseDoc['submitTime'];
          if (submitTimeValue !== null && submitTimeValue !== undefined) {
            var submitTimeInstance = submitTimeValue;
            jobInstance.submitTime = submitTimeInstance;
          }
          
          var startTimeValue = responseDoc['startTime'];
          if (startTimeValue !== null && startTimeValue !== undefined) {
            var startTimeInstance = startTimeValue;
            jobInstance.startTime = startTimeInstance;
          }
          
          var endTimeValue = responseDoc['endTime'];
          if (endTimeValue !== null && endTimeValue !== undefined) {
            var endTimeInstance = endTimeValue;
            jobInstance.endTime = endTimeInstance;
          }
          
          var stateValue = responseDoc['state'];
          if (stateValue !== null && stateValue !== undefined) {
            var stateInstance = stateValue;
            jobInstance.state = stateInstance;
          }
          
          var resultValue = responseDoc['result'];
          if (resultValue !== null && resultValue !== undefined) {
            var resultInstance = resultValue;
            jobInstance.result = resultInstance;
          }
          
          var stateAuditRecordsArray = responseDoc['stateAuditRecords'];
          if (stateAuditRecordsArray !== null && stateAuditRecordsArray !== undefined) {
            for (var loweredIndex2 = 0; loweredIndex2 < stateAuditRecordsArray.length; loweredIndex2 = loweredIndex2 + 1) {
              var stateAuditRecordsValue = stateAuditRecordsArray[loweredIndex2];
              var jobStateAuditRecordInstance = {};
              jobInstance.stateAuditRecords.push(jobStateAuditRecordInstance);
              
              var newStateValue = stateAuditRecordsValue['newState'];
              if (newStateValue !== null && newStateValue !== undefined) {
                var newStateInstance = newStateValue;
                jobStateAuditRecordInstance.newState = newStateInstance;
              }
              
              var timeStampValue = stateAuditRecordsValue['timeStamp'];
              if (timeStampValue !== null && timeStampValue !== undefined) {
                var timeStampInstance = timeStampValue;
                jobStateAuditRecordInstance.timeStamp = timeStampInstance;
              }
              
              var requestedByUserValue = stateAuditRecordsValue['requestedByUser'];
              if (requestedByUserValue !== null && requestedByUserValue !== undefined) {
                var requestedByUserInstance = requestedByUserValue;
                jobStateAuditRecordInstance.requestedByUser = requestedByUserInstance;
              }
              
              var detailsValue2 = stateAuditRecordsValue['details'];
              if (detailsValue2 !== null && detailsValue2 !== undefined) {
                var detailsInstance2 = detailsValue2;
                jobStateAuditRecordInstance.details = detailsInstance2;
              }
            }
          }
          
          var propertiesValue = responseDoc['properties'];
          if (propertiesValue !== null && propertiesValue !== undefined) {
            var typeName = propertiesValue['type'];
            if (typeName === 'Hive') {
              var hivePropertiesInstance = { statementInfo: [] };
              
              var statementCountValue = propertiesValue['statementCount'];
              if (statementCountValue !== null && statementCountValue !== undefined) {
                var statementCountInstance = statementCountValue;
                hivePropertiesInstance.statementCount = statementCountInstance;
              }
              
              var executedStatementCountValue = propertiesValue['executedStatementCount'];
              if (executedStatementCountValue !== null && executedStatementCountValue !== undefined) {
                var executedStatementCountInstance = executedStatementCountValue;
                hivePropertiesInstance.executedStatementCount = executedStatementCountInstance;
              }
              
              var logsLocationValue = propertiesValue['logsLocation'];
              if (logsLocationValue !== null && logsLocationValue !== undefined) {
                var logsLocationInstance = logsLocationValue;
                hivePropertiesInstance.logsLocation = logsLocationInstance;
              }
              
              var statementInfoArray = propertiesValue['statementInfo'];
              if (statementInfoArray !== null && statementInfoArray !== undefined) {
                for (var loweredIndex3 = 0; loweredIndex3 < statementInfoArray.length; loweredIndex3 = loweredIndex3 + 1) {
                  var statementInfoValue = statementInfoArray[loweredIndex3];
                  var hiveJobStatementInfoInstance = {};
                  hivePropertiesInstance.statementInfo.push(hiveJobStatementInfoInstance);
                  
                  var logLocationValue = statementInfoValue['logLocation'];
                  if (logLocationValue !== null && logLocationValue !== undefined) {
                    var logLocationInstance = logLocationValue;
                    hiveJobStatementInfoInstance.logLocation = logLocationInstance;
                  }
                  
                  var resultPreviewLocationValue = statementInfoValue['resultPreviewLocation'];
                  if (resultPreviewLocationValue !== null && resultPreviewLocationValue !== undefined) {
                    var resultPreviewLocationInstance = resultPreviewLocationValue;
                    hiveJobStatementInfoInstance.resultPreviewLocation = resultPreviewLocationInstance;
                  }
                  
                  var resultLocationValue = statementInfoValue['resultLocation'];
                  if (resultLocationValue !== null && resultLocationValue !== undefined) {
                    var resultLocationInstance = resultLocationValue;
                    hiveJobStatementInfoInstance.resultLocation = resultLocationInstance;
                  }
                  
                  var errorMessageValue2 = statementInfoValue['errorMessage'];
                  if (errorMessageValue2 !== null && errorMessageValue2 !== undefined) {
                    var errorMessageInstance2 = errorMessageValue2;
                    hiveJobStatementInfoInstance.errorMessage = errorMessageInstance2;
                  }
                }
              }
              
              var warehouseLocationValue = propertiesValue['warehouseLocation'];
              if (warehouseLocationValue !== null && warehouseLocationValue !== undefined) {
                var warehouseLocationInstance = warehouseLocationValue;
                hivePropertiesInstance.warehouseLocation = warehouseLocationInstance;
              }
              
              var runtimeVersionValue = propertiesValue['runtimeVersion'];
              if (runtimeVersionValue !== null && runtimeVersionValue !== undefined) {
                var runtimeVersionInstance = runtimeVersionValue;
                hivePropertiesInstance.runtimeVersion = runtimeVersionInstance;
              }
              
              var scriptValue = propertiesValue['script'];
              if (scriptValue !== null && scriptValue !== undefined) {
                var scriptInstance = scriptValue;
                hivePropertiesInstance.script = scriptInstance;
              }
              
              var typeValue2 = propertiesValue['type'];
              if (typeValue2 !== null && typeValue2 !== undefined) {
                var typeInstance2 = typeValue2;
                hivePropertiesInstance.type = typeInstance2;
              }
              jobInstance.properties = hivePropertiesInstance;
            }
            if (typeName === 'USql') {
              var uSqlPropertiesInstance = { diagnostics: [], resources: [] };
              
              var resourcesArray = propertiesValue['resources'];
              if (resourcesArray !== null && resourcesArray !== undefined) {
                for (var loweredIndex4 = 0; loweredIndex4 < resourcesArray.length; loweredIndex4 = loweredIndex4 + 1) {
                  var resourcesValue = resourcesArray[loweredIndex4];
                  var jobResourceInstance = {};
                  uSqlPropertiesInstance.resources.push(jobResourceInstance);
                  
                  var nameValue2 = resourcesValue['name'];
                  if (nameValue2 !== null && nameValue2 !== undefined) {
                    var nameInstance2 = nameValue2;
                    jobResourceInstance.name = nameInstance2;
                  }
                  
                  var resourcePathValue = resourcesValue['resourcePath'];
                  if (resourcePathValue !== null && resourcePathValue !== undefined) {
                    var resourcePathInstance = resourcePathValue;
                    jobResourceInstance.resourcePath = resourcePathInstance;
                  }
                  
                  var typeValue3 = resourcesValue['type'];
                  if (typeValue3 !== null && typeValue3 !== undefined) {
                    var typeInstance3 = typeValue3;
                    jobResourceInstance.type = typeInstance3;
                  }
                }
              }
              
              var algebraFilePathValue = propertiesValue['algebraFilePath'];
              if (algebraFilePathValue !== null && algebraFilePathValue !== undefined) {
                var algebraFilePathInstance = algebraFilePathValue;
                uSqlPropertiesInstance.algebraFilePath = algebraFilePathInstance;
              }
              
              var totalCompilationTimeValue = propertiesValue['totalCompilationTime'];
              if (totalCompilationTimeValue !== null && totalCompilationTimeValue !== undefined) {
                var totalCompilationTimeInstance = moment.duration(totalCompilationTimeValue);
                uSqlPropertiesInstance.totalCompilationTime = totalCompilationTimeInstance;
              }
              
              var totalPauseTimeValue = propertiesValue['totalPauseTime'];
              if (totalPauseTimeValue !== null && totalPauseTimeValue !== undefined) {
                var totalPauseTimeInstance = moment.duration(totalPauseTimeValue);
                uSqlPropertiesInstance.totalPausedTime = totalPauseTimeInstance;
              }
              
              var totalQueuedTimeValue = propertiesValue['totalQueuedTime'];
              if (totalQueuedTimeValue !== null && totalQueuedTimeValue !== undefined) {
                var totalQueuedTimeInstance = moment.duration(totalQueuedTimeValue);
                uSqlPropertiesInstance.totalQueuedTime = totalQueuedTimeInstance;
              }
              
              var totalRunningTimeValue = propertiesValue['totalRunningTime'];
              if (totalRunningTimeValue !== null && totalRunningTimeValue !== undefined) {
                var totalRunningTimeInstance = moment.duration(totalRunningTimeValue);
                uSqlPropertiesInstance.totalRunningTime = totalRunningTimeInstance;
              }
              
              var rootProcessNodeIdValue = propertiesValue['rootProcessNodeId'];
              if (rootProcessNodeIdValue !== null && rootProcessNodeIdValue !== undefined) {
                var rootProcessNodeIdInstance = rootProcessNodeIdValue;
                uSqlPropertiesInstance.rootProcessNodeId = rootProcessNodeIdInstance;
              }
              
              var yarnApplicationIdValue = propertiesValue['yarnApplicationId'];
              if (yarnApplicationIdValue !== null && yarnApplicationIdValue !== undefined) {
                var yarnApplicationIdInstance = yarnApplicationIdValue;
                uSqlPropertiesInstance.yarnApplicationId = yarnApplicationIdInstance;
              }
              
              var yarnApplicationTimeStampValue = propertiesValue['yarnApplicationTimeStamp'];
              if (yarnApplicationTimeStampValue !== null && yarnApplicationTimeStampValue !== undefined) {
                var yarnApplicationTimeStampInstance = yarnApplicationTimeStampValue;
                uSqlPropertiesInstance.yarnApplicationTimeStamp = yarnApplicationTimeStampInstance;
              }
              
              var compileModeValue = propertiesValue['compileMode'];
              if (compileModeValue !== null && compileModeValue !== undefined) {
                var compileModeInstance = compileModeValue;
                uSqlPropertiesInstance.compileMode = compileModeInstance;
              }
              
              var diagnosticsArray = propertiesValue['diagnostics'];
              if (diagnosticsArray !== null && diagnosticsArray !== undefined) {
                for (var loweredIndex5 = 0; loweredIndex5 < diagnosticsArray.length; loweredIndex5 = loweredIndex5 + 1) {
                  var diagnosticsValue = diagnosticsArray[loweredIndex5];
                  var diagnosticsInstance = {};
                  uSqlPropertiesInstance.diagnostics.push(diagnosticsInstance);
                  
                  var columnNumberValue = diagnosticsValue['columnNumber'];
                  if (columnNumberValue !== null && columnNumberValue !== undefined) {
                    var columnNumberInstance = columnNumberValue;
                    diagnosticsInstance.columnNumber = columnNumberInstance;
                  }
                  
                  var endValue = diagnosticsValue['end'];
                  if (endValue !== null && endValue !== undefined) {
                    var endInstance = endValue;
                    diagnosticsInstance.end = endInstance;
                  }
                  
                  var lineNumberValue2 = diagnosticsValue['lineNumber'];
                  if (lineNumberValue2 !== null && lineNumberValue2 !== undefined) {
                    var lineNumberInstance2 = lineNumberValue2;
                    diagnosticsInstance.lineNumber = lineNumberInstance2;
                  }
                  
                  var messageValue2 = diagnosticsValue['message'];
                  if (messageValue2 !== null && messageValue2 !== undefined) {
                    var messageInstance2 = messageValue2;
                    diagnosticsInstance.message = messageInstance2;
                  }
                  
                  var severityValue2 = diagnosticsValue['severity'];
                  if (severityValue2 !== null && severityValue2 !== undefined) {
                    var severityInstance2 = severityValue2;
                    diagnosticsInstance.severity = severityInstance2;
                  }
                  
                  var startValue = diagnosticsValue['start'];
                  if (startValue !== null && startValue !== undefined) {
                    var startInstance = startValue;
                    diagnosticsInstance.start = startInstance;
                  }
                }
              }
              
              var runtimeVersionValue2 = propertiesValue['runtimeVersion'];
              if (runtimeVersionValue2 !== null && runtimeVersionValue2 !== undefined) {
                var runtimeVersionInstance2 = runtimeVersionValue2;
                uSqlPropertiesInstance.runtimeVersion = runtimeVersionInstance2;
              }
              
              var scriptValue2 = propertiesValue['script'];
              if (scriptValue2 !== null && scriptValue2 !== undefined) {
                var scriptInstance2 = scriptValue2;
                uSqlPropertiesInstance.script = scriptInstance2;
              }
              
              var typeValue4 = propertiesValue['type'];
              if (typeValue4 !== null && typeValue4 !== undefined) {
                var typeInstance4 = typeValue4;
                uSqlPropertiesInstance.type = typeInstance4;
              }
              jobInstance.properties = uSqlPropertiesInstance;
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Gets the U-SQL job debug data information specified by the job ID.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} accountName The name of the Data Lake Analytics account to
   * get the job from
   * 
   * @param {Guid} jobIdentity JobInfo ID.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  JobOperations.prototype.getDebugDataPath = function(resourceGroupName, accountName, jobIdentity, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (accountName === null || accountName === undefined) {
      return callback(new Error('accountName cannot be null.'));
    }
    if (jobIdentity === null || jobIdentity === undefined) {
      return callback(new Error('jobIdentity cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + 'https://';
    url2 = url2 + encodeURIComponent(accountName);
    url2 = url2 + '.';
    if (this.client.jobServiceUri !== null && this.client.jobServiceUri !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.jobServiceUri);
    }
    url2 = url2 + '/Jobs/';
    url2 = url2 + encodeURIComponent(jobIdentity);
    url2 = url2 + '/GetDebugDataPath';
    var queryParameters = [];
    queryParameters.push('api-version=2015-11-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsJob 0.9.6-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsJob 0.9.6-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['useragent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsJob 0.9.6-preview' + this.client.userAgentSuffix;
    }
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsJob 0.9.6-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsJob 0.9.6-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['User-Agent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsJob 0.9.6-preview' + this.client.userAgentSuffix;
    }
    if (resourceGroupName !== null && resourceGroupName !== undefined) {
      httpRequest.headers['x-ms-client-resource-group-name'] = resourceGroupName;
    }
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      httpRequest.headers['x-ms-client-subscription-id'] = this.client.credentials.subscriptionId;
    }
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var jobDataInstance = { paths: [] };
          result.jobData = jobDataInstance;
          
          var jobIdValue = responseDoc['jobId'];
          if (jobIdValue !== null && jobIdValue !== undefined) {
            var jobIdInstance = jobIdValue;
            jobDataInstance.jobId = jobIdInstance;
          }
          
          var commandValue = responseDoc['command'];
          if (commandValue !== null && commandValue !== undefined) {
            var commandInstance = commandValue;
            jobDataInstance.command = commandInstance;
          }
          
          var pathsArray = responseDoc['paths'];
          if (pathsArray !== null && pathsArray !== undefined) {
            for (var loweredIndex1 = 0; loweredIndex1 < pathsArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var pathsValue = pathsArray[loweredIndex1];
              jobDataInstance.paths.push(pathsValue);
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Gets the job statistics object specified by the job ID.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} accountName The name of the Data Lake Analytics account to
   * get the job from
   * 
   * @param {Guid} jobIdentity JobInfo ID.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  JobOperations.prototype.getStatistics = function(resourceGroupName, accountName, jobIdentity, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (accountName === null || accountName === undefined) {
      return callback(new Error('accountName cannot be null.'));
    }
    if (jobIdentity === null || jobIdentity === undefined) {
      return callback(new Error('jobIdentity cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + 'https://';
    url2 = url2 + encodeURIComponent(accountName);
    url2 = url2 + '.';
    if (this.client.jobServiceUri !== null && this.client.jobServiceUri !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.jobServiceUri);
    }
    url2 = url2 + '/Jobs/';
    url2 = url2 + encodeURIComponent(jobIdentity);
    url2 = url2 + '/GetStatistics';
    var queryParameters = [];
    queryParameters.push('api-version=2015-11-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsJob 0.9.6-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsJob 0.9.6-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['useragent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsJob 0.9.6-preview' + this.client.userAgentSuffix;
    }
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsJob 0.9.6-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsJob 0.9.6-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['User-Agent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsJob 0.9.6-preview' + this.client.userAgentSuffix;
    }
    if (resourceGroupName !== null && resourceGroupName !== undefined) {
      httpRequest.headers['x-ms-client-resource-group-name'] = resourceGroupName;
    }
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      httpRequest.headers['x-ms-client-subscription-id'] = this.client.credentials.subscriptionId;
    }
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var statisticsInstance = { stages: [] };
          result.statistics = statisticsInstance;
          
          var lastUpdateTimeUtcValue = responseDoc['lastUpdateTimeUtc'];
          if (lastUpdateTimeUtcValue !== null && lastUpdateTimeUtcValue !== undefined) {
            var lastUpdateTimeUtcInstance = lastUpdateTimeUtcValue;
            statisticsInstance.lastUpdateTimeUtc = lastUpdateTimeUtcInstance;
          }
          
          var stagesArray = responseDoc['stages'];
          if (stagesArray !== null && stagesArray !== undefined) {
            for (var loweredIndex1 = 0; loweredIndex1 < stagesArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var stagesValue = stagesArray[loweredIndex1];
              var jobStatisticsVertexStageInstance = {};
              statisticsInstance.stages.push(jobStatisticsVertexStageInstance);
              
              var dataReadValue = stagesValue['dataRead'];
              if (dataReadValue !== null && dataReadValue !== undefined) {
                var dataReadInstance = dataReadValue;
                jobStatisticsVertexStageInstance.dataRead = dataReadInstance;
              }
              
              var dataReadCrossPodValue = stagesValue['dataReadCrossPod'];
              if (dataReadCrossPodValue !== null && dataReadCrossPodValue !== undefined) {
                var dataReadCrossPodInstance = dataReadCrossPodValue;
                jobStatisticsVertexStageInstance.dataReadCrossPod = dataReadCrossPodInstance;
              }
              
              var dataReadIntraPodValue = stagesValue['dataReadIntraPod'];
              if (dataReadIntraPodValue !== null && dataReadIntraPodValue !== undefined) {
                var dataReadIntraPodInstance = dataReadIntraPodValue;
                jobStatisticsVertexStageInstance.dataReadIntraPod = dataReadIntraPodInstance;
              }
              
              var dataToReadValue = stagesValue['dataToRead'];
              if (dataToReadValue !== null && dataToReadValue !== undefined) {
                var dataToReadInstance = dataToReadValue;
                jobStatisticsVertexStageInstance.dataToRead = dataToReadInstance;
              }
              
              var dataWrittenValue = stagesValue['dataWritten'];
              if (dataWrittenValue !== null && dataWrittenValue !== undefined) {
                var dataWrittenInstance = dataWrittenValue;
                jobStatisticsVertexStageInstance.dataWritten = dataWrittenInstance;
              }
              
              var duplicateDiscardCountValue = stagesValue['duplicateDiscardCount'];
              if (duplicateDiscardCountValue !== null && duplicateDiscardCountValue !== undefined) {
                var duplicateDiscardCountInstance = duplicateDiscardCountValue;
                jobStatisticsVertexStageInstance.duplicateDiscardCount = duplicateDiscardCountInstance;
              }
              
              var failedCountValue = stagesValue['failedCount'];
              if (failedCountValue !== null && failedCountValue !== undefined) {
                var failedCountInstance = failedCountValue;
                jobStatisticsVertexStageInstance.failedCount = failedCountInstance;
              }
              
              var maxVertexDataReadValue = stagesValue['maxVertexDataRead'];
              if (maxVertexDataReadValue !== null && maxVertexDataReadValue !== undefined) {
                var maxVertexDataReadInstance = maxVertexDataReadValue;
                jobStatisticsVertexStageInstance.maxVertexDataRead = maxVertexDataReadInstance;
              }
              
              var minVertexDataReadValue = stagesValue['minVertexDataRead'];
              if (minVertexDataReadValue !== null && minVertexDataReadValue !== undefined) {
                var minVertexDataReadInstance = minVertexDataReadValue;
                jobStatisticsVertexStageInstance.minVertexDataRead = minVertexDataReadInstance;
              }
              
              var readFailureCountValue = stagesValue['readFailureCount'];
              if (readFailureCountValue !== null && readFailureCountValue !== undefined) {
                var readFailureCountInstance = readFailureCountValue;
                jobStatisticsVertexStageInstance.readFailureCount = readFailureCountInstance;
              }
              
              var revocationCountValue = stagesValue['revocationCount'];
              if (revocationCountValue !== null && revocationCountValue !== undefined) {
                var revocationCountInstance = revocationCountValue;
                jobStatisticsVertexStageInstance.revocationCount = revocationCountInstance;
              }
              
              var runningCountValue = stagesValue['runningCount'];
              if (runningCountValue !== null && runningCountValue !== undefined) {
                var runningCountInstance = runningCountValue;
                jobStatisticsVertexStageInstance.runningCount = runningCountInstance;
              }
              
              var scheduledCountValue = stagesValue['scheduledCount'];
              if (scheduledCountValue !== null && scheduledCountValue !== undefined) {
                var scheduledCountInstance = scheduledCountValue;
                jobStatisticsVertexStageInstance.scheduledCount = scheduledCountInstance;
              }
              
              var stageNameValue = stagesValue['stageName'];
              if (stageNameValue !== null && stageNameValue !== undefined) {
                var stageNameInstance = stageNameValue;
                jobStatisticsVertexStageInstance.stageName = stageNameInstance;
              }
              
              var succeededCountValue = stagesValue['succeededCount'];
              if (succeededCountValue !== null && succeededCountValue !== undefined) {
                var succeededCountInstance = succeededCountValue;
                jobStatisticsVertexStageInstance.succeededCount = succeededCountInstance;
              }
              
              var tempDataWrittenValue = stagesValue['tempDataWritten'];
              if (tempDataWrittenValue !== null && tempDataWrittenValue !== undefined) {
                var tempDataWrittenInstance = tempDataWrittenValue;
                jobStatisticsVertexStageInstance.tempDataWritten = tempDataWrittenInstance;
              }
              
              var totalCountValue = stagesValue['totalCount'];
              if (totalCountValue !== null && totalCountValue !== undefined) {
                var totalCountInstance = totalCountValue;
                jobStatisticsVertexStageInstance.totalCount = totalCountInstance;
              }
              
              var totalFailedTimeValue = stagesValue['totalFailedTime'];
              if (totalFailedTimeValue !== null && totalFailedTimeValue !== undefined) {
                var totalFailedTimeInstance = moment.duration(totalFailedTimeValue);
                jobStatisticsVertexStageInstance.totalFailedTime = totalFailedTimeInstance;
              }
              
              var totalProgressValue = stagesValue['totalProgress'];
              if (totalProgressValue !== null && totalProgressValue !== undefined) {
                var totalProgressInstance = totalProgressValue;
                jobStatisticsVertexStageInstance.totalProgress = totalProgressInstance;
              }
              
              var totalSucceededTimeValue = stagesValue['totalSucceededTime'];
              if (totalSucceededTimeValue !== null && totalSucceededTimeValue !== undefined) {
                var totalSucceededTimeInstance = moment.duration(totalSucceededTimeValue);
                jobStatisticsVertexStageInstance.totalSucceededTime = totalSucceededTimeInstance;
              }
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Gets the first page of the Data Lake Analytics JobInformation objects
   * within the specified resource group with a link to the next page, if any.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} accountName The name of the Data Lake Analytics account to
   * get the job from
   * 
   * @param {JobListParameters} [parametersOrCallback] Query parameters. If
   * null is passed returns all JobInfo items.
   * 
   * @param {string} [parametersOrCallback.filter] Gets or sets OData filter.
   * Optional.
   * 
   * @param {string} [parametersOrCallback.orderBy] Gets or sets OData orderBy
   * clause. Optional.
   * 
   * @param {string} [parametersOrCallback.select] Gets or sets OData selection
   * criteria, which is a comma delimited list of properties to select (e.g.
   * 'name,id,type'). Optional.
   * 
   * @param {number} [parametersOrCallback.top] Gets or sets the number of
   * items to return. Optional.
   * 
   * @param {number} [parametersOrCallback.skip] Gets or sets the number of
   * items to skip over before returning elements. Optional.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  JobOperations.prototype.list = function(resourceGroupName, accountName, parametersOrCallback, callback) {
    var parameters = parametersOrCallback;
    if (_.isFunction(parameters)) {
      callback = parameters;
      parameters = null;
    }
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (accountName === null || accountName === undefined) {
      return callback(new Error('accountName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + 'https://';
    url2 = url2 + encodeURIComponent(accountName);
    url2 = url2 + '.';
    if (this.client.jobServiceUri !== null && this.client.jobServiceUri !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.jobServiceUri);
    }
    url2 = url2 + '/Jobs';
    var queryParameters = [];
    if (parameters !== null && parameters !== undefined && parameters.filter !== null && parameters.filter !== undefined) {
      queryParameters.push('$filter=' + encodeURIComponent(parameters.filter));
    }
    if (parameters !== null && parameters !== undefined && parameters.top !== null && parameters.top !== undefined) {
      queryParameters.push('$top=' + encodeURIComponent(parameters.top.toString()));
    }
    if (parameters !== null && parameters !== undefined && parameters.skip !== null && parameters.skip !== undefined) {
      queryParameters.push('$skip=' + encodeURIComponent(parameters.skip.toString()));
    }
    if (parameters !== null && parameters !== undefined && parameters.orderBy !== null && parameters.orderBy !== undefined) {
      queryParameters.push('$orderby=' + encodeURIComponent(parameters.orderBy));
    }
    if (parameters !== null && parameters !== undefined && parameters.select !== null && parameters.select !== undefined) {
      queryParameters.push('$select=' + encodeURIComponent(parameters.select));
    }
    queryParameters.push('api-version=2015-11-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsJob 0.9.6-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsJob 0.9.6-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['useragent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsJob 0.9.6-preview' + this.client.userAgentSuffix;
    }
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsJob 0.9.6-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsJob 0.9.6-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['User-Agent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsJob 0.9.6-preview' + this.client.userAgentSuffix;
    }
    if (resourceGroupName !== null && resourceGroupName !== undefined) {
      httpRequest.headers['x-ms-client-resource-group-name'] = resourceGroupName;
    }
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      httpRequest.headers['x-ms-client-subscription-id'] = this.client.credentials.subscriptionId;
    }
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = { value: [] };
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var valueArray = responseDoc['value'];
          if (valueArray !== null && valueArray !== undefined) {
            for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var valueValue = valueArray[loweredIndex1];
              var jobInformationInstance = { errorMessage: [], stateAuditRecords: [] };
              result.value.push(jobInformationInstance);
              
              var jobIdValue = valueValue['jobId'];
              if (jobIdValue !== null && jobIdValue !== undefined) {
                var jobIdInstance = jobIdValue;
                jobInformationInstance.jobId = jobIdInstance;
              }
              
              var nameValue = valueValue['name'];
              if (nameValue !== null && nameValue !== undefined) {
                var nameInstance = nameValue;
                jobInformationInstance.name = nameInstance;
              }
              
              var typeValue = valueValue['type'];
              if (typeValue !== null && typeValue !== undefined) {
                var typeInstance = typeValue;
                jobInformationInstance.type = typeInstance;
              }
              
              var submitterValue = valueValue['submitter'];
              if (submitterValue !== null && submitterValue !== undefined) {
                var submitterInstance = submitterValue;
                jobInformationInstance.submitter = submitterInstance;
              }
              
              var errorMessageArray = valueValue['errorMessage'];
              if (errorMessageArray !== null && errorMessageArray !== undefined) {
                for (var loweredIndex2 = 0; loweredIndex2 < errorMessageArray.length; loweredIndex2 = loweredIndex2 + 1) {
                  var errorMessageValue = errorMessageArray[loweredIndex2];
                  var errorMessageInstance = {};
                  jobInformationInstance.errorMessage.push(errorMessageInstance);
                  
                  var descriptionValue = errorMessageValue['description'];
                  if (descriptionValue !== null && descriptionValue !== undefined) {
                    var descriptionInstance = descriptionValue;
                    errorMessageInstance.description = descriptionInstance;
                  }
                  
                  var detailsValue = errorMessageValue['details'];
                  if (detailsValue !== null && detailsValue !== undefined) {
                    var detailsInstance = detailsValue;
                    errorMessageInstance.details = detailsInstance;
                  }
                  
                  var endOffsetValue = errorMessageValue['endOffset'];
                  if (endOffsetValue !== null && endOffsetValue !== undefined) {
                    var endOffsetInstance = endOffsetValue;
                    errorMessageInstance.endOffset = endOffsetInstance;
                  }
                  
                  var errorIdValue = errorMessageValue['errorId'];
                  if (errorIdValue !== null && errorIdValue !== undefined) {
                    var errorIdInstance = errorIdValue;
                    errorMessageInstance.errorId = errorIdInstance;
                  }
                  
                  var filePathValue = errorMessageValue['filePath'];
                  if (filePathValue !== null && filePathValue !== undefined) {
                    var filePathInstance = filePathValue;
                    errorMessageInstance.filePath = filePathInstance;
                  }
                  
                  var helpLinkValue = errorMessageValue['helpLink'];
                  if (helpLinkValue !== null && helpLinkValue !== undefined) {
                    var helpLinkInstance = helpLinkValue;
                    errorMessageInstance.helpLink = helpLinkInstance;
                  }
                  
                  var internalDiagnosticsValue = errorMessageValue['internalDiagnostics'];
                  if (internalDiagnosticsValue !== null && internalDiagnosticsValue !== undefined) {
                    var internalDiagnosticsInstance = internalDiagnosticsValue;
                    errorMessageInstance.internalDiagnostics = internalDiagnosticsInstance;
                  }
                  
                  var lineNumberValue = errorMessageValue['lineNumber'];
                  if (lineNumberValue !== null && lineNumberValue !== undefined) {
                    var lineNumberInstance = lineNumberValue;
                    errorMessageInstance.lineNumber = lineNumberInstance;
                  }
                  
                  var messageValue = errorMessageValue['message'];
                  if (messageValue !== null && messageValue !== undefined) {
                    var messageInstance = messageValue;
                    errorMessageInstance.message = messageInstance;
                  }
                  
                  var resolutionValue = errorMessageValue['resolution'];
                  if (resolutionValue !== null && resolutionValue !== undefined) {
                    var resolutionInstance = resolutionValue;
                    errorMessageInstance.resolution = resolutionInstance;
                  }
                  
                  var severityValue = errorMessageValue['severity'];
                  if (severityValue !== null && severityValue !== undefined) {
                    var severityInstance = severityValue;
                    errorMessageInstance.severity = severityInstance;
                  }
                  
                  var sourceValue = errorMessageValue['source'];
                  if (sourceValue !== null && sourceValue !== undefined) {
                    var sourceInstance = sourceValue;
                    errorMessageInstance.source = sourceInstance;
                  }
                  
                  var startOffsetValue = errorMessageValue['startOffset'];
                  if (startOffsetValue !== null && startOffsetValue !== undefined) {
                    var startOffsetInstance = startOffsetValue;
                    errorMessageInstance.startOffset = startOffsetInstance;
                  }
                }
              }
              
              var degreeOfParallelismValue = valueValue['degreeOfParallelism'];
              if (degreeOfParallelismValue !== null && degreeOfParallelismValue !== undefined) {
                var degreeOfParallelismInstance = degreeOfParallelismValue;
                jobInformationInstance.degreeOfParallelism = degreeOfParallelismInstance;
              }
              
              var priorityValue = valueValue['priority'];
              if (priorityValue !== null && priorityValue !== undefined) {
                var priorityInstance = priorityValue;
                jobInformationInstance.priority = priorityInstance;
              }
              
              var submitTimeValue = valueValue['submitTime'];
              if (submitTimeValue !== null && submitTimeValue !== undefined) {
                var submitTimeInstance = submitTimeValue;
                jobInformationInstance.submitTime = submitTimeInstance;
              }
              
              var startTimeValue = valueValue['startTime'];
              if (startTimeValue !== null && startTimeValue !== undefined) {
                var startTimeInstance = startTimeValue;
                jobInformationInstance.startTime = startTimeInstance;
              }
              
              var endTimeValue = valueValue['endTime'];
              if (endTimeValue !== null && endTimeValue !== undefined) {
                var endTimeInstance = endTimeValue;
                jobInformationInstance.endTime = endTimeInstance;
              }
              
              var stateValue = valueValue['state'];
              if (stateValue !== null && stateValue !== undefined) {
                var stateInstance = stateValue;
                jobInformationInstance.state = stateInstance;
              }
              
              var resultValue = valueValue['result'];
              if (resultValue !== null && resultValue !== undefined) {
                var resultInstance = resultValue;
                jobInformationInstance.result = resultInstance;
              }
              
              var stateAuditRecordsArray = valueValue['stateAuditRecords'];
              if (stateAuditRecordsArray !== null && stateAuditRecordsArray !== undefined) {
                for (var loweredIndex3 = 0; loweredIndex3 < stateAuditRecordsArray.length; loweredIndex3 = loweredIndex3 + 1) {
                  var stateAuditRecordsValue = stateAuditRecordsArray[loweredIndex3];
                  var jobStateAuditRecordInstance = {};
                  jobInformationInstance.stateAuditRecords.push(jobStateAuditRecordInstance);
                  
                  var newStateValue = stateAuditRecordsValue['newState'];
                  if (newStateValue !== null && newStateValue !== undefined) {
                    var newStateInstance = newStateValue;
                    jobStateAuditRecordInstance.newState = newStateInstance;
                  }
                  
                  var timeStampValue = stateAuditRecordsValue['timeStamp'];
                  if (timeStampValue !== null && timeStampValue !== undefined) {
                    var timeStampInstance = timeStampValue;
                    jobStateAuditRecordInstance.timeStamp = timeStampInstance;
                  }
                  
                  var requestedByUserValue = stateAuditRecordsValue['requestedByUser'];
                  if (requestedByUserValue !== null && requestedByUserValue !== undefined) {
                    var requestedByUserInstance = requestedByUserValue;
                    jobStateAuditRecordInstance.requestedByUser = requestedByUserInstance;
                  }
                  
                  var detailsValue2 = stateAuditRecordsValue['details'];
                  if (detailsValue2 !== null && detailsValue2 !== undefined) {
                    var detailsInstance2 = detailsValue2;
                    jobStateAuditRecordInstance.details = detailsInstance2;
                  }
                }
              }
              
              var propertiesValue = valueValue['properties'];
              if (propertiesValue !== null && propertiesValue !== undefined) {
                var typeName = propertiesValue['type'];
                if (typeName === 'Hive') {
                  var hivePropertiesInstance = { statementInfo: [] };
                  
                  var statementCountValue = propertiesValue['statementCount'];
                  if (statementCountValue !== null && statementCountValue !== undefined) {
                    var statementCountInstance = statementCountValue;
                    hivePropertiesInstance.statementCount = statementCountInstance;
                  }
                  
                  var executedStatementCountValue = propertiesValue['executedStatementCount'];
                  if (executedStatementCountValue !== null && executedStatementCountValue !== undefined) {
                    var executedStatementCountInstance = executedStatementCountValue;
                    hivePropertiesInstance.executedStatementCount = executedStatementCountInstance;
                  }
                  
                  var logsLocationValue = propertiesValue['logsLocation'];
                  if (logsLocationValue !== null && logsLocationValue !== undefined) {
                    var logsLocationInstance = logsLocationValue;
                    hivePropertiesInstance.logsLocation = logsLocationInstance;
                  }
                  
                  var statementInfoArray = propertiesValue['statementInfo'];
                  if (statementInfoArray !== null && statementInfoArray !== undefined) {
                    for (var loweredIndex4 = 0; loweredIndex4 < statementInfoArray.length; loweredIndex4 = loweredIndex4 + 1) {
                      var statementInfoValue = statementInfoArray[loweredIndex4];
                      var hiveJobStatementInfoInstance = {};
                      hivePropertiesInstance.statementInfo.push(hiveJobStatementInfoInstance);
                      
                      var logLocationValue = statementInfoValue['logLocation'];
                      if (logLocationValue !== null && logLocationValue !== undefined) {
                        var logLocationInstance = logLocationValue;
                        hiveJobStatementInfoInstance.logLocation = logLocationInstance;
                      }
                      
                      var resultPreviewLocationValue = statementInfoValue['resultPreviewLocation'];
                      if (resultPreviewLocationValue !== null && resultPreviewLocationValue !== undefined) {
                        var resultPreviewLocationInstance = resultPreviewLocationValue;
                        hiveJobStatementInfoInstance.resultPreviewLocation = resultPreviewLocationInstance;
                      }
                      
                      var resultLocationValue = statementInfoValue['resultLocation'];
                      if (resultLocationValue !== null && resultLocationValue !== undefined) {
                        var resultLocationInstance = resultLocationValue;
                        hiveJobStatementInfoInstance.resultLocation = resultLocationInstance;
                      }
                      
                      var errorMessageValue2 = statementInfoValue['errorMessage'];
                      if (errorMessageValue2 !== null && errorMessageValue2 !== undefined) {
                        var errorMessageInstance2 = errorMessageValue2;
                        hiveJobStatementInfoInstance.errorMessage = errorMessageInstance2;
                      }
                    }
                  }
                  
                  var warehouseLocationValue = propertiesValue['warehouseLocation'];
                  if (warehouseLocationValue !== null && warehouseLocationValue !== undefined) {
                    var warehouseLocationInstance = warehouseLocationValue;
                    hivePropertiesInstance.warehouseLocation = warehouseLocationInstance;
                  }
                  
                  var runtimeVersionValue = propertiesValue['runtimeVersion'];
                  if (runtimeVersionValue !== null && runtimeVersionValue !== undefined) {
                    var runtimeVersionInstance = runtimeVersionValue;
                    hivePropertiesInstance.runtimeVersion = runtimeVersionInstance;
                  }
                  
                  var scriptValue = propertiesValue['script'];
                  if (scriptValue !== null && scriptValue !== undefined) {
                    var scriptInstance = scriptValue;
                    hivePropertiesInstance.script = scriptInstance;
                  }
                  
                  var typeValue2 = propertiesValue['type'];
                  if (typeValue2 !== null && typeValue2 !== undefined) {
                    var typeInstance2 = typeValue2;
                    hivePropertiesInstance.type = typeInstance2;
                  }
                  jobInformationInstance.properties = hivePropertiesInstance;
                }
                if (typeName === 'USql') {
                  var uSqlPropertiesInstance = { diagnostics: [], resources: [] };
                  
                  var resourcesArray = propertiesValue['resources'];
                  if (resourcesArray !== null && resourcesArray !== undefined) {
                    for (var loweredIndex5 = 0; loweredIndex5 < resourcesArray.length; loweredIndex5 = loweredIndex5 + 1) {
                      var resourcesValue = resourcesArray[loweredIndex5];
                      var jobResourceInstance = {};
                      uSqlPropertiesInstance.resources.push(jobResourceInstance);
                      
                      var nameValue2 = resourcesValue['name'];
                      if (nameValue2 !== null && nameValue2 !== undefined) {
                        var nameInstance2 = nameValue2;
                        jobResourceInstance.name = nameInstance2;
                      }
                      
                      var resourcePathValue = resourcesValue['resourcePath'];
                      if (resourcePathValue !== null && resourcePathValue !== undefined) {
                        var resourcePathInstance = resourcePathValue;
                        jobResourceInstance.resourcePath = resourcePathInstance;
                      }
                      
                      var typeValue3 = resourcesValue['type'];
                      if (typeValue3 !== null && typeValue3 !== undefined) {
                        var typeInstance3 = typeValue3;
                        jobResourceInstance.type = typeInstance3;
                      }
                    }
                  }
                  
                  var algebraFilePathValue = propertiesValue['algebraFilePath'];
                  if (algebraFilePathValue !== null && algebraFilePathValue !== undefined) {
                    var algebraFilePathInstance = algebraFilePathValue;
                    uSqlPropertiesInstance.algebraFilePath = algebraFilePathInstance;
                  }
                  
                  var totalCompilationTimeValue = propertiesValue['totalCompilationTime'];
                  if (totalCompilationTimeValue !== null && totalCompilationTimeValue !== undefined) {
                    var totalCompilationTimeInstance = moment.duration(totalCompilationTimeValue);
                    uSqlPropertiesInstance.totalCompilationTime = totalCompilationTimeInstance;
                  }
                  
                  var totalPauseTimeValue = propertiesValue['totalPauseTime'];
                  if (totalPauseTimeValue !== null && totalPauseTimeValue !== undefined) {
                    var totalPauseTimeInstance = moment.duration(totalPauseTimeValue);
                    uSqlPropertiesInstance.totalPausedTime = totalPauseTimeInstance;
                  }
                  
                  var totalQueuedTimeValue = propertiesValue['totalQueuedTime'];
                  if (totalQueuedTimeValue !== null && totalQueuedTimeValue !== undefined) {
                    var totalQueuedTimeInstance = moment.duration(totalQueuedTimeValue);
                    uSqlPropertiesInstance.totalQueuedTime = totalQueuedTimeInstance;
                  }
                  
                  var totalRunningTimeValue = propertiesValue['totalRunningTime'];
                  if (totalRunningTimeValue !== null && totalRunningTimeValue !== undefined) {
                    var totalRunningTimeInstance = moment.duration(totalRunningTimeValue);
                    uSqlPropertiesInstance.totalRunningTime = totalRunningTimeInstance;
                  }
                  
                  var rootProcessNodeIdValue = propertiesValue['rootProcessNodeId'];
                  if (rootProcessNodeIdValue !== null && rootProcessNodeIdValue !== undefined) {
                    var rootProcessNodeIdInstance = rootProcessNodeIdValue;
                    uSqlPropertiesInstance.rootProcessNodeId = rootProcessNodeIdInstance;
                  }
                  
                  var yarnApplicationIdValue = propertiesValue['yarnApplicationId'];
                  if (yarnApplicationIdValue !== null && yarnApplicationIdValue !== undefined) {
                    var yarnApplicationIdInstance = yarnApplicationIdValue;
                    uSqlPropertiesInstance.yarnApplicationId = yarnApplicationIdInstance;
                  }
                  
                  var yarnApplicationTimeStampValue = propertiesValue['yarnApplicationTimeStamp'];
                  if (yarnApplicationTimeStampValue !== null && yarnApplicationTimeStampValue !== undefined) {
                    var yarnApplicationTimeStampInstance = yarnApplicationTimeStampValue;
                    uSqlPropertiesInstance.yarnApplicationTimeStamp = yarnApplicationTimeStampInstance;
                  }
                  
                  var compileModeValue = propertiesValue['compileMode'];
                  if (compileModeValue !== null && compileModeValue !== undefined) {
                    var compileModeInstance = compileModeValue;
                    uSqlPropertiesInstance.compileMode = compileModeInstance;
                  }
                  
                  var diagnosticsArray = propertiesValue['diagnostics'];
                  if (diagnosticsArray !== null && diagnosticsArray !== undefined) {
                    for (var loweredIndex6 = 0; loweredIndex6 < diagnosticsArray.length; loweredIndex6 = loweredIndex6 + 1) {
                      var diagnosticsValue = diagnosticsArray[loweredIndex6];
                      var diagnosticsInstance = {};
                      uSqlPropertiesInstance.diagnostics.push(diagnosticsInstance);
                      
                      var columnNumberValue = diagnosticsValue['columnNumber'];
                      if (columnNumberValue !== null && columnNumberValue !== undefined) {
                        var columnNumberInstance = columnNumberValue;
                        diagnosticsInstance.columnNumber = columnNumberInstance;
                      }
                      
                      var endValue = diagnosticsValue['end'];
                      if (endValue !== null && endValue !== undefined) {
                        var endInstance = endValue;
                        diagnosticsInstance.end = endInstance;
                      }
                      
                      var lineNumberValue2 = diagnosticsValue['lineNumber'];
                      if (lineNumberValue2 !== null && lineNumberValue2 !== undefined) {
                        var lineNumberInstance2 = lineNumberValue2;
                        diagnosticsInstance.lineNumber = lineNumberInstance2;
                      }
                      
                      var messageValue2 = diagnosticsValue['message'];
                      if (messageValue2 !== null && messageValue2 !== undefined) {
                        var messageInstance2 = messageValue2;
                        diagnosticsInstance.message = messageInstance2;
                      }
                      
                      var severityValue2 = diagnosticsValue['severity'];
                      if (severityValue2 !== null && severityValue2 !== undefined) {
                        var severityInstance2 = severityValue2;
                        diagnosticsInstance.severity = severityInstance2;
                      }
                      
                      var startValue = diagnosticsValue['start'];
                      if (startValue !== null && startValue !== undefined) {
                        var startInstance = startValue;
                        diagnosticsInstance.start = startInstance;
                      }
                    }
                  }
                  
                  var runtimeVersionValue2 = propertiesValue['runtimeVersion'];
                  if (runtimeVersionValue2 !== null && runtimeVersionValue2 !== undefined) {
                    var runtimeVersionInstance2 = runtimeVersionValue2;
                    uSqlPropertiesInstance.runtimeVersion = runtimeVersionInstance2;
                  }
                  
                  var scriptValue2 = propertiesValue['script'];
                  if (scriptValue2 !== null && scriptValue2 !== undefined) {
                    var scriptInstance2 = scriptValue2;
                    uSqlPropertiesInstance.script = scriptInstance2;
                  }
                  
                  var typeValue4 = propertiesValue['type'];
                  if (typeValue4 !== null && typeValue4 !== undefined) {
                    var typeInstance4 = typeValue4;
                    uSqlPropertiesInstance.type = typeInstance4;
                  }
                  jobInformationInstance.properties = uSqlPropertiesInstance;
                }
              }
            }
          }
          
          var nextLinkValue = responseDoc['nextLink'];
          if (nextLinkValue !== null && nextLinkValue !== undefined) {
            var nextLinkInstance = nextLinkValue;
            result.nextLink = nextLinkInstance;
          }
          
          var countValue = responseDoc['count'];
          if (countValue !== null && countValue !== undefined) {
            var countInstance = countValue;
            result.count = countInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Gets the next page of the Data Lake Analytics JobInformation objects
   * within the specified resource group with a link to the next page, if any.
   * 
   * @param {string} nextLink The url to the next job information page.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  JobOperations.prototype.listNext = function(nextLink, resourceGroupName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (nextLink === null || nextLink === undefined) {
      return callback(new Error('nextLink cannot be null.'));
    }
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + nextLink;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsJob 0.9.6-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsJob 0.9.6-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['useragent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsJob 0.9.6-preview' + this.client.userAgentSuffix;
    }
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsJob 0.9.6-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsJob 0.9.6-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['User-Agent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsJob 0.9.6-preview' + this.client.userAgentSuffix;
    }
    if (resourceGroupName !== null && resourceGroupName !== undefined) {
      httpRequest.headers['x-ms-client-resource-group-name'] = resourceGroupName;
    }
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      httpRequest.headers['x-ms-client-subscription-id'] = this.client.credentials.subscriptionId;
    }
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = { value: [] };
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var valueArray = responseDoc['value'];
          if (valueArray !== null && valueArray !== undefined) {
            for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var valueValue = valueArray[loweredIndex1];
              var jobInformationInstance = { errorMessage: [], stateAuditRecords: [] };
              result.value.push(jobInformationInstance);
              
              var jobIdValue = valueValue['jobId'];
              if (jobIdValue !== null && jobIdValue !== undefined) {
                var jobIdInstance = jobIdValue;
                jobInformationInstance.jobId = jobIdInstance;
              }
              
              var nameValue = valueValue['name'];
              if (nameValue !== null && nameValue !== undefined) {
                var nameInstance = nameValue;
                jobInformationInstance.name = nameInstance;
              }
              
              var typeValue = valueValue['type'];
              if (typeValue !== null && typeValue !== undefined) {
                var typeInstance = typeValue;
                jobInformationInstance.type = typeInstance;
              }
              
              var submitterValue = valueValue['submitter'];
              if (submitterValue !== null && submitterValue !== undefined) {
                var submitterInstance = submitterValue;
                jobInformationInstance.submitter = submitterInstance;
              }
              
              var errorMessageArray = valueValue['errorMessage'];
              if (errorMessageArray !== null && errorMessageArray !== undefined) {
                for (var loweredIndex2 = 0; loweredIndex2 < errorMessageArray.length; loweredIndex2 = loweredIndex2 + 1) {
                  var errorMessageValue = errorMessageArray[loweredIndex2];
                  var errorMessageInstance = {};
                  jobInformationInstance.errorMessage.push(errorMessageInstance);
                  
                  var descriptionValue = errorMessageValue['description'];
                  if (descriptionValue !== null && descriptionValue !== undefined) {
                    var descriptionInstance = descriptionValue;
                    errorMessageInstance.description = descriptionInstance;
                  }
                  
                  var detailsValue = errorMessageValue['details'];
                  if (detailsValue !== null && detailsValue !== undefined) {
                    var detailsInstance = detailsValue;
                    errorMessageInstance.details = detailsInstance;
                  }
                  
                  var endOffsetValue = errorMessageValue['endOffset'];
                  if (endOffsetValue !== null && endOffsetValue !== undefined) {
                    var endOffsetInstance = endOffsetValue;
                    errorMessageInstance.endOffset = endOffsetInstance;
                  }
                  
                  var errorIdValue = errorMessageValue['errorId'];
                  if (errorIdValue !== null && errorIdValue !== undefined) {
                    var errorIdInstance = errorIdValue;
                    errorMessageInstance.errorId = errorIdInstance;
                  }
                  
                  var filePathValue = errorMessageValue['filePath'];
                  if (filePathValue !== null && filePathValue !== undefined) {
                    var filePathInstance = filePathValue;
                    errorMessageInstance.filePath = filePathInstance;
                  }
                  
                  var helpLinkValue = errorMessageValue['helpLink'];
                  if (helpLinkValue !== null && helpLinkValue !== undefined) {
                    var helpLinkInstance = helpLinkValue;
                    errorMessageInstance.helpLink = helpLinkInstance;
                  }
                  
                  var internalDiagnosticsValue = errorMessageValue['internalDiagnostics'];
                  if (internalDiagnosticsValue !== null && internalDiagnosticsValue !== undefined) {
                    var internalDiagnosticsInstance = internalDiagnosticsValue;
                    errorMessageInstance.internalDiagnostics = internalDiagnosticsInstance;
                  }
                  
                  var lineNumberValue = errorMessageValue['lineNumber'];
                  if (lineNumberValue !== null && lineNumberValue !== undefined) {
                    var lineNumberInstance = lineNumberValue;
                    errorMessageInstance.lineNumber = lineNumberInstance;
                  }
                  
                  var messageValue = errorMessageValue['message'];
                  if (messageValue !== null && messageValue !== undefined) {
                    var messageInstance = messageValue;
                    errorMessageInstance.message = messageInstance;
                  }
                  
                  var resolutionValue = errorMessageValue['resolution'];
                  if (resolutionValue !== null && resolutionValue !== undefined) {
                    var resolutionInstance = resolutionValue;
                    errorMessageInstance.resolution = resolutionInstance;
                  }
                  
                  var severityValue = errorMessageValue['severity'];
                  if (severityValue !== null && severityValue !== undefined) {
                    var severityInstance = severityValue;
                    errorMessageInstance.severity = severityInstance;
                  }
                  
                  var sourceValue = errorMessageValue['source'];
                  if (sourceValue !== null && sourceValue !== undefined) {
                    var sourceInstance = sourceValue;
                    errorMessageInstance.source = sourceInstance;
                  }
                  
                  var startOffsetValue = errorMessageValue['startOffset'];
                  if (startOffsetValue !== null && startOffsetValue !== undefined) {
                    var startOffsetInstance = startOffsetValue;
                    errorMessageInstance.startOffset = startOffsetInstance;
                  }
                }
              }
              
              var degreeOfParallelismValue = valueValue['degreeOfParallelism'];
              if (degreeOfParallelismValue !== null && degreeOfParallelismValue !== undefined) {
                var degreeOfParallelismInstance = degreeOfParallelismValue;
                jobInformationInstance.degreeOfParallelism = degreeOfParallelismInstance;
              }
              
              var priorityValue = valueValue['priority'];
              if (priorityValue !== null && priorityValue !== undefined) {
                var priorityInstance = priorityValue;
                jobInformationInstance.priority = priorityInstance;
              }
              
              var submitTimeValue = valueValue['submitTime'];
              if (submitTimeValue !== null && submitTimeValue !== undefined) {
                var submitTimeInstance = submitTimeValue;
                jobInformationInstance.submitTime = submitTimeInstance;
              }
              
              var startTimeValue = valueValue['startTime'];
              if (startTimeValue !== null && startTimeValue !== undefined) {
                var startTimeInstance = startTimeValue;
                jobInformationInstance.startTime = startTimeInstance;
              }
              
              var endTimeValue = valueValue['endTime'];
              if (endTimeValue !== null && endTimeValue !== undefined) {
                var endTimeInstance = endTimeValue;
                jobInformationInstance.endTime = endTimeInstance;
              }
              
              var stateValue = valueValue['state'];
              if (stateValue !== null && stateValue !== undefined) {
                var stateInstance = stateValue;
                jobInformationInstance.state = stateInstance;
              }
              
              var resultValue = valueValue['result'];
              if (resultValue !== null && resultValue !== undefined) {
                var resultInstance = resultValue;
                jobInformationInstance.result = resultInstance;
              }
              
              var stateAuditRecordsArray = valueValue['stateAuditRecords'];
              if (stateAuditRecordsArray !== null && stateAuditRecordsArray !== undefined) {
                for (var loweredIndex3 = 0; loweredIndex3 < stateAuditRecordsArray.length; loweredIndex3 = loweredIndex3 + 1) {
                  var stateAuditRecordsValue = stateAuditRecordsArray[loweredIndex3];
                  var jobStateAuditRecordInstance = {};
                  jobInformationInstance.stateAuditRecords.push(jobStateAuditRecordInstance);
                  
                  var newStateValue = stateAuditRecordsValue['newState'];
                  if (newStateValue !== null && newStateValue !== undefined) {
                    var newStateInstance = newStateValue;
                    jobStateAuditRecordInstance.newState = newStateInstance;
                  }
                  
                  var timeStampValue = stateAuditRecordsValue['timeStamp'];
                  if (timeStampValue !== null && timeStampValue !== undefined) {
                    var timeStampInstance = timeStampValue;
                    jobStateAuditRecordInstance.timeStamp = timeStampInstance;
                  }
                  
                  var requestedByUserValue = stateAuditRecordsValue['requestedByUser'];
                  if (requestedByUserValue !== null && requestedByUserValue !== undefined) {
                    var requestedByUserInstance = requestedByUserValue;
                    jobStateAuditRecordInstance.requestedByUser = requestedByUserInstance;
                  }
                  
                  var detailsValue2 = stateAuditRecordsValue['details'];
                  if (detailsValue2 !== null && detailsValue2 !== undefined) {
                    var detailsInstance2 = detailsValue2;
                    jobStateAuditRecordInstance.details = detailsInstance2;
                  }
                }
              }
              
              var propertiesValue = valueValue['properties'];
              if (propertiesValue !== null && propertiesValue !== undefined) {
                var typeName = propertiesValue['type'];
                if (typeName === 'Hive') {
                  var hivePropertiesInstance = { statementInfo: [] };
                  
                  var statementCountValue = propertiesValue['statementCount'];
                  if (statementCountValue !== null && statementCountValue !== undefined) {
                    var statementCountInstance = statementCountValue;
                    hivePropertiesInstance.statementCount = statementCountInstance;
                  }
                  
                  var executedStatementCountValue = propertiesValue['executedStatementCount'];
                  if (executedStatementCountValue !== null && executedStatementCountValue !== undefined) {
                    var executedStatementCountInstance = executedStatementCountValue;
                    hivePropertiesInstance.executedStatementCount = executedStatementCountInstance;
                  }
                  
                  var logsLocationValue = propertiesValue['logsLocation'];
                  if (logsLocationValue !== null && logsLocationValue !== undefined) {
                    var logsLocationInstance = logsLocationValue;
                    hivePropertiesInstance.logsLocation = logsLocationInstance;
                  }
                  
                  var statementInfoArray = propertiesValue['statementInfo'];
                  if (statementInfoArray !== null && statementInfoArray !== undefined) {
                    for (var loweredIndex4 = 0; loweredIndex4 < statementInfoArray.length; loweredIndex4 = loweredIndex4 + 1) {
                      var statementInfoValue = statementInfoArray[loweredIndex4];
                      var hiveJobStatementInfoInstance = {};
                      hivePropertiesInstance.statementInfo.push(hiveJobStatementInfoInstance);
                      
                      var logLocationValue = statementInfoValue['logLocation'];
                      if (logLocationValue !== null && logLocationValue !== undefined) {
                        var logLocationInstance = logLocationValue;
                        hiveJobStatementInfoInstance.logLocation = logLocationInstance;
                      }
                      
                      var resultPreviewLocationValue = statementInfoValue['resultPreviewLocation'];
                      if (resultPreviewLocationValue !== null && resultPreviewLocationValue !== undefined) {
                        var resultPreviewLocationInstance = resultPreviewLocationValue;
                        hiveJobStatementInfoInstance.resultPreviewLocation = resultPreviewLocationInstance;
                      }
                      
                      var resultLocationValue = statementInfoValue['resultLocation'];
                      if (resultLocationValue !== null && resultLocationValue !== undefined) {
                        var resultLocationInstance = resultLocationValue;
                        hiveJobStatementInfoInstance.resultLocation = resultLocationInstance;
                      }
                      
                      var errorMessageValue2 = statementInfoValue['errorMessage'];
                      if (errorMessageValue2 !== null && errorMessageValue2 !== undefined) {
                        var errorMessageInstance2 = errorMessageValue2;
                        hiveJobStatementInfoInstance.errorMessage = errorMessageInstance2;
                      }
                    }
                  }
                  
                  var warehouseLocationValue = propertiesValue['warehouseLocation'];
                  if (warehouseLocationValue !== null && warehouseLocationValue !== undefined) {
                    var warehouseLocationInstance = warehouseLocationValue;
                    hivePropertiesInstance.warehouseLocation = warehouseLocationInstance;
                  }
                  
                  var runtimeVersionValue = propertiesValue['runtimeVersion'];
                  if (runtimeVersionValue !== null && runtimeVersionValue !== undefined) {
                    var runtimeVersionInstance = runtimeVersionValue;
                    hivePropertiesInstance.runtimeVersion = runtimeVersionInstance;
                  }
                  
                  var scriptValue = propertiesValue['script'];
                  if (scriptValue !== null && scriptValue !== undefined) {
                    var scriptInstance = scriptValue;
                    hivePropertiesInstance.script = scriptInstance;
                  }
                  
                  var typeValue2 = propertiesValue['type'];
                  if (typeValue2 !== null && typeValue2 !== undefined) {
                    var typeInstance2 = typeValue2;
                    hivePropertiesInstance.type = typeInstance2;
                  }
                  jobInformationInstance.properties = hivePropertiesInstance;
                }
                if (typeName === 'USql') {
                  var uSqlPropertiesInstance = { diagnostics: [], resources: [] };
                  
                  var resourcesArray = propertiesValue['resources'];
                  if (resourcesArray !== null && resourcesArray !== undefined) {
                    for (var loweredIndex5 = 0; loweredIndex5 < resourcesArray.length; loweredIndex5 = loweredIndex5 + 1) {
                      var resourcesValue = resourcesArray[loweredIndex5];
                      var jobResourceInstance = {};
                      uSqlPropertiesInstance.resources.push(jobResourceInstance);
                      
                      var nameValue2 = resourcesValue['name'];
                      if (nameValue2 !== null && nameValue2 !== undefined) {
                        var nameInstance2 = nameValue2;
                        jobResourceInstance.name = nameInstance2;
                      }
                      
                      var resourcePathValue = resourcesValue['resourcePath'];
                      if (resourcePathValue !== null && resourcePathValue !== undefined) {
                        var resourcePathInstance = resourcePathValue;
                        jobResourceInstance.resourcePath = resourcePathInstance;
                      }
                      
                      var typeValue3 = resourcesValue['type'];
                      if (typeValue3 !== null && typeValue3 !== undefined) {
                        var typeInstance3 = typeValue3;
                        jobResourceInstance.type = typeInstance3;
                      }
                    }
                  }
                  
                  var algebraFilePathValue = propertiesValue['algebraFilePath'];
                  if (algebraFilePathValue !== null && algebraFilePathValue !== undefined) {
                    var algebraFilePathInstance = algebraFilePathValue;
                    uSqlPropertiesInstance.algebraFilePath = algebraFilePathInstance;
                  }
                  
                  var totalCompilationTimeValue = propertiesValue['totalCompilationTime'];
                  if (totalCompilationTimeValue !== null && totalCompilationTimeValue !== undefined) {
                    var totalCompilationTimeInstance = moment.duration(totalCompilationTimeValue);
                    uSqlPropertiesInstance.totalCompilationTime = totalCompilationTimeInstance;
                  }
                  
                  var totalPauseTimeValue = propertiesValue['totalPauseTime'];
                  if (totalPauseTimeValue !== null && totalPauseTimeValue !== undefined) {
                    var totalPauseTimeInstance = moment.duration(totalPauseTimeValue);
                    uSqlPropertiesInstance.totalPausedTime = totalPauseTimeInstance;
                  }
                  
                  var totalQueuedTimeValue = propertiesValue['totalQueuedTime'];
                  if (totalQueuedTimeValue !== null && totalQueuedTimeValue !== undefined) {
                    var totalQueuedTimeInstance = moment.duration(totalQueuedTimeValue);
                    uSqlPropertiesInstance.totalQueuedTime = totalQueuedTimeInstance;
                  }
                  
                  var totalRunningTimeValue = propertiesValue['totalRunningTime'];
                  if (totalRunningTimeValue !== null && totalRunningTimeValue !== undefined) {
                    var totalRunningTimeInstance = moment.duration(totalRunningTimeValue);
                    uSqlPropertiesInstance.totalRunningTime = totalRunningTimeInstance;
                  }
                  
                  var rootProcessNodeIdValue = propertiesValue['rootProcessNodeId'];
                  if (rootProcessNodeIdValue !== null && rootProcessNodeIdValue !== undefined) {
                    var rootProcessNodeIdInstance = rootProcessNodeIdValue;
                    uSqlPropertiesInstance.rootProcessNodeId = rootProcessNodeIdInstance;
                  }
                  
                  var yarnApplicationIdValue = propertiesValue['yarnApplicationId'];
                  if (yarnApplicationIdValue !== null && yarnApplicationIdValue !== undefined) {
                    var yarnApplicationIdInstance = yarnApplicationIdValue;
                    uSqlPropertiesInstance.yarnApplicationId = yarnApplicationIdInstance;
                  }
                  
                  var yarnApplicationTimeStampValue = propertiesValue['yarnApplicationTimeStamp'];
                  if (yarnApplicationTimeStampValue !== null && yarnApplicationTimeStampValue !== undefined) {
                    var yarnApplicationTimeStampInstance = yarnApplicationTimeStampValue;
                    uSqlPropertiesInstance.yarnApplicationTimeStamp = yarnApplicationTimeStampInstance;
                  }
                  
                  var compileModeValue = propertiesValue['compileMode'];
                  if (compileModeValue !== null && compileModeValue !== undefined) {
                    var compileModeInstance = compileModeValue;
                    uSqlPropertiesInstance.compileMode = compileModeInstance;
                  }
                  
                  var diagnosticsArray = propertiesValue['diagnostics'];
                  if (diagnosticsArray !== null && diagnosticsArray !== undefined) {
                    for (var loweredIndex6 = 0; loweredIndex6 < diagnosticsArray.length; loweredIndex6 = loweredIndex6 + 1) {
                      var diagnosticsValue = diagnosticsArray[loweredIndex6];
                      var diagnosticsInstance = {};
                      uSqlPropertiesInstance.diagnostics.push(diagnosticsInstance);
                      
                      var columnNumberValue = diagnosticsValue['columnNumber'];
                      if (columnNumberValue !== null && columnNumberValue !== undefined) {
                        var columnNumberInstance = columnNumberValue;
                        diagnosticsInstance.columnNumber = columnNumberInstance;
                      }
                      
                      var endValue = diagnosticsValue['end'];
                      if (endValue !== null && endValue !== undefined) {
                        var endInstance = endValue;
                        diagnosticsInstance.end = endInstance;
                      }
                      
                      var lineNumberValue2 = diagnosticsValue['lineNumber'];
                      if (lineNumberValue2 !== null && lineNumberValue2 !== undefined) {
                        var lineNumberInstance2 = lineNumberValue2;
                        diagnosticsInstance.lineNumber = lineNumberInstance2;
                      }
                      
                      var messageValue2 = diagnosticsValue['message'];
                      if (messageValue2 !== null && messageValue2 !== undefined) {
                        var messageInstance2 = messageValue2;
                        diagnosticsInstance.message = messageInstance2;
                      }
                      
                      var severityValue2 = diagnosticsValue['severity'];
                      if (severityValue2 !== null && severityValue2 !== undefined) {
                        var severityInstance2 = severityValue2;
                        diagnosticsInstance.severity = severityInstance2;
                      }
                      
                      var startValue = diagnosticsValue['start'];
                      if (startValue !== null && startValue !== undefined) {
                        var startInstance = startValue;
                        diagnosticsInstance.start = startInstance;
                      }
                    }
                  }
                  
                  var runtimeVersionValue2 = propertiesValue['runtimeVersion'];
                  if (runtimeVersionValue2 !== null && runtimeVersionValue2 !== undefined) {
                    var runtimeVersionInstance2 = runtimeVersionValue2;
                    uSqlPropertiesInstance.runtimeVersion = runtimeVersionInstance2;
                  }
                  
                  var scriptValue2 = propertiesValue['script'];
                  if (scriptValue2 !== null && scriptValue2 !== undefined) {
                    var scriptInstance2 = scriptValue2;
                    uSqlPropertiesInstance.script = scriptInstance2;
                  }
                  
                  var typeValue4 = propertiesValue['type'];
                  if (typeValue4 !== null && typeValue4 !== undefined) {
                    var typeInstance4 = typeValue4;
                    uSqlPropertiesInstance.type = typeInstance4;
                  }
                  jobInformationInstance.properties = uSqlPropertiesInstance;
                }
              }
            }
          }
          
          var nextLinkValue = responseDoc['nextLink'];
          if (nextLinkValue !== null && nextLinkValue !== undefined) {
            var nextLinkInstance = nextLinkValue;
            result.nextLink = nextLinkInstance;
          }
          
          var countValue = responseDoc['count'];
          if (countValue !== null && countValue !== undefined) {
            var countInstance = countValue;
            result.count = countInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Gets the first page of the Data Lake Analytics JobInformation objects
   * within the specified resource group with a link to the next page, if any.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} accountName The name of the Data Lake Analytics account to
   * get the job from
   * 
   * @param {string} [queryString] OData Query parameter string (e.g.
   * '$orderBy=SubmitTime,$filter=State eq Succeeded'). If null is passed
   * returns all JobInfo items.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  JobOperations.prototype.listWithQueryString = function(resourceGroupName, accountName, queryString, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (accountName === null || accountName === undefined) {
      return callback(new Error('accountName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + 'https://';
    url2 = url2 + encodeURIComponent(accountName);
    url2 = url2 + '.';
    if (this.client.jobServiceUri !== null && this.client.jobServiceUri !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.jobServiceUri);
    }
    url2 = url2 + '/Jobs';
    var queryParameters = [];
    if (queryString !== null && queryString !== undefined) {
      queryParameters.push(encodeURIComponent(queryString));
    }
    queryParameters.push('api-version=2015-11-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsJob 0.9.6-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsJob 0.9.6-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['useragent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsJob 0.9.6-preview' + this.client.userAgentSuffix;
    }
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsJob 0.9.6-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsJob 0.9.6-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['User-Agent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsJob 0.9.6-preview' + this.client.userAgentSuffix;
    }
    if (resourceGroupName !== null && resourceGroupName !== undefined) {
      httpRequest.headers['x-ms-client-resource-group-name'] = resourceGroupName;
    }
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      httpRequest.headers['x-ms-client-subscription-id'] = this.client.credentials.subscriptionId;
    }
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = { value: [] };
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var valueArray = responseDoc['value'];
          if (valueArray !== null && valueArray !== undefined) {
            for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var valueValue = valueArray[loweredIndex1];
              var jobInformationInstance = { errorMessage: [], stateAuditRecords: [] };
              result.value.push(jobInformationInstance);
              
              var jobIdValue = valueValue['jobId'];
              if (jobIdValue !== null && jobIdValue !== undefined) {
                var jobIdInstance = jobIdValue;
                jobInformationInstance.jobId = jobIdInstance;
              }
              
              var nameValue = valueValue['name'];
              if (nameValue !== null && nameValue !== undefined) {
                var nameInstance = nameValue;
                jobInformationInstance.name = nameInstance;
              }
              
              var typeValue = valueValue['type'];
              if (typeValue !== null && typeValue !== undefined) {
                var typeInstance = typeValue;
                jobInformationInstance.type = typeInstance;
              }
              
              var submitterValue = valueValue['submitter'];
              if (submitterValue !== null && submitterValue !== undefined) {
                var submitterInstance = submitterValue;
                jobInformationInstance.submitter = submitterInstance;
              }
              
              var errorMessageArray = valueValue['errorMessage'];
              if (errorMessageArray !== null && errorMessageArray !== undefined) {
                for (var loweredIndex2 = 0; loweredIndex2 < errorMessageArray.length; loweredIndex2 = loweredIndex2 + 1) {
                  var errorMessageValue = errorMessageArray[loweredIndex2];
                  var errorMessageInstance = {};
                  jobInformationInstance.errorMessage.push(errorMessageInstance);
                  
                  var descriptionValue = errorMessageValue['description'];
                  if (descriptionValue !== null && descriptionValue !== undefined) {
                    var descriptionInstance = descriptionValue;
                    errorMessageInstance.description = descriptionInstance;
                  }
                  
                  var detailsValue = errorMessageValue['details'];
                  if (detailsValue !== null && detailsValue !== undefined) {
                    var detailsInstance = detailsValue;
                    errorMessageInstance.details = detailsInstance;
                  }
                  
                  var endOffsetValue = errorMessageValue['endOffset'];
                  if (endOffsetValue !== null && endOffsetValue !== undefined) {
                    var endOffsetInstance = endOffsetValue;
                    errorMessageInstance.endOffset = endOffsetInstance;
                  }
                  
                  var errorIdValue = errorMessageValue['errorId'];
                  if (errorIdValue !== null && errorIdValue !== undefined) {
                    var errorIdInstance = errorIdValue;
                    errorMessageInstance.errorId = errorIdInstance;
                  }
                  
                  var filePathValue = errorMessageValue['filePath'];
                  if (filePathValue !== null && filePathValue !== undefined) {
                    var filePathInstance = filePathValue;
                    errorMessageInstance.filePath = filePathInstance;
                  }
                  
                  var helpLinkValue = errorMessageValue['helpLink'];
                  if (helpLinkValue !== null && helpLinkValue !== undefined) {
                    var helpLinkInstance = helpLinkValue;
                    errorMessageInstance.helpLink = helpLinkInstance;
                  }
                  
                  var internalDiagnosticsValue = errorMessageValue['internalDiagnostics'];
                  if (internalDiagnosticsValue !== null && internalDiagnosticsValue !== undefined) {
                    var internalDiagnosticsInstance = internalDiagnosticsValue;
                    errorMessageInstance.internalDiagnostics = internalDiagnosticsInstance;
                  }
                  
                  var lineNumberValue = errorMessageValue['lineNumber'];
                  if (lineNumberValue !== null && lineNumberValue !== undefined) {
                    var lineNumberInstance = lineNumberValue;
                    errorMessageInstance.lineNumber = lineNumberInstance;
                  }
                  
                  var messageValue = errorMessageValue['message'];
                  if (messageValue !== null && messageValue !== undefined) {
                    var messageInstance = messageValue;
                    errorMessageInstance.message = messageInstance;
                  }
                  
                  var resolutionValue = errorMessageValue['resolution'];
                  if (resolutionValue !== null && resolutionValue !== undefined) {
                    var resolutionInstance = resolutionValue;
                    errorMessageInstance.resolution = resolutionInstance;
                  }
                  
                  var severityValue = errorMessageValue['severity'];
                  if (severityValue !== null && severityValue !== undefined) {
                    var severityInstance = severityValue;
                    errorMessageInstance.severity = severityInstance;
                  }
                  
                  var sourceValue = errorMessageValue['source'];
                  if (sourceValue !== null && sourceValue !== undefined) {
                    var sourceInstance = sourceValue;
                    errorMessageInstance.source = sourceInstance;
                  }
                  
                  var startOffsetValue = errorMessageValue['startOffset'];
                  if (startOffsetValue !== null && startOffsetValue !== undefined) {
                    var startOffsetInstance = startOffsetValue;
                    errorMessageInstance.startOffset = startOffsetInstance;
                  }
                }
              }
              
              var degreeOfParallelismValue = valueValue['degreeOfParallelism'];
              if (degreeOfParallelismValue !== null && degreeOfParallelismValue !== undefined) {
                var degreeOfParallelismInstance = degreeOfParallelismValue;
                jobInformationInstance.degreeOfParallelism = degreeOfParallelismInstance;
              }
              
              var priorityValue = valueValue['priority'];
              if (priorityValue !== null && priorityValue !== undefined) {
                var priorityInstance = priorityValue;
                jobInformationInstance.priority = priorityInstance;
              }
              
              var submitTimeValue = valueValue['submitTime'];
              if (submitTimeValue !== null && submitTimeValue !== undefined) {
                var submitTimeInstance = submitTimeValue;
                jobInformationInstance.submitTime = submitTimeInstance;
              }
              
              var startTimeValue = valueValue['startTime'];
              if (startTimeValue !== null && startTimeValue !== undefined) {
                var startTimeInstance = startTimeValue;
                jobInformationInstance.startTime = startTimeInstance;
              }
              
              var endTimeValue = valueValue['endTime'];
              if (endTimeValue !== null && endTimeValue !== undefined) {
                var endTimeInstance = endTimeValue;
                jobInformationInstance.endTime = endTimeInstance;
              }
              
              var stateValue = valueValue['state'];
              if (stateValue !== null && stateValue !== undefined) {
                var stateInstance = stateValue;
                jobInformationInstance.state = stateInstance;
              }
              
              var resultValue = valueValue['result'];
              if (resultValue !== null && resultValue !== undefined) {
                var resultInstance = resultValue;
                jobInformationInstance.result = resultInstance;
              }
              
              var stateAuditRecordsArray = valueValue['stateAuditRecords'];
              if (stateAuditRecordsArray !== null && stateAuditRecordsArray !== undefined) {
                for (var loweredIndex3 = 0; loweredIndex3 < stateAuditRecordsArray.length; loweredIndex3 = loweredIndex3 + 1) {
                  var stateAuditRecordsValue = stateAuditRecordsArray[loweredIndex3];
                  var jobStateAuditRecordInstance = {};
                  jobInformationInstance.stateAuditRecords.push(jobStateAuditRecordInstance);
                  
                  var newStateValue = stateAuditRecordsValue['newState'];
                  if (newStateValue !== null && newStateValue !== undefined) {
                    var newStateInstance = newStateValue;
                    jobStateAuditRecordInstance.newState = newStateInstance;
                  }
                  
                  var timeStampValue = stateAuditRecordsValue['timeStamp'];
                  if (timeStampValue !== null && timeStampValue !== undefined) {
                    var timeStampInstance = timeStampValue;
                    jobStateAuditRecordInstance.timeStamp = timeStampInstance;
                  }
                  
                  var requestedByUserValue = stateAuditRecordsValue['requestedByUser'];
                  if (requestedByUserValue !== null && requestedByUserValue !== undefined) {
                    var requestedByUserInstance = requestedByUserValue;
                    jobStateAuditRecordInstance.requestedByUser = requestedByUserInstance;
                  }
                  
                  var detailsValue2 = stateAuditRecordsValue['details'];
                  if (detailsValue2 !== null && detailsValue2 !== undefined) {
                    var detailsInstance2 = detailsValue2;
                    jobStateAuditRecordInstance.details = detailsInstance2;
                  }
                }
              }
              
              var propertiesValue = valueValue['properties'];
              if (propertiesValue !== null && propertiesValue !== undefined) {
                var typeName = propertiesValue['type'];
                if (typeName === 'Hive') {
                  var hivePropertiesInstance = { statementInfo: [] };
                  
                  var statementCountValue = propertiesValue['statementCount'];
                  if (statementCountValue !== null && statementCountValue !== undefined) {
                    var statementCountInstance = statementCountValue;
                    hivePropertiesInstance.statementCount = statementCountInstance;
                  }
                  
                  var executedStatementCountValue = propertiesValue['executedStatementCount'];
                  if (executedStatementCountValue !== null && executedStatementCountValue !== undefined) {
                    var executedStatementCountInstance = executedStatementCountValue;
                    hivePropertiesInstance.executedStatementCount = executedStatementCountInstance;
                  }
                  
                  var logsLocationValue = propertiesValue['logsLocation'];
                  if (logsLocationValue !== null && logsLocationValue !== undefined) {
                    var logsLocationInstance = logsLocationValue;
                    hivePropertiesInstance.logsLocation = logsLocationInstance;
                  }
                  
                  var statementInfoArray = propertiesValue['statementInfo'];
                  if (statementInfoArray !== null && statementInfoArray !== undefined) {
                    for (var loweredIndex4 = 0; loweredIndex4 < statementInfoArray.length; loweredIndex4 = loweredIndex4 + 1) {
                      var statementInfoValue = statementInfoArray[loweredIndex4];
                      var hiveJobStatementInfoInstance = {};
                      hivePropertiesInstance.statementInfo.push(hiveJobStatementInfoInstance);
                      
                      var logLocationValue = statementInfoValue['logLocation'];
                      if (logLocationValue !== null && logLocationValue !== undefined) {
                        var logLocationInstance = logLocationValue;
                        hiveJobStatementInfoInstance.logLocation = logLocationInstance;
                      }
                      
                      var resultPreviewLocationValue = statementInfoValue['resultPreviewLocation'];
                      if (resultPreviewLocationValue !== null && resultPreviewLocationValue !== undefined) {
                        var resultPreviewLocationInstance = resultPreviewLocationValue;
                        hiveJobStatementInfoInstance.resultPreviewLocation = resultPreviewLocationInstance;
                      }
                      
                      var resultLocationValue = statementInfoValue['resultLocation'];
                      if (resultLocationValue !== null && resultLocationValue !== undefined) {
                        var resultLocationInstance = resultLocationValue;
                        hiveJobStatementInfoInstance.resultLocation = resultLocationInstance;
                      }
                      
                      var errorMessageValue2 = statementInfoValue['errorMessage'];
                      if (errorMessageValue2 !== null && errorMessageValue2 !== undefined) {
                        var errorMessageInstance2 = errorMessageValue2;
                        hiveJobStatementInfoInstance.errorMessage = errorMessageInstance2;
                      }
                    }
                  }
                  
                  var warehouseLocationValue = propertiesValue['warehouseLocation'];
                  if (warehouseLocationValue !== null && warehouseLocationValue !== undefined) {
                    var warehouseLocationInstance = warehouseLocationValue;
                    hivePropertiesInstance.warehouseLocation = warehouseLocationInstance;
                  }
                  
                  var runtimeVersionValue = propertiesValue['runtimeVersion'];
                  if (runtimeVersionValue !== null && runtimeVersionValue !== undefined) {
                    var runtimeVersionInstance = runtimeVersionValue;
                    hivePropertiesInstance.runtimeVersion = runtimeVersionInstance;
                  }
                  
                  var scriptValue = propertiesValue['script'];
                  if (scriptValue !== null && scriptValue !== undefined) {
                    var scriptInstance = scriptValue;
                    hivePropertiesInstance.script = scriptInstance;
                  }
                  
                  var typeValue2 = propertiesValue['type'];
                  if (typeValue2 !== null && typeValue2 !== undefined) {
                    var typeInstance2 = typeValue2;
                    hivePropertiesInstance.type = typeInstance2;
                  }
                  jobInformationInstance.properties = hivePropertiesInstance;
                }
                if (typeName === 'USql') {
                  var uSqlPropertiesInstance = { diagnostics: [], resources: [] };
                  
                  var resourcesArray = propertiesValue['resources'];
                  if (resourcesArray !== null && resourcesArray !== undefined) {
                    for (var loweredIndex5 = 0; loweredIndex5 < resourcesArray.length; loweredIndex5 = loweredIndex5 + 1) {
                      var resourcesValue = resourcesArray[loweredIndex5];
                      var jobResourceInstance = {};
                      uSqlPropertiesInstance.resources.push(jobResourceInstance);
                      
                      var nameValue2 = resourcesValue['name'];
                      if (nameValue2 !== null && nameValue2 !== undefined) {
                        var nameInstance2 = nameValue2;
                        jobResourceInstance.name = nameInstance2;
                      }
                      
                      var resourcePathValue = resourcesValue['resourcePath'];
                      if (resourcePathValue !== null && resourcePathValue !== undefined) {
                        var resourcePathInstance = resourcePathValue;
                        jobResourceInstance.resourcePath = resourcePathInstance;
                      }
                      
                      var typeValue3 = resourcesValue['type'];
                      if (typeValue3 !== null && typeValue3 !== undefined) {
                        var typeInstance3 = typeValue3;
                        jobResourceInstance.type = typeInstance3;
                      }
                    }
                  }
                  
                  var algebraFilePathValue = propertiesValue['algebraFilePath'];
                  if (algebraFilePathValue !== null && algebraFilePathValue !== undefined) {
                    var algebraFilePathInstance = algebraFilePathValue;
                    uSqlPropertiesInstance.algebraFilePath = algebraFilePathInstance;
                  }
                  
                  var totalCompilationTimeValue = propertiesValue['totalCompilationTime'];
                  if (totalCompilationTimeValue !== null && totalCompilationTimeValue !== undefined) {
                    var totalCompilationTimeInstance = moment.duration(totalCompilationTimeValue);
                    uSqlPropertiesInstance.totalCompilationTime = totalCompilationTimeInstance;
                  }
                  
                  var totalPauseTimeValue = propertiesValue['totalPauseTime'];
                  if (totalPauseTimeValue !== null && totalPauseTimeValue !== undefined) {
                    var totalPauseTimeInstance = moment.duration(totalPauseTimeValue);
                    uSqlPropertiesInstance.totalPausedTime = totalPauseTimeInstance;
                  }
                  
                  var totalQueuedTimeValue = propertiesValue['totalQueuedTime'];
                  if (totalQueuedTimeValue !== null && totalQueuedTimeValue !== undefined) {
                    var totalQueuedTimeInstance = moment.duration(totalQueuedTimeValue);
                    uSqlPropertiesInstance.totalQueuedTime = totalQueuedTimeInstance;
                  }
                  
                  var totalRunningTimeValue = propertiesValue['totalRunningTime'];
                  if (totalRunningTimeValue !== null && totalRunningTimeValue !== undefined) {
                    var totalRunningTimeInstance = moment.duration(totalRunningTimeValue);
                    uSqlPropertiesInstance.totalRunningTime = totalRunningTimeInstance;
                  }
                  
                  var rootProcessNodeIdValue = propertiesValue['rootProcessNodeId'];
                  if (rootProcessNodeIdValue !== null && rootProcessNodeIdValue !== undefined) {
                    var rootProcessNodeIdInstance = rootProcessNodeIdValue;
                    uSqlPropertiesInstance.rootProcessNodeId = rootProcessNodeIdInstance;
                  }
                  
                  var yarnApplicationIdValue = propertiesValue['yarnApplicationId'];
                  if (yarnApplicationIdValue !== null && yarnApplicationIdValue !== undefined) {
                    var yarnApplicationIdInstance = yarnApplicationIdValue;
                    uSqlPropertiesInstance.yarnApplicationId = yarnApplicationIdInstance;
                  }
                  
                  var yarnApplicationTimeStampValue = propertiesValue['yarnApplicationTimeStamp'];
                  if (yarnApplicationTimeStampValue !== null && yarnApplicationTimeStampValue !== undefined) {
                    var yarnApplicationTimeStampInstance = yarnApplicationTimeStampValue;
                    uSqlPropertiesInstance.yarnApplicationTimeStamp = yarnApplicationTimeStampInstance;
                  }
                  
                  var compileModeValue = propertiesValue['compileMode'];
                  if (compileModeValue !== null && compileModeValue !== undefined) {
                    var compileModeInstance = compileModeValue;
                    uSqlPropertiesInstance.compileMode = compileModeInstance;
                  }
                  
                  var diagnosticsArray = propertiesValue['diagnostics'];
                  if (diagnosticsArray !== null && diagnosticsArray !== undefined) {
                    for (var loweredIndex6 = 0; loweredIndex6 < diagnosticsArray.length; loweredIndex6 = loweredIndex6 + 1) {
                      var diagnosticsValue = diagnosticsArray[loweredIndex6];
                      var diagnosticsInstance = {};
                      uSqlPropertiesInstance.diagnostics.push(diagnosticsInstance);
                      
                      var columnNumberValue = diagnosticsValue['columnNumber'];
                      if (columnNumberValue !== null && columnNumberValue !== undefined) {
                        var columnNumberInstance = columnNumberValue;
                        diagnosticsInstance.columnNumber = columnNumberInstance;
                      }
                      
                      var endValue = diagnosticsValue['end'];
                      if (endValue !== null && endValue !== undefined) {
                        var endInstance = endValue;
                        diagnosticsInstance.end = endInstance;
                      }
                      
                      var lineNumberValue2 = diagnosticsValue['lineNumber'];
                      if (lineNumberValue2 !== null && lineNumberValue2 !== undefined) {
                        var lineNumberInstance2 = lineNumberValue2;
                        diagnosticsInstance.lineNumber = lineNumberInstance2;
                      }
                      
                      var messageValue2 = diagnosticsValue['message'];
                      if (messageValue2 !== null && messageValue2 !== undefined) {
                        var messageInstance2 = messageValue2;
                        diagnosticsInstance.message = messageInstance2;
                      }
                      
                      var severityValue2 = diagnosticsValue['severity'];
                      if (severityValue2 !== null && severityValue2 !== undefined) {
                        var severityInstance2 = severityValue2;
                        diagnosticsInstance.severity = severityInstance2;
                      }
                      
                      var startValue = diagnosticsValue['start'];
                      if (startValue !== null && startValue !== undefined) {
                        var startInstance = startValue;
                        diagnosticsInstance.start = startInstance;
                      }
                    }
                  }
                  
                  var runtimeVersionValue2 = propertiesValue['runtimeVersion'];
                  if (runtimeVersionValue2 !== null && runtimeVersionValue2 !== undefined) {
                    var runtimeVersionInstance2 = runtimeVersionValue2;
                    uSqlPropertiesInstance.runtimeVersion = runtimeVersionInstance2;
                  }
                  
                  var scriptValue2 = propertiesValue['script'];
                  if (scriptValue2 !== null && scriptValue2 !== undefined) {
                    var scriptInstance2 = scriptValue2;
                    uSqlPropertiesInstance.script = scriptInstance2;
                  }
                  
                  var typeValue4 = propertiesValue['type'];
                  if (typeValue4 !== null && typeValue4 !== undefined) {
                    var typeInstance4 = typeValue4;
                    uSqlPropertiesInstance.type = typeInstance4;
                  }
                  jobInformationInstance.properties = uSqlPropertiesInstance;
                }
              }
            }
          }
          
          var nextLinkValue = responseDoc['nextLink'];
          if (nextLinkValue !== null && nextLinkValue !== undefined) {
            var nextLinkInstance = nextLinkValue;
            result.nextLink = nextLinkInstance;
          }
          
          var countValue = responseDoc['count'];
          if (countValue !== null && countValue !== undefined) {
            var countInstance = countValue;
            result.count = countInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  return JobOperations;
})();
