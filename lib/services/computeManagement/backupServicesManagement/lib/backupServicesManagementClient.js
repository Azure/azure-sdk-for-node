/* jshint latedef:false */
/* jshint forin:false */
/* jshint noempty:false */

// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

'use strict';

var util = require('util');
var _ = require('underscore');
var moment = require('moment');
var azureCommon = require('azure-common');
var Service = azureCommon.Service;
var WebResource = azureCommon.WebResource;
var OperationStatus = azureCommon.OperationStatus;

var BackupServicesManagementClient = ( /** @lends BackupServicesManagementClient */ function() {
  /**
   * @class
   * Initializes a new instance of the BackupServicesManagementClient class.
   * @constructor
   * 
   * @param {SubscriptionCloudCredentials} credentials Gets subscription
   * credentials which uniquely identify Microsoft Azure subscription. The
   * subscription ID forms part of the URI for every service call.
   * 
   * @param {string} [credentials.subscriptionId]
   * 
   * @param {string} [baseUri] Gets the URI used as the base for all cloud
   * service requests.
   * 
   * @param {Array} filters
   */
  function BackupServicesManagementClient(credentials, baseUri, filters) {
    if (credentials === null || credentials === undefined) {
      throw new Error('credentials cannot be null.');
    }
    
    BackupServicesManagementClient['super_'].call(this, credentials, filters);
    
    this.credentials = credentials;
    this.baseUri = baseUri;
    if (this.baseUri === null || this.baseUri === undefined) {
      this.baseUri = 'https://management.core.windows.net';
    }
    if (this.apiVersion === null || this.apiVersion === undefined) {
      this.apiVersion = '2013-03-01';
    }
    if (this.longRunningOperationInitialTimeout === null || this.longRunningOperationInitialTimeout === undefined) {
      this.longRunningOperationInitialTimeout = -1;
    }
    if (this.longRunningOperationRetryTimeout === null || this.longRunningOperationRetryTimeout === undefined) {
      this.longRunningOperationRetryTimeout = -1;
    }
    /**
     * Provides an instance of the [BackUpOperations](-BackUpOperations.html)
     * object.
     * @type {object}
     */
    this.backUp = new BackUpOperations(this);
    /**
     * Provides an instance of the
     * [ContainerOperations](-ContainerOperations.html) object.
     * @type {object}
     */
    this.container = new ContainerOperations(this);
    /**
     * Provides an instance of the
     * [CSMProtectionPolicyOperations](-CSMProtectionPolicyOperations.html)
     * object.
     * @type {object}
     */
    this.cSMProtectionPolicy = new CSMProtectionPolicyOperations(this);
    /**
     * Provides an instance of the
     * [DataSourceOperations](-DataSourceOperations.html) object.
     * @type {object}
     */
    this.dataSource = new DataSourceOperations(this);
    /**
     * Provides an instance of the [JobOperations](-JobOperations.html) object.
     * @type {object}
     */
    this.job = new JobOperations(this);
    /**
     * Provides an instance of the [OperationStatus](-OperationStatus.html)
     * object.
     * @type {object}
     */
    this.operationStatus = new OperationStatus(this);
    /**
     * Provides an instance of the
     * [ProtectableObjectOperations](-ProtectableObjectOperations.html) object.
     * @type {object}
     */
    this.protectableObject = new ProtectableObjectOperations(this);
    /**
     * Provides an instance of the
     * [RecoveryPointOperations](-RecoveryPointOperations.html) object.
     * @type {object}
     */
    this.recoveryPoint = new RecoveryPointOperations(this);
    /**
     * Provides an instance of the [RestoreOperations](-RestoreOperations.html)
     * object.
     * @type {object}
     */
    this.restore = new RestoreOperations(this);
  }
  
  util.inherits(BackupServicesManagementClient, Service);
  
  
  return BackupServicesManagementClient;
})();
exports.BackupServicesManagementClient = BackupServicesManagementClient;

var BackUpOperations = ( /** @lends BackUpOperations */ function() {
  /**
   * @class
   * Definition of BackUp operations for the Azure Backup extension.
   * __NOTE__: An instance of this class is automatically created for an
   * instance of the [BackupServicesManagementClient] {@link
   * BackupServicesManagementClient~BackupServicesManagementClient}.
   * See [backUp] {@link
   * BackupServicesManagementClient~BackupServicesManagementClient#backUp}.
   * Initializes a new instance of the BackUpOperations class.
   * @constructor
   * 
   * @param {BackupServicesManagementClient} client Reference to the service
   * client.
   */
  function BackUpOperations(client) {
    this.client = client;
  }
  
  /**
   * BackUp the AzureBackUpItem.
   * 
   * @param {string} resourceGroupName
   * 
   * @param {string} resourceName
   * 
   * @param {CustomRequestHeaders} [customRequestHeaders] Request header
   * parameters.
   * 
   * @param {string} [customRequestHeaders.clientRequestId] ClientRequestId is
   * a unique ID for every request to Azure Site Recovery. It is useful when
   * diagnosing failures in API calls.
   * 
   * @param {string} [containerName]
   * 
   * @param {string} [itemName]
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  BackUpOperations.prototype.triggerBackUp = function(resourceGroupName, resourceName, customRequestHeaders, containerName, itemName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (resourceName === null || resourceName === undefined) {
      return callback(new Error('resourceName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Backup';
    url2 = url2 + '/';
    url2 = url2 + 'BackupVault';
    url2 = url2 + '/';
    url2 = url2 + encodeURIComponent(resourceName);
    url2 = url2 + '/registeredContainers/';
    if (containerName !== null && containerName !== undefined) {
      url2 = url2 + encodeURIComponent(containerName);
    }
    url2 = url2 + '/protectedItems/';
    if (itemName !== null && itemName !== undefined) {
      url2 = url2 + encodeURIComponent(itemName);
    }
    url2 = url2 + '/backup';
    var queryParameters = [];
    queryParameters.push('api-version=2014-09-01');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Accept-Language'] = 'en-us';
    httpRequest.headers['Content-Type'] = 'application/json';
    if (customRequestHeaders.clientRequestId !== null && customRequestHeaders.clientRequestId !== undefined) {
      httpRequest.headers['x-ms-client-request-id'] = customRequestHeaders.clientRequestId;
    }
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 202) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 202) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var operationIdInstance = responseDoc;
          result.operationId = operationIdInstance;
        }
        
      }
      result.statusCode = statusCode;
      
      return callback(null, result);
    });
  };
  
  return BackUpOperations;
})();

var ContainerOperations = ( /** @lends ContainerOperations */ function() {
  /**
   * @class
   * Definition of Container operations for the Azure Backup extension.
   * __NOTE__: An instance of this class is automatically created for an
   * instance of the [BackupServicesManagementClient] {@link
   * BackupServicesManagementClient~BackupServicesManagementClient}.
   * See [container] {@link
   * BackupServicesManagementClient~BackupServicesManagementClient#container}.
   * Initializes a new instance of the ContainerOperations class.
   * @constructor
   * 
   * @param {BackupServicesManagementClient} client Reference to the service
   * client.
   */
  function ContainerOperations(client) {
    this.client = client;
  }
  
  /**
   * Get the list of all container based on the given query filter string.
   * 
   * @param {string} resourceGroupName
   * 
   * @param {string} resourceName
   * 
   * @param {ContainerQueryParameters} [parametersOrCallback] Container query
   * parameters.
   * 
   * @param {string} [parametersOrCallback.containerType]
   * 
   * @param {string} [parametersOrCallback.friendlyName]
   * 
   * @param {string} [parametersOrCallback.status]
   * 
   * @param {CustomRequestHeaders} [customRequestHeaders] Request header
   * parameters.
   * 
   * @param {string} [customRequestHeaders.clientRequestId] ClientRequestId is
   * a unique ID for every request to Azure Site Recovery. It is useful when
   * diagnosing failures in API calls.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ContainerOperations.prototype.list = function(resourceGroupName, resourceName, parametersOrCallback, customRequestHeaders, callback) {
    var parameters = parametersOrCallback;
    if (_.isFunction(parameters)) {
      callback = parameters;
      parameters = null;
    }
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (resourceName === null || resourceName === undefined) {
      return callback(new Error('resourceName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/Subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Backup';
    url2 = url2 + '/';
    url2 = url2 + 'BackupVault';
    url2 = url2 + '/';
    url2 = url2 + encodeURIComponent(resourceName);
    url2 = url2 + '/containers';
    var queryParameters = [];
    queryParameters.push('api-version=2014-09-01');
    var odataFilter = [];
    if (parameters !== null && parameters !== undefined && parameters.containerType !== null && parameters.containerType !== undefined) {
      odataFilter.push('type eq \'' + encodeURIComponent(parameters.containerType) + '\'');
    }
    if (parameters !== null && parameters !== undefined && parameters.friendlyName !== null && parameters.friendlyName !== undefined) {
      odataFilter.push('friendlyName eq \'' + encodeURIComponent(parameters.friendlyName) + '\'');
    }
    if (parameters !== null && parameters !== undefined && parameters.status !== null && parameters.status !== undefined) {
      odataFilter.push('status eq \'' + encodeURIComponent(parameters.status) + '\'');
    }
    if (odataFilter.length > 0) {
      queryParameters.push('$filter=' + odataFilter.join(' and '));
    }
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Accept-Language'] = 'en-us';
    httpRequest.headers['Content-Type'] = 'application/json';
    if (customRequestHeaders.clientRequestId !== null && customRequestHeaders.clientRequestId !== undefined) {
      httpRequest.headers['x-ms-client-request-id'] = customRequestHeaders.clientRequestId;
    }
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var cSMContainerListResponseInstance = { value: [] };
          result.cSMContainerListResponse = cSMContainerListResponseInstance;
          
          var valueArray = responseDoc['value'];
          if (valueArray !== null && valueArray !== undefined) {
            for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var valueValue = valueArray[loweredIndex1];
              var cSMContainerResponseInstance = {};
              cSMContainerListResponseInstance.value.push(cSMContainerResponseInstance);
              
              var propertiesValue = valueValue['properties'];
              if (propertiesValue !== null && propertiesValue !== undefined) {
                var propertiesInstance = {};
                cSMContainerResponseInstance.properties = propertiesInstance;
                
                var friendlyNameValue = propertiesValue['friendlyName'];
                if (friendlyNameValue !== null && friendlyNameValue !== undefined) {
                  var friendlyNameInstance = friendlyNameValue;
                  propertiesInstance.friendlyName = friendlyNameInstance;
                }
                
                var statusValue = propertiesValue['status'];
                if (statusValue !== null && statusValue !== undefined) {
                  var statusInstance = statusValue;
                  propertiesInstance.status = statusInstance;
                }
                
                var healthStatusValue = propertiesValue['healthStatus'];
                if (healthStatusValue !== null && healthStatusValue !== undefined) {
                  var healthStatusInstance = healthStatusValue;
                  propertiesInstance.healthStatus = healthStatusInstance;
                }
                
                var containerTypeValue = propertiesValue['containerType'];
                if (containerTypeValue !== null && containerTypeValue !== undefined) {
                  var containerTypeInstance = containerTypeValue;
                  propertiesInstance.containerType = containerTypeInstance;
                }
                
                var parentContainerIdValue = propertiesValue['parentContainerId'];
                if (parentContainerIdValue !== null && parentContainerIdValue !== undefined) {
                  var parentContainerIdInstance = parentContainerIdValue;
                  propertiesInstance.parentContainerId = parentContainerIdInstance;
                }
              }
              
              var idValue = valueValue['id'];
              if (idValue !== null && idValue !== undefined) {
                var idInstance = idValue;
                cSMContainerResponseInstance.id = idInstance;
              }
              
              var nameValue = valueValue['name'];
              if (nameValue !== null && nameValue !== undefined) {
                var nameInstance = nameValue;
                cSMContainerResponseInstance.name = nameInstance;
              }
              
              var typeValue = valueValue['type'];
              if (typeValue !== null && typeValue !== undefined) {
                var typeInstance = typeValue;
                cSMContainerResponseInstance.type = typeInstance;
              }
            }
          }
          
          var nextLinkValue = responseDoc['nextLink'];
          if (nextLinkValue !== null && nextLinkValue !== undefined) {
            var nextLinkInstance = nextLinkValue;
            cSMContainerListResponseInstance.nextLink = nextLinkInstance;
          }
          
          var idValue2 = responseDoc['id'];
          if (idValue2 !== null && idValue2 !== undefined) {
            var idInstance2 = idValue2;
            cSMContainerListResponseInstance.id = idInstance2;
          }
          
          var nameValue2 = responseDoc['name'];
          if (nameValue2 !== null && nameValue2 !== undefined) {
            var nameInstance2 = nameValue2;
            cSMContainerListResponseInstance.name = nameInstance2;
          }
          
          var typeValue2 = responseDoc['type'];
          if (typeValue2 !== null && typeValue2 !== undefined) {
            var typeInstance2 = typeValue2;
            cSMContainerListResponseInstance.type = typeInstance2;
          }
        }
        
      }
      result.statusCode = statusCode;
      
      return callback(null, result);
    });
  };
  
  /**
   * Trigger the Discovery.
   * 
   * @param {string} resourceGroupName
   * 
   * @param {string} resourceName
   * 
   * @param {CustomRequestHeaders} [customRequestHeaders] Request header
   * parameters.
   * 
   * @param {string} [customRequestHeaders.clientRequestId] ClientRequestId is
   * a unique ID for every request to Azure Site Recovery. It is useful when
   * diagnosing failures in API calls.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ContainerOperations.prototype.refresh = function(resourceGroupName, resourceName, customRequestHeaders, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (resourceName === null || resourceName === undefined) {
      return callback(new Error('resourceName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/Subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Backup';
    url2 = url2 + '/';
    url2 = url2 + 'BackupVault';
    url2 = url2 + '/';
    url2 = url2 + encodeURIComponent(resourceName);
    url2 = url2 + '/refreshContainers';
    var queryParameters = [];
    queryParameters.push('api-version=2014-09-01');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Accept-Language'] = 'en-us';
    httpRequest.headers['Content-Type'] = 'application/json';
    if (customRequestHeaders.clientRequestId !== null && customRequestHeaders.clientRequestId !== undefined) {
      httpRequest.headers['x-ms-client-request-id'] = customRequestHeaders.clientRequestId;
    }
    httpRequest.headers['x-ms-version'] = '2013-03-01';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 202) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 202) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var operationIdInstance = responseDoc;
          result.operationId = operationIdInstance;
        }
        
      }
      result.statusCode = statusCode;
      
      return callback(null, result);
    });
  };
  
  /**
   * Register the container.
   * 
   * @param {string} resourceGroupName
   * 
   * @param {string} resourceName
   * 
   * @param {string} containerName Container to be register.
   * 
   * @param {CustomRequestHeaders} [customRequestHeaders] Request header
   * parameters.
   * 
   * @param {string} [customRequestHeaders.clientRequestId] ClientRequestId is
   * a unique ID for every request to Azure Site Recovery. It is useful when
   * diagnosing failures in API calls.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ContainerOperations.prototype.register = function(resourceGroupName, resourceName, containerName, customRequestHeaders, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (resourceName === null || resourceName === undefined) {
      return callback(new Error('resourceName cannot be null.'));
    }
    if (containerName === null || containerName === undefined) {
      return callback(new Error('containerName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/Subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Backup';
    url2 = url2 + '/';
    url2 = url2 + 'BackupVault';
    url2 = url2 + '/';
    url2 = url2 + encodeURIComponent(resourceName);
    url2 = url2 + '/registeredContainers/';
    url2 = url2 + encodeURIComponent(containerName);
    var queryParameters = [];
    queryParameters.push('api-version=2014-09-01');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Accept-Language'] = 'en-us';
    httpRequest.headers['Content-Type'] = 'application/json';
    if (customRequestHeaders.clientRequestId !== null && customRequestHeaders.clientRequestId !== undefined) {
      httpRequest.headers['x-ms-client-request-id'] = customRequestHeaders.clientRequestId;
    }
    httpRequest.headers['x-ms-version'] = '2013-03-01';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 202) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 202) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var operationIdInstance = responseDoc;
          result.operationId = operationIdInstance;
        }
        
      }
      result.statusCode = statusCode;
      
      return callback(null, result);
    });
  };
  
  /**
   * Unregister the container.
   * 
   * @param {string} resourceGroupName
   * 
   * @param {string} resourceName
   * 
   * @param {string} containerName Container which we want to unregister.
   * 
   * @param {CustomRequestHeaders} customRequestHeaders Request header
   * parameters.
   * 
   * @param {string} [customRequestHeaders.clientRequestId] ClientRequestId is
   * a unique ID for every request to Azure Site Recovery. It is useful when
   * diagnosing failures in API calls.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ContainerOperations.prototype.unregister = function(resourceGroupName, resourceName, containerName, customRequestHeaders, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (resourceName === null || resourceName === undefined) {
      return callback(new Error('resourceName cannot be null.'));
    }
    if (containerName === null || containerName === undefined) {
      return callback(new Error('containerName cannot be null.'));
    }
    if (customRequestHeaders === null || customRequestHeaders === undefined) {
      return callback(new Error('customRequestHeaders cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/Subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Backup';
    url2 = url2 + '/';
    url2 = url2 + 'BackupVault';
    url2 = url2 + '/';
    url2 = url2 + encodeURIComponent(resourceName);
    url2 = url2 + '/registeredContainers/';
    url2 = url2 + encodeURIComponent(containerName);
    var queryParameters = [];
    queryParameters.push('api-version=2014-09-01');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'DELETE';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Accept-Language'] = 'en-us';
    httpRequest.headers['Content-Type'] = 'application/json';
    if (customRequestHeaders.clientRequestId !== null && customRequestHeaders.clientRequestId !== undefined) {
      httpRequest.headers['x-ms-client-request-id'] = customRequestHeaders.clientRequestId;
    }
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 202) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 202) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var operationIdInstance = responseDoc;
          result.operationId = operationIdInstance;
        }
        
      }
      result.statusCode = statusCode;
      
      return callback(null, result);
    });
  };
  
  return ContainerOperations;
})();

var CSMProtectionPolicyOperations = ( /** @lends CSMProtectionPolicyOperations */ function() {
  /**
   * @class
   * Definition of Protection Policy operations for the Azure Backup extension.
   * __NOTE__: An instance of this class is automatically created for an
   * instance of the [BackupServicesManagementClient] {@link
   * BackupServicesManagementClient~BackupServicesManagementClient}.
   * See [cSMProtectionPolicy] {@link
   * BackupServicesManagementClient~BackupServicesManagementClient#cSMProtectionPolicy}.
   * Initializes a new instance of the CSMProtectionPolicyOperations class.
   * @constructor
   * 
   * @param {BackupServicesManagementClient} client Reference to the service
   * client.
   */
  function CSMProtectionPolicyOperations(client) {
    this.client = client;
  }
  
  /**
   * Create new Protection Policy.
   * 
   * @param {string} resourceGroupName
   * 
   * @param {string} resourceName
   * 
   * @param {string} policyName The protection policy Name to be updated.
   * 
   * @param {CSMAddProtectionPolicyRequest} cSMAddProtectionPolicyRequest The
   * protection policy creation request.
   * 
   * @param {CSMAddProtectionPolicyRequestProperties}
   * [cSMAddProtectionPolicyRequest.properties] properties of add protection
   * policy.
   * 
   * @param {string} [cSMAddProtectionPolicyRequest.properties.workloadType]
   * WorkloadType of ProtectionPolicy.
   * 
   * @param {string} [cSMAddProtectionPolicyRequest.properties.policyName] Name
   * of ProtectionPolicy.
   * 
   * @param {CSMBackupSchedule}
   * [cSMAddProtectionPolicyRequest.properties.backupSchedule] Backup Schedule
   * of ProtectionPolicy.
   * 
   * @param {string}
   * [cSMAddProtectionPolicyRequest.properties.backupSchedule.backupType]
   * BackupType of ProtectionPolicy.
   * 
   * @param {string}
   * [cSMAddProtectionPolicyRequest.properties.backupSchedule.scheduleRun]
   * ScheduleRun of ProtectionPolicy.
   * 
   * @param {array}
   * [cSMAddProtectionPolicyRequest.properties.backupSchedule.scheduleRunDays]
   * ScheduleRunDays of ProtectionPolicy.
   * 
   * @param {array}
   * [cSMAddProtectionPolicyRequest.properties.backupSchedule.scheduleRunTimes]
   * ScheduleRunTimes of ProtectionPolicy.
   * 
   * @param {CSMRetentionPolicy}
   * [cSMAddProtectionPolicyRequest.properties.retentionPolicy] Retention
   * Policy
   * 
   * @param {RetentionDurationType}
   * [cSMAddProtectionPolicyRequest.properties.retentionPolicy.retentionType]
   * Retention Type.
   * 
   * @param {number}
   * [cSMAddProtectionPolicyRequest.properties.retentionPolicy.retentionDuration]
   * Retention Duration.
   * 
   * @param {CSMLongTermRetentionPolicy}
   * [cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy] Long Term
   * Retention Policy.
   * 
   * @param {CSMDailyRetentionSchedule}
   * [cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.dailySchedule]
   * DailyRetention Schedule of ProtectionPolicy.
   * 
   * @param {array}
   * [cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.dailySchedule.retentionTimes]
   * Retention times of retention policy.
   * 
   * @param {CSMRetentionDuration}
   * [cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.dailySchedule.cSMRetentionDuration]
   * Retention duration of retention Policy.
   * 
   * @param {number}
   * [cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.dailySchedule.cSMRetentionDuration.count]
   * Count.
   * 
   * @param {RetentionDurationType}
   * [cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.dailySchedule.cSMRetentionDuration.durationType]
   * Retention duration type of retention policy.
   * 
   * @param {CSMWeeklyRetentionSchedule}
   * [cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.weeklySchedule]
   * WeeklyRetention Schedule of ProtectionPolicy.
   * 
   * @param {array}
   * [cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.weeklySchedule.daysOfTheWeek]
   * List of Days of Week for Weekly Retention policy.
   * 
   * @param {array}
   * [cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.weeklySchedule.retentionTimes]
   * Retention times of retention policy.
   * 
   * @param {CSMRetentionDuration}
   * [cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.weeklySchedule.cSMRetentionDuration]
   * Retention duration of retention Policy.
   * 
   * @param {number}
   * [cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.weeklySchedule.cSMRetentionDuration.count]
   * Count.
   * 
   * @param {RetentionDurationType}
   * [cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.weeklySchedule.cSMRetentionDuration.durationType]
   * Retention duration type of retention policy.
   * 
   * @param {CSMMonthlyRetentionSchedule}
   * [cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.monthlySchedule]
   * MonthlyRetention Schedule of ProtectionPolicy.
   * 
   * @param {RetentionScheduleFormat}
   * [cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.monthlySchedule.retentionScheduleType]
   * Retention ScheduleType for monthly retention policy.
   * 
   * @param {CSMDailyRetentionFormat}
   * [cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.monthlySchedule.retentionScheduleDaily]
   * Daily Retention Format for monthly retention policy.
   * 
   * @param {array}
   * [cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.monthlySchedule.retentionScheduleDaily.daysOfTheMonth]
   * List of Days of month.
   * 
   * @param {CSMWeeklyRetentionFormat}
   * [cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.monthlySchedule.retentionScheduleWeekly]
   * Weekly Retention format for monthly retention policy.
   * 
   * @param {array}
   * [cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.monthlySchedule.retentionScheduleWeekly.daysOfTheWeek]
   * List of days of week.
   * 
   * @param {array}
   * [cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.monthlySchedule.retentionScheduleWeekly.weeksOfTheMonth]
   * List of weeks of month.
   * 
   * @param {array}
   * [cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.monthlySchedule.retentionTimes]
   * Retention times of retention policy.
   * 
   * @param {CSMRetentionDuration}
   * [cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.monthlySchedule.cSMRetentionDuration]
   * Retention duration of retention Policy.
   * 
   * @param {number}
   * [cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.monthlySchedule.cSMRetentionDuration.count]
   * Count.
   * 
   * @param {RetentionDurationType}
   * [cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.monthlySchedule.cSMRetentionDuration.durationType]
   * Retention duration type of retention policy.
   * 
   * @param {CSMYearlyRetentionSchedule}
   * [cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule]
   * YearlyRetention Schedule of ProtectionPolicy.
   * 
   * @param {RetentionScheduleFormat}
   * [cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule.retentionScheduleType]
   * Retention ScheduleType for monthly retention policy.
   * 
   * @param {array}
   * [cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule.monthsOfYear]
   * List of months of year of yearly retention policy.
   * 
   * @param {CSMDailyRetentionFormat}
   * [cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule.retentionScheduleDaily]
   * Daily Retention Format for monthly retention policy.
   * 
   * @param {array}
   * [cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule.retentionScheduleDaily.daysOfTheMonth]
   * List of Days of month.
   * 
   * @param {CSMWeeklyRetentionFormat}
   * [cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule.retentionScheduleWeekly]
   * Weekly Retention format for monthly retention policy.
   * 
   * @param {array}
   * [cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule.retentionScheduleWeekly.daysOfTheWeek]
   * List of days of week.
   * 
   * @param {array}
   * [cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule.retentionScheduleWeekly.weeksOfTheMonth]
   * List of weeks of month.
   * 
   * @param {array}
   * [cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule.retentionTimes]
   * Retention times of retention policy.
   * 
   * @param {CSMRetentionDuration}
   * [cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule.cSMRetentionDuration]
   * Retention duration of retention Policy.
   * 
   * @param {number}
   * [cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule.cSMRetentionDuration.count]
   * Count.
   * 
   * @param {RetentionDurationType}
   * [cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule.cSMRetentionDuration.durationType]
   * Retention duration type of retention policy.
   * 
   * @param {string} [cSMAddProtectionPolicyRequest.policyName] Protection
   * policy name.
   * 
   * @param {CustomRequestHeaders} [customRequestHeaders] Request header
   * parameters.
   * 
   * @param {string} [customRequestHeaders.clientRequestId] ClientRequestId is
   * a unique ID for every request to Azure Site Recovery. It is useful when
   * diagnosing failures in API calls.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  CSMProtectionPolicyOperations.prototype.add = function(resourceGroupName, resourceName, policyName, cSMAddProtectionPolicyRequest, customRequestHeaders, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (resourceName === null || resourceName === undefined) {
      return callback(new Error('resourceName cannot be null.'));
    }
    if (policyName === null || policyName === undefined) {
      return callback(new Error('policyName cannot be null.'));
    }
    if (cSMAddProtectionPolicyRequest === null || cSMAddProtectionPolicyRequest === undefined) {
      return callback(new Error('cSMAddProtectionPolicyRequest cannot be null.'));
    }
    if (cSMAddProtectionPolicyRequest.properties !== null && cSMAddProtectionPolicyRequest.properties !== undefined) {
      if (cSMAddProtectionPolicyRequest.properties.backupSchedule !== null && cSMAddProtectionPolicyRequest.properties.backupSchedule !== undefined) {
        if (cSMAddProtectionPolicyRequest.properties.backupSchedule.backupType === null || cSMAddProtectionPolicyRequest.properties.backupSchedule.backupType === undefined) {
          return callback(new Error('cSMAddProtectionPolicyRequest.properties.backupSchedule.backupType cannot be null.'));
        }
        if (cSMAddProtectionPolicyRequest.properties.backupSchedule.scheduleRun === null || cSMAddProtectionPolicyRequest.properties.backupSchedule.scheduleRun === undefined) {
          return callback(new Error('cSMAddProtectionPolicyRequest.properties.backupSchedule.scheduleRun cannot be null.'));
        }
        if (cSMAddProtectionPolicyRequest.properties.backupSchedule.scheduleRunTimes === null || cSMAddProtectionPolicyRequest.properties.backupSchedule.scheduleRunTimes === undefined) {
          return callback(new Error('cSMAddProtectionPolicyRequest.properties.backupSchedule.scheduleRunTimes cannot be null.'));
        }
      }
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/Subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Backup';
    url2 = url2 + '/';
    url2 = url2 + 'BackupVault';
    url2 = url2 + '/';
    url2 = url2 + encodeURIComponent(resourceName);
    url2 = url2 + '/protectionPolicies/';
    url2 = url2 + encodeURIComponent(policyName);
    var queryParameters = [];
    queryParameters.push('api-version=2014-09-01');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Accept-Language'] = 'en-us';
    httpRequest.headers['Content-Type'] = 'application/json';
    if (customRequestHeaders.clientRequestId !== null && customRequestHeaders.clientRequestId !== undefined) {
      httpRequest.headers['x-ms-client-request-id'] = customRequestHeaders.clientRequestId;
    }
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = null;
    
    var cSMAddProtectionPolicyRequestValue = {};
    requestDoc = cSMAddProtectionPolicyRequestValue;
    
    if (cSMAddProtectionPolicyRequest.properties !== null && cSMAddProtectionPolicyRequest.properties !== undefined) {
      var propertiesValue = {};
      cSMAddProtectionPolicyRequestValue['properties'] = propertiesValue;
      
      if (cSMAddProtectionPolicyRequest.properties.workloadType !== null && cSMAddProtectionPolicyRequest.properties.workloadType !== undefined) {
        propertiesValue['WorkloadType'] = cSMAddProtectionPolicyRequest.properties.workloadType;
      }
      
      if (cSMAddProtectionPolicyRequest.properties.policyName !== null && cSMAddProtectionPolicyRequest.properties.policyName !== undefined) {
        propertiesValue['PolicyName'] = cSMAddProtectionPolicyRequest.properties.policyName;
      }
      
      if (cSMAddProtectionPolicyRequest.properties.backupSchedule !== null && cSMAddProtectionPolicyRequest.properties.backupSchedule !== undefined) {
        var backupScheduleValue = {};
        propertiesValue['BackupSchedule'] = backupScheduleValue;
        
        backupScheduleValue['backupType'] = cSMAddProtectionPolicyRequest.properties.backupSchedule.backupType;
        
        backupScheduleValue['scheduleRun'] = cSMAddProtectionPolicyRequest.properties.backupSchedule.scheduleRun;
        
        if (cSMAddProtectionPolicyRequest.properties.backupSchedule.scheduleRunDays !== null && cSMAddProtectionPolicyRequest.properties.backupSchedule.scheduleRunDays !== undefined) {
          var scheduleRunDaysArray = [];
          for (var loweredIndex1 = 0; loweredIndex1 < cSMAddProtectionPolicyRequest.properties.backupSchedule.scheduleRunDays.length; loweredIndex1 = loweredIndex1 + 1) {
            var scheduleRunDaysItem = cSMAddProtectionPolicyRequest.properties.backupSchedule.scheduleRunDays[loweredIndex1];
            scheduleRunDaysArray.push(scheduleRunDaysItem !== null && scheduleRunDaysItem !== undefined ? scheduleRunDaysItem.toString() : 'Sunday');
          }
          backupScheduleValue['scheduleRunDays'] = scheduleRunDaysArray;
        }
        
        if (cSMAddProtectionPolicyRequest.properties.backupSchedule.scheduleRunTimes !== null && cSMAddProtectionPolicyRequest.properties.backupSchedule.scheduleRunTimes !== undefined) {
          var scheduleRunTimesArray = [];
          for (var loweredIndex2 = 0; loweredIndex2 < cSMAddProtectionPolicyRequest.properties.backupSchedule.scheduleRunTimes.length; loweredIndex2 = loweredIndex2 + 1) {
            var scheduleRunTimesItem = cSMAddProtectionPolicyRequest.properties.backupSchedule.scheduleRunTimes[loweredIndex2];
            scheduleRunTimesArray.push(scheduleRunTimesItem);
          }
          backupScheduleValue['scheduleRunTimes'] = scheduleRunTimesArray;
        }
      }
      
      if (cSMAddProtectionPolicyRequest.properties.retentionPolicy !== null && cSMAddProtectionPolicyRequest.properties.retentionPolicy !== undefined) {
        var retentionPolicyValue = {};
        propertiesValue['RetentionPolicy'] = retentionPolicyValue;
        
        if (cSMAddProtectionPolicyRequest.properties.retentionPolicy.retentionType !== null && cSMAddProtectionPolicyRequest.properties.retentionPolicy.retentionType !== undefined) {
          retentionPolicyValue['retentionType'] = cSMAddProtectionPolicyRequest.properties.retentionPolicy.retentionType !== null && cSMAddProtectionPolicyRequest.properties.retentionPolicy.retentionType !== undefined ? cSMAddProtectionPolicyRequest.properties.retentionPolicy.retentionType.toString() : 'Invalid';
        }
        
        if (cSMAddProtectionPolicyRequest.properties.retentionPolicy.retentionDuration !== null && cSMAddProtectionPolicyRequest.properties.retentionPolicy.retentionDuration !== undefined) {
          retentionPolicyValue['retentionDuration'] = cSMAddProtectionPolicyRequest.properties.retentionPolicy.retentionDuration;
        }
      }
      
      if (cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy !== null && cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy !== undefined) {
        var lTRRetentionPolicyValue = {};
        propertiesValue['LTRRetentionPolicy'] = lTRRetentionPolicyValue;
        
        if (cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.dailySchedule !== null && cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.dailySchedule !== undefined) {
          var dailyScheduleValue = {};
          lTRRetentionPolicyValue['DailySchedule'] = dailyScheduleValue;
          
          if (cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.dailySchedule.retentionTimes !== null && cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.dailySchedule.retentionTimes !== undefined) {
            var retentionTimesArray = [];
            for (var loweredIndex3 = 0; loweredIndex3 < cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.dailySchedule.retentionTimes.length; loweredIndex3 = loweredIndex3 + 1) {
              var retentionTimesItem = cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.dailySchedule.retentionTimes[loweredIndex3];
              retentionTimesArray.push(retentionTimesItem);
            }
            dailyScheduleValue['RetentionTimes'] = retentionTimesArray;
          }
          
          if (cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.dailySchedule.cSMRetentionDuration !== null && cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.dailySchedule.cSMRetentionDuration !== undefined) {
            var cSMRetentionDurationValue = {};
            dailyScheduleValue['CSMRetentionDuration'] = cSMRetentionDurationValue;
            
            if (cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.dailySchedule.cSMRetentionDuration.count !== null && cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.dailySchedule.cSMRetentionDuration.count !== undefined) {
              cSMRetentionDurationValue['Count'] = cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.dailySchedule.cSMRetentionDuration.count;
            }
            
            if (cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.dailySchedule.cSMRetentionDuration.durationType !== null && cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.dailySchedule.cSMRetentionDuration.durationType !== undefined) {
              cSMRetentionDurationValue['DurationType'] = cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.dailySchedule.cSMRetentionDuration.durationType !== null && cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.dailySchedule.cSMRetentionDuration.durationType !== undefined ? cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.dailySchedule.cSMRetentionDuration.durationType.toString() : 'Invalid';
            }
          }
        }
        
        if (cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.weeklySchedule !== null && cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.weeklySchedule !== undefined) {
          var weeklyScheduleValue = {};
          lTRRetentionPolicyValue['WeeklySchedule'] = weeklyScheduleValue;
          
          if (cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.weeklySchedule.daysOfTheWeek !== null && cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.weeklySchedule.daysOfTheWeek !== undefined) {
            var daysOfTheWeekArray = [];
            for (var loweredIndex4 = 0; loweredIndex4 < cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.weeklySchedule.daysOfTheWeek.length; loweredIndex4 = loweredIndex4 + 1) {
              var daysOfTheWeekItem = cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.weeklySchedule.daysOfTheWeek[loweredIndex4];
              daysOfTheWeekArray.push(daysOfTheWeekItem !== null && daysOfTheWeekItem !== undefined ? daysOfTheWeekItem.toString() : 'Sunday');
            }
            weeklyScheduleValue['DaysOfTheWeek'] = daysOfTheWeekArray;
          }
          
          if (cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.weeklySchedule.retentionTimes !== null && cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.weeklySchedule.retentionTimes !== undefined) {
            var retentionTimesArray2 = [];
            for (var loweredIndex5 = 0; loweredIndex5 < cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.weeklySchedule.retentionTimes.length; loweredIndex5 = loweredIndex5 + 1) {
              var retentionTimesItem2 = cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.weeklySchedule.retentionTimes[loweredIndex5];
              retentionTimesArray2.push(retentionTimesItem2);
            }
            weeklyScheduleValue['RetentionTimes'] = retentionTimesArray2;
          }
          
          if (cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.weeklySchedule.cSMRetentionDuration !== null && cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.weeklySchedule.cSMRetentionDuration !== undefined) {
            var cSMRetentionDurationValue2 = {};
            weeklyScheduleValue['CSMRetentionDuration'] = cSMRetentionDurationValue2;
            
            if (cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.weeklySchedule.cSMRetentionDuration.count !== null && cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.weeklySchedule.cSMRetentionDuration.count !== undefined) {
              cSMRetentionDurationValue2['Count'] = cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.weeklySchedule.cSMRetentionDuration.count;
            }
            
            if (cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.weeklySchedule.cSMRetentionDuration.durationType !== null && cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.weeklySchedule.cSMRetentionDuration.durationType !== undefined) {
              cSMRetentionDurationValue2['DurationType'] = cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.weeklySchedule.cSMRetentionDuration.durationType !== null && cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.weeklySchedule.cSMRetentionDuration.durationType !== undefined ? cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.weeklySchedule.cSMRetentionDuration.durationType.toString() : 'Invalid';
            }
          }
        }
        
        if (cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.monthlySchedule !== null && cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.monthlySchedule !== undefined) {
          var monthlyScheduleValue = {};
          lTRRetentionPolicyValue['MonthlySchedule'] = monthlyScheduleValue;
          
          if (cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.monthlySchedule.retentionScheduleType !== null && cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.monthlySchedule.retentionScheduleType !== undefined) {
            monthlyScheduleValue['RetentionScheduleType'] = cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.monthlySchedule.retentionScheduleType !== null && cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.monthlySchedule.retentionScheduleType !== undefined ? cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.monthlySchedule.retentionScheduleType.toString() : 'Invalid';
          }
          
          if (cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.monthlySchedule.retentionScheduleDaily !== null && cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.monthlySchedule.retentionScheduleDaily !== undefined) {
            var retentionScheduleDailyValue = {};
            monthlyScheduleValue['RetentionScheduleDaily'] = retentionScheduleDailyValue;
            
            if (cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.monthlySchedule.retentionScheduleDaily.daysOfTheMonth !== null && cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.monthlySchedule.retentionScheduleDaily.daysOfTheMonth !== undefined) {
              var daysOfTheMonthArray = [];
              for (var loweredIndex6 = 0; loweredIndex6 < cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.monthlySchedule.retentionScheduleDaily.daysOfTheMonth.length; loweredIndex6 = loweredIndex6 + 1) {
                var daysOfTheMonthItem = cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.monthlySchedule.retentionScheduleDaily.daysOfTheMonth[loweredIndex6];
                var dayValue = {};
                daysOfTheMonthArray.push(dayValue);
                
                if (daysOfTheMonthItem.date !== null && daysOfTheMonthItem.date !== undefined) {
                  dayValue['Date'] = daysOfTheMonthItem.date;
                }
                
                if (daysOfTheMonthItem.isLast !== null && daysOfTheMonthItem.isLast !== undefined) {
                  dayValue['IsLast'] = daysOfTheMonthItem.isLast;
                }
              }
              retentionScheduleDailyValue['DaysOfTheMonth'] = daysOfTheMonthArray;
            }
          }
          
          if (cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.monthlySchedule.retentionScheduleWeekly !== null && cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.monthlySchedule.retentionScheduleWeekly !== undefined) {
            var retentionScheduleWeeklyValue = {};
            monthlyScheduleValue['RetentionScheduleWeekly'] = retentionScheduleWeeklyValue;
            
            if (cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.monthlySchedule.retentionScheduleWeekly.daysOfTheWeek !== null && cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.monthlySchedule.retentionScheduleWeekly.daysOfTheWeek !== undefined) {
              var daysOfTheWeekArray2 = [];
              for (var loweredIndex7 = 0; loweredIndex7 < cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.monthlySchedule.retentionScheduleWeekly.daysOfTheWeek.length; loweredIndex7 = loweredIndex7 + 1) {
                var daysOfTheWeekItem2 = cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.monthlySchedule.retentionScheduleWeekly.daysOfTheWeek[loweredIndex7];
                daysOfTheWeekArray2.push(daysOfTheWeekItem2 !== null && daysOfTheWeekItem2 !== undefined ? daysOfTheWeekItem2.toString() : 'Sunday');
              }
              retentionScheduleWeeklyValue['DaysOfTheWeek'] = daysOfTheWeekArray2;
            }
            
            if (cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.monthlySchedule.retentionScheduleWeekly.weeksOfTheMonth !== null && cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.monthlySchedule.retentionScheduleWeekly.weeksOfTheMonth !== undefined) {
              var weeksOfTheMonthArray = [];
              for (var loweredIndex8 = 0; loweredIndex8 < cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.monthlySchedule.retentionScheduleWeekly.weeksOfTheMonth.length; loweredIndex8 = loweredIndex8 + 1) {
                var weeksOfTheMonthItem = cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.monthlySchedule.retentionScheduleWeekly.weeksOfTheMonth[loweredIndex8];
                weeksOfTheMonthArray.push(weeksOfTheMonthItem !== null && weeksOfTheMonthItem !== undefined ? weeksOfTheMonthItem.toString() : 'First');
              }
              retentionScheduleWeeklyValue['WeeksOfTheMonth'] = weeksOfTheMonthArray;
            }
          }
          
          if (cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.monthlySchedule.retentionTimes !== null && cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.monthlySchedule.retentionTimes !== undefined) {
            var retentionTimesArray3 = [];
            for (var loweredIndex9 = 0; loweredIndex9 < cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.monthlySchedule.retentionTimes.length; loweredIndex9 = loweredIndex9 + 1) {
              var retentionTimesItem3 = cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.monthlySchedule.retentionTimes[loweredIndex9];
              retentionTimesArray3.push(retentionTimesItem3);
            }
            monthlyScheduleValue['RetentionTimes'] = retentionTimesArray3;
          }
          
          if (cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.monthlySchedule.cSMRetentionDuration !== null && cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.monthlySchedule.cSMRetentionDuration !== undefined) {
            var cSMRetentionDurationValue3 = {};
            monthlyScheduleValue['CSMRetentionDuration'] = cSMRetentionDurationValue3;
            
            if (cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.monthlySchedule.cSMRetentionDuration.count !== null && cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.monthlySchedule.cSMRetentionDuration.count !== undefined) {
              cSMRetentionDurationValue3['Count'] = cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.monthlySchedule.cSMRetentionDuration.count;
            }
            
            if (cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.monthlySchedule.cSMRetentionDuration.durationType !== null && cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.monthlySchedule.cSMRetentionDuration.durationType !== undefined) {
              cSMRetentionDurationValue3['DurationType'] = cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.monthlySchedule.cSMRetentionDuration.durationType !== null && cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.monthlySchedule.cSMRetentionDuration.durationType !== undefined ? cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.monthlySchedule.cSMRetentionDuration.durationType.toString() : 'Invalid';
            }
          }
        }
        
        if (cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule !== null && cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule !== undefined) {
          var yearlyScheduleValue = {};
          lTRRetentionPolicyValue['YearlySchedule'] = yearlyScheduleValue;
          
          if (cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule.retentionScheduleType !== null && cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule.retentionScheduleType !== undefined) {
            yearlyScheduleValue['RetentionScheduleType'] = cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule.retentionScheduleType !== null && cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule.retentionScheduleType !== undefined ? cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule.retentionScheduleType.toString() : 'Invalid';
          }
          
          if (cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule.monthsOfYear !== null && cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule.monthsOfYear !== undefined) {
            var monthsOfYearArray = [];
            for (var loweredIndex10 = 0; loweredIndex10 < cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule.monthsOfYear.length; loweredIndex10 = loweredIndex10 + 1) {
              var monthsOfYearItem = cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule.monthsOfYear[loweredIndex10];
              monthsOfYearArray.push(monthsOfYearItem !== null && monthsOfYearItem !== undefined ? monthsOfYearItem.toString() : 'Invalid');
            }
            yearlyScheduleValue['MonthsOfYear'] = monthsOfYearArray;
          }
          
          if (cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule.retentionScheduleDaily !== null && cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule.retentionScheduleDaily !== undefined) {
            var retentionScheduleDailyValue2 = {};
            yearlyScheduleValue['RetentionScheduleDaily'] = retentionScheduleDailyValue2;
            
            if (cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule.retentionScheduleDaily.daysOfTheMonth !== null && cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule.retentionScheduleDaily.daysOfTheMonth !== undefined) {
              var daysOfTheMonthArray2 = [];
              for (var loweredIndex11 = 0; loweredIndex11 < cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule.retentionScheduleDaily.daysOfTheMonth.length; loweredIndex11 = loweredIndex11 + 1) {
                var daysOfTheMonthItem2 = cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule.retentionScheduleDaily.daysOfTheMonth[loweredIndex11];
                var dayValue2 = {};
                daysOfTheMonthArray2.push(dayValue2);
                
                if (daysOfTheMonthItem2.date !== null && daysOfTheMonthItem2.date !== undefined) {
                  dayValue2['Date'] = daysOfTheMonthItem2.date;
                }
                
                if (daysOfTheMonthItem2.isLast !== null && daysOfTheMonthItem2.isLast !== undefined) {
                  dayValue2['IsLast'] = daysOfTheMonthItem2.isLast;
                }
              }
              retentionScheduleDailyValue2['DaysOfTheMonth'] = daysOfTheMonthArray2;
            }
          }
          
          if (cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule.retentionScheduleWeekly !== null && cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule.retentionScheduleWeekly !== undefined) {
            var retentionScheduleWeeklyValue2 = {};
            yearlyScheduleValue['RetentionScheduleWeekly'] = retentionScheduleWeeklyValue2;
            
            if (cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule.retentionScheduleWeekly.daysOfTheWeek !== null && cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule.retentionScheduleWeekly.daysOfTheWeek !== undefined) {
              var daysOfTheWeekArray3 = [];
              for (var loweredIndex12 = 0; loweredIndex12 < cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule.retentionScheduleWeekly.daysOfTheWeek.length; loweredIndex12 = loweredIndex12 + 1) {
                var daysOfTheWeekItem3 = cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule.retentionScheduleWeekly.daysOfTheWeek[loweredIndex12];
                daysOfTheWeekArray3.push(daysOfTheWeekItem3 !== null && daysOfTheWeekItem3 !== undefined ? daysOfTheWeekItem3.toString() : 'Sunday');
              }
              retentionScheduleWeeklyValue2['DaysOfTheWeek'] = daysOfTheWeekArray3;
            }
            
            if (cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule.retentionScheduleWeekly.weeksOfTheMonth !== null && cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule.retentionScheduleWeekly.weeksOfTheMonth !== undefined) {
              var weeksOfTheMonthArray2 = [];
              for (var loweredIndex13 = 0; loweredIndex13 < cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule.retentionScheduleWeekly.weeksOfTheMonth.length; loweredIndex13 = loweredIndex13 + 1) {
                var weeksOfTheMonthItem2 = cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule.retentionScheduleWeekly.weeksOfTheMonth[loweredIndex13];
                weeksOfTheMonthArray2.push(weeksOfTheMonthItem2 !== null && weeksOfTheMonthItem2 !== undefined ? weeksOfTheMonthItem2.toString() : 'First');
              }
              retentionScheduleWeeklyValue2['WeeksOfTheMonth'] = weeksOfTheMonthArray2;
            }
          }
          
          if (cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule.retentionTimes !== null && cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule.retentionTimes !== undefined) {
            var retentionTimesArray4 = [];
            for (var loweredIndex14 = 0; loweredIndex14 < cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule.retentionTimes.length; loweredIndex14 = loweredIndex14 + 1) {
              var retentionTimesItem4 = cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule.retentionTimes[loweredIndex14];
              retentionTimesArray4.push(retentionTimesItem4);
            }
            yearlyScheduleValue['RetentionTimes'] = retentionTimesArray4;
          }
          
          if (cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule.cSMRetentionDuration !== null && cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule.cSMRetentionDuration !== undefined) {
            var cSMRetentionDurationValue4 = {};
            yearlyScheduleValue['CSMRetentionDuration'] = cSMRetentionDurationValue4;
            
            if (cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule.cSMRetentionDuration.count !== null && cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule.cSMRetentionDuration.count !== undefined) {
              cSMRetentionDurationValue4['Count'] = cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule.cSMRetentionDuration.count;
            }
            
            if (cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule.cSMRetentionDuration.durationType !== null && cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule.cSMRetentionDuration.durationType !== undefined) {
              cSMRetentionDurationValue4['DurationType'] = cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule.cSMRetentionDuration.durationType !== null && cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule.cSMRetentionDuration.durationType !== undefined ? cSMAddProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule.cSMRetentionDuration.durationType.toString() : 'Invalid';
            }
          }
        }
      }
    }
    
    if (cSMAddProtectionPolicyRequest.policyName !== null && cSMAddProtectionPolicyRequest.policyName !== undefined) {
      cSMAddProtectionPolicyRequestValue['PolicyName'] = cSMAddProtectionPolicyRequest.policyName;
    }
    
    requestContent = JSON.stringify(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200 && statusCode !== 202) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      result = {};
      result.statusCode = statusCode;
      
      return callback(null, result);
    });
  };
  
  /**
   * Delete a Protection Policy.
   * 
   * @param {string} resourceGroupName
   * 
   * @param {string} resourceName
   * 
   * @param {string} policyName The protection policy Name to be deleted.
   * 
   * @param {CustomRequestHeaders} [customRequestHeaders] Request header
   * parameters.
   * 
   * @param {string} [customRequestHeaders.clientRequestId] ClientRequestId is
   * a unique ID for every request to Azure Site Recovery. It is useful when
   * diagnosing failures in API calls.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  CSMProtectionPolicyOperations.prototype.deleteMethod = function(resourceGroupName, resourceName, policyName, customRequestHeaders, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (resourceName === null || resourceName === undefined) {
      return callback(new Error('resourceName cannot be null.'));
    }
    if (policyName === null || policyName === undefined) {
      return callback(new Error('policyName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/Subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Backup';
    url2 = url2 + '/';
    url2 = url2 + 'BackupVault';
    url2 = url2 + '/';
    url2 = url2 + encodeURIComponent(resourceName);
    url2 = url2 + '/protectionPolicies/';
    url2 = url2 + encodeURIComponent(policyName);
    var queryParameters = [];
    queryParameters.push('api-version=2014-09-01');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'DELETE';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Accept-Language'] = 'en-us';
    httpRequest.headers['Content-Type'] = 'application/json';
    if (customRequestHeaders.clientRequestId !== null && customRequestHeaders.clientRequestId !== undefined) {
      httpRequest.headers['x-ms-client-request-id'] = customRequestHeaders.clientRequestId;
    }
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 204) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      result = {};
      result.statusCode = statusCode;
      
      return callback(null, result);
    });
  };
  
  /**
   * Get the list of all Protection Policy.
   * 
   * @param {string} resourceGroupName
   * 
   * @param {string} resourceName
   * 
   * @param {CustomRequestHeaders} [customRequestHeaders] Request header
   * parameters.
   * 
   * @param {string} [customRequestHeaders.clientRequestId] ClientRequestId is
   * a unique ID for every request to Azure Site Recovery. It is useful when
   * diagnosing failures in API calls.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  CSMProtectionPolicyOperations.prototype.list = function(resourceGroupName, resourceName, customRequestHeaders, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (resourceName === null || resourceName === undefined) {
      return callback(new Error('resourceName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/Subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId.toString());
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Backup';
    url2 = url2 + '/';
    url2 = url2 + 'BackupVault';
    url2 = url2 + '/';
    url2 = url2 + encodeURIComponent(resourceName);
    url2 = url2 + '/protectionPolicies';
    var queryParameters = [];
    queryParameters.push('api-version=2014-09-01');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Accept-Language'] = 'en-us';
    httpRequest.headers['Content-Type'] = 'application/json';
    if (customRequestHeaders.clientRequestId !== null && customRequestHeaders.clientRequestId !== undefined) {
      httpRequest.headers['x-ms-client-request-id'] = customRequestHeaders.clientRequestId;
    }
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var cSMProtectionPolicyListResponseInstance = { value: [] };
          result.cSMProtectionPolicyListResponse = cSMProtectionPolicyListResponseInstance;
          
          var valueArray = responseDoc['value'];
          if (valueArray !== null && valueArray !== undefined) {
            for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var valueValue = valueArray[loweredIndex1];
              var cSMProtectionPolicyResponseInstance = {};
              cSMProtectionPolicyListResponseInstance.value.push(cSMProtectionPolicyResponseInstance);
              
              var propertiesValue = valueValue['properties'];
              if (propertiesValue !== null && propertiesValue !== undefined) {
                var propertiesInstance = {};
                cSMProtectionPolicyResponseInstance.properties = propertiesInstance;
                
                var workloadTypeValue = propertiesValue['workloadType'];
                if (workloadTypeValue !== null && workloadTypeValue !== undefined) {
                  var workloadTypeInstance = workloadTypeValue;
                  propertiesInstance.workloadType = workloadTypeInstance;
                }
                
                var policyNameValue = propertiesValue['policyName'];
                if (policyNameValue !== null && policyNameValue !== undefined) {
                  var policyNameInstance = policyNameValue;
                  propertiesInstance.policyName = policyNameInstance;
                }
                
                var backupScheduleValue = propertiesValue['backupSchedule'];
                if (backupScheduleValue !== null && backupScheduleValue !== undefined) {
                  var backupScheduleInstance = { scheduleRunDays: [], scheduleRunTimes: [] };
                  propertiesInstance.backupSchedule = backupScheduleInstance;
                  
                  var backupTypeValue = backupScheduleValue['backupType'];
                  if (backupTypeValue !== null && backupTypeValue !== undefined) {
                    var backupTypeInstance = backupTypeValue;
                    backupScheduleInstance.backupType = backupTypeInstance;
                  }
                  
                  var scheduleRunValue = backupScheduleValue['scheduleRun'];
                  if (scheduleRunValue !== null && scheduleRunValue !== undefined) {
                    var scheduleRunInstance = scheduleRunValue;
                    backupScheduleInstance.scheduleRun = scheduleRunInstance;
                  }
                  
                  var scheduleRunDaysArray = backupScheduleValue['scheduleRunDays'];
                  if (scheduleRunDaysArray !== null && scheduleRunDaysArray !== undefined) {
                    for (var loweredIndex2 = 0; loweredIndex2 < scheduleRunDaysArray.length; loweredIndex2 = loweredIndex2 + 1) {
                      var scheduleRunDaysValue = scheduleRunDaysArray[loweredIndex2];
                      backupScheduleInstance.scheduleRunDays.push(scheduleRunDaysValue);
                    }
                  }
                  
                  var scheduleRunTimesArray = backupScheduleValue['scheduleRunTimes'];
                  if (scheduleRunTimesArray !== null && scheduleRunTimesArray !== undefined) {
                    for (var loweredIndex3 = 0; loweredIndex3 < scheduleRunTimesArray.length; loweredIndex3 = loweredIndex3 + 1) {
                      var scheduleRunTimesValue = scheduleRunTimesArray[loweredIndex3];
                      backupScheduleInstance.scheduleRunTimes.push(scheduleRunTimesValue);
                    }
                  }
                }
                
                var retentionPolicyValue = propertiesValue['retentionPolicy'];
                if (retentionPolicyValue !== null && retentionPolicyValue !== undefined) {
                  var retentionPolicyInstance = {};
                  propertiesInstance.retentionPolicy = retentionPolicyInstance;
                  
                  var retentionTypeValue = retentionPolicyValue['retentionType'];
                  if (retentionTypeValue !== null && retentionTypeValue !== undefined) {
                    var retentionTypeInstance = retentionTypeValue;
                    retentionPolicyInstance.retentionType = retentionTypeInstance;
                  }
                  
                  var retentionDurationValue = retentionPolicyValue['retentionDuration'];
                  if (retentionDurationValue !== null && retentionDurationValue !== undefined) {
                    var retentionDurationInstance = retentionDurationValue;
                    retentionPolicyInstance.retentionDuration = retentionDurationInstance;
                  }
                }
                
                var ltrRetentionPolicyValue = propertiesValue['ltrRetentionPolicy'];
                if (ltrRetentionPolicyValue !== null && ltrRetentionPolicyValue !== undefined) {
                  var ltrRetentionPolicyInstance = {};
                  propertiesInstance.ltrRetentionPolicy = ltrRetentionPolicyInstance;
                  
                  var dailyScheduleValue = ltrRetentionPolicyValue['DailySchedule'];
                  if (dailyScheduleValue !== null && dailyScheduleValue !== undefined) {
                    var dailyScheduleInstance = { retentionTimes: [] };
                    ltrRetentionPolicyInstance.dailySchedule = dailyScheduleInstance;
                    
                    var retentionTimesArray = dailyScheduleValue['RetentionTimes'];
                    if (retentionTimesArray !== null && retentionTimesArray !== undefined) {
                      for (var loweredIndex4 = 0; loweredIndex4 < retentionTimesArray.length; loweredIndex4 = loweredIndex4 + 1) {
                        var retentionTimesValue = retentionTimesArray[loweredIndex4];
                        dailyScheduleInstance.retentionTimes.push(retentionTimesValue);
                      }
                    }
                    
                    var cSMRetentionDurationValue = dailyScheduleValue['CSMRetentionDuration'];
                    if (cSMRetentionDurationValue !== null && cSMRetentionDurationValue !== undefined) {
                      var cSMRetentionDurationInstance = {};
                      dailyScheduleInstance.cSMRetentionDuration = cSMRetentionDurationInstance;
                      
                      var countValue = cSMRetentionDurationValue['Count'];
                      if (countValue !== null && countValue !== undefined) {
                        var countInstance = countValue;
                        cSMRetentionDurationInstance.count = countInstance;
                      }
                      
                      var durationTypeValue = cSMRetentionDurationValue['DurationType'];
                      if (durationTypeValue !== null && durationTypeValue !== undefined) {
                        var durationTypeInstance = durationTypeValue;
                        cSMRetentionDurationInstance.durationType = durationTypeInstance;
                      }
                    }
                  }
                  
                  var weeklyScheduleValue = ltrRetentionPolicyValue['WeeklySchedule'];
                  if (weeklyScheduleValue !== null && weeklyScheduleValue !== undefined) {
                    var weeklyScheduleInstance = { daysOfTheWeek: [], retentionTimes: [] };
                    ltrRetentionPolicyInstance.weeklySchedule = weeklyScheduleInstance;
                    
                    var daysOfTheWeekArray = weeklyScheduleValue['DaysOfTheWeek'];
                    if (daysOfTheWeekArray !== null && daysOfTheWeekArray !== undefined) {
                      for (var loweredIndex5 = 0; loweredIndex5 < daysOfTheWeekArray.length; loweredIndex5 = loweredIndex5 + 1) {
                        var daysOfTheWeekValue = daysOfTheWeekArray[loweredIndex5];
                        weeklyScheduleInstance.daysOfTheWeek.push(daysOfTheWeekValue);
                      }
                    }
                    
                    var retentionTimesArray2 = weeklyScheduleValue['RetentionTimes'];
                    if (retentionTimesArray2 !== null && retentionTimesArray2 !== undefined) {
                      for (var loweredIndex6 = 0; loweredIndex6 < retentionTimesArray2.length; loweredIndex6 = loweredIndex6 + 1) {
                        var retentionTimesValue2 = retentionTimesArray2[loweredIndex6];
                        weeklyScheduleInstance.retentionTimes.push(retentionTimesValue2);
                      }
                    }
                    
                    var cSMRetentionDurationValue2 = weeklyScheduleValue['CSMRetentionDuration'];
                    if (cSMRetentionDurationValue2 !== null && cSMRetentionDurationValue2 !== undefined) {
                      var cSMRetentionDurationInstance2 = {};
                      weeklyScheduleInstance.cSMRetentionDuration = cSMRetentionDurationInstance2;
                      
                      var countValue2 = cSMRetentionDurationValue2['Count'];
                      if (countValue2 !== null && countValue2 !== undefined) {
                        var countInstance2 = countValue2;
                        cSMRetentionDurationInstance2.count = countInstance2;
                      }
                      
                      var durationTypeValue2 = cSMRetentionDurationValue2['DurationType'];
                      if (durationTypeValue2 !== null && durationTypeValue2 !== undefined) {
                        var durationTypeInstance2 = durationTypeValue2;
                        cSMRetentionDurationInstance2.durationType = durationTypeInstance2;
                      }
                    }
                  }
                  
                  var monthlyScheduleValue = ltrRetentionPolicyValue['MonthlySchedule'];
                  if (monthlyScheduleValue !== null && monthlyScheduleValue !== undefined) {
                    var monthlyScheduleInstance = { retentionTimes: [] };
                    ltrRetentionPolicyInstance.monthlySchedule = monthlyScheduleInstance;
                    
                    var retentionScheduleTypeValue = monthlyScheduleValue['RetentionScheduleType'];
                    if (retentionScheduleTypeValue !== null && retentionScheduleTypeValue !== undefined) {
                      var retentionScheduleTypeInstance = retentionScheduleTypeValue;
                      monthlyScheduleInstance.retentionScheduleType = retentionScheduleTypeInstance;
                    }
                    
                    var retentionScheduleDailyValue = monthlyScheduleValue['RetentionScheduleDaily'];
                    if (retentionScheduleDailyValue !== null && retentionScheduleDailyValue !== undefined) {
                      var retentionScheduleDailyInstance = { daysOfTheMonth: [] };
                      monthlyScheduleInstance.retentionScheduleDaily = retentionScheduleDailyInstance;
                      
                      var daysOfTheMonthArray = retentionScheduleDailyValue['DaysOfTheMonth'];
                      if (daysOfTheMonthArray !== null && daysOfTheMonthArray !== undefined) {
                        for (var loweredIndex7 = 0; loweredIndex7 < daysOfTheMonthArray.length; loweredIndex7 = loweredIndex7 + 1) {
                          var daysOfTheMonthValue = daysOfTheMonthArray[loweredIndex7];
                          var dayInstance = {};
                          retentionScheduleDailyInstance.daysOfTheMonth.push(dayInstance);
                          
                          var dateValue = daysOfTheMonthValue['Date'];
                          if (dateValue !== null && dateValue !== undefined) {
                            var dateInstance = dateValue;
                            dayInstance.date = dateInstance;
                          }
                          
                          var isLastValue = daysOfTheMonthValue['IsLast'];
                          if (isLastValue !== null && isLastValue !== undefined) {
                            var isLastInstance = isLastValue;
                            dayInstance.isLast = isLastInstance;
                          }
                        }
                      }
                    }
                    
                    var retentionScheduleWeeklyValue = monthlyScheduleValue['RetentionScheduleWeekly'];
                    if (retentionScheduleWeeklyValue !== null && retentionScheduleWeeklyValue !== undefined) {
                      var retentionScheduleWeeklyInstance = { daysOfTheWeek: [], weeksOfTheMonth: [] };
                      monthlyScheduleInstance.retentionScheduleWeekly = retentionScheduleWeeklyInstance;
                      
                      var daysOfTheWeekArray2 = retentionScheduleWeeklyValue['DaysOfTheWeek'];
                      if (daysOfTheWeekArray2 !== null && daysOfTheWeekArray2 !== undefined) {
                        for (var loweredIndex8 = 0; loweredIndex8 < daysOfTheWeekArray2.length; loweredIndex8 = loweredIndex8 + 1) {
                          var daysOfTheWeekValue2 = daysOfTheWeekArray2[loweredIndex8];
                          retentionScheduleWeeklyInstance.daysOfTheWeek.push(daysOfTheWeekValue2);
                        }
                      }
                      
                      var weeksOfTheMonthArray = retentionScheduleWeeklyValue['WeeksOfTheMonth'];
                      if (weeksOfTheMonthArray !== null && weeksOfTheMonthArray !== undefined) {
                        for (var loweredIndex9 = 0; loweredIndex9 < weeksOfTheMonthArray.length; loweredIndex9 = loweredIndex9 + 1) {
                          var weeksOfTheMonthValue = weeksOfTheMonthArray[loweredIndex9];
                          retentionScheduleWeeklyInstance.weeksOfTheMonth.push(weeksOfTheMonthValue);
                        }
                      }
                    }
                    
                    var retentionTimesArray3 = monthlyScheduleValue['RetentionTimes'];
                    if (retentionTimesArray3 !== null && retentionTimesArray3 !== undefined) {
                      for (var loweredIndex10 = 0; loweredIndex10 < retentionTimesArray3.length; loweredIndex10 = loweredIndex10 + 1) {
                        var retentionTimesValue3 = retentionTimesArray3[loweredIndex10];
                        monthlyScheduleInstance.retentionTimes.push(retentionTimesValue3);
                      }
                    }
                    
                    var cSMRetentionDurationValue3 = monthlyScheduleValue['CSMRetentionDuration'];
                    if (cSMRetentionDurationValue3 !== null && cSMRetentionDurationValue3 !== undefined) {
                      var cSMRetentionDurationInstance3 = {};
                      monthlyScheduleInstance.cSMRetentionDuration = cSMRetentionDurationInstance3;
                      
                      var countValue3 = cSMRetentionDurationValue3['Count'];
                      if (countValue3 !== null && countValue3 !== undefined) {
                        var countInstance3 = countValue3;
                        cSMRetentionDurationInstance3.count = countInstance3;
                      }
                      
                      var durationTypeValue3 = cSMRetentionDurationValue3['DurationType'];
                      if (durationTypeValue3 !== null && durationTypeValue3 !== undefined) {
                        var durationTypeInstance3 = durationTypeValue3;
                        cSMRetentionDurationInstance3.durationType = durationTypeInstance3;
                      }
                    }
                  }
                  
                  var yearlyScheduleValue = ltrRetentionPolicyValue['YearlySchedule'];
                  if (yearlyScheduleValue !== null && yearlyScheduleValue !== undefined) {
                    var yearlyScheduleInstance = { monthsOfYear: [], retentionTimes: [] };
                    ltrRetentionPolicyInstance.yearlySchedule = yearlyScheduleInstance;
                    
                    var retentionScheduleTypeValue2 = yearlyScheduleValue['RetentionScheduleType'];
                    if (retentionScheduleTypeValue2 !== null && retentionScheduleTypeValue2 !== undefined) {
                      var retentionScheduleTypeInstance2 = retentionScheduleTypeValue2;
                      yearlyScheduleInstance.retentionScheduleType = retentionScheduleTypeInstance2;
                    }
                    
                    var monthsOfYearArray = yearlyScheduleValue['MonthsOfYear'];
                    if (monthsOfYearArray !== null && monthsOfYearArray !== undefined) {
                      for (var loweredIndex11 = 0; loweredIndex11 < monthsOfYearArray.length; loweredIndex11 = loweredIndex11 + 1) {
                        var monthsOfYearValue = monthsOfYearArray[loweredIndex11];
                        yearlyScheduleInstance.monthsOfYear.push(monthsOfYearValue);
                      }
                    }
                    
                    var retentionScheduleDailyValue2 = yearlyScheduleValue['RetentionScheduleDaily'];
                    if (retentionScheduleDailyValue2 !== null && retentionScheduleDailyValue2 !== undefined) {
                      var retentionScheduleDailyInstance2 = { daysOfTheMonth: [] };
                      yearlyScheduleInstance.retentionScheduleDaily = retentionScheduleDailyInstance2;
                      
                      var daysOfTheMonthArray2 = retentionScheduleDailyValue2['DaysOfTheMonth'];
                      if (daysOfTheMonthArray2 !== null && daysOfTheMonthArray2 !== undefined) {
                        for (var loweredIndex12 = 0; loweredIndex12 < daysOfTheMonthArray2.length; loweredIndex12 = loweredIndex12 + 1) {
                          var daysOfTheMonthValue2 = daysOfTheMonthArray2[loweredIndex12];
                          var dayInstance2 = {};
                          retentionScheduleDailyInstance2.daysOfTheMonth.push(dayInstance2);
                          
                          var dateValue2 = daysOfTheMonthValue2['Date'];
                          if (dateValue2 !== null && dateValue2 !== undefined) {
                            var dateInstance2 = dateValue2;
                            dayInstance2.date = dateInstance2;
                          }
                          
                          var isLastValue2 = daysOfTheMonthValue2['IsLast'];
                          if (isLastValue2 !== null && isLastValue2 !== undefined) {
                            var isLastInstance2 = isLastValue2;
                            dayInstance2.isLast = isLastInstance2;
                          }
                        }
                      }
                    }
                    
                    var retentionScheduleWeeklyValue2 = yearlyScheduleValue['RetentionScheduleWeekly'];
                    if (retentionScheduleWeeklyValue2 !== null && retentionScheduleWeeklyValue2 !== undefined) {
                      var retentionScheduleWeeklyInstance2 = { daysOfTheWeek: [], weeksOfTheMonth: [] };
                      yearlyScheduleInstance.retentionScheduleWeekly = retentionScheduleWeeklyInstance2;
                      
                      var daysOfTheWeekArray3 = retentionScheduleWeeklyValue2['DaysOfTheWeek'];
                      if (daysOfTheWeekArray3 !== null && daysOfTheWeekArray3 !== undefined) {
                        for (var loweredIndex13 = 0; loweredIndex13 < daysOfTheWeekArray3.length; loweredIndex13 = loweredIndex13 + 1) {
                          var daysOfTheWeekValue3 = daysOfTheWeekArray3[loweredIndex13];
                          retentionScheduleWeeklyInstance2.daysOfTheWeek.push(daysOfTheWeekValue3);
                        }
                      }
                      
                      var weeksOfTheMonthArray2 = retentionScheduleWeeklyValue2['WeeksOfTheMonth'];
                      if (weeksOfTheMonthArray2 !== null && weeksOfTheMonthArray2 !== undefined) {
                        for (var loweredIndex14 = 0; loweredIndex14 < weeksOfTheMonthArray2.length; loweredIndex14 = loweredIndex14 + 1) {
                          var weeksOfTheMonthValue2 = weeksOfTheMonthArray2[loweredIndex14];
                          retentionScheduleWeeklyInstance2.weeksOfTheMonth.push(weeksOfTheMonthValue2);
                        }
                      }
                    }
                    
                    var retentionTimesArray4 = yearlyScheduleValue['RetentionTimes'];
                    if (retentionTimesArray4 !== null && retentionTimesArray4 !== undefined) {
                      for (var loweredIndex15 = 0; loweredIndex15 < retentionTimesArray4.length; loweredIndex15 = loweredIndex15 + 1) {
                        var retentionTimesValue4 = retentionTimesArray4[loweredIndex15];
                        yearlyScheduleInstance.retentionTimes.push(retentionTimesValue4);
                      }
                    }
                    
                    var cSMRetentionDurationValue4 = yearlyScheduleValue['CSMRetentionDuration'];
                    if (cSMRetentionDurationValue4 !== null && cSMRetentionDurationValue4 !== undefined) {
                      var cSMRetentionDurationInstance4 = {};
                      yearlyScheduleInstance.cSMRetentionDuration = cSMRetentionDurationInstance4;
                      
                      var countValue4 = cSMRetentionDurationValue4['Count'];
                      if (countValue4 !== null && countValue4 !== undefined) {
                        var countInstance4 = countValue4;
                        cSMRetentionDurationInstance4.count = countInstance4;
                      }
                      
                      var durationTypeValue4 = cSMRetentionDurationValue4['DurationType'];
                      if (durationTypeValue4 !== null && durationTypeValue4 !== undefined) {
                        var durationTypeInstance4 = durationTypeValue4;
                        cSMRetentionDurationInstance4.durationType = durationTypeInstance4;
                      }
                    }
                  }
                }
              }
              
              var idValue = valueValue['id'];
              if (idValue !== null && idValue !== undefined) {
                var idInstance = idValue;
                cSMProtectionPolicyResponseInstance.id = idInstance;
              }
              
              var nameValue = valueValue['name'];
              if (nameValue !== null && nameValue !== undefined) {
                var nameInstance = nameValue;
                cSMProtectionPolicyResponseInstance.name = nameInstance;
              }
              
              var typeValue = valueValue['type'];
              if (typeValue !== null && typeValue !== undefined) {
                var typeInstance = typeValue;
                cSMProtectionPolicyResponseInstance.type = typeInstance;
              }
            }
          }
          
          var nextLinkValue = responseDoc['nextLink'];
          if (nextLinkValue !== null && nextLinkValue !== undefined) {
            var nextLinkInstance = nextLinkValue;
            cSMProtectionPolicyListResponseInstance.nextLink = nextLinkInstance;
          }
          
          var idValue2 = responseDoc['id'];
          if (idValue2 !== null && idValue2 !== undefined) {
            var idInstance2 = idValue2;
            cSMProtectionPolicyListResponseInstance.id = idInstance2;
          }
          
          var nameValue2 = responseDoc['name'];
          if (nameValue2 !== null && nameValue2 !== undefined) {
            var nameInstance2 = nameValue2;
            cSMProtectionPolicyListResponseInstance.name = nameInstance2;
          }
          
          var typeValue2 = responseDoc['type'];
          if (typeValue2 !== null && typeValue2 !== undefined) {
            var typeInstance2 = typeValue2;
            cSMProtectionPolicyListResponseInstance.type = typeInstance2;
          }
        }
        
      }
      result.statusCode = statusCode;
      
      return callback(null, result);
    });
  };
  
  /**
   * Update Protection Policy.
   * 
   * @param {string} resourceGroupName
   * 
   * @param {string} resourceName
   * 
   * @param {string} policyName The protection policy Name to be updated.
   * 
   * @param {CSMUpdateProtectionPolicyRequest} cSMUpdateProtectionPolicyRequest
   * The protection policy creation request.
   * 
   * @param {CSMUpdateProtectionPolicyRequestProperties}
   * cSMUpdateProtectionPolicyRequest.properties CSMUpdateProtectionPolicy
   * Request Properties
   * 
   * @param {string} [cSMUpdateProtectionPolicyRequest.properties.policyName]
   * Name of ProtectionPolicy.
   * 
   * @param {CSMBackupSchedule}
   * [cSMUpdateProtectionPolicyRequest.properties.backupSchedule] Backup
   * Schedule of ProtectionPolicy.
   * 
   * @param {string}
   * [cSMUpdateProtectionPolicyRequest.properties.backupSchedule.backupType]
   * BackupType of ProtectionPolicy.
   * 
   * @param {string}
   * [cSMUpdateProtectionPolicyRequest.properties.backupSchedule.scheduleRun]
   * ScheduleRun of ProtectionPolicy.
   * 
   * @param {array}
   * [cSMUpdateProtectionPolicyRequest.properties.backupSchedule.scheduleRunDays]
   * ScheduleRunDays of ProtectionPolicy.
   * 
   * @param {array}
   * [cSMUpdateProtectionPolicyRequest.properties.backupSchedule.scheduleRunTimes]
   * ScheduleRunTimes of ProtectionPolicy.
   * 
   * @param {CSMRetentionPolicy}
   * [cSMUpdateProtectionPolicyRequest.properties.retentionPolicy] Retention
   * Policy
   * 
   * @param {RetentionDurationType}
   * [cSMUpdateProtectionPolicyRequest.properties.retentionPolicy.retentionType]
   * Retention Type.
   * 
   * @param {number}
   * [cSMUpdateProtectionPolicyRequest.properties.retentionPolicy.retentionDuration]
   * Retention Duration.
   * 
   * @param {CSMLongTermRetentionPolicy}
   * [cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy] Long
   * Term Retention Policy.
   * 
   * @param {CSMDailyRetentionSchedule}
   * [cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.dailySchedule]
   * DailyRetention Schedule of ProtectionPolicy.
   * 
   * @param {array}
   * [cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.dailySchedule.retentionTimes]
   * Retention times of retention policy.
   * 
   * @param {CSMRetentionDuration}
   * [cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.dailySchedule.cSMRetentionDuration]
   * Retention duration of retention Policy.
   * 
   * @param {number}
   * [cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.dailySchedule.cSMRetentionDuration.count]
   * Count.
   * 
   * @param {RetentionDurationType}
   * [cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.dailySchedule.cSMRetentionDuration.durationType]
   * Retention duration type of retention policy.
   * 
   * @param {CSMWeeklyRetentionSchedule}
   * [cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.weeklySchedule]
   * WeeklyRetention Schedule of ProtectionPolicy.
   * 
   * @param {array}
   * [cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.weeklySchedule.daysOfTheWeek]
   * List of Days of Week for Weekly Retention policy.
   * 
   * @param {array}
   * [cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.weeklySchedule.retentionTimes]
   * Retention times of retention policy.
   * 
   * @param {CSMRetentionDuration}
   * [cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.weeklySchedule.cSMRetentionDuration]
   * Retention duration of retention Policy.
   * 
   * @param {number}
   * [cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.weeklySchedule.cSMRetentionDuration.count]
   * Count.
   * 
   * @param {RetentionDurationType}
   * [cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.weeklySchedule.cSMRetentionDuration.durationType]
   * Retention duration type of retention policy.
   * 
   * @param {CSMMonthlyRetentionSchedule}
   * [cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.monthlySchedule]
   * MonthlyRetention Schedule of ProtectionPolicy.
   * 
   * @param {RetentionScheduleFormat}
   * [cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.monthlySchedule.retentionScheduleType]
   * Retention ScheduleType for monthly retention policy.
   * 
   * @param {CSMDailyRetentionFormat}
   * [cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.monthlySchedule.retentionScheduleDaily]
   * Daily Retention Format for monthly retention policy.
   * 
   * @param {array}
   * [cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.monthlySchedule.retentionScheduleDaily.daysOfTheMonth]
   * List of Days of month.
   * 
   * @param {CSMWeeklyRetentionFormat}
   * [cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.monthlySchedule.retentionScheduleWeekly]
   * Weekly Retention format for monthly retention policy.
   * 
   * @param {array}
   * [cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.monthlySchedule.retentionScheduleWeekly.daysOfTheWeek]
   * List of days of week.
   * 
   * @param {array}
   * [cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.monthlySchedule.retentionScheduleWeekly.weeksOfTheMonth]
   * List of weeks of month.
   * 
   * @param {array}
   * [cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.monthlySchedule.retentionTimes]
   * Retention times of retention policy.
   * 
   * @param {CSMRetentionDuration}
   * [cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.monthlySchedule.cSMRetentionDuration]
   * Retention duration of retention Policy.
   * 
   * @param {number}
   * [cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.monthlySchedule.cSMRetentionDuration.count]
   * Count.
   * 
   * @param {RetentionDurationType}
   * [cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.monthlySchedule.cSMRetentionDuration.durationType]
   * Retention duration type of retention policy.
   * 
   * @param {CSMYearlyRetentionSchedule}
   * [cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule]
   * YearlyRetention Schedule of ProtectionPolicy.
   * 
   * @param {RetentionScheduleFormat}
   * [cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule.retentionScheduleType]
   * Retention ScheduleType for monthly retention policy.
   * 
   * @param {array}
   * [cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule.monthsOfYear]
   * List of months of year of yearly retention policy.
   * 
   * @param {CSMDailyRetentionFormat}
   * [cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule.retentionScheduleDaily]
   * Daily Retention Format for monthly retention policy.
   * 
   * @param {array}
   * [cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule.retentionScheduleDaily.daysOfTheMonth]
   * List of Days of month.
   * 
   * @param {CSMWeeklyRetentionFormat}
   * [cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule.retentionScheduleWeekly]
   * Weekly Retention format for monthly retention policy.
   * 
   * @param {array}
   * [cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule.retentionScheduleWeekly.daysOfTheWeek]
   * List of days of week.
   * 
   * @param {array}
   * [cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule.retentionScheduleWeekly.weeksOfTheMonth]
   * List of weeks of month.
   * 
   * @param {array}
   * [cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule.retentionTimes]
   * Retention times of retention policy.
   * 
   * @param {CSMRetentionDuration}
   * [cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule.cSMRetentionDuration]
   * Retention duration of retention Policy.
   * 
   * @param {number}
   * [cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule.cSMRetentionDuration.count]
   * Count.
   * 
   * @param {RetentionDurationType}
   * [cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule.cSMRetentionDuration.durationType]
   * Retention duration type of retention policy.
   * 
   * @param {CustomRequestHeaders} [customRequestHeaders] Request header
   * parameters.
   * 
   * @param {string} [customRequestHeaders.clientRequestId] ClientRequestId is
   * a unique ID for every request to Azure Site Recovery. It is useful when
   * diagnosing failures in API calls.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  CSMProtectionPolicyOperations.prototype.update = function(resourceGroupName, resourceName, policyName, cSMUpdateProtectionPolicyRequest, customRequestHeaders, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (resourceName === null || resourceName === undefined) {
      return callback(new Error('resourceName cannot be null.'));
    }
    if (policyName === null || policyName === undefined) {
      return callback(new Error('policyName cannot be null.'));
    }
    if (cSMUpdateProtectionPolicyRequest === null || cSMUpdateProtectionPolicyRequest === undefined) {
      return callback(new Error('cSMUpdateProtectionPolicyRequest cannot be null.'));
    }
    if (cSMUpdateProtectionPolicyRequest.properties === null || cSMUpdateProtectionPolicyRequest.properties === undefined) {
      return callback(new Error('cSMUpdateProtectionPolicyRequest.properties cannot be null.'));
    }
    if (cSMUpdateProtectionPolicyRequest.properties.backupSchedule !== null && cSMUpdateProtectionPolicyRequest.properties.backupSchedule !== undefined) {
      if (cSMUpdateProtectionPolicyRequest.properties.backupSchedule.backupType === null || cSMUpdateProtectionPolicyRequest.properties.backupSchedule.backupType === undefined) {
        return callback(new Error('cSMUpdateProtectionPolicyRequest.properties.backupSchedule.backupType cannot be null.'));
      }
      if (cSMUpdateProtectionPolicyRequest.properties.backupSchedule.scheduleRun === null || cSMUpdateProtectionPolicyRequest.properties.backupSchedule.scheduleRun === undefined) {
        return callback(new Error('cSMUpdateProtectionPolicyRequest.properties.backupSchedule.scheduleRun cannot be null.'));
      }
      if (cSMUpdateProtectionPolicyRequest.properties.backupSchedule.scheduleRunTimes === null || cSMUpdateProtectionPolicyRequest.properties.backupSchedule.scheduleRunTimes === undefined) {
        return callback(new Error('cSMUpdateProtectionPolicyRequest.properties.backupSchedule.scheduleRunTimes cannot be null.'));
      }
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/Subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Backup';
    url2 = url2 + '/';
    url2 = url2 + 'BackupVault';
    url2 = url2 + '/';
    url2 = url2 + encodeURIComponent(resourceName);
    url2 = url2 + '/protectionPolicies/';
    url2 = url2 + encodeURIComponent(policyName);
    var queryParameters = [];
    queryParameters.push('api-version=2014-09-01');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PATCH';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Accept-Language'] = 'en-us';
    httpRequest.headers['Content-Type'] = 'application/json';
    if (customRequestHeaders.clientRequestId !== null && customRequestHeaders.clientRequestId !== undefined) {
      httpRequest.headers['x-ms-client-request-id'] = customRequestHeaders.clientRequestId;
    }
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = null;
    
    var cSMUpdateProtectionPolicyRequestValue = {};
    requestDoc = cSMUpdateProtectionPolicyRequestValue;
    
    var propertiesValue = {};
    cSMUpdateProtectionPolicyRequestValue['properties'] = propertiesValue;
    
    if (cSMUpdateProtectionPolicyRequest.properties.policyName !== null && cSMUpdateProtectionPolicyRequest.properties.policyName !== undefined) {
      propertiesValue['policyName'] = cSMUpdateProtectionPolicyRequest.properties.policyName;
    }
    
    if (cSMUpdateProtectionPolicyRequest.properties.backupSchedule !== null && cSMUpdateProtectionPolicyRequest.properties.backupSchedule !== undefined) {
      var backupScheduleValue = {};
      propertiesValue['backupSchedule'] = backupScheduleValue;
      
      backupScheduleValue['backupType'] = cSMUpdateProtectionPolicyRequest.properties.backupSchedule.backupType;
      
      backupScheduleValue['scheduleRun'] = cSMUpdateProtectionPolicyRequest.properties.backupSchedule.scheduleRun;
      
      if (cSMUpdateProtectionPolicyRequest.properties.backupSchedule.scheduleRunDays !== null && cSMUpdateProtectionPolicyRequest.properties.backupSchedule.scheduleRunDays !== undefined) {
        var scheduleRunDaysArray = [];
        for (var loweredIndex1 = 0; loweredIndex1 < cSMUpdateProtectionPolicyRequest.properties.backupSchedule.scheduleRunDays.length; loweredIndex1 = loweredIndex1 + 1) {
          var scheduleRunDaysItem = cSMUpdateProtectionPolicyRequest.properties.backupSchedule.scheduleRunDays[loweredIndex1];
          scheduleRunDaysArray.push(scheduleRunDaysItem !== null && scheduleRunDaysItem !== undefined ? scheduleRunDaysItem.toString() : 'Sunday');
        }
        backupScheduleValue['scheduleRunDays'] = scheduleRunDaysArray;
      }
      
      if (cSMUpdateProtectionPolicyRequest.properties.backupSchedule.scheduleRunTimes !== null && cSMUpdateProtectionPolicyRequest.properties.backupSchedule.scheduleRunTimes !== undefined) {
        var scheduleRunTimesArray = [];
        for (var loweredIndex2 = 0; loweredIndex2 < cSMUpdateProtectionPolicyRequest.properties.backupSchedule.scheduleRunTimes.length; loweredIndex2 = loweredIndex2 + 1) {
          var scheduleRunTimesItem = cSMUpdateProtectionPolicyRequest.properties.backupSchedule.scheduleRunTimes[loweredIndex2];
          scheduleRunTimesArray.push(scheduleRunTimesItem);
        }
        backupScheduleValue['scheduleRunTimes'] = scheduleRunTimesArray;
      }
    }
    
    if (cSMUpdateProtectionPolicyRequest.properties.retentionPolicy !== null && cSMUpdateProtectionPolicyRequest.properties.retentionPolicy !== undefined) {
      var retentionPolicyValue = {};
      propertiesValue['retentionPolicy'] = retentionPolicyValue;
      
      if (cSMUpdateProtectionPolicyRequest.properties.retentionPolicy.retentionType !== null && cSMUpdateProtectionPolicyRequest.properties.retentionPolicy.retentionType !== undefined) {
        retentionPolicyValue['retentionType'] = cSMUpdateProtectionPolicyRequest.properties.retentionPolicy.retentionType !== null && cSMUpdateProtectionPolicyRequest.properties.retentionPolicy.retentionType !== undefined ? cSMUpdateProtectionPolicyRequest.properties.retentionPolicy.retentionType.toString() : 'Invalid';
      }
      
      if (cSMUpdateProtectionPolicyRequest.properties.retentionPolicy.retentionDuration !== null && cSMUpdateProtectionPolicyRequest.properties.retentionPolicy.retentionDuration !== undefined) {
        retentionPolicyValue['retentionDuration'] = cSMUpdateProtectionPolicyRequest.properties.retentionPolicy.retentionDuration;
      }
    }
    
    if (cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy !== null && cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy !== undefined) {
      var ltrRetentionPolicyValue = {};
      propertiesValue['ltrRetentionPolicy'] = ltrRetentionPolicyValue;
      
      if (cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.dailySchedule !== null && cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.dailySchedule !== undefined) {
        var dailyScheduleValue = {};
        ltrRetentionPolicyValue['DailySchedule'] = dailyScheduleValue;
        
        if (cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.dailySchedule.retentionTimes !== null && cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.dailySchedule.retentionTimes !== undefined) {
          var retentionTimesArray = [];
          for (var loweredIndex3 = 0; loweredIndex3 < cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.dailySchedule.retentionTimes.length; loweredIndex3 = loweredIndex3 + 1) {
            var retentionTimesItem = cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.dailySchedule.retentionTimes[loweredIndex3];
            retentionTimesArray.push(retentionTimesItem);
          }
          dailyScheduleValue['RetentionTimes'] = retentionTimesArray;
        }
        
        if (cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.dailySchedule.cSMRetentionDuration !== null && cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.dailySchedule.cSMRetentionDuration !== undefined) {
          var cSMRetentionDurationValue = {};
          dailyScheduleValue['CSMRetentionDuration'] = cSMRetentionDurationValue;
          
          if (cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.dailySchedule.cSMRetentionDuration.count !== null && cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.dailySchedule.cSMRetentionDuration.count !== undefined) {
            cSMRetentionDurationValue['Count'] = cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.dailySchedule.cSMRetentionDuration.count;
          }
          
          if (cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.dailySchedule.cSMRetentionDuration.durationType !== null && cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.dailySchedule.cSMRetentionDuration.durationType !== undefined) {
            cSMRetentionDurationValue['DurationType'] = cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.dailySchedule.cSMRetentionDuration.durationType !== null && cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.dailySchedule.cSMRetentionDuration.durationType !== undefined ? cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.dailySchedule.cSMRetentionDuration.durationType.toString() : 'Invalid';
          }
        }
      }
      
      if (cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.weeklySchedule !== null && cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.weeklySchedule !== undefined) {
        var weeklyScheduleValue = {};
        ltrRetentionPolicyValue['WeeklySchedule'] = weeklyScheduleValue;
        
        if (cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.weeklySchedule.daysOfTheWeek !== null && cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.weeklySchedule.daysOfTheWeek !== undefined) {
          var daysOfTheWeekArray = [];
          for (var loweredIndex4 = 0; loweredIndex4 < cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.weeklySchedule.daysOfTheWeek.length; loweredIndex4 = loweredIndex4 + 1) {
            var daysOfTheWeekItem = cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.weeklySchedule.daysOfTheWeek[loweredIndex4];
            daysOfTheWeekArray.push(daysOfTheWeekItem !== null && daysOfTheWeekItem !== undefined ? daysOfTheWeekItem.toString() : 'Sunday');
          }
          weeklyScheduleValue['DaysOfTheWeek'] = daysOfTheWeekArray;
        }
        
        if (cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.weeklySchedule.retentionTimes !== null && cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.weeklySchedule.retentionTimes !== undefined) {
          var retentionTimesArray2 = [];
          for (var loweredIndex5 = 0; loweredIndex5 < cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.weeklySchedule.retentionTimes.length; loweredIndex5 = loweredIndex5 + 1) {
            var retentionTimesItem2 = cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.weeklySchedule.retentionTimes[loweredIndex5];
            retentionTimesArray2.push(retentionTimesItem2);
          }
          weeklyScheduleValue['RetentionTimes'] = retentionTimesArray2;
        }
        
        if (cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.weeklySchedule.cSMRetentionDuration !== null && cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.weeklySchedule.cSMRetentionDuration !== undefined) {
          var cSMRetentionDurationValue2 = {};
          weeklyScheduleValue['CSMRetentionDuration'] = cSMRetentionDurationValue2;
          
          if (cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.weeklySchedule.cSMRetentionDuration.count !== null && cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.weeklySchedule.cSMRetentionDuration.count !== undefined) {
            cSMRetentionDurationValue2['Count'] = cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.weeklySchedule.cSMRetentionDuration.count;
          }
          
          if (cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.weeklySchedule.cSMRetentionDuration.durationType !== null && cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.weeklySchedule.cSMRetentionDuration.durationType !== undefined) {
            cSMRetentionDurationValue2['DurationType'] = cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.weeklySchedule.cSMRetentionDuration.durationType !== null && cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.weeklySchedule.cSMRetentionDuration.durationType !== undefined ? cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.weeklySchedule.cSMRetentionDuration.durationType.toString() : 'Invalid';
          }
        }
      }
      
      if (cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.monthlySchedule !== null && cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.monthlySchedule !== undefined) {
        var monthlyScheduleValue = {};
        ltrRetentionPolicyValue['MonthlySchedule'] = monthlyScheduleValue;
        
        if (cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.monthlySchedule.retentionScheduleType !== null && cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.monthlySchedule.retentionScheduleType !== undefined) {
          monthlyScheduleValue['RetentionScheduleType'] = cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.monthlySchedule.retentionScheduleType !== null && cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.monthlySchedule.retentionScheduleType !== undefined ? cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.monthlySchedule.retentionScheduleType.toString() : 'Invalid';
        }
        
        if (cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.monthlySchedule.retentionScheduleDaily !== null && cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.monthlySchedule.retentionScheduleDaily !== undefined) {
          var retentionScheduleDailyValue = {};
          monthlyScheduleValue['RetentionScheduleDaily'] = retentionScheduleDailyValue;
          
          if (cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.monthlySchedule.retentionScheduleDaily.daysOfTheMonth !== null && cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.monthlySchedule.retentionScheduleDaily.daysOfTheMonth !== undefined) {
            var daysOfTheMonthArray = [];
            for (var loweredIndex6 = 0; loweredIndex6 < cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.monthlySchedule.retentionScheduleDaily.daysOfTheMonth.length; loweredIndex6 = loweredIndex6 + 1) {
              var daysOfTheMonthItem = cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.monthlySchedule.retentionScheduleDaily.daysOfTheMonth[loweredIndex6];
              var dayValue = {};
              daysOfTheMonthArray.push(dayValue);
              
              if (daysOfTheMonthItem.date !== null && daysOfTheMonthItem.date !== undefined) {
                dayValue['Date'] = daysOfTheMonthItem.date;
              }
              
              if (daysOfTheMonthItem.isLast !== null && daysOfTheMonthItem.isLast !== undefined) {
                dayValue['IsLast'] = daysOfTheMonthItem.isLast;
              }
            }
            retentionScheduleDailyValue['DaysOfTheMonth'] = daysOfTheMonthArray;
          }
        }
        
        if (cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.monthlySchedule.retentionScheduleWeekly !== null && cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.monthlySchedule.retentionScheduleWeekly !== undefined) {
          var retentionScheduleWeeklyValue = {};
          monthlyScheduleValue['RetentionScheduleWeekly'] = retentionScheduleWeeklyValue;
          
          if (cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.monthlySchedule.retentionScheduleWeekly.daysOfTheWeek !== null && cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.monthlySchedule.retentionScheduleWeekly.daysOfTheWeek !== undefined) {
            var daysOfTheWeekArray2 = [];
            for (var loweredIndex7 = 0; loweredIndex7 < cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.monthlySchedule.retentionScheduleWeekly.daysOfTheWeek.length; loweredIndex7 = loweredIndex7 + 1) {
              var daysOfTheWeekItem2 = cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.monthlySchedule.retentionScheduleWeekly.daysOfTheWeek[loweredIndex7];
              daysOfTheWeekArray2.push(daysOfTheWeekItem2 !== null && daysOfTheWeekItem2 !== undefined ? daysOfTheWeekItem2.toString() : 'Sunday');
            }
            retentionScheduleWeeklyValue['DaysOfTheWeek'] = daysOfTheWeekArray2;
          }
          
          if (cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.monthlySchedule.retentionScheduleWeekly.weeksOfTheMonth !== null && cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.monthlySchedule.retentionScheduleWeekly.weeksOfTheMonth !== undefined) {
            var weeksOfTheMonthArray = [];
            for (var loweredIndex8 = 0; loweredIndex8 < cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.monthlySchedule.retentionScheduleWeekly.weeksOfTheMonth.length; loweredIndex8 = loweredIndex8 + 1) {
              var weeksOfTheMonthItem = cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.monthlySchedule.retentionScheduleWeekly.weeksOfTheMonth[loweredIndex8];
              weeksOfTheMonthArray.push(weeksOfTheMonthItem !== null && weeksOfTheMonthItem !== undefined ? weeksOfTheMonthItem.toString() : 'First');
            }
            retentionScheduleWeeklyValue['WeeksOfTheMonth'] = weeksOfTheMonthArray;
          }
        }
        
        if (cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.monthlySchedule.retentionTimes !== null && cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.monthlySchedule.retentionTimes !== undefined) {
          var retentionTimesArray3 = [];
          for (var loweredIndex9 = 0; loweredIndex9 < cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.monthlySchedule.retentionTimes.length; loweredIndex9 = loweredIndex9 + 1) {
            var retentionTimesItem3 = cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.monthlySchedule.retentionTimes[loweredIndex9];
            retentionTimesArray3.push(retentionTimesItem3);
          }
          monthlyScheduleValue['RetentionTimes'] = retentionTimesArray3;
        }
        
        if (cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.monthlySchedule.cSMRetentionDuration !== null && cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.monthlySchedule.cSMRetentionDuration !== undefined) {
          var cSMRetentionDurationValue3 = {};
          monthlyScheduleValue['CSMRetentionDuration'] = cSMRetentionDurationValue3;
          
          if (cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.monthlySchedule.cSMRetentionDuration.count !== null && cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.monthlySchedule.cSMRetentionDuration.count !== undefined) {
            cSMRetentionDurationValue3['Count'] = cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.monthlySchedule.cSMRetentionDuration.count;
          }
          
          if (cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.monthlySchedule.cSMRetentionDuration.durationType !== null && cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.monthlySchedule.cSMRetentionDuration.durationType !== undefined) {
            cSMRetentionDurationValue3['DurationType'] = cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.monthlySchedule.cSMRetentionDuration.durationType !== null && cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.monthlySchedule.cSMRetentionDuration.durationType !== undefined ? cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.monthlySchedule.cSMRetentionDuration.durationType.toString() : 'Invalid';
          }
        }
      }
      
      if (cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule !== null && cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule !== undefined) {
        var yearlyScheduleValue = {};
        ltrRetentionPolicyValue['YearlySchedule'] = yearlyScheduleValue;
        
        if (cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule.retentionScheduleType !== null && cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule.retentionScheduleType !== undefined) {
          yearlyScheduleValue['RetentionScheduleType'] = cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule.retentionScheduleType !== null && cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule.retentionScheduleType !== undefined ? cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule.retentionScheduleType.toString() : 'Invalid';
        }
        
        if (cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule.monthsOfYear !== null && cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule.monthsOfYear !== undefined) {
          var monthsOfYearArray = [];
          for (var loweredIndex10 = 0; loweredIndex10 < cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule.monthsOfYear.length; loweredIndex10 = loweredIndex10 + 1) {
            var monthsOfYearItem = cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule.monthsOfYear[loweredIndex10];
            monthsOfYearArray.push(monthsOfYearItem !== null && monthsOfYearItem !== undefined ? monthsOfYearItem.toString() : 'Invalid');
          }
          yearlyScheduleValue['MonthsOfYear'] = monthsOfYearArray;
        }
        
        if (cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule.retentionScheduleDaily !== null && cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule.retentionScheduleDaily !== undefined) {
          var retentionScheduleDailyValue2 = {};
          yearlyScheduleValue['RetentionScheduleDaily'] = retentionScheduleDailyValue2;
          
          if (cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule.retentionScheduleDaily.daysOfTheMonth !== null && cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule.retentionScheduleDaily.daysOfTheMonth !== undefined) {
            var daysOfTheMonthArray2 = [];
            for (var loweredIndex11 = 0; loweredIndex11 < cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule.retentionScheduleDaily.daysOfTheMonth.length; loweredIndex11 = loweredIndex11 + 1) {
              var daysOfTheMonthItem2 = cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule.retentionScheduleDaily.daysOfTheMonth[loweredIndex11];
              var dayValue2 = {};
              daysOfTheMonthArray2.push(dayValue2);
              
              if (daysOfTheMonthItem2.date !== null && daysOfTheMonthItem2.date !== undefined) {
                dayValue2['Date'] = daysOfTheMonthItem2.date;
              }
              
              if (daysOfTheMonthItem2.isLast !== null && daysOfTheMonthItem2.isLast !== undefined) {
                dayValue2['IsLast'] = daysOfTheMonthItem2.isLast;
              }
            }
            retentionScheduleDailyValue2['DaysOfTheMonth'] = daysOfTheMonthArray2;
          }
        }
        
        if (cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule.retentionScheduleWeekly !== null && cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule.retentionScheduleWeekly !== undefined) {
          var retentionScheduleWeeklyValue2 = {};
          yearlyScheduleValue['RetentionScheduleWeekly'] = retentionScheduleWeeklyValue2;
          
          if (cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule.retentionScheduleWeekly.daysOfTheWeek !== null && cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule.retentionScheduleWeekly.daysOfTheWeek !== undefined) {
            var daysOfTheWeekArray3 = [];
            for (var loweredIndex12 = 0; loweredIndex12 < cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule.retentionScheduleWeekly.daysOfTheWeek.length; loweredIndex12 = loweredIndex12 + 1) {
              var daysOfTheWeekItem3 = cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule.retentionScheduleWeekly.daysOfTheWeek[loweredIndex12];
              daysOfTheWeekArray3.push(daysOfTheWeekItem3 !== null && daysOfTheWeekItem3 !== undefined ? daysOfTheWeekItem3.toString() : 'Sunday');
            }
            retentionScheduleWeeklyValue2['DaysOfTheWeek'] = daysOfTheWeekArray3;
          }
          
          if (cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule.retentionScheduleWeekly.weeksOfTheMonth !== null && cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule.retentionScheduleWeekly.weeksOfTheMonth !== undefined) {
            var weeksOfTheMonthArray2 = [];
            for (var loweredIndex13 = 0; loweredIndex13 < cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule.retentionScheduleWeekly.weeksOfTheMonth.length; loweredIndex13 = loweredIndex13 + 1) {
              var weeksOfTheMonthItem2 = cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule.retentionScheduleWeekly.weeksOfTheMonth[loweredIndex13];
              weeksOfTheMonthArray2.push(weeksOfTheMonthItem2 !== null && weeksOfTheMonthItem2 !== undefined ? weeksOfTheMonthItem2.toString() : 'First');
            }
            retentionScheduleWeeklyValue2['WeeksOfTheMonth'] = weeksOfTheMonthArray2;
          }
        }
        
        if (cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule.retentionTimes !== null && cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule.retentionTimes !== undefined) {
          var retentionTimesArray4 = [];
          for (var loweredIndex14 = 0; loweredIndex14 < cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule.retentionTimes.length; loweredIndex14 = loweredIndex14 + 1) {
            var retentionTimesItem4 = cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule.retentionTimes[loweredIndex14];
            retentionTimesArray4.push(retentionTimesItem4);
          }
          yearlyScheduleValue['RetentionTimes'] = retentionTimesArray4;
        }
        
        if (cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule.cSMRetentionDuration !== null && cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule.cSMRetentionDuration !== undefined) {
          var cSMRetentionDurationValue4 = {};
          yearlyScheduleValue['CSMRetentionDuration'] = cSMRetentionDurationValue4;
          
          if (cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule.cSMRetentionDuration.count !== null && cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule.cSMRetentionDuration.count !== undefined) {
            cSMRetentionDurationValue4['Count'] = cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule.cSMRetentionDuration.count;
          }
          
          if (cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule.cSMRetentionDuration.durationType !== null && cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule.cSMRetentionDuration.durationType !== undefined) {
            cSMRetentionDurationValue4['DurationType'] = cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule.cSMRetentionDuration.durationType !== null && cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule.cSMRetentionDuration.durationType !== undefined ? cSMUpdateProtectionPolicyRequest.properties.ltrRetentionPolicy.yearlySchedule.cSMRetentionDuration.durationType.toString() : 'Invalid';
          }
        }
      }
    }
    
    requestContent = JSON.stringify(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200 && statusCode !== 202) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200 || statusCode === 202) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var operationIdInstance = responseDoc;
          result.operationId = operationIdInstance;
        }
        
      }
      result.statusCode = statusCode;
      
      return callback(null, result);
    });
  };
  
  return CSMProtectionPolicyOperations;
})();

var DataSourceOperations = ( /** @lends DataSourceOperations */ function() {
  /**
   * @class
   * Definition of DataSource operations for the Azure Backup extension.
   * __NOTE__: An instance of this class is automatically created for an
   * instance of the [BackupServicesManagementClient] {@link
   * BackupServicesManagementClient~BackupServicesManagementClient}.
   * See [dataSource] {@link
   * BackupServicesManagementClient~BackupServicesManagementClient#dataSource}.
   * Initializes a new instance of the DataSourceOperations class.
   * @constructor
   * 
   * @param {BackupServicesManagementClient} client Reference to the service
   * client.
   */
  function DataSourceOperations(client) {
    this.client = client;
  }
  
  /**
   * Disable protection for given item
   * 
   * @param {string} resourceGroupName
   * 
   * @param {string} resourceName
   * 
   * @param {CustomRequestHeaders} [customRequestHeaders] Request header
   * parameters.
   * 
   * @param {string} [customRequestHeaders.clientRequestId] ClientRequestId is
   * a unique ID for every request to Azure Site Recovery. It is useful when
   * diagnosing failures in API calls.
   * 
   * @param {string} containerName containerName.
   * 
   * @param {string} itemName itemName.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  DataSourceOperations.prototype.disableProtectionCSM = function(resourceGroupName, resourceName, customRequestHeaders, containerName, itemName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (resourceName === null || resourceName === undefined) {
      return callback(new Error('resourceName cannot be null.'));
    }
    if (containerName === null || containerName === undefined) {
      return callback(new Error('containerName cannot be null.'));
    }
    if (itemName === null || itemName === undefined) {
      return callback(new Error('itemName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Backup';
    url2 = url2 + '/';
    url2 = url2 + 'BackupVault';
    url2 = url2 + '/';
    url2 = url2 + encodeURIComponent(resourceName);
    url2 = url2 + '/registeredContainers/';
    url2 = url2 + encodeURIComponent(containerName);
    url2 = url2 + '/protectedItems/';
    url2 = url2 + encodeURIComponent(itemName);
    var queryParameters = [];
    queryParameters.push('api-version=2014-09-01');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'DELETE';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Accept-Language'] = 'en-us';
    httpRequest.headers['Content-Type'] = 'application/json';
    if (customRequestHeaders.clientRequestId !== null && customRequestHeaders.clientRequestId !== undefined) {
      httpRequest.headers['x-ms-client-request-id'] = customRequestHeaders.clientRequestId;
    }
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 202) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 202) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var operationIdInstance = responseDoc;
          result.operationId = operationIdInstance;
        }
        
      }
      result.statusCode = statusCode;
      
      return callback(null, result);
    });
  };
  
  /**
   * Enable protection for given item.
   * 
   * @param {string} resourceGroupName
   * 
   * @param {string} resourceName
   * 
   * @param {CustomRequestHeaders} [customRequestHeaders] Request header
   * parameters.
   * 
   * @param {string} [customRequestHeaders.clientRequestId] ClientRequestId is
   * a unique ID for every request to Azure Site Recovery. It is useful when
   * diagnosing failures in API calls.
   * 
   * @param {string} containerName containerName.
   * 
   * @param {string} itemName itemName.
   * 
   * @param {CSMSetProtectionRequest} csmparameters Set protection request
   * input.
   * 
   * @param {CSMSetProtectionRequestProperties} csmparameters.properties
   * properties  for setting protection.
   * 
   * @param {string} csmparameters.properties.policyId policyId  for setting
   * protection.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  DataSourceOperations.prototype.enableProtectionCSM = function(resourceGroupName, resourceName, customRequestHeaders, containerName, itemName, csmparameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (resourceName === null || resourceName === undefined) {
      return callback(new Error('resourceName cannot be null.'));
    }
    if (containerName === null || containerName === undefined) {
      return callback(new Error('containerName cannot be null.'));
    }
    if (itemName === null || itemName === undefined) {
      return callback(new Error('itemName cannot be null.'));
    }
    if (csmparameters === null || csmparameters === undefined) {
      return callback(new Error('csmparameters cannot be null.'));
    }
    if (csmparameters.properties === null || csmparameters.properties === undefined) {
      return callback(new Error('csmparameters.properties cannot be null.'));
    }
    if (csmparameters.properties.policyId === null || csmparameters.properties.policyId === undefined) {
      return callback(new Error('csmparameters.properties.policyId cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Backup';
    url2 = url2 + '/';
    url2 = url2 + 'BackupVault';
    url2 = url2 + '/';
    url2 = url2 + encodeURIComponent(resourceName);
    url2 = url2 + '/registeredContainers/';
    url2 = url2 + encodeURIComponent(containerName);
    url2 = url2 + '/protectedItems/';
    url2 = url2 + encodeURIComponent(itemName);
    var queryParameters = [];
    queryParameters.push('api-version=2014-09-01');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Accept-Language'] = 'en-us';
    httpRequest.headers['Content-Type'] = 'application/json';
    if (customRequestHeaders.clientRequestId !== null && customRequestHeaders.clientRequestId !== undefined) {
      httpRequest.headers['x-ms-client-request-id'] = customRequestHeaders.clientRequestId;
    }
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = null;
    
    var cSMSetProtectionRequestValue = {};
    requestDoc = cSMSetProtectionRequestValue;
    
    var propertiesValue = {};
    cSMSetProtectionRequestValue['properties'] = propertiesValue;
    
    propertiesValue['policyId'] = csmparameters.properties.policyId;
    
    requestContent = JSON.stringify(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 202) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 202) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var operationIdInstance = responseDoc;
          result.operationId = operationIdInstance;
        }
        
      }
      result.statusCode = statusCode;
      
      return callback(null, result);
    });
  };
  
  /**
   * Get the list of all Datasources.
   * 
   * @param {string} resourceGroupName
   * 
   * @param {string} resourceName
   * 
   * @param {CSMProtectedItemQueryObject} [csmparameters] DataSource query
   * parameter.
   * 
   * @param {string} [csmparameters.protectionStatus] Protection Status of item.
   * 
   * @param {string} [csmparameters.status] Status of item.
   * 
   * @param {string} [csmparameters.type] Type of item.
   * 
   * @param {CustomRequestHeaders} [customRequestHeaders] Request header
   * parameters.
   * 
   * @param {string} [customRequestHeaders.clientRequestId] ClientRequestId is
   * a unique ID for every request to Azure Site Recovery. It is useful when
   * diagnosing failures in API calls.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  DataSourceOperations.prototype.listCSM = function(resourceGroupName, resourceName, csmparameters, customRequestHeaders, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (resourceName === null || resourceName === undefined) {
      return callback(new Error('resourceName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Backup';
    url2 = url2 + '/';
    url2 = url2 + 'BackupVault';
    url2 = url2 + '/';
    url2 = url2 + encodeURIComponent(resourceName);
    url2 = url2 + '/protectedItems';
    var queryParameters = [];
    queryParameters.push('api-version=2014-09-01');
    var odataFilter = [];
    if (csmparameters !== null && csmparameters !== undefined && csmparameters.protectionStatus !== null && csmparameters.protectionStatus !== undefined) {
      odataFilter.push('protectionStatus eq \'' + encodeURIComponent(csmparameters.protectionStatus) + '\'');
    }
    if (csmparameters !== null && csmparameters !== undefined && csmparameters.status !== null && csmparameters.status !== undefined) {
      odataFilter.push('status eq \'' + encodeURIComponent(csmparameters.status) + '\'');
    }
    if (csmparameters !== null && csmparameters !== undefined && csmparameters.type !== null && csmparameters.type !== undefined) {
      odataFilter.push('itemType eq \'' + encodeURIComponent(csmparameters.type) + '\'');
    }
    if (odataFilter.length > 0) {
      queryParameters.push('$filter=' + odataFilter.join(' and '));
    }
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Accept-Language'] = 'en-us';
    httpRequest.headers['Content-Type'] = 'application/json';
    if (customRequestHeaders.clientRequestId !== null && customRequestHeaders.clientRequestId !== undefined) {
      httpRequest.headers['x-ms-client-request-id'] = customRequestHeaders.clientRequestId;
    }
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var cSMProtectedItemListResponseInstance = { value: [] };
          result.cSMProtectedItemListResponse = cSMProtectedItemListResponseInstance;
          
          var valueArray = responseDoc['value'];
          if (valueArray !== null && valueArray !== undefined) {
            for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var valueValue = valueArray[loweredIndex1];
              var cSMProtectedItemResponseInstance = {};
              cSMProtectedItemListResponseInstance.value.push(cSMProtectedItemResponseInstance);
              
              var propertiesValue = valueValue['properties'];
              if (propertiesValue !== null && propertiesValue !== undefined) {
                var propertiesInstance = {};
                cSMProtectedItemResponseInstance.properties = propertiesInstance;
                
                var protectionStatusValue = propertiesValue['protectionStatus'];
                if (protectionStatusValue !== null && protectionStatusValue !== undefined) {
                  var protectionStatusInstance = protectionStatusValue;
                  propertiesInstance.protectionStatus = protectionStatusInstance;
                }
                
                var protectionPolicyIdValue = propertiesValue['protectionPolicyId'];
                if (protectionPolicyIdValue !== null && protectionPolicyIdValue !== undefined) {
                  var protectionPolicyIdInstance = protectionPolicyIdValue;
                  propertiesInstance.protectionPolicyId = protectionPolicyIdInstance;
                }
                
                var policyInconsistentValue = propertiesValue['policyInconsistent'];
                if (policyInconsistentValue !== null && policyInconsistentValue !== undefined) {
                  var policyInconsistentInstance = policyInconsistentValue;
                  propertiesInstance.policyInconsistent = policyInconsistentInstance;
                }
                
                var recoveryPointsCountValue = propertiesValue['recoveryPointsCount'];
                if (recoveryPointsCountValue !== null && recoveryPointsCountValue !== undefined) {
                  var recoveryPointsCountInstance = recoveryPointsCountValue;
                  propertiesInstance.recoveryPointsCount = recoveryPointsCountInstance;
                }
                
                var lastRecoveryPointValue = propertiesValue['lastRecoveryPoint'];
                if (lastRecoveryPointValue !== null && lastRecoveryPointValue !== undefined) {
                  var lastRecoveryPointInstance = lastRecoveryPointValue;
                  propertiesInstance.lastRecoveryPoint = lastRecoveryPointInstance;
                }
                
                var lastBackupTimeValue = propertiesValue['lastBackupTime'];
                if (lastBackupTimeValue !== null && lastBackupTimeValue !== undefined) {
                  var lastBackupTimeInstance = lastBackupTimeValue;
                  propertiesInstance.lastBackupTime = lastBackupTimeInstance;
                }
                
                var lastBackupStatusValue = propertiesValue['lastBackupStatus'];
                if (lastBackupStatusValue !== null && lastBackupStatusValue !== undefined) {
                  var lastBackupStatusInstance = lastBackupStatusValue;
                  propertiesInstance.lastBackupStatus = lastBackupStatusInstance;
                }
                
                var lastBackupJobIdValue = propertiesValue['lastBackupJobId'];
                if (lastBackupJobIdValue !== null && lastBackupJobIdValue !== undefined) {
                  var lastBackupJobIdInstance = lastBackupJobIdValue;
                  propertiesInstance.lastBackupJobId = lastBackupJobIdInstance;
                }
                
                var friendlyNameValue = propertiesValue['friendlyName'];
                if (friendlyNameValue !== null && friendlyNameValue !== undefined) {
                  var friendlyNameInstance = friendlyNameValue;
                  propertiesInstance.friendlyName = friendlyNameInstance;
                }
                
                var itemTypeValue = propertiesValue['itemType'];
                if (itemTypeValue !== null && itemTypeValue !== undefined) {
                  var itemTypeInstance = itemTypeValue;
                  propertiesInstance.itemType = itemTypeInstance;
                }
                
                var statusValue = propertiesValue['status'];
                if (statusValue !== null && statusValue !== undefined) {
                  var statusInstance = statusValue;
                  propertiesInstance.status = statusInstance;
                }
                
                var containerIdValue = propertiesValue['containerId'];
                if (containerIdValue !== null && containerIdValue !== undefined) {
                  var containerIdInstance = containerIdValue;
                  propertiesInstance.containerId = containerIdInstance;
                }
              }
              
              var idValue = valueValue['id'];
              if (idValue !== null && idValue !== undefined) {
                var idInstance = idValue;
                cSMProtectedItemResponseInstance.id = idInstance;
              }
              
              var nameValue = valueValue['name'];
              if (nameValue !== null && nameValue !== undefined) {
                var nameInstance = nameValue;
                cSMProtectedItemResponseInstance.name = nameInstance;
              }
              
              var typeValue = valueValue['type'];
              if (typeValue !== null && typeValue !== undefined) {
                var typeInstance = typeValue;
                cSMProtectedItemResponseInstance.type = typeInstance;
              }
            }
          }
          
          var nextLinkValue = responseDoc['nextLink'];
          if (nextLinkValue !== null && nextLinkValue !== undefined) {
            var nextLinkInstance = nextLinkValue;
            cSMProtectedItemListResponseInstance.nextLink = nextLinkInstance;
          }
          
          var idValue2 = responseDoc['id'];
          if (idValue2 !== null && idValue2 !== undefined) {
            var idInstance2 = idValue2;
            cSMProtectedItemListResponseInstance.id = idInstance2;
          }
          
          var nameValue2 = responseDoc['name'];
          if (nameValue2 !== null && nameValue2 !== undefined) {
            var nameInstance2 = nameValue2;
            cSMProtectedItemListResponseInstance.name = nameInstance2;
          }
          
          var typeValue2 = responseDoc['type'];
          if (typeValue2 !== null && typeValue2 !== undefined) {
            var typeInstance2 = typeValue2;
            cSMProtectedItemListResponseInstance.type = typeInstance2;
          }
        }
        
      }
      result.statusCode = statusCode;
      
      return callback(null, result);
    });
  };
  
  /**
   * Enable protection for given item.
   * 
   * @param {string} resourceGroupName
   * 
   * @param {string} resourceName
   * 
   * @param {CustomRequestHeaders} [customRequestHeaders] Request header
   * parameters.
   * 
   * @param {string} [customRequestHeaders.clientRequestId] ClientRequestId is
   * a unique ID for every request to Azure Site Recovery. It is useful when
   * diagnosing failures in API calls.
   * 
   * @param {string} containerName containerName.
   * 
   * @param {string} itemName itemName.
   * 
   * @param {CSMUpdateProtectionRequest} csmparameters Set protection request
   * input.
   * 
   * @param {CSMUpdateProtectionRequestProperties} csmparameters.properties
   * properties  for updating protection.
   * 
   * @param {string} csmparameters.properties.policyId policyId  for updating
   * protection.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  DataSourceOperations.prototype.updateProtectionCSM = function(resourceGroupName, resourceName, customRequestHeaders, containerName, itemName, csmparameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (resourceName === null || resourceName === undefined) {
      return callback(new Error('resourceName cannot be null.'));
    }
    if (containerName === null || containerName === undefined) {
      return callback(new Error('containerName cannot be null.'));
    }
    if (itemName === null || itemName === undefined) {
      return callback(new Error('itemName cannot be null.'));
    }
    if (csmparameters === null || csmparameters === undefined) {
      return callback(new Error('csmparameters cannot be null.'));
    }
    if (csmparameters.properties === null || csmparameters.properties === undefined) {
      return callback(new Error('csmparameters.properties cannot be null.'));
    }
    if (csmparameters.properties.policyId === null || csmparameters.properties.policyId === undefined) {
      return callback(new Error('csmparameters.properties.policyId cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Backup';
    url2 = url2 + '/';
    url2 = url2 + 'BackupVault';
    url2 = url2 + '/';
    url2 = url2 + encodeURIComponent(resourceName);
    url2 = url2 + '/registeredContainers/';
    url2 = url2 + encodeURIComponent(containerName);
    url2 = url2 + '/protectedItems/';
    url2 = url2 + encodeURIComponent(itemName);
    var queryParameters = [];
    queryParameters.push('api-version=2014-09-01');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PATCH';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Accept-Language'] = 'en-us';
    httpRequest.headers['Content-Type'] = 'application/json';
    if (customRequestHeaders.clientRequestId !== null && customRequestHeaders.clientRequestId !== undefined) {
      httpRequest.headers['x-ms-client-request-id'] = customRequestHeaders.clientRequestId;
    }
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = null;
    
    var cSMUpdateProtectionRequestValue = {};
    requestDoc = cSMUpdateProtectionRequestValue;
    
    var propertiesValue = {};
    cSMUpdateProtectionRequestValue['properties'] = propertiesValue;
    
    propertiesValue['policyId'] = csmparameters.properties.policyId;
    
    requestContent = JSON.stringify(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 202) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 202) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var operationIdInstance = responseDoc;
          result.operationId = operationIdInstance;
        }
        
      }
      result.statusCode = statusCode;
      
      return callback(null, result);
    });
  };
  
  return DataSourceOperations;
})();

var JobOperations = ( /** @lends JobOperations */ function() {
  /**
   * @class
   * Definition of Job operations for Azure backup extension.
   * __NOTE__: An instance of this class is automatically created for an
   * instance of the [BackupServicesManagementClient] {@link
   * BackupServicesManagementClient~BackupServicesManagementClient}.
   * See [job] {@link
   * BackupServicesManagementClient~BackupServicesManagementClient#job}.
   * Initializes a new instance of the JobOperations class.
   * @constructor
   * 
   * @param {BackupServicesManagementClient} client Reference to the service
   * client.
   */
  function JobOperations(client) {
    this.client = client;
  }
  
  /**
   * Get details of a particular job.
   * 
   * @param {string} resourceGroupName
   * 
   * @param {string} resourceName
   * 
   * @param {string} [name] Name of the job whose details should be retrieved.
   * 
   * @param {CustomRequestHeaders} [customRequestHeaders] Request header
   * parameters.
   * 
   * @param {string} [customRequestHeaders.clientRequestId] ClientRequestId is
   * a unique ID for every request to Azure Site Recovery. It is useful when
   * diagnosing failures in API calls.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  JobOperations.prototype.get = function(resourceGroupName, resourceName, name, customRequestHeaders, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (resourceName === null || resourceName === undefined) {
      return callback(new Error('resourceName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Backup';
    url2 = url2 + '/';
    url2 = url2 + 'BackupVault';
    url2 = url2 + '/';
    url2 = url2 + encodeURIComponent(resourceName);
    url2 = url2 + '/jobs/';
    if (name !== null && name !== undefined) {
      url2 = url2 + encodeURIComponent(name);
    }
    var queryParameters = [];
    queryParameters.push('api-version=2014-09-01');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Accept-Language'] = 'en-us';
    httpRequest.headers['Content-Type'] = 'application/json';
    if (customRequestHeaders.clientRequestId !== null && customRequestHeaders.clientRequestId !== undefined) {
      httpRequest.headers['x-ms-client-request-id'] = customRequestHeaders.clientRequestId;
    }
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var valueInstance = {};
          result.value = valueInstance;
          
          var propertiesValue = responseDoc['properties'];
          if (propertiesValue !== null && propertiesValue !== undefined) {
            var propertiesInstance = { actionsInfo: [], errorDetails: [], propertyBag: {}, tasksList: [] };
            valueInstance.jobDetailedProperties = propertiesInstance;
            
            var tasksListArray = propertiesValue['tasksList'];
            if (tasksListArray !== null && tasksListArray !== undefined) {
              for (var loweredIndex1 = 0; loweredIndex1 < tasksListArray.length; loweredIndex1 = loweredIndex1 + 1) {
                var tasksListValue = tasksListArray[loweredIndex1];
                var cSMJobTaskDetailsInstance = {};
                propertiesInstance.tasksList.push(cSMJobTaskDetailsInstance);
                
                var taskIdValue = tasksListValue['taskId'];
                if (taskIdValue !== null && taskIdValue !== undefined) {
                  var taskIdInstance = taskIdValue;
                  cSMJobTaskDetailsInstance.taskId = taskIdInstance;
                }
                
                var startTimeValue = tasksListValue['startTime'];
                if (startTimeValue !== null && startTimeValue !== undefined) {
                  var startTimeInstance = startTimeValue;
                  cSMJobTaskDetailsInstance.startTime = startTimeInstance;
                }
                
                var endTimeValue = tasksListValue['endTime'];
                if (endTimeValue !== null && endTimeValue !== undefined) {
                  var endTimeInstance = endTimeValue;
                  cSMJobTaskDetailsInstance.endTime = endTimeInstance;
                }
                
                var durationValue = tasksListValue['duration'];
                if (durationValue !== null && durationValue !== undefined) {
                  var durationInstance = moment.duration(durationValue);
                  cSMJobTaskDetailsInstance.duration = durationInstance;
                }
                
                var statusValue = tasksListValue['status'];
                if (statusValue !== null && statusValue !== undefined) {
                  var statusInstance = statusValue;
                  cSMJobTaskDetailsInstance.status = statusInstance;
                }
                
                var progressPercentageValue = tasksListValue['progressPercentage'];
                if (progressPercentageValue !== null && progressPercentageValue !== undefined) {
                  var progressPercentageInstance = progressPercentageValue;
                  cSMJobTaskDetailsInstance.progressPercentage = progressPercentageInstance;
                }
              }
            }
            
            var propertyBagSequenceElement = propertiesValue['propertyBag'];
            if (propertyBagSequenceElement !== null && propertyBagSequenceElement !== undefined) {
              for (var property in propertyBagSequenceElement) {
                var propertyBagKey = property;
                var propertyBagValue = propertyBagSequenceElement[property];
                propertiesInstance.propertyBag[propertyBagKey] = propertyBagValue;
              }
            }
            
            var progressPercentageValue2 = propertiesValue['progressPercentage'];
            if (progressPercentageValue2 !== null && progressPercentageValue2 !== undefined) {
              var progressPercentageInstance2 = progressPercentageValue2;
              propertiesInstance.progressPercentage = progressPercentageInstance2;
            }
            
            var dynamicErrorMessageValue = propertiesValue['dynamicErrorMessage'];
            if (dynamicErrorMessageValue !== null && dynamicErrorMessageValue !== undefined) {
              var dynamicErrorMessageInstance = dynamicErrorMessageValue;
              propertiesInstance.dynamicErrorMessage = dynamicErrorMessageInstance;
            }
            
            var workloadTypeValue = propertiesValue['workloadType'];
            if (workloadTypeValue !== null && workloadTypeValue !== undefined) {
              var workloadTypeInstance = workloadTypeValue;
              propertiesInstance.workloadType = workloadTypeInstance;
            }
            
            var operationValue = propertiesValue['operation'];
            if (operationValue !== null && operationValue !== undefined) {
              var operationInstance = operationValue;
              propertiesInstance.operation = operationInstance;
            }
            
            var statusValue2 = propertiesValue['status'];
            if (statusValue2 !== null && statusValue2 !== undefined) {
              var statusInstance2 = statusValue2;
              propertiesInstance.status = statusInstance2;
            }
            
            var startTimestampValue = propertiesValue['startTimestamp'];
            if (startTimestampValue !== null && startTimestampValue !== undefined) {
              var startTimestampInstance = startTimestampValue;
              propertiesInstance.startTimestamp = startTimestampInstance;
            }
            
            var endTimestampValue = propertiesValue['endTimestamp'];
            if (endTimestampValue !== null && endTimestampValue !== undefined) {
              var endTimestampInstance = endTimestampValue;
              propertiesInstance.endTimestamp = endTimestampInstance;
            }
            
            var durationValue2 = propertiesValue['duration'];
            if (durationValue2 !== null && durationValue2 !== undefined) {
              var durationInstance2 = moment.duration(durationValue2);
              propertiesInstance.duration = durationInstance2;
            }
            
            var entityFriendlyNameValue = propertiesValue['entityFriendlyName'];
            if (entityFriendlyNameValue !== null && entityFriendlyNameValue !== undefined) {
              var entityFriendlyNameInstance = entityFriendlyNameValue;
              propertiesInstance.entityFriendlyName = entityFriendlyNameInstance;
            }
            
            var actionsInfoArray = propertiesValue['actionsInfo'];
            if (actionsInfoArray !== null && actionsInfoArray !== undefined) {
              for (var loweredIndex2 = 0; loweredIndex2 < actionsInfoArray.length; loweredIndex2 = loweredIndex2 + 1) {
                var actionsInfoValue = actionsInfoArray[loweredIndex2];
                propertiesInstance.actionsInfo.push(actionsInfoValue);
              }
            }
            
            var errorDetailsArray = propertiesValue['errorDetails'];
            if (errorDetailsArray !== null && errorDetailsArray !== undefined) {
              for (var loweredIndex3 = 0; loweredIndex3 < errorDetailsArray.length; loweredIndex3 = loweredIndex3 + 1) {
                var errorDetailsValue = errorDetailsArray[loweredIndex3];
                var cSMJobErrorInfoInstance = { recommendations: [] };
                propertiesInstance.errorDetails.push(cSMJobErrorInfoInstance);
                
                var errorCodeValue = errorDetailsValue['errorCode'];
                if (errorCodeValue !== null && errorCodeValue !== undefined) {
                  var errorCodeInstance = errorCodeValue;
                  cSMJobErrorInfoInstance.errorCode = errorCodeInstance;
                }
                
                var errorTitleValue = errorDetailsValue['errorTitle'];
                if (errorTitleValue !== null && errorTitleValue !== undefined) {
                  var errorTitleInstance = errorTitleValue;
                  cSMJobErrorInfoInstance.errorTitle = errorTitleInstance;
                }
                
                var errorStringValue = errorDetailsValue['errorString'];
                if (errorStringValue !== null && errorStringValue !== undefined) {
                  var errorStringInstance = errorStringValue;
                  cSMJobErrorInfoInstance.errorString = errorStringInstance;
                }
                
                var recommendationsArray = errorDetailsValue['recommendations'];
                if (recommendationsArray !== null && recommendationsArray !== undefined) {
                  for (var loweredIndex4 = 0; loweredIndex4 < recommendationsArray.length; loweredIndex4 = loweredIndex4 + 1) {
                    var recommendationsValue = recommendationsArray[loweredIndex4];
                    cSMJobErrorInfoInstance.recommendations.push(recommendationsValue);
                  }
                }
              }
            }
          }
          
          var idValue = responseDoc['id'];
          if (idValue !== null && idValue !== undefined) {
            var idInstance = idValue;
            valueInstance.id = idInstance;
          }
          
          var nameValue = responseDoc['name'];
          if (nameValue !== null && nameValue !== undefined) {
            var nameInstance = nameValue;
            valueInstance.name = nameInstance;
          }
          
          var typeValue = responseDoc['type'];
          if (typeValue !== null && typeValue !== undefined) {
            var typeInstance = typeValue;
            valueInstance.type = typeInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      
      return callback(null, result);
    });
  };
  
  /**
   * Get the list of all jobs queried by specified filters.
   * 
   * @param {string} resourceGroupName
   * 
   * @param {string} resourceName
   * 
   * @param {CSMJobQueryObject} [parametersOrCallback] Job query parameter.
   * 
   * @param {string} [parametersOrCallback.status] Status of job.
   * 
   * @param {string} [parametersOrCallback.workloadType] Type of workload of
   * job.
   * 
   * @param {string} [parametersOrCallback.operation] Operation type of job.
   * 
   * @param {string} [parametersOrCallback.name] Name of the  job. (ID)
   * 
   * @param {string} [parametersOrCallback.startTime] Start time of time range
   * filter.
   * 
   * @param {string} [parametersOrCallback.endTime] EndTime of time range
   * filter.
   * 
   * @param {CustomRequestHeaders} [customRequestHeaders] Request header
   * parameters.
   * 
   * @param {string} [customRequestHeaders.clientRequestId] ClientRequestId is
   * a unique ID for every request to Azure Site Recovery. It is useful when
   * diagnosing failures in API calls.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  JobOperations.prototype.list = function(resourceGroupName, resourceName, parametersOrCallback, customRequestHeaders, callback) {
    var parameters = parametersOrCallback;
    if (_.isFunction(parameters)) {
      callback = parameters;
      parameters = null;
    }
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (resourceName === null || resourceName === undefined) {
      return callback(new Error('resourceName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId.toString());
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Backup';
    url2 = url2 + '/';
    url2 = url2 + 'BackupVault';
    url2 = url2 + '/';
    url2 = url2 + encodeURIComponent(resourceName);
    url2 = url2 + '/jobs';
    var queryParameters = [];
    queryParameters.push('api-version=2014-09-01');
    var odataFilter = [];
    if (parameters !== null && parameters !== undefined && parameters.status !== null && parameters.status !== undefined) {
      odataFilter.push('status eq \'' + encodeURIComponent(parameters.status) + '\'');
    }
    if (parameters !== null && parameters !== undefined && parameters.workloadType !== null && parameters.workloadType !== undefined) {
      odataFilter.push('workloadType eq \'' + encodeURIComponent(parameters.workloadType) + '\'');
    }
    if (parameters !== null && parameters !== undefined && parameters.operation !== null && parameters.operation !== undefined) {
      odataFilter.push('operation eq \'' + encodeURIComponent(parameters.operation) + '\'');
    }
    if (parameters !== null && parameters !== undefined && parameters.name !== null && parameters.name !== undefined) {
      odataFilter.push('name eq \'' + encodeURIComponent(parameters.name) + '\'');
    }
    if (parameters !== null && parameters !== undefined && parameters.startTime !== null && parameters.startTime !== undefined) {
      odataFilter.push('startTime eq \'' + encodeURIComponent(parameters.startTime) + '\'');
    }
    if (parameters !== null && parameters !== undefined && parameters.endTime !== null && parameters.endTime !== undefined) {
      odataFilter.push('endTime eq \'' + encodeURIComponent(parameters.endTime) + '\'');
    }
    if (odataFilter.length > 0) {
      queryParameters.push('$filter=' + odataFilter.join(' and '));
    }
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Accept-Language'] = 'en-us';
    httpRequest.headers['Content-Type'] = 'application/json';
    if (customRequestHeaders.clientRequestId !== null && customRequestHeaders.clientRequestId !== undefined) {
      httpRequest.headers['x-ms-client-request-id'] = customRequestHeaders.clientRequestId;
    }
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var listInstance = { value: [] };
          result.list = listInstance;
          
          var valueArray = responseDoc['value'];
          if (valueArray !== null && valueArray !== undefined) {
            for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var valueValue = valueArray[loweredIndex1];
              var cSMJobResponseInstance = {};
              listInstance.value.push(cSMJobResponseInstance);
              
              var propertiesValue = valueValue['properties'];
              if (propertiesValue !== null && propertiesValue !== undefined) {
                var propertiesInstance = { actionsInfo: [], errorDetails: [] };
                cSMJobResponseInstance.properties = propertiesInstance;
                
                var workloadTypeValue = propertiesValue['workloadType'];
                if (workloadTypeValue !== null && workloadTypeValue !== undefined) {
                  var workloadTypeInstance = workloadTypeValue;
                  propertiesInstance.workloadType = workloadTypeInstance;
                }
                
                var operationValue = propertiesValue['operation'];
                if (operationValue !== null && operationValue !== undefined) {
                  var operationInstance = operationValue;
                  propertiesInstance.operation = operationInstance;
                }
                
                var statusValue = propertiesValue['status'];
                if (statusValue !== null && statusValue !== undefined) {
                  var statusInstance = statusValue;
                  propertiesInstance.status = statusInstance;
                }
                
                var startTimestampValue = propertiesValue['startTimestamp'];
                if (startTimestampValue !== null && startTimestampValue !== undefined) {
                  var startTimestampInstance = startTimestampValue;
                  propertiesInstance.startTimestamp = startTimestampInstance;
                }
                
                var endTimestampValue = propertiesValue['endTimestamp'];
                if (endTimestampValue !== null && endTimestampValue !== undefined) {
                  var endTimestampInstance = endTimestampValue;
                  propertiesInstance.endTimestamp = endTimestampInstance;
                }
                
                var durationValue = propertiesValue['duration'];
                if (durationValue !== null && durationValue !== undefined) {
                  var durationInstance = moment.duration(durationValue);
                  propertiesInstance.duration = durationInstance;
                }
                
                var entityFriendlyNameValue = propertiesValue['entityFriendlyName'];
                if (entityFriendlyNameValue !== null && entityFriendlyNameValue !== undefined) {
                  var entityFriendlyNameInstance = entityFriendlyNameValue;
                  propertiesInstance.entityFriendlyName = entityFriendlyNameInstance;
                }
                
                var actionsInfoArray = propertiesValue['actionsInfo'];
                if (actionsInfoArray !== null && actionsInfoArray !== undefined) {
                  for (var loweredIndex2 = 0; loweredIndex2 < actionsInfoArray.length; loweredIndex2 = loweredIndex2 + 1) {
                    var actionsInfoValue = actionsInfoArray[loweredIndex2];
                    propertiesInstance.actionsInfo.push(actionsInfoValue);
                  }
                }
                
                var errorDetailsArray = propertiesValue['errorDetails'];
                if (errorDetailsArray !== null && errorDetailsArray !== undefined) {
                  for (var loweredIndex3 = 0; loweredIndex3 < errorDetailsArray.length; loweredIndex3 = loweredIndex3 + 1) {
                    var errorDetailsValue = errorDetailsArray[loweredIndex3];
                    var cSMJobErrorInfoInstance = { recommendations: [] };
                    propertiesInstance.errorDetails.push(cSMJobErrorInfoInstance);
                    
                    var errorCodeValue = errorDetailsValue['errorCode'];
                    if (errorCodeValue !== null && errorCodeValue !== undefined) {
                      var errorCodeInstance = errorCodeValue;
                      cSMJobErrorInfoInstance.errorCode = errorCodeInstance;
                    }
                    
                    var errorTitleValue = errorDetailsValue['errorTitle'];
                    if (errorTitleValue !== null && errorTitleValue !== undefined) {
                      var errorTitleInstance = errorTitleValue;
                      cSMJobErrorInfoInstance.errorTitle = errorTitleInstance;
                    }
                    
                    var errorStringValue = errorDetailsValue['errorString'];
                    if (errorStringValue !== null && errorStringValue !== undefined) {
                      var errorStringInstance = errorStringValue;
                      cSMJobErrorInfoInstance.errorString = errorStringInstance;
                    }
                    
                    var recommendationsArray = errorDetailsValue['recommendations'];
                    if (recommendationsArray !== null && recommendationsArray !== undefined) {
                      for (var loweredIndex4 = 0; loweredIndex4 < recommendationsArray.length; loweredIndex4 = loweredIndex4 + 1) {
                        var recommendationsValue = recommendationsArray[loweredIndex4];
                        cSMJobErrorInfoInstance.recommendations.push(recommendationsValue);
                      }
                    }
                  }
                }
              }
              
              var idValue = valueValue['id'];
              if (idValue !== null && idValue !== undefined) {
                var idInstance = idValue;
                cSMJobResponseInstance.id = idInstance;
              }
              
              var nameValue = valueValue['name'];
              if (nameValue !== null && nameValue !== undefined) {
                var nameInstance = nameValue;
                cSMJobResponseInstance.name = nameInstance;
              }
              
              var typeValue = valueValue['type'];
              if (typeValue !== null && typeValue !== undefined) {
                var typeInstance = typeValue;
                cSMJobResponseInstance.type = typeInstance;
              }
            }
          }
          
          var nextLinkValue = responseDoc['nextLink'];
          if (nextLinkValue !== null && nextLinkValue !== undefined) {
            var nextLinkInstance = nextLinkValue;
            listInstance.nextLink = nextLinkInstance;
          }
          
          var idValue2 = responseDoc['id'];
          if (idValue2 !== null && idValue2 !== undefined) {
            var idInstance2 = idValue2;
            listInstance.id = idInstance2;
          }
          
          var nameValue2 = responseDoc['name'];
          if (nameValue2 !== null && nameValue2 !== undefined) {
            var nameInstance2 = nameValue2;
            listInstance.name = nameInstance2;
          }
          
          var typeValue2 = responseDoc['type'];
          if (typeValue2 !== null && typeValue2 !== undefined) {
            var typeInstance2 = typeValue2;
            listInstance.type = typeInstance2;
          }
        }
        
      }
      result.statusCode = statusCode;
      
      return callback(null, result);
    });
  };
  
  /**
   * Trigger cancellation of a job.
   * 
   * @param {string} resourceGroupName
   * 
   * @param {string} resourceName
   * 
   * @param {string} [name] Name of the job which should be stopped.
   * 
   * @param {CustomRequestHeaders} [customRequestHeaders] Custom request
   * headers to make the call.
   * 
   * @param {string} [customRequestHeaders.clientRequestId] ClientRequestId is
   * a unique ID for every request to Azure Site Recovery. It is useful when
   * diagnosing failures in API calls.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  JobOperations.prototype.stop = function(resourceGroupName, resourceName, name, customRequestHeaders, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (resourceName === null || resourceName === undefined) {
      return callback(new Error('resourceName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Backup';
    url2 = url2 + '/';
    url2 = url2 + 'BackupVault';
    url2 = url2 + '/';
    url2 = url2 + encodeURIComponent(resourceName);
    url2 = url2 + '/jobs/';
    if (name !== null && name !== undefined) {
      url2 = url2 + encodeURIComponent(name);
    }
    url2 = url2 + '/cancel';
    var queryParameters = [];
    queryParameters.push('api-version=2014-09-01');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Accept-Language'] = 'en-us';
    httpRequest.headers['Content-Type'] = 'application/json';
    if (customRequestHeaders.clientRequestId !== null && customRequestHeaders.clientRequestId !== undefined) {
      httpRequest.headers['x-ms-client-request-id'] = customRequestHeaders.clientRequestId;
    }
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var operationIdInstance = responseDoc;
          result.operationId = operationIdInstance;
        }
        
      }
      result.statusCode = statusCode;
      
      return callback(null, result);
    });
  };
  
  return JobOperations;
})();

var OperationStatus = ( /** @lends OperationStatus */ function() {
  /**
   * @class
   * Definition of Workflow operation for the Azure Backup extension.
   * __NOTE__: An instance of this class is automatically created for an
   * instance of the [BackupServicesManagementClient] {@link
   * BackupServicesManagementClient~BackupServicesManagementClient}.
   * See [operationStatus] {@link
   * BackupServicesManagementClient~BackupServicesManagementClient#operationStatus}.
   * Initializes a new instance of the OperationStatus class.
   * @constructor
   * 
   * @param {BackupServicesManagementClient} client Reference to the service
   * client.
   */
  function OperationStatus(client) {
    this.client = client;
  }
  
  /**
   * Get the Operation Status.
   * 
   * @param {string} resourceGroupName
   * 
   * @param {string} resourceName
   * 
   * @param {string} operationId OperationId.
   * 
   * @param {CustomRequestHeaders} [customRequestHeaders] Request header
   * parameters.
   * 
   * @param {string} [customRequestHeaders.clientRequestId] ClientRequestId is
   * a unique ID for every request to Azure Site Recovery. It is useful when
   * diagnosing failures in API calls.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  OperationStatus.prototype.cSMGet = function(resourceGroupName, resourceName, operationId, customRequestHeaders, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (resourceName === null || resourceName === undefined) {
      return callback(new Error('resourceName cannot be null.'));
    }
    if (operationId === null || operationId === undefined) {
      return callback(new Error('operationId cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Backup';
    url2 = url2 + '/';
    url2 = url2 + 'BackupVault';
    url2 = url2 + '/';
    url2 = url2 + encodeURIComponent(resourceName);
    url2 = url2 + '/operationResults/';
    url2 = url2 + encodeURIComponent(operationId);
    var queryParameters = [];
    queryParameters.push('api-version=2014-09-01');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Accept-Language'] = 'en-us';
    httpRequest.headers['Content-Type'] = 'application/json';
    if (customRequestHeaders.clientRequestId !== null && customRequestHeaders.clientRequestId !== undefined) {
      httpRequest.headers['x-ms-client-request-id'] = customRequestHeaders.clientRequestId;
    }
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = { jobList: [] };
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var statusValue = responseDoc['status'];
          if (statusValue !== null && statusValue !== undefined) {
            var statusInstance = statusValue;
            result.status = statusInstance;
          }
          
          var errorValue = responseDoc['error'];
          if (errorValue !== null && errorValue !== undefined) {
            var errorInstance = {};
            result.error = errorInstance;
            
            var codeValue = errorValue['code'];
            if (codeValue !== null && codeValue !== undefined) {
              var codeInstance = codeValue;
              errorInstance.code = codeInstance;
            }
            
            var messageValue = errorValue['message'];
            if (messageValue !== null && messageValue !== undefined) {
              var messageInstance = messageValue;
              errorInstance.message = messageInstance;
            }
          }
          
          var jobListArray = responseDoc['jobList'];
          if (jobListArray !== null && jobListArray !== undefined) {
            for (var loweredIndex1 = 0; loweredIndex1 < jobListArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var jobListValue = jobListArray[loweredIndex1];
              result.jobList.push(jobListValue);
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      
      return callback(null, result);
    });
  };
  
  return OperationStatus;
})();

var ProtectableObjectOperations = ( /** @lends ProtectableObjectOperations */ function() {
  /**
   * @class
   * Definition of Protectable ObjectOperation operations for the Azure Backup
   * extension.
   * __NOTE__: An instance of this class is automatically created for an
   * instance of the [BackupServicesManagementClient] {@link
   * BackupServicesManagementClient~BackupServicesManagementClient}.
   * See [protectableObject] {@link
   * BackupServicesManagementClient~BackupServicesManagementClient#protectableObject}.
   * Initializes a new instance of the ProtectableObjectOperations class.
   * @constructor
   * 
   * @param {BackupServicesManagementClient} client Reference to the service
   * client.
   */
  function ProtectableObjectOperations(client) {
    this.client = client;
  }
  
  /**
   * Get the list of all items
   * 
   * @param {string} resourceGroupName
   * 
   * @param {string} resourceName
   * 
   * @param {CSMItemQueryObject} [csmparameters] Protectable objects query
   * parameter.
   * 
   * @param {string} [csmparameters.status] Status Status of item.
   * 
   * @param {string} [csmparameters.type] Type of item.
   * 
   * @param {CustomRequestHeaders} [customRequestHeaders] Request header
   * parameters.
   * 
   * @param {string} [customRequestHeaders.clientRequestId] ClientRequestId is
   * a unique ID for every request to Azure Site Recovery. It is useful when
   * diagnosing failures in API calls.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ProtectableObjectOperations.prototype.listCSM = function(resourceGroupName, resourceName, csmparameters, customRequestHeaders, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (resourceName === null || resourceName === undefined) {
      return callback(new Error('resourceName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Backup';
    url2 = url2 + '/';
    url2 = url2 + 'BackupVault';
    url2 = url2 + '/';
    url2 = url2 + encodeURIComponent(resourceName);
    url2 = url2 + '/items';
    var queryParameters = [];
    queryParameters.push('api-version=2014-09-01');
    var odataFilter = [];
    if (csmparameters !== null && csmparameters !== undefined && csmparameters.status !== null && csmparameters.status !== undefined) {
      odataFilter.push('status eq \'' + encodeURIComponent(csmparameters.status) + '\'');
    }
    if (csmparameters !== null && csmparameters !== undefined && csmparameters.type !== null && csmparameters.type !== undefined) {
      odataFilter.push('itemType eq \'' + encodeURIComponent(csmparameters.type) + '\'');
    }
    if (odataFilter.length > 0) {
      queryParameters.push('$filter=' + odataFilter.join(' and '));
    }
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Accept-Language'] = 'en-us';
    httpRequest.headers['Content-Type'] = 'application/json';
    if (customRequestHeaders.clientRequestId !== null && customRequestHeaders.clientRequestId !== undefined) {
      httpRequest.headers['x-ms-client-request-id'] = customRequestHeaders.clientRequestId;
    }
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var cSMItemListResponseInstance = { value: [] };
          result.cSMItemListResponse = cSMItemListResponseInstance;
          
          var valueArray = responseDoc['value'];
          if (valueArray !== null && valueArray !== undefined) {
            for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var valueValue = valueArray[loweredIndex1];
              var cSMItemResponseInstance = {};
              cSMItemListResponseInstance.value.push(cSMItemResponseInstance);
              
              var propertiesValue = valueValue['properties'];
              if (propertiesValue !== null && propertiesValue !== undefined) {
                var propertiesInstance = {};
                cSMItemResponseInstance.properties = propertiesInstance;
                
                var friendlyNameValue = propertiesValue['friendlyName'];
                if (friendlyNameValue !== null && friendlyNameValue !== undefined) {
                  var friendlyNameInstance = friendlyNameValue;
                  propertiesInstance.friendlyName = friendlyNameInstance;
                }
                
                var itemTypeValue = propertiesValue['itemType'];
                if (itemTypeValue !== null && itemTypeValue !== undefined) {
                  var itemTypeInstance = itemTypeValue;
                  propertiesInstance.itemType = itemTypeInstance;
                }
                
                var statusValue = propertiesValue['status'];
                if (statusValue !== null && statusValue !== undefined) {
                  var statusInstance = statusValue;
                  propertiesInstance.status = statusInstance;
                }
                
                var containerIdValue = propertiesValue['containerId'];
                if (containerIdValue !== null && containerIdValue !== undefined) {
                  var containerIdInstance = containerIdValue;
                  propertiesInstance.containerId = containerIdInstance;
                }
              }
              
              var idValue = valueValue['id'];
              if (idValue !== null && idValue !== undefined) {
                var idInstance = idValue;
                cSMItemResponseInstance.id = idInstance;
              }
              
              var nameValue = valueValue['name'];
              if (nameValue !== null && nameValue !== undefined) {
                var nameInstance = nameValue;
                cSMItemResponseInstance.name = nameInstance;
              }
              
              var typeValue = valueValue['type'];
              if (typeValue !== null && typeValue !== undefined) {
                var typeInstance = typeValue;
                cSMItemResponseInstance.type = typeInstance;
              }
            }
          }
          
          var nextLinkValue = responseDoc['nextLink'];
          if (nextLinkValue !== null && nextLinkValue !== undefined) {
            var nextLinkInstance = nextLinkValue;
            cSMItemListResponseInstance.nextLink = nextLinkInstance;
          }
          
          var idValue2 = responseDoc['id'];
          if (idValue2 !== null && idValue2 !== undefined) {
            var idInstance2 = idValue2;
            cSMItemListResponseInstance.id = idInstance2;
          }
          
          var nameValue2 = responseDoc['name'];
          if (nameValue2 !== null && nameValue2 !== undefined) {
            var nameInstance2 = nameValue2;
            cSMItemListResponseInstance.name = nameInstance2;
          }
          
          var typeValue2 = responseDoc['type'];
          if (typeValue2 !== null && typeValue2 !== undefined) {
            var typeInstance2 = typeValue2;
            cSMItemListResponseInstance.type = typeInstance2;
          }
        }
        
      }
      result.statusCode = statusCode;
      
      return callback(null, result);
    });
  };
  
  return ProtectableObjectOperations;
})();

var RecoveryPointOperations = ( /** @lends RecoveryPointOperations */ function() {
  /**
   * @class
   * Definition of Recovery Point operations for the Azure Backup extension.
   * __NOTE__: An instance of this class is automatically created for an
   * instance of the [BackupServicesManagementClient] {@link
   * BackupServicesManagementClient~BackupServicesManagementClient}.
   * See [recoveryPoint] {@link
   * BackupServicesManagementClient~BackupServicesManagementClient#recoveryPoint}.
   * Initializes a new instance of the RecoveryPointOperations class.
   * @constructor
   * 
   * @param {BackupServicesManagementClient} client Reference to the service
   * client.
   */
  function RecoveryPointOperations(client) {
    this.client = client;
  }
  
  /**
   * Get the recovery point.
   * 
   * @param {string} resourceGroupName
   * 
   * @param {string} resourceName
   * 
   * @param {CustomRequestHeaders} [customRequestHeaders] Request header
   * parameters.
   * 
   * @param {string} [customRequestHeaders.clientRequestId] ClientRequestId is
   * a unique ID for every request to Azure Site Recovery. It is useful when
   * diagnosing failures in API calls.
   * 
   * @param {string} [containerName]
   * 
   * @param {string} [itemName]
   * 
   * @param {string} [recoveryPointName]
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  RecoveryPointOperations.prototype.get = function(resourceGroupName, resourceName, customRequestHeaders, containerName, itemName, recoveryPointName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (resourceName === null || resourceName === undefined) {
      return callback(new Error('resourceName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Backup';
    url2 = url2 + '/';
    url2 = url2 + 'BackupVault';
    url2 = url2 + '/';
    url2 = url2 + encodeURIComponent(resourceName);
    url2 = url2 + '/registeredContainers/';
    if (containerName !== null && containerName !== undefined) {
      url2 = url2 + encodeURIComponent(containerName);
    }
    url2 = url2 + '/protectedItems/';
    if (itemName !== null && itemName !== undefined) {
      url2 = url2 + encodeURIComponent(itemName);
    }
    url2 = url2 + '/recoveryPoints/';
    if (recoveryPointName !== null && recoveryPointName !== undefined) {
      url2 = url2 + encodeURIComponent(recoveryPointName);
    }
    var queryParameters = [];
    queryParameters.push('api-version=2014-09-01');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Accept-Language'] = 'en-us';
    httpRequest.headers['Content-Type'] = 'application/json';
    if (customRequestHeaders.clientRequestId !== null && customRequestHeaders.clientRequestId !== undefined) {
      httpRequest.headers['x-ms-client-request-id'] = customRequestHeaders.clientRequestId;
    }
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var cSMRecoveryPointResponseInstance = {};
          result.cSMRecoveryPointResponse = cSMRecoveryPointResponseInstance;
          
          var propertiesValue = responseDoc['properties'];
          if (propertiesValue !== null && propertiesValue !== undefined) {
            var propertiesInstance = {};
            cSMRecoveryPointResponseInstance.properties = propertiesInstance;
            
            var recoveryPointTypeValue = propertiesValue['recoveryPointType'];
            if (recoveryPointTypeValue !== null && recoveryPointTypeValue !== undefined) {
              var recoveryPointTypeInstance = recoveryPointTypeValue;
              propertiesInstance.recoveryPointType = recoveryPointTypeInstance;
            }
            
            var recoveryPointTimeValue = propertiesValue['recoveryPointTime'];
            if (recoveryPointTimeValue !== null && recoveryPointTimeValue !== undefined) {
              var recoveryPointTimeInstance = recoveryPointTimeValue;
              propertiesInstance.recoveryPointTime = recoveryPointTimeInstance;
            }
            
            var recoveryPointAdditionalInfoValue = propertiesValue['recoveryPointAdditionalInfo'];
            if (recoveryPointAdditionalInfoValue !== null && recoveryPointAdditionalInfoValue !== undefined) {
              var recoveryPointAdditionalInfoInstance = recoveryPointAdditionalInfoValue;
              propertiesInstance.recoveryPointAdditionalInfo = recoveryPointAdditionalInfoInstance;
            }
          }
          
          var idValue = responseDoc['id'];
          if (idValue !== null && idValue !== undefined) {
            var idInstance = idValue;
            cSMRecoveryPointResponseInstance.id = idInstance;
          }
          
          var nameValue = responseDoc['name'];
          if (nameValue !== null && nameValue !== undefined) {
            var nameInstance = nameValue;
            cSMRecoveryPointResponseInstance.name = nameInstance;
          }
          
          var typeValue = responseDoc['type'];
          if (typeValue !== null && typeValue !== undefined) {
            var typeInstance = typeValue;
            cSMRecoveryPointResponseInstance.type = typeInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      
      return callback(null, result);
    });
  };
  
  /**
   * Get the list of all recovery points.
   * 
   * @param {string} resourceGroupName
   * 
   * @param {string} resourceName
   * 
   * @param {CustomRequestHeaders} [customRequestHeaders] Request header
   * parameters.
   * 
   * @param {string} [customRequestHeaders.clientRequestId] ClientRequestId is
   * a unique ID for every request to Azure Site Recovery. It is useful when
   * diagnosing failures in API calls.
   * 
   * @param {string} [containerName]
   * 
   * @param {string} [itemName]
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  RecoveryPointOperations.prototype.list = function(resourceGroupName, resourceName, customRequestHeaders, containerName, itemName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (resourceName === null || resourceName === undefined) {
      return callback(new Error('resourceName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Backup';
    url2 = url2 + '/';
    url2 = url2 + 'BackupVault';
    url2 = url2 + '/';
    url2 = url2 + encodeURIComponent(resourceName);
    url2 = url2 + '/registeredContainers/';
    if (containerName !== null && containerName !== undefined) {
      url2 = url2 + encodeURIComponent(containerName);
    }
    url2 = url2 + '/protectedItems/';
    if (itemName !== null && itemName !== undefined) {
      url2 = url2 + encodeURIComponent(itemName);
    }
    url2 = url2 + '/recoveryPoints';
    var queryParameters = [];
    queryParameters.push('api-version=2014-09-01');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Accept-Language'] = 'en-us';
    httpRequest.headers['Content-Type'] = 'application/json';
    if (customRequestHeaders.clientRequestId !== null && customRequestHeaders.clientRequestId !== undefined) {
      httpRequest.headers['x-ms-client-request-id'] = customRequestHeaders.clientRequestId;
    }
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var cSMRecoveryPointListResponseInstance = { value: [] };
          result.cSMRecoveryPointListResponse = cSMRecoveryPointListResponseInstance;
          
          var valueArray = responseDoc['value'];
          if (valueArray !== null && valueArray !== undefined) {
            for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var valueValue = valueArray[loweredIndex1];
              var cSMRecoveryPointResponseInstance = {};
              cSMRecoveryPointListResponseInstance.value.push(cSMRecoveryPointResponseInstance);
              
              var propertiesValue = valueValue['properties'];
              if (propertiesValue !== null && propertiesValue !== undefined) {
                var propertiesInstance = {};
                cSMRecoveryPointResponseInstance.properties = propertiesInstance;
                
                var recoveryPointTypeValue = propertiesValue['recoveryPointType'];
                if (recoveryPointTypeValue !== null && recoveryPointTypeValue !== undefined) {
                  var recoveryPointTypeInstance = recoveryPointTypeValue;
                  propertiesInstance.recoveryPointType = recoveryPointTypeInstance;
                }
                
                var recoveryPointTimeValue = propertiesValue['recoveryPointTime'];
                if (recoveryPointTimeValue !== null && recoveryPointTimeValue !== undefined) {
                  var recoveryPointTimeInstance = recoveryPointTimeValue;
                  propertiesInstance.recoveryPointTime = recoveryPointTimeInstance;
                }
                
                var recoveryPointAdditionalInfoValue = propertiesValue['recoveryPointAdditionalInfo'];
                if (recoveryPointAdditionalInfoValue !== null && recoveryPointAdditionalInfoValue !== undefined) {
                  var recoveryPointAdditionalInfoInstance = recoveryPointAdditionalInfoValue;
                  propertiesInstance.recoveryPointAdditionalInfo = recoveryPointAdditionalInfoInstance;
                }
              }
              
              var idValue = valueValue['id'];
              if (idValue !== null && idValue !== undefined) {
                var idInstance = idValue;
                cSMRecoveryPointResponseInstance.id = idInstance;
              }
              
              var nameValue = valueValue['name'];
              if (nameValue !== null && nameValue !== undefined) {
                var nameInstance = nameValue;
                cSMRecoveryPointResponseInstance.name = nameInstance;
              }
              
              var typeValue = valueValue['type'];
              if (typeValue !== null && typeValue !== undefined) {
                var typeInstance = typeValue;
                cSMRecoveryPointResponseInstance.type = typeInstance;
              }
            }
          }
          
          var nextLinkValue = responseDoc['nextLink'];
          if (nextLinkValue !== null && nextLinkValue !== undefined) {
            var nextLinkInstance = nextLinkValue;
            cSMRecoveryPointListResponseInstance.nextLink = nextLinkInstance;
          }
          
          var idValue2 = responseDoc['id'];
          if (idValue2 !== null && idValue2 !== undefined) {
            var idInstance2 = idValue2;
            cSMRecoveryPointListResponseInstance.id = idInstance2;
          }
          
          var nameValue2 = responseDoc['name'];
          if (nameValue2 !== null && nameValue2 !== undefined) {
            var nameInstance2 = nameValue2;
            cSMRecoveryPointListResponseInstance.name = nameInstance2;
          }
          
          var typeValue2 = responseDoc['type'];
          if (typeValue2 !== null && typeValue2 !== undefined) {
            var typeInstance2 = typeValue2;
            cSMRecoveryPointListResponseInstance.type = typeInstance2;
          }
        }
        
      }
      result.statusCode = statusCode;
      
      return callback(null, result);
    });
  };
  
  return RecoveryPointOperations;
})();

var RestoreOperations = ( /** @lends RestoreOperations */ function() {
  /**
   * @class
   * Definition of Restore operations for the Azure Backup extension.
   * __NOTE__: An instance of this class is automatically created for an
   * instance of the [BackupServicesManagementClient] {@link
   * BackupServicesManagementClient~BackupServicesManagementClient}.
   * See [restore] {@link
   * BackupServicesManagementClient~BackupServicesManagementClient#restore}.
   * Initializes a new instance of the RestoreOperations class.
   * @constructor
   * 
   * @param {BackupServicesManagementClient} client Reference to the service
   * client.
   */
  function RestoreOperations(client) {
    this.client = client;
  }
  
  /**
   * Restore Azure BackUpItem.
   * 
   * @param {string} resourceGroupName
   * 
   * @param {string} resourceName
   * 
   * @param {CustomRequestHeaders} [customRequestHeaders] Request header
   * parameters.
   * 
   * @param {string} [customRequestHeaders.clientRequestId] ClientRequestId is
   * a unique ID for every request to Azure Site Recovery. It is useful when
   * diagnosing failures in API calls.
   * 
   * @param {string} [containerName]
   * 
   * @param {string} [itemName]
   * 
   * @param {string} [recoveryPointName]
   * 
   * @param {CSMRestoreRequest} [parametersOrCallback]
   * 
   * @param {CSMRestoreRequestProperties} [parametersOrCallback.properties]
   * properties for RestoreRequest.
   * 
   * @param {string} [parametersOrCallback.properties.typeOfRecovery]
   * typeOfRecovery of CSMRestoreRequestProperties.
   * 
   * @param {string}
   * [parametersOrCallback.properties.recoveryDSTypeSpecificInputs]
   * recoveryDSTypeSpecificInputs of CSMRestoreRequestProperties.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  RestoreOperations.prototype.triggerResotre = function(resourceGroupName, resourceName, customRequestHeaders, containerName, itemName, recoveryPointName, parametersOrCallback, callback) {
    var parameters = parametersOrCallback;
    if (_.isFunction(parameters)) {
      callback = parameters;
      parameters = null;
    }
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (resourceName === null || resourceName === undefined) {
      return callback(new Error('resourceName cannot be null.'));
    }
    if (parameters !== null && parameters !== undefined) {
      if (parameters.properties === null || parameters.properties === undefined) {
        return callback(new Error('parameters.properties cannot be null.'));
      }
      if (parameters.properties.recoveryDSTypeSpecificInputs === null || parameters.properties.recoveryDSTypeSpecificInputs === undefined) {
        return callback(new Error('parameters.properties.recoveryDSTypeSpecificInputs cannot be null.'));
      }
      if (parameters.properties.typeOfRecovery === null || parameters.properties.typeOfRecovery === undefined) {
        return callback(new Error('parameters.properties.typeOfRecovery cannot be null.'));
      }
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Backup';
    url2 = url2 + '/';
    url2 = url2 + 'BackupVault';
    url2 = url2 + '/';
    url2 = url2 + encodeURIComponent(resourceName);
    url2 = url2 + '/registeredContainers/';
    if (containerName !== null && containerName !== undefined) {
      url2 = url2 + encodeURIComponent(containerName);
    }
    url2 = url2 + '/protectedItems/';
    if (itemName !== null && itemName !== undefined) {
      url2 = url2 + encodeURIComponent(itemName);
    }
    url2 = url2 + '/recoveryPoints/';
    if (recoveryPointName !== null && recoveryPointName !== undefined) {
      url2 = url2 + encodeURIComponent(recoveryPointName);
    }
    url2 = url2 + '/restore';
    var queryParameters = [];
    queryParameters.push('api-version=2014-09-01');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Accept-Language'] = 'en-us';
    httpRequest.headers['Content-Type'] = 'application/json';
    if (customRequestHeaders.clientRequestId !== null && customRequestHeaders.clientRequestId !== undefined) {
      httpRequest.headers['x-ms-client-request-id'] = customRequestHeaders.clientRequestId;
    }
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = null;
    
    if (parameters !== null && parameters !== undefined) {
      var cSMRestoreRequestValue = {};
      requestDoc = cSMRestoreRequestValue;
      
      var propertiesValue = {};
      cSMRestoreRequestValue['properties'] = propertiesValue;
      
      propertiesValue['typeOfRecovery'] = parameters.properties.typeOfRecovery;
      
      propertiesValue['recoveryDSTypeSpecificInputs'] = parameters.properties.recoveryDSTypeSpecificInputs;
    }
    
    requestContent = JSON.stringify(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 202) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 202) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var operationIdInstance = responseDoc;
          result.operationId = operationIdInstance;
        }
        
      }
      result.statusCode = statusCode;
      
      return callback(null, result);
    });
  };
  
  return RestoreOperations;
})();
