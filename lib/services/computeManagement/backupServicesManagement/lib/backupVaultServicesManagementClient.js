/* jshint latedef:false */
/* jshint forin:false */
/* jshint noempty:false */

// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

'use strict';

var util = require('util');
var azureCommon = require('azure-common');
var Service = azureCommon.Service;
var WebResource = azureCommon.WebResource;

var BackupVaultServicesManagementClient = ( /** @lends BackupVaultServicesManagementClient */ function() {
  /**
   * @class
   * Initializes a new instance of the BackupVaultServicesManagementClient
   * class.
   * @constructor
   * 
   * @param {SubscriptionCloudCredentials} credentials Gets subscription
   * credentials which uniquely identify Microsoft Azure subscription. The
   * subscription ID forms part of the URI for every service call.
   * 
   * @param {string} [credentials.subscriptionId]
   * 
   * @param {string} [baseUri] Gets the URI used as the base for all cloud
   * service requests.
   * 
   * @param {Array} filters
   */
  function BackupVaultServicesManagementClient(credentials, baseUri, filters) {
    if (credentials === null || credentials === undefined) {
      throw new Error('credentials cannot be null.');
    }
    
    BackupVaultServicesManagementClient['super_'].call(this, credentials, filters);
    
    this.credentials = credentials;
    this.baseUri = baseUri;
    if (this.baseUri === null || this.baseUri === undefined) {
      this.baseUri = 'https://management.core.windows.net';
    }
    if (this.apiVersion === null || this.apiVersion === undefined) {
      this.apiVersion = '2013-03-01';
    }
    if (this.longRunningOperationInitialTimeout === null || this.longRunningOperationInitialTimeout === undefined) {
      this.longRunningOperationInitialTimeout = -1;
    }
    if (this.longRunningOperationRetryTimeout === null || this.longRunningOperationRetryTimeout === undefined) {
      this.longRunningOperationRetryTimeout = -1;
    }
    /**
     * Provides an instance of the
     * [MarsContainerOperations](-MarsContainerOperations.html) object.
     * @type {object}
     */
    this.container = new MarsContainerOperations(this);
    /**
     * Provides an instance of the [VaultOperations](-VaultOperations.html)
     * object.
     * @type {object}
     */
    this.vault = new VaultOperations(this);
  }
  
  util.inherits(BackupVaultServicesManagementClient, Service);
  
  
  return BackupVaultServicesManagementClient;
})();
exports.BackupVaultServicesManagementClient = BackupVaultServicesManagementClient;

var MarsContainerOperations = ( /** @lends MarsContainerOperations */ function() {
  /**
   * @class
   * Definition of Container operations for the Azure Backup extension.
   * __NOTE__: An instance of this class is automatically created for an
   * instance of the [BackupVaultServicesManagementClient] {@link
   * BackupVaultServicesManagementClient~BackupVaultServicesManagementClient}.
   * See [container] {@link
   * BackupVaultServicesManagementClient~BackupVaultServicesManagementClient#container}.
   * Initializes a new instance of the MarsContainerOperations class.
   * @constructor
   * 
   * @param {BackupVaultServicesManagementClient} client Reference to the
   * service client.
   */
  function MarsContainerOperations(client) {
    this.client = client;
  }
  
  /**
   * Enable the container reregistration.
   * 
   * @param {string} resourceGroupName
   * 
   * @param {string} resourceName
   * 
   * @param {string} containerId MARS container ID.
   * 
   * @param {EnableReregistrationRequest} enableReregistrationRequest Enable
   * Reregistration Request.
   * 
   * @param {ContainerReregistrationState}
   * [enableReregistrationRequest.containerReregistrationState] MARS Container
   * Reregistration State.
   * 
   * @param {boolean}
   * [enableReregistrationRequest.containerReregistrationState.enableReregistration]
   * Flag to enable container reregistration.
   * 
   * @param {CustomRequestHeaders} [customRequestHeaders] Request header
   * parameters.
   * 
   * @param {string} [customRequestHeaders.clientRequestId] ClientRequestId is
   * a unique ID for every request to Azure Site Recovery. It is useful when
   * diagnosing failures in API calls.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  MarsContainerOperations.prototype.enableMarsContainerReregistration = function(resourceGroupName, resourceName, containerId, enableReregistrationRequest, customRequestHeaders, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (resourceName === null || resourceName === undefined) {
      return callback(new Error('resourceName cannot be null.'));
    }
    if (containerId === null || containerId === undefined) {
      return callback(new Error('containerId cannot be null.'));
    }
    if (enableReregistrationRequest === null || enableReregistrationRequest === undefined) {
      return callback(new Error('enableReregistrationRequest cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/Subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Backup';
    url2 = url2 + '/';
    url2 = url2 + 'BackupVault';
    url2 = url2 + '/';
    url2 = url2 + encodeURIComponent(resourceName);
    url2 = url2 + '/backupContainers/';
    url2 = url2 + encodeURIComponent(containerId);
    url2 = url2 + '/enableReRegister';
    var queryParameters = [];
    queryParameters.push('api-version=2015-03-15');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PATCH';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Accept-Language'] = 'en-us';
    httpRequest.headers['Content-Type'] = 'application/json';
    if (customRequestHeaders.clientRequestId !== null && customRequestHeaders.clientRequestId !== undefined) {
      httpRequest.headers['x-ms-client-request-id'] = customRequestHeaders.clientRequestId;
    }
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = null;
    
    var enableReregistrationRequestValue = {};
    requestDoc = enableReregistrationRequestValue;
    
    if (enableReregistrationRequest.containerReregistrationState !== null && enableReregistrationRequest.containerReregistrationState !== undefined) {
      var propertiesValue = {};
      enableReregistrationRequestValue['properties'] = propertiesValue;
      
      if (enableReregistrationRequest.containerReregistrationState.enableReregistration !== null && enableReregistrationRequest.containerReregistrationState.enableReregistration !== undefined) {
        propertiesValue['enableReRegister'] = enableReregistrationRequest.containerReregistrationState.enableReregistration;
      }
    }
    
    requestContent = JSON.stringify(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 204) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 204) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var operationIdInstance = responseDoc;
          result.operationId = operationIdInstance;
        }
        
      }
      result.statusCode = statusCode;
      
      return callback(null, result);
    });
  };
  
  /**
   * Get the list of all container based on the given query filter string.
   * 
   * @param {string} resourceGroupName
   * 
   * @param {string} resourceName
   * 
   * @param {MarsContainerType} containerType Type of container.
   * 
   * @param {CustomRequestHeaders} [customRequestHeaders] Request header
   * parameters.
   * 
   * @param {string} [customRequestHeaders.clientRequestId] ClientRequestId is
   * a unique ID for every request to Azure Site Recovery. It is useful when
   * diagnosing failures in API calls.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  MarsContainerOperations.prototype.listMarsContainersByType = function(resourceGroupName, resourceName, containerType, customRequestHeaders, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (resourceName === null || resourceName === undefined) {
      return callback(new Error('resourceName cannot be null.'));
    }
    if (containerType === null || containerType === undefined) {
      return callback(new Error('containerType cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/Subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Backup';
    url2 = url2 + '/';
    url2 = url2 + 'BackupVault';
    url2 = url2 + '/';
    url2 = url2 + encodeURIComponent(resourceName);
    url2 = url2 + '/backupContainers';
    var queryParameters = [];
    queryParameters.push('api-version=2015-03-15');
    var odataFilter = [];
    odataFilter.push('type eq \'' + encodeURIComponent(containerType !== null && containerType !== undefined ? containerType.toString() : 'Invalid') + '\'');
    if (odataFilter.length > 0) {
      queryParameters.push('$filter=' + odataFilter.join(null));
    }
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Accept-Language'] = 'en-us';
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var listMarsContainerResponseInstance = { value: [] };
          result.listMarsContainerResponse = listMarsContainerResponseInstance;
          
          var valueArray = responseDoc['value'];
          if (valueArray !== null && valueArray !== undefined) {
            for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var valueValue = valueArray[loweredIndex1];
              var marsContainerResponseInstance = {};
              listMarsContainerResponseInstance.value.push(marsContainerResponseInstance);
              
              var uniqueNameValue = valueValue['uniqueName'];
              if (uniqueNameValue !== null && uniqueNameValue !== undefined) {
                var uniqueNameInstance = uniqueNameValue;
                marsContainerResponseInstance.uniqueName = uniqueNameInstance;
              }
              
              var containerTypeValue = valueValue['containerType'];
              if (containerTypeValue !== null && containerTypeValue !== undefined) {
                var containerTypeInstance = containerTypeValue;
                marsContainerResponseInstance.containerType = containerTypeInstance;
              }
              
              var propertiesValue = valueValue['properties'];
              if (propertiesValue !== null && propertiesValue !== undefined) {
                var propertiesInstance = {};
                marsContainerResponseInstance.properties = propertiesInstance;
                
                var containerIdValue = propertiesValue['containerId'];
                if (containerIdValue !== null && containerIdValue !== undefined) {
                  var containerIdInstance = containerIdValue;
                  propertiesInstance.containerId = containerIdInstance;
                }
                
                var friendlyNameValue = propertiesValue['friendlyName'];
                if (friendlyNameValue !== null && friendlyNameValue !== undefined) {
                  var friendlyNameInstance = friendlyNameValue;
                  propertiesInstance.friendlyName = friendlyNameInstance;
                }
                
                var containerStampIdValue = propertiesValue['containerStampId'];
                if (containerStampIdValue !== null && containerStampIdValue !== undefined) {
                  var containerStampIdInstance = containerStampIdValue;
                  propertiesInstance.containerStampId = containerStampIdInstance;
                }
                
                var containerStampUriValue = propertiesValue['containerStampUri'];
                if (containerStampUriValue !== null && containerStampUriValue !== undefined) {
                  var containerStampUriInstance = containerStampUriValue;
                  propertiesInstance.containerStampUri = containerStampUriInstance;
                }
                
                var canReRegisterValue = propertiesValue['canReRegister'];
                if (canReRegisterValue !== null && canReRegisterValue !== undefined) {
                  var canReRegisterInstance = canReRegisterValue;
                  propertiesInstance.canReRegister = canReRegisterInstance;
                }
                
                var customerTypeValue = propertiesValue['customerType'];
                if (customerTypeValue !== null && customerTypeValue !== undefined) {
                  var customerTypeInstance = customerTypeValue;
                  propertiesInstance.customerType = customerTypeInstance;
                }
              }
              
              var idValue = valueValue['id'];
              if (idValue !== null && idValue !== undefined) {
                var idInstance = idValue;
                marsContainerResponseInstance.id = idInstance;
              }
              
              var nameValue = valueValue['name'];
              if (nameValue !== null && nameValue !== undefined) {
                var nameInstance = nameValue;
                marsContainerResponseInstance.name = nameInstance;
              }
              
              var typeValue = valueValue['type'];
              if (typeValue !== null && typeValue !== undefined) {
                var typeInstance = typeValue;
                marsContainerResponseInstance.type = typeInstance;
              }
            }
          }
          
          var nextLinkValue = responseDoc['nextLink'];
          if (nextLinkValue !== null && nextLinkValue !== undefined) {
            var nextLinkInstance = nextLinkValue;
            listMarsContainerResponseInstance.nextLink = nextLinkInstance;
          }
          
          var idValue2 = responseDoc['id'];
          if (idValue2 !== null && idValue2 !== undefined) {
            var idInstance2 = idValue2;
            listMarsContainerResponseInstance.id = idInstance2;
          }
          
          var nameValue2 = responseDoc['name'];
          if (nameValue2 !== null && nameValue2 !== undefined) {
            var nameInstance2 = nameValue2;
            listMarsContainerResponseInstance.name = nameInstance2;
          }
          
          var typeValue2 = responseDoc['type'];
          if (typeValue2 !== null && typeValue2 !== undefined) {
            var typeInstance2 = typeValue2;
            listMarsContainerResponseInstance.type = typeInstance2;
          }
        }
        
      }
      result.statusCode = statusCode;
      customRequestHeaders.clientRequestId = response.headers['x-ms-client-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Get the list of all container based on the given query filter string.
   * 
   * @param {string} resourceGroupName
   * 
   * @param {string} resourceName
   * 
   * @param {MarsContainerType} containerType Type of container.
   * 
   * @param {string} friendlyName Friendly name of container.
   * 
   * @param {CustomRequestHeaders} [customRequestHeaders] Request header
   * parameters.
   * 
   * @param {string} [customRequestHeaders.clientRequestId] ClientRequestId is
   * a unique ID for every request to Azure Site Recovery. It is useful when
   * diagnosing failures in API calls.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  MarsContainerOperations.prototype.listMarsContainersByTypeAndFriendlyName = function(resourceGroupName, resourceName, containerType, friendlyName, customRequestHeaders, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (resourceName === null || resourceName === undefined) {
      return callback(new Error('resourceName cannot be null.'));
    }
    if (containerType === null || containerType === undefined) {
      return callback(new Error('containerType cannot be null.'));
    }
    if (friendlyName === null || friendlyName === undefined) {
      return callback(new Error('friendlyName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/Subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Backup';
    url2 = url2 + '/';
    url2 = url2 + 'BackupVault';
    url2 = url2 + '/';
    url2 = url2 + encodeURIComponent(resourceName);
    url2 = url2 + '/backupContainers';
    var queryParameters = [];
    queryParameters.push('api-version=2015-03-15');
    var odataFilter = [];
    odataFilter.push('type eq \'' + encodeURIComponent(containerType !== null && containerType !== undefined ? containerType.toString() : 'Invalid') + '\'');
    odataFilter.push('friendlyName eq \'' + encodeURIComponent(friendlyName) + '\'');
    if (odataFilter.length > 0) {
      queryParameters.push('$filter=' + odataFilter.join(' and '));
    }
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Accept-Language'] = 'en-us';
    httpRequest.headers['Content-Type'] = 'application/json';
    if (customRequestHeaders.clientRequestId !== null && customRequestHeaders.clientRequestId !== undefined) {
      httpRequest.headers['x-ms-client-request-id'] = customRequestHeaders.clientRequestId;
    }
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var listMarsContainerResponseInstance = { value: [] };
          result.listMarsContainerResponse = listMarsContainerResponseInstance;
          
          var valueArray = responseDoc['value'];
          if (valueArray !== null && valueArray !== undefined) {
            for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var valueValue = valueArray[loweredIndex1];
              var marsContainerResponseInstance = {};
              listMarsContainerResponseInstance.value.push(marsContainerResponseInstance);
              
              var uniqueNameValue = valueValue['uniqueName'];
              if (uniqueNameValue !== null && uniqueNameValue !== undefined) {
                var uniqueNameInstance = uniqueNameValue;
                marsContainerResponseInstance.uniqueName = uniqueNameInstance;
              }
              
              var containerTypeValue = valueValue['containerType'];
              if (containerTypeValue !== null && containerTypeValue !== undefined) {
                var containerTypeInstance = containerTypeValue;
                marsContainerResponseInstance.containerType = containerTypeInstance;
              }
              
              var propertiesValue = valueValue['properties'];
              if (propertiesValue !== null && propertiesValue !== undefined) {
                var propertiesInstance = {};
                marsContainerResponseInstance.properties = propertiesInstance;
                
                var containerIdValue = propertiesValue['containerId'];
                if (containerIdValue !== null && containerIdValue !== undefined) {
                  var containerIdInstance = containerIdValue;
                  propertiesInstance.containerId = containerIdInstance;
                }
                
                var friendlyNameValue = propertiesValue['friendlyName'];
                if (friendlyNameValue !== null && friendlyNameValue !== undefined) {
                  var friendlyNameInstance = friendlyNameValue;
                  propertiesInstance.friendlyName = friendlyNameInstance;
                }
                
                var containerStampIdValue = propertiesValue['containerStampId'];
                if (containerStampIdValue !== null && containerStampIdValue !== undefined) {
                  var containerStampIdInstance = containerStampIdValue;
                  propertiesInstance.containerStampId = containerStampIdInstance;
                }
                
                var containerStampUriValue = propertiesValue['containerStampUri'];
                if (containerStampUriValue !== null && containerStampUriValue !== undefined) {
                  var containerStampUriInstance = containerStampUriValue;
                  propertiesInstance.containerStampUri = containerStampUriInstance;
                }
                
                var canReRegisterValue = propertiesValue['canReRegister'];
                if (canReRegisterValue !== null && canReRegisterValue !== undefined) {
                  var canReRegisterInstance = canReRegisterValue;
                  propertiesInstance.canReRegister = canReRegisterInstance;
                }
                
                var customerTypeValue = propertiesValue['customerType'];
                if (customerTypeValue !== null && customerTypeValue !== undefined) {
                  var customerTypeInstance = customerTypeValue;
                  propertiesInstance.customerType = customerTypeInstance;
                }
              }
              
              var idValue = valueValue['id'];
              if (idValue !== null && idValue !== undefined) {
                var idInstance = idValue;
                marsContainerResponseInstance.id = idInstance;
              }
              
              var nameValue = valueValue['name'];
              if (nameValue !== null && nameValue !== undefined) {
                var nameInstance = nameValue;
                marsContainerResponseInstance.name = nameInstance;
              }
              
              var typeValue = valueValue['type'];
              if (typeValue !== null && typeValue !== undefined) {
                var typeInstance = typeValue;
                marsContainerResponseInstance.type = typeInstance;
              }
            }
          }
          
          var nextLinkValue = responseDoc['nextLink'];
          if (nextLinkValue !== null && nextLinkValue !== undefined) {
            var nextLinkInstance = nextLinkValue;
            listMarsContainerResponseInstance.nextLink = nextLinkInstance;
          }
          
          var idValue2 = responseDoc['id'];
          if (idValue2 !== null && idValue2 !== undefined) {
            var idInstance2 = idValue2;
            listMarsContainerResponseInstance.id = idInstance2;
          }
          
          var nameValue2 = responseDoc['name'];
          if (nameValue2 !== null && nameValue2 !== undefined) {
            var nameInstance2 = nameValue2;
            listMarsContainerResponseInstance.name = nameInstance2;
          }
          
          var typeValue2 = responseDoc['type'];
          if (typeValue2 !== null && typeValue2 !== undefined) {
            var typeInstance2 = typeValue2;
            listMarsContainerResponseInstance.type = typeInstance2;
          }
        }
        
      }
      result.statusCode = statusCode;
      
      return callback(null, result);
    });
  };
  
  /**
   * Unregister the container.
   * 
   * @param {string} resourceGroupName
   * 
   * @param {string} resourceName
   * 
   * @param {string} containerId MARS container ID.
   * 
   * @param {CustomRequestHeaders} [customRequestHeaders] Request header
   * parameters.
   * 
   * @param {string} [customRequestHeaders.clientRequestId] ClientRequestId is
   * a unique ID for every request to Azure Site Recovery. It is useful when
   * diagnosing failures in API calls.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  MarsContainerOperations.prototype.unregisterMarsContainer = function(resourceGroupName, resourceName, containerId, customRequestHeaders, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (resourceName === null || resourceName === undefined) {
      return callback(new Error('resourceName cannot be null.'));
    }
    if (containerId === null || containerId === undefined) {
      return callback(new Error('containerId cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/Subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Backup';
    url2 = url2 + '/';
    url2 = url2 + 'BackupVault';
    url2 = url2 + '/';
    url2 = url2 + encodeURIComponent(resourceName);
    url2 = url2 + '/backupContainers/';
    url2 = url2 + encodeURIComponent(containerId);
    url2 = url2 + '/UnRegisterContainer';
    var queryParameters = [];
    queryParameters.push('api-version=2015-03-15');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'DELETE';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Accept-Language'] = 'en-us';
    httpRequest.headers['Content-Type'] = 'application/json';
    if (customRequestHeaders.clientRequestId !== null && customRequestHeaders.clientRequestId !== undefined) {
      httpRequest.headers['x-ms-client-request-id'] = customRequestHeaders.clientRequestId;
    }
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 204) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 204) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var operationIdInstance = responseDoc;
          result.operationId = operationIdInstance;
        }
        
      }
      result.statusCode = statusCode;
      
      return callback(null, result);
    });
  };
  
  return MarsContainerOperations;
})();

var VaultOperations = ( /** @lends VaultOperations */ function() {
  /**
   * @class
   * Definition of Vault-related operations for the Azure Backup extension.
   * __NOTE__: An instance of this class is automatically created for an
   * instance of the [BackupVaultServicesManagementClient] {@link
   * BackupVaultServicesManagementClient~BackupVaultServicesManagementClient}.
   * See [vault] {@link
   * BackupVaultServicesManagementClient~BackupVaultServicesManagementClient#vault}.
   * Initializes a new instance of the VaultOperations class.
   * @constructor
   * 
   * @param {BackupVaultServicesManagementClient} client Reference to the
   * service client.
   */
  function VaultOperations(client) {
    this.client = client;
  }
  
  /**
   * Creates a new Azure backup vault.
   * 
   * @param {string} resourceGroupName The name of resource group to which
   * vault belongs
   * 
   * @param {string} resourceName The name of the vault
   * 
   * @param {AzureBackupVaultCreateOrUpdateParameters} parameters Parameters to
   * create or update the vault
   * 
   * @param {AzureBackupVaultProperties} parameters.properties Gets or sets the
   * properties of the vault.
   * 
   * @param {SkuProperties} [parameters.properties.sku] SKU details
   * 
   * @param {string} [parameters.properties.sku.name] SKU name
   * 
   * @param {string} [parameters.location] Gets or sets the location of the
   * resource.
   * 
   * @param {object} [parameters.tags] Gets or sets the tags attached to the
   * resource.
   * 
   * @param {CustomRequestHeaders} [customRequestHeaders] Request header
   * parameters.
   * 
   * @param {string} [customRequestHeaders.clientRequestId] ClientRequestId is
   * a unique ID for every request to Azure Site Recovery. It is useful when
   * diagnosing failures in API calls.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  VaultOperations.prototype.createOrUpdate = function(resourceGroupName, resourceName, parameters, customRequestHeaders, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (resourceName === null || resourceName === undefined) {
      return callback(new Error('resourceName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.properties === null || parameters.properties === undefined) {
      return callback(new Error('parameters.properties cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/Subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Backup';
    url2 = url2 + '/';
    url2 = url2 + 'BackupVault';
    url2 = url2 + '/';
    url2 = url2 + encodeURIComponent(resourceName);
    var queryParameters = [];
    queryParameters.push('api-version=2015-03-15');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Accept-Language'] = 'en-us';
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    if (customRequestHeaders.clientRequestId !== null && customRequestHeaders.clientRequestId !== undefined) {
      httpRequest.headers['x-ms-client-request-id'] = customRequestHeaders.clientRequestId;
    }
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = null;
    
    var azureBackupVaultCreateOrUpdateParametersValue = {};
    requestDoc = azureBackupVaultCreateOrUpdateParametersValue;
    
    var propertiesValue = {};
    azureBackupVaultCreateOrUpdateParametersValue['properties'] = propertiesValue;
    
    if (parameters.properties.sku !== null && parameters.properties.sku !== undefined) {
      var skuValue = {};
      propertiesValue['sku'] = skuValue;
      
      if (parameters.properties.sku.name !== null && parameters.properties.sku.name !== undefined) {
        skuValue['name'] = parameters.properties.sku.name;
      }
    }
    
    if (parameters.location !== null && parameters.location !== undefined) {
      azureBackupVaultCreateOrUpdateParametersValue['location'] = parameters.location;
    }
    
    if (parameters.tags !== null && parameters.tags !== undefined) {
      var tagsDictionary = {};
      for (var tagsKey in parameters.tags) {
        var tagsValue = parameters.tags[tagsKey];
        tagsDictionary[tagsKey] = tagsValue;
      }
      azureBackupVaultCreateOrUpdateParametersValue['tags'] = tagsDictionary;
    }
    
    requestContent = JSON.stringify(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200 && statusCode !== 201) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200 || statusCode === 201) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var vaultInstance = { tags: {} };
          result.vault = vaultInstance;
          
          var propertiesValue2 = responseDoc['properties'];
          if (propertiesValue2 !== null && propertiesValue2 !== undefined) {
            var propertiesInstance = {};
            vaultInstance.properties = propertiesInstance;
            
            var skuValue2 = propertiesValue2['sku'];
            if (skuValue2 !== null && skuValue2 !== undefined) {
              var skuInstance = {};
              propertiesInstance.sku = skuInstance;
              
              var nameValue = skuValue2['name'];
              if (nameValue !== null && nameValue !== undefined) {
                var nameInstance = nameValue;
                skuInstance.name = nameInstance;
              }
            }
          }
          
          var idValue = responseDoc['id'];
          if (idValue !== null && idValue !== undefined) {
            var idInstance = idValue;
            vaultInstance.id = idInstance;
          }
          
          var nameValue2 = responseDoc['name'];
          if (nameValue2 !== null && nameValue2 !== undefined) {
            var nameInstance2 = nameValue2;
            vaultInstance.name = nameInstance2;
          }
          
          var typeValue = responseDoc['type'];
          if (typeValue !== null && typeValue !== undefined) {
            var typeInstance = typeValue;
            vaultInstance.type = typeInstance;
          }
          
          var locationValue = responseDoc['location'];
          if (locationValue !== null && locationValue !== undefined) {
            var locationInstance = locationValue;
            vaultInstance.location = locationInstance;
          }
          
          var tagsSequenceElement = responseDoc['tags'];
          if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
            for (var property in tagsSequenceElement) {
              var tagsKey2 = property;
              var tagsValue2 = tagsSequenceElement[property];
              vaultInstance.tags[tagsKey2] = tagsValue2;
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      
      return callback(null, result);
    });
  };
  
  /**
   * Deletes the specified Azure backup vault.
   * 
   * @param {string} resourceGroupName The name of resource group to which
   * vault belongs
   * 
   * @param {string} resourceName The name of the vault
   * 
   * @param {CustomRequestHeaders} [customRequestHeaders] Request header
   * parameters.
   * 
   * @param {string} [customRequestHeaders.clientRequestId] ClientRequestId is
   * a unique ID for every request to Azure Site Recovery. It is useful when
   * diagnosing failures in API calls.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  VaultOperations.prototype.deleteMethod = function(resourceGroupName, resourceName, customRequestHeaders, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (resourceName === null || resourceName === undefined) {
      return callback(new Error('resourceName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/Subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Backup';
    url2 = url2 + '/';
    url2 = url2 + 'BackupVault';
    url2 = url2 + '/';
    url2 = url2 + encodeURIComponent(resourceName);
    var queryParameters = [];
    queryParameters.push('api-version=2015-03-15');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'DELETE';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Accept-Language'] = 'en-us';
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    if (customRequestHeaders.clientRequestId !== null && customRequestHeaders.clientRequestId !== undefined) {
      httpRequest.headers['x-ms-client-request-id'] = customRequestHeaders.clientRequestId;
    }
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200 && statusCode !== 204) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      result = {};
      result.statusCode = statusCode;
      
      return callback(null, result);
    });
  };
  
  /**
   * Gets the specified Azure key vault.
   * 
   * @param {string} resourceGroupName The name of resource group to which
   * vault belongs
   * 
   * @param {string} resourceName The name of the vault
   * 
   * @param {CustomRequestHeaders} [customRequestHeaders] Request header
   * parameters.
   * 
   * @param {string} [customRequestHeaders.clientRequestId] ClientRequestId is
   * a unique ID for every request to Azure Site Recovery. It is useful when
   * diagnosing failures in API calls.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  VaultOperations.prototype.get = function(resourceGroupName, resourceName, customRequestHeaders, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (resourceName === null || resourceName === undefined) {
      return callback(new Error('resourceName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/Subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Backup';
    url2 = url2 + '/';
    url2 = url2 + 'BackupVault';
    url2 = url2 + '/';
    url2 = url2 + encodeURIComponent(resourceName);
    var queryParameters = [];
    queryParameters.push('api-version=2015-03-15');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Accept-Language'] = 'en-us';
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    if (customRequestHeaders.clientRequestId !== null && customRequestHeaders.clientRequestId !== undefined) {
      httpRequest.headers['x-ms-client-request-id'] = customRequestHeaders.clientRequestId;
    }
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var vaultInstance = { tags: {} };
          result.vault = vaultInstance;
          
          var propertiesValue = responseDoc['properties'];
          if (propertiesValue !== null && propertiesValue !== undefined) {
            var propertiesInstance = {};
            vaultInstance.properties = propertiesInstance;
            
            var skuValue = propertiesValue['sku'];
            if (skuValue !== null && skuValue !== undefined) {
              var skuInstance = {};
              propertiesInstance.sku = skuInstance;
              
              var nameValue = skuValue['name'];
              if (nameValue !== null && nameValue !== undefined) {
                var nameInstance = nameValue;
                skuInstance.name = nameInstance;
              }
            }
          }
          
          var idValue = responseDoc['id'];
          if (idValue !== null && idValue !== undefined) {
            var idInstance = idValue;
            vaultInstance.id = idInstance;
          }
          
          var nameValue2 = responseDoc['name'];
          if (nameValue2 !== null && nameValue2 !== undefined) {
            var nameInstance2 = nameValue2;
            vaultInstance.name = nameInstance2;
          }
          
          var typeValue = responseDoc['type'];
          if (typeValue !== null && typeValue !== undefined) {
            var typeInstance = typeValue;
            vaultInstance.type = typeInstance;
          }
          
          var locationValue = responseDoc['location'];
          if (locationValue !== null && locationValue !== undefined) {
            var locationInstance = locationValue;
            vaultInstance.location = locationInstance;
          }
          
          var tagsSequenceElement = responseDoc['tags'];
          if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
            for (var property in tagsSequenceElement) {
              var tagsKey = property;
              var tagsValue = tagsSequenceElement[property];
              vaultInstance.tags[tagsKey] = tagsValue;
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      
      return callback(null, result);
    });
  };
  
  /**
   * Fetches resource storage config.
   * 
   * @param {string} resourceGroupName The name of resource group to which
   * vault belongs
   * 
   * @param {string} resourceName The name of the vault
   * 
   * @param {CustomRequestHeaders} [customRequestHeaders] Request header
   * parameters.
   * 
   * @param {string} [customRequestHeaders.clientRequestId] ClientRequestId is
   * a unique ID for every request to Azure Site Recovery. It is useful when
   * diagnosing failures in API calls.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  VaultOperations.prototype.getResourceStorageConfig = function(resourceGroupName, resourceName, customRequestHeaders, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (resourceName === null || resourceName === undefined) {
      return callback(new Error('resourceName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/Subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Backup';
    url2 = url2 + '/';
    url2 = url2 + 'BackupVault';
    url2 = url2 + '/';
    url2 = url2 + encodeURIComponent(resourceName);
    url2 = url2 + '/storageconfig/vaultstorageconfig';
    var queryParameters = [];
    queryParameters.push('api-version=2015-03-15');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Accept-Language'] = 'en-us';
    httpRequest.headers['Content-Type'] = 'application/json';
    if (customRequestHeaders.clientRequestId !== null && customRequestHeaders.clientRequestId !== undefined) {
      httpRequest.headers['x-ms-client-request-id'] = customRequestHeaders.clientRequestId;
    }
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var resourceIdValue = responseDoc['resourceId'];
          if (resourceIdValue !== null && resourceIdValue !== undefined) {
            var resourceIdInstance = resourceIdValue;
            result.resourceId = resourceIdInstance;
          }
          
          var propertiesValue = responseDoc['properties'];
          if (propertiesValue !== null && propertiesValue !== undefined) {
            var propertiesInstance = {};
            result.storageDetails = propertiesInstance;
            
            var storageTypeValue = propertiesValue['storageType'];
            if (storageTypeValue !== null && storageTypeValue !== undefined) {
              var storageTypeInstance = storageTypeValue;
              propertiesInstance.storageType = storageTypeInstance;
            }
            
            var storageTypeStateValue = propertiesValue['storageTypeState'];
            if (storageTypeStateValue !== null && storageTypeStateValue !== undefined) {
              var storageTypeStateInstance = storageTypeStateValue;
              propertiesInstance.storageTypeState = storageTypeStateInstance;
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      
      return callback(null, result);
    });
  };
  
  /**
   * Gets information of the backup vaults associated with subscription.
   * 
   * @param {Number} [top] Maximum number of results to return.
   * 
   * @param {CustomRequestHeaders} [customRequestHeaders] Request header
   * parameters.
   * 
   * @param {string} [customRequestHeaders.clientRequestId] ClientRequestId is
   * a unique ID for every request to Azure Site Recovery. It is useful when
   * diagnosing failures in API calls.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  VaultOperations.prototype.list = function(top, customRequestHeaders, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/Subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resources';
    var queryParameters = [];
    var odataFilter = [];
    odataFilter.push('resourceType eq \'Microsoft.Backup/BackupVault\'');
    if (odataFilter.length > 0) {
      queryParameters.push('$filter=' + odataFilter.join(null));
    }
    if (top !== null && top !== undefined) {
      queryParameters.push('$top=' + encodeURIComponent(top.toString()));
    }
    queryParameters.push('api-version=2013-03-01');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Accept-Language'] = 'en-us';
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    if (customRequestHeaders.clientRequestId !== null && customRequestHeaders.clientRequestId !== undefined) {
      httpRequest.headers['x-ms-client-request-id'] = customRequestHeaders.clientRequestId;
    }
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = { vaults: [] };
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var valueArray = responseDoc['value'];
          if (valueArray !== null && valueArray !== undefined) {
            for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var valueValue = valueArray[loweredIndex1];
              var azureBackupVaultInstance = { tags: {} };
              result.vaults.push(azureBackupVaultInstance);
              
              var propertiesValue = valueValue['properties'];
              if (propertiesValue !== null && propertiesValue !== undefined) {
                var propertiesInstance = {};
                azureBackupVaultInstance.properties = propertiesInstance;
                
                var skuValue = propertiesValue['sku'];
                if (skuValue !== null && skuValue !== undefined) {
                  var skuInstance = {};
                  propertiesInstance.sku = skuInstance;
                  
                  var nameValue = skuValue['name'];
                  if (nameValue !== null && nameValue !== undefined) {
                    var nameInstance = nameValue;
                    skuInstance.name = nameInstance;
                  }
                }
              }
              
              var idValue = valueValue['id'];
              if (idValue !== null && idValue !== undefined) {
                var idInstance = idValue;
                azureBackupVaultInstance.id = idInstance;
              }
              
              var nameValue2 = valueValue['name'];
              if (nameValue2 !== null && nameValue2 !== undefined) {
                var nameInstance2 = nameValue2;
                azureBackupVaultInstance.name = nameInstance2;
              }
              
              var typeValue = valueValue['type'];
              if (typeValue !== null && typeValue !== undefined) {
                var typeInstance = typeValue;
                azureBackupVaultInstance.type = typeInstance;
              }
              
              var locationValue = valueValue['location'];
              if (locationValue !== null && locationValue !== undefined) {
                var locationInstance = locationValue;
                azureBackupVaultInstance.location = locationInstance;
              }
              
              var tagsSequenceElement = valueValue['tags'];
              if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
                for (var property in tagsSequenceElement) {
                  var tagsKey = property;
                  var tagsValue = tagsSequenceElement[property];
                  azureBackupVaultInstance.tags[tagsKey] = tagsValue;
                }
              }
            }
          }
          
          var nextLinkValue = responseDoc['nextLink'];
          if (nextLinkValue !== null && nextLinkValue !== undefined) {
            var nextLinkInstance = nextLinkValue;
            result.nextLink = nextLinkInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      
      return callback(null, result);
    });
  };
  
  /**
   * Gets information of the backup vaults associated with resource group.
   * 
   * @param {string} [resourceGroupName] An optional argument which specifies
   * the name of the resource group that constrains the set of vaults that are
   * returned.
   * 
   * @param {Number} [top] Maximum number of results to return.
   * 
   * @param {CustomRequestHeaders} [customRequestHeaders] Request header
   * parameters.
   * 
   * @param {string} [customRequestHeaders.clientRequestId] ClientRequestId is
   * a unique ID for every request to Azure Site Recovery. It is useful when
   * diagnosing failures in API calls.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  VaultOperations.prototype.listByResourceGroup = function(resourceGroupName, top, customRequestHeaders, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/Subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    if (resourceGroupName !== null && resourceGroupName !== undefined) {
      url2 = url2 + encodeURIComponent(resourceGroupName);
    }
    url2 = url2 + '/resources';
    var queryParameters = [];
    var odataFilter = [];
    odataFilter.push('resourceType eq \'Microsoft.Backup/BackupVault\'');
    if (odataFilter.length > 0) {
      queryParameters.push('$filter=' + odataFilter.join(null));
    }
    if (top !== null && top !== undefined) {
      queryParameters.push('$top=' + encodeURIComponent(top.toString()));
    }
    queryParameters.push('api-version=2013-03-01');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Accept-Language'] = 'en-us';
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    if (customRequestHeaders.clientRequestId !== null && customRequestHeaders.clientRequestId !== undefined) {
      httpRequest.headers['x-ms-client-request-id'] = customRequestHeaders.clientRequestId;
    }
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = { vaults: [] };
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var valueArray = responseDoc['value'];
          if (valueArray !== null && valueArray !== undefined) {
            for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var valueValue = valueArray[loweredIndex1];
              var azureBackupVaultInstance = { tags: {} };
              result.vaults.push(azureBackupVaultInstance);
              
              var propertiesValue = valueValue['properties'];
              if (propertiesValue !== null && propertiesValue !== undefined) {
                var propertiesInstance = {};
                azureBackupVaultInstance.properties = propertiesInstance;
                
                var skuValue = propertiesValue['sku'];
                if (skuValue !== null && skuValue !== undefined) {
                  var skuInstance = {};
                  propertiesInstance.sku = skuInstance;
                  
                  var nameValue = skuValue['name'];
                  if (nameValue !== null && nameValue !== undefined) {
                    var nameInstance = nameValue;
                    skuInstance.name = nameInstance;
                  }
                }
              }
              
              var idValue = valueValue['id'];
              if (idValue !== null && idValue !== undefined) {
                var idInstance = idValue;
                azureBackupVaultInstance.id = idInstance;
              }
              
              var nameValue2 = valueValue['name'];
              if (nameValue2 !== null && nameValue2 !== undefined) {
                var nameInstance2 = nameValue2;
                azureBackupVaultInstance.name = nameInstance2;
              }
              
              var typeValue = valueValue['type'];
              if (typeValue !== null && typeValue !== undefined) {
                var typeInstance = typeValue;
                azureBackupVaultInstance.type = typeInstance;
              }
              
              var locationValue = valueValue['location'];
              if (locationValue !== null && locationValue !== undefined) {
                var locationInstance = locationValue;
                azureBackupVaultInstance.location = locationInstance;
              }
              
              var tagsSequenceElement = valueValue['tags'];
              if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
                for (var property in tagsSequenceElement) {
                  var tagsKey = property;
                  var tagsValue = tagsSequenceElement[property];
                  azureBackupVaultInstance.tags[tagsKey] = tagsValue;
                }
              }
            }
          }
          
          var nextLinkValue = responseDoc['nextLink'];
          if (nextLinkValue !== null && nextLinkValue !== undefined) {
            var nextLinkInstance = nextLinkValue;
            result.nextLink = nextLinkInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      
      return callback(null, result);
    });
  };
  
  /**
   * Updates vault storage model type.
   * 
   * @param {string} resourceGroupName
   * 
   * @param {string} resourceName
   * 
   * @param {UpdateVaultStorageTypeRequest} updateVaultStorageTypeRequest
   * Update Vault Storage Type Request
   * 
   * @param {StorageTypeProperties}
   * updateVaultStorageTypeRequest.storageTypeProperties Storage type
   * properties.
   * 
   * @param {string}
   * [updateVaultStorageTypeRequest.storageTypeProperties.storageModelType]
   * Gets or sets the storage model type.
   * 
   * @param {CustomRequestHeaders} [customRequestHeaders] Request header
   * parameters.
   * 
   * @param {string} [customRequestHeaders.clientRequestId] ClientRequestId is
   * a unique ID for every request to Azure Site Recovery. It is useful when
   * diagnosing failures in API calls.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  VaultOperations.prototype.updateStorageType = function(resourceGroupName, resourceName, updateVaultStorageTypeRequest, customRequestHeaders, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (resourceName === null || resourceName === undefined) {
      return callback(new Error('resourceName cannot be null.'));
    }
    if (updateVaultStorageTypeRequest === null || updateVaultStorageTypeRequest === undefined) {
      return callback(new Error('updateVaultStorageTypeRequest cannot be null.'));
    }
    if (updateVaultStorageTypeRequest.storageTypeProperties === null || updateVaultStorageTypeRequest.storageTypeProperties === undefined) {
      return callback(new Error('updateVaultStorageTypeRequest.storageTypeProperties cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/Subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Backup';
    url2 = url2 + '/';
    url2 = url2 + 'BackupVault';
    url2 = url2 + '/';
    url2 = url2 + encodeURIComponent(resourceName);
    url2 = url2 + '/storageconfig/vaultstorageconfig';
    var queryParameters = [];
    queryParameters.push('api-version=2015-03-15');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PATCH';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Accept-Language'] = 'en-us';
    httpRequest.headers['Content-Type'] = 'application/json';
    if (customRequestHeaders.clientRequestId !== null && customRequestHeaders.clientRequestId !== undefined) {
      httpRequest.headers['x-ms-client-request-id'] = customRequestHeaders.clientRequestId;
    }
    httpRequest.headers['x-ms-version'] = '2013-03-01';
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = null;
    
    var updateVaultStorageTypeRequestValue = {};
    requestDoc = updateVaultStorageTypeRequestValue;
    
    var propertiesValue = {};
    updateVaultStorageTypeRequestValue['properties'] = propertiesValue;
    
    if (updateVaultStorageTypeRequest.storageTypeProperties.storageModelType !== null && updateVaultStorageTypeRequest.storageTypeProperties.storageModelType !== undefined) {
      propertiesValue['storageModelType'] = updateVaultStorageTypeRequest.storageTypeProperties.storageModelType;
    }
    
    requestContent = JSON.stringify(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 204) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 204) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var operationIdInstance = responseDoc;
          result.operationId = operationIdInstance;
        }
        
      }
      result.statusCode = statusCode;
      
      return callback(null, result);
    });
  };
  
  /**
   * Uploads vault credential certificate.
   * 
   * @param {string} resourceGroupName
   * 
   * @param {string} resourceName
   * 
   * @param {string} certificateName Name of the certificate.
   * 
   * @param {VaultCredUploadCertRequest} vaultCredUploadCertRequest Certificate
   * parameters.
   * 
   * @param {RawCertificateData} vaultCredUploadCertRequest.rawCertificateData
   * Certificate properties.
   * 
   * @param {string}
   * [vaultCredUploadCertRequest.rawCertificateData.certificate] Gets or sets
   * the base64 encoded certificate raw data string.
   * 
   * @param {CustomRequestHeaders} [customRequestHeaders] Request header
   * parameters.
   * 
   * @param {string} [customRequestHeaders.clientRequestId] ClientRequestId is
   * a unique ID for every request to Azure Site Recovery. It is useful when
   * diagnosing failures in API calls.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  VaultOperations.prototype.uploadCertificate = function(resourceGroupName, resourceName, certificateName, vaultCredUploadCertRequest, customRequestHeaders, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (resourceName === null || resourceName === undefined) {
      return callback(new Error('resourceName cannot be null.'));
    }
    if (certificateName === null || certificateName === undefined) {
      return callback(new Error('certificateName cannot be null.'));
    }
    if (vaultCredUploadCertRequest === null || vaultCredUploadCertRequest === undefined) {
      return callback(new Error('vaultCredUploadCertRequest cannot be null.'));
    }
    if (vaultCredUploadCertRequest.rawCertificateData === null || vaultCredUploadCertRequest.rawCertificateData === undefined) {
      return callback(new Error('vaultCredUploadCertRequest.rawCertificateData cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/Subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Backup';
    url2 = url2 + '/';
    url2 = url2 + 'BackupVault';
    url2 = url2 + '/';
    url2 = url2 + encodeURIComponent(resourceName);
    url2 = url2 + '/certificates/';
    url2 = url2 + encodeURIComponent(certificateName);
    var queryParameters = [];
    queryParameters.push('api-version=2015-03-15');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Accept-Language'] = 'en-us';
    httpRequest.headers['Content-Type'] = 'application/json';
    if (customRequestHeaders.clientRequestId !== null && customRequestHeaders.clientRequestId !== undefined) {
      httpRequest.headers['x-ms-client-request-id'] = customRequestHeaders.clientRequestId;
    }
    httpRequest.headers['x-ms-version'] = '2013-03-01';
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = null;
    
    var vaultCredUploadCertRequestValue = {};
    requestDoc = vaultCredUploadCertRequestValue;
    
    var propertiesValue = {};
    vaultCredUploadCertRequestValue['properties'] = propertiesValue;
    
    if (vaultCredUploadCertRequest.rawCertificateData.certificate !== null && vaultCredUploadCertRequest.rawCertificateData.certificate !== undefined) {
      propertiesValue['certificate'] = vaultCredUploadCertRequest.rawCertificateData.certificate;
    }
    
    requestContent = JSON.stringify(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var propertiesValue2 = responseDoc['properties'];
          if (propertiesValue2 !== null && propertiesValue2 !== undefined) {
            var propertiesInstance = {};
            result.resourceCertificateAndACSDetails = propertiesInstance;
            
            var certificateValue = propertiesValue2['certificate'];
            if (certificateValue !== null && certificateValue !== undefined) {
              var certificateInstance = certificateValue;
              propertiesInstance.certificate = certificateInstance;
            }
            
            var resourceIdValue = propertiesValue2['resourceId'];
            if (resourceIdValue !== null && resourceIdValue !== undefined) {
              var resourceIdInstance = resourceIdValue;
              propertiesInstance.resourceId = resourceIdInstance;
            }
            
            var globalAcsNamespaceValue = propertiesValue2['globalAcsNamespace'];
            if (globalAcsNamespaceValue !== null && globalAcsNamespaceValue !== undefined) {
              var globalAcsNamespaceInstance = globalAcsNamespaceValue;
              propertiesInstance.globalAcsNamespace = globalAcsNamespaceInstance;
            }
            
            var globalAcsHostNameValue = propertiesValue2['globalAcsHostName'];
            if (globalAcsHostNameValue !== null && globalAcsHostNameValue !== undefined) {
              var globalAcsHostNameInstance = globalAcsHostNameValue;
              propertiesInstance.globalAcsHostName = globalAcsHostNameInstance;
            }
            
            var globalAcsRPRealmValue = propertiesValue2['globalAcsRPRealm'];
            if (globalAcsRPRealmValue !== null && globalAcsRPRealmValue !== undefined) {
              var globalAcsRPRealmInstance = globalAcsRPRealmValue;
              propertiesInstance.globalAcsRPRealm = globalAcsRPRealmInstance;
            }
            
            var subjectValue = propertiesValue2['subject'];
            if (subjectValue !== null && subjectValue !== undefined) {
              var subjectInstance = subjectValue;
              propertiesInstance.subject = subjectInstance;
            }
            
            var validFromValue = propertiesValue2['validFrom'];
            if (validFromValue !== null && validFromValue !== undefined) {
              var validFromInstance = validFromValue;
              propertiesInstance.validFrom = validFromInstance;
            }
            
            var validToValue = propertiesValue2['validTo'];
            if (validToValue !== null && validToValue !== undefined) {
              var validToInstance = validToValue;
              propertiesInstance.validTo = validToInstance;
            }
            
            var thumbprintValue = propertiesValue2['thumbprint'];
            if (thumbprintValue !== null && thumbprintValue !== undefined) {
              var thumbprintInstance = thumbprintValue;
              propertiesInstance.thumbprint = thumbprintInstance;
            }
            
            var friendlyNameValue = propertiesValue2['friendlyName'];
            if (friendlyNameValue !== null && friendlyNameValue !== undefined) {
              var friendlyNameInstance = friendlyNameValue;
              propertiesInstance.friendlyName = friendlyNameInstance;
            }
            
            var issuerValue = propertiesValue2['issuer'];
            if (issuerValue !== null && issuerValue !== undefined) {
              var issuerInstance = issuerValue;
              propertiesInstance.issuer = issuerInstance;
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      
      return callback(null, result);
    });
  };
  
  return VaultOperations;
})();
