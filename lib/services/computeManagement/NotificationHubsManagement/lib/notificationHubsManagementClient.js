/* jshint latedef:false */
/* jshint forin:false */
/* jshint noempty:false */

// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

'use strict';

var util = require('util');
var azureCommon = require('azure-common');
var Service = azureCommon.Service;
var WebResource = azureCommon.WebResource;
var OperationStatus = azureCommon.OperationStatus;

var NotificationHubsManagementClient = ( /** @lends NotificationHubsManagementClient */ function() {
  /**
   * @class
   * .Net client wrapper for the REST API for Azure NotificationHub Service
   * Initializes a new instance of the NotificationHubsManagementClient class.
   * @constructor
   * 
   * @param {SubscriptionCloudCredentials} credentials Gets subscription
   * credentials which uniquely identify Microsoft Azure subscription. The
   * subscription ID forms part of the URI for every service call.
   * 
   * @param {string} [credentials.subscriptionId]
   * 
   * @param {string} [baseUri] Gets the URI used as the base for all cloud
   * service requests.
   * 
   * @param {Array} filters
   */
  function NotificationHubsManagementClient(credentials, baseUri, filters) {
    if (credentials === null || credentials === undefined) {
      throw new Error('credentials cannot be null.');
    }
    
    NotificationHubsManagementClient['super_'].call(this, credentials, filters);
    
    this.credentials = credentials;
    this.baseUri = baseUri;
    if (this.baseUri === null || this.baseUri === undefined) {
      this.baseUri = 'https://management.azure.com';
    }
    if (this.apiVersion === null || this.apiVersion === undefined) {
      this.apiVersion = '2014-09-01';
    }
    if (this.longRunningOperationInitialTimeout === null || this.longRunningOperationInitialTimeout === undefined) {
      this.longRunningOperationInitialTimeout = -1;
    }
    if (this.longRunningOperationRetryTimeout === null || this.longRunningOperationRetryTimeout === undefined) {
      this.longRunningOperationRetryTimeout = -1;
    }
    /**
     * Provides an instance of the
     * [NamespaceOperations](-NamespaceOperations.html) object.
     * @type {object}
     */
    this.namespaces = new NamespaceOperations(this);
    /**
     * Provides an instance of the
     * [NotificationHubOperations](-NotificationHubOperations.html) object.
     * @type {object}
     */
    this.notificationHubs = new NotificationHubOperations(this);
  }
  
  util.inherits(NotificationHubsManagementClient, Service);
  
  
  return NotificationHubsManagementClient;
})();
exports.NotificationHubsManagementClient = NotificationHubsManagementClient;

var NamespaceOperations = ( /** @lends NamespaceOperations */ function() {
  /**
   * @class
   * The Management API includes operations for managing NotificationHub only
   * namespaces.
   * __NOTE__: An instance of this class is automatically created for an
   * instance of the [NotificationHubsManagementClient] {@link
   * NotificationHubsManagementClient~NotificationHubsManagementClient}.
   * See [namespaces] {@link
   * NotificationHubsManagementClient~NotificationHubsManagementClient#namespaces}.
   * Initializes a new instance of the NamespaceOperations class.
   * @constructor
   * 
   * @param {NotificationHubsManagementClient} client Reference to the service
   * client.
   */
  function NamespaceOperations(client) {
    this.client = client;
  }
  
  /**
   * Deletes an existing namespace. This operation also removes all associated
   * notificationHubs under the namespace.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/jj856296.aspx for
   * more information)
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} namespaceName The namespace name.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  NamespaceOperations.prototype.beginDelete = function(resourceGroupName, namespaceName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (namespaceName === null || namespaceName === undefined) {
      return callback(new Error('namespaceName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.NotificationHubs';
    url2 = url2 + '/namespaces/';
    url2 = url2 + encodeURIComponent(namespaceName);
    var queryParameters = [];
    queryParameters.push('api-version=2014-09-01');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'DELETE';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200 && statusCode !== 202 && statusCode !== 204) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      result = {};
      result.statusCode = statusCode;
      result.operationStatusLink = response.headers['location'];
      result.retryAfter = parseInt(response.headers['retry-after'], 10);
      result.requestId = response.headers['x-ms-request-id'];
      if (statusCode === 400) {
        result.status = OperationStatus.Failed;
      }
      if (statusCode === 200) {
        result.status = OperationStatus.Succeeded;
      }
      
      return callback(null, result);
    });
  };
  
  /**
   * Checks the availability of the given service namespace across all Windows
   * Azure subscriptions. This is useful because the domain name is created
   * based on the service namespace name.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/jj870968.aspx for
   * more information)
   * 
   * @param {CheckAvailabilityParameters} parameters The namespace name.
   * 
   * @param {string} parameters.name Gets or sets name
   * 
   * @param {string} [parameters.location] Gets or sets location.
   * 
   * @param {object} [parameters.tags] Gets or sets tags.
   * 
   * @param {boolean} [parameters.isAvailable] Gets or sets true if the name is
   * available and can be used to create new Namespace/NotificationHub.
   * Otherwise false.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  NamespaceOperations.prototype.checkAvailability = function(parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.name === null || parameters.name === undefined) {
      return callback(new Error('parameters.name cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.NotificationHubs';
    url2 = url2 + '/checkNamespaceAvailability';
    var queryParameters = [];
    queryParameters.push('api-version=2014-09-01');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = null;
    
    var checkAvailabilityParametersValue = {};
    requestDoc = checkAvailabilityParametersValue;
    
    checkAvailabilityParametersValue['name'] = parameters.name;
    
    if (parameters.location !== null && parameters.location !== undefined) {
      checkAvailabilityParametersValue['location'] = parameters.location;
    }
    
    if (parameters.tags !== null && parameters.tags !== undefined) {
      var tagsDictionary = {};
      for (var tagsKey in parameters.tags) {
        var tagsValue = parameters.tags[tagsKey];
        tagsDictionary[tagsKey] = tagsValue;
      }
      checkAvailabilityParametersValue['tags'] = tagsDictionary;
    }
    
    if (parameters.isAvailable !== null && parameters.isAvailable !== undefined) {
      checkAvailabilityParametersValue['isAvailiable'] = parameters.isAvailable;
    }
    
    requestContent = JSON.stringify(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var valueInstance = { tags: {} };
          result.value = valueInstance;
          
          var idValue = responseDoc['id'];
          if (idValue !== null && idValue !== undefined) {
            var idInstance = idValue;
            valueInstance.id = idInstance;
          }
          
          var locationValue = responseDoc['location'];
          if (locationValue !== null && locationValue !== undefined) {
            var locationInstance = locationValue;
            valueInstance.location = locationInstance;
          }
          
          var nameValue = responseDoc['name'];
          if (nameValue !== null && nameValue !== undefined) {
            var nameInstance = nameValue;
            valueInstance.name = nameInstance;
          }
          
          var typeValue = responseDoc['type'];
          if (typeValue !== null && typeValue !== undefined) {
            var typeInstance = typeValue;
            valueInstance.type = typeInstance;
          }
          
          var tagsSequenceElement = responseDoc['tags'];
          if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
            for (var property in tagsSequenceElement) {
              var tagsKey2 = property;
              var tagsValue2 = tagsSequenceElement[property];
              valueInstance.tags[tagsKey2] = tagsValue2;
            }
          }
          
          var isAvailiableValue = responseDoc['isAvailiable'];
          if (isAvailiableValue !== null && isAvailiableValue !== undefined) {
            var isAvailiableInstance = isAvailiableValue;
            valueInstance.isAvailable = isAvailiableInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Creates/Updates a service namespace. Once created, this namespace's
   * resource manifest is immutable. This operation is idempotent.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/jj856303.aspx for
   * more information)
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} namespaceName The namespace name.
   * 
   * @param {NamespaceCreateOrUpdateParameters} parameters Parameters supplied
   * to the create a Namespace Resource.
   * 
   * @param {string} parameters.location Gets or sets Namespace data center
   * location.
   * 
   * @param {object} [parameters.tags] Gets or sets Namespace tags.
   * 
   * @param {NamespaceProperties} parameters.properties Gets or sets properties
   * of the Namespace.
   * 
   * @param {string} [parameters.properties.name] The name of the namespace.
   * 
   * @param {string} [parameters.properties.provisioningState] Gets or sets
   * provisioning state of the Namespace.
   * 
   * @param {string} [parameters.properties.region] Specifies the targeted
   * region in which the namespace should be created. It can be any of the
   * following values: Australia EastAustralia SoutheastCentral USEast USEast
   * US 2West USNorth Central USSouth Central USEast AsiaSoutheast AsiaBrazil
   * SouthJapan EastJapan WestNorth EuropeWest Europe
   * 
   * @param {string} [parameters.properties.status] Status of the namespace. It
   * can be any of these values:1 = Created/Active2 = Creating3 = Suspended4 =
   * Deleting
   * 
   * @param {date} [parameters.properties.createdAt] The time the namespace was
   * created.
   * 
   * @param {string} [parameters.properties.serviceBusEndpoint] Endpoint you
   * can use to perform NotificationHub operations.
   * 
   * @param {string} [parameters.properties.subscriptionId] The Id of the Azure
   * subscription associated with the namespace.
   * 
   * @param {string} [parameters.properties.scaleUnit] ScaleUnit where the
   * namespace gets created
   * 
   * @param {boolean} [parameters.properties.enabled] Whether or not the
   * namespace is currently enabled.
   * 
   * @param {boolean} [parameters.properties.critical] Whether or not the
   * namespace is set as Critical.
   * 
   * @param {NamespaceType} [parameters.properties.namespaceType] Gets or sets
   * the namespace type.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  NamespaceOperations.prototype.createOrUpdate = function(resourceGroupName, namespaceName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (namespaceName === null || namespaceName === undefined) {
      return callback(new Error('namespaceName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.location === null || parameters.location === undefined) {
      return callback(new Error('parameters.location cannot be null.'));
    }
    if (parameters.properties === null || parameters.properties === undefined) {
      return callback(new Error('parameters.properties cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.NotificationHubs';
    url2 = url2 + '/namespaces/';
    url2 = url2 + encodeURIComponent(namespaceName);
    var queryParameters = [];
    queryParameters.push('api-version=2014-09-01');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = null;
    
    var namespaceCreateOrUpdateParametersValue = {};
    requestDoc = namespaceCreateOrUpdateParametersValue;
    
    namespaceCreateOrUpdateParametersValue['location'] = parameters.location;
    
    if (parameters.tags !== null && parameters.tags !== undefined) {
      var tagsDictionary = {};
      for (var tagsKey in parameters.tags) {
        var tagsValue = parameters.tags[tagsKey];
        tagsDictionary[tagsKey] = tagsValue;
      }
      namespaceCreateOrUpdateParametersValue['tags'] = tagsDictionary;
    }
    
    var propertiesValue = {};
    namespaceCreateOrUpdateParametersValue['properties'] = propertiesValue;
    
    if (parameters.properties.name !== null && parameters.properties.name !== undefined) {
      propertiesValue['name'] = parameters.properties.name;
    }
    
    if (parameters.properties.provisioningState !== null && parameters.properties.provisioningState !== undefined) {
      propertiesValue['provisioningState'] = parameters.properties.provisioningState;
    }
    
    if (parameters.properties.region !== null && parameters.properties.region !== undefined) {
      propertiesValue['region'] = parameters.properties.region;
    }
    
    if (parameters.properties.status !== null && parameters.properties.status !== undefined) {
      propertiesValue['status'] = parameters.properties.status;
    }
    
    if (parameters.properties.createdAt !== null && parameters.properties.createdAt !== undefined) {
      propertiesValue['createdAt'] = parameters.properties.createdAt;
    }
    
    if (parameters.properties.serviceBusEndpoint !== null && parameters.properties.serviceBusEndpoint !== undefined) {
      propertiesValue['serviceBusEndpoint'] = parameters.properties.serviceBusEndpoint;
    }
    
    if (parameters.properties.subscriptionId !== null && parameters.properties.subscriptionId !== undefined) {
      propertiesValue['subscriptionId'] = parameters.properties.subscriptionId;
    }
    
    if (parameters.properties.scaleUnit !== null && parameters.properties.scaleUnit !== undefined) {
      propertiesValue['scaleUnit'] = parameters.properties.scaleUnit;
    }
    
    if (parameters.properties.enabled !== null && parameters.properties.enabled !== undefined) {
      propertiesValue['enabled'] = parameters.properties.enabled;
    }
    
    if (parameters.properties.critical !== null && parameters.properties.critical !== undefined) {
      propertiesValue['critical'] = parameters.properties.critical;
    }
    
    if (parameters.properties.namespaceType !== null && parameters.properties.namespaceType !== undefined) {
      propertiesValue['namespaceType'] = parameters.properties.namespaceType !== null && parameters.properties.namespaceType !== undefined ? parameters.properties.namespaceType.toString() : 'Messaging';
    }
    
    requestContent = JSON.stringify(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200 && statusCode !== 201) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200 || statusCode === 201) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var valueInstance = { tags: {} };
          result.value = valueInstance;
          
          var idValue = responseDoc['id'];
          if (idValue !== null && idValue !== undefined) {
            var idInstance = idValue;
            valueInstance.id = idInstance;
          }
          
          var locationValue = responseDoc['location'];
          if (locationValue !== null && locationValue !== undefined) {
            var locationInstance = locationValue;
            valueInstance.location = locationInstance;
          }
          
          var nameValue = responseDoc['name'];
          if (nameValue !== null && nameValue !== undefined) {
            var nameInstance = nameValue;
            valueInstance.name = nameInstance;
          }
          
          var typeValue = responseDoc['type'];
          if (typeValue !== null && typeValue !== undefined) {
            var typeInstance = typeValue;
            valueInstance.type = typeInstance;
          }
          
          var tagsSequenceElement = responseDoc['tags'];
          if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
            for (var property in tagsSequenceElement) {
              var tagsKey2 = property;
              var tagsValue2 = tagsSequenceElement[property];
              valueInstance.tags[tagsKey2] = tagsValue2;
            }
          }
          
          var propertiesValue2 = responseDoc['properties'];
          if (propertiesValue2 !== null && propertiesValue2 !== undefined) {
            var propertiesInstance = {};
            valueInstance.properties = propertiesInstance;
            
            var nameValue2 = propertiesValue2['name'];
            if (nameValue2 !== null && nameValue2 !== undefined) {
              var nameInstance2 = nameValue2;
              propertiesInstance.name = nameInstance2;
            }
            
            var provisioningStateValue = propertiesValue2['provisioningState'];
            if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
              var provisioningStateInstance = provisioningStateValue;
              propertiesInstance.provisioningState = provisioningStateInstance;
            }
            
            var regionValue = propertiesValue2['region'];
            if (regionValue !== null && regionValue !== undefined) {
              var regionInstance = regionValue;
              propertiesInstance.region = regionInstance;
            }
            
            var statusValue = propertiesValue2['status'];
            if (statusValue !== null && statusValue !== undefined) {
              var statusInstance = statusValue;
              propertiesInstance.status = statusInstance;
            }
            
            var createdAtValue = propertiesValue2['createdAt'];
            if (createdAtValue !== null && createdAtValue !== undefined) {
              var createdAtInstance = createdAtValue;
              propertiesInstance.createdAt = createdAtInstance;
            }
            
            var serviceBusEndpointValue = propertiesValue2['serviceBusEndpoint'];
            if (serviceBusEndpointValue !== null && serviceBusEndpointValue !== undefined) {
              var serviceBusEndpointInstance = serviceBusEndpointValue;
              propertiesInstance.serviceBusEndpoint = serviceBusEndpointInstance;
            }
            
            var subscriptionIdValue = propertiesValue2['subscriptionId'];
            if (subscriptionIdValue !== null && subscriptionIdValue !== undefined) {
              var subscriptionIdInstance = subscriptionIdValue;
              propertiesInstance.subscriptionId = subscriptionIdInstance;
            }
            
            var scaleUnitValue = propertiesValue2['scaleUnit'];
            if (scaleUnitValue !== null && scaleUnitValue !== undefined) {
              var scaleUnitInstance = scaleUnitValue;
              propertiesInstance.scaleUnit = scaleUnitInstance;
            }
            
            var enabledValue = propertiesValue2['enabled'];
            if (enabledValue !== null && enabledValue !== undefined) {
              var enabledInstance = enabledValue;
              propertiesInstance.enabled = enabledInstance;
            }
            
            var criticalValue = propertiesValue2['critical'];
            if (criticalValue !== null && criticalValue !== undefined) {
              var criticalInstance = criticalValue;
              propertiesInstance.critical = criticalInstance;
            }
            
            var namespaceTypeValue = propertiesValue2['namespaceType'];
            if (namespaceTypeValue !== null && namespaceTypeValue !== undefined) {
              var namespaceTypeInstance = namespaceTypeValue;
              propertiesInstance.namespaceType = namespaceTypeInstance;
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The create namespace authorization rule operation creates an authorization
   * rule for a namespace
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} namespaceName The namespace name.
   * 
   * @param {string} authorizationRuleName The namespace authorizationRuleName
   * name.
   * 
   * @param {SharedAccessAuthorizationRuleCreateOrUpdateParameters} parameters
   * The shared access authorization rule.
   * 
   * @param {string} [parameters.location] Gets or sets Namespace data center
   * location.
   * 
   * @param {string} [parameters.name] Gets or sets Name of the Namespace
   * AuthorizationRule.
   * 
   * @param {SharedAccessAuthorizationRuleProperties} parameters.properties
   * Gets or sets properties of the Namespace AuthorizationRules.
   * 
   * @param {string} [parameters.properties.primaryKey] The primary key that
   * was used.
   * 
   * @param {string} [parameters.properties.secondaryKey] The secondary key
   * that was used.
   * 
   * @param {string} [parameters.properties.keyName] The name of the key that
   * was used.
   * 
   * @param {string} [parameters.properties.claimType] The type of the claim.
   * 
   * @param {string} [parameters.properties.claimValue] The value of the claim.
   * 
   * @param {array} [parameters.properties.rights] The rights associated with
   * the rule.
   * 
   * @param {date} [parameters.properties.createdTime] The time at which the
   * authorization rule was created.
   * 
   * @param {date} [parameters.properties.modifiedTime] The most recent time
   * the rule was updated.
   * 
   * @param {number} [parameters.properties.revision] The revision number for
   * the rule.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  NamespaceOperations.prototype.createOrUpdateAuthorizationRule = function(resourceGroupName, namespaceName, authorizationRuleName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (namespaceName === null || namespaceName === undefined) {
      return callback(new Error('namespaceName cannot be null.'));
    }
    if (authorizationRuleName === null || authorizationRuleName === undefined) {
      return callback(new Error('authorizationRuleName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.properties === null || parameters.properties === undefined) {
      return callback(new Error('parameters.properties cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.NotificationHubs';
    url2 = url2 + '/namespaces/';
    url2 = url2 + encodeURIComponent(namespaceName);
    url2 = url2 + '/AuthorizationRules/';
    url2 = url2 + encodeURIComponent(authorizationRuleName);
    var queryParameters = [];
    queryParameters.push('api-version=2014-09-01');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = null;
    
    var sharedAccessAuthorizationRuleCreateOrUpdateParametersValue = {};
    requestDoc = sharedAccessAuthorizationRuleCreateOrUpdateParametersValue;
    
    if (parameters.location !== null && parameters.location !== undefined) {
      sharedAccessAuthorizationRuleCreateOrUpdateParametersValue['location'] = parameters.location;
    }
    
    if (parameters.name !== null && parameters.name !== undefined) {
      sharedAccessAuthorizationRuleCreateOrUpdateParametersValue['name'] = parameters.name;
    }
    
    var propertiesValue = {};
    sharedAccessAuthorizationRuleCreateOrUpdateParametersValue['properties'] = propertiesValue;
    
    if (parameters.properties.primaryKey !== null && parameters.properties.primaryKey !== undefined) {
      propertiesValue['primaryKey'] = parameters.properties.primaryKey;
    }
    
    if (parameters.properties.secondaryKey !== null && parameters.properties.secondaryKey !== undefined) {
      propertiesValue['secondaryKey'] = parameters.properties.secondaryKey;
    }
    
    if (parameters.properties.keyName !== null && parameters.properties.keyName !== undefined) {
      propertiesValue['keyName'] = parameters.properties.keyName;
    }
    
    if (parameters.properties.claimType !== null && parameters.properties.claimType !== undefined) {
      propertiesValue['claimType'] = parameters.properties.claimType;
    }
    
    if (parameters.properties.claimValue !== null && parameters.properties.claimValue !== undefined) {
      propertiesValue['claimValue'] = parameters.properties.claimValue;
    }
    
    if (parameters.properties.rights !== null && parameters.properties.rights !== undefined) {
      var rightsArray = [];
      for (var loweredIndex1 = 0; loweredIndex1 < parameters.properties.rights.length; loweredIndex1 = loweredIndex1 + 1) {
        var rightsItem = parameters.properties.rights[loweredIndex1];
        rightsArray.push(rightsItem !== null && rightsItem !== undefined ? rightsItem.toString() : 'Manage');
      }
      propertiesValue['rights'] = rightsArray;
    }
    
    if (parameters.properties.createdTime !== null && parameters.properties.createdTime !== undefined) {
      propertiesValue['createdTime'] = parameters.properties.createdTime.toISOString();
    }
    
    if (parameters.properties.modifiedTime !== null && parameters.properties.modifiedTime !== undefined) {
      propertiesValue['modifiedTime'] = parameters.properties.modifiedTime.toISOString();
    }
    
    if (parameters.properties.revision !== null && parameters.properties.revision !== undefined) {
      propertiesValue['revision'] = parameters.properties.revision;
    }
    
    requestContent = JSON.stringify(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var valueInstance = { tags: {} };
          result.value = valueInstance;
          
          var idValue = responseDoc['id'];
          if (idValue !== null && idValue !== undefined) {
            var idInstance = idValue;
            valueInstance.id = idInstance;
          }
          
          var locationValue = responseDoc['location'];
          if (locationValue !== null && locationValue !== undefined) {
            var locationInstance = locationValue;
            valueInstance.location = locationInstance;
          }
          
          var nameValue = responseDoc['name'];
          if (nameValue !== null && nameValue !== undefined) {
            var nameInstance = nameValue;
            valueInstance.name = nameInstance;
          }
          
          var typeValue = responseDoc['type'];
          if (typeValue !== null && typeValue !== undefined) {
            var typeInstance = typeValue;
            valueInstance.type = typeInstance;
          }
          
          var tagsSequenceElement = responseDoc['tags'];
          if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
            for (var property in tagsSequenceElement) {
              var tagsKey = property;
              var tagsValue = tagsSequenceElement[property];
              valueInstance.tags[tagsKey] = tagsValue;
            }
          }
          
          var propertiesValue2 = responseDoc['properties'];
          if (propertiesValue2 !== null && propertiesValue2 !== undefined) {
            var propertiesInstance = { rights: [] };
            valueInstance.properties = propertiesInstance;
            
            var primaryKeyValue = propertiesValue2['primaryKey'];
            if (primaryKeyValue !== null && primaryKeyValue !== undefined) {
              var primaryKeyInstance = primaryKeyValue;
              propertiesInstance.primaryKey = primaryKeyInstance;
            }
            
            var secondaryKeyValue = propertiesValue2['secondaryKey'];
            if (secondaryKeyValue !== null && secondaryKeyValue !== undefined) {
              var secondaryKeyInstance = secondaryKeyValue;
              propertiesInstance.secondaryKey = secondaryKeyInstance;
            }
            
            var keyNameValue = propertiesValue2['keyName'];
            if (keyNameValue !== null && keyNameValue !== undefined) {
              var keyNameInstance = keyNameValue;
              propertiesInstance.keyName = keyNameInstance;
            }
            
            var claimTypeValue = propertiesValue2['claimType'];
            if (claimTypeValue !== null && claimTypeValue !== undefined) {
              var claimTypeInstance = claimTypeValue;
              propertiesInstance.claimType = claimTypeInstance;
            }
            
            var claimValueValue = propertiesValue2['claimValue'];
            if (claimValueValue !== null && claimValueValue !== undefined) {
              var claimValueInstance = claimValueValue;
              propertiesInstance.claimValue = claimValueInstance;
            }
            
            var rightsArray2 = propertiesValue2['rights'];
            if (rightsArray2 !== null && rightsArray2 !== undefined) {
              for (var loweredIndex2 = 0; loweredIndex2 < rightsArray2.length; loweredIndex2 = loweredIndex2 + 1) {
                var rightsValue = rightsArray2[loweredIndex2];
                propertiesInstance.rights.push(rightsValue);
              }
            }
            
            var createdTimeValue = propertiesValue2['createdTime'];
            if (createdTimeValue !== null && createdTimeValue !== undefined) {
              var createdTimeInstance = new Date(createdTimeValue);
              propertiesInstance.createdTime = createdTimeInstance;
            }
            
            var modifiedTimeValue = propertiesValue2['modifiedTime'];
            if (modifiedTimeValue !== null && modifiedTimeValue !== undefined) {
              var modifiedTimeInstance = new Date(modifiedTimeValue);
              propertiesInstance.modifiedTime = modifiedTimeInstance;
            }
            
            var revisionValue = propertiesValue2['revision'];
            if (revisionValue !== null && revisionValue !== undefined) {
              var revisionInstance = revisionValue;
              propertiesInstance.revision = revisionInstance;
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Delete existing Namespace
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} namespaceName The name of the namespace.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  NamespaceOperations.prototype.deleteMethod = function(resourceGroupName, namespaceName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.namespaces.beginDelete(resourceGroupName, namespaceName, function (err, result) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      if (result.status === 'Succeeded') {
        return callback(null, result);
      }
      var delayInSeconds = result.retryAfter;
      if (delayInSeconds === 0) {
        delayInSeconds = 60;
      }
      if (client2.longRunningOperationInitialTimeout >= 0) {
        delayInSeconds = client2.longRunningOperationInitialTimeout;
      }
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.namespaces.getDeleteNamespaceOperationStatus(result.operationStatusLink, function (err2, result2) {
            if (err2 !== null && err2 !== undefined) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                return callback(null, result2);
              } else {
                delayInSeconds = result2.retryAfter;
                if (delayInSeconds === 0) {
                  delayInSeconds = 60;
                }
                if (client2.longRunningOperationRetryTimeout >= 0) {
                  delayInSeconds = client2.longRunningOperationRetryTimeout;
                }
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  /**
   * The delete a namespace authorization rule operation
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} namespaceName The namespace name.
   * 
   * @param {string} authorizationRuleName The namespace authorizationRuleName
   * name.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  NamespaceOperations.prototype.deleteAuthorizationRule = function(resourceGroupName, namespaceName, authorizationRuleName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (namespaceName === null || namespaceName === undefined) {
      return callback(new Error('namespaceName cannot be null.'));
    }
    if (authorizationRuleName === null || authorizationRuleName === undefined) {
      return callback(new Error('authorizationRuleName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.NotificationHubs';
    url2 = url2 + '/namespaces/';
    url2 = url2 + encodeURIComponent(namespaceName);
    url2 = url2 + '/AuthorizationRules/';
    url2 = url2 + encodeURIComponent(authorizationRuleName);
    var queryParameters = [];
    queryParameters.push('api-version=2014-09-01');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'DELETE';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200 && statusCode !== 204) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Returns the description for the specified namespace.  (see
   * http://msdn.microsoft.com/library/azure/dn140232.aspx for more
   * information)
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} namespaceName The namespace name.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  NamespaceOperations.prototype.get = function(resourceGroupName, namespaceName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (namespaceName === null || namespaceName === undefined) {
      return callback(new Error('namespaceName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.NotificationHubs';
    url2 = url2 + '/namespaces/';
    url2 = url2 + encodeURIComponent(namespaceName);
    var queryParameters = [];
    queryParameters.push('api-version=2014-09-01');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var valueInstance = { tags: {} };
          result.value = valueInstance;
          
          var idValue = responseDoc['id'];
          if (idValue !== null && idValue !== undefined) {
            var idInstance = idValue;
            valueInstance.id = idInstance;
          }
          
          var locationValue = responseDoc['location'];
          if (locationValue !== null && locationValue !== undefined) {
            var locationInstance = locationValue;
            valueInstance.location = locationInstance;
          }
          
          var nameValue = responseDoc['name'];
          if (nameValue !== null && nameValue !== undefined) {
            var nameInstance = nameValue;
            valueInstance.name = nameInstance;
          }
          
          var typeValue = responseDoc['type'];
          if (typeValue !== null && typeValue !== undefined) {
            var typeInstance = typeValue;
            valueInstance.type = typeInstance;
          }
          
          var tagsSequenceElement = responseDoc['tags'];
          if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
            for (var property in tagsSequenceElement) {
              var tagsKey = property;
              var tagsValue = tagsSequenceElement[property];
              valueInstance.tags[tagsKey] = tagsValue;
            }
          }
          
          var propertiesValue = responseDoc['properties'];
          if (propertiesValue !== null && propertiesValue !== undefined) {
            var propertiesInstance = {};
            valueInstance.properties = propertiesInstance;
            
            var nameValue2 = propertiesValue['name'];
            if (nameValue2 !== null && nameValue2 !== undefined) {
              var nameInstance2 = nameValue2;
              propertiesInstance.name = nameInstance2;
            }
            
            var provisioningStateValue = propertiesValue['provisioningState'];
            if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
              var provisioningStateInstance = provisioningStateValue;
              propertiesInstance.provisioningState = provisioningStateInstance;
            }
            
            var regionValue = propertiesValue['region'];
            if (regionValue !== null && regionValue !== undefined) {
              var regionInstance = regionValue;
              propertiesInstance.region = regionInstance;
            }
            
            var statusValue = propertiesValue['status'];
            if (statusValue !== null && statusValue !== undefined) {
              var statusInstance = statusValue;
              propertiesInstance.status = statusInstance;
            }
            
            var createdAtValue = propertiesValue['createdAt'];
            if (createdAtValue !== null && createdAtValue !== undefined) {
              var createdAtInstance = createdAtValue;
              propertiesInstance.createdAt = createdAtInstance;
            }
            
            var serviceBusEndpointValue = propertiesValue['serviceBusEndpoint'];
            if (serviceBusEndpointValue !== null && serviceBusEndpointValue !== undefined) {
              var serviceBusEndpointInstance = serviceBusEndpointValue;
              propertiesInstance.serviceBusEndpoint = serviceBusEndpointInstance;
            }
            
            var subscriptionIdValue = propertiesValue['subscriptionId'];
            if (subscriptionIdValue !== null && subscriptionIdValue !== undefined) {
              var subscriptionIdInstance = subscriptionIdValue;
              propertiesInstance.subscriptionId = subscriptionIdInstance;
            }
            
            var scaleUnitValue = propertiesValue['scaleUnit'];
            if (scaleUnitValue !== null && scaleUnitValue !== undefined) {
              var scaleUnitInstance = scaleUnitValue;
              propertiesInstance.scaleUnit = scaleUnitInstance;
            }
            
            var enabledValue = propertiesValue['enabled'];
            if (enabledValue !== null && enabledValue !== undefined) {
              var enabledInstance = enabledValue;
              propertiesInstance.enabled = enabledInstance;
            }
            
            var criticalValue = propertiesValue['critical'];
            if (criticalValue !== null && criticalValue !== undefined) {
              var criticalInstance = criticalValue;
              propertiesInstance.critical = criticalInstance;
            }
            
            var namespaceTypeValue = propertiesValue['namespaceType'];
            if (namespaceTypeValue !== null && namespaceTypeValue !== undefined) {
              var namespaceTypeInstance = namespaceTypeValue;
              propertiesInstance.namespaceType = namespaceTypeInstance;
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The get authorization rule operation gets an authorization rule for a
   * namespace by name.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} namespaceName The namespace to get the authorization rule
   * for.
   * 
   * @param {string} authorizationRuleName The entity name to get the
   * authorization rule for.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  NamespaceOperations.prototype.getAuthorizationRule = function(resourceGroupName, namespaceName, authorizationRuleName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (namespaceName === null || namespaceName === undefined) {
      return callback(new Error('namespaceName cannot be null.'));
    }
    if (authorizationRuleName === null || authorizationRuleName === undefined) {
      return callback(new Error('authorizationRuleName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.NotificationHubs';
    url2 = url2 + '/namespaces/';
    url2 = url2 + encodeURIComponent(namespaceName);
    url2 = url2 + '/AuthorizationRules/';
    url2 = url2 + encodeURIComponent(authorizationRuleName);
    var queryParameters = [];
    queryParameters.push('api-version=2014-09-01');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var valueInstance = { tags: {} };
          result.value = valueInstance;
          
          var idValue = responseDoc['id'];
          if (idValue !== null && idValue !== undefined) {
            var idInstance = idValue;
            valueInstance.id = idInstance;
          }
          
          var locationValue = responseDoc['location'];
          if (locationValue !== null && locationValue !== undefined) {
            var locationInstance = locationValue;
            valueInstance.location = locationInstance;
          }
          
          var nameValue = responseDoc['name'];
          if (nameValue !== null && nameValue !== undefined) {
            var nameInstance = nameValue;
            valueInstance.name = nameInstance;
          }
          
          var typeValue = responseDoc['type'];
          if (typeValue !== null && typeValue !== undefined) {
            var typeInstance = typeValue;
            valueInstance.type = typeInstance;
          }
          
          var tagsSequenceElement = responseDoc['tags'];
          if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
            for (var property in tagsSequenceElement) {
              var tagsKey = property;
              var tagsValue = tagsSequenceElement[property];
              valueInstance.tags[tagsKey] = tagsValue;
            }
          }
          
          var propertiesValue = responseDoc['properties'];
          if (propertiesValue !== null && propertiesValue !== undefined) {
            var propertiesInstance = { rights: [] };
            valueInstance.properties = propertiesInstance;
            
            var primaryKeyValue = propertiesValue['primaryKey'];
            if (primaryKeyValue !== null && primaryKeyValue !== undefined) {
              var primaryKeyInstance = primaryKeyValue;
              propertiesInstance.primaryKey = primaryKeyInstance;
            }
            
            var secondaryKeyValue = propertiesValue['secondaryKey'];
            if (secondaryKeyValue !== null && secondaryKeyValue !== undefined) {
              var secondaryKeyInstance = secondaryKeyValue;
              propertiesInstance.secondaryKey = secondaryKeyInstance;
            }
            
            var keyNameValue = propertiesValue['keyName'];
            if (keyNameValue !== null && keyNameValue !== undefined) {
              var keyNameInstance = keyNameValue;
              propertiesInstance.keyName = keyNameInstance;
            }
            
            var claimTypeValue = propertiesValue['claimType'];
            if (claimTypeValue !== null && claimTypeValue !== undefined) {
              var claimTypeInstance = claimTypeValue;
              propertiesInstance.claimType = claimTypeInstance;
            }
            
            var claimValueValue = propertiesValue['claimValue'];
            if (claimValueValue !== null && claimValueValue !== undefined) {
              var claimValueInstance = claimValueValue;
              propertiesInstance.claimValue = claimValueInstance;
            }
            
            var rightsArray = propertiesValue['rights'];
            if (rightsArray !== null && rightsArray !== undefined) {
              for (var loweredIndex1 = 0; loweredIndex1 < rightsArray.length; loweredIndex1 = loweredIndex1 + 1) {
                var rightsValue = rightsArray[loweredIndex1];
                propertiesInstance.rights.push(rightsValue);
              }
            }
            
            var createdTimeValue = propertiesValue['createdTime'];
            if (createdTimeValue !== null && createdTimeValue !== undefined) {
              var createdTimeInstance = new Date(createdTimeValue);
              propertiesInstance.createdTime = createdTimeInstance;
            }
            
            var modifiedTimeValue = propertiesValue['modifiedTime'];
            if (modifiedTimeValue !== null && modifiedTimeValue !== undefined) {
              var modifiedTimeInstance = new Date(modifiedTimeValue);
              propertiesInstance.modifiedTime = modifiedTimeInstance;
            }
            
            var revisionValue = propertiesValue['revision'];
            if (revisionValue !== null && revisionValue !== undefined) {
              var revisionInstance = revisionValue;
              propertiesInstance.revision = revisionInstance;
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The Get namespace Delete Operation Status operation returns the status of
   * the delete operation. After calling the operation, you can call Get
   * namespace Delete Operation Status to determine whether the operation has
   * succeeded, failed, or is still in progress. This method differs from
   * GetLongRunningOperationStatus in providing NotificationHub service
   * resource description.
   * 
   * @param {string} operationStatusLink Location value returned by the Begin
   * operation.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  NamespaceOperations.prototype.getDeleteNamespaceOperationStatus = function(operationStatusLink, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (operationStatusLink === null || operationStatusLink === undefined) {
      return callback(new Error('operationStatusLink cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + operationStatusLink;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2014-09-01';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200 && statusCode !== 202 && statusCode !== 404) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200 || statusCode === 202 || statusCode === 404) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var valueInstance = { tags: {} };
          result.value = valueInstance;
          
          var idValue = responseDoc['id'];
          if (idValue !== null && idValue !== undefined) {
            var idInstance = idValue;
            valueInstance.id = idInstance;
          }
          
          var locationValue = responseDoc['location'];
          if (locationValue !== null && locationValue !== undefined) {
            var locationInstance = locationValue;
            valueInstance.location = locationInstance;
          }
          
          var nameValue = responseDoc['name'];
          if (nameValue !== null && nameValue !== undefined) {
            var nameInstance = nameValue;
            valueInstance.name = nameInstance;
          }
          
          var typeValue = responseDoc['type'];
          if (typeValue !== null && typeValue !== undefined) {
            var typeInstance = typeValue;
            valueInstance.type = typeInstance;
          }
          
          var tagsSequenceElement = responseDoc['tags'];
          if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
            for (var property in tagsSequenceElement) {
              var tagsKey = property;
              var tagsValue = tagsSequenceElement[property];
              valueInstance.tags[tagsKey] = tagsValue;
            }
          }
          
          var propertiesValue = responseDoc['properties'];
          if (propertiesValue !== null && propertiesValue !== undefined) {
            var propertiesInstance = {};
            valueInstance.properties = propertiesInstance;
            
            var nameValue2 = propertiesValue['name'];
            if (nameValue2 !== null && nameValue2 !== undefined) {
              var nameInstance2 = nameValue2;
              propertiesInstance.name = nameInstance2;
            }
            
            var provisioningStateValue = propertiesValue['provisioningState'];
            if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
              var provisioningStateInstance = provisioningStateValue;
              propertiesInstance.provisioningState = provisioningStateInstance;
            }
            
            var regionValue = propertiesValue['region'];
            if (regionValue !== null && regionValue !== undefined) {
              var regionInstance = regionValue;
              propertiesInstance.region = regionInstance;
            }
            
            var statusValue = propertiesValue['status'];
            if (statusValue !== null && statusValue !== undefined) {
              var statusInstance = statusValue;
              propertiesInstance.status = statusInstance;
            }
            
            var createdAtValue = propertiesValue['createdAt'];
            if (createdAtValue !== null && createdAtValue !== undefined) {
              var createdAtInstance = createdAtValue;
              propertiesInstance.createdAt = createdAtInstance;
            }
            
            var serviceBusEndpointValue = propertiesValue['serviceBusEndpoint'];
            if (serviceBusEndpointValue !== null && serviceBusEndpointValue !== undefined) {
              var serviceBusEndpointInstance = serviceBusEndpointValue;
              propertiesInstance.serviceBusEndpoint = serviceBusEndpointInstance;
            }
            
            var subscriptionIdValue = propertiesValue['subscriptionId'];
            if (subscriptionIdValue !== null && subscriptionIdValue !== undefined) {
              var subscriptionIdInstance = subscriptionIdValue;
              propertiesInstance.subscriptionId = subscriptionIdInstance;
            }
            
            var scaleUnitValue = propertiesValue['scaleUnit'];
            if (scaleUnitValue !== null && scaleUnitValue !== undefined) {
              var scaleUnitInstance = scaleUnitValue;
              propertiesInstance.scaleUnit = scaleUnitInstance;
            }
            
            var enabledValue = propertiesValue['enabled'];
            if (enabledValue !== null && enabledValue !== undefined) {
              var enabledInstance = enabledValue;
              propertiesInstance.enabled = enabledInstance;
            }
            
            var criticalValue = propertiesValue['critical'];
            if (criticalValue !== null && criticalValue !== undefined) {
              var criticalInstance = criticalValue;
              propertiesInstance.critical = criticalInstance;
            }
            
            var namespaceTypeValue = propertiesValue['namespaceType'];
            if (namespaceTypeValue !== null && namespaceTypeValue !== undefined) {
              var namespaceTypeInstance = namespaceTypeValue;
              propertiesInstance.namespaceType = namespaceTypeInstance;
            }
          }
          
          var errorInstance = { details: {} };
          result.error = errorInstance;
          
          var codeValue = responseDoc['code'];
          if (codeValue !== null && codeValue !== undefined) {
            var codeInstance = codeValue;
            errorInstance.code = codeInstance;
          }
          
          var messageValue = responseDoc['message'];
          if (messageValue !== null && messageValue !== undefined) {
            var messageInstance = messageValue;
            errorInstance.message = messageInstance;
          }
          
          var detailsSequenceElement = responseDoc['details'];
          if (detailsSequenceElement !== null && detailsSequenceElement !== undefined) {
            for (var property2 in detailsSequenceElement) {
              var detailsKey = property2;
              var detailsValue = detailsSequenceElement[property2];
              errorInstance.details[detailsKey] = detailsValue;
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      result.operationStatusLink = response.headers['location'];
      result.retryAfter = parseInt(response.headers['retry-after'], 10);
      result.requestId = response.headers['x-ms-request-id'];
      if (statusCode === 400) {
        result.status = OperationStatus.Failed;
      }
      if (statusCode === 200) {
        result.status = OperationStatus.Succeeded;
      }
      if (statusCode === 404) {
        result.status = OperationStatus.Succeeded;
      }
      
      return callback(null, result);
    });
  };
  
  /**
   * The Get Operation Status operation returns the status of the specified
   * operation. After calling an asynchronous operation, you can call Get
   * Operation Status to determine whether the operation has succeeded,
   * failed, or is still in progress.
   * 
   * @param {string} operationStatusLink Location value returned by the Begin
   * operation.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  NamespaceOperations.prototype.getLongRunningOperationStatus = function(operationStatusLink, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (operationStatusLink === null || operationStatusLink === undefined) {
      return callback(new Error('operationStatusLink cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + operationStatusLink;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2014-09-01';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200 && statusCode !== 202 && statusCode !== 404) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      result = {};
      result.statusCode = statusCode;
      result.operationStatusLink = response.headers['location'];
      result.retryAfter = parseInt(response.headers['retry-after'], 10);
      result.requestId = response.headers['x-ms-request-id'];
      if (statusCode === 400) {
        result.status = OperationStatus.Failed;
      }
      if (statusCode === 200) {
        result.status = OperationStatus.Succeeded;
      }
      if (statusCode === 404) {
        result.status = OperationStatus.Succeeded;
      }
      
      return callback(null, result);
    });
  };
  
  /**
   * Lists the available namespaces within a resourceGroup.  (see
   * http://msdn.microsoft.com/en-us/library/azure/hh780759.aspx for more
   * information)
   * 
   * @param {string} resourceGroupName The name of the resource group. If
   * resourceGroupName value is null the method lists all the namespaces
   * within subscription
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  NamespaceOperations.prototype.list = function(resourceGroupName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.NotificationHubs';
    url2 = url2 + '/namespaces';
    var queryParameters = [];
    queryParameters.push('api-version=2014-09-01');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = { value: [] };
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var valueArray = responseDoc['value'];
          if (valueArray !== null && valueArray !== undefined) {
            for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var valueValue = valueArray[loweredIndex1];
              var namespaceResourceInstance = { tags: {} };
              result.value.push(namespaceResourceInstance);
              
              var idValue = valueValue['id'];
              if (idValue !== null && idValue !== undefined) {
                var idInstance = idValue;
                namespaceResourceInstance.id = idInstance;
              }
              
              var locationValue = valueValue['location'];
              if (locationValue !== null && locationValue !== undefined) {
                var locationInstance = locationValue;
                namespaceResourceInstance.location = locationInstance;
              }
              
              var nameValue = valueValue['name'];
              if (nameValue !== null && nameValue !== undefined) {
                var nameInstance = nameValue;
                namespaceResourceInstance.name = nameInstance;
              }
              
              var typeValue = valueValue['type'];
              if (typeValue !== null && typeValue !== undefined) {
                var typeInstance = typeValue;
                namespaceResourceInstance.type = typeInstance;
              }
              
              var tagsSequenceElement = valueValue['tags'];
              if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
                for (var property in tagsSequenceElement) {
                  var tagsKey = property;
                  var tagsValue = tagsSequenceElement[property];
                  namespaceResourceInstance.tags[tagsKey] = tagsValue;
                }
              }
              
              var propertiesValue = valueValue['properties'];
              if (propertiesValue !== null && propertiesValue !== undefined) {
                var propertiesInstance = {};
                namespaceResourceInstance.properties = propertiesInstance;
                
                var nameValue2 = propertiesValue['name'];
                if (nameValue2 !== null && nameValue2 !== undefined) {
                  var nameInstance2 = nameValue2;
                  propertiesInstance.name = nameInstance2;
                }
                
                var provisioningStateValue = propertiesValue['provisioningState'];
                if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
                  var provisioningStateInstance = provisioningStateValue;
                  propertiesInstance.provisioningState = provisioningStateInstance;
                }
                
                var regionValue = propertiesValue['region'];
                if (regionValue !== null && regionValue !== undefined) {
                  var regionInstance = regionValue;
                  propertiesInstance.region = regionInstance;
                }
                
                var statusValue = propertiesValue['status'];
                if (statusValue !== null && statusValue !== undefined) {
                  var statusInstance = statusValue;
                  propertiesInstance.status = statusInstance;
                }
                
                var createdAtValue = propertiesValue['createdAt'];
                if (createdAtValue !== null && createdAtValue !== undefined) {
                  var createdAtInstance = createdAtValue;
                  propertiesInstance.createdAt = createdAtInstance;
                }
                
                var serviceBusEndpointValue = propertiesValue['serviceBusEndpoint'];
                if (serviceBusEndpointValue !== null && serviceBusEndpointValue !== undefined) {
                  var serviceBusEndpointInstance = serviceBusEndpointValue;
                  propertiesInstance.serviceBusEndpoint = serviceBusEndpointInstance;
                }
                
                var subscriptionIdValue = propertiesValue['subscriptionId'];
                if (subscriptionIdValue !== null && subscriptionIdValue !== undefined) {
                  var subscriptionIdInstance = subscriptionIdValue;
                  propertiesInstance.subscriptionId = subscriptionIdInstance;
                }
                
                var scaleUnitValue = propertiesValue['scaleUnit'];
                if (scaleUnitValue !== null && scaleUnitValue !== undefined) {
                  var scaleUnitInstance = scaleUnitValue;
                  propertiesInstance.scaleUnit = scaleUnitInstance;
                }
                
                var enabledValue = propertiesValue['enabled'];
                if (enabledValue !== null && enabledValue !== undefined) {
                  var enabledInstance = enabledValue;
                  propertiesInstance.enabled = enabledInstance;
                }
                
                var criticalValue = propertiesValue['critical'];
                if (criticalValue !== null && criticalValue !== undefined) {
                  var criticalInstance = criticalValue;
                  propertiesInstance.critical = criticalInstance;
                }
                
                var namespaceTypeValue = propertiesValue['namespaceType'];
                if (namespaceTypeValue !== null && namespaceTypeValue !== undefined) {
                  var namespaceTypeInstance = namespaceTypeValue;
                  propertiesInstance.namespaceType = namespaceTypeInstance;
                }
              }
            }
          }
          
          var nextLinkValue = responseDoc['nextLink'];
          if (nextLinkValue !== null && nextLinkValue !== undefined) {
            var nextLinkInstance = nextLinkValue;
            result.nextLink = nextLinkInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Lists all the available namespaces within the subscription irrespective of
   * the resourceGroups.  (see
   * http://msdn.microsoft.com/en-us/library/azure/hh780759.aspx for more
   * information)
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  NamespaceOperations.prototype.listAll = function(callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.NotificationHubs';
    url2 = url2 + '/namespaces';
    var queryParameters = [];
    queryParameters.push('api-version=2014-09-01');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = { value: [] };
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var valueArray = responseDoc['value'];
          if (valueArray !== null && valueArray !== undefined) {
            for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var valueValue = valueArray[loweredIndex1];
              var namespaceResourceInstance = { tags: {} };
              result.value.push(namespaceResourceInstance);
              
              var idValue = valueValue['id'];
              if (idValue !== null && idValue !== undefined) {
                var idInstance = idValue;
                namespaceResourceInstance.id = idInstance;
              }
              
              var locationValue = valueValue['location'];
              if (locationValue !== null && locationValue !== undefined) {
                var locationInstance = locationValue;
                namespaceResourceInstance.location = locationInstance;
              }
              
              var nameValue = valueValue['name'];
              if (nameValue !== null && nameValue !== undefined) {
                var nameInstance = nameValue;
                namespaceResourceInstance.name = nameInstance;
              }
              
              var typeValue = valueValue['type'];
              if (typeValue !== null && typeValue !== undefined) {
                var typeInstance = typeValue;
                namespaceResourceInstance.type = typeInstance;
              }
              
              var tagsSequenceElement = valueValue['tags'];
              if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
                for (var property in tagsSequenceElement) {
                  var tagsKey = property;
                  var tagsValue = tagsSequenceElement[property];
                  namespaceResourceInstance.tags[tagsKey] = tagsValue;
                }
              }
              
              var propertiesValue = valueValue['properties'];
              if (propertiesValue !== null && propertiesValue !== undefined) {
                var propertiesInstance = {};
                namespaceResourceInstance.properties = propertiesInstance;
                
                var nameValue2 = propertiesValue['name'];
                if (nameValue2 !== null && nameValue2 !== undefined) {
                  var nameInstance2 = nameValue2;
                  propertiesInstance.name = nameInstance2;
                }
                
                var provisioningStateValue = propertiesValue['provisioningState'];
                if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
                  var provisioningStateInstance = provisioningStateValue;
                  propertiesInstance.provisioningState = provisioningStateInstance;
                }
                
                var regionValue = propertiesValue['region'];
                if (regionValue !== null && regionValue !== undefined) {
                  var regionInstance = regionValue;
                  propertiesInstance.region = regionInstance;
                }
                
                var statusValue = propertiesValue['status'];
                if (statusValue !== null && statusValue !== undefined) {
                  var statusInstance = statusValue;
                  propertiesInstance.status = statusInstance;
                }
                
                var createdAtValue = propertiesValue['createdAt'];
                if (createdAtValue !== null && createdAtValue !== undefined) {
                  var createdAtInstance = createdAtValue;
                  propertiesInstance.createdAt = createdAtInstance;
                }
                
                var serviceBusEndpointValue = propertiesValue['serviceBusEndpoint'];
                if (serviceBusEndpointValue !== null && serviceBusEndpointValue !== undefined) {
                  var serviceBusEndpointInstance = serviceBusEndpointValue;
                  propertiesInstance.serviceBusEndpoint = serviceBusEndpointInstance;
                }
                
                var subscriptionIdValue = propertiesValue['subscriptionId'];
                if (subscriptionIdValue !== null && subscriptionIdValue !== undefined) {
                  var subscriptionIdInstance = subscriptionIdValue;
                  propertiesInstance.subscriptionId = subscriptionIdInstance;
                }
                
                var scaleUnitValue = propertiesValue['scaleUnit'];
                if (scaleUnitValue !== null && scaleUnitValue !== undefined) {
                  var scaleUnitInstance = scaleUnitValue;
                  propertiesInstance.scaleUnit = scaleUnitInstance;
                }
                
                var enabledValue = propertiesValue['enabled'];
                if (enabledValue !== null && enabledValue !== undefined) {
                  var enabledInstance = enabledValue;
                  propertiesInstance.enabled = enabledInstance;
                }
                
                var criticalValue = propertiesValue['critical'];
                if (criticalValue !== null && criticalValue !== undefined) {
                  var criticalInstance = criticalValue;
                  propertiesInstance.critical = criticalInstance;
                }
                
                var namespaceTypeValue = propertiesValue['namespaceType'];
                if (namespaceTypeValue !== null && namespaceTypeValue !== undefined) {
                  var namespaceTypeInstance = namespaceTypeValue;
                  propertiesInstance.namespaceType = namespaceTypeInstance;
                }
              }
            }
          }
          
          var nextLinkValue = responseDoc['nextLink'];
          if (nextLinkValue !== null && nextLinkValue !== undefined) {
            var nextLinkInstance = nextLinkValue;
            result.nextLink = nextLinkInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The get authorization rules operation gets the authorization rules for a
   * namespace.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} namespaceName The namespace to get the authorization rule
   * for.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  NamespaceOperations.prototype.listAuthorizationRules = function(resourceGroupName, namespaceName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (namespaceName === null || namespaceName === undefined) {
      return callback(new Error('namespaceName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.NotificationHubs';
    url2 = url2 + '/namespaces/';
    url2 = url2 + encodeURIComponent(namespaceName);
    url2 = url2 + '/AuthorizationRules';
    var queryParameters = [];
    queryParameters.push('api-version=2014-09-01');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = { value: [] };
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var valueArray = responseDoc['value'];
          if (valueArray !== null && valueArray !== undefined) {
            for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var valueValue = valueArray[loweredIndex1];
              var sharedAccessAuthorizationRuleResourceInstance = { tags: {} };
              result.value.push(sharedAccessAuthorizationRuleResourceInstance);
              
              var idValue = valueValue['id'];
              if (idValue !== null && idValue !== undefined) {
                var idInstance = idValue;
                sharedAccessAuthorizationRuleResourceInstance.id = idInstance;
              }
              
              var locationValue = valueValue['location'];
              if (locationValue !== null && locationValue !== undefined) {
                var locationInstance = locationValue;
                sharedAccessAuthorizationRuleResourceInstance.location = locationInstance;
              }
              
              var nameValue = valueValue['name'];
              if (nameValue !== null && nameValue !== undefined) {
                var nameInstance = nameValue;
                sharedAccessAuthorizationRuleResourceInstance.name = nameInstance;
              }
              
              var typeValue = valueValue['type'];
              if (typeValue !== null && typeValue !== undefined) {
                var typeInstance = typeValue;
                sharedAccessAuthorizationRuleResourceInstance.type = typeInstance;
              }
              
              var tagsSequenceElement = valueValue['tags'];
              if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
                for (var property in tagsSequenceElement) {
                  var tagsKey = property;
                  var tagsValue = tagsSequenceElement[property];
                  sharedAccessAuthorizationRuleResourceInstance.tags[tagsKey] = tagsValue;
                }
              }
              
              var propertiesValue = valueValue['properties'];
              if (propertiesValue !== null && propertiesValue !== undefined) {
                var propertiesInstance = { rights: [] };
                sharedAccessAuthorizationRuleResourceInstance.properties = propertiesInstance;
                
                var primaryKeyValue = propertiesValue['primaryKey'];
                if (primaryKeyValue !== null && primaryKeyValue !== undefined) {
                  var primaryKeyInstance = primaryKeyValue;
                  propertiesInstance.primaryKey = primaryKeyInstance;
                }
                
                var secondaryKeyValue = propertiesValue['secondaryKey'];
                if (secondaryKeyValue !== null && secondaryKeyValue !== undefined) {
                  var secondaryKeyInstance = secondaryKeyValue;
                  propertiesInstance.secondaryKey = secondaryKeyInstance;
                }
                
                var keyNameValue = propertiesValue['keyName'];
                if (keyNameValue !== null && keyNameValue !== undefined) {
                  var keyNameInstance = keyNameValue;
                  propertiesInstance.keyName = keyNameInstance;
                }
                
                var claimTypeValue = propertiesValue['claimType'];
                if (claimTypeValue !== null && claimTypeValue !== undefined) {
                  var claimTypeInstance = claimTypeValue;
                  propertiesInstance.claimType = claimTypeInstance;
                }
                
                var claimValueValue = propertiesValue['claimValue'];
                if (claimValueValue !== null && claimValueValue !== undefined) {
                  var claimValueInstance = claimValueValue;
                  propertiesInstance.claimValue = claimValueInstance;
                }
                
                var rightsArray = propertiesValue['rights'];
                if (rightsArray !== null && rightsArray !== undefined) {
                  for (var loweredIndex2 = 0; loweredIndex2 < rightsArray.length; loweredIndex2 = loweredIndex2 + 1) {
                    var rightsValue = rightsArray[loweredIndex2];
                    propertiesInstance.rights.push(rightsValue);
                  }
                }
                
                var createdTimeValue = propertiesValue['createdTime'];
                if (createdTimeValue !== null && createdTimeValue !== undefined) {
                  var createdTimeInstance = new Date(createdTimeValue);
                  propertiesInstance.createdTime = createdTimeInstance;
                }
                
                var modifiedTimeValue = propertiesValue['modifiedTime'];
                if (modifiedTimeValue !== null && modifiedTimeValue !== undefined) {
                  var modifiedTimeInstance = new Date(modifiedTimeValue);
                  propertiesInstance.modifiedTime = modifiedTimeInstance;
                }
                
                var revisionValue = propertiesValue['revision'];
                if (revisionValue !== null && revisionValue !== undefined) {
                  var revisionInstance = revisionValue;
                  propertiesInstance.revision = revisionInstance;
                }
              }
            }
          }
          
          var nextLinkValue = responseDoc['nextLink'];
          if (nextLinkValue !== null && nextLinkValue !== undefined) {
            var nextLinkInstance = nextLinkValue;
            result.nextLink = nextLinkInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Gets the Primary and Secondary ConnectionStrings to the namespace   (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/jj873988.aspx for
   * more information)
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} namespaceName The namespace name.
   * 
   * @param {string} authorizationRuleName The connection string of the
   * namespace for the specified authorizationRule.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  NamespaceOperations.prototype.listKeys = function(resourceGroupName, namespaceName, authorizationRuleName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (namespaceName === null || namespaceName === undefined) {
      return callback(new Error('namespaceName cannot be null.'));
    }
    if (authorizationRuleName === null || authorizationRuleName === undefined) {
      return callback(new Error('authorizationRuleName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.NotificationHubs';
    url2 = url2 + '/namespaces/';
    url2 = url2 + encodeURIComponent(namespaceName);
    url2 = url2 + '/AuthorizationRules/';
    url2 = url2 + encodeURIComponent(authorizationRuleName);
    url2 = url2 + '/listKeys';
    var queryParameters = [];
    queryParameters.push('api-version=2014-09-01');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var primaryConnectionStringValue = responseDoc['primaryConnectionString'];
          if (primaryConnectionStringValue !== null && primaryConnectionStringValue !== undefined) {
            var primaryConnectionStringInstance = primaryConnectionStringValue;
            result.primaryConnectionString = primaryConnectionStringInstance;
          }
          
          var secondaryConnectionStringValue = responseDoc['secondaryConnectionString'];
          if (secondaryConnectionStringValue !== null && secondaryConnectionStringValue !== undefined) {
            var secondaryConnectionStringInstance = secondaryConnectionStringValue;
            result.secondaryConnectionString = secondaryConnectionStringInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  return NamespaceOperations;
})();

var NotificationHubOperations = ( /** @lends NotificationHubOperations */ function() {
  /**
   * @class
   * The Management API includes operations for managing notification hubs.
   * __NOTE__: An instance of this class is automatically created for an
   * instance of the [NotificationHubsManagementClient] {@link
   * NotificationHubsManagementClient~NotificationHubsManagementClient}.
   * See [notificationHubs] {@link
   * NotificationHubsManagementClient~NotificationHubsManagementClient#notificationHubs}.
   * Initializes a new instance of the NotificationHubOperations class.
   * @constructor
   * 
   * @param {NotificationHubsManagementClient} client Reference to the service
   * client.
   */
  function NotificationHubOperations(client) {
    this.client = client;
  }
  
  /**
   * Checks the availability of the given notificationHub in a namespace.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/jj870968.aspx for
   * more information)
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} namespaceName The namespace name.
   * 
   * @param {CheckAvailabilityParameters} parameters The notificationHub name.
   * 
   * @param {string} parameters.name Gets or sets name
   * 
   * @param {string} [parameters.location] Gets or sets location.
   * 
   * @param {object} [parameters.tags] Gets or sets tags.
   * 
   * @param {boolean} [parameters.isAvailable] Gets or sets true if the name is
   * available and can be used to create new Namespace/NotificationHub.
   * Otherwise false.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  NotificationHubOperations.prototype.checkAvailability = function(resourceGroupName, namespaceName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (namespaceName === null || namespaceName === undefined) {
      return callback(new Error('namespaceName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.name === null || parameters.name === undefined) {
      return callback(new Error('parameters.name cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.NotificationHubs';
    url2 = url2 + '/namespaces/';
    url2 = url2 + encodeURIComponent(namespaceName);
    url2 = url2 + '/checkNotificationHubAvailability';
    var queryParameters = [];
    queryParameters.push('api-version=2014-09-01');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = null;
    
    var checkAvailabilityParametersValue = {};
    requestDoc = checkAvailabilityParametersValue;
    
    checkAvailabilityParametersValue['name'] = parameters.name;
    
    if (parameters.location !== null && parameters.location !== undefined) {
      checkAvailabilityParametersValue['location'] = parameters.location;
    }
    
    if (parameters.tags !== null && parameters.tags !== undefined) {
      var tagsDictionary = {};
      for (var tagsKey in parameters.tags) {
        var tagsValue = parameters.tags[tagsKey];
        tagsDictionary[tagsKey] = tagsValue;
      }
      checkAvailabilityParametersValue['tags'] = tagsDictionary;
    }
    
    if (parameters.isAvailable !== null && parameters.isAvailable !== undefined) {
      checkAvailabilityParametersValue['isAvailiable'] = parameters.isAvailable;
    }
    
    requestContent = JSON.stringify(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var valueInstance = { tags: {} };
          result.value = valueInstance;
          
          var idValue = responseDoc['id'];
          if (idValue !== null && idValue !== undefined) {
            var idInstance = idValue;
            valueInstance.id = idInstance;
          }
          
          var locationValue = responseDoc['location'];
          if (locationValue !== null && locationValue !== undefined) {
            var locationInstance = locationValue;
            valueInstance.location = locationInstance;
          }
          
          var nameValue = responseDoc['name'];
          if (nameValue !== null && nameValue !== undefined) {
            var nameInstance = nameValue;
            valueInstance.name = nameInstance;
          }
          
          var typeValue = responseDoc['type'];
          if (typeValue !== null && typeValue !== undefined) {
            var typeInstance = typeValue;
            valueInstance.type = typeInstance;
          }
          
          var tagsSequenceElement = responseDoc['tags'];
          if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
            for (var property in tagsSequenceElement) {
              var tagsKey2 = property;
              var tagsValue2 = tagsSequenceElement[property];
              valueInstance.tags[tagsKey2] = tagsValue2;
            }
          }
          
          var isAvailiableValue = responseDoc['isAvailiable'];
          if (isAvailiableValue !== null && isAvailiableValue !== undefined) {
            var isAvailiableInstance = isAvailiableValue;
            valueInstance.isAvailable = isAvailiableInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Creates a new NotificationHub in a namespace.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/jj856303.aspx for
   * more information)
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} namespaceName The namespace name.
   * 
   * @param {string} notificationHubName The notification hub name.
   * 
   * @param {NotificationHubCreateOrUpdateParameters} parameters Parameters
   * supplied to the create a Namespace Resource.
   * 
   * @param {string} parameters.location Gets or sets NotificationHub data
   * center location.
   * 
   * @param {object} [parameters.tags] Gets or sets NotificationHub tags.
   * 
   * @param {NotificationHubProperties} parameters.properties Gets or sets
   * properties of the NotificationHub.
   * 
   * @param {string} [parameters.properties.name] The NotificationHub name.
   * 
   * @param {string} [parameters.properties.registrationTtl] The
   * RegistrationTtl of the created NotificationHub
   * 
   * @param {array} [parameters.properties.authorizationRules] The
   * AuthorizationRules of the created NotificationHub
   * 
   * @param {ApnsCredential} [parameters.properties.apnsCredential] The
   * ApnsCredential of the created NotificationHub
   * 
   * @param {ApnsCredentialProperties}
   * [parameters.properties.apnsCredential.properties] Gets or sets properties
   * of NotificationHub ApnsCredential.
   * 
   * @param {string}
   * [parameters.properties.apnsCredential.properties.apnsCertificate] Gets or
   * sets the APNS certificate.
   * 
   * @param {string}
   * [parameters.properties.apnsCredential.properties.certificateKey] Gets or
   * sets the certificate key.
   * 
   * @param {string} [parameters.properties.apnsCredential.properties.endpoint]
   * Gets or sets the endpoint of this credential.
   * 
   * @param {string}
   * [parameters.properties.apnsCredential.properties.thumbprint] Gets or sets
   * the Apns certificate Thumbprint
   * 
   * @param {WnsCredential} [parameters.properties.wnsCredential] The
   * WnsCredential of the created NotificationHub
   * 
   * @param {WnsCredentialProperties}
   * [parameters.properties.wnsCredential.properties] Gets or sets properties
   * of NotificationHub WnsCredential.
   * 
   * @param {string}
   * [parameters.properties.wnsCredential.properties.packageSid] Gets or sets
   * the package ID for this credential.
   * 
   * @param {string} [parameters.properties.wnsCredential.properties.secretKey]
   * Gets or sets the secret key.
   * 
   * @param {string}
   * [parameters.properties.wnsCredential.properties.windowsLiveEndpoint] Gets
   * or sets the Windows Live endpoint.
   * 
   * @param {GcmCredential} [parameters.properties.gcmCredential] The
   * GcmCredential of the created NotificationHub
   * 
   * @param {GcmCredentialProperties}
   * [parameters.properties.gcmCredential.properties] Gets or sets properties
   * of NotificationHub GcmCredential.
   * 
   * @param {string}
   * [parameters.properties.gcmCredential.properties.gcmEndpoint] Gets or sets
   * the GCM endpoint.
   * 
   * @param {string}
   * [parameters.properties.gcmCredential.properties.googleApiKey] Gets or
   * sets the Google API key.
   * 
   * @param {MpnsCredential} [parameters.properties.mpnsCredential] The
   * MpnsCredential of the created NotificationHub
   * 
   * @param {MpnsCredentialProperties}
   * [parameters.properties.mpnsCredential.properties] Gets or sets properties
   * of NotificationHub MpnsCredential.
   * 
   * @param {string}
   * [parameters.properties.mpnsCredential.properties.mpnsCertificate] Gets or
   * sets the MPNS certificate.
   * 
   * @param {string}
   * [parameters.properties.mpnsCredential.properties.certificateKey] Gets or
   * sets the certificate key for this credential.
   * 
   * @param {string}
   * [parameters.properties.mpnsCredential.properties.thumbprint] Gets or sets
   * the Mpns certificate Thumbprint
   * 
   * @param {AdmCredential} [parameters.properties.admCredential] The
   * AdmCredential of the created NotificationHub
   * 
   * @param {AdmCredentialProperties}
   * [parameters.properties.admCredential.properties] Gets or sets properties
   * of NotificationHub AdmCredential.
   * 
   * @param {string} [parameters.properties.admCredential.properties.clientId]
   * Gets or sets the client identifier.
   * 
   * @param {string}
   * [parameters.properties.admCredential.properties.clientSecret] Gets or
   * sets the credential secret access key.
   * 
   * @param {string}
   * [parameters.properties.admCredential.properties.authTokenUrl] Gets or
   * sets the URL of the authorization token.
   * 
   * @param {BaiduCredential} [parameters.properties.baiduCredential] The
   * BaiduCredential of the created NotificationHub
   * 
   * @param {BaiduCredentialProperties}
   * [parameters.properties.baiduCredential.properties] Gets or sets
   * properties of NotificationHub BaiduCredential.
   * 
   * @param {string}
   * [parameters.properties.baiduCredential.properties.baiduApiKey] Get or Set
   * Baidu Api Key.
   * 
   * @param {string}
   * [parameters.properties.baiduCredential.properties.baiduEndPoint] Get or
   * Set Baidu Endpoint.
   * 
   * @param {string}
   * [parameters.properties.baiduCredential.properties.baiduSecretKey] Get or
   * Set Baidu Secret Key
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  NotificationHubOperations.prototype.create = function(resourceGroupName, namespaceName, notificationHubName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (namespaceName === null || namespaceName === undefined) {
      return callback(new Error('namespaceName cannot be null.'));
    }
    if (notificationHubName === null || notificationHubName === undefined) {
      return callback(new Error('notificationHubName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.location === null || parameters.location === undefined) {
      return callback(new Error('parameters.location cannot be null.'));
    }
    if (parameters.properties === null || parameters.properties === undefined) {
      return callback(new Error('parameters.properties cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.NotificationHubs';
    url2 = url2 + '/namespaces/';
    url2 = url2 + encodeURIComponent(namespaceName);
    url2 = url2 + '/notificationHubs/';
    url2 = url2 + encodeURIComponent(notificationHubName);
    var queryParameters = [];
    queryParameters.push('api-version=2014-09-01');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = null;
    
    var notificationHubCreateOrUpdateParametersValue = {};
    requestDoc = notificationHubCreateOrUpdateParametersValue;
    
    notificationHubCreateOrUpdateParametersValue['location'] = parameters.location;
    
    if (parameters.tags !== null && parameters.tags !== undefined) {
      var tagsDictionary = {};
      for (var tagsKey in parameters.tags) {
        var tagsValue = parameters.tags[tagsKey];
        tagsDictionary[tagsKey] = tagsValue;
      }
      notificationHubCreateOrUpdateParametersValue['tags'] = tagsDictionary;
    }
    
    var propertiesValue = {};
    notificationHubCreateOrUpdateParametersValue['properties'] = propertiesValue;
    
    if (parameters.properties.name !== null && parameters.properties.name !== undefined) {
      propertiesValue['name'] = parameters.properties.name;
    }
    
    if (parameters.properties.registrationTtl !== null && parameters.properties.registrationTtl !== undefined) {
      propertiesValue['registrationTtl'] = parameters.properties.registrationTtl;
    }
    
    if (parameters.properties.authorizationRules !== null && parameters.properties.authorizationRules !== undefined) {
      var authorizationRulesArray = [];
      for (var loweredIndex1 = 0; loweredIndex1 < parameters.properties.authorizationRules.length; loweredIndex1 = loweredIndex1 + 1) {
        var authorizationRulesItem = parameters.properties.authorizationRules[loweredIndex1];
        
        if (authorizationRulesItem.primaryKey !== null && authorizationRulesItem.primaryKey !== undefined) {
          requestDoc = authorizationRulesItem.primaryKey;
        }
        
        if (authorizationRulesItem.secondaryKey !== null && authorizationRulesItem.secondaryKey !== undefined) {
          requestDoc = authorizationRulesItem.secondaryKey;
        }
        
        if (authorizationRulesItem.keyName !== null && authorizationRulesItem.keyName !== undefined) {
          requestDoc = authorizationRulesItem.keyName;
        }
        
        if (authorizationRulesItem.claimType !== null && authorizationRulesItem.claimType !== undefined) {
          requestDoc = authorizationRulesItem.claimType;
        }
        
        if (authorizationRulesItem.claimValue !== null && authorizationRulesItem.claimValue !== undefined) {
          requestDoc = authorizationRulesItem.claimValue;
        }
        
        if (authorizationRulesItem.rights !== null && authorizationRulesItem.rights !== undefined) {
          var rightsArray = [];
          for (var loweredIndex2 = 0; loweredIndex2 < authorizationRulesItem.rights.length; loweredIndex2 = loweredIndex2 + 1) {
            var rightsItem = authorizationRulesItem.rights[loweredIndex2];
            rightsArray.push(rightsItem !== null && rightsItem !== undefined ? rightsItem.toString() : 'Manage');
          }
          requestDoc = rightsArray;
        }
        
        if (authorizationRulesItem.createdTime !== null && authorizationRulesItem.createdTime !== undefined) {
          requestDoc = authorizationRulesItem.createdTime.toISOString();
        }
        
        if (authorizationRulesItem.modifiedTime !== null && authorizationRulesItem.modifiedTime !== undefined) {
          requestDoc = authorizationRulesItem.modifiedTime.toISOString();
        }
        
        if (authorizationRulesItem.revision !== null && authorizationRulesItem.revision !== undefined) {
          requestDoc = authorizationRulesItem.revision;
        }
      }
      propertiesValue['authorizationRules'] = authorizationRulesArray;
    }
    
    if (parameters.properties.apnsCredential !== null && parameters.properties.apnsCredential !== undefined) {
      var apnsCredentialValue = {};
      propertiesValue['apnsCredential'] = apnsCredentialValue;
      
      if (parameters.properties.apnsCredential.properties !== null && parameters.properties.apnsCredential.properties !== undefined) {
        var propertiesValue2 = {};
        apnsCredentialValue['properties'] = propertiesValue2;
        
        if (parameters.properties.apnsCredential.properties.apnsCertificate !== null && parameters.properties.apnsCredential.properties.apnsCertificate !== undefined) {
          propertiesValue2['apnsCertificate'] = parameters.properties.apnsCredential.properties.apnsCertificate;
        }
        
        if (parameters.properties.apnsCredential.properties.certificateKey !== null && parameters.properties.apnsCredential.properties.certificateKey !== undefined) {
          propertiesValue2['certificateKey'] = parameters.properties.apnsCredential.properties.certificateKey;
        }
        
        if (parameters.properties.apnsCredential.properties.endpoint !== null && parameters.properties.apnsCredential.properties.endpoint !== undefined) {
          propertiesValue2['endpoint'] = parameters.properties.apnsCredential.properties.endpoint;
        }
        
        if (parameters.properties.apnsCredential.properties.thumbprint !== null && parameters.properties.apnsCredential.properties.thumbprint !== undefined) {
          propertiesValue2['thumbprint'] = parameters.properties.apnsCredential.properties.thumbprint;
        }
      }
    }
    
    if (parameters.properties.wnsCredential !== null && parameters.properties.wnsCredential !== undefined) {
      var wnsCredentialValue = {};
      propertiesValue['wnsCredential'] = wnsCredentialValue;
      
      if (parameters.properties.wnsCredential.properties !== null && parameters.properties.wnsCredential.properties !== undefined) {
        var propertiesValue3 = {};
        wnsCredentialValue['properties'] = propertiesValue3;
        
        if (parameters.properties.wnsCredential.properties.packageSid !== null && parameters.properties.wnsCredential.properties.packageSid !== undefined) {
          propertiesValue3['packageSid'] = parameters.properties.wnsCredential.properties.packageSid;
        }
        
        if (parameters.properties.wnsCredential.properties.secretKey !== null && parameters.properties.wnsCredential.properties.secretKey !== undefined) {
          propertiesValue3['secretKey'] = parameters.properties.wnsCredential.properties.secretKey;
        }
        
        if (parameters.properties.wnsCredential.properties.windowsLiveEndpoint !== null && parameters.properties.wnsCredential.properties.windowsLiveEndpoint !== undefined) {
          propertiesValue3['windowsLiveEndpoint'] = parameters.properties.wnsCredential.properties.windowsLiveEndpoint;
        }
      }
    }
    
    if (parameters.properties.gcmCredential !== null && parameters.properties.gcmCredential !== undefined) {
      var gcmCredentialValue = {};
      propertiesValue['gcmCredential'] = gcmCredentialValue;
      
      if (parameters.properties.gcmCredential.properties !== null && parameters.properties.gcmCredential.properties !== undefined) {
        var propertiesValue4 = {};
        gcmCredentialValue['properties'] = propertiesValue4;
        
        if (parameters.properties.gcmCredential.properties.gcmEndpoint !== null && parameters.properties.gcmCredential.properties.gcmEndpoint !== undefined) {
          propertiesValue4['gcmEndpoint'] = parameters.properties.gcmCredential.properties.gcmEndpoint;
        }
        
        if (parameters.properties.gcmCredential.properties.googleApiKey !== null && parameters.properties.gcmCredential.properties.googleApiKey !== undefined) {
          propertiesValue4['googleApiKey'] = parameters.properties.gcmCredential.properties.googleApiKey;
        }
      }
    }
    
    if (parameters.properties.mpnsCredential !== null && parameters.properties.mpnsCredential !== undefined) {
      var mpnsCredentialValue = {};
      propertiesValue['mpnsCredential'] = mpnsCredentialValue;
      
      if (parameters.properties.mpnsCredential.properties !== null && parameters.properties.mpnsCredential.properties !== undefined) {
        var propertiesValue5 = {};
        mpnsCredentialValue['properties'] = propertiesValue5;
        
        if (parameters.properties.mpnsCredential.properties.mpnsCertificate !== null && parameters.properties.mpnsCredential.properties.mpnsCertificate !== undefined) {
          propertiesValue5['mpnsCertificate'] = parameters.properties.mpnsCredential.properties.mpnsCertificate;
        }
        
        if (parameters.properties.mpnsCredential.properties.certificateKey !== null && parameters.properties.mpnsCredential.properties.certificateKey !== undefined) {
          propertiesValue5['certificateKey'] = parameters.properties.mpnsCredential.properties.certificateKey;
        }
        
        if (parameters.properties.mpnsCredential.properties.thumbprint !== null && parameters.properties.mpnsCredential.properties.thumbprint !== undefined) {
          propertiesValue5['thumbprint'] = parameters.properties.mpnsCredential.properties.thumbprint;
        }
      }
    }
    
    if (parameters.properties.admCredential !== null && parameters.properties.admCredential !== undefined) {
      var admCredentialValue = {};
      propertiesValue['admCredential'] = admCredentialValue;
      
      if (parameters.properties.admCredential.properties !== null && parameters.properties.admCredential.properties !== undefined) {
        var propertiesValue6 = {};
        admCredentialValue['properties'] = propertiesValue6;
        
        if (parameters.properties.admCredential.properties.clientId !== null && parameters.properties.admCredential.properties.clientId !== undefined) {
          propertiesValue6['clientId'] = parameters.properties.admCredential.properties.clientId;
        }
        
        if (parameters.properties.admCredential.properties.clientSecret !== null && parameters.properties.admCredential.properties.clientSecret !== undefined) {
          propertiesValue6['clientSecret'] = parameters.properties.admCredential.properties.clientSecret;
        }
        
        if (parameters.properties.admCredential.properties.authTokenUrl !== null && parameters.properties.admCredential.properties.authTokenUrl !== undefined) {
          propertiesValue6['authTokenUrl'] = parameters.properties.admCredential.properties.authTokenUrl;
        }
      }
    }
    
    if (parameters.properties.baiduCredential !== null && parameters.properties.baiduCredential !== undefined) {
      var baiduCredentialValue = {};
      propertiesValue['baiduCredential'] = baiduCredentialValue;
      
      if (parameters.properties.baiduCredential.properties !== null && parameters.properties.baiduCredential.properties !== undefined) {
        var propertiesValue7 = {};
        baiduCredentialValue['properties'] = propertiesValue7;
        
        if (parameters.properties.baiduCredential.properties.baiduApiKey !== null && parameters.properties.baiduCredential.properties.baiduApiKey !== undefined) {
          propertiesValue7['baiduApiKey'] = parameters.properties.baiduCredential.properties.baiduApiKey;
        }
        
        if (parameters.properties.baiduCredential.properties.baiduEndPoint !== null && parameters.properties.baiduCredential.properties.baiduEndPoint !== undefined) {
          propertiesValue7['baiduEndPoint'] = parameters.properties.baiduCredential.properties.baiduEndPoint;
        }
        
        if (parameters.properties.baiduCredential.properties.baiduSecretKey !== null && parameters.properties.baiduCredential.properties.baiduSecretKey !== undefined) {
          propertiesValue7['baiduSecretKey'] = parameters.properties.baiduCredential.properties.baiduSecretKey;
        }
      }
    }
    
    requestContent = JSON.stringify(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200 && statusCode !== 201) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200 || statusCode === 201) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var valueInstance = { tags: {} };
          result.value = valueInstance;
          
          var idValue = responseDoc['id'];
          if (idValue !== null && idValue !== undefined) {
            var idInstance = idValue;
            valueInstance.id = idInstance;
          }
          
          var locationValue = responseDoc['location'];
          if (locationValue !== null && locationValue !== undefined) {
            var locationInstance = locationValue;
            valueInstance.location = locationInstance;
          }
          
          var nameValue = responseDoc['name'];
          if (nameValue !== null && nameValue !== undefined) {
            var nameInstance = nameValue;
            valueInstance.name = nameInstance;
          }
          
          var typeValue = responseDoc['type'];
          if (typeValue !== null && typeValue !== undefined) {
            var typeInstance = typeValue;
            valueInstance.type = typeInstance;
          }
          
          var tagsSequenceElement = responseDoc['tags'];
          if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
            for (var property in tagsSequenceElement) {
              var tagsKey2 = property;
              var tagsValue2 = tagsSequenceElement[property];
              valueInstance.tags[tagsKey2] = tagsValue2;
            }
          }
          
          var propertiesValue8 = responseDoc['properties'];
          if (propertiesValue8 !== null && propertiesValue8 !== undefined) {
            var propertiesInstance = { authorizationRules: [] };
            valueInstance.properties = propertiesInstance;
            
            var nameValue2 = propertiesValue8['name'];
            if (nameValue2 !== null && nameValue2 !== undefined) {
              var nameInstance2 = nameValue2;
              propertiesInstance.name = nameInstance2;
            }
            
            var registrationTtlValue = propertiesValue8['registrationTtl'];
            if (registrationTtlValue !== null && registrationTtlValue !== undefined) {
              var registrationTtlInstance = registrationTtlValue;
              propertiesInstance.registrationTtl = registrationTtlInstance;
            }
            
            var authorizationRulesArray2 = propertiesValue8['authorizationRules'];
            if (authorizationRulesArray2 !== null && authorizationRulesArray2 !== undefined) {
              for (var loweredIndex3 = 0; loweredIndex3 < authorizationRulesArray2.length; loweredIndex3 = loweredIndex3 + 1) {
                var authorizationRulesValue = authorizationRulesArray2[loweredIndex3];
                var sharedAccessAuthorizationRulePropertiesInstance = { rights: [] };
                propertiesInstance.authorizationRules.push(sharedAccessAuthorizationRulePropertiesInstance);
                
                var primaryKeyValue = authorizationRulesValue['primaryKey'];
                if (primaryKeyValue !== null && primaryKeyValue !== undefined) {
                  var primaryKeyInstance = primaryKeyValue;
                  sharedAccessAuthorizationRulePropertiesInstance.primaryKey = primaryKeyInstance;
                }
                
                var secondaryKeyValue = authorizationRulesValue['secondaryKey'];
                if (secondaryKeyValue !== null && secondaryKeyValue !== undefined) {
                  var secondaryKeyInstance = secondaryKeyValue;
                  sharedAccessAuthorizationRulePropertiesInstance.secondaryKey = secondaryKeyInstance;
                }
                
                var keyNameValue = authorizationRulesValue['keyName'];
                if (keyNameValue !== null && keyNameValue !== undefined) {
                  var keyNameInstance = keyNameValue;
                  sharedAccessAuthorizationRulePropertiesInstance.keyName = keyNameInstance;
                }
                
                var claimTypeValue = authorizationRulesValue['claimType'];
                if (claimTypeValue !== null && claimTypeValue !== undefined) {
                  var claimTypeInstance = claimTypeValue;
                  sharedAccessAuthorizationRulePropertiesInstance.claimType = claimTypeInstance;
                }
                
                var claimValueValue = authorizationRulesValue['claimValue'];
                if (claimValueValue !== null && claimValueValue !== undefined) {
                  var claimValueInstance = claimValueValue;
                  sharedAccessAuthorizationRulePropertiesInstance.claimValue = claimValueInstance;
                }
                
                var rightsArray2 = authorizationRulesValue['rights'];
                if (rightsArray2 !== null && rightsArray2 !== undefined) {
                  for (var loweredIndex4 = 0; loweredIndex4 < rightsArray2.length; loweredIndex4 = loweredIndex4 + 1) {
                    var rightsValue = rightsArray2[loweredIndex4];
                    sharedAccessAuthorizationRulePropertiesInstance.rights.push(rightsValue);
                  }
                }
                
                var createdTimeValue = authorizationRulesValue['createdTime'];
                if (createdTimeValue !== null && createdTimeValue !== undefined) {
                  var createdTimeInstance = new Date(createdTimeValue);
                  sharedAccessAuthorizationRulePropertiesInstance.createdTime = createdTimeInstance;
                }
                
                var modifiedTimeValue = authorizationRulesValue['modifiedTime'];
                if (modifiedTimeValue !== null && modifiedTimeValue !== undefined) {
                  var modifiedTimeInstance = new Date(modifiedTimeValue);
                  sharedAccessAuthorizationRulePropertiesInstance.modifiedTime = modifiedTimeInstance;
                }
                
                var revisionValue = authorizationRulesValue['revision'];
                if (revisionValue !== null && revisionValue !== undefined) {
                  var revisionInstance = revisionValue;
                  sharedAccessAuthorizationRulePropertiesInstance.revision = revisionInstance;
                }
              }
            }
            
            var apnsCredentialValue2 = propertiesValue8['apnsCredential'];
            if (apnsCredentialValue2 !== null && apnsCredentialValue2 !== undefined) {
              var apnsCredentialInstance = {};
              propertiesInstance.apnsCredential = apnsCredentialInstance;
              
              var propertiesValue9 = apnsCredentialValue2['properties'];
              if (propertiesValue9 !== null && propertiesValue9 !== undefined) {
                var propertiesInstance2 = {};
                apnsCredentialInstance.properties = propertiesInstance2;
                
                var apnsCertificateValue = propertiesValue9['apnsCertificate'];
                if (apnsCertificateValue !== null && apnsCertificateValue !== undefined) {
                  var apnsCertificateInstance = apnsCertificateValue;
                  propertiesInstance2.apnsCertificate = apnsCertificateInstance;
                }
                
                var certificateKeyValue = propertiesValue9['certificateKey'];
                if (certificateKeyValue !== null && certificateKeyValue !== undefined) {
                  var certificateKeyInstance = certificateKeyValue;
                  propertiesInstance2.certificateKey = certificateKeyInstance;
                }
                
                var endpointValue = propertiesValue9['endpoint'];
                if (endpointValue !== null && endpointValue !== undefined) {
                  var endpointInstance = endpointValue;
                  propertiesInstance2.endpoint = endpointInstance;
                }
                
                var thumbprintValue = propertiesValue9['thumbprint'];
                if (thumbprintValue !== null && thumbprintValue !== undefined) {
                  var thumbprintInstance = thumbprintValue;
                  propertiesInstance2.thumbprint = thumbprintInstance;
                }
              }
            }
            
            var wnsCredentialValue2 = propertiesValue8['wnsCredential'];
            if (wnsCredentialValue2 !== null && wnsCredentialValue2 !== undefined) {
              var wnsCredentialInstance = {};
              propertiesInstance.wnsCredential = wnsCredentialInstance;
              
              var propertiesValue10 = wnsCredentialValue2['properties'];
              if (propertiesValue10 !== null && propertiesValue10 !== undefined) {
                var propertiesInstance3 = {};
                wnsCredentialInstance.properties = propertiesInstance3;
                
                var packageSidValue = propertiesValue10['packageSid'];
                if (packageSidValue !== null && packageSidValue !== undefined) {
                  var packageSidInstance = packageSidValue;
                  propertiesInstance3.packageSid = packageSidInstance;
                }
                
                var secretKeyValue = propertiesValue10['secretKey'];
                if (secretKeyValue !== null && secretKeyValue !== undefined) {
                  var secretKeyInstance = secretKeyValue;
                  propertiesInstance3.secretKey = secretKeyInstance;
                }
                
                var windowsLiveEndpointValue = propertiesValue10['windowsLiveEndpoint'];
                if (windowsLiveEndpointValue !== null && windowsLiveEndpointValue !== undefined) {
                  var windowsLiveEndpointInstance = windowsLiveEndpointValue;
                  propertiesInstance3.windowsLiveEndpoint = windowsLiveEndpointInstance;
                }
              }
            }
            
            var gcmCredentialValue2 = propertiesValue8['gcmCredential'];
            if (gcmCredentialValue2 !== null && gcmCredentialValue2 !== undefined) {
              var gcmCredentialInstance = {};
              propertiesInstance.gcmCredential = gcmCredentialInstance;
              
              var propertiesValue11 = gcmCredentialValue2['properties'];
              if (propertiesValue11 !== null && propertiesValue11 !== undefined) {
                var propertiesInstance4 = {};
                gcmCredentialInstance.properties = propertiesInstance4;
                
                var gcmEndpointValue = propertiesValue11['gcmEndpoint'];
                if (gcmEndpointValue !== null && gcmEndpointValue !== undefined) {
                  var gcmEndpointInstance = gcmEndpointValue;
                  propertiesInstance4.gcmEndpoint = gcmEndpointInstance;
                }
                
                var googleApiKeyValue = propertiesValue11['googleApiKey'];
                if (googleApiKeyValue !== null && googleApiKeyValue !== undefined) {
                  var googleApiKeyInstance = googleApiKeyValue;
                  propertiesInstance4.googleApiKey = googleApiKeyInstance;
                }
              }
            }
            
            var mpnsCredentialValue2 = propertiesValue8['mpnsCredential'];
            if (mpnsCredentialValue2 !== null && mpnsCredentialValue2 !== undefined) {
              var mpnsCredentialInstance = {};
              propertiesInstance.mpnsCredential = mpnsCredentialInstance;
              
              var propertiesValue12 = mpnsCredentialValue2['properties'];
              if (propertiesValue12 !== null && propertiesValue12 !== undefined) {
                var propertiesInstance5 = {};
                mpnsCredentialInstance.properties = propertiesInstance5;
                
                var mpnsCertificateValue = propertiesValue12['mpnsCertificate'];
                if (mpnsCertificateValue !== null && mpnsCertificateValue !== undefined) {
                  var mpnsCertificateInstance = mpnsCertificateValue;
                  propertiesInstance5.mpnsCertificate = mpnsCertificateInstance;
                }
                
                var certificateKeyValue2 = propertiesValue12['certificateKey'];
                if (certificateKeyValue2 !== null && certificateKeyValue2 !== undefined) {
                  var certificateKeyInstance2 = certificateKeyValue2;
                  propertiesInstance5.certificateKey = certificateKeyInstance2;
                }
                
                var thumbprintValue2 = propertiesValue12['thumbprint'];
                if (thumbprintValue2 !== null && thumbprintValue2 !== undefined) {
                  var thumbprintInstance2 = thumbprintValue2;
                  propertiesInstance5.thumbprint = thumbprintInstance2;
                }
              }
            }
            
            var admCredentialValue2 = propertiesValue8['admCredential'];
            if (admCredentialValue2 !== null && admCredentialValue2 !== undefined) {
              var admCredentialInstance = {};
              propertiesInstance.admCredential = admCredentialInstance;
              
              var propertiesValue13 = admCredentialValue2['properties'];
              if (propertiesValue13 !== null && propertiesValue13 !== undefined) {
                var propertiesInstance6 = {};
                admCredentialInstance.properties = propertiesInstance6;
                
                var clientIdValue = propertiesValue13['clientId'];
                if (clientIdValue !== null && clientIdValue !== undefined) {
                  var clientIdInstance = clientIdValue;
                  propertiesInstance6.clientId = clientIdInstance;
                }
                
                var clientSecretValue = propertiesValue13['clientSecret'];
                if (clientSecretValue !== null && clientSecretValue !== undefined) {
                  var clientSecretInstance = clientSecretValue;
                  propertiesInstance6.clientSecret = clientSecretInstance;
                }
                
                var authTokenUrlValue = propertiesValue13['authTokenUrl'];
                if (authTokenUrlValue !== null && authTokenUrlValue !== undefined) {
                  var authTokenUrlInstance = authTokenUrlValue;
                  propertiesInstance6.authTokenUrl = authTokenUrlInstance;
                }
              }
            }
            
            var baiduCredentialValue2 = propertiesValue8['baiduCredential'];
            if (baiduCredentialValue2 !== null && baiduCredentialValue2 !== undefined) {
              var baiduCredentialInstance = {};
              propertiesInstance.baiduCredential = baiduCredentialInstance;
              
              var propertiesValue14 = baiduCredentialValue2['properties'];
              if (propertiesValue14 !== null && propertiesValue14 !== undefined) {
                var propertiesInstance7 = {};
                baiduCredentialInstance.properties = propertiesInstance7;
                
                var baiduApiKeyValue = propertiesValue14['baiduApiKey'];
                if (baiduApiKeyValue !== null && baiduApiKeyValue !== undefined) {
                  var baiduApiKeyInstance = baiduApiKeyValue;
                  propertiesInstance7.baiduApiKey = baiduApiKeyInstance;
                }
                
                var baiduEndPointValue = propertiesValue14['baiduEndPoint'];
                if (baiduEndPointValue !== null && baiduEndPointValue !== undefined) {
                  var baiduEndPointInstance = baiduEndPointValue;
                  propertiesInstance7.baiduEndPoint = baiduEndPointInstance;
                }
                
                var baiduSecretKeyValue = propertiesValue14['baiduSecretKey'];
                if (baiduSecretKeyValue !== null && baiduSecretKeyValue !== undefined) {
                  var baiduSecretKeyInstance = baiduSecretKeyValue;
                  propertiesInstance7.baiduSecretKey = baiduSecretKeyInstance;
                }
              }
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The create NotificationHub authorization rule operation creates an
   * authorization rule for a NotificationHub
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} namespaceName The namespace name.
   * 
   * @param {string} notificationHubName The notification hub name.
   * 
   * @param {string} authorizationRuleName The namespace authorizationRuleName
   * name.
   * 
   * @param {SharedAccessAuthorizationRuleCreateOrUpdateParameters} parameters
   * The shared access authorization rule.
   * 
   * @param {string} [parameters.location] Gets or sets Namespace data center
   * location.
   * 
   * @param {string} [parameters.name] Gets or sets Name of the Namespace
   * AuthorizationRule.
   * 
   * @param {SharedAccessAuthorizationRuleProperties} parameters.properties
   * Gets or sets properties of the Namespace AuthorizationRules.
   * 
   * @param {string} [parameters.properties.primaryKey] The primary key that
   * was used.
   * 
   * @param {string} [parameters.properties.secondaryKey] The secondary key
   * that was used.
   * 
   * @param {string} [parameters.properties.keyName] The name of the key that
   * was used.
   * 
   * @param {string} [parameters.properties.claimType] The type of the claim.
   * 
   * @param {string} [parameters.properties.claimValue] The value of the claim.
   * 
   * @param {array} [parameters.properties.rights] The rights associated with
   * the rule.
   * 
   * @param {date} [parameters.properties.createdTime] The time at which the
   * authorization rule was created.
   * 
   * @param {date} [parameters.properties.modifiedTime] The most recent time
   * the rule was updated.
   * 
   * @param {number} [parameters.properties.revision] The revision number for
   * the rule.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  NotificationHubOperations.prototype.createOrUpdateAuthorizationRule = function(resourceGroupName, namespaceName, notificationHubName, authorizationRuleName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (namespaceName === null || namespaceName === undefined) {
      return callback(new Error('namespaceName cannot be null.'));
    }
    if (notificationHubName === null || notificationHubName === undefined) {
      return callback(new Error('notificationHubName cannot be null.'));
    }
    if (authorizationRuleName === null || authorizationRuleName === undefined) {
      return callback(new Error('authorizationRuleName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.properties === null || parameters.properties === undefined) {
      return callback(new Error('parameters.properties cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.NotificationHubs';
    url2 = url2 + '/namespaces/';
    url2 = url2 + encodeURIComponent(namespaceName);
    url2 = url2 + '/notificationHubs/';
    url2 = url2 + encodeURIComponent(notificationHubName);
    url2 = url2 + '/AuthorizationRules/';
    url2 = url2 + encodeURIComponent(authorizationRuleName);
    var queryParameters = [];
    queryParameters.push('api-version=2014-09-01');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = null;
    
    var sharedAccessAuthorizationRuleCreateOrUpdateParametersValue = {};
    requestDoc = sharedAccessAuthorizationRuleCreateOrUpdateParametersValue;
    
    if (parameters.location !== null && parameters.location !== undefined) {
      sharedAccessAuthorizationRuleCreateOrUpdateParametersValue['location'] = parameters.location;
    }
    
    if (parameters.name !== null && parameters.name !== undefined) {
      sharedAccessAuthorizationRuleCreateOrUpdateParametersValue['name'] = parameters.name;
    }
    
    var propertiesValue = {};
    sharedAccessAuthorizationRuleCreateOrUpdateParametersValue['properties'] = propertiesValue;
    
    if (parameters.properties.primaryKey !== null && parameters.properties.primaryKey !== undefined) {
      propertiesValue['primaryKey'] = parameters.properties.primaryKey;
    }
    
    if (parameters.properties.secondaryKey !== null && parameters.properties.secondaryKey !== undefined) {
      propertiesValue['secondaryKey'] = parameters.properties.secondaryKey;
    }
    
    if (parameters.properties.keyName !== null && parameters.properties.keyName !== undefined) {
      propertiesValue['keyName'] = parameters.properties.keyName;
    }
    
    if (parameters.properties.claimType !== null && parameters.properties.claimType !== undefined) {
      propertiesValue['claimType'] = parameters.properties.claimType;
    }
    
    if (parameters.properties.claimValue !== null && parameters.properties.claimValue !== undefined) {
      propertiesValue['claimValue'] = parameters.properties.claimValue;
    }
    
    if (parameters.properties.rights !== null && parameters.properties.rights !== undefined) {
      var rightsArray = [];
      for (var loweredIndex1 = 0; loweredIndex1 < parameters.properties.rights.length; loweredIndex1 = loweredIndex1 + 1) {
        var rightsItem = parameters.properties.rights[loweredIndex1];
        rightsArray.push(rightsItem !== null && rightsItem !== undefined ? rightsItem.toString() : 'Manage');
      }
      propertiesValue['rights'] = rightsArray;
    }
    
    if (parameters.properties.createdTime !== null && parameters.properties.createdTime !== undefined) {
      propertiesValue['createdTime'] = parameters.properties.createdTime.toISOString();
    }
    
    if (parameters.properties.modifiedTime !== null && parameters.properties.modifiedTime !== undefined) {
      propertiesValue['modifiedTime'] = parameters.properties.modifiedTime.toISOString();
    }
    
    if (parameters.properties.revision !== null && parameters.properties.revision !== undefined) {
      propertiesValue['revision'] = parameters.properties.revision;
    }
    
    requestContent = JSON.stringify(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var valueInstance = { tags: {} };
          result.value = valueInstance;
          
          var idValue = responseDoc['id'];
          if (idValue !== null && idValue !== undefined) {
            var idInstance = idValue;
            valueInstance.id = idInstance;
          }
          
          var locationValue = responseDoc['location'];
          if (locationValue !== null && locationValue !== undefined) {
            var locationInstance = locationValue;
            valueInstance.location = locationInstance;
          }
          
          var nameValue = responseDoc['name'];
          if (nameValue !== null && nameValue !== undefined) {
            var nameInstance = nameValue;
            valueInstance.name = nameInstance;
          }
          
          var typeValue = responseDoc['type'];
          if (typeValue !== null && typeValue !== undefined) {
            var typeInstance = typeValue;
            valueInstance.type = typeInstance;
          }
          
          var tagsSequenceElement = responseDoc['tags'];
          if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
            for (var property in tagsSequenceElement) {
              var tagsKey = property;
              var tagsValue = tagsSequenceElement[property];
              valueInstance.tags[tagsKey] = tagsValue;
            }
          }
          
          var propertiesValue2 = responseDoc['properties'];
          if (propertiesValue2 !== null && propertiesValue2 !== undefined) {
            var propertiesInstance = { rights: [] };
            valueInstance.properties = propertiesInstance;
            
            var primaryKeyValue = propertiesValue2['primaryKey'];
            if (primaryKeyValue !== null && primaryKeyValue !== undefined) {
              var primaryKeyInstance = primaryKeyValue;
              propertiesInstance.primaryKey = primaryKeyInstance;
            }
            
            var secondaryKeyValue = propertiesValue2['secondaryKey'];
            if (secondaryKeyValue !== null && secondaryKeyValue !== undefined) {
              var secondaryKeyInstance = secondaryKeyValue;
              propertiesInstance.secondaryKey = secondaryKeyInstance;
            }
            
            var keyNameValue = propertiesValue2['keyName'];
            if (keyNameValue !== null && keyNameValue !== undefined) {
              var keyNameInstance = keyNameValue;
              propertiesInstance.keyName = keyNameInstance;
            }
            
            var claimTypeValue = propertiesValue2['claimType'];
            if (claimTypeValue !== null && claimTypeValue !== undefined) {
              var claimTypeInstance = claimTypeValue;
              propertiesInstance.claimType = claimTypeInstance;
            }
            
            var claimValueValue = propertiesValue2['claimValue'];
            if (claimValueValue !== null && claimValueValue !== undefined) {
              var claimValueInstance = claimValueValue;
              propertiesInstance.claimValue = claimValueInstance;
            }
            
            var rightsArray2 = propertiesValue2['rights'];
            if (rightsArray2 !== null && rightsArray2 !== undefined) {
              for (var loweredIndex2 = 0; loweredIndex2 < rightsArray2.length; loweredIndex2 = loweredIndex2 + 1) {
                var rightsValue = rightsArray2[loweredIndex2];
                propertiesInstance.rights.push(rightsValue);
              }
            }
            
            var createdTimeValue = propertiesValue2['createdTime'];
            if (createdTimeValue !== null && createdTimeValue !== undefined) {
              var createdTimeInstance = new Date(createdTimeValue);
              propertiesInstance.createdTime = createdTimeInstance;
            }
            
            var modifiedTimeValue = propertiesValue2['modifiedTime'];
            if (modifiedTimeValue !== null && modifiedTimeValue !== undefined) {
              var modifiedTimeInstance = new Date(modifiedTimeValue);
              propertiesInstance.modifiedTime = modifiedTimeInstance;
            }
            
            var revisionValue = propertiesValue2['revision'];
            if (revisionValue !== null && revisionValue !== undefined) {
              var revisionInstance = revisionValue;
              propertiesInstance.revision = revisionInstance;
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Deletes a notification hub associated with a namespace.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} namespaceName The namespace name.
   * 
   * @param {string} notificationHubName The notification hub name.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  NotificationHubOperations.prototype.deleteMethod = function(resourceGroupName, namespaceName, notificationHubName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (namespaceName === null || namespaceName === undefined) {
      return callback(new Error('namespaceName cannot be null.'));
    }
    if (notificationHubName === null || notificationHubName === undefined) {
      return callback(new Error('notificationHubName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.NotificationHubs';
    url2 = url2 + '/namespaces/';
    url2 = url2 + encodeURIComponent(namespaceName);
    url2 = url2 + '/notificationHubs/';
    url2 = url2 + encodeURIComponent(notificationHubName);
    var queryParameters = [];
    queryParameters.push('api-version=2014-09-01');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'DELETE';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The delete a notificationHub authorization rule operation
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} namespaceName The namespace name.
   * 
   * @param {string} notificationHubName The notification hub name.
   * 
   * @param {string} authorizationRuleName The namespace authorizationRuleName
   * name.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  NotificationHubOperations.prototype.deleteAuthorizationRule = function(resourceGroupName, namespaceName, notificationHubName, authorizationRuleName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (namespaceName === null || namespaceName === undefined) {
      return callback(new Error('namespaceName cannot be null.'));
    }
    if (notificationHubName === null || notificationHubName === undefined) {
      return callback(new Error('notificationHubName cannot be null.'));
    }
    if (authorizationRuleName === null || authorizationRuleName === undefined) {
      return callback(new Error('authorizationRuleName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.NotificationHubs';
    url2 = url2 + '/namespaces/';
    url2 = url2 + encodeURIComponent(namespaceName);
    url2 = url2 + '/notificationHubs/';
    url2 = url2 + encodeURIComponent(notificationHubName);
    url2 = url2 + '/AuthorizationRules/';
    url2 = url2 + encodeURIComponent(authorizationRuleName);
    var queryParameters = [];
    queryParameters.push('api-version=2014-09-01');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'DELETE';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200 && statusCode !== 204) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Lists the notification hubs associated with a namespace.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} namespaceName The namespace name.
   * 
   * @param {string} notificationHubName The notification hub name.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  NotificationHubOperations.prototype.get = function(resourceGroupName, namespaceName, notificationHubName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (namespaceName === null || namespaceName === undefined) {
      return callback(new Error('namespaceName cannot be null.'));
    }
    if (notificationHubName === null || notificationHubName === undefined) {
      return callback(new Error('notificationHubName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.NotificationHubs';
    url2 = url2 + '/namespaces/';
    url2 = url2 + encodeURIComponent(namespaceName);
    url2 = url2 + '/notificationHubs/';
    url2 = url2 + encodeURIComponent(notificationHubName);
    var queryParameters = [];
    queryParameters.push('api-version=2014-09-01');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var valueInstance = { tags: {} };
          result.value = valueInstance;
          
          var idValue = responseDoc['id'];
          if (idValue !== null && idValue !== undefined) {
            var idInstance = idValue;
            valueInstance.id = idInstance;
          }
          
          var locationValue = responseDoc['location'];
          if (locationValue !== null && locationValue !== undefined) {
            var locationInstance = locationValue;
            valueInstance.location = locationInstance;
          }
          
          var nameValue = responseDoc['name'];
          if (nameValue !== null && nameValue !== undefined) {
            var nameInstance = nameValue;
            valueInstance.name = nameInstance;
          }
          
          var typeValue = responseDoc['type'];
          if (typeValue !== null && typeValue !== undefined) {
            var typeInstance = typeValue;
            valueInstance.type = typeInstance;
          }
          
          var tagsSequenceElement = responseDoc['tags'];
          if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
            for (var property in tagsSequenceElement) {
              var tagsKey = property;
              var tagsValue = tagsSequenceElement[property];
              valueInstance.tags[tagsKey] = tagsValue;
            }
          }
          
          var propertiesValue = responseDoc['properties'];
          if (propertiesValue !== null && propertiesValue !== undefined) {
            var propertiesInstance = { authorizationRules: [] };
            valueInstance.properties = propertiesInstance;
            
            var nameValue2 = propertiesValue['name'];
            if (nameValue2 !== null && nameValue2 !== undefined) {
              var nameInstance2 = nameValue2;
              propertiesInstance.name = nameInstance2;
            }
            
            var registrationTtlValue = propertiesValue['registrationTtl'];
            if (registrationTtlValue !== null && registrationTtlValue !== undefined) {
              var registrationTtlInstance = registrationTtlValue;
              propertiesInstance.registrationTtl = registrationTtlInstance;
            }
            
            var authorizationRulesArray = propertiesValue['authorizationRules'];
            if (authorizationRulesArray !== null && authorizationRulesArray !== undefined) {
              for (var loweredIndex1 = 0; loweredIndex1 < authorizationRulesArray.length; loweredIndex1 = loweredIndex1 + 1) {
                var authorizationRulesValue = authorizationRulesArray[loweredIndex1];
                var sharedAccessAuthorizationRulePropertiesInstance = { rights: [] };
                propertiesInstance.authorizationRules.push(sharedAccessAuthorizationRulePropertiesInstance);
                
                var primaryKeyValue = authorizationRulesValue['primaryKey'];
                if (primaryKeyValue !== null && primaryKeyValue !== undefined) {
                  var primaryKeyInstance = primaryKeyValue;
                  sharedAccessAuthorizationRulePropertiesInstance.primaryKey = primaryKeyInstance;
                }
                
                var secondaryKeyValue = authorizationRulesValue['secondaryKey'];
                if (secondaryKeyValue !== null && secondaryKeyValue !== undefined) {
                  var secondaryKeyInstance = secondaryKeyValue;
                  sharedAccessAuthorizationRulePropertiesInstance.secondaryKey = secondaryKeyInstance;
                }
                
                var keyNameValue = authorizationRulesValue['keyName'];
                if (keyNameValue !== null && keyNameValue !== undefined) {
                  var keyNameInstance = keyNameValue;
                  sharedAccessAuthorizationRulePropertiesInstance.keyName = keyNameInstance;
                }
                
                var claimTypeValue = authorizationRulesValue['claimType'];
                if (claimTypeValue !== null && claimTypeValue !== undefined) {
                  var claimTypeInstance = claimTypeValue;
                  sharedAccessAuthorizationRulePropertiesInstance.claimType = claimTypeInstance;
                }
                
                var claimValueValue = authorizationRulesValue['claimValue'];
                if (claimValueValue !== null && claimValueValue !== undefined) {
                  var claimValueInstance = claimValueValue;
                  sharedAccessAuthorizationRulePropertiesInstance.claimValue = claimValueInstance;
                }
                
                var rightsArray = authorizationRulesValue['rights'];
                if (rightsArray !== null && rightsArray !== undefined) {
                  for (var loweredIndex2 = 0; loweredIndex2 < rightsArray.length; loweredIndex2 = loweredIndex2 + 1) {
                    var rightsValue = rightsArray[loweredIndex2];
                    sharedAccessAuthorizationRulePropertiesInstance.rights.push(rightsValue);
                  }
                }
                
                var createdTimeValue = authorizationRulesValue['createdTime'];
                if (createdTimeValue !== null && createdTimeValue !== undefined) {
                  var createdTimeInstance = new Date(createdTimeValue);
                  sharedAccessAuthorizationRulePropertiesInstance.createdTime = createdTimeInstance;
                }
                
                var modifiedTimeValue = authorizationRulesValue['modifiedTime'];
                if (modifiedTimeValue !== null && modifiedTimeValue !== undefined) {
                  var modifiedTimeInstance = new Date(modifiedTimeValue);
                  sharedAccessAuthorizationRulePropertiesInstance.modifiedTime = modifiedTimeInstance;
                }
                
                var revisionValue = authorizationRulesValue['revision'];
                if (revisionValue !== null && revisionValue !== undefined) {
                  var revisionInstance = revisionValue;
                  sharedAccessAuthorizationRulePropertiesInstance.revision = revisionInstance;
                }
              }
            }
            
            var apnsCredentialValue = propertiesValue['apnsCredential'];
            if (apnsCredentialValue !== null && apnsCredentialValue !== undefined) {
              var apnsCredentialInstance = {};
              propertiesInstance.apnsCredential = apnsCredentialInstance;
              
              var propertiesValue2 = apnsCredentialValue['properties'];
              if (propertiesValue2 !== null && propertiesValue2 !== undefined) {
                var propertiesInstance2 = {};
                apnsCredentialInstance.properties = propertiesInstance2;
                
                var apnsCertificateValue = propertiesValue2['apnsCertificate'];
                if (apnsCertificateValue !== null && apnsCertificateValue !== undefined) {
                  var apnsCertificateInstance = apnsCertificateValue;
                  propertiesInstance2.apnsCertificate = apnsCertificateInstance;
                }
                
                var certificateKeyValue = propertiesValue2['certificateKey'];
                if (certificateKeyValue !== null && certificateKeyValue !== undefined) {
                  var certificateKeyInstance = certificateKeyValue;
                  propertiesInstance2.certificateKey = certificateKeyInstance;
                }
                
                var endpointValue = propertiesValue2['endpoint'];
                if (endpointValue !== null && endpointValue !== undefined) {
                  var endpointInstance = endpointValue;
                  propertiesInstance2.endpoint = endpointInstance;
                }
                
                var thumbprintValue = propertiesValue2['thumbprint'];
                if (thumbprintValue !== null && thumbprintValue !== undefined) {
                  var thumbprintInstance = thumbprintValue;
                  propertiesInstance2.thumbprint = thumbprintInstance;
                }
              }
            }
            
            var wnsCredentialValue = propertiesValue['wnsCredential'];
            if (wnsCredentialValue !== null && wnsCredentialValue !== undefined) {
              var wnsCredentialInstance = {};
              propertiesInstance.wnsCredential = wnsCredentialInstance;
              
              var propertiesValue3 = wnsCredentialValue['properties'];
              if (propertiesValue3 !== null && propertiesValue3 !== undefined) {
                var propertiesInstance3 = {};
                wnsCredentialInstance.properties = propertiesInstance3;
                
                var packageSidValue = propertiesValue3['packageSid'];
                if (packageSidValue !== null && packageSidValue !== undefined) {
                  var packageSidInstance = packageSidValue;
                  propertiesInstance3.packageSid = packageSidInstance;
                }
                
                var secretKeyValue = propertiesValue3['secretKey'];
                if (secretKeyValue !== null && secretKeyValue !== undefined) {
                  var secretKeyInstance = secretKeyValue;
                  propertiesInstance3.secretKey = secretKeyInstance;
                }
                
                var windowsLiveEndpointValue = propertiesValue3['windowsLiveEndpoint'];
                if (windowsLiveEndpointValue !== null && windowsLiveEndpointValue !== undefined) {
                  var windowsLiveEndpointInstance = windowsLiveEndpointValue;
                  propertiesInstance3.windowsLiveEndpoint = windowsLiveEndpointInstance;
                }
              }
            }
            
            var gcmCredentialValue = propertiesValue['gcmCredential'];
            if (gcmCredentialValue !== null && gcmCredentialValue !== undefined) {
              var gcmCredentialInstance = {};
              propertiesInstance.gcmCredential = gcmCredentialInstance;
              
              var propertiesValue4 = gcmCredentialValue['properties'];
              if (propertiesValue4 !== null && propertiesValue4 !== undefined) {
                var propertiesInstance4 = {};
                gcmCredentialInstance.properties = propertiesInstance4;
                
                var gcmEndpointValue = propertiesValue4['gcmEndpoint'];
                if (gcmEndpointValue !== null && gcmEndpointValue !== undefined) {
                  var gcmEndpointInstance = gcmEndpointValue;
                  propertiesInstance4.gcmEndpoint = gcmEndpointInstance;
                }
                
                var googleApiKeyValue = propertiesValue4['googleApiKey'];
                if (googleApiKeyValue !== null && googleApiKeyValue !== undefined) {
                  var googleApiKeyInstance = googleApiKeyValue;
                  propertiesInstance4.googleApiKey = googleApiKeyInstance;
                }
              }
            }
            
            var mpnsCredentialValue = propertiesValue['mpnsCredential'];
            if (mpnsCredentialValue !== null && mpnsCredentialValue !== undefined) {
              var mpnsCredentialInstance = {};
              propertiesInstance.mpnsCredential = mpnsCredentialInstance;
              
              var propertiesValue5 = mpnsCredentialValue['properties'];
              if (propertiesValue5 !== null && propertiesValue5 !== undefined) {
                var propertiesInstance5 = {};
                mpnsCredentialInstance.properties = propertiesInstance5;
                
                var mpnsCertificateValue = propertiesValue5['mpnsCertificate'];
                if (mpnsCertificateValue !== null && mpnsCertificateValue !== undefined) {
                  var mpnsCertificateInstance = mpnsCertificateValue;
                  propertiesInstance5.mpnsCertificate = mpnsCertificateInstance;
                }
                
                var certificateKeyValue2 = propertiesValue5['certificateKey'];
                if (certificateKeyValue2 !== null && certificateKeyValue2 !== undefined) {
                  var certificateKeyInstance2 = certificateKeyValue2;
                  propertiesInstance5.certificateKey = certificateKeyInstance2;
                }
                
                var thumbprintValue2 = propertiesValue5['thumbprint'];
                if (thumbprintValue2 !== null && thumbprintValue2 !== undefined) {
                  var thumbprintInstance2 = thumbprintValue2;
                  propertiesInstance5.thumbprint = thumbprintInstance2;
                }
              }
            }
            
            var admCredentialValue = propertiesValue['admCredential'];
            if (admCredentialValue !== null && admCredentialValue !== undefined) {
              var admCredentialInstance = {};
              propertiesInstance.admCredential = admCredentialInstance;
              
              var propertiesValue6 = admCredentialValue['properties'];
              if (propertiesValue6 !== null && propertiesValue6 !== undefined) {
                var propertiesInstance6 = {};
                admCredentialInstance.properties = propertiesInstance6;
                
                var clientIdValue = propertiesValue6['clientId'];
                if (clientIdValue !== null && clientIdValue !== undefined) {
                  var clientIdInstance = clientIdValue;
                  propertiesInstance6.clientId = clientIdInstance;
                }
                
                var clientSecretValue = propertiesValue6['clientSecret'];
                if (clientSecretValue !== null && clientSecretValue !== undefined) {
                  var clientSecretInstance = clientSecretValue;
                  propertiesInstance6.clientSecret = clientSecretInstance;
                }
                
                var authTokenUrlValue = propertiesValue6['authTokenUrl'];
                if (authTokenUrlValue !== null && authTokenUrlValue !== undefined) {
                  var authTokenUrlInstance = authTokenUrlValue;
                  propertiesInstance6.authTokenUrl = authTokenUrlInstance;
                }
              }
            }
            
            var baiduCredentialValue = propertiesValue['baiduCredential'];
            if (baiduCredentialValue !== null && baiduCredentialValue !== undefined) {
              var baiduCredentialInstance = {};
              propertiesInstance.baiduCredential = baiduCredentialInstance;
              
              var propertiesValue7 = baiduCredentialValue['properties'];
              if (propertiesValue7 !== null && propertiesValue7 !== undefined) {
                var propertiesInstance7 = {};
                baiduCredentialInstance.properties = propertiesInstance7;
                
                var baiduApiKeyValue = propertiesValue7['baiduApiKey'];
                if (baiduApiKeyValue !== null && baiduApiKeyValue !== undefined) {
                  var baiduApiKeyInstance = baiduApiKeyValue;
                  propertiesInstance7.baiduApiKey = baiduApiKeyInstance;
                }
                
                var baiduEndPointValue = propertiesValue7['baiduEndPoint'];
                if (baiduEndPointValue !== null && baiduEndPointValue !== undefined) {
                  var baiduEndPointInstance = baiduEndPointValue;
                  propertiesInstance7.baiduEndPoint = baiduEndPointInstance;
                }
                
                var baiduSecretKeyValue = propertiesValue7['baiduSecretKey'];
                if (baiduSecretKeyValue !== null && baiduSecretKeyValue !== undefined) {
                  var baiduSecretKeyInstance = baiduSecretKeyValue;
                  propertiesInstance7.baiduSecretKey = baiduSecretKeyInstance;
                }
              }
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The get authorization rule operation gets an authorization rule for a
   * NotificationHub by name.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} namespaceName The namespace to get the authorization rule
   * for.
   * 
   * @param {string} notificationHubName The notification hub name.
   * 
   * @param {string} authorizationRuleName The entity name to get the
   * authorization rule for.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  NotificationHubOperations.prototype.getAuthorizationRule = function(resourceGroupName, namespaceName, notificationHubName, authorizationRuleName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (namespaceName === null || namespaceName === undefined) {
      return callback(new Error('namespaceName cannot be null.'));
    }
    if (notificationHubName === null || notificationHubName === undefined) {
      return callback(new Error('notificationHubName cannot be null.'));
    }
    if (authorizationRuleName === null || authorizationRuleName === undefined) {
      return callback(new Error('authorizationRuleName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.NotificationHubs';
    url2 = url2 + '/namespaces/';
    url2 = url2 + encodeURIComponent(namespaceName);
    url2 = url2 + '/notificationHubs/';
    url2 = url2 + encodeURIComponent(notificationHubName);
    url2 = url2 + '/AuthorizationRules/';
    url2 = url2 + encodeURIComponent(authorizationRuleName);
    var queryParameters = [];
    queryParameters.push('api-version=2014-09-01');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var valueInstance = { tags: {} };
          result.value = valueInstance;
          
          var idValue = responseDoc['id'];
          if (idValue !== null && idValue !== undefined) {
            var idInstance = idValue;
            valueInstance.id = idInstance;
          }
          
          var locationValue = responseDoc['location'];
          if (locationValue !== null && locationValue !== undefined) {
            var locationInstance = locationValue;
            valueInstance.location = locationInstance;
          }
          
          var nameValue = responseDoc['name'];
          if (nameValue !== null && nameValue !== undefined) {
            var nameInstance = nameValue;
            valueInstance.name = nameInstance;
          }
          
          var typeValue = responseDoc['type'];
          if (typeValue !== null && typeValue !== undefined) {
            var typeInstance = typeValue;
            valueInstance.type = typeInstance;
          }
          
          var tagsSequenceElement = responseDoc['tags'];
          if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
            for (var property in tagsSequenceElement) {
              var tagsKey = property;
              var tagsValue = tagsSequenceElement[property];
              valueInstance.tags[tagsKey] = tagsValue;
            }
          }
          
          var propertiesValue = responseDoc['properties'];
          if (propertiesValue !== null && propertiesValue !== undefined) {
            var propertiesInstance = { rights: [] };
            valueInstance.properties = propertiesInstance;
            
            var primaryKeyValue = propertiesValue['primaryKey'];
            if (primaryKeyValue !== null && primaryKeyValue !== undefined) {
              var primaryKeyInstance = primaryKeyValue;
              propertiesInstance.primaryKey = primaryKeyInstance;
            }
            
            var secondaryKeyValue = propertiesValue['secondaryKey'];
            if (secondaryKeyValue !== null && secondaryKeyValue !== undefined) {
              var secondaryKeyInstance = secondaryKeyValue;
              propertiesInstance.secondaryKey = secondaryKeyInstance;
            }
            
            var keyNameValue = propertiesValue['keyName'];
            if (keyNameValue !== null && keyNameValue !== undefined) {
              var keyNameInstance = keyNameValue;
              propertiesInstance.keyName = keyNameInstance;
            }
            
            var claimTypeValue = propertiesValue['claimType'];
            if (claimTypeValue !== null && claimTypeValue !== undefined) {
              var claimTypeInstance = claimTypeValue;
              propertiesInstance.claimType = claimTypeInstance;
            }
            
            var claimValueValue = propertiesValue['claimValue'];
            if (claimValueValue !== null && claimValueValue !== undefined) {
              var claimValueInstance = claimValueValue;
              propertiesInstance.claimValue = claimValueInstance;
            }
            
            var rightsArray = propertiesValue['rights'];
            if (rightsArray !== null && rightsArray !== undefined) {
              for (var loweredIndex1 = 0; loweredIndex1 < rightsArray.length; loweredIndex1 = loweredIndex1 + 1) {
                var rightsValue = rightsArray[loweredIndex1];
                propertiesInstance.rights.push(rightsValue);
              }
            }
            
            var createdTimeValue = propertiesValue['createdTime'];
            if (createdTimeValue !== null && createdTimeValue !== undefined) {
              var createdTimeInstance = new Date(createdTimeValue);
              propertiesInstance.createdTime = createdTimeInstance;
            }
            
            var modifiedTimeValue = propertiesValue['modifiedTime'];
            if (modifiedTimeValue !== null && modifiedTimeValue !== undefined) {
              var modifiedTimeInstance = new Date(modifiedTimeValue);
              propertiesInstance.modifiedTime = modifiedTimeInstance;
            }
            
            var revisionValue = propertiesValue['revision'];
            if (revisionValue !== null && revisionValue !== undefined) {
              var revisionInstance = revisionValue;
              propertiesInstance.revision = revisionInstance;
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Lists the PNS Credentials associated with a notification hub .
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} namespaceName The namespace name.
   * 
   * @param {string} notificationHubName The notification hub name.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  NotificationHubOperations.prototype.getPnsCredentials = function(resourceGroupName, namespaceName, notificationHubName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (namespaceName === null || namespaceName === undefined) {
      return callback(new Error('namespaceName cannot be null.'));
    }
    if (notificationHubName === null || notificationHubName === undefined) {
      return callback(new Error('notificationHubName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.NotificationHubs';
    url2 = url2 + '/namespaces/';
    url2 = url2 + encodeURIComponent(namespaceName);
    url2 = url2 + '/notificationHubs/';
    url2 = url2 + encodeURIComponent(notificationHubName);
    url2 = url2 + '/pnsCredentials';
    var queryParameters = [];
    queryParameters.push('api-version=2014-09-01');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var valueInstance = { tags: {} };
          result.value = valueInstance;
          
          var idValue = responseDoc['id'];
          if (idValue !== null && idValue !== undefined) {
            var idInstance = idValue;
            valueInstance.id = idInstance;
          }
          
          var locationValue = responseDoc['location'];
          if (locationValue !== null && locationValue !== undefined) {
            var locationInstance = locationValue;
            valueInstance.location = locationInstance;
          }
          
          var nameValue = responseDoc['name'];
          if (nameValue !== null && nameValue !== undefined) {
            var nameInstance = nameValue;
            valueInstance.name = nameInstance;
          }
          
          var typeValue = responseDoc['type'];
          if (typeValue !== null && typeValue !== undefined) {
            var typeInstance = typeValue;
            valueInstance.type = typeInstance;
          }
          
          var tagsSequenceElement = responseDoc['tags'];
          if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
            for (var property in tagsSequenceElement) {
              var tagsKey = property;
              var tagsValue = tagsSequenceElement[property];
              valueInstance.tags[tagsKey] = tagsValue;
            }
          }
          
          var propertiesValue = responseDoc['properties'];
          if (propertiesValue !== null && propertiesValue !== undefined) {
            var propertiesInstance = { authorizationRules: [] };
            valueInstance.properties = propertiesInstance;
            
            var nameValue2 = propertiesValue['name'];
            if (nameValue2 !== null && nameValue2 !== undefined) {
              var nameInstance2 = nameValue2;
              propertiesInstance.name = nameInstance2;
            }
            
            var registrationTtlValue = propertiesValue['registrationTtl'];
            if (registrationTtlValue !== null && registrationTtlValue !== undefined) {
              var registrationTtlInstance = registrationTtlValue;
              propertiesInstance.registrationTtl = registrationTtlInstance;
            }
            
            var authorizationRulesArray = propertiesValue['authorizationRules'];
            if (authorizationRulesArray !== null && authorizationRulesArray !== undefined) {
              for (var loweredIndex1 = 0; loweredIndex1 < authorizationRulesArray.length; loweredIndex1 = loweredIndex1 + 1) {
                var authorizationRulesValue = authorizationRulesArray[loweredIndex1];
                var sharedAccessAuthorizationRulePropertiesInstance = { rights: [] };
                propertiesInstance.authorizationRules.push(sharedAccessAuthorizationRulePropertiesInstance);
                
                var primaryKeyValue = authorizationRulesValue['primaryKey'];
                if (primaryKeyValue !== null && primaryKeyValue !== undefined) {
                  var primaryKeyInstance = primaryKeyValue;
                  sharedAccessAuthorizationRulePropertiesInstance.primaryKey = primaryKeyInstance;
                }
                
                var secondaryKeyValue = authorizationRulesValue['secondaryKey'];
                if (secondaryKeyValue !== null && secondaryKeyValue !== undefined) {
                  var secondaryKeyInstance = secondaryKeyValue;
                  sharedAccessAuthorizationRulePropertiesInstance.secondaryKey = secondaryKeyInstance;
                }
                
                var keyNameValue = authorizationRulesValue['keyName'];
                if (keyNameValue !== null && keyNameValue !== undefined) {
                  var keyNameInstance = keyNameValue;
                  sharedAccessAuthorizationRulePropertiesInstance.keyName = keyNameInstance;
                }
                
                var claimTypeValue = authorizationRulesValue['claimType'];
                if (claimTypeValue !== null && claimTypeValue !== undefined) {
                  var claimTypeInstance = claimTypeValue;
                  sharedAccessAuthorizationRulePropertiesInstance.claimType = claimTypeInstance;
                }
                
                var claimValueValue = authorizationRulesValue['claimValue'];
                if (claimValueValue !== null && claimValueValue !== undefined) {
                  var claimValueInstance = claimValueValue;
                  sharedAccessAuthorizationRulePropertiesInstance.claimValue = claimValueInstance;
                }
                
                var rightsArray = authorizationRulesValue['rights'];
                if (rightsArray !== null && rightsArray !== undefined) {
                  for (var loweredIndex2 = 0; loweredIndex2 < rightsArray.length; loweredIndex2 = loweredIndex2 + 1) {
                    var rightsValue = rightsArray[loweredIndex2];
                    sharedAccessAuthorizationRulePropertiesInstance.rights.push(rightsValue);
                  }
                }
                
                var createdTimeValue = authorizationRulesValue['createdTime'];
                if (createdTimeValue !== null && createdTimeValue !== undefined) {
                  var createdTimeInstance = new Date(createdTimeValue);
                  sharedAccessAuthorizationRulePropertiesInstance.createdTime = createdTimeInstance;
                }
                
                var modifiedTimeValue = authorizationRulesValue['modifiedTime'];
                if (modifiedTimeValue !== null && modifiedTimeValue !== undefined) {
                  var modifiedTimeInstance = new Date(modifiedTimeValue);
                  sharedAccessAuthorizationRulePropertiesInstance.modifiedTime = modifiedTimeInstance;
                }
                
                var revisionValue = authorizationRulesValue['revision'];
                if (revisionValue !== null && revisionValue !== undefined) {
                  var revisionInstance = revisionValue;
                  sharedAccessAuthorizationRulePropertiesInstance.revision = revisionInstance;
                }
              }
            }
            
            var apnsCredentialValue = propertiesValue['apnsCredential'];
            if (apnsCredentialValue !== null && apnsCredentialValue !== undefined) {
              var apnsCredentialInstance = {};
              propertiesInstance.apnsCredential = apnsCredentialInstance;
              
              var propertiesValue2 = apnsCredentialValue['properties'];
              if (propertiesValue2 !== null && propertiesValue2 !== undefined) {
                var propertiesInstance2 = {};
                apnsCredentialInstance.properties = propertiesInstance2;
                
                var apnsCertificateValue = propertiesValue2['apnsCertificate'];
                if (apnsCertificateValue !== null && apnsCertificateValue !== undefined) {
                  var apnsCertificateInstance = apnsCertificateValue;
                  propertiesInstance2.apnsCertificate = apnsCertificateInstance;
                }
                
                var certificateKeyValue = propertiesValue2['certificateKey'];
                if (certificateKeyValue !== null && certificateKeyValue !== undefined) {
                  var certificateKeyInstance = certificateKeyValue;
                  propertiesInstance2.certificateKey = certificateKeyInstance;
                }
                
                var endpointValue = propertiesValue2['endpoint'];
                if (endpointValue !== null && endpointValue !== undefined) {
                  var endpointInstance = endpointValue;
                  propertiesInstance2.endpoint = endpointInstance;
                }
                
                var thumbprintValue = propertiesValue2['thumbprint'];
                if (thumbprintValue !== null && thumbprintValue !== undefined) {
                  var thumbprintInstance = thumbprintValue;
                  propertiesInstance2.thumbprint = thumbprintInstance;
                }
              }
            }
            
            var wnsCredentialValue = propertiesValue['wnsCredential'];
            if (wnsCredentialValue !== null && wnsCredentialValue !== undefined) {
              var wnsCredentialInstance = {};
              propertiesInstance.wnsCredential = wnsCredentialInstance;
              
              var propertiesValue3 = wnsCredentialValue['properties'];
              if (propertiesValue3 !== null && propertiesValue3 !== undefined) {
                var propertiesInstance3 = {};
                wnsCredentialInstance.properties = propertiesInstance3;
                
                var packageSidValue = propertiesValue3['packageSid'];
                if (packageSidValue !== null && packageSidValue !== undefined) {
                  var packageSidInstance = packageSidValue;
                  propertiesInstance3.packageSid = packageSidInstance;
                }
                
                var secretKeyValue = propertiesValue3['secretKey'];
                if (secretKeyValue !== null && secretKeyValue !== undefined) {
                  var secretKeyInstance = secretKeyValue;
                  propertiesInstance3.secretKey = secretKeyInstance;
                }
                
                var windowsLiveEndpointValue = propertiesValue3['windowsLiveEndpoint'];
                if (windowsLiveEndpointValue !== null && windowsLiveEndpointValue !== undefined) {
                  var windowsLiveEndpointInstance = windowsLiveEndpointValue;
                  propertiesInstance3.windowsLiveEndpoint = windowsLiveEndpointInstance;
                }
              }
            }
            
            var gcmCredentialValue = propertiesValue['gcmCredential'];
            if (gcmCredentialValue !== null && gcmCredentialValue !== undefined) {
              var gcmCredentialInstance = {};
              propertiesInstance.gcmCredential = gcmCredentialInstance;
              
              var propertiesValue4 = gcmCredentialValue['properties'];
              if (propertiesValue4 !== null && propertiesValue4 !== undefined) {
                var propertiesInstance4 = {};
                gcmCredentialInstance.properties = propertiesInstance4;
                
                var gcmEndpointValue = propertiesValue4['gcmEndpoint'];
                if (gcmEndpointValue !== null && gcmEndpointValue !== undefined) {
                  var gcmEndpointInstance = gcmEndpointValue;
                  propertiesInstance4.gcmEndpoint = gcmEndpointInstance;
                }
                
                var googleApiKeyValue = propertiesValue4['googleApiKey'];
                if (googleApiKeyValue !== null && googleApiKeyValue !== undefined) {
                  var googleApiKeyInstance = googleApiKeyValue;
                  propertiesInstance4.googleApiKey = googleApiKeyInstance;
                }
              }
            }
            
            var mpnsCredentialValue = propertiesValue['mpnsCredential'];
            if (mpnsCredentialValue !== null && mpnsCredentialValue !== undefined) {
              var mpnsCredentialInstance = {};
              propertiesInstance.mpnsCredential = mpnsCredentialInstance;
              
              var propertiesValue5 = mpnsCredentialValue['properties'];
              if (propertiesValue5 !== null && propertiesValue5 !== undefined) {
                var propertiesInstance5 = {};
                mpnsCredentialInstance.properties = propertiesInstance5;
                
                var mpnsCertificateValue = propertiesValue5['mpnsCertificate'];
                if (mpnsCertificateValue !== null && mpnsCertificateValue !== undefined) {
                  var mpnsCertificateInstance = mpnsCertificateValue;
                  propertiesInstance5.mpnsCertificate = mpnsCertificateInstance;
                }
                
                var certificateKeyValue2 = propertiesValue5['certificateKey'];
                if (certificateKeyValue2 !== null && certificateKeyValue2 !== undefined) {
                  var certificateKeyInstance2 = certificateKeyValue2;
                  propertiesInstance5.certificateKey = certificateKeyInstance2;
                }
                
                var thumbprintValue2 = propertiesValue5['thumbprint'];
                if (thumbprintValue2 !== null && thumbprintValue2 !== undefined) {
                  var thumbprintInstance2 = thumbprintValue2;
                  propertiesInstance5.thumbprint = thumbprintInstance2;
                }
              }
            }
            
            var admCredentialValue = propertiesValue['admCredential'];
            if (admCredentialValue !== null && admCredentialValue !== undefined) {
              var admCredentialInstance = {};
              propertiesInstance.admCredential = admCredentialInstance;
              
              var propertiesValue6 = admCredentialValue['properties'];
              if (propertiesValue6 !== null && propertiesValue6 !== undefined) {
                var propertiesInstance6 = {};
                admCredentialInstance.properties = propertiesInstance6;
                
                var clientIdValue = propertiesValue6['clientId'];
                if (clientIdValue !== null && clientIdValue !== undefined) {
                  var clientIdInstance = clientIdValue;
                  propertiesInstance6.clientId = clientIdInstance;
                }
                
                var clientSecretValue = propertiesValue6['clientSecret'];
                if (clientSecretValue !== null && clientSecretValue !== undefined) {
                  var clientSecretInstance = clientSecretValue;
                  propertiesInstance6.clientSecret = clientSecretInstance;
                }
                
                var authTokenUrlValue = propertiesValue6['authTokenUrl'];
                if (authTokenUrlValue !== null && authTokenUrlValue !== undefined) {
                  var authTokenUrlInstance = authTokenUrlValue;
                  propertiesInstance6.authTokenUrl = authTokenUrlInstance;
                }
              }
            }
            
            var baiduCredentialValue = propertiesValue['baiduCredential'];
            if (baiduCredentialValue !== null && baiduCredentialValue !== undefined) {
              var baiduCredentialInstance = {};
              propertiesInstance.baiduCredential = baiduCredentialInstance;
              
              var propertiesValue7 = baiduCredentialValue['properties'];
              if (propertiesValue7 !== null && propertiesValue7 !== undefined) {
                var propertiesInstance7 = {};
                baiduCredentialInstance.properties = propertiesInstance7;
                
                var baiduApiKeyValue = propertiesValue7['baiduApiKey'];
                if (baiduApiKeyValue !== null && baiduApiKeyValue !== undefined) {
                  var baiduApiKeyInstance = baiduApiKeyValue;
                  propertiesInstance7.baiduApiKey = baiduApiKeyInstance;
                }
                
                var baiduEndPointValue = propertiesValue7['baiduEndPoint'];
                if (baiduEndPointValue !== null && baiduEndPointValue !== undefined) {
                  var baiduEndPointInstance = baiduEndPointValue;
                  propertiesInstance7.baiduEndPoint = baiduEndPointInstance;
                }
                
                var baiduSecretKeyValue = propertiesValue7['baiduSecretKey'];
                if (baiduSecretKeyValue !== null && baiduSecretKeyValue !== undefined) {
                  var baiduSecretKeyInstance = baiduSecretKeyValue;
                  propertiesInstance7.baiduSecretKey = baiduSecretKeyInstance;
                }
              }
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Lists the notification hubs associated with a namespace.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} namespaceName The namespace name.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  NotificationHubOperations.prototype.list = function(resourceGroupName, namespaceName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (namespaceName === null || namespaceName === undefined) {
      return callback(new Error('namespaceName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.NotificationHubs';
    url2 = url2 + '/namespaces/';
    url2 = url2 + encodeURIComponent(namespaceName);
    url2 = url2 + '/notificationHubs';
    var queryParameters = [];
    queryParameters.push('api-version=2014-09-01');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = { value: [] };
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var valueArray = responseDoc['value'];
          if (valueArray !== null && valueArray !== undefined) {
            for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var valueValue = valueArray[loweredIndex1];
              var notificationHubResourceInstance = { tags: {} };
              result.value.push(notificationHubResourceInstance);
              
              var idValue = valueValue['id'];
              if (idValue !== null && idValue !== undefined) {
                var idInstance = idValue;
                notificationHubResourceInstance.id = idInstance;
              }
              
              var locationValue = valueValue['location'];
              if (locationValue !== null && locationValue !== undefined) {
                var locationInstance = locationValue;
                notificationHubResourceInstance.location = locationInstance;
              }
              
              var nameValue = valueValue['name'];
              if (nameValue !== null && nameValue !== undefined) {
                var nameInstance = nameValue;
                notificationHubResourceInstance.name = nameInstance;
              }
              
              var typeValue = valueValue['type'];
              if (typeValue !== null && typeValue !== undefined) {
                var typeInstance = typeValue;
                notificationHubResourceInstance.type = typeInstance;
              }
              
              var tagsSequenceElement = valueValue['tags'];
              if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
                for (var property in tagsSequenceElement) {
                  var tagsKey = property;
                  var tagsValue = tagsSequenceElement[property];
                  notificationHubResourceInstance.tags[tagsKey] = tagsValue;
                }
              }
              
              var propertiesValue = valueValue['properties'];
              if (propertiesValue !== null && propertiesValue !== undefined) {
                var propertiesInstance = { authorizationRules: [] };
                notificationHubResourceInstance.properties = propertiesInstance;
                
                var nameValue2 = propertiesValue['name'];
                if (nameValue2 !== null && nameValue2 !== undefined) {
                  var nameInstance2 = nameValue2;
                  propertiesInstance.name = nameInstance2;
                }
                
                var registrationTtlValue = propertiesValue['registrationTtl'];
                if (registrationTtlValue !== null && registrationTtlValue !== undefined) {
                  var registrationTtlInstance = registrationTtlValue;
                  propertiesInstance.registrationTtl = registrationTtlInstance;
                }
                
                var authorizationRulesArray = propertiesValue['authorizationRules'];
                if (authorizationRulesArray !== null && authorizationRulesArray !== undefined) {
                  for (var loweredIndex2 = 0; loweredIndex2 < authorizationRulesArray.length; loweredIndex2 = loweredIndex2 + 1) {
                    var authorizationRulesValue = authorizationRulesArray[loweredIndex2];
                    var sharedAccessAuthorizationRulePropertiesInstance = { rights: [] };
                    propertiesInstance.authorizationRules.push(sharedAccessAuthorizationRulePropertiesInstance);
                    
                    var primaryKeyValue = authorizationRulesValue['primaryKey'];
                    if (primaryKeyValue !== null && primaryKeyValue !== undefined) {
                      var primaryKeyInstance = primaryKeyValue;
                      sharedAccessAuthorizationRulePropertiesInstance.primaryKey = primaryKeyInstance;
                    }
                    
                    var secondaryKeyValue = authorizationRulesValue['secondaryKey'];
                    if (secondaryKeyValue !== null && secondaryKeyValue !== undefined) {
                      var secondaryKeyInstance = secondaryKeyValue;
                      sharedAccessAuthorizationRulePropertiesInstance.secondaryKey = secondaryKeyInstance;
                    }
                    
                    var keyNameValue = authorizationRulesValue['keyName'];
                    if (keyNameValue !== null && keyNameValue !== undefined) {
                      var keyNameInstance = keyNameValue;
                      sharedAccessAuthorizationRulePropertiesInstance.keyName = keyNameInstance;
                    }
                    
                    var claimTypeValue = authorizationRulesValue['claimType'];
                    if (claimTypeValue !== null && claimTypeValue !== undefined) {
                      var claimTypeInstance = claimTypeValue;
                      sharedAccessAuthorizationRulePropertiesInstance.claimType = claimTypeInstance;
                    }
                    
                    var claimValueValue = authorizationRulesValue['claimValue'];
                    if (claimValueValue !== null && claimValueValue !== undefined) {
                      var claimValueInstance = claimValueValue;
                      sharedAccessAuthorizationRulePropertiesInstance.claimValue = claimValueInstance;
                    }
                    
                    var rightsArray = authorizationRulesValue['rights'];
                    if (rightsArray !== null && rightsArray !== undefined) {
                      for (var loweredIndex3 = 0; loweredIndex3 < rightsArray.length; loweredIndex3 = loweredIndex3 + 1) {
                        var rightsValue = rightsArray[loweredIndex3];
                        sharedAccessAuthorizationRulePropertiesInstance.rights.push(rightsValue);
                      }
                    }
                    
                    var createdTimeValue = authorizationRulesValue['createdTime'];
                    if (createdTimeValue !== null && createdTimeValue !== undefined) {
                      var createdTimeInstance = new Date(createdTimeValue);
                      sharedAccessAuthorizationRulePropertiesInstance.createdTime = createdTimeInstance;
                    }
                    
                    var modifiedTimeValue = authorizationRulesValue['modifiedTime'];
                    if (modifiedTimeValue !== null && modifiedTimeValue !== undefined) {
                      var modifiedTimeInstance = new Date(modifiedTimeValue);
                      sharedAccessAuthorizationRulePropertiesInstance.modifiedTime = modifiedTimeInstance;
                    }
                    
                    var revisionValue = authorizationRulesValue['revision'];
                    if (revisionValue !== null && revisionValue !== undefined) {
                      var revisionInstance = revisionValue;
                      sharedAccessAuthorizationRulePropertiesInstance.revision = revisionInstance;
                    }
                  }
                }
                
                var apnsCredentialValue = propertiesValue['apnsCredential'];
                if (apnsCredentialValue !== null && apnsCredentialValue !== undefined) {
                  var apnsCredentialInstance = {};
                  propertiesInstance.apnsCredential = apnsCredentialInstance;
                  
                  var propertiesValue2 = apnsCredentialValue['properties'];
                  if (propertiesValue2 !== null && propertiesValue2 !== undefined) {
                    var propertiesInstance2 = {};
                    apnsCredentialInstance.properties = propertiesInstance2;
                    
                    var apnsCertificateValue = propertiesValue2['apnsCertificate'];
                    if (apnsCertificateValue !== null && apnsCertificateValue !== undefined) {
                      var apnsCertificateInstance = apnsCertificateValue;
                      propertiesInstance2.apnsCertificate = apnsCertificateInstance;
                    }
                    
                    var certificateKeyValue = propertiesValue2['certificateKey'];
                    if (certificateKeyValue !== null && certificateKeyValue !== undefined) {
                      var certificateKeyInstance = certificateKeyValue;
                      propertiesInstance2.certificateKey = certificateKeyInstance;
                    }
                    
                    var endpointValue = propertiesValue2['endpoint'];
                    if (endpointValue !== null && endpointValue !== undefined) {
                      var endpointInstance = endpointValue;
                      propertiesInstance2.endpoint = endpointInstance;
                    }
                    
                    var thumbprintValue = propertiesValue2['thumbprint'];
                    if (thumbprintValue !== null && thumbprintValue !== undefined) {
                      var thumbprintInstance = thumbprintValue;
                      propertiesInstance2.thumbprint = thumbprintInstance;
                    }
                  }
                }
                
                var wnsCredentialValue = propertiesValue['wnsCredential'];
                if (wnsCredentialValue !== null && wnsCredentialValue !== undefined) {
                  var wnsCredentialInstance = {};
                  propertiesInstance.wnsCredential = wnsCredentialInstance;
                  
                  var propertiesValue3 = wnsCredentialValue['properties'];
                  if (propertiesValue3 !== null && propertiesValue3 !== undefined) {
                    var propertiesInstance3 = {};
                    wnsCredentialInstance.properties = propertiesInstance3;
                    
                    var packageSidValue = propertiesValue3['packageSid'];
                    if (packageSidValue !== null && packageSidValue !== undefined) {
                      var packageSidInstance = packageSidValue;
                      propertiesInstance3.packageSid = packageSidInstance;
                    }
                    
                    var secretKeyValue = propertiesValue3['secretKey'];
                    if (secretKeyValue !== null && secretKeyValue !== undefined) {
                      var secretKeyInstance = secretKeyValue;
                      propertiesInstance3.secretKey = secretKeyInstance;
                    }
                    
                    var windowsLiveEndpointValue = propertiesValue3['windowsLiveEndpoint'];
                    if (windowsLiveEndpointValue !== null && windowsLiveEndpointValue !== undefined) {
                      var windowsLiveEndpointInstance = windowsLiveEndpointValue;
                      propertiesInstance3.windowsLiveEndpoint = windowsLiveEndpointInstance;
                    }
                  }
                }
                
                var gcmCredentialValue = propertiesValue['gcmCredential'];
                if (gcmCredentialValue !== null && gcmCredentialValue !== undefined) {
                  var gcmCredentialInstance = {};
                  propertiesInstance.gcmCredential = gcmCredentialInstance;
                  
                  var propertiesValue4 = gcmCredentialValue['properties'];
                  if (propertiesValue4 !== null && propertiesValue4 !== undefined) {
                    var propertiesInstance4 = {};
                    gcmCredentialInstance.properties = propertiesInstance4;
                    
                    var gcmEndpointValue = propertiesValue4['gcmEndpoint'];
                    if (gcmEndpointValue !== null && gcmEndpointValue !== undefined) {
                      var gcmEndpointInstance = gcmEndpointValue;
                      propertiesInstance4.gcmEndpoint = gcmEndpointInstance;
                    }
                    
                    var googleApiKeyValue = propertiesValue4['googleApiKey'];
                    if (googleApiKeyValue !== null && googleApiKeyValue !== undefined) {
                      var googleApiKeyInstance = googleApiKeyValue;
                      propertiesInstance4.googleApiKey = googleApiKeyInstance;
                    }
                  }
                }
                
                var mpnsCredentialValue = propertiesValue['mpnsCredential'];
                if (mpnsCredentialValue !== null && mpnsCredentialValue !== undefined) {
                  var mpnsCredentialInstance = {};
                  propertiesInstance.mpnsCredential = mpnsCredentialInstance;
                  
                  var propertiesValue5 = mpnsCredentialValue['properties'];
                  if (propertiesValue5 !== null && propertiesValue5 !== undefined) {
                    var propertiesInstance5 = {};
                    mpnsCredentialInstance.properties = propertiesInstance5;
                    
                    var mpnsCertificateValue = propertiesValue5['mpnsCertificate'];
                    if (mpnsCertificateValue !== null && mpnsCertificateValue !== undefined) {
                      var mpnsCertificateInstance = mpnsCertificateValue;
                      propertiesInstance5.mpnsCertificate = mpnsCertificateInstance;
                    }
                    
                    var certificateKeyValue2 = propertiesValue5['certificateKey'];
                    if (certificateKeyValue2 !== null && certificateKeyValue2 !== undefined) {
                      var certificateKeyInstance2 = certificateKeyValue2;
                      propertiesInstance5.certificateKey = certificateKeyInstance2;
                    }
                    
                    var thumbprintValue2 = propertiesValue5['thumbprint'];
                    if (thumbprintValue2 !== null && thumbprintValue2 !== undefined) {
                      var thumbprintInstance2 = thumbprintValue2;
                      propertiesInstance5.thumbprint = thumbprintInstance2;
                    }
                  }
                }
                
                var admCredentialValue = propertiesValue['admCredential'];
                if (admCredentialValue !== null && admCredentialValue !== undefined) {
                  var admCredentialInstance = {};
                  propertiesInstance.admCredential = admCredentialInstance;
                  
                  var propertiesValue6 = admCredentialValue['properties'];
                  if (propertiesValue6 !== null && propertiesValue6 !== undefined) {
                    var propertiesInstance6 = {};
                    admCredentialInstance.properties = propertiesInstance6;
                    
                    var clientIdValue = propertiesValue6['clientId'];
                    if (clientIdValue !== null && clientIdValue !== undefined) {
                      var clientIdInstance = clientIdValue;
                      propertiesInstance6.clientId = clientIdInstance;
                    }
                    
                    var clientSecretValue = propertiesValue6['clientSecret'];
                    if (clientSecretValue !== null && clientSecretValue !== undefined) {
                      var clientSecretInstance = clientSecretValue;
                      propertiesInstance6.clientSecret = clientSecretInstance;
                    }
                    
                    var authTokenUrlValue = propertiesValue6['authTokenUrl'];
                    if (authTokenUrlValue !== null && authTokenUrlValue !== undefined) {
                      var authTokenUrlInstance = authTokenUrlValue;
                      propertiesInstance6.authTokenUrl = authTokenUrlInstance;
                    }
                  }
                }
                
                var baiduCredentialValue = propertiesValue['baiduCredential'];
                if (baiduCredentialValue !== null && baiduCredentialValue !== undefined) {
                  var baiduCredentialInstance = {};
                  propertiesInstance.baiduCredential = baiduCredentialInstance;
                  
                  var propertiesValue7 = baiduCredentialValue['properties'];
                  if (propertiesValue7 !== null && propertiesValue7 !== undefined) {
                    var propertiesInstance7 = {};
                    baiduCredentialInstance.properties = propertiesInstance7;
                    
                    var baiduApiKeyValue = propertiesValue7['baiduApiKey'];
                    if (baiduApiKeyValue !== null && baiduApiKeyValue !== undefined) {
                      var baiduApiKeyInstance = baiduApiKeyValue;
                      propertiesInstance7.baiduApiKey = baiduApiKeyInstance;
                    }
                    
                    var baiduEndPointValue = propertiesValue7['baiduEndPoint'];
                    if (baiduEndPointValue !== null && baiduEndPointValue !== undefined) {
                      var baiduEndPointInstance = baiduEndPointValue;
                      propertiesInstance7.baiduEndPoint = baiduEndPointInstance;
                    }
                    
                    var baiduSecretKeyValue = propertiesValue7['baiduSecretKey'];
                    if (baiduSecretKeyValue !== null && baiduSecretKeyValue !== undefined) {
                      var baiduSecretKeyInstance = baiduSecretKeyValue;
                      propertiesInstance7.baiduSecretKey = baiduSecretKeyInstance;
                    }
                  }
                }
              }
            }
          }
          
          var nextLinkValue = responseDoc['nextLink'];
          if (nextLinkValue !== null && nextLinkValue !== undefined) {
            var nextLinkInstance = nextLinkValue;
            result.nextLink = nextLinkInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The get authorization rules operation gets the authorization rules for a
   * NotificationHub.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} namespaceName The NotificationHub to get the authorization
   * rule for.
   * 
   * @param {string} notificationHubName The notification hub name.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  NotificationHubOperations.prototype.listAuthorizationRules = function(resourceGroupName, namespaceName, notificationHubName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (namespaceName === null || namespaceName === undefined) {
      return callback(new Error('namespaceName cannot be null.'));
    }
    if (notificationHubName === null || notificationHubName === undefined) {
      return callback(new Error('notificationHubName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.NotificationHubs';
    url2 = url2 + '/namespaces/';
    url2 = url2 + encodeURIComponent(namespaceName);
    url2 = url2 + '/notificationHubs/';
    url2 = url2 + encodeURIComponent(notificationHubName);
    url2 = url2 + '/AuthorizationRules';
    var queryParameters = [];
    queryParameters.push('api-version=2014-09-01');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = { value: [] };
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var valueArray = responseDoc['value'];
          if (valueArray !== null && valueArray !== undefined) {
            for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var valueValue = valueArray[loweredIndex1];
              var sharedAccessAuthorizationRuleResourceInstance = { tags: {} };
              result.value.push(sharedAccessAuthorizationRuleResourceInstance);
              
              var idValue = valueValue['id'];
              if (idValue !== null && idValue !== undefined) {
                var idInstance = idValue;
                sharedAccessAuthorizationRuleResourceInstance.id = idInstance;
              }
              
              var locationValue = valueValue['location'];
              if (locationValue !== null && locationValue !== undefined) {
                var locationInstance = locationValue;
                sharedAccessAuthorizationRuleResourceInstance.location = locationInstance;
              }
              
              var nameValue = valueValue['name'];
              if (nameValue !== null && nameValue !== undefined) {
                var nameInstance = nameValue;
                sharedAccessAuthorizationRuleResourceInstance.name = nameInstance;
              }
              
              var typeValue = valueValue['type'];
              if (typeValue !== null && typeValue !== undefined) {
                var typeInstance = typeValue;
                sharedAccessAuthorizationRuleResourceInstance.type = typeInstance;
              }
              
              var tagsSequenceElement = valueValue['tags'];
              if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
                for (var property in tagsSequenceElement) {
                  var tagsKey = property;
                  var tagsValue = tagsSequenceElement[property];
                  sharedAccessAuthorizationRuleResourceInstance.tags[tagsKey] = tagsValue;
                }
              }
              
              var propertiesValue = valueValue['properties'];
              if (propertiesValue !== null && propertiesValue !== undefined) {
                var propertiesInstance = { rights: [] };
                sharedAccessAuthorizationRuleResourceInstance.properties = propertiesInstance;
                
                var primaryKeyValue = propertiesValue['primaryKey'];
                if (primaryKeyValue !== null && primaryKeyValue !== undefined) {
                  var primaryKeyInstance = primaryKeyValue;
                  propertiesInstance.primaryKey = primaryKeyInstance;
                }
                
                var secondaryKeyValue = propertiesValue['secondaryKey'];
                if (secondaryKeyValue !== null && secondaryKeyValue !== undefined) {
                  var secondaryKeyInstance = secondaryKeyValue;
                  propertiesInstance.secondaryKey = secondaryKeyInstance;
                }
                
                var keyNameValue = propertiesValue['keyName'];
                if (keyNameValue !== null && keyNameValue !== undefined) {
                  var keyNameInstance = keyNameValue;
                  propertiesInstance.keyName = keyNameInstance;
                }
                
                var claimTypeValue = propertiesValue['claimType'];
                if (claimTypeValue !== null && claimTypeValue !== undefined) {
                  var claimTypeInstance = claimTypeValue;
                  propertiesInstance.claimType = claimTypeInstance;
                }
                
                var claimValueValue = propertiesValue['claimValue'];
                if (claimValueValue !== null && claimValueValue !== undefined) {
                  var claimValueInstance = claimValueValue;
                  propertiesInstance.claimValue = claimValueInstance;
                }
                
                var rightsArray = propertiesValue['rights'];
                if (rightsArray !== null && rightsArray !== undefined) {
                  for (var loweredIndex2 = 0; loweredIndex2 < rightsArray.length; loweredIndex2 = loweredIndex2 + 1) {
                    var rightsValue = rightsArray[loweredIndex2];
                    propertiesInstance.rights.push(rightsValue);
                  }
                }
                
                var createdTimeValue = propertiesValue['createdTime'];
                if (createdTimeValue !== null && createdTimeValue !== undefined) {
                  var createdTimeInstance = new Date(createdTimeValue);
                  propertiesInstance.createdTime = createdTimeInstance;
                }
                
                var modifiedTimeValue = propertiesValue['modifiedTime'];
                if (modifiedTimeValue !== null && modifiedTimeValue !== undefined) {
                  var modifiedTimeInstance = new Date(modifiedTimeValue);
                  propertiesInstance.modifiedTime = modifiedTimeInstance;
                }
                
                var revisionValue = propertiesValue['revision'];
                if (revisionValue !== null && revisionValue !== undefined) {
                  var revisionInstance = revisionValue;
                  propertiesInstance.revision = revisionInstance;
                }
              }
            }
          }
          
          var nextLinkValue = responseDoc['nextLink'];
          if (nextLinkValue !== null && nextLinkValue !== undefined) {
            var nextLinkInstance = nextLinkValue;
            result.nextLink = nextLinkInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Gets the Primary and Secondary ConnectionStrings to the NotificationHub
   * (see http://msdn.microsoft.com/en-us/library/windowsazure/jj873988.aspx
   * for more information)
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} namespaceName The namespace name.
   * 
   * @param {string} notificationHubName The notification hub name.
   * 
   * @param {string} authorizationRuleName The connection string of the
   * NotificationHub for the specified authorizationRule.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  NotificationHubOperations.prototype.listKeys = function(resourceGroupName, namespaceName, notificationHubName, authorizationRuleName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (namespaceName === null || namespaceName === undefined) {
      return callback(new Error('namespaceName cannot be null.'));
    }
    if (notificationHubName === null || notificationHubName === undefined) {
      return callback(new Error('notificationHubName cannot be null.'));
    }
    if (authorizationRuleName === null || authorizationRuleName === undefined) {
      return callback(new Error('authorizationRuleName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.NotificationHubs';
    url2 = url2 + '/namespaces/';
    url2 = url2 + encodeURIComponent(namespaceName);
    url2 = url2 + '/notificationHubs/';
    url2 = url2 + encodeURIComponent(notificationHubName);
    url2 = url2 + '/AuthorizationRules/';
    url2 = url2 + encodeURIComponent(authorizationRuleName);
    url2 = url2 + '/listKeys';
    var queryParameters = [];
    queryParameters.push('api-version=2014-09-01');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var primaryConnectionStringValue = responseDoc['primaryConnectionString'];
          if (primaryConnectionStringValue !== null && primaryConnectionStringValue !== undefined) {
            var primaryConnectionStringInstance = primaryConnectionStringValue;
            result.primaryConnectionString = primaryConnectionStringInstance;
          }
          
          var secondaryConnectionStringValue = responseDoc['secondaryConnectionString'];
          if (secondaryConnectionStringValue !== null && secondaryConnectionStringValue !== undefined) {
            var secondaryConnectionStringInstance = secondaryConnectionStringValue;
            result.secondaryConnectionString = secondaryConnectionStringInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Creates a new NotificationHub in a namespace.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/jj856303.aspx for
   * more information)
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} namespaceName The namespace name.
   * 
   * @param {string} notificationHubName The notification hub name.
   * 
   * @param {NotificationHubCreateOrUpdateParameters} parameters Parameters
   * supplied to the create a Namespace Resource.
   * 
   * @param {string} parameters.location Gets or sets NotificationHub data
   * center location.
   * 
   * @param {object} [parameters.tags] Gets or sets NotificationHub tags.
   * 
   * @param {NotificationHubProperties} parameters.properties Gets or sets
   * properties of the NotificationHub.
   * 
   * @param {string} [parameters.properties.name] The NotificationHub name.
   * 
   * @param {string} [parameters.properties.registrationTtl] The
   * RegistrationTtl of the created NotificationHub
   * 
   * @param {array} [parameters.properties.authorizationRules] The
   * AuthorizationRules of the created NotificationHub
   * 
   * @param {ApnsCredential} [parameters.properties.apnsCredential] The
   * ApnsCredential of the created NotificationHub
   * 
   * @param {ApnsCredentialProperties}
   * [parameters.properties.apnsCredential.properties] Gets or sets properties
   * of NotificationHub ApnsCredential.
   * 
   * @param {string}
   * [parameters.properties.apnsCredential.properties.apnsCertificate] Gets or
   * sets the APNS certificate.
   * 
   * @param {string}
   * [parameters.properties.apnsCredential.properties.certificateKey] Gets or
   * sets the certificate key.
   * 
   * @param {string} [parameters.properties.apnsCredential.properties.endpoint]
   * Gets or sets the endpoint of this credential.
   * 
   * @param {string}
   * [parameters.properties.apnsCredential.properties.thumbprint] Gets or sets
   * the Apns certificate Thumbprint
   * 
   * @param {WnsCredential} [parameters.properties.wnsCredential] The
   * WnsCredential of the created NotificationHub
   * 
   * @param {WnsCredentialProperties}
   * [parameters.properties.wnsCredential.properties] Gets or sets properties
   * of NotificationHub WnsCredential.
   * 
   * @param {string}
   * [parameters.properties.wnsCredential.properties.packageSid] Gets or sets
   * the package ID for this credential.
   * 
   * @param {string} [parameters.properties.wnsCredential.properties.secretKey]
   * Gets or sets the secret key.
   * 
   * @param {string}
   * [parameters.properties.wnsCredential.properties.windowsLiveEndpoint] Gets
   * or sets the Windows Live endpoint.
   * 
   * @param {GcmCredential} [parameters.properties.gcmCredential] The
   * GcmCredential of the created NotificationHub
   * 
   * @param {GcmCredentialProperties}
   * [parameters.properties.gcmCredential.properties] Gets or sets properties
   * of NotificationHub GcmCredential.
   * 
   * @param {string}
   * [parameters.properties.gcmCredential.properties.gcmEndpoint] Gets or sets
   * the GCM endpoint.
   * 
   * @param {string}
   * [parameters.properties.gcmCredential.properties.googleApiKey] Gets or
   * sets the Google API key.
   * 
   * @param {MpnsCredential} [parameters.properties.mpnsCredential] The
   * MpnsCredential of the created NotificationHub
   * 
   * @param {MpnsCredentialProperties}
   * [parameters.properties.mpnsCredential.properties] Gets or sets properties
   * of NotificationHub MpnsCredential.
   * 
   * @param {string}
   * [parameters.properties.mpnsCredential.properties.mpnsCertificate] Gets or
   * sets the MPNS certificate.
   * 
   * @param {string}
   * [parameters.properties.mpnsCredential.properties.certificateKey] Gets or
   * sets the certificate key for this credential.
   * 
   * @param {string}
   * [parameters.properties.mpnsCredential.properties.thumbprint] Gets or sets
   * the Mpns certificate Thumbprint
   * 
   * @param {AdmCredential} [parameters.properties.admCredential] The
   * AdmCredential of the created NotificationHub
   * 
   * @param {AdmCredentialProperties}
   * [parameters.properties.admCredential.properties] Gets or sets properties
   * of NotificationHub AdmCredential.
   * 
   * @param {string} [parameters.properties.admCredential.properties.clientId]
   * Gets or sets the client identifier.
   * 
   * @param {string}
   * [parameters.properties.admCredential.properties.clientSecret] Gets or
   * sets the credential secret access key.
   * 
   * @param {string}
   * [parameters.properties.admCredential.properties.authTokenUrl] Gets or
   * sets the URL of the authorization token.
   * 
   * @param {BaiduCredential} [parameters.properties.baiduCredential] The
   * BaiduCredential of the created NotificationHub
   * 
   * @param {BaiduCredentialProperties}
   * [parameters.properties.baiduCredential.properties] Gets or sets
   * properties of NotificationHub BaiduCredential.
   * 
   * @param {string}
   * [parameters.properties.baiduCredential.properties.baiduApiKey] Get or Set
   * Baidu Api Key.
   * 
   * @param {string}
   * [parameters.properties.baiduCredential.properties.baiduEndPoint] Get or
   * Set Baidu Endpoint.
   * 
   * @param {string}
   * [parameters.properties.baiduCredential.properties.baiduSecretKey] Get or
   * Set Baidu Secret Key
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  NotificationHubOperations.prototype.update = function(resourceGroupName, namespaceName, notificationHubName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (namespaceName === null || namespaceName === undefined) {
      return callback(new Error('namespaceName cannot be null.'));
    }
    if (notificationHubName === null || notificationHubName === undefined) {
      return callback(new Error('notificationHubName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.location === null || parameters.location === undefined) {
      return callback(new Error('parameters.location cannot be null.'));
    }
    if (parameters.properties === null || parameters.properties === undefined) {
      return callback(new Error('parameters.properties cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.NotificationHubs';
    url2 = url2 + '/namespaces/';
    url2 = url2 + encodeURIComponent(namespaceName);
    url2 = url2 + '/notificationHubs/';
    url2 = url2 + encodeURIComponent(notificationHubName);
    var queryParameters = [];
    queryParameters.push('api-version=2014-09-01');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    httpRequest.headers['if-match'] = '*';
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = null;
    
    var notificationHubCreateOrUpdateParametersValue = {};
    requestDoc = notificationHubCreateOrUpdateParametersValue;
    
    notificationHubCreateOrUpdateParametersValue['location'] = parameters.location;
    
    if (parameters.tags !== null && parameters.tags !== undefined) {
      var tagsDictionary = {};
      for (var tagsKey in parameters.tags) {
        var tagsValue = parameters.tags[tagsKey];
        tagsDictionary[tagsKey] = tagsValue;
      }
      notificationHubCreateOrUpdateParametersValue['tags'] = tagsDictionary;
    }
    
    var propertiesValue = {};
    notificationHubCreateOrUpdateParametersValue['properties'] = propertiesValue;
    
    if (parameters.properties.name !== null && parameters.properties.name !== undefined) {
      propertiesValue['name'] = parameters.properties.name;
    }
    
    if (parameters.properties.registrationTtl !== null && parameters.properties.registrationTtl !== undefined) {
      propertiesValue['registrationTtl'] = parameters.properties.registrationTtl;
    }
    
    if (parameters.properties.authorizationRules !== null && parameters.properties.authorizationRules !== undefined) {
      var authorizationRulesArray = [];
      for (var loweredIndex1 = 0; loweredIndex1 < parameters.properties.authorizationRules.length; loweredIndex1 = loweredIndex1 + 1) {
        var authorizationRulesItem = parameters.properties.authorizationRules[loweredIndex1];
        
        if (authorizationRulesItem.primaryKey !== null && authorizationRulesItem.primaryKey !== undefined) {
          requestDoc = authorizationRulesItem.primaryKey;
        }
        
        if (authorizationRulesItem.secondaryKey !== null && authorizationRulesItem.secondaryKey !== undefined) {
          requestDoc = authorizationRulesItem.secondaryKey;
        }
        
        if (authorizationRulesItem.keyName !== null && authorizationRulesItem.keyName !== undefined) {
          requestDoc = authorizationRulesItem.keyName;
        }
        
        if (authorizationRulesItem.claimType !== null && authorizationRulesItem.claimType !== undefined) {
          requestDoc = authorizationRulesItem.claimType;
        }
        
        if (authorizationRulesItem.claimValue !== null && authorizationRulesItem.claimValue !== undefined) {
          requestDoc = authorizationRulesItem.claimValue;
        }
        
        if (authorizationRulesItem.rights !== null && authorizationRulesItem.rights !== undefined) {
          var rightsArray = [];
          for (var loweredIndex2 = 0; loweredIndex2 < authorizationRulesItem.rights.length; loweredIndex2 = loweredIndex2 + 1) {
            var rightsItem = authorizationRulesItem.rights[loweredIndex2];
            rightsArray.push(rightsItem !== null && rightsItem !== undefined ? rightsItem.toString() : 'Manage');
          }
          requestDoc = rightsArray;
        }
        
        if (authorizationRulesItem.createdTime !== null && authorizationRulesItem.createdTime !== undefined) {
          requestDoc = authorizationRulesItem.createdTime.toISOString();
        }
        
        if (authorizationRulesItem.modifiedTime !== null && authorizationRulesItem.modifiedTime !== undefined) {
          requestDoc = authorizationRulesItem.modifiedTime.toISOString();
        }
        
        if (authorizationRulesItem.revision !== null && authorizationRulesItem.revision !== undefined) {
          requestDoc = authorizationRulesItem.revision;
        }
      }
      propertiesValue['authorizationRules'] = authorizationRulesArray;
    }
    
    if (parameters.properties.apnsCredential !== null && parameters.properties.apnsCredential !== undefined) {
      var apnsCredentialValue = {};
      propertiesValue['apnsCredential'] = apnsCredentialValue;
      
      if (parameters.properties.apnsCredential.properties !== null && parameters.properties.apnsCredential.properties !== undefined) {
        var propertiesValue2 = {};
        apnsCredentialValue['properties'] = propertiesValue2;
        
        if (parameters.properties.apnsCredential.properties.apnsCertificate !== null && parameters.properties.apnsCredential.properties.apnsCertificate !== undefined) {
          propertiesValue2['apnsCertificate'] = parameters.properties.apnsCredential.properties.apnsCertificate;
        }
        
        if (parameters.properties.apnsCredential.properties.certificateKey !== null && parameters.properties.apnsCredential.properties.certificateKey !== undefined) {
          propertiesValue2['certificateKey'] = parameters.properties.apnsCredential.properties.certificateKey;
        }
        
        if (parameters.properties.apnsCredential.properties.endpoint !== null && parameters.properties.apnsCredential.properties.endpoint !== undefined) {
          propertiesValue2['endpoint'] = parameters.properties.apnsCredential.properties.endpoint;
        }
        
        if (parameters.properties.apnsCredential.properties.thumbprint !== null && parameters.properties.apnsCredential.properties.thumbprint !== undefined) {
          propertiesValue2['thumbprint'] = parameters.properties.apnsCredential.properties.thumbprint;
        }
      }
    }
    
    if (parameters.properties.wnsCredential !== null && parameters.properties.wnsCredential !== undefined) {
      var wnsCredentialValue = {};
      propertiesValue['wnsCredential'] = wnsCredentialValue;
      
      if (parameters.properties.wnsCredential.properties !== null && parameters.properties.wnsCredential.properties !== undefined) {
        var propertiesValue3 = {};
        wnsCredentialValue['properties'] = propertiesValue3;
        
        if (parameters.properties.wnsCredential.properties.packageSid !== null && parameters.properties.wnsCredential.properties.packageSid !== undefined) {
          propertiesValue3['packageSid'] = parameters.properties.wnsCredential.properties.packageSid;
        }
        
        if (parameters.properties.wnsCredential.properties.secretKey !== null && parameters.properties.wnsCredential.properties.secretKey !== undefined) {
          propertiesValue3['secretKey'] = parameters.properties.wnsCredential.properties.secretKey;
        }
        
        if (parameters.properties.wnsCredential.properties.windowsLiveEndpoint !== null && parameters.properties.wnsCredential.properties.windowsLiveEndpoint !== undefined) {
          propertiesValue3['windowsLiveEndpoint'] = parameters.properties.wnsCredential.properties.windowsLiveEndpoint;
        }
      }
    }
    
    if (parameters.properties.gcmCredential !== null && parameters.properties.gcmCredential !== undefined) {
      var gcmCredentialValue = {};
      propertiesValue['gcmCredential'] = gcmCredentialValue;
      
      if (parameters.properties.gcmCredential.properties !== null && parameters.properties.gcmCredential.properties !== undefined) {
        var propertiesValue4 = {};
        gcmCredentialValue['properties'] = propertiesValue4;
        
        if (parameters.properties.gcmCredential.properties.gcmEndpoint !== null && parameters.properties.gcmCredential.properties.gcmEndpoint !== undefined) {
          propertiesValue4['gcmEndpoint'] = parameters.properties.gcmCredential.properties.gcmEndpoint;
        }
        
        if (parameters.properties.gcmCredential.properties.googleApiKey !== null && parameters.properties.gcmCredential.properties.googleApiKey !== undefined) {
          propertiesValue4['googleApiKey'] = parameters.properties.gcmCredential.properties.googleApiKey;
        }
      }
    }
    
    if (parameters.properties.mpnsCredential !== null && parameters.properties.mpnsCredential !== undefined) {
      var mpnsCredentialValue = {};
      propertiesValue['mpnsCredential'] = mpnsCredentialValue;
      
      if (parameters.properties.mpnsCredential.properties !== null && parameters.properties.mpnsCredential.properties !== undefined) {
        var propertiesValue5 = {};
        mpnsCredentialValue['properties'] = propertiesValue5;
        
        if (parameters.properties.mpnsCredential.properties.mpnsCertificate !== null && parameters.properties.mpnsCredential.properties.mpnsCertificate !== undefined) {
          propertiesValue5['mpnsCertificate'] = parameters.properties.mpnsCredential.properties.mpnsCertificate;
        }
        
        if (parameters.properties.mpnsCredential.properties.certificateKey !== null && parameters.properties.mpnsCredential.properties.certificateKey !== undefined) {
          propertiesValue5['certificateKey'] = parameters.properties.mpnsCredential.properties.certificateKey;
        }
        
        if (parameters.properties.mpnsCredential.properties.thumbprint !== null && parameters.properties.mpnsCredential.properties.thumbprint !== undefined) {
          propertiesValue5['thumbprint'] = parameters.properties.mpnsCredential.properties.thumbprint;
        }
      }
    }
    
    if (parameters.properties.admCredential !== null && parameters.properties.admCredential !== undefined) {
      var admCredentialValue = {};
      propertiesValue['admCredential'] = admCredentialValue;
      
      if (parameters.properties.admCredential.properties !== null && parameters.properties.admCredential.properties !== undefined) {
        var propertiesValue6 = {};
        admCredentialValue['properties'] = propertiesValue6;
        
        if (parameters.properties.admCredential.properties.clientId !== null && parameters.properties.admCredential.properties.clientId !== undefined) {
          propertiesValue6['clientId'] = parameters.properties.admCredential.properties.clientId;
        }
        
        if (parameters.properties.admCredential.properties.clientSecret !== null && parameters.properties.admCredential.properties.clientSecret !== undefined) {
          propertiesValue6['clientSecret'] = parameters.properties.admCredential.properties.clientSecret;
        }
        
        if (parameters.properties.admCredential.properties.authTokenUrl !== null && parameters.properties.admCredential.properties.authTokenUrl !== undefined) {
          propertiesValue6['authTokenUrl'] = parameters.properties.admCredential.properties.authTokenUrl;
        }
      }
    }
    
    if (parameters.properties.baiduCredential !== null && parameters.properties.baiduCredential !== undefined) {
      var baiduCredentialValue = {};
      propertiesValue['baiduCredential'] = baiduCredentialValue;
      
      if (parameters.properties.baiduCredential.properties !== null && parameters.properties.baiduCredential.properties !== undefined) {
        var propertiesValue7 = {};
        baiduCredentialValue['properties'] = propertiesValue7;
        
        if (parameters.properties.baiduCredential.properties.baiduApiKey !== null && parameters.properties.baiduCredential.properties.baiduApiKey !== undefined) {
          propertiesValue7['baiduApiKey'] = parameters.properties.baiduCredential.properties.baiduApiKey;
        }
        
        if (parameters.properties.baiduCredential.properties.baiduEndPoint !== null && parameters.properties.baiduCredential.properties.baiduEndPoint !== undefined) {
          propertiesValue7['baiduEndPoint'] = parameters.properties.baiduCredential.properties.baiduEndPoint;
        }
        
        if (parameters.properties.baiduCredential.properties.baiduSecretKey !== null && parameters.properties.baiduCredential.properties.baiduSecretKey !== undefined) {
          propertiesValue7['baiduSecretKey'] = parameters.properties.baiduCredential.properties.baiduSecretKey;
        }
      }
    }
    
    requestContent = JSON.stringify(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200 && statusCode !== 201) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200 || statusCode === 201) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var valueInstance = { tags: {} };
          result.value = valueInstance;
          
          var idValue = responseDoc['id'];
          if (idValue !== null && idValue !== undefined) {
            var idInstance = idValue;
            valueInstance.id = idInstance;
          }
          
          var locationValue = responseDoc['location'];
          if (locationValue !== null && locationValue !== undefined) {
            var locationInstance = locationValue;
            valueInstance.location = locationInstance;
          }
          
          var nameValue = responseDoc['name'];
          if (nameValue !== null && nameValue !== undefined) {
            var nameInstance = nameValue;
            valueInstance.name = nameInstance;
          }
          
          var typeValue = responseDoc['type'];
          if (typeValue !== null && typeValue !== undefined) {
            var typeInstance = typeValue;
            valueInstance.type = typeInstance;
          }
          
          var tagsSequenceElement = responseDoc['tags'];
          if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
            for (var property in tagsSequenceElement) {
              var tagsKey2 = property;
              var tagsValue2 = tagsSequenceElement[property];
              valueInstance.tags[tagsKey2] = tagsValue2;
            }
          }
          
          var propertiesValue8 = responseDoc['properties'];
          if (propertiesValue8 !== null && propertiesValue8 !== undefined) {
            var propertiesInstance = { authorizationRules: [] };
            valueInstance.properties = propertiesInstance;
            
            var nameValue2 = propertiesValue8['name'];
            if (nameValue2 !== null && nameValue2 !== undefined) {
              var nameInstance2 = nameValue2;
              propertiesInstance.name = nameInstance2;
            }
            
            var registrationTtlValue = propertiesValue8['registrationTtl'];
            if (registrationTtlValue !== null && registrationTtlValue !== undefined) {
              var registrationTtlInstance = registrationTtlValue;
              propertiesInstance.registrationTtl = registrationTtlInstance;
            }
            
            var authorizationRulesArray2 = propertiesValue8['authorizationRules'];
            if (authorizationRulesArray2 !== null && authorizationRulesArray2 !== undefined) {
              for (var loweredIndex3 = 0; loweredIndex3 < authorizationRulesArray2.length; loweredIndex3 = loweredIndex3 + 1) {
                var authorizationRulesValue = authorizationRulesArray2[loweredIndex3];
                var sharedAccessAuthorizationRulePropertiesInstance = { rights: [] };
                propertiesInstance.authorizationRules.push(sharedAccessAuthorizationRulePropertiesInstance);
                
                var primaryKeyValue = authorizationRulesValue['primaryKey'];
                if (primaryKeyValue !== null && primaryKeyValue !== undefined) {
                  var primaryKeyInstance = primaryKeyValue;
                  sharedAccessAuthorizationRulePropertiesInstance.primaryKey = primaryKeyInstance;
                }
                
                var secondaryKeyValue = authorizationRulesValue['secondaryKey'];
                if (secondaryKeyValue !== null && secondaryKeyValue !== undefined) {
                  var secondaryKeyInstance = secondaryKeyValue;
                  sharedAccessAuthorizationRulePropertiesInstance.secondaryKey = secondaryKeyInstance;
                }
                
                var keyNameValue = authorizationRulesValue['keyName'];
                if (keyNameValue !== null && keyNameValue !== undefined) {
                  var keyNameInstance = keyNameValue;
                  sharedAccessAuthorizationRulePropertiesInstance.keyName = keyNameInstance;
                }
                
                var claimTypeValue = authorizationRulesValue['claimType'];
                if (claimTypeValue !== null && claimTypeValue !== undefined) {
                  var claimTypeInstance = claimTypeValue;
                  sharedAccessAuthorizationRulePropertiesInstance.claimType = claimTypeInstance;
                }
                
                var claimValueValue = authorizationRulesValue['claimValue'];
                if (claimValueValue !== null && claimValueValue !== undefined) {
                  var claimValueInstance = claimValueValue;
                  sharedAccessAuthorizationRulePropertiesInstance.claimValue = claimValueInstance;
                }
                
                var rightsArray2 = authorizationRulesValue['rights'];
                if (rightsArray2 !== null && rightsArray2 !== undefined) {
                  for (var loweredIndex4 = 0; loweredIndex4 < rightsArray2.length; loweredIndex4 = loweredIndex4 + 1) {
                    var rightsValue = rightsArray2[loweredIndex4];
                    sharedAccessAuthorizationRulePropertiesInstance.rights.push(rightsValue);
                  }
                }
                
                var createdTimeValue = authorizationRulesValue['createdTime'];
                if (createdTimeValue !== null && createdTimeValue !== undefined) {
                  var createdTimeInstance = new Date(createdTimeValue);
                  sharedAccessAuthorizationRulePropertiesInstance.createdTime = createdTimeInstance;
                }
                
                var modifiedTimeValue = authorizationRulesValue['modifiedTime'];
                if (modifiedTimeValue !== null && modifiedTimeValue !== undefined) {
                  var modifiedTimeInstance = new Date(modifiedTimeValue);
                  sharedAccessAuthorizationRulePropertiesInstance.modifiedTime = modifiedTimeInstance;
                }
                
                var revisionValue = authorizationRulesValue['revision'];
                if (revisionValue !== null && revisionValue !== undefined) {
                  var revisionInstance = revisionValue;
                  sharedAccessAuthorizationRulePropertiesInstance.revision = revisionInstance;
                }
              }
            }
            
            var apnsCredentialValue2 = propertiesValue8['apnsCredential'];
            if (apnsCredentialValue2 !== null && apnsCredentialValue2 !== undefined) {
              var apnsCredentialInstance = {};
              propertiesInstance.apnsCredential = apnsCredentialInstance;
              
              var propertiesValue9 = apnsCredentialValue2['properties'];
              if (propertiesValue9 !== null && propertiesValue9 !== undefined) {
                var propertiesInstance2 = {};
                apnsCredentialInstance.properties = propertiesInstance2;
                
                var apnsCertificateValue = propertiesValue9['apnsCertificate'];
                if (apnsCertificateValue !== null && apnsCertificateValue !== undefined) {
                  var apnsCertificateInstance = apnsCertificateValue;
                  propertiesInstance2.apnsCertificate = apnsCertificateInstance;
                }
                
                var certificateKeyValue = propertiesValue9['certificateKey'];
                if (certificateKeyValue !== null && certificateKeyValue !== undefined) {
                  var certificateKeyInstance = certificateKeyValue;
                  propertiesInstance2.certificateKey = certificateKeyInstance;
                }
                
                var endpointValue = propertiesValue9['endpoint'];
                if (endpointValue !== null && endpointValue !== undefined) {
                  var endpointInstance = endpointValue;
                  propertiesInstance2.endpoint = endpointInstance;
                }
                
                var thumbprintValue = propertiesValue9['thumbprint'];
                if (thumbprintValue !== null && thumbprintValue !== undefined) {
                  var thumbprintInstance = thumbprintValue;
                  propertiesInstance2.thumbprint = thumbprintInstance;
                }
              }
            }
            
            var wnsCredentialValue2 = propertiesValue8['wnsCredential'];
            if (wnsCredentialValue2 !== null && wnsCredentialValue2 !== undefined) {
              var wnsCredentialInstance = {};
              propertiesInstance.wnsCredential = wnsCredentialInstance;
              
              var propertiesValue10 = wnsCredentialValue2['properties'];
              if (propertiesValue10 !== null && propertiesValue10 !== undefined) {
                var propertiesInstance3 = {};
                wnsCredentialInstance.properties = propertiesInstance3;
                
                var packageSidValue = propertiesValue10['packageSid'];
                if (packageSidValue !== null && packageSidValue !== undefined) {
                  var packageSidInstance = packageSidValue;
                  propertiesInstance3.packageSid = packageSidInstance;
                }
                
                var secretKeyValue = propertiesValue10['secretKey'];
                if (secretKeyValue !== null && secretKeyValue !== undefined) {
                  var secretKeyInstance = secretKeyValue;
                  propertiesInstance3.secretKey = secretKeyInstance;
                }
                
                var windowsLiveEndpointValue = propertiesValue10['windowsLiveEndpoint'];
                if (windowsLiveEndpointValue !== null && windowsLiveEndpointValue !== undefined) {
                  var windowsLiveEndpointInstance = windowsLiveEndpointValue;
                  propertiesInstance3.windowsLiveEndpoint = windowsLiveEndpointInstance;
                }
              }
            }
            
            var gcmCredentialValue2 = propertiesValue8['gcmCredential'];
            if (gcmCredentialValue2 !== null && gcmCredentialValue2 !== undefined) {
              var gcmCredentialInstance = {};
              propertiesInstance.gcmCredential = gcmCredentialInstance;
              
              var propertiesValue11 = gcmCredentialValue2['properties'];
              if (propertiesValue11 !== null && propertiesValue11 !== undefined) {
                var propertiesInstance4 = {};
                gcmCredentialInstance.properties = propertiesInstance4;
                
                var gcmEndpointValue = propertiesValue11['gcmEndpoint'];
                if (gcmEndpointValue !== null && gcmEndpointValue !== undefined) {
                  var gcmEndpointInstance = gcmEndpointValue;
                  propertiesInstance4.gcmEndpoint = gcmEndpointInstance;
                }
                
                var googleApiKeyValue = propertiesValue11['googleApiKey'];
                if (googleApiKeyValue !== null && googleApiKeyValue !== undefined) {
                  var googleApiKeyInstance = googleApiKeyValue;
                  propertiesInstance4.googleApiKey = googleApiKeyInstance;
                }
              }
            }
            
            var mpnsCredentialValue2 = propertiesValue8['mpnsCredential'];
            if (mpnsCredentialValue2 !== null && mpnsCredentialValue2 !== undefined) {
              var mpnsCredentialInstance = {};
              propertiesInstance.mpnsCredential = mpnsCredentialInstance;
              
              var propertiesValue12 = mpnsCredentialValue2['properties'];
              if (propertiesValue12 !== null && propertiesValue12 !== undefined) {
                var propertiesInstance5 = {};
                mpnsCredentialInstance.properties = propertiesInstance5;
                
                var mpnsCertificateValue = propertiesValue12['mpnsCertificate'];
                if (mpnsCertificateValue !== null && mpnsCertificateValue !== undefined) {
                  var mpnsCertificateInstance = mpnsCertificateValue;
                  propertiesInstance5.mpnsCertificate = mpnsCertificateInstance;
                }
                
                var certificateKeyValue2 = propertiesValue12['certificateKey'];
                if (certificateKeyValue2 !== null && certificateKeyValue2 !== undefined) {
                  var certificateKeyInstance2 = certificateKeyValue2;
                  propertiesInstance5.certificateKey = certificateKeyInstance2;
                }
                
                var thumbprintValue2 = propertiesValue12['thumbprint'];
                if (thumbprintValue2 !== null && thumbprintValue2 !== undefined) {
                  var thumbprintInstance2 = thumbprintValue2;
                  propertiesInstance5.thumbprint = thumbprintInstance2;
                }
              }
            }
            
            var admCredentialValue2 = propertiesValue8['admCredential'];
            if (admCredentialValue2 !== null && admCredentialValue2 !== undefined) {
              var admCredentialInstance = {};
              propertiesInstance.admCredential = admCredentialInstance;
              
              var propertiesValue13 = admCredentialValue2['properties'];
              if (propertiesValue13 !== null && propertiesValue13 !== undefined) {
                var propertiesInstance6 = {};
                admCredentialInstance.properties = propertiesInstance6;
                
                var clientIdValue = propertiesValue13['clientId'];
                if (clientIdValue !== null && clientIdValue !== undefined) {
                  var clientIdInstance = clientIdValue;
                  propertiesInstance6.clientId = clientIdInstance;
                }
                
                var clientSecretValue = propertiesValue13['clientSecret'];
                if (clientSecretValue !== null && clientSecretValue !== undefined) {
                  var clientSecretInstance = clientSecretValue;
                  propertiesInstance6.clientSecret = clientSecretInstance;
                }
                
                var authTokenUrlValue = propertiesValue13['authTokenUrl'];
                if (authTokenUrlValue !== null && authTokenUrlValue !== undefined) {
                  var authTokenUrlInstance = authTokenUrlValue;
                  propertiesInstance6.authTokenUrl = authTokenUrlInstance;
                }
              }
            }
            
            var baiduCredentialValue2 = propertiesValue8['baiduCredential'];
            if (baiduCredentialValue2 !== null && baiduCredentialValue2 !== undefined) {
              var baiduCredentialInstance = {};
              propertiesInstance.baiduCredential = baiduCredentialInstance;
              
              var propertiesValue14 = baiduCredentialValue2['properties'];
              if (propertiesValue14 !== null && propertiesValue14 !== undefined) {
                var propertiesInstance7 = {};
                baiduCredentialInstance.properties = propertiesInstance7;
                
                var baiduApiKeyValue = propertiesValue14['baiduApiKey'];
                if (baiduApiKeyValue !== null && baiduApiKeyValue !== undefined) {
                  var baiduApiKeyInstance = baiduApiKeyValue;
                  propertiesInstance7.baiduApiKey = baiduApiKeyInstance;
                }
                
                var baiduEndPointValue = propertiesValue14['baiduEndPoint'];
                if (baiduEndPointValue !== null && baiduEndPointValue !== undefined) {
                  var baiduEndPointInstance = baiduEndPointValue;
                  propertiesInstance7.baiduEndPoint = baiduEndPointInstance;
                }
                
                var baiduSecretKeyValue = propertiesValue14['baiduSecretKey'];
                if (baiduSecretKeyValue !== null && baiduSecretKeyValue !== undefined) {
                  var baiduSecretKeyInstance = baiduSecretKeyValue;
                  propertiesInstance7.baiduSecretKey = baiduSecretKeyInstance;
                }
              }
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  return NotificationHubOperations;
})();
