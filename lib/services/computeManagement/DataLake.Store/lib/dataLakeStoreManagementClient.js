/* jshint latedef:false */
/* jshint forin:false */
/* jshint noempty:false */

// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

'use strict';

var util = require('util');
var uuid = require('node-uuid');
var _ = require('underscore');
var azureCommon = require('azure-common');
var Service = azureCommon.Service;
var WebResource = azureCommon.WebResource;
var OperationStatus = azureCommon.OperationStatus;

var DataLakeStoreManagementClient = ( /** @lends DataLakeStoreManagementClient */ function() {
  /**
   * @class
   * Creates a Data Lake Store account management client.
   * Initializes a new instance of the DataLakeStoreManagementClient class.
   * @constructor
   * 
   * @param {SubscriptionCloudCredentials} credentials Gets subscription
   * credentials which uniquely identify Microsoft Azure subscription. The
   * subscription ID forms part of the URI for every service call.
   * 
   * @param {string} [credentials.subscriptionId]
   * 
   * @param {string} [baseUri] Gets the URI used as the base for all cloud
   * service requests.
   * 
   * @param {Array} filters
   */
  function DataLakeStoreManagementClient(credentials, baseUri, filters) {
    if (credentials === null || credentials === undefined) {
      throw new Error('credentials cannot be null.');
    }
    
    DataLakeStoreManagementClient['super_'].call(this, credentials, filters);
    
    this.credentials = credentials;
    this.baseUri = baseUri;
    if (this.userAgentSuffix === null || this.userAgentSuffix === undefined) {
      this.userAgentSuffix = '';
    }
    if (this.baseUri === null || this.baseUri === undefined) {
      this.baseUri = 'https://management.azure.com';
    }
    if (this.apiVersion === null || this.apiVersion === undefined) {
      this.apiVersion = '2015-10-01-preview';
    }
    if (this.longRunningOperationInitialTimeout === null || this.longRunningOperationInitialTimeout === undefined) {
      this.longRunningOperationInitialTimeout = -1;
    }
    if (this.longRunningOperationRetryTimeout === null || this.longRunningOperationRetryTimeout === undefined) {
      this.longRunningOperationRetryTimeout = -1;
    }
    /**
     * Provides an instance of the
     * [DataLakeStoreAccountOperations](-DataLakeStoreAccountOperations.html)
     * object.
     * @type {object}
     */
    this.dataLakeStoreAccount = new DataLakeStoreAccountOperations(this);
  }
  
  util.inherits(DataLakeStoreManagementClient, Service);
  
  /**
   * The Get Operation Status operation returns the status of the specified
   * operation. After calling an asynchronous operation, you can call Get
   * Operation Status to determine whether the operation has succeeded,
   * failed, or is still in progress.
   * 
   * @param {string} azureAsyncOperation Location value returned by the Begin
   * operation.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  DataLakeStoreManagementClient.prototype.getLongRunningOperationStatus = function(azureAsyncOperation, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (azureAsyncOperation === null || azureAsyncOperation === undefined) {
      return callback(new Error('azureAsyncOperation cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + azureAsyncOperation;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    
    // Send Request
    return this.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200 && statusCode !== 202) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200 || statusCode === 202) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var statusValue = responseDoc['status'];
          if (statusValue !== null && statusValue !== undefined) {
            var statusInstance = statusValue;
            result.status = statusInstance;
          }
          
          var errorValue = responseDoc['error'];
          if (errorValue !== null && errorValue !== undefined) {
            var errorInstance = { details: [] };
            result.error = errorInstance;
            
            var codeValue = errorValue['code'];
            if (codeValue !== null && codeValue !== undefined) {
              var codeInstance = codeValue;
              errorInstance.code = codeInstance;
            }
            
            var messageValue = errorValue['message'];
            if (messageValue !== null && messageValue !== undefined) {
              var messageInstance = messageValue;
              errorInstance.message = messageInstance;
            }
            
            var targetValue = errorValue['target'];
            if (targetValue !== null && targetValue !== undefined) {
              var targetInstance = targetValue;
              errorInstance.target = targetInstance;
            }
            
            var detailsArray = errorValue['details'];
            if (detailsArray !== null && detailsArray !== undefined) {
              for (var loweredIndex1 = 0; loweredIndex1 < detailsArray.length; loweredIndex1 = loweredIndex1 + 1) {
                var detailsValue = detailsArray[loweredIndex1];
                var errorDetailsInstance = {};
                errorInstance.details.push(errorDetailsInstance);
                
                var codeValue2 = detailsValue['code'];
                if (codeValue2 !== null && codeValue2 !== undefined) {
                  var codeInstance2 = codeValue2;
                  errorDetailsInstance.code = codeInstance2;
                }
                
                var messageValue2 = detailsValue['message'];
                if (messageValue2 !== null && messageValue2 !== undefined) {
                  var messageInstance2 = messageValue2;
                  errorDetailsInstance.message = messageInstance2;
                }
                
                var targetValue2 = detailsValue['target'];
                if (targetValue2 !== null && targetValue2 !== undefined) {
                  var targetInstance2 = targetValue2;
                  errorDetailsInstance.target = targetInstance2;
                }
              }
            }
            
            var innerErrorValue = errorValue['innerError'];
            if (innerErrorValue !== null && innerErrorValue !== undefined) {
              var innerErrorInstance = {};
              errorInstance.innerError = innerErrorInstance;
              
              var traceValue = innerErrorValue['trace'];
              if (traceValue !== null && traceValue !== undefined) {
                var traceInstance = traceValue;
                innerErrorInstance.trace = traceInstance;
              }
              
              var contextValue = innerErrorValue['context'];
              if (contextValue !== null && contextValue !== undefined) {
                var contextInstance = contextValue;
                innerErrorInstance.context = contextInstance;
              }
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  return DataLakeStoreManagementClient;
})();
exports.DataLakeStoreManagementClient = DataLakeStoreManagementClient;

var DataLakeStoreAccountOperations = ( /** @lends DataLakeStoreAccountOperations */ function() {
  /**
   * @class
   * Operations for managing Data Lake Store accounts
   * __NOTE__: An instance of this class is automatically created for an
   * instance of the [DataLakeStoreManagementClient] {@link
   * DataLakeStoreManagementClient~DataLakeStoreManagementClient}.
   * See [dataLakeStoreAccount] {@link
   * DataLakeStoreManagementClient~DataLakeStoreManagementClient#dataLakeStoreAccount}.
   * Initializes a new instance of the DataLakeStoreAccountOperations class.
   * @constructor
   * 
   * @param {DataLakeStoreManagementClient} client Reference to the service
   * client.
   */
  function DataLakeStoreAccountOperations(client) {
    this.client = client;
  }
  
  /**
   * Creates the specified Data Lake Store account.
   * 
   * @param {string} resourceGroupName The name of the resource group the
   * account will be associated with.
   * 
   * @param {DataLakeStoreAccountCreateOrUpdateParameters} parameters
   * Parameters supplied to the create Data Lake Store account operation.
   * 
   * @param {DataLakeStoreAccount} parameters.dataLakeStoreAccount Gets or sets
   * the account object that is being created or updated.
   * 
   * @param {string} [parameters.dataLakeStoreAccount.location] Gets or sets
   * the account regional location.
   * 
   * @param {string} [parameters.dataLakeStoreAccount.name] Gets or sets the
   * account name.
   * 
   * @param {string} [parameters.dataLakeStoreAccount.type] Gets or sets the
   * namespace and type of the account.
   * 
   * @param {string} [parameters.dataLakeStoreAccount.id] Gets or sets the
   * account subscription ID.
   * 
   * @param {object} [parameters.dataLakeStoreAccount.tags] Gets or sets the
   * value of custom properties.
   * 
   * @param {DataLakeStoreAccountProperties}
   * [parameters.dataLakeStoreAccount.properties] Gets or sets the properties
   * defined by Data Lake all properties are specific to each resource
   * provider.
   * 
   * @param {DataLakeStoreAccountStatus}
   * [parameters.dataLakeStoreAccount.properties.provisioningState] Gets or
   * sets the status of the Data Lake Store account while being provisioned.
   * 
   * @param {DataLakeStoreAccountState}
   * [parameters.dataLakeStoreAccount.properties.state] Gets or sets the
   * status of the Data Lake Account after provisioning has completed.
   * 
   * @param {date} [parameters.dataLakeStoreAccount.properties.creationTime]
   * Gets or sets the account creation time.
   * 
   * @param {date}
   * [parameters.dataLakeStoreAccount.properties.lastModifiedTime] Gets or
   * sets the account last modified time.
   * 
   * @param {string} [parameters.dataLakeStoreAccount.properties.endpoint] Gets
   * or sets the gateway host.
   * 
   * @param {string} [parameters.dataLakeStoreAccount.properties.defaultGroup]
   * Gets or sets the default owner group for all new folders and files
   * created in the DataLake.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  DataLakeStoreAccountOperations.prototype.beginCreate = function(resourceGroupName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.dataLakeStoreAccount === null || parameters.dataLakeStoreAccount === undefined) {
      return callback(new Error('parameters.dataLakeStoreAccount cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.DataLakeStore';
    url2 = url2 + '/';
    url2 = url2 + 'accounts';
    url2 = url2 + '/';
    if (parameters.dataLakeStoreAccount.name !== null && parameters.dataLakeStoreAccount.name !== undefined) {
      url2 = url2 + encodeURIComponent(parameters.dataLakeStoreAccount.name);
    }
    var queryParameters = [];
    queryParameters.push('api-version=2015-10-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.Store 0.9.2-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.Store 0.9.2-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['useragent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.Store 0.9.2-preview' + this.client.userAgentSuffix;
    }
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.Store 0.9.2-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.Store 0.9.2-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['User-Agent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.Store 0.9.2-preview' + this.client.userAgentSuffix;
    }
    if (uuid() !== null && uuid() !== undefined) {
      httpRequest.headers['x-ms-client-request-id'] = uuid();
    }
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = null;
    
    var dataLakeStoreAccountCreateOrUpdateParametersValue = {};
    requestDoc = dataLakeStoreAccountCreateOrUpdateParametersValue;
    
    if (parameters.dataLakeStoreAccount.location !== null && parameters.dataLakeStoreAccount.location !== undefined) {
      dataLakeStoreAccountCreateOrUpdateParametersValue['location'] = parameters.dataLakeStoreAccount.location;
    }
    
    if (parameters.dataLakeStoreAccount.name !== null && parameters.dataLakeStoreAccount.name !== undefined) {
      dataLakeStoreAccountCreateOrUpdateParametersValue['name'] = parameters.dataLakeStoreAccount.name;
    }
    
    if (parameters.dataLakeStoreAccount.type !== null && parameters.dataLakeStoreAccount.type !== undefined) {
      dataLakeStoreAccountCreateOrUpdateParametersValue['type'] = parameters.dataLakeStoreAccount.type;
    }
    
    if (parameters.dataLakeStoreAccount.id !== null && parameters.dataLakeStoreAccount.id !== undefined) {
      dataLakeStoreAccountCreateOrUpdateParametersValue['id'] = parameters.dataLakeStoreAccount.id;
    }
    
    if (parameters.dataLakeStoreAccount.tags !== null && parameters.dataLakeStoreAccount.tags !== undefined) {
      var tagsDictionary = {};
      for (var tagsKey in parameters.dataLakeStoreAccount.tags) {
        var tagsValue = parameters.dataLakeStoreAccount.tags[tagsKey];
        tagsDictionary[tagsKey] = tagsValue;
      }
      dataLakeStoreAccountCreateOrUpdateParametersValue['tags'] = tagsDictionary;
    }
    
    if (parameters.dataLakeStoreAccount.properties !== null && parameters.dataLakeStoreAccount.properties !== undefined) {
      var propertiesValue = {};
      dataLakeStoreAccountCreateOrUpdateParametersValue['properties'] = propertiesValue;
      
      if (parameters.dataLakeStoreAccount.properties.provisioningState !== null && parameters.dataLakeStoreAccount.properties.provisioningState !== undefined) {
        propertiesValue['provisioningState'] = parameters.dataLakeStoreAccount.properties.provisioningState !== null && parameters.dataLakeStoreAccount.properties.provisioningState !== undefined ? parameters.dataLakeStoreAccount.properties.provisioningState.toString() : 'Failed';
      }
      
      if (parameters.dataLakeStoreAccount.properties.state !== null && parameters.dataLakeStoreAccount.properties.state !== undefined) {
        propertiesValue['state'] = parameters.dataLakeStoreAccount.properties.state !== null && parameters.dataLakeStoreAccount.properties.state !== undefined ? parameters.dataLakeStoreAccount.properties.state.toString() : 'Active';
      }
      
      if (parameters.dataLakeStoreAccount.properties.creationTime !== null && parameters.dataLakeStoreAccount.properties.creationTime !== undefined) {
        propertiesValue['creationTime'] = parameters.dataLakeStoreAccount.properties.creationTime;
      }
      
      if (parameters.dataLakeStoreAccount.properties.lastModifiedTime !== null && parameters.dataLakeStoreAccount.properties.lastModifiedTime !== undefined) {
        propertiesValue['lastModifiedTime'] = parameters.dataLakeStoreAccount.properties.lastModifiedTime;
      }
      
      if (parameters.dataLakeStoreAccount.properties.endpoint !== null && parameters.dataLakeStoreAccount.properties.endpoint !== undefined) {
        propertiesValue['endpoint'] = parameters.dataLakeStoreAccount.properties.endpoint;
      }
      
      if (parameters.dataLakeStoreAccount.properties.defaultGroup !== null && parameters.dataLakeStoreAccount.properties.defaultGroup !== undefined) {
        propertiesValue['defaultGroup'] = parameters.dataLakeStoreAccount.properties.defaultGroup;
      }
    }
    
    requestContent = JSON.stringify(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200 && statusCode !== 201) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      result = {};
      result.statusCode = statusCode;
      result.azureAsyncOperation = response.headers['azure-asyncoperation'];
      result.retryAfter = parseInt(response.headers['retry-after'], 10);
      result.requestId = response.headers['x-ms-request-id'];
      if (statusCode === 200) {
        result.status = OperationStatus.Succeeded;
      }
      result.location = url2;
      
      return callback(null, result);
    });
  };
  
  /**
   * Deletes the Data Lake Store account object specified by the account name.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} accountName The name of the account to delete
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  DataLakeStoreAccountOperations.prototype.beginDelete = function(resourceGroupName, accountName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (accountName === null || accountName === undefined) {
      return callback(new Error('accountName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.DataLakeStore';
    url2 = url2 + '/';
    url2 = url2 + 'accounts';
    url2 = url2 + '/';
    url2 = url2 + encodeURIComponent(accountName);
    var queryParameters = [];
    queryParameters.push('api-version=2015-10-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'DELETE';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.Store 0.9.2-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.Store 0.9.2-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['useragent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.Store 0.9.2-preview' + this.client.userAgentSuffix;
    }
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.Store 0.9.2-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.Store 0.9.2-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['User-Agent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.Store 0.9.2-preview' + this.client.userAgentSuffix;
    }
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200 && statusCode !== 202 && statusCode !== 204 && statusCode !== 404) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      result = {};
      result.statusCode = statusCode;
      result.azureAsyncOperation = response.headers['azure-asyncoperation'];
      result.retryAfter = parseInt(response.headers['retry-after'], 10);
      result.requestId = response.headers['x-ms-request-id'];
      if (statusCode === 200) {
        result.status = OperationStatus.Succeeded;
      }
      if (statusCode === 404) {
        result.status = OperationStatus.Succeeded;
      }
      if (statusCode === 204) {
        result.status = OperationStatus.Succeeded;
      }
      result.location = url2;
      
      return callback(null, result);
    });
  };
  
  /**
   * Updates the Data Lake Store account object specified by the account name
   * with the contents of the account object.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {DataLakeStoreAccountCreateOrUpdateParameters} parameters
   * Parameters supplied to the update Data Lake Store account operation.
   * 
   * @param {DataLakeStoreAccount} parameters.dataLakeStoreAccount Gets or sets
   * the account object that is being created or updated.
   * 
   * @param {string} [parameters.dataLakeStoreAccount.location] Gets or sets
   * the account regional location.
   * 
   * @param {string} [parameters.dataLakeStoreAccount.name] Gets or sets the
   * account name.
   * 
   * @param {string} [parameters.dataLakeStoreAccount.type] Gets or sets the
   * namespace and type of the account.
   * 
   * @param {string} [parameters.dataLakeStoreAccount.id] Gets or sets the
   * account subscription ID.
   * 
   * @param {object} [parameters.dataLakeStoreAccount.tags] Gets or sets the
   * value of custom properties.
   * 
   * @param {DataLakeStoreAccountProperties}
   * [parameters.dataLakeStoreAccount.properties] Gets or sets the properties
   * defined by Data Lake all properties are specific to each resource
   * provider.
   * 
   * @param {DataLakeStoreAccountStatus}
   * [parameters.dataLakeStoreAccount.properties.provisioningState] Gets or
   * sets the status of the Data Lake Store account while being provisioned.
   * 
   * @param {DataLakeStoreAccountState}
   * [parameters.dataLakeStoreAccount.properties.state] Gets or sets the
   * status of the Data Lake Account after provisioning has completed.
   * 
   * @param {date} [parameters.dataLakeStoreAccount.properties.creationTime]
   * Gets or sets the account creation time.
   * 
   * @param {date}
   * [parameters.dataLakeStoreAccount.properties.lastModifiedTime] Gets or
   * sets the account last modified time.
   * 
   * @param {string} [parameters.dataLakeStoreAccount.properties.endpoint] Gets
   * or sets the gateway host.
   * 
   * @param {string} [parameters.dataLakeStoreAccount.properties.defaultGroup]
   * Gets or sets the default owner group for all new folders and files
   * created in the DataLake.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  DataLakeStoreAccountOperations.prototype.beginUpdate = function(resourceGroupName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.dataLakeStoreAccount === null || parameters.dataLakeStoreAccount === undefined) {
      return callback(new Error('parameters.dataLakeStoreAccount cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.DataLakeStore';
    url2 = url2 + '/';
    url2 = url2 + 'accounts';
    url2 = url2 + '/';
    if (parameters.dataLakeStoreAccount.name !== null && parameters.dataLakeStoreAccount.name !== undefined) {
      url2 = url2 + encodeURIComponent(parameters.dataLakeStoreAccount.name);
    }
    var queryParameters = [];
    queryParameters.push('api-version=2015-10-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PATCH';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.Store 0.9.2-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.Store 0.9.2-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['useragent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.Store 0.9.2-preview' + this.client.userAgentSuffix;
    }
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.Store 0.9.2-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.Store 0.9.2-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['User-Agent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.Store 0.9.2-preview' + this.client.userAgentSuffix;
    }
    if (uuid() !== null && uuid() !== undefined) {
      httpRequest.headers['x-ms-client-request-id'] = uuid();
    }
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = null;
    
    var dataLakeStoreAccountCreateOrUpdateParametersValue = {};
    requestDoc = dataLakeStoreAccountCreateOrUpdateParametersValue;
    
    if (parameters.dataLakeStoreAccount.location !== null && parameters.dataLakeStoreAccount.location !== undefined) {
      dataLakeStoreAccountCreateOrUpdateParametersValue['location'] = parameters.dataLakeStoreAccount.location;
    }
    
    if (parameters.dataLakeStoreAccount.name !== null && parameters.dataLakeStoreAccount.name !== undefined) {
      dataLakeStoreAccountCreateOrUpdateParametersValue['name'] = parameters.dataLakeStoreAccount.name;
    }
    
    if (parameters.dataLakeStoreAccount.type !== null && parameters.dataLakeStoreAccount.type !== undefined) {
      dataLakeStoreAccountCreateOrUpdateParametersValue['type'] = parameters.dataLakeStoreAccount.type;
    }
    
    if (parameters.dataLakeStoreAccount.id !== null && parameters.dataLakeStoreAccount.id !== undefined) {
      dataLakeStoreAccountCreateOrUpdateParametersValue['id'] = parameters.dataLakeStoreAccount.id;
    }
    
    if (parameters.dataLakeStoreAccount.tags !== null && parameters.dataLakeStoreAccount.tags !== undefined) {
      var tagsDictionary = {};
      for (var tagsKey in parameters.dataLakeStoreAccount.tags) {
        var tagsValue = parameters.dataLakeStoreAccount.tags[tagsKey];
        tagsDictionary[tagsKey] = tagsValue;
      }
      dataLakeStoreAccountCreateOrUpdateParametersValue['tags'] = tagsDictionary;
    }
    
    if (parameters.dataLakeStoreAccount.properties !== null && parameters.dataLakeStoreAccount.properties !== undefined) {
      var propertiesValue = {};
      dataLakeStoreAccountCreateOrUpdateParametersValue['properties'] = propertiesValue;
      
      if (parameters.dataLakeStoreAccount.properties.provisioningState !== null && parameters.dataLakeStoreAccount.properties.provisioningState !== undefined) {
        propertiesValue['provisioningState'] = parameters.dataLakeStoreAccount.properties.provisioningState !== null && parameters.dataLakeStoreAccount.properties.provisioningState !== undefined ? parameters.dataLakeStoreAccount.properties.provisioningState.toString() : 'Failed';
      }
      
      if (parameters.dataLakeStoreAccount.properties.state !== null && parameters.dataLakeStoreAccount.properties.state !== undefined) {
        propertiesValue['state'] = parameters.dataLakeStoreAccount.properties.state !== null && parameters.dataLakeStoreAccount.properties.state !== undefined ? parameters.dataLakeStoreAccount.properties.state.toString() : 'Active';
      }
      
      if (parameters.dataLakeStoreAccount.properties.creationTime !== null && parameters.dataLakeStoreAccount.properties.creationTime !== undefined) {
        propertiesValue['creationTime'] = parameters.dataLakeStoreAccount.properties.creationTime;
      }
      
      if (parameters.dataLakeStoreAccount.properties.lastModifiedTime !== null && parameters.dataLakeStoreAccount.properties.lastModifiedTime !== undefined) {
        propertiesValue['lastModifiedTime'] = parameters.dataLakeStoreAccount.properties.lastModifiedTime;
      }
      
      if (parameters.dataLakeStoreAccount.properties.endpoint !== null && parameters.dataLakeStoreAccount.properties.endpoint !== undefined) {
        propertiesValue['endpoint'] = parameters.dataLakeStoreAccount.properties.endpoint;
      }
      
      if (parameters.dataLakeStoreAccount.properties.defaultGroup !== null && parameters.dataLakeStoreAccount.properties.defaultGroup !== undefined) {
        propertiesValue['defaultGroup'] = parameters.dataLakeStoreAccount.properties.defaultGroup;
      }
    }
    
    requestContent = JSON.stringify(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200 && statusCode !== 201) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      result = {};
      result.statusCode = statusCode;
      result.azureAsyncOperation = response.headers['azure-asyncoperation'];
      result.retryAfter = parseInt(response.headers['retry-after'], 10);
      result.requestId = response.headers['x-ms-request-id'];
      if (statusCode === 200) {
        result.status = OperationStatus.Succeeded;
      }
      result.location = url2;
      
      return callback(null, result);
    });
  };
  
  /**
   * Creates the specified Data Lake Store account.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {DataLakeStoreAccountCreateOrUpdateParameters} parameters
   * Parameters supplied to the create Data Lake Store account operation.
   * 
   * @param {DataLakeStoreAccount} parameters.dataLakeStoreAccount Gets or sets
   * the account object that is being created or updated.
   * 
   * @param {string} [parameters.dataLakeStoreAccount.location] Gets or sets
   * the account regional location.
   * 
   * @param {string} [parameters.dataLakeStoreAccount.name] Gets or sets the
   * account name.
   * 
   * @param {string} [parameters.dataLakeStoreAccount.type] Gets or sets the
   * namespace and type of the account.
   * 
   * @param {string} [parameters.dataLakeStoreAccount.id] Gets or sets the
   * account subscription ID.
   * 
   * @param {object} [parameters.dataLakeStoreAccount.tags] Gets or sets the
   * value of custom properties.
   * 
   * @param {DataLakeStoreAccountProperties}
   * [parameters.dataLakeStoreAccount.properties] Gets or sets the properties
   * defined by Data Lake all properties are specific to each resource
   * provider.
   * 
   * @param {DataLakeStoreAccountStatus}
   * [parameters.dataLakeStoreAccount.properties.provisioningState] Gets or
   * sets the status of the Data Lake Store account while being provisioned.
   * 
   * @param {DataLakeStoreAccountState}
   * [parameters.dataLakeStoreAccount.properties.state] Gets or sets the
   * status of the Data Lake Account after provisioning has completed.
   * 
   * @param {date} [parameters.dataLakeStoreAccount.properties.creationTime]
   * Gets or sets the account creation time.
   * 
   * @param {date}
   * [parameters.dataLakeStoreAccount.properties.lastModifiedTime] Gets or
   * sets the account last modified time.
   * 
   * @param {string} [parameters.dataLakeStoreAccount.properties.endpoint] Gets
   * or sets the gateway host.
   * 
   * @param {string} [parameters.dataLakeStoreAccount.properties.defaultGroup]
   * Gets or sets the default owner group for all new folders and files
   * created in the DataLake.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  DataLakeStoreAccountOperations.prototype.create = function(resourceGroupName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.dataLakeStoreAccount.beginCreate(resourceGroupName, parameters, function (err, result) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      if (result.status === 'Succeeded') {
        return callback(null, result);
      }
      var delayInSeconds = result.retryAfter;
      if (delayInSeconds === 0) {
        delayInSeconds = 30;
      }
      if (client2.longRunningOperationInitialTimeout >= 0) {
        delayInSeconds = client2.longRunningOperationInitialTimeout;
      }
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.getLongRunningOperationStatus(result.azureAsyncOperation, function (err2, result2) {
            if (err2 !== null && err2 !== undefined) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                return callback(null, result2);
              } else {
                delayInSeconds = result2.retryAfter;
                if (delayInSeconds === 0) {
                  delayInSeconds = 15;
                }
                if (client2.longRunningOperationRetryTimeout >= 0) {
                  delayInSeconds = client2.longRunningOperationRetryTimeout;
                }
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  /**
   * Creates or updates the specified Data Lake Store account with the
   * specified firewall rules.
   * 
   * @param {string} resourceGroupName The name of the resource group the
   * account is in.
   * 
   * @param {string} accountName The name of the account to add the firewall
   * rule to
   * 
   * @param {DataLakeStoreFirewallRuleCreateOrUpdateParameters} parameters
   * Parameters supplied to the create firewall rule operation.
   * 
   * @param {FirewallRule} parameters.firewallRule Gets or sets the firewall
   * rules that are being added or updated.
   * 
   * @param {string} [parameters.firewallRule.name] Gets or sets the Firewall
   * Rule's name.
   * 
   * @param {string} [parameters.firewallRule.type] Gets or sets the namespace
   * and type of the Firewall Rule.
   * 
   * @param {string} [parameters.firewallRule.id] Gets or sets the Firewall
   * Rule's subscription ID.
   * 
   * @param {string} [parameters.firewallRule.location] Gets or sets the
   * Firewall Rule's regional location.
   * 
   * @param {FirewallRuleProperties} [parameters.firewallRule.properties] Gets
   * or sets the properties defined by Data Lake all properties are specific
   * to each resource provider.
   * 
   * @param {string} [parameters.firewallRule.properties.startIpAddress] Gets
   * or sets the start IP address for the firewall rule.
   * 
   * @param {string} [parameters.firewallRule.properties.endIpAddress] Gets or
   * sets the end IP address for the firewall rule.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  DataLakeStoreAccountOperations.prototype.createOrUpdateFirewallRule = function(resourceGroupName, accountName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (accountName === null || accountName === undefined) {
      return callback(new Error('accountName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.firewallRule === null || parameters.firewallRule === undefined) {
      return callback(new Error('parameters.firewallRule cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.DataLakeStore';
    url2 = url2 + '/';
    url2 = url2 + 'accounts';
    url2 = url2 + '/';
    url2 = url2 + encodeURIComponent(accountName);
    url2 = url2 + '/firewallRules/';
    if (parameters.firewallRule.name !== null && parameters.firewallRule.name !== undefined) {
      url2 = url2 + encodeURIComponent(parameters.firewallRule.name);
    }
    var queryParameters = [];
    queryParameters.push('api-version=2015-10-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.Store 0.9.2-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.Store 0.9.2-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['useragent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.Store 0.9.2-preview' + this.client.userAgentSuffix;
    }
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.Store 0.9.2-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.Store 0.9.2-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['User-Agent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.Store 0.9.2-preview' + this.client.userAgentSuffix;
    }
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = null;
    
    var dataLakeStoreFirewallRuleCreateOrUpdateParametersValue = {};
    requestDoc = dataLakeStoreFirewallRuleCreateOrUpdateParametersValue;
    
    if (parameters.firewallRule.name !== null && parameters.firewallRule.name !== undefined) {
      dataLakeStoreFirewallRuleCreateOrUpdateParametersValue['name'] = parameters.firewallRule.name;
    }
    
    if (parameters.firewallRule.type !== null && parameters.firewallRule.type !== undefined) {
      dataLakeStoreFirewallRuleCreateOrUpdateParametersValue['type'] = parameters.firewallRule.type;
    }
    
    if (parameters.firewallRule.id !== null && parameters.firewallRule.id !== undefined) {
      dataLakeStoreFirewallRuleCreateOrUpdateParametersValue['id'] = parameters.firewallRule.id;
    }
    
    if (parameters.firewallRule.location !== null && parameters.firewallRule.location !== undefined) {
      dataLakeStoreFirewallRuleCreateOrUpdateParametersValue['location'] = parameters.firewallRule.location;
    }
    
    if (parameters.firewallRule.properties !== null && parameters.firewallRule.properties !== undefined) {
      var propertiesValue = {};
      dataLakeStoreFirewallRuleCreateOrUpdateParametersValue['properties'] = propertiesValue;
      
      if (parameters.firewallRule.properties.startIpAddress !== null && parameters.firewallRule.properties.startIpAddress !== undefined) {
        propertiesValue['startIpAddress'] = parameters.firewallRule.properties.startIpAddress;
      }
      
      if (parameters.firewallRule.properties.endIpAddress !== null && parameters.firewallRule.properties.endIpAddress !== undefined) {
        propertiesValue['endIpAddress'] = parameters.firewallRule.properties.endIpAddress;
      }
    }
    
    requestContent = JSON.stringify(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var firewallRuleInstance = {};
          result.firewallRule = firewallRuleInstance;
          
          var nameValue = responseDoc['name'];
          if (nameValue !== null && nameValue !== undefined) {
            var nameInstance = nameValue;
            firewallRuleInstance.name = nameInstance;
          }
          
          var typeValue = responseDoc['type'];
          if (typeValue !== null && typeValue !== undefined) {
            var typeInstance = typeValue;
            firewallRuleInstance.type = typeInstance;
          }
          
          var idValue = responseDoc['id'];
          if (idValue !== null && idValue !== undefined) {
            var idInstance = idValue;
            firewallRuleInstance.id = idInstance;
          }
          
          var locationValue = responseDoc['location'];
          if (locationValue !== null && locationValue !== undefined) {
            var locationInstance = locationValue;
            firewallRuleInstance.location = locationInstance;
          }
          
          var propertiesValue2 = responseDoc['properties'];
          if (propertiesValue2 !== null && propertiesValue2 !== undefined) {
            var propertiesInstance = {};
            firewallRuleInstance.properties = propertiesInstance;
            
            var startIpAddressValue = propertiesValue2['startIpAddress'];
            if (startIpAddressValue !== null && startIpAddressValue !== undefined) {
              var startIpAddressInstance = startIpAddressValue;
              propertiesInstance.startIpAddress = startIpAddressInstance;
            }
            
            var endIpAddressValue = propertiesValue2['endIpAddress'];
            if (endIpAddressValue !== null && endIpAddressValue !== undefined) {
              var endIpAddressInstance = endIpAddressValue;
              propertiesInstance.endIpAddress = endIpAddressInstance;
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Deletes the Data Lake Store account object specified by the account name.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} accountName The name of the account to delete
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  DataLakeStoreAccountOperations.prototype.deleteMethod = function(resourceGroupName, accountName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.dataLakeStoreAccount.beginDelete(resourceGroupName, accountName, function (err, result) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      if (result.status === 'Succeeded') {
        return callback(null, result);
      }
      var delayInSeconds = result.retryAfter;
      if (delayInSeconds === 0) {
        delayInSeconds = 30;
      }
      if (client2.longRunningOperationInitialTimeout >= 0) {
        delayInSeconds = client2.longRunningOperationInitialTimeout;
      }
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.getLongRunningOperationStatus(result.azureAsyncOperation, function (err2, result2) {
            if (err2 !== null && err2 !== undefined) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                return callback(null, result2);
              } else {
                delayInSeconds = result2.retryAfter;
                if (delayInSeconds === 0) {
                  delayInSeconds = 15;
                }
                if (client2.longRunningOperationRetryTimeout >= 0) {
                  delayInSeconds = client2.longRunningOperationRetryTimeout;
                }
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  /**
   * Deletes the specified firewall rule from the specified Data Lake Store
   * account
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} accountName The name of the account to delete the firewall
   * rule from
   * 
   * @param {string} firewallRuleName The name of the firewall rule to delete
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  DataLakeStoreAccountOperations.prototype.deleteFirewallRule = function(resourceGroupName, accountName, firewallRuleName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (accountName === null || accountName === undefined) {
      return callback(new Error('accountName cannot be null.'));
    }
    if (firewallRuleName === null || firewallRuleName === undefined) {
      return callback(new Error('firewallRuleName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.DataLakeStore';
    url2 = url2 + '/';
    url2 = url2 + 'accounts';
    url2 = url2 + '/';
    url2 = url2 + encodeURIComponent(accountName);
    url2 = url2 + '/firewallRules/';
    url2 = url2 + encodeURIComponent(firewallRuleName);
    var queryParameters = [];
    queryParameters.push('api-version=2015-10-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'DELETE';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.Store 0.9.2-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.Store 0.9.2-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['useragent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.Store 0.9.2-preview' + this.client.userAgentSuffix;
    }
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.Store 0.9.2-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.Store 0.9.2-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['User-Agent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.Store 0.9.2-preview' + this.client.userAgentSuffix;
    }
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200 && statusCode !== 204) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Gets the next page of the Data Lake firewall rule objects within the
   * specified account, if any.
   * 
   * @param {string} nextLink The url to the next firewall rule page.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  DataLakeStoreAccountOperations.prototype.firewallRulesListNext = function(nextLink, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (nextLink === null || nextLink === undefined) {
      return callback(new Error('nextLink cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + nextLink;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.Store 0.9.2-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.Store 0.9.2-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['useragent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.Store 0.9.2-preview' + this.client.userAgentSuffix;
    }
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.Store 0.9.2-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.Store 0.9.2-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['User-Agent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.Store 0.9.2-preview' + this.client.userAgentSuffix;
    }
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = { value: [] };
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var valueArray = responseDoc['value'];
          if (valueArray !== null && valueArray !== undefined) {
            for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var valueValue = valueArray[loweredIndex1];
              var firewallRuleInstance = {};
              result.value.push(firewallRuleInstance);
              
              var nameValue = valueValue['name'];
              if (nameValue !== null && nameValue !== undefined) {
                var nameInstance = nameValue;
                firewallRuleInstance.name = nameInstance;
              }
              
              var typeValue = valueValue['type'];
              if (typeValue !== null && typeValue !== undefined) {
                var typeInstance = typeValue;
                firewallRuleInstance.type = typeInstance;
              }
              
              var idValue = valueValue['id'];
              if (idValue !== null && idValue !== undefined) {
                var idInstance = idValue;
                firewallRuleInstance.id = idInstance;
              }
              
              var locationValue = valueValue['location'];
              if (locationValue !== null && locationValue !== undefined) {
                var locationInstance = locationValue;
                firewallRuleInstance.location = locationInstance;
              }
              
              var propertiesValue = valueValue['properties'];
              if (propertiesValue !== null && propertiesValue !== undefined) {
                var propertiesInstance = {};
                firewallRuleInstance.properties = propertiesInstance;
                
                var startIpAddressValue = propertiesValue['startIpAddress'];
                if (startIpAddressValue !== null && startIpAddressValue !== undefined) {
                  var startIpAddressInstance = startIpAddressValue;
                  propertiesInstance.startIpAddress = startIpAddressInstance;
                }
                
                var endIpAddressValue = propertiesValue['endIpAddress'];
                if (endIpAddressValue !== null && endIpAddressValue !== undefined) {
                  var endIpAddressInstance = endIpAddressValue;
                  propertiesInstance.endIpAddress = endIpAddressInstance;
                }
              }
            }
          }
          
          var nextLinkValue = responseDoc['nextLink'];
          if (nextLinkValue !== null && nextLinkValue !== undefined) {
            var nextLinkInstance = nextLinkValue;
            result.nextLink = nextLinkInstance;
          }
          
          var countValue = responseDoc['count'];
          if (countValue !== null && countValue !== undefined) {
            var countInstance = countValue;
            result.count = countInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Gets the Data Lake Store account object specified by the account name.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} accountName The name of the account to retrieve
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  DataLakeStoreAccountOperations.prototype.get = function(resourceGroupName, accountName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (accountName === null || accountName === undefined) {
      return callback(new Error('accountName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.DataLakeStore';
    url2 = url2 + '/';
    url2 = url2 + 'accounts';
    url2 = url2 + '/';
    url2 = url2 + encodeURIComponent(accountName);
    var queryParameters = [];
    queryParameters.push('api-version=2015-10-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.Store 0.9.2-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.Store 0.9.2-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['useragent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.Store 0.9.2-preview' + this.client.userAgentSuffix;
    }
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.Store 0.9.2-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.Store 0.9.2-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['User-Agent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.Store 0.9.2-preview' + this.client.userAgentSuffix;
    }
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var dataLakeStoreAccountInstance = { tags: {} };
          result.dataLakeStoreAccount = dataLakeStoreAccountInstance;
          
          var locationValue = responseDoc['location'];
          if (locationValue !== null && locationValue !== undefined) {
            var locationInstance = locationValue;
            dataLakeStoreAccountInstance.location = locationInstance;
          }
          
          var nameValue = responseDoc['name'];
          if (nameValue !== null && nameValue !== undefined) {
            var nameInstance = nameValue;
            dataLakeStoreAccountInstance.name = nameInstance;
          }
          
          var typeValue = responseDoc['type'];
          if (typeValue !== null && typeValue !== undefined) {
            var typeInstance = typeValue;
            dataLakeStoreAccountInstance.type = typeInstance;
          }
          
          var idValue = responseDoc['id'];
          if (idValue !== null && idValue !== undefined) {
            var idInstance = idValue;
            dataLakeStoreAccountInstance.id = idInstance;
          }
          
          var tagsSequenceElement = responseDoc['tags'];
          if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
            for (var property in tagsSequenceElement) {
              var tagsKey = property;
              var tagsValue = tagsSequenceElement[property];
              dataLakeStoreAccountInstance.tags[tagsKey] = tagsValue;
            }
          }
          
          var propertiesValue = responseDoc['properties'];
          if (propertiesValue !== null && propertiesValue !== undefined) {
            var propertiesInstance = {};
            dataLakeStoreAccountInstance.properties = propertiesInstance;
            
            var provisioningStateValue = propertiesValue['provisioningState'];
            if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
              var provisioningStateInstance = provisioningStateValue;
              propertiesInstance.provisioningState = provisioningStateInstance;
            }
            
            var stateValue = propertiesValue['state'];
            if (stateValue !== null && stateValue !== undefined) {
              var stateInstance = stateValue;
              propertiesInstance.state = stateInstance;
            }
            
            var creationTimeValue = propertiesValue['creationTime'];
            if (creationTimeValue !== null && creationTimeValue !== undefined) {
              var creationTimeInstance = creationTimeValue;
              propertiesInstance.creationTime = creationTimeInstance;
            }
            
            var lastModifiedTimeValue = propertiesValue['lastModifiedTime'];
            if (lastModifiedTimeValue !== null && lastModifiedTimeValue !== undefined) {
              var lastModifiedTimeInstance = lastModifiedTimeValue;
              propertiesInstance.lastModifiedTime = lastModifiedTimeInstance;
            }
            
            var endpointValue = propertiesValue['endpoint'];
            if (endpointValue !== null && endpointValue !== undefined) {
              var endpointInstance = endpointValue;
              propertiesInstance.endpoint = endpointInstance;
            }
            
            var defaultGroupValue = propertiesValue['defaultGroup'];
            if (defaultGroupValue !== null && defaultGroupValue !== undefined) {
              var defaultGroupInstance = defaultGroupValue;
              propertiesInstance.defaultGroup = defaultGroupInstance;
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Gets the specified Data Lake firewall rules.
   * 
   * @param {string} resourceGroupName The name of the resource group the
   * account is in.
   * 
   * @param {string} accountName The name of the account to get the firewall
   * rules from
   * 
   * @param {string} firewallRuleName the name of the firewall rule to retrieve.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  DataLakeStoreAccountOperations.prototype.getFirewallRule = function(resourceGroupName, accountName, firewallRuleName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (accountName === null || accountName === undefined) {
      return callback(new Error('accountName cannot be null.'));
    }
    if (firewallRuleName === null || firewallRuleName === undefined) {
      return callback(new Error('firewallRuleName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.DataLakeStore';
    url2 = url2 + '/';
    url2 = url2 + 'accounts';
    url2 = url2 + '/';
    url2 = url2 + encodeURIComponent(accountName);
    url2 = url2 + '/firewallRules/';
    url2 = url2 + encodeURIComponent(firewallRuleName);
    var queryParameters = [];
    queryParameters.push('api-version=2015-10-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.Store 0.9.2-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.Store 0.9.2-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['useragent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.Store 0.9.2-preview' + this.client.userAgentSuffix;
    }
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.Store 0.9.2-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.Store 0.9.2-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['User-Agent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.Store 0.9.2-preview' + this.client.userAgentSuffix;
    }
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var firewallRuleInstance = {};
          result.firewallRule = firewallRuleInstance;
          
          var nameValue = responseDoc['name'];
          if (nameValue !== null && nameValue !== undefined) {
            var nameInstance = nameValue;
            firewallRuleInstance.name = nameInstance;
          }
          
          var typeValue = responseDoc['type'];
          if (typeValue !== null && typeValue !== undefined) {
            var typeInstance = typeValue;
            firewallRuleInstance.type = typeInstance;
          }
          
          var idValue = responseDoc['id'];
          if (idValue !== null && idValue !== undefined) {
            var idInstance = idValue;
            firewallRuleInstance.id = idInstance;
          }
          
          var locationValue = responseDoc['location'];
          if (locationValue !== null && locationValue !== undefined) {
            var locationInstance = locationValue;
            firewallRuleInstance.location = locationInstance;
          }
          
          var propertiesValue = responseDoc['properties'];
          if (propertiesValue !== null && propertiesValue !== undefined) {
            var propertiesInstance = {};
            firewallRuleInstance.properties = propertiesInstance;
            
            var startIpAddressValue = propertiesValue['startIpAddress'];
            if (startIpAddressValue !== null && startIpAddressValue !== undefined) {
              var startIpAddressInstance = startIpAddressValue;
              propertiesInstance.startIpAddress = startIpAddressInstance;
            }
            
            var endIpAddressValue = propertiesValue['endIpAddress'];
            if (endIpAddressValue !== null && endIpAddressValue !== undefined) {
              var endIpAddressInstance = endIpAddressValue;
              propertiesInstance.endIpAddress = endIpAddressInstance;
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Lists the Data Lake Store account objects within the subscription or
   * within a specific resource group.
   * 
   * @param {string} [resourceGroupName] The name of the resource group.
   * 
   * @param {DataLakeStoreAccountListParameters} [parametersOrCallback] Query
   * parameters. If null is passed returns all Data Lake Store account items.
   * 
   * @param {string} [parametersOrCallback.filter] Gets or sets OData filter.
   * Optional.
   * 
   * @param {string} [parametersOrCallback.expand] Gets or sets OData
   * expansion. Expand related resources in line with the retrieved resources,
   * e.g. Categories/$expand=Products would expand Product data in line with
   * each Category entry. Optional.
   * 
   * @param {string} [parametersOrCallback.select] Gets or sets OData Select
   * statement. Limits the properties on each entry to just those requested,
   * e.g. Categories?$select=CategoryName,Description. Optional.
   * 
   * @param {string} [parametersOrCallback.orderBy] Gets or sets the OrderBy
   * clause. One or more comma-separated expressions with an optional “asc”
   * (the default) or “desc” depending on the order you’d like the values
   * sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
   * 
   * @param {string} [parametersOrCallback.search] Gets or sets a free form
   * search. A free-text search expression to match for whether a particular
   * entry should be included in the feed, e.g. Categories?$search=blue OR
   * green. Optional.
   * 
   * @param {string} [parametersOrCallback.format] Gets or sets the return
   * format. Return the response in particular formatxii without access to
   * request headers for standard content-type negotiation (e.g
   * Orders?$format=json). Optional.
   * 
   * @param {number} [parametersOrCallback.top] Gets or sets the number of
   * items to return. Optional.
   * 
   * @param {number} [parametersOrCallback.skip] Gets or sets the number of
   * items to skip over before returning elements. Optional.
   * 
   * @param {boolean} [parametersOrCallback.count] Gets or sets a Boolean value
   * of true or false to request a count of the matching resources included
   * with the resources in the response, e.g. Categories?$count=true. Optional.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  DataLakeStoreAccountOperations.prototype.list = function(resourceGroupName, parametersOrCallback, callback) {
    var parameters = parametersOrCallback;
    if (_.isFunction(parameters)) {
      callback = parameters;
      parameters = null;
    }
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/';
    if (resourceGroupName !== null && resourceGroupName !== undefined) {
      url2 = url2 + 'resourceGroups/' + encodeURIComponent(resourceGroupName) + '/';
    }
    url2 = url2 + 'providers/';
    url2 = url2 + 'Microsoft.DataLakeStore';
    url2 = url2 + '/';
    url2 = url2 + 'accounts';
    var queryParameters = [];
    if (parameters !== null && parameters !== undefined && parameters.filter !== null && parameters.filter !== undefined) {
      queryParameters.push('$filter=' + encodeURIComponent(parameters.filter));
    }
    if (parameters !== null && parameters !== undefined && parameters.top !== null && parameters.top !== undefined) {
      queryParameters.push('$top=' + encodeURIComponent(parameters.top.toString()));
    }
    if (parameters !== null && parameters !== undefined && parameters.skip !== null && parameters.skip !== undefined) {
      queryParameters.push('$skip=' + encodeURIComponent(parameters.skip.toString()));
    }
    if (parameters !== null && parameters !== undefined && parameters.expand !== null && parameters.expand !== undefined) {
      queryParameters.push('$expand=' + encodeURIComponent(parameters.expand));
    }
    if (parameters !== null && parameters !== undefined && parameters.select !== null && parameters.select !== undefined) {
      queryParameters.push('$select=' + encodeURIComponent(parameters.select));
    }
    if (parameters !== null && parameters !== undefined && parameters.orderBy !== null && parameters.orderBy !== undefined) {
      queryParameters.push('$orderby=' + encodeURIComponent(parameters.orderBy));
    }
    if (parameters !== null && parameters !== undefined && parameters.count !== null && parameters.count !== undefined) {
      queryParameters.push('$count=' + encodeURIComponent(parameters.count.toString()));
    }
    if (parameters !== null && parameters !== undefined && parameters.search !== null && parameters.search !== undefined) {
      queryParameters.push('$search=' + encodeURIComponent(parameters.search));
    }
    if (parameters !== null && parameters !== undefined && parameters.format !== null && parameters.format !== undefined) {
      queryParameters.push('$format=' + encodeURIComponent(parameters.format));
    }
    queryParameters.push('api-version=2015-10-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.Store 0.9.2-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.Store 0.9.2-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['useragent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.Store 0.9.2-preview' + this.client.userAgentSuffix;
    }
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.Store 0.9.2-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.Store 0.9.2-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['User-Agent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.Store 0.9.2-preview' + this.client.userAgentSuffix;
    }
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = { value: [] };
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var valueArray = responseDoc['value'];
          if (valueArray !== null && valueArray !== undefined) {
            for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var valueValue = valueArray[loweredIndex1];
              var dataLakeStoreAccountInstance = { tags: {} };
              result.value.push(dataLakeStoreAccountInstance);
              
              var locationValue = valueValue['location'];
              if (locationValue !== null && locationValue !== undefined) {
                var locationInstance = locationValue;
                dataLakeStoreAccountInstance.location = locationInstance;
              }
              
              var nameValue = valueValue['name'];
              if (nameValue !== null && nameValue !== undefined) {
                var nameInstance = nameValue;
                dataLakeStoreAccountInstance.name = nameInstance;
              }
              
              var typeValue = valueValue['type'];
              if (typeValue !== null && typeValue !== undefined) {
                var typeInstance = typeValue;
                dataLakeStoreAccountInstance.type = typeInstance;
              }
              
              var idValue = valueValue['id'];
              if (idValue !== null && idValue !== undefined) {
                var idInstance = idValue;
                dataLakeStoreAccountInstance.id = idInstance;
              }
              
              var tagsSequenceElement = valueValue['tags'];
              if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
                for (var property in tagsSequenceElement) {
                  var tagsKey = property;
                  var tagsValue = tagsSequenceElement[property];
                  dataLakeStoreAccountInstance.tags[tagsKey] = tagsValue;
                }
              }
              
              var propertiesValue = valueValue['properties'];
              if (propertiesValue !== null && propertiesValue !== undefined) {
                var propertiesInstance = {};
                dataLakeStoreAccountInstance.properties = propertiesInstance;
                
                var provisioningStateValue = propertiesValue['provisioningState'];
                if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
                  var provisioningStateInstance = provisioningStateValue;
                  propertiesInstance.provisioningState = provisioningStateInstance;
                }
                
                var stateValue = propertiesValue['state'];
                if (stateValue !== null && stateValue !== undefined) {
                  var stateInstance = stateValue;
                  propertiesInstance.state = stateInstance;
                }
                
                var creationTimeValue = propertiesValue['creationTime'];
                if (creationTimeValue !== null && creationTimeValue !== undefined) {
                  var creationTimeInstance = creationTimeValue;
                  propertiesInstance.creationTime = creationTimeInstance;
                }
                
                var lastModifiedTimeValue = propertiesValue['lastModifiedTime'];
                if (lastModifiedTimeValue !== null && lastModifiedTimeValue !== undefined) {
                  var lastModifiedTimeInstance = lastModifiedTimeValue;
                  propertiesInstance.lastModifiedTime = lastModifiedTimeInstance;
                }
                
                var endpointValue = propertiesValue['endpoint'];
                if (endpointValue !== null && endpointValue !== undefined) {
                  var endpointInstance = endpointValue;
                  propertiesInstance.endpoint = endpointInstance;
                }
                
                var defaultGroupValue = propertiesValue['defaultGroup'];
                if (defaultGroupValue !== null && defaultGroupValue !== undefined) {
                  var defaultGroupInstance = defaultGroupValue;
                  propertiesInstance.defaultGroup = defaultGroupInstance;
                }
              }
            }
          }
          
          var nextLinkValue = responseDoc['nextLink'];
          if (nextLinkValue !== null && nextLinkValue !== undefined) {
            var nextLinkInstance = nextLinkValue;
            result.nextLink = nextLinkInstance;
          }
          
          var countValue = responseDoc['count'];
          if (countValue !== null && countValue !== undefined) {
            var countInstance = countValue;
            result.count = countInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Lists the Data Lake firewall rules objects within the specified Data Lake
   * Store account.
   * 
   * @param {string} [resourceGroupName] The name of the resource group.
   * 
   * @param {string} accountName The name of the account to get the firewall
   * rules from
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  DataLakeStoreAccountOperations.prototype.listFirewallRules = function(resourceGroupName, accountName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (accountName === null || accountName === undefined) {
      return callback(new Error('accountName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/';
    if (resourceGroupName !== null && resourceGroupName !== undefined) {
      url2 = url2 + 'resourceGroups/' + encodeURIComponent(resourceGroupName) + '/';
    }
    url2 = url2 + 'providers/';
    url2 = url2 + 'Microsoft.DataLakeStore';
    url2 = url2 + '/';
    url2 = url2 + 'accounts';
    url2 = url2 + '/';
    url2 = url2 + encodeURIComponent(accountName);
    url2 = url2 + '/firewallRules';
    var queryParameters = [];
    queryParameters.push('api-version=2015-10-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.Store 0.9.2-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.Store 0.9.2-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['useragent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.Store 0.9.2-preview' + this.client.userAgentSuffix;
    }
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.Store 0.9.2-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.Store 0.9.2-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['User-Agent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.Store 0.9.2-preview' + this.client.userAgentSuffix;
    }
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = { value: [] };
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var valueArray = responseDoc['value'];
          if (valueArray !== null && valueArray !== undefined) {
            for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var valueValue = valueArray[loweredIndex1];
              var firewallRuleInstance = {};
              result.value.push(firewallRuleInstance);
              
              var nameValue = valueValue['name'];
              if (nameValue !== null && nameValue !== undefined) {
                var nameInstance = nameValue;
                firewallRuleInstance.name = nameInstance;
              }
              
              var typeValue = valueValue['type'];
              if (typeValue !== null && typeValue !== undefined) {
                var typeInstance = typeValue;
                firewallRuleInstance.type = typeInstance;
              }
              
              var idValue = valueValue['id'];
              if (idValue !== null && idValue !== undefined) {
                var idInstance = idValue;
                firewallRuleInstance.id = idInstance;
              }
              
              var locationValue = valueValue['location'];
              if (locationValue !== null && locationValue !== undefined) {
                var locationInstance = locationValue;
                firewallRuleInstance.location = locationInstance;
              }
              
              var propertiesValue = valueValue['properties'];
              if (propertiesValue !== null && propertiesValue !== undefined) {
                var propertiesInstance = {};
                firewallRuleInstance.properties = propertiesInstance;
                
                var startIpAddressValue = propertiesValue['startIpAddress'];
                if (startIpAddressValue !== null && startIpAddressValue !== undefined) {
                  var startIpAddressInstance = startIpAddressValue;
                  propertiesInstance.startIpAddress = startIpAddressInstance;
                }
                
                var endIpAddressValue = propertiesValue['endIpAddress'];
                if (endIpAddressValue !== null && endIpAddressValue !== undefined) {
                  var endIpAddressInstance = endIpAddressValue;
                  propertiesInstance.endIpAddress = endIpAddressInstance;
                }
              }
            }
          }
          
          var nextLinkValue = responseDoc['nextLink'];
          if (nextLinkValue !== null && nextLinkValue !== undefined) {
            var nextLinkInstance = nextLinkValue;
            result.nextLink = nextLinkInstance;
          }
          
          var countValue = responseDoc['count'];
          if (countValue !== null && countValue !== undefined) {
            var countInstance = countValue;
            result.count = countInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Gets the next page of the Data Lake Store account objects within the
   * subscription or within a specific resource group with the link to the
   * next page, if any.
   * 
   * @param {string} nextLink The url to the next Data Lake Store account page.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  DataLakeStoreAccountOperations.prototype.listNext = function(nextLink, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (nextLink === null || nextLink === undefined) {
      return callback(new Error('nextLink cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + nextLink;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.Store 0.9.2-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.Store 0.9.2-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['useragent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.Store 0.9.2-preview' + this.client.userAgentSuffix;
    }
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.Store 0.9.2-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.Store 0.9.2-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['User-Agent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.Store 0.9.2-preview' + this.client.userAgentSuffix;
    }
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = { value: [] };
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var valueArray = responseDoc['value'];
          if (valueArray !== null && valueArray !== undefined) {
            for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var valueValue = valueArray[loweredIndex1];
              var dataLakeStoreAccountInstance = { tags: {} };
              result.value.push(dataLakeStoreAccountInstance);
              
              var locationValue = valueValue['location'];
              if (locationValue !== null && locationValue !== undefined) {
                var locationInstance = locationValue;
                dataLakeStoreAccountInstance.location = locationInstance;
              }
              
              var nameValue = valueValue['name'];
              if (nameValue !== null && nameValue !== undefined) {
                var nameInstance = nameValue;
                dataLakeStoreAccountInstance.name = nameInstance;
              }
              
              var typeValue = valueValue['type'];
              if (typeValue !== null && typeValue !== undefined) {
                var typeInstance = typeValue;
                dataLakeStoreAccountInstance.type = typeInstance;
              }
              
              var idValue = valueValue['id'];
              if (idValue !== null && idValue !== undefined) {
                var idInstance = idValue;
                dataLakeStoreAccountInstance.id = idInstance;
              }
              
              var tagsSequenceElement = valueValue['tags'];
              if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
                for (var property in tagsSequenceElement) {
                  var tagsKey = property;
                  var tagsValue = tagsSequenceElement[property];
                  dataLakeStoreAccountInstance.tags[tagsKey] = tagsValue;
                }
              }
              
              var propertiesValue = valueValue['properties'];
              if (propertiesValue !== null && propertiesValue !== undefined) {
                var propertiesInstance = {};
                dataLakeStoreAccountInstance.properties = propertiesInstance;
                
                var provisioningStateValue = propertiesValue['provisioningState'];
                if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
                  var provisioningStateInstance = provisioningStateValue;
                  propertiesInstance.provisioningState = provisioningStateInstance;
                }
                
                var stateValue = propertiesValue['state'];
                if (stateValue !== null && stateValue !== undefined) {
                  var stateInstance = stateValue;
                  propertiesInstance.state = stateInstance;
                }
                
                var creationTimeValue = propertiesValue['creationTime'];
                if (creationTimeValue !== null && creationTimeValue !== undefined) {
                  var creationTimeInstance = creationTimeValue;
                  propertiesInstance.creationTime = creationTimeInstance;
                }
                
                var lastModifiedTimeValue = propertiesValue['lastModifiedTime'];
                if (lastModifiedTimeValue !== null && lastModifiedTimeValue !== undefined) {
                  var lastModifiedTimeInstance = lastModifiedTimeValue;
                  propertiesInstance.lastModifiedTime = lastModifiedTimeInstance;
                }
                
                var endpointValue = propertiesValue['endpoint'];
                if (endpointValue !== null && endpointValue !== undefined) {
                  var endpointInstance = endpointValue;
                  propertiesInstance.endpoint = endpointInstance;
                }
                
                var defaultGroupValue = propertiesValue['defaultGroup'];
                if (defaultGroupValue !== null && defaultGroupValue !== undefined) {
                  var defaultGroupInstance = defaultGroupValue;
                  propertiesInstance.defaultGroup = defaultGroupInstance;
                }
              }
            }
          }
          
          var nextLinkValue = responseDoc['nextLink'];
          if (nextLinkValue !== null && nextLinkValue !== undefined) {
            var nextLinkInstance = nextLinkValue;
            result.nextLink = nextLinkInstance;
          }
          
          var countValue = responseDoc['count'];
          if (countValue !== null && countValue !== undefined) {
            var countInstance = countValue;
            result.count = countInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Updates the Data Lake Store account object specified by the account name
   * with the contents of the account object.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {DataLakeStoreAccountCreateOrUpdateParameters} parameters
   * Parameters supplied to the update Data Lake Store account operation.
   * 
   * @param {DataLakeStoreAccount} parameters.dataLakeStoreAccount Gets or sets
   * the account object that is being created or updated.
   * 
   * @param {string} [parameters.dataLakeStoreAccount.location] Gets or sets
   * the account regional location.
   * 
   * @param {string} [parameters.dataLakeStoreAccount.name] Gets or sets the
   * account name.
   * 
   * @param {string} [parameters.dataLakeStoreAccount.type] Gets or sets the
   * namespace and type of the account.
   * 
   * @param {string} [parameters.dataLakeStoreAccount.id] Gets or sets the
   * account subscription ID.
   * 
   * @param {object} [parameters.dataLakeStoreAccount.tags] Gets or sets the
   * value of custom properties.
   * 
   * @param {DataLakeStoreAccountProperties}
   * [parameters.dataLakeStoreAccount.properties] Gets or sets the properties
   * defined by Data Lake all properties are specific to each resource
   * provider.
   * 
   * @param {DataLakeStoreAccountStatus}
   * [parameters.dataLakeStoreAccount.properties.provisioningState] Gets or
   * sets the status of the Data Lake Store account while being provisioned.
   * 
   * @param {DataLakeStoreAccountState}
   * [parameters.dataLakeStoreAccount.properties.state] Gets or sets the
   * status of the Data Lake Account after provisioning has completed.
   * 
   * @param {date} [parameters.dataLakeStoreAccount.properties.creationTime]
   * Gets or sets the account creation time.
   * 
   * @param {date}
   * [parameters.dataLakeStoreAccount.properties.lastModifiedTime] Gets or
   * sets the account last modified time.
   * 
   * @param {string} [parameters.dataLakeStoreAccount.properties.endpoint] Gets
   * or sets the gateway host.
   * 
   * @param {string} [parameters.dataLakeStoreAccount.properties.defaultGroup]
   * Gets or sets the default owner group for all new folders and files
   * created in the DataLake.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  DataLakeStoreAccountOperations.prototype.update = function(resourceGroupName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.dataLakeStoreAccount.beginUpdate(resourceGroupName, parameters, function (err, result) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      if (result.status === 'Succeeded') {
        return callback(null, result);
      }
      var delayInSeconds = result.retryAfter;
      if (delayInSeconds === 0) {
        delayInSeconds = 30;
      }
      if (client2.longRunningOperationInitialTimeout >= 0) {
        delayInSeconds = client2.longRunningOperationInitialTimeout;
      }
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.getLongRunningOperationStatus(result.azureAsyncOperation, function (err2, result2) {
            if (err2 !== null && err2 !== undefined) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                return callback(null, result2);
              } else {
                delayInSeconds = result2.retryAfter;
                if (delayInSeconds === 0) {
                  delayInSeconds = 15;
                }
                if (client2.longRunningOperationRetryTimeout >= 0) {
                  delayInSeconds = client2.longRunningOperationRetryTimeout;
                }
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  return DataLakeStoreAccountOperations;
})();
