/* jshint latedef:false */
/* jshint forin:false */
/* jshint noempty:false */

// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

'use strict';

var util = require('util');
var _ = require('underscore');
var azureCommon = require('azure-common');
var Service = azureCommon.Service;
var WebResource = azureCommon.WebResource;

var DataLakeStoreFileSystemManagementClient = ( /** @lends DataLakeStoreFileSystemManagementClient */ function() {
  /**
   * @class
   * Creates a Data Lake Store filesystem management client.
   * Initializes a new instance of the DataLakeStoreFileSystemManagementClient
   * class.
   * @constructor
   * 
   * @param {SubscriptionCloudCredentials} credentials Gets subscription
   * credentials which uniquely identify Microsoft Azure subscription. The
   * subscription ID forms part of the URI for every service call.
   * 
   * @param {string} [credentials.subscriptionId]
   * 
   * @param {string} [dataLakeServiceUri] Gets the URI used as the base for all
   * cloud service requests.
   * 
   * @param {Array} filters
   */
  function DataLakeStoreFileSystemManagementClient(credentials, dataLakeServiceUri, filters) {
    if (credentials === null || credentials === undefined) {
      throw new Error('credentials cannot be null.');
    }
    
    DataLakeStoreFileSystemManagementClient['super_'].call(this, credentials, filters);
    
    this.credentials = credentials;
    this.dataLakeServiceUri = dataLakeServiceUri;
    if (this.userAgentSuffix === null || this.userAgentSuffix === undefined) {
      this.userAgentSuffix = '';
    }
    if (this.apiVersion === null || this.apiVersion === undefined) {
      this.apiVersion = '2015-10-01-preview';
    }
    if (this.longRunningOperationInitialTimeout === null || this.longRunningOperationInitialTimeout === undefined) {
      this.longRunningOperationInitialTimeout = -1;
    }
    if (this.longRunningOperationRetryTimeout === null || this.longRunningOperationRetryTimeout === undefined) {
      this.longRunningOperationRetryTimeout = -1;
    }
    /**
     * Provides an instance of the
     * [FileSystemOperations](-FileSystemOperations.html) object.
     * @type {object}
     */
    this.fileSystem = new FileSystemOperations(this);
  }
  
  util.inherits(DataLakeStoreFileSystemManagementClient, Service);
  
  
  return DataLakeStoreFileSystemManagementClient;
})();
exports.DataLakeStoreFileSystemManagementClient = DataLakeStoreFileSystemManagementClient;

var FileSystemOperations = ( /** @lends FileSystemOperations */ function() {
  /**
   * @class
   * Operations for managing the Data Lake Store filesystem
   * __NOTE__: An instance of this class is automatically created for an
   * instance of the [DataLakeStoreFileSystemManagementClient] {@link
   * DataLakeStoreFileSystemManagementClient~DataLakeStoreFileSystemManagementClient}.
   * See [fileSystem] {@link
   * DataLakeStoreFileSystemManagementClient~DataLakeStoreFileSystemManagementClient#fileSystem}.
   * Initializes a new instance of the FileSystemOperations class.
   * @constructor
   * 
   * @param {DataLakeStoreFileSystemManagementClient} client Reference to the
   * service client.
   */
  function FileSystemOperations(client) {
    this.client = client;
  }
  
  /**
   * Appends to the file specified in the link that was returned from
   * BeginAppend.
   * 
   * @param {string} fileAppendRequestLink The link to the file to append to
   * including all required parameters.
   * 
   * @param {Stream} streamContents The file contents to include when appending
   * to the file.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  FileSystemOperations.prototype.append = function(fileAppendRequestLink, streamContents, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (fileAppendRequestLink === null || fileAppendRequestLink === undefined) {
      return callback(new Error('fileAppendRequestLink cannot be null.'));
    }
    if (streamContents === null || streamContents === undefined) {
      return callback(new Error('streamContents cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + fileAppendRequestLink;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/octet-stream';
    httpRequest.headers['Transfer-Encoding'] = 'chunked';
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['useragent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix;
    }
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['User-Agent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix;
    }
    
    // Serialize Request
    var requestContent = streamContents;
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Initiates a file append request, resulting in a return of the data node
   * location that will service the request.
   * 
   * @param {string} filePath The path to the file to append to.
   * 
   * @param {string} accountName The name of the Data Lake Store account to
   * append to the file in
   * 
   * @param {Number} [bufferSize] The optional buffer size to use when
   * appending data
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  FileSystemOperations.prototype.beginAppend = function(filePath, accountName, bufferSize, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (filePath === null || filePath === undefined) {
      return callback(new Error('filePath cannot be null.'));
    }
    if (accountName === null || accountName === undefined) {
      return callback(new Error('accountName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + 'https://';
    url2 = url2 + encodeURIComponent(accountName);
    url2 = url2 + '.';
    if (this.client.dataLakeServiceUri !== null && this.client.dataLakeServiceUri !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.dataLakeServiceUri);
    }
    url2 = url2 + '/webhdfs/v1/';
    url2 = url2 + encodeURIComponent(filePath);
    var queryParameters = [];
    queryParameters.push('op=APPEND');
    if (bufferSize !== null && bufferSize !== undefined) {
      queryParameters.push('buffersize=' + encodeURIComponent(bufferSize.toString()));
    }
    queryParameters.push('api-version=2015-10-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/octet-stream';
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['useragent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix;
    }
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['User-Agent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix;
    }
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 307) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      result = {};
      result.statusCode = statusCode;
      result.location = response.headers['location'];
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Initiates a file creation request, resulting in a return of the data node
   * location that will service the request.
   * 
   * @param {string} filePath The path to the file to create.
   * 
   * @param {string} accountName The name of the Data Lake Store account to
   * create the file in
   * 
   * @param {FileCreateParameters} [parametersOrCallback] The optional
   * parameters to use when creating the file
   * 
   * @param {boolean} [parametersOrCallback.overwrite] Gets or sets the
   * indication of if the file should be overwritten
   * 
   * @param {number} [parametersOrCallback.blockSize] Gets or sets the block
   * size of a file, in bytes
   * 
   * @param {number} [parametersOrCallback.replication] Gets or sets the number
   * of replications of a file
   * 
   * @param {string} [parametersOrCallback.permission] Gets or sets the
   * permissions of a file or directory
   * 
   * @param {number} [parametersOrCallback.bufferSize] Gets or sets the size of
   * the buffer used in transferring data.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  FileSystemOperations.prototype.beginCreate = function(filePath, accountName, parametersOrCallback, callback) {
    var parameters = parametersOrCallback;
    if (_.isFunction(parameters)) {
      callback = parameters;
      parameters = null;
    }
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (filePath === null || filePath === undefined) {
      return callback(new Error('filePath cannot be null.'));
    }
    if (accountName === null || accountName === undefined) {
      return callback(new Error('accountName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + 'https://';
    url2 = url2 + encodeURIComponent(accountName);
    url2 = url2 + '.';
    if (this.client.dataLakeServiceUri !== null && this.client.dataLakeServiceUri !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.dataLakeServiceUri);
    }
    url2 = url2 + '/webhdfs/v1/';
    url2 = url2 + encodeURIComponent(filePath);
    var queryParameters = [];
    queryParameters.push('op=CREATE');
    if (parameters !== null && parameters !== undefined && parameters.overwrite !== null && parameters.overwrite !== undefined) {
      queryParameters.push('overwrite=' + encodeURIComponent(parameters.overwrite.toString()));
    }
    if (parameters !== null && parameters !== undefined && parameters.blockSize !== null && parameters.blockSize !== undefined) {
      queryParameters.push('blocksize=' + encodeURIComponent(parameters.blockSize.toString()));
    }
    if (parameters !== null && parameters !== undefined && parameters.replication !== null && parameters.replication !== undefined) {
      queryParameters.push('replication=' + encodeURIComponent(parameters.replication.toString()));
    }
    if (parameters !== null && parameters !== undefined && parameters.permission !== null && parameters.permission !== undefined) {
      queryParameters.push('permission=' + encodeURIComponent(parameters.permission));
    }
    if (parameters !== null && parameters !== undefined && parameters.bufferSize !== null && parameters.bufferSize !== undefined) {
      queryParameters.push('buffersize=' + encodeURIComponent(parameters.bufferSize.toString()));
    }
    queryParameters.push('api-version=2015-10-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/octet-stream';
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['useragent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix;
    }
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['User-Agent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix;
    }
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 307) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      result = {};
      result.statusCode = statusCode;
      result.location = response.headers['location'];
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Initiates a file open (read) request, resulting in a return of the data
   * node location that will service the request.
   * 
   * @param {string} filePath The path to the file to open.
   * 
   * @param {string} accountName The name of the account to use
   * 
   * @param {FileOpenParameters} [parametersOrCallback] The optional parameters
   * to pass to the open operation
   * 
   * @param {number} [parametersOrCallback.offset] Gets or sets the offset to
   * begin reading the file at
   * 
   * @param {number} [parametersOrCallback.length] Gets or sets the length of
   * the file that should be read, in bytes
   * 
   * @param {number} [parametersOrCallback.bufferSize] Gets or sets the size of
   * the buffer used when transferring data
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  FileSystemOperations.prototype.beginOpen = function(filePath, accountName, parametersOrCallback, callback) {
    var parameters = parametersOrCallback;
    if (_.isFunction(parameters)) {
      callback = parameters;
      parameters = null;
    }
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (filePath === null || filePath === undefined) {
      return callback(new Error('filePath cannot be null.'));
    }
    if (accountName === null || accountName === undefined) {
      return callback(new Error('accountName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + 'https://';
    url2 = url2 + encodeURIComponent(accountName);
    url2 = url2 + '.';
    if (this.client.dataLakeServiceUri !== null && this.client.dataLakeServiceUri !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.dataLakeServiceUri);
    }
    url2 = url2 + '/webhdfs/v1/';
    url2 = url2 + encodeURIComponent(filePath);
    var queryParameters = [];
    queryParameters.push('op=OPEN');
    if (parameters !== null && parameters !== undefined && parameters.offset !== null && parameters.offset !== undefined) {
      queryParameters.push('offset=' + encodeURIComponent(parameters.offset.toString()));
    }
    if (parameters !== null && parameters !== undefined && parameters.length !== null && parameters.length !== undefined) {
      queryParameters.push('length=' + encodeURIComponent(parameters.length.toString()));
    }
    if (parameters !== null && parameters !== undefined && parameters.bufferSize !== null && parameters.bufferSize !== undefined) {
      queryParameters.push('buffersize=' + encodeURIComponent(parameters.bufferSize.toString()));
    }
    queryParameters.push('api-version=2015-10-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['useragent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix;
    }
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['User-Agent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix;
    }
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 307) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      result = {};
      result.statusCode = statusCode;
      result.location = response.headers['location'];
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Checks if the specified access is available at the given path.
   * 
   * @param {string} path The path to the file or folder to check access for.
   * 
   * @param {string} accountName The name of the account to use
   * 
   * @param {string} fsAction File system operation read/write/execute in
   * string form, matching regex pattern '[rwx-]{3}'
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  FileSystemOperations.prototype.checkAccess = function(path, accountName, fsAction, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (path === null || path === undefined) {
      return callback(new Error('path cannot be null.'));
    }
    if (accountName === null || accountName === undefined) {
      return callback(new Error('accountName cannot be null.'));
    }
    if (fsAction === null || fsAction === undefined) {
      return callback(new Error('fsAction cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + 'https://';
    url2 = url2 + encodeURIComponent(accountName);
    url2 = url2 + '.';
    if (this.client.dataLakeServiceUri !== null && this.client.dataLakeServiceUri !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.dataLakeServiceUri);
    }
    url2 = url2 + '/webhdfs/v1/';
    url2 = url2 + encodeURIComponent(path);
    var queryParameters = [];
    queryParameters.push('op=CHECKACCESS');
    queryParameters.push('fsaction=' + encodeURIComponent(fsAction));
    queryParameters.push('api-version=2015-10-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['useragent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix;
    }
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['User-Agent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix;
    }
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Concatenates the list of files into the target file.
   * 
   * @param {string} destinationPath The path to the destination file resulting
   * from the concatenation.
   * 
   * @param {string} accountName The name of the account to use
   * 
   * @param {string} paths A list of comma seperated absolute FileSystem paths
   * without scheme and authority
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  FileSystemOperations.prototype.concat = function(destinationPath, accountName, paths, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (destinationPath === null || destinationPath === undefined) {
      return callback(new Error('destinationPath cannot be null.'));
    }
    if (accountName === null || accountName === undefined) {
      return callback(new Error('accountName cannot be null.'));
    }
    if (paths === null || paths === undefined) {
      return callback(new Error('paths cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + 'https://';
    url2 = url2 + encodeURIComponent(accountName);
    url2 = url2 + '.';
    if (this.client.dataLakeServiceUri !== null && this.client.dataLakeServiceUri !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.dataLakeServiceUri);
    }
    url2 = url2 + '/webhdfs/v1/';
    url2 = url2 + encodeURIComponent(destinationPath);
    var queryParameters = [];
    queryParameters.push('op=CONCAT');
    queryParameters.push('sources=' + encodeURIComponent(paths));
    queryParameters.push('api-version=2015-10-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['useragent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix;
    }
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['User-Agent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix;
    }
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Appends to the file specified. This method supports multiple concurrent
   * appends to the file. NOTE: that concurrent append and serial append
   * CANNOT be used interchangeably. Once a file has been appended to using
   * either one, it can only be appended to using that type of append.
   * 
   * @param {string} accountName The name of the data lake account that the
   * file lives in.
   * 
   * @param {string} filePath The path to the file to append to using
   * concurrent append.
   * 
   * @param {Stream} streamContents The file contents to include when appending
   * to the file.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  FileSystemOperations.prototype.concurrentAppend = function(accountName, filePath, streamContents, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (accountName === null || accountName === undefined) {
      return callback(new Error('accountName cannot be null.'));
    }
    if (filePath === null || filePath === undefined) {
      return callback(new Error('filePath cannot be null.'));
    }
    if (streamContents === null || streamContents === undefined) {
      return callback(new Error('streamContents cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + 'https://';
    url2 = url2 + encodeURIComponent(accountName);
    url2 = url2 + '.';
    if (this.client.dataLakeServiceUri !== null && this.client.dataLakeServiceUri !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.dataLakeServiceUri);
    }
    url2 = url2 + '/WebHdfsExt/';
    url2 = url2 + encodeURIComponent(filePath);
    var queryParameters = [];
    queryParameters.push('op=concurrentappend');
    queryParameters.push('api-version=2015-10-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/octet-stream';
    httpRequest.headers['Transfer-Encoding'] = 'chunked';
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['useragent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix;
    }
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['User-Agent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix;
    }
    
    // Serialize Request
    var requestContent = streamContents;
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Creates the file specified in the link that was returned from BeginCreate.
   * 
   * @param {string} fileCreateRequestLink The link to the file to create
   * including all required parameters.
   * 
   * @param {Stream} streamContents The file contents to include when creating
   * the file. This parameter is required, however it can be an empty stream.
   * Just not null.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  FileSystemOperations.prototype.create = function(fileCreateRequestLink, streamContents, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (fileCreateRequestLink === null || fileCreateRequestLink === undefined) {
      return callback(new Error('fileCreateRequestLink cannot be null.'));
    }
    if (streamContents === null || streamContents === undefined) {
      return callback(new Error('streamContents cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + fileCreateRequestLink;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/octet-stream';
    httpRequest.headers['Transfer-Encoding'] = 'chunked';
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['useragent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix;
    }
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['User-Agent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix;
    }
    
    // Serialize Request
    var requestContent = streamContents;
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 201) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Creates a symbolic link.
   * 
   * @param {string} sourcePath The path to the directory or file to create a
   * symlink of.
   * 
   * @param {string} accountName The name of the account to use
   * 
   * @param {string} destinationPath The path to create the symlink at
   * 
   * @param {boolean} [createParent] If the parent directories do not exist,
   * indicates if they should be created.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  FileSystemOperations.prototype.createSymLink = function(sourcePath, accountName, destinationPath, createParent, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (sourcePath === null || sourcePath === undefined) {
      return callback(new Error('sourcePath cannot be null.'));
    }
    if (accountName === null || accountName === undefined) {
      return callback(new Error('accountName cannot be null.'));
    }
    if (destinationPath === null || destinationPath === undefined) {
      return callback(new Error('destinationPath cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + 'https://';
    url2 = url2 + encodeURIComponent(accountName);
    url2 = url2 + '.';
    if (this.client.dataLakeServiceUri !== null && this.client.dataLakeServiceUri !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.dataLakeServiceUri);
    }
    url2 = url2 + '/webhdfs/v1/';
    url2 = url2 + encodeURIComponent(sourcePath);
    var queryParameters = [];
    queryParameters.push('op=CREATESYMLINK');
    queryParameters.push('destination=' + encodeURIComponent(destinationPath));
    if (createParent !== null && createParent !== undefined) {
      queryParameters.push('createParent=' + encodeURIComponent(createParent.toString()));
    }
    queryParameters.push('api-version=2015-10-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['useragent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix;
    }
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['User-Agent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix;
    }
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Deletes the requested file or folder, optionally recursively.
   * 
   * @param {string} filePath The path to the file or folder to delete.
   * 
   * @param {string} accountName The name of the account to use
   * 
   * @param {boolean} [recursive] The optional switch indicating if the delete
   * should be recursive
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  FileSystemOperations.prototype.deleteMethod = function(filePath, accountName, recursive, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (filePath === null || filePath === undefined) {
      return callback(new Error('filePath cannot be null.'));
    }
    if (accountName === null || accountName === undefined) {
      return callback(new Error('accountName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + 'https://';
    url2 = url2 + encodeURIComponent(accountName);
    url2 = url2 + '.';
    if (this.client.dataLakeServiceUri !== null && this.client.dataLakeServiceUri !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.dataLakeServiceUri);
    }
    url2 = url2 + '/webhdfs/v1/';
    url2 = url2 + encodeURIComponent(filePath);
    var queryParameters = [];
    queryParameters.push('op=DELETE');
    if (recursive !== null && recursive !== undefined) {
      queryParameters.push('recursive=' + encodeURIComponent(recursive.toString()));
    }
    queryParameters.push('api-version=2015-10-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'DELETE';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['useragent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix;
    }
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['User-Agent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix;
    }
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var booleanValue = responseDoc['boolean'];
          if (booleanValue !== null && booleanValue !== undefined) {
            var booleanInstance = booleanValue;
            result.operationResult = booleanInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Directly appends to a file with the specified content, without requiring a
   * redirect. This API is NOT webhdfs compliant. It should be used only by
   * tools that do not rely on webhdfs interoperability.
   * 
   * @param {string} filePath The path to the file to append to.
   * 
   * @param {string} accountName The name of the Data Lake Store account to
   * append to the file in
   * 
   * @param {Stream} streamContents The file contents to include when appending
   * to the file.
   * 
   * @param {Number} [bufferSize] The optional buffer size to use when
   * appending data
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  FileSystemOperations.prototype.directAppend = function(filePath, accountName, streamContents, bufferSize, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (filePath === null || filePath === undefined) {
      return callback(new Error('filePath cannot be null.'));
    }
    if (accountName === null || accountName === undefined) {
      return callback(new Error('accountName cannot be null.'));
    }
    if (streamContents === null || streamContents === undefined) {
      return callback(new Error('streamContents cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + 'https://';
    url2 = url2 + encodeURIComponent(accountName);
    url2 = url2 + '.';
    if (this.client.dataLakeServiceUri !== null && this.client.dataLakeServiceUri !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.dataLakeServiceUri);
    }
    url2 = url2 + '/webhdfs/v1/';
    url2 = url2 + encodeURIComponent(filePath);
    var queryParameters = [];
    queryParameters.push('op=APPEND');
    if (bufferSize !== null && bufferSize !== undefined) {
      queryParameters.push('buffersize=' + encodeURIComponent(bufferSize.toString()));
    }
    queryParameters.push('append=true');
    queryParameters.push('api-version=2015-10-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/octet-stream';
    httpRequest.headers['Transfer-Encoding'] = 'chunked';
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['useragent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix;
    }
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['User-Agent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix;
    }
    
    // Serialize Request
    var requestContent = streamContents;
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Directly creates a file with the specified content, without requiring a
   * redirect. This API is NOT webhdfs compliant. It should be used only by
   * tools that do not rely on webhdfs interoperability.
   * 
   * @param {string} filePath The path to the file to create.
   * 
   * @param {string} accountName The name of the Data Lake Store account to
   * create the file in
   * 
   * @param {Stream} streamContents The file contents to include when creating
   * the file. This parameter is required, however it can be an empty stream.
   * Just not null.
   * 
   * @param {FileCreateParameters} [parametersOrCallback] The optional
   * parameters to use when creating the file
   * 
   * @param {boolean} [parametersOrCallback.overwrite] Gets or sets the
   * indication of if the file should be overwritten
   * 
   * @param {number} [parametersOrCallback.blockSize] Gets or sets the block
   * size of a file, in bytes
   * 
   * @param {number} [parametersOrCallback.replication] Gets or sets the number
   * of replications of a file
   * 
   * @param {string} [parametersOrCallback.permission] Gets or sets the
   * permissions of a file or directory
   * 
   * @param {number} [parametersOrCallback.bufferSize] Gets or sets the size of
   * the buffer used in transferring data.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  FileSystemOperations.prototype.directCreate = function(filePath, accountName, streamContents, parametersOrCallback, callback) {
    var parameters = parametersOrCallback;
    if (_.isFunction(parameters)) {
      callback = parameters;
      parameters = null;
    }
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (filePath === null || filePath === undefined) {
      return callback(new Error('filePath cannot be null.'));
    }
    if (accountName === null || accountName === undefined) {
      return callback(new Error('accountName cannot be null.'));
    }
    if (streamContents === null || streamContents === undefined) {
      return callback(new Error('streamContents cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + 'https://';
    url2 = url2 + encodeURIComponent(accountName);
    url2 = url2 + '.';
    if (this.client.dataLakeServiceUri !== null && this.client.dataLakeServiceUri !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.dataLakeServiceUri);
    }
    url2 = url2 + '/webhdfs/v1/';
    url2 = url2 + encodeURIComponent(filePath);
    var queryParameters = [];
    queryParameters.push('op=CREATE');
    if (parameters !== null && parameters !== undefined && parameters.overwrite !== null && parameters.overwrite !== undefined) {
      queryParameters.push('overwrite=' + encodeURIComponent(parameters.overwrite.toString()));
    }
    if (parameters !== null && parameters !== undefined && parameters.blockSize !== null && parameters.blockSize !== undefined) {
      queryParameters.push('blocksize=' + encodeURIComponent(parameters.blockSize.toString()));
    }
    if (parameters !== null && parameters !== undefined && parameters.replication !== null && parameters.replication !== undefined) {
      queryParameters.push('replication=' + encodeURIComponent(parameters.replication.toString()));
    }
    if (parameters !== null && parameters !== undefined && parameters.permission !== null && parameters.permission !== undefined) {
      queryParameters.push('permission=' + encodeURIComponent(parameters.permission));
    }
    if (parameters !== null && parameters !== undefined && parameters.bufferSize !== null && parameters.bufferSize !== undefined) {
      queryParameters.push('buffersize=' + encodeURIComponent(parameters.bufferSize.toString()));
    }
    queryParameters.push('write=true');
    queryParameters.push('api-version=2015-10-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/octet-stream';
    httpRequest.headers['Transfer-Encoding'] = 'chunked';
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['useragent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix;
    }
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['User-Agent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix;
    }
    
    // Serialize Request
    var requestContent = streamContents;
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 201) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Directly opens and reads from the specified file, without requiring a
   * redirect. This API is NOT webhdfs compliant. It should be used only by
   * tools that do not rely on webhdfs interoperability.
   * 
   * @param {string} filePath The path to the file to open.
   * 
   * @param {string} accountName The name of the account to use
   * 
   * @param {FileOpenParameters} [parametersOrCallback] The optional parameters
   * to pass to the open operation
   * 
   * @param {number} [parametersOrCallback.offset] Gets or sets the offset to
   * begin reading the file at
   * 
   * @param {number} [parametersOrCallback.length] Gets or sets the length of
   * the file that should be read, in bytes
   * 
   * @param {number} [parametersOrCallback.bufferSize] Gets or sets the size of
   * the buffer used when transferring data
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  FileSystemOperations.prototype.directOpen = function(filePath, accountName, parametersOrCallback, callback) {
    var parameters = parametersOrCallback;
    if (_.isFunction(parameters)) {
      callback = parameters;
      parameters = null;
    }
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (filePath === null || filePath === undefined) {
      return callback(new Error('filePath cannot be null.'));
    }
    if (accountName === null || accountName === undefined) {
      return callback(new Error('accountName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + 'https://';
    url2 = url2 + encodeURIComponent(accountName);
    url2 = url2 + '.';
    if (this.client.dataLakeServiceUri !== null && this.client.dataLakeServiceUri !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.dataLakeServiceUri);
    }
    url2 = url2 + '/webhdfs/v1/';
    url2 = url2 + encodeURIComponent(filePath);
    var queryParameters = [];
    queryParameters.push('op=OPEN');
    if (parameters !== null && parameters !== undefined && parameters.offset !== null && parameters.offset !== undefined) {
      queryParameters.push('offset=' + encodeURIComponent(parameters.offset.toString()));
    }
    if (parameters !== null && parameters !== undefined && parameters.length !== null && parameters.length !== undefined) {
      queryParameters.push('length=' + encodeURIComponent(parameters.length.toString()));
    }
    if (parameters !== null && parameters !== undefined && parameters.bufferSize !== null && parameters.bufferSize !== undefined) {
      queryParameters.push('buffersize=' + encodeURIComponent(parameters.bufferSize.toString()));
    }
    queryParameters.push('read=true');
    queryParameters.push('api-version=2015-10-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['useragent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix;
    }
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['User-Agent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix;
    }
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        result.fileContents = responseContent;
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Gets ACL entries on a file or folder.
   * 
   * @param {string} filePath The path to the directory or file to get ACLs on.
   * 
   * @param {string} accountName The name of the account to use
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  FileSystemOperations.prototype.getAclStatus = function(filePath, accountName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (filePath === null || filePath === undefined) {
      return callback(new Error('filePath cannot be null.'));
    }
    if (accountName === null || accountName === undefined) {
      return callback(new Error('accountName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + 'https://';
    url2 = url2 + encodeURIComponent(accountName);
    url2 = url2 + '.';
    if (this.client.dataLakeServiceUri !== null && this.client.dataLakeServiceUri !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.dataLakeServiceUri);
    }
    url2 = url2 + '/webhdfs/v1/';
    url2 = url2 + encodeURIComponent(filePath);
    var queryParameters = [];
    queryParameters.push('op=GETACLSTATUS');
    queryParameters.push('api-version=2015-10-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['useragent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix;
    }
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['User-Agent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix;
    }
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var aclStatusValue = responseDoc['AclStatus'];
          if (aclStatusValue !== null && aclStatusValue !== undefined) {
            var aclStatusInstance = { entries: [] };
            result.aclStatus = aclStatusInstance;
            
            var entriesArray = aclStatusValue['entries'];
            if (entriesArray !== null && entriesArray !== undefined) {
              for (var loweredIndex1 = 0; loweredIndex1 < entriesArray.length; loweredIndex1 = loweredIndex1 + 1) {
                var entriesValue = entriesArray[loweredIndex1];
                aclStatusInstance.entries.push(entriesValue);
              }
            }
            
            var groupValue = aclStatusValue['group'];
            if (groupValue !== null && groupValue !== undefined) {
              var groupInstance = groupValue;
              aclStatusInstance.group = groupInstance;
            }
            
            var ownerValue = aclStatusValue['owner'];
            if (ownerValue !== null && ownerValue !== undefined) {
              var ownerInstance = ownerValue;
              aclStatusInstance.owner = ownerInstance;
            }
            
            var stickyBitValue = aclStatusValue['stickyBit'];
            if (stickyBitValue !== null && stickyBitValue !== undefined) {
              var stickyBitInstance = stickyBitValue;
              aclStatusInstance.stickyBit = stickyBitInstance;
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Gets the file content summary object specified by the file path.
   * 
   * @param {string} filePath The path to the file to open.
   * 
   * @param {string} accountName The name of the account to use
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  FileSystemOperations.prototype.getContentSummary = function(filePath, accountName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (filePath === null || filePath === undefined) {
      return callback(new Error('filePath cannot be null.'));
    }
    if (accountName === null || accountName === undefined) {
      return callback(new Error('accountName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + 'https://';
    url2 = url2 + encodeURIComponent(accountName);
    url2 = url2 + '.';
    if (this.client.dataLakeServiceUri !== null && this.client.dataLakeServiceUri !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.dataLakeServiceUri);
    }
    url2 = url2 + '/webhdfs/v1/';
    url2 = url2 + encodeURIComponent(filePath);
    var queryParameters = [];
    queryParameters.push('op=GETCONTENTSUMMARY');
    queryParameters.push('api-version=2015-10-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['useragent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix;
    }
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['User-Agent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix;
    }
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var contentSummaryValue = responseDoc['ContentSummary'];
          if (contentSummaryValue !== null && contentSummaryValue !== undefined) {
            var contentSummaryInstance = {};
            result.contentSummary = contentSummaryInstance;
            
            var directoryCountValue = contentSummaryValue['directoryCount'];
            if (directoryCountValue !== null && directoryCountValue !== undefined) {
              var directoryCountInstance = directoryCountValue;
              contentSummaryInstance.directoryCount = directoryCountInstance;
            }
            
            var fileCountValue = contentSummaryValue['fileCount'];
            if (fileCountValue !== null && fileCountValue !== undefined) {
              var fileCountInstance = fileCountValue;
              contentSummaryInstance.fileCount = fileCountInstance;
            }
            
            var lengthValue = contentSummaryValue['length'];
            if (lengthValue !== null && lengthValue !== undefined) {
              var lengthInstance = lengthValue;
              contentSummaryInstance.length = lengthInstance;
            }
            
            var quotaValue = contentSummaryValue['quota'];
            if (quotaValue !== null && quotaValue !== undefined) {
              var quotaInstance = quotaValue;
              contentSummaryInstance.quota = quotaInstance;
            }
            
            var spaceConsumedValue = contentSummaryValue['spaceConsumed'];
            if (spaceConsumedValue !== null && spaceConsumedValue !== undefined) {
              var spaceConsumedInstance = spaceConsumedValue;
              contentSummaryInstance.spaceConsumed = spaceConsumedInstance;
            }
            
            var spaceQuotaValue = contentSummaryValue['spaceQuota'];
            if (spaceQuotaValue !== null && spaceQuotaValue !== undefined) {
              var spaceQuotaInstance = spaceQuotaValue;
              contentSummaryInstance.spaceQuota = spaceQuotaInstance;
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Get the file status object specified by the file path.
   * 
   * @param {string} filePath The path to the file to retrieve status for.
   * 
   * @param {string} accountName The name of the account to use
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  FileSystemOperations.prototype.getFileStatus = function(filePath, accountName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (filePath === null || filePath === undefined) {
      return callback(new Error('filePath cannot be null.'));
    }
    if (accountName === null || accountName === undefined) {
      return callback(new Error('accountName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + 'https://';
    url2 = url2 + encodeURIComponent(accountName);
    url2 = url2 + '.';
    if (this.client.dataLakeServiceUri !== null && this.client.dataLakeServiceUri !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.dataLakeServiceUri);
    }
    url2 = url2 + '/webhdfs/v1/';
    url2 = url2 + encodeURIComponent(filePath);
    var queryParameters = [];
    queryParameters.push('op=GETFILESTATUS');
    queryParameters.push('api-version=2015-10-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['useragent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix;
    }
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['User-Agent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix;
    }
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var fileStatusValue = responseDoc['FileStatus'];
          if (fileStatusValue !== null && fileStatusValue !== undefined) {
            var fileStatusInstance = {};
            result.fileStatus = fileStatusInstance;
            
            var accessTimeValue = fileStatusValue['accessTime'];
            if (accessTimeValue !== null && accessTimeValue !== undefined) {
              var accessTimeInstance = accessTimeValue;
              fileStatusInstance.accessTime = accessTimeInstance;
            }
            
            var blockSizeValue = fileStatusValue['blockSize'];
            if (blockSizeValue !== null && blockSizeValue !== undefined) {
              var blockSizeInstance = blockSizeValue;
              fileStatusInstance.blockSize = blockSizeInstance;
            }
            
            var childrenNumValue = fileStatusValue['childrenNum'];
            if (childrenNumValue !== null && childrenNumValue !== undefined) {
              var childrenNumInstance = childrenNumValue;
              fileStatusInstance.childrenNum = childrenNumInstance;
            }
            
            var fileIdValue = fileStatusValue['fileId'];
            if (fileIdValue !== null && fileIdValue !== undefined) {
              var fileIdInstance = fileIdValue;
              fileStatusInstance.fileId = fileIdInstance;
            }
            
            var groupValue = fileStatusValue['group'];
            if (groupValue !== null && groupValue !== undefined) {
              var groupInstance = groupValue;
              fileStatusInstance.group = groupInstance;
            }
            
            var lengthValue = fileStatusValue['length'];
            if (lengthValue !== null && lengthValue !== undefined) {
              var lengthInstance = lengthValue;
              fileStatusInstance.length = lengthInstance;
            }
            
            var modificationTimeValue = fileStatusValue['modificationTime'];
            if (modificationTimeValue !== null && modificationTimeValue !== undefined) {
              var modificationTimeInstance = modificationTimeValue;
              fileStatusInstance.modificationTime = modificationTimeInstance;
            }
            
            var ownerValue = fileStatusValue['owner'];
            if (ownerValue !== null && ownerValue !== undefined) {
              var ownerInstance = ownerValue;
              fileStatusInstance.owner = ownerInstance;
            }
            
            var pathSuffixValue = fileStatusValue['pathSuffix'];
            if (pathSuffixValue !== null && pathSuffixValue !== undefined) {
              var pathSuffixInstance = pathSuffixValue;
              fileStatusInstance.pathSuffix = pathSuffixInstance;
            }
            
            var permissionValue = fileStatusValue['permission'];
            if (permissionValue !== null && permissionValue !== undefined) {
              var permissionInstance = permissionValue;
              fileStatusInstance.permission = permissionInstance;
            }
            
            var replicationValue = fileStatusValue['replication'];
            if (replicationValue !== null && replicationValue !== undefined) {
              var replicationInstance = replicationValue;
              fileStatusInstance.replication = replicationInstance;
            }
            
            var typeValue = fileStatusValue['type'];
            if (typeValue !== null && typeValue !== undefined) {
              var typeInstance = typeValue;
              fileStatusInstance.type = typeInstance;
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Get the home directory for the specified account.
   * 
   * @param {string} accountName The name of the account to use
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  FileSystemOperations.prototype.getHomeDirectory = function(accountName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (accountName === null || accountName === undefined) {
      return callback(new Error('accountName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + 'https://';
    url2 = url2 + encodeURIComponent(accountName);
    url2 = url2 + '.';
    if (this.client.dataLakeServiceUri !== null && this.client.dataLakeServiceUri !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.dataLakeServiceUri);
    }
    url2 = url2 + '/webhdfs/v1/';
    var queryParameters = [];
    queryParameters.push('op=GETHOMEDIRECTORY');
    queryParameters.push('api-version=2015-10-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['useragent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix;
    }
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['User-Agent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix;
    }
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var pathValue = responseDoc['Path'];
          if (pathValue !== null && pathValue !== undefined) {
            var pathInstance = pathValue;
            result.path = pathInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Get the list of file status objects specified by the file path.
   * 
   * @param {string} filePath The path to the file to retrieve status for.
   * 
   * @param {string} accountName The name of the account to use
   * 
   * @param {DataLakeStoreFileSystemListParameters} [parametersOrCallback]
   * Query parameters. If null is passed returns all file status items.
   * 
   * @param {number} [parametersOrCallback.top] Gets or sets the number of
   * items to return. Optional.
   * 
   * @param {number} [parametersOrCallback.skip] Gets or sets the number of
   * items to skip over before returning elements. Optional.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  FileSystemOperations.prototype.listFileStatus = function(filePath, accountName, parametersOrCallback, callback) {
    var parameters = parametersOrCallback;
    if (_.isFunction(parameters)) {
      callback = parameters;
      parameters = null;
    }
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (filePath === null || filePath === undefined) {
      return callback(new Error('filePath cannot be null.'));
    }
    if (accountName === null || accountName === undefined) {
      return callback(new Error('accountName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + 'https://';
    url2 = url2 + encodeURIComponent(accountName);
    url2 = url2 + '.';
    if (this.client.dataLakeServiceUri !== null && this.client.dataLakeServiceUri !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.dataLakeServiceUri);
    }
    url2 = url2 + '/webhdfs/v1/';
    url2 = url2 + encodeURIComponent(filePath);
    var queryParameters = [];
    queryParameters.push('op=LISTSTATUS');
    if (parameters !== null && parameters !== undefined && parameters.top !== null && parameters.top !== undefined) {
      queryParameters.push('$top=' + encodeURIComponent(parameters.top.toString()));
    }
    if (parameters !== null && parameters !== undefined && parameters.skip !== null && parameters.skip !== undefined) {
      queryParameters.push('$skip=' + encodeURIComponent(parameters.skip.toString()));
    }
    queryParameters.push('api-version=2015-10-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['useragent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix;
    }
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['User-Agent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix;
    }
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var fileStatusesValue = responseDoc['FileStatuses'];
          if (fileStatusesValue !== null && fileStatusesValue !== undefined) {
            var fileStatusesInstance = { fileStatus: [] };
            result.fileStatuses = fileStatusesInstance;
            
            var fileStatusArray = fileStatusesValue['FileStatus'];
            if (fileStatusArray !== null && fileStatusArray !== undefined) {
              for (var loweredIndex1 = 0; loweredIndex1 < fileStatusArray.length; loweredIndex1 = loweredIndex1 + 1) {
                var fileStatusValue = fileStatusArray[loweredIndex1];
                var fileStatusInstance = {};
                fileStatusesInstance.fileStatus.push(fileStatusInstance);
                
                var accessTimeValue = fileStatusValue['accessTime'];
                if (accessTimeValue !== null && accessTimeValue !== undefined) {
                  var accessTimeInstance = accessTimeValue;
                  fileStatusInstance.accessTime = accessTimeInstance;
                }
                
                var blockSizeValue = fileStatusValue['blockSize'];
                if (blockSizeValue !== null && blockSizeValue !== undefined) {
                  var blockSizeInstance = blockSizeValue;
                  fileStatusInstance.blockSize = blockSizeInstance;
                }
                
                var childrenNumValue = fileStatusValue['childrenNum'];
                if (childrenNumValue !== null && childrenNumValue !== undefined) {
                  var childrenNumInstance = childrenNumValue;
                  fileStatusInstance.childrenNum = childrenNumInstance;
                }
                
                var fileIdValue = fileStatusValue['fileId'];
                if (fileIdValue !== null && fileIdValue !== undefined) {
                  var fileIdInstance = fileIdValue;
                  fileStatusInstance.fileId = fileIdInstance;
                }
                
                var groupValue = fileStatusValue['group'];
                if (groupValue !== null && groupValue !== undefined) {
                  var groupInstance = groupValue;
                  fileStatusInstance.group = groupInstance;
                }
                
                var lengthValue = fileStatusValue['length'];
                if (lengthValue !== null && lengthValue !== undefined) {
                  var lengthInstance = lengthValue;
                  fileStatusInstance.length = lengthInstance;
                }
                
                var modificationTimeValue = fileStatusValue['modificationTime'];
                if (modificationTimeValue !== null && modificationTimeValue !== undefined) {
                  var modificationTimeInstance = modificationTimeValue;
                  fileStatusInstance.modificationTime = modificationTimeInstance;
                }
                
                var ownerValue = fileStatusValue['owner'];
                if (ownerValue !== null && ownerValue !== undefined) {
                  var ownerInstance = ownerValue;
                  fileStatusInstance.owner = ownerInstance;
                }
                
                var pathSuffixValue = fileStatusValue['pathSuffix'];
                if (pathSuffixValue !== null && pathSuffixValue !== undefined) {
                  var pathSuffixInstance = pathSuffixValue;
                  fileStatusInstance.pathSuffix = pathSuffixInstance;
                }
                
                var permissionValue = fileStatusValue['permission'];
                if (permissionValue !== null && permissionValue !== undefined) {
                  var permissionInstance = permissionValue;
                  fileStatusInstance.permission = permissionInstance;
                }
                
                var replicationValue = fileStatusValue['replication'];
                if (replicationValue !== null && replicationValue !== undefined) {
                  var replicationInstance = replicationValue;
                  fileStatusInstance.replication = replicationInstance;
                }
                
                var typeValue = fileStatusValue['type'];
                if (typeValue !== null && typeValue !== undefined) {
                  var typeInstance = typeValue;
                  fileStatusInstance.type = typeInstance;
                }
              }
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Creates a directory.
   * 
   * @param {string} path The path to the directory to create.
   * 
   * @param {string} accountName The name of the account to use
   * 
   * @param {string} [permission] The optional permissions to set on the
   * directories
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  FileSystemOperations.prototype.mkdirs = function(path, accountName, permission, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (path === null || path === undefined) {
      return callback(new Error('path cannot be null.'));
    }
    if (accountName === null || accountName === undefined) {
      return callback(new Error('accountName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + 'https://';
    url2 = url2 + encodeURIComponent(accountName);
    url2 = url2 + '.';
    if (this.client.dataLakeServiceUri !== null && this.client.dataLakeServiceUri !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.dataLakeServiceUri);
    }
    url2 = url2 + '/webhdfs/v1/';
    url2 = url2 + encodeURIComponent(path);
    var queryParameters = [];
    queryParameters.push('op=MKDIRS');
    if (permission !== null && permission !== undefined) {
      queryParameters.push('permission=' + encodeURIComponent(permission));
    }
    queryParameters.push('api-version=2015-10-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['useragent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix;
    }
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['User-Agent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix;
    }
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var booleanValue = responseDoc['boolean'];
          if (booleanValue !== null && booleanValue !== undefined) {
            var booleanInstance = booleanValue;
            result.operationResult = booleanInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Modifies existing ACL entries on a file or folder.
   * 
   * @param {string} filePath The path to the directory or file to modify ACLs
   * on.
   * 
   * @param {string} accountName The name of the account to use
   * 
   * @param {string} aclSpec The ACL spec included in ACL modification
   * operations in the format '[default:]user|group|other::r|-w|-x|-'
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  FileSystemOperations.prototype.modifyAclEntries = function(filePath, accountName, aclSpec, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (filePath === null || filePath === undefined) {
      return callback(new Error('filePath cannot be null.'));
    }
    if (accountName === null || accountName === undefined) {
      return callback(new Error('accountName cannot be null.'));
    }
    if (aclSpec === null || aclSpec === undefined) {
      return callback(new Error('aclSpec cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + 'https://';
    url2 = url2 + encodeURIComponent(accountName);
    url2 = url2 + '.';
    if (this.client.dataLakeServiceUri !== null && this.client.dataLakeServiceUri !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.dataLakeServiceUri);
    }
    url2 = url2 + '/webhdfs/v1/';
    url2 = url2 + encodeURIComponent(filePath);
    var queryParameters = [];
    queryParameters.push('op=MODIFYACLENTRIES');
    queryParameters.push('aclspec=' + encodeURIComponent(aclSpec));
    queryParameters.push('api-version=2015-10-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['useragent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix;
    }
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['User-Agent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix;
    }
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Concatenates the list of files into the target file. This API is NOT
   * webhdfs compliant, however supports a much larger list of files in the
   * concatenate list.
   * 
   * @param {string} destinationPath The path to the destination file resulting
   * from the concatenation.
   * 
   * @param {string} accountName The name of the account to use
   * 
   * @param {Stream} streamContents A list of comma seperated absolute
   * FileSystem paths without scheme and authority. In the format:
   * 'sources=<comma separated list>'
   * 
   * @param {boolean} [deleteSourceDirectory] Indicates two things to the
   * system which allow for optimizations and increased concatenate
   * performance. First, that all the streams being concatenated are in the
   * same source directory. Second, that the source directory ONLY has streams
   * in it that are being concatenated into the destination stream. Note that
   * only the first requirement is strictly enforced (concatenate will ignore
   * the flag and only delete the source streams, not the folder). If the
   * first option is met, ALL data that was not part of the set of streams
   * being concatenated WILL BE LOST.It is critical to only use this option if
   * you are certain the two requirements are met.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  FileSystemOperations.prototype.msConcat = function(destinationPath, accountName, streamContents, deleteSourceDirectory, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (destinationPath === null || destinationPath === undefined) {
      return callback(new Error('destinationPath cannot be null.'));
    }
    if (accountName === null || accountName === undefined) {
      return callback(new Error('accountName cannot be null.'));
    }
    if (streamContents === null || streamContents === undefined) {
      return callback(new Error('streamContents cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + 'https://';
    url2 = url2 + encodeURIComponent(accountName);
    url2 = url2 + '.';
    if (this.client.dataLakeServiceUri !== null && this.client.dataLakeServiceUri !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.dataLakeServiceUri);
    }
    url2 = url2 + '/webhdfs/v1/';
    url2 = url2 + encodeURIComponent(destinationPath);
    var queryParameters = [];
    queryParameters.push('op=MSCONCAT');
    if (deleteSourceDirectory !== null && deleteSourceDirectory !== undefined) {
      queryParameters.push('deletesourcedirectory=' + encodeURIComponent(deleteSourceDirectory.toString()));
    }
    queryParameters.push('api-version=2015-10-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/octet-stream';
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['useragent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix;
    }
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['User-Agent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix;
    }
    
    // Serialize Request
    var requestContent = streamContents;
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Gets the data associated with the file handle requested.
   * 
   * @param {string} fileOpenRequestLink The link to the file to open including
   * all required parameters.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  FileSystemOperations.prototype.open = function(fileOpenRequestLink, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (fileOpenRequestLink === null || fileOpenRequestLink === undefined) {
      return callback(new Error('fileOpenRequestLink cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + fileOpenRequestLink;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Transfer-Encoding'] = 'chunked';
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['useragent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix;
    }
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['User-Agent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix;
    }
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        result.fileContents = responseContent;
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Removes the existing ACL on a file or folder.
   * 
   * @param {string} filePath The path to the directory or file to remove ACL
   * on.
   * 
   * @param {string} accountName The name of the account to use
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  FileSystemOperations.prototype.removeAcl = function(filePath, accountName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (filePath === null || filePath === undefined) {
      return callback(new Error('filePath cannot be null.'));
    }
    if (accountName === null || accountName === undefined) {
      return callback(new Error('accountName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + 'https://';
    url2 = url2 + encodeURIComponent(accountName);
    url2 = url2 + '.';
    if (this.client.dataLakeServiceUri !== null && this.client.dataLakeServiceUri !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.dataLakeServiceUri);
    }
    url2 = url2 + '/webhdfs/v1/';
    url2 = url2 + encodeURIComponent(filePath);
    var queryParameters = [];
    queryParameters.push('op=REMOVEACL');
    queryParameters.push('api-version=2015-10-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['useragent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix;
    }
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['User-Agent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix;
    }
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Removes existing ACL entries on a file or folder.
   * 
   * @param {string} filePath The path to the directory or file to remove ACLs
   * on.
   * 
   * @param {string} accountName The name of the account to use
   * 
   * @param {string} aclSpec The ACL spec included in ACL removal operations in
   * the format '[default:]user|group|other'
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  FileSystemOperations.prototype.removeAclEntries = function(filePath, accountName, aclSpec, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (filePath === null || filePath === undefined) {
      return callback(new Error('filePath cannot be null.'));
    }
    if (accountName === null || accountName === undefined) {
      return callback(new Error('accountName cannot be null.'));
    }
    if (aclSpec === null || aclSpec === undefined) {
      return callback(new Error('aclSpec cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + 'https://';
    url2 = url2 + encodeURIComponent(accountName);
    url2 = url2 + '.';
    if (this.client.dataLakeServiceUri !== null && this.client.dataLakeServiceUri !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.dataLakeServiceUri);
    }
    url2 = url2 + '/webhdfs/v1/';
    url2 = url2 + encodeURIComponent(filePath);
    var queryParameters = [];
    queryParameters.push('op=REMOVEACLENTRIES');
    queryParameters.push('aclspec=' + encodeURIComponent(aclSpec));
    queryParameters.push('api-version=2015-10-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['useragent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix;
    }
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['User-Agent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix;
    }
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Removes default ACL entries on a file or folder.
   * 
   * @param {string} filePath The path to the directory or file to remove
   * default ACLs on.
   * 
   * @param {string} accountName The name of the account to use
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  FileSystemOperations.prototype.removeDefaultAcl = function(filePath, accountName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (filePath === null || filePath === undefined) {
      return callback(new Error('filePath cannot be null.'));
    }
    if (accountName === null || accountName === undefined) {
      return callback(new Error('accountName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + 'https://';
    url2 = url2 + encodeURIComponent(accountName);
    url2 = url2 + '.';
    if (this.client.dataLakeServiceUri !== null && this.client.dataLakeServiceUri !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.dataLakeServiceUri);
    }
    url2 = url2 + '/webhdfs/v1/';
    url2 = url2 + encodeURIComponent(filePath);
    var queryParameters = [];
    queryParameters.push('op=REMOVEDEFAULTACL');
    queryParameters.push('api-version=2015-10-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['useragent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix;
    }
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['User-Agent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix;
    }
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Rename a directory or file.
   * 
   * @param {string} sourcePath The path to the directory to move/rename.
   * 
   * @param {string} accountName The name of the account to use
   * 
   * @param {string} destinationPath The path to move/rename the file or folder
   * to
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  FileSystemOperations.prototype.rename = function(sourcePath, accountName, destinationPath, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (sourcePath === null || sourcePath === undefined) {
      return callback(new Error('sourcePath cannot be null.'));
    }
    if (accountName === null || accountName === undefined) {
      return callback(new Error('accountName cannot be null.'));
    }
    if (destinationPath === null || destinationPath === undefined) {
      return callback(new Error('destinationPath cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + 'https://';
    url2 = url2 + encodeURIComponent(accountName);
    url2 = url2 + '.';
    if (this.client.dataLakeServiceUri !== null && this.client.dataLakeServiceUri !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.dataLakeServiceUri);
    }
    url2 = url2 + '/webhdfs/v1/';
    url2 = url2 + encodeURIComponent(sourcePath);
    var queryParameters = [];
    queryParameters.push('op=RENAME');
    queryParameters.push('destination=' + encodeURIComponent(destinationPath));
    queryParameters.push('api-version=2015-10-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['useragent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix;
    }
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['User-Agent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix;
    }
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var booleanValue = responseDoc['boolean'];
          if (booleanValue !== null && booleanValue !== undefined) {
            var booleanInstance = booleanValue;
            result.operationResult = booleanInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Sets ACL entries on a file or folder.
   * 
   * @param {string} filePath The path to the directory or file to set ACLs on.
   * 
   * @param {string} accountName The name of the account to use
   * 
   * @param {string} aclSpec The ACL spec included in ACL creation operations
   * in the format '[default:]user|group|other::r|-w|-x|-'
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  FileSystemOperations.prototype.setAcl = function(filePath, accountName, aclSpec, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (filePath === null || filePath === undefined) {
      return callback(new Error('filePath cannot be null.'));
    }
    if (accountName === null || accountName === undefined) {
      return callback(new Error('accountName cannot be null.'));
    }
    if (aclSpec === null || aclSpec === undefined) {
      return callback(new Error('aclSpec cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + 'https://';
    url2 = url2 + encodeURIComponent(accountName);
    url2 = url2 + '.';
    if (this.client.dataLakeServiceUri !== null && this.client.dataLakeServiceUri !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.dataLakeServiceUri);
    }
    url2 = url2 + '/webhdfs/v1/';
    url2 = url2 + encodeURIComponent(filePath);
    var queryParameters = [];
    queryParameters.push('op=SETACL');
    queryParameters.push('aclspec=' + encodeURIComponent(aclSpec));
    queryParameters.push('api-version=2015-10-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['useragent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix;
    }
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['User-Agent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix;
    }
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Sets the owner of a file or folder.
   * 
   * @param {string} sourcePath The path to the directory or file to set the
   * owner on.
   * 
   * @param {string} accountName The name of the account to use
   * 
   * @param {string} [owner] The username who is the owner of a file/directory,
   * if empty remains unchanged.
   * 
   * @param {string} [group] The name of a group, if empty remains unchanged.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  FileSystemOperations.prototype.setOwner = function(sourcePath, accountName, owner, group, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (sourcePath === null || sourcePath === undefined) {
      return callback(new Error('sourcePath cannot be null.'));
    }
    if (accountName === null || accountName === undefined) {
      return callback(new Error('accountName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + 'https://';
    url2 = url2 + encodeURIComponent(accountName);
    url2 = url2 + '.';
    if (this.client.dataLakeServiceUri !== null && this.client.dataLakeServiceUri !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.dataLakeServiceUri);
    }
    url2 = url2 + '/webhdfs/v1/';
    url2 = url2 + encodeURIComponent(sourcePath);
    var queryParameters = [];
    queryParameters.push('op=SETOWNER');
    if (owner !== null && owner !== undefined) {
      queryParameters.push('owner=' + encodeURIComponent(owner));
    }
    if (group !== null && group !== undefined) {
      queryParameters.push('group=' + encodeURIComponent(group));
    }
    queryParameters.push('api-version=2015-10-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['useragent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix;
    }
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['User-Agent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix;
    }
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Sets the permission of the file or folder.
   * 
   * @param {string} sourcePath The path to the directory or file to set
   * permissions on.
   * 
   * @param {string} accountName The name of the account to use
   * 
   * @param {string} [permission] A string octal representation of the
   * permission (i.e 'rwx')
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  FileSystemOperations.prototype.setPermission = function(sourcePath, accountName, permission, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (sourcePath === null || sourcePath === undefined) {
      return callback(new Error('sourcePath cannot be null.'));
    }
    if (accountName === null || accountName === undefined) {
      return callback(new Error('accountName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + 'https://';
    url2 = url2 + encodeURIComponent(accountName);
    url2 = url2 + '.';
    if (this.client.dataLakeServiceUri !== null && this.client.dataLakeServiceUri !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.dataLakeServiceUri);
    }
    url2 = url2 + '/webhdfs/v1/';
    url2 = url2 + encodeURIComponent(sourcePath);
    var queryParameters = [];
    queryParameters.push('op=SETPERMISSION');
    if (permission !== null && permission !== undefined) {
      queryParameters.push('permission=' + encodeURIComponent(permission));
    }
    queryParameters.push('api-version=2015-10-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['useragent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix;
    }
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['User-Agent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix;
    }
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Sets the value of the replication factor.
   * 
   * @param {string} sourcePath The path to the directory or file to create a
   * replication of.
   * 
   * @param {string} accountName The name of the account to use
   * 
   * @param {Number} [replication] The number of replications of a file.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  FileSystemOperations.prototype.setReplication = function(sourcePath, accountName, replication, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (sourcePath === null || sourcePath === undefined) {
      return callback(new Error('sourcePath cannot be null.'));
    }
    if (accountName === null || accountName === undefined) {
      return callback(new Error('accountName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + 'https://';
    url2 = url2 + encodeURIComponent(accountName);
    url2 = url2 + '.';
    if (this.client.dataLakeServiceUri !== null && this.client.dataLakeServiceUri !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.dataLakeServiceUri);
    }
    url2 = url2 + '/webhdfs/v1/';
    url2 = url2 + encodeURIComponent(sourcePath);
    var queryParameters = [];
    queryParameters.push('op=SETREPLICATION');
    if (replication !== null && replication !== undefined) {
      queryParameters.push('replication=' + encodeURIComponent(replication.toString()));
    }
    queryParameters.push('api-version=2015-10-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['useragent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix;
    }
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['User-Agent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix;
    }
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var booleanValue = responseDoc['boolean'];
          if (booleanValue !== null && booleanValue !== undefined) {
            var booleanInstance = booleanValue;
            result.operationResult = booleanInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Sets the access or modification time on a file or folder.
   * 
   * @param {string} sourcePath The path to the directory or file to set
   * permissions on.
   * 
   * @param {string} accountName The name of the account to use
   * 
   * @param {Number} [modificationTime] The modification time of a
   * file/directory. If -1 remains unchanged
   * 
   * @param {Number} [accessTime] The access time of a file/directory. If -1
   * remains unchanged
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  FileSystemOperations.prototype.setTimes = function(sourcePath, accountName, modificationTime, accessTime, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (sourcePath === null || sourcePath === undefined) {
      return callback(new Error('sourcePath cannot be null.'));
    }
    if (accountName === null || accountName === undefined) {
      return callback(new Error('accountName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + 'https://';
    url2 = url2 + encodeURIComponent(accountName);
    url2 = url2 + '.';
    if (this.client.dataLakeServiceUri !== null && this.client.dataLakeServiceUri !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.dataLakeServiceUri);
    }
    url2 = url2 + '/webhdfs/v1/';
    url2 = url2 + encodeURIComponent(sourcePath);
    var queryParameters = [];
    queryParameters.push('op=SETTIMES');
    if (modificationTime !== null && modificationTime !== undefined) {
      queryParameters.push('modificationtime=' + encodeURIComponent(modificationTime.toString()));
    }
    if (accessTime !== null && accessTime !== undefined) {
      queryParameters.push('accesstime=' + encodeURIComponent(accessTime.toString()));
    }
    queryParameters.push('api-version=2015-10-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['useragent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix;
    }
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['User-Agent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview ' + this.client.userAgentSuffix;
    }
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  return FileSystemOperations;
})();
