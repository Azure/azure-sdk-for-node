/* jshint latedef:false */
/* jshint forin:false */
/* jshint noempty:false */

// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

'use strict';

var util = require('util');
var _ = require('underscore');
var azureCommon = require('azure-common');
var Service = azureCommon.Service;
var WebResource = azureCommon.WebResource;

var AuthorizationClient = ( /** @lends AuthorizationClient */ function() {
  /**
   * @class
   * Initializes a new instance of the AuthorizationClient class.
   * @constructor
   * 
   * @param {SubscriptionCloudCredentials} credentials Gets subscription
   * credentials which uniquely identify Microsoft Azure subscription. The
   * subscription ID forms part of the URI for every service call.
   * 
   * @param {string} [credentials.subscriptionId]
   * 
   * @param {string} [baseUri] Gets the URI used as the base for all cloud
   * service requests.
   * 
   * @param {Array} filters
   */
  function AuthorizationClient(credentials, baseUri, filters) {
    if (credentials === null || credentials === undefined) {
      throw new Error('credentials cannot be null.');
    }
    
    AuthorizationClient['super_'].call(this, credentials, filters);
    
    this.credentials = credentials;
    this.baseUri = baseUri;
    if (this.baseUri === null || this.baseUri === undefined) {
      this.baseUri = 'https://management.azure.com/';
    }
    if (this.apiVersion === null || this.apiVersion === undefined) {
      this.apiVersion = '2015-01-01';
    }
    if (this.longRunningOperationInitialTimeout === null || this.longRunningOperationInitialTimeout === undefined) {
      this.longRunningOperationInitialTimeout = -1;
    }
    if (this.longRunningOperationRetryTimeout === null || this.longRunningOperationRetryTimeout === undefined) {
      this.longRunningOperationRetryTimeout = -1;
    }
    /**
     * Provides an instance of the
     * [ManagementLockOperations](-ManagementLockOperations.html) object.
     * @type {object}
     */
    this.managementLocks = new ManagementLockOperations(this);
  }
  
  util.inherits(AuthorizationClient, Service);
  
  
  return AuthorizationClient;
})();
exports.AuthorizationClient = AuthorizationClient;

var ManagementLockOperations = ( /** @lends ManagementLockOperations */ function() {
  /**
   * @class
   * Operations for managing locks.
   * __NOTE__: An instance of this class is automatically created for an
   * instance of the [AuthorizationClient] {@link
   * AuthorizationClient~AuthorizationClient}.
   * See [managementLocks] {@link
   * AuthorizationClient~AuthorizationClient#managementLocks}.
   * Initializes a new instance of the ManagementLockOperations class.
   * @constructor
   * 
   * @param {AuthorizationClient} client Reference to the service client.
   */
  function ManagementLockOperations(client) {
    this.client = client;
  }
  
  /**
   * Create or update a management lock at the resource group level.
   * 
   * @param {string} resourceGroupName The resource group name.
   * 
   * @param {string} lockName The lock name.
   * 
   * @param {ManagementLockProperties} parameters The management lock
   * parameters.
   * 
   * @param {string} [parameters.level] Gets or sets the lock level of the
   * management lock.
   * 
   * @param {string} [parameters.notes] Gets or sets the notes of the
   * management lock.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ManagementLockOperations.prototype.createOrUpdateAtResourceGroupLevel = function(resourceGroupName, lockName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (lockName === null || lockName === undefined) {
      return callback(new Error('lockName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/Microsoft.Authorization/locks/';
    url2 = url2 + encodeURIComponent(lockName);
    var queryParameters = [];
    queryParameters.push('api-version=2015-01-01');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = null;
    
    var propertiesValue = {};
    requestDoc = propertiesValue;
    
    if (parameters.level !== null && parameters.level !== undefined) {
      propertiesValue['level'] = parameters.level;
    }
    
    if (parameters.notes !== null && parameters.notes !== undefined) {
      propertiesValue['notes'] = parameters.notes;
    }
    
    requestContent = JSON.stringify(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200 && statusCode !== 201) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200 || statusCode === 201) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var managementLockInstance = {};
          result.managementLock = managementLockInstance;
          
          var propertiesValue2 = responseDoc['properties'];
          if (propertiesValue2 !== null && propertiesValue2 !== undefined) {
            var propertiesInstance = {};
            managementLockInstance.properties = propertiesInstance;
            
            var levelValue = propertiesValue2['level'];
            if (levelValue !== null && levelValue !== undefined) {
              var levelInstance = levelValue;
              propertiesInstance.level = levelInstance;
            }
            
            var notesValue = propertiesValue2['notes'];
            if (notesValue !== null && notesValue !== undefined) {
              var notesInstance = notesValue;
              propertiesInstance.notes = notesInstance;
            }
          }
          
          var idValue = responseDoc['id'];
          if (idValue !== null && idValue !== undefined) {
            var idInstance = idValue;
            managementLockInstance.id = idInstance;
          }
          
          var typeValue = responseDoc['type'];
          if (typeValue !== null && typeValue !== undefined) {
            var typeInstance = typeValue;
            managementLockInstance.type = typeInstance;
          }
          
          var nameValue = responseDoc['name'];
          if (nameValue !== null && nameValue !== undefined) {
            var nameInstance = nameValue;
            managementLockInstance.name = nameInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Create or update a management lock at the resource level or any level
   * below resource.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {ResourceIdentity} identity Resource identity.
   * 
   * @param {string} identity.resourceName Gets or sets resource name.
   * 
   * @param {string} identity.resourceProviderNamespace Gets or sets namespace
   * of the resource provider.
   * 
   * @param {string} identity.resourceType Gets or sets resource type.
   * 
   * @param {string} identity.resourceProviderApiVersion Gets or sets API
   * version of the resource provider.
   * 
   * @param {string} [identity.parentResourcePath] Gets or sets parent resource
   * path (optional).
   * 
   * @param {string} lockName The name of lock.
   * 
   * @param {ManagementLockProperties} parameters Create or update management
   * lock parameters.
   * 
   * @param {string} [parameters.level] Gets or sets the lock level of the
   * management lock.
   * 
   * @param {string} [parameters.notes] Gets or sets the notes of the
   * management lock.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ManagementLockOperations.prototype.createOrUpdateAtResourceLevel = function(resourceGroupName, identity, lockName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (resourceGroupName !== null && resourceGroupName !== undefined && resourceGroupName.length > 1000) {
      return callback(new Error('resourceGroupName is outside the valid range.'));
    }
    if (/^[-\w\._]+$/.test(resourceGroupName) === false) {
      return callback(new Error('resourceGroupName is outside the valid range.'));
    }
    if (identity === null || identity === undefined) {
      return callback(new Error('identity cannot be null.'));
    }
    if (identity.resourceName === null || identity.resourceName === undefined) {
      return callback(new Error('identity. cannot be null.'));
    }
    if (identity.resourceProviderApiVersion === null || identity.resourceProviderApiVersion === undefined) {
      return callback(new Error('identity. cannot be null.'));
    }
    if (identity.resourceProviderNamespace === null || identity.resourceProviderNamespace === undefined) {
      return callback(new Error('identity. cannot be null.'));
    }
    if (identity.resourceType === null || identity.resourceType === undefined) {
      return callback(new Error('identity. cannot be null.'));
    }
    if (lockName === null || lockName === undefined) {
      return callback(new Error('lockName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourcegroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + encodeURIComponent(identity.resourceProviderNamespace);
    url2 = url2 + '/';
    if (identity.parentResourcePath !== null && identity.parentResourcePath !== undefined) {
      url2 = url2 + identity.parentResourcePath;
    }
    url2 = url2 + '/';
    url2 = url2 + identity.resourceType;
    url2 = url2 + '/';
    url2 = url2 + encodeURIComponent(identity.resourceName);
    url2 = url2 + '/providers/Microsoft.Authorization/locks/';
    url2 = url2 + encodeURIComponent(lockName);
    var queryParameters = [];
    queryParameters.push('api-version=2015-01-01');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = null;
    
    var propertiesValue = {};
    requestDoc = propertiesValue;
    
    if (parameters.level !== null && parameters.level !== undefined) {
      propertiesValue['level'] = parameters.level;
    }
    
    if (parameters.notes !== null && parameters.notes !== undefined) {
      propertiesValue['notes'] = parameters.notes;
    }
    
    requestContent = JSON.stringify(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200 && statusCode !== 201) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200 || statusCode === 201) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var managementLockInstance = {};
          result.managementLock = managementLockInstance;
          
          var propertiesValue2 = responseDoc['properties'];
          if (propertiesValue2 !== null && propertiesValue2 !== undefined) {
            var propertiesInstance = {};
            managementLockInstance.properties = propertiesInstance;
            
            var levelValue = propertiesValue2['level'];
            if (levelValue !== null && levelValue !== undefined) {
              var levelInstance = levelValue;
              propertiesInstance.level = levelInstance;
            }
            
            var notesValue = propertiesValue2['notes'];
            if (notesValue !== null && notesValue !== undefined) {
              var notesInstance = notesValue;
              propertiesInstance.notes = notesInstance;
            }
          }
          
          var idValue = responseDoc['id'];
          if (idValue !== null && idValue !== undefined) {
            var idInstance = idValue;
            managementLockInstance.id = idInstance;
          }
          
          var typeValue = responseDoc['type'];
          if (typeValue !== null && typeValue !== undefined) {
            var typeInstance = typeValue;
            managementLockInstance.type = typeInstance;
          }
          
          var nameValue = responseDoc['name'];
          if (nameValue !== null && nameValue !== undefined) {
            var nameInstance = nameValue;
            managementLockInstance.name = nameInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Create or update a management lock at the subscription level.
   * 
   * @param {string} lockName The name of lock.
   * 
   * @param {ManagementLockProperties} parameters The management lock
   * parameters.
   * 
   * @param {string} [parameters.level] Gets or sets the lock level of the
   * management lock.
   * 
   * @param {string} [parameters.notes] Gets or sets the notes of the
   * management lock.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ManagementLockOperations.prototype.createOrUpdateAtSubscriptionLevel = function(lockName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (lockName === null || lockName === undefined) {
      return callback(new Error('lockName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/providers/Microsoft.Authorization/locks/';
    url2 = url2 + encodeURIComponent(lockName);
    var queryParameters = [];
    queryParameters.push('api-version=2015-01-01');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = null;
    
    var propertiesValue = {};
    requestDoc = propertiesValue;
    
    if (parameters.level !== null && parameters.level !== undefined) {
      propertiesValue['level'] = parameters.level;
    }
    
    if (parameters.notes !== null && parameters.notes !== undefined) {
      propertiesValue['notes'] = parameters.notes;
    }
    
    requestContent = JSON.stringify(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200 && statusCode !== 201) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200 || statusCode === 201) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var managementLockInstance = {};
          result.managementLock = managementLockInstance;
          
          var propertiesValue2 = responseDoc['properties'];
          if (propertiesValue2 !== null && propertiesValue2 !== undefined) {
            var propertiesInstance = {};
            managementLockInstance.properties = propertiesInstance;
            
            var levelValue = propertiesValue2['level'];
            if (levelValue !== null && levelValue !== undefined) {
              var levelInstance = levelValue;
              propertiesInstance.level = levelInstance;
            }
            
            var notesValue = propertiesValue2['notes'];
            if (notesValue !== null && notesValue !== undefined) {
              var notesInstance = notesValue;
              propertiesInstance.notes = notesInstance;
            }
          }
          
          var idValue = responseDoc['id'];
          if (idValue !== null && idValue !== undefined) {
            var idInstance = idValue;
            managementLockInstance.id = idInstance;
          }
          
          var typeValue = responseDoc['type'];
          if (typeValue !== null && typeValue !== undefined) {
            var typeInstance = typeValue;
            managementLockInstance.type = typeInstance;
          }
          
          var nameValue = responseDoc['name'];
          if (nameValue !== null && nameValue !== undefined) {
            var nameInstance = nameValue;
            managementLockInstance.name = nameInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Deletes the management lock of a resource group.
   * 
   * @param {string} resourceGroup The resource group names.
   * 
   * @param {string} lockName The name of lock.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ManagementLockOperations.prototype.deleteAtResourceGroupLevel = function(resourceGroup, lockName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroup === null || resourceGroup === undefined) {
      return callback(new Error('resourceGroup cannot be null.'));
    }
    if (lockName === null || lockName === undefined) {
      return callback(new Error('lockName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroup);
    url2 = url2 + '/providers/Microsoft.Authorization/locks/';
    url2 = url2 + encodeURIComponent(lockName);
    var queryParameters = [];
    queryParameters.push('api-version=2015-01-01');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'DELETE';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200 && statusCode !== 202 && statusCode !== 204) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Deletes the management lock of a resource or any level below resource.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {ResourceIdentity} identity Resource identity.
   * 
   * @param {string} identity.resourceName Gets or sets resource name.
   * 
   * @param {string} identity.resourceProviderNamespace Gets or sets namespace
   * of the resource provider.
   * 
   * @param {string} identity.resourceType Gets or sets resource type.
   * 
   * @param {string} identity.resourceProviderApiVersion Gets or sets API
   * version of the resource provider.
   * 
   * @param {string} [identity.parentResourcePath] Gets or sets parent resource
   * path (optional).
   * 
   * @param {string} lockName The name of lock.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ManagementLockOperations.prototype.deleteAtResourceLevel = function(resourceGroupName, identity, lockName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (identity === null || identity === undefined) {
      return callback(new Error('identity cannot be null.'));
    }
    if (identity.resourceName === null || identity.resourceName === undefined) {
      return callback(new Error('identity. cannot be null.'));
    }
    if (identity.resourceProviderApiVersion === null || identity.resourceProviderApiVersion === undefined) {
      return callback(new Error('identity. cannot be null.'));
    }
    if (identity.resourceProviderNamespace === null || identity.resourceProviderNamespace === undefined) {
      return callback(new Error('identity. cannot be null.'));
    }
    if (identity.resourceType === null || identity.resourceType === undefined) {
      return callback(new Error('identity. cannot be null.'));
    }
    if (lockName === null || lockName === undefined) {
      return callback(new Error('lockName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourcegroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + encodeURIComponent(identity.resourceProviderNamespace);
    url2 = url2 + '/';
    if (identity.parentResourcePath !== null && identity.parentResourcePath !== undefined) {
      url2 = url2 + identity.parentResourcePath;
    }
    url2 = url2 + '/';
    url2 = url2 + identity.resourceType;
    url2 = url2 + '/';
    url2 = url2 + encodeURIComponent(identity.resourceName);
    url2 = url2 + '/providers/Microsoft.Authorization/locks/';
    url2 = url2 + encodeURIComponent(lockName);
    var queryParameters = [];
    queryParameters.push('api-version=2015-01-01');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'DELETE';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200 && statusCode !== 202 && statusCode !== 204) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Deletes the management lock of a subscription.
   * 
   * @param {string} lockName The name of lock.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ManagementLockOperations.prototype.deleteAtSubscriptionLevel = function(lockName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (lockName === null || lockName === undefined) {
      return callback(new Error('lockName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/providers/Microsoft.Authorization/locks/';
    url2 = url2 + encodeURIComponent(lockName);
    var queryParameters = [];
    queryParameters.push('api-version=2015-01-01');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'DELETE';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200 && statusCode !== 202 && statusCode !== 204) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Gets the management lock of a scope.
   * 
   * @param {string} lockName Name of the management lock.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ManagementLockOperations.prototype.get = function(lockName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (lockName === null || lockName === undefined) {
      return callback(new Error('lockName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/providers/Microsoft.Authorization/locks/';
    url2 = url2 + encodeURIComponent(lockName);
    var queryParameters = [];
    queryParameters.push('api-version=2015-01-01');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200 && statusCode !== 204) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200 || statusCode === 204) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var managementLockInstance = {};
          result.managementLock = managementLockInstance;
          
          var propertiesValue = responseDoc['properties'];
          if (propertiesValue !== null && propertiesValue !== undefined) {
            var propertiesInstance = {};
            managementLockInstance.properties = propertiesInstance;
            
            var levelValue = propertiesValue['level'];
            if (levelValue !== null && levelValue !== undefined) {
              var levelInstance = levelValue;
              propertiesInstance.level = levelInstance;
            }
            
            var notesValue = propertiesValue['notes'];
            if (notesValue !== null && notesValue !== undefined) {
              var notesInstance = notesValue;
              propertiesInstance.notes = notesInstance;
            }
          }
          
          var idValue = responseDoc['id'];
          if (idValue !== null && idValue !== undefined) {
            var idInstance = idValue;
            managementLockInstance.id = idInstance;
          }
          
          var typeValue = responseDoc['type'];
          if (typeValue !== null && typeValue !== undefined) {
            var typeInstance = typeValue;
            managementLockInstance.type = typeInstance;
          }
          
          var nameValue = responseDoc['name'];
          if (nameValue !== null && nameValue !== undefined) {
            var nameInstance = nameValue;
            managementLockInstance.name = nameInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Gets all the management locks of a resource group.
   * 
   * @param {string} resourceGroupName Resource group name.
   * 
   * @param {ManagementLockGetQueryParameter} [parametersOrCallback] Query
   * parameters. If empty is passed returns all locks at, above or below the
   * resource group.
   * 
   * @param {string} [parametersOrCallback.atScope] Get or sets the atScope
   * parameter. If empty is passed returns all locks at, above or below the
   * scope. Otherwise, returns locks at or above the scope.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ManagementLockOperations.prototype.listAtResourceGroupLevel = function(resourceGroupName, parametersOrCallback, callback) {
    var parameters = parametersOrCallback;
    if (_.isFunction(parameters)) {
      callback = parameters;
      parameters = null;
    }
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/Microsoft.Authorization/locks';
    var queryParameters = [];
    queryParameters.push('api-version=2015-01-01');
    var odataFilter = [];
    if (parameters !== null && parameters !== undefined && parameters.atScope !== null && parameters.atScope !== undefined) {
      odataFilter.push(encodeURIComponent(parameters.atScope));
    }
    if (odataFilter.length > 0) {
      queryParameters.push('$filter=' + odataFilter.join(null));
    }
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = { lock: [] };
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var valueArray = responseDoc['value'];
          if (valueArray !== null && valueArray !== undefined) {
            for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var valueValue = valueArray[loweredIndex1];
              var managementLockObjectInstance = {};
              result.lock.push(managementLockObjectInstance);
              
              var propertiesValue = valueValue['properties'];
              if (propertiesValue !== null && propertiesValue !== undefined) {
                var propertiesInstance = {};
                managementLockObjectInstance.properties = propertiesInstance;
                
                var levelValue = propertiesValue['level'];
                if (levelValue !== null && levelValue !== undefined) {
                  var levelInstance = levelValue;
                  propertiesInstance.level = levelInstance;
                }
                
                var notesValue = propertiesValue['notes'];
                if (notesValue !== null && notesValue !== undefined) {
                  var notesInstance = notesValue;
                  propertiesInstance.notes = notesInstance;
                }
              }
              
              var idValue = valueValue['id'];
              if (idValue !== null && idValue !== undefined) {
                var idInstance = idValue;
                managementLockObjectInstance.id = idInstance;
              }
              
              var typeValue = valueValue['type'];
              if (typeValue !== null && typeValue !== undefined) {
                var typeInstance = typeValue;
                managementLockObjectInstance.type = typeInstance;
              }
              
              var nameValue = valueValue['name'];
              if (nameValue !== null && nameValue !== undefined) {
                var nameInstance = nameValue;
                managementLockObjectInstance.name = nameInstance;
              }
            }
          }
          
          var nextLinkValue = responseDoc['nextLink'];
          if (nextLinkValue !== null && nextLinkValue !== undefined) {
            var nextLinkInstance = nextLinkValue;
            result.nextLink = nextLinkInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Gets all the management locks of a resource or any level below resource.
   * 
   * @param {string} resourceGroupName The name of the resource group. The name
   * is case insensitive.
   * 
   * @param {ResourceIdentity} identity Resource identity.
   * 
   * @param {string} identity.resourceName Gets or sets resource name.
   * 
   * @param {string} identity.resourceProviderNamespace Gets or sets namespace
   * of the resource provider.
   * 
   * @param {string} identity.resourceType Gets or sets resource type.
   * 
   * @param {string} identity.resourceProviderApiVersion Gets or sets API
   * version of the resource provider.
   * 
   * @param {string} [identity.parentResourcePath] Gets or sets parent resource
   * path (optional).
   * 
   * @param {ManagementLockGetQueryParameter} [parametersOrCallback] Query
   * parameters. If empty is passed returns all locks at or below the
   * resource.If atScope() is passed returns all locks at the resource level.
   * 
   * @param {string} [parametersOrCallback.atScope] Get or sets the atScope
   * parameter. If empty is passed returns all locks at, above or below the
   * scope. Otherwise, returns locks at or above the scope.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ManagementLockOperations.prototype.listAtResourceLevel = function(resourceGroupName, identity, parametersOrCallback, callback) {
    var parameters = parametersOrCallback;
    if (_.isFunction(parameters)) {
      callback = parameters;
      parameters = null;
    }
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (resourceGroupName !== null && resourceGroupName !== undefined && resourceGroupName.length > 1000) {
      return callback(new Error('resourceGroupName is outside the valid range.'));
    }
    if (/^[-\w\._]+$/.test(resourceGroupName) === false) {
      return callback(new Error('resourceGroupName is outside the valid range.'));
    }
    if (identity === null || identity === undefined) {
      return callback(new Error('identity cannot be null.'));
    }
    if (identity.resourceName === null || identity.resourceName === undefined) {
      return callback(new Error('identity. cannot be null.'));
    }
    if (identity.resourceProviderApiVersion === null || identity.resourceProviderApiVersion === undefined) {
      return callback(new Error('identity. cannot be null.'));
    }
    if (identity.resourceProviderNamespace === null || identity.resourceProviderNamespace === undefined) {
      return callback(new Error('identity. cannot be null.'));
    }
    if (identity.resourceType === null || identity.resourceType === undefined) {
      return callback(new Error('identity. cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourcegroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + encodeURIComponent(identity.resourceProviderNamespace);
    url2 = url2 + '/';
    if (identity.parentResourcePath !== null && identity.parentResourcePath !== undefined) {
      url2 = url2 + identity.parentResourcePath;
    }
    url2 = url2 + '/';
    url2 = url2 + identity.resourceType;
    url2 = url2 + '/';
    url2 = url2 + encodeURIComponent(identity.resourceName);
    url2 = url2 + '/providers/Microsoft.Authorization/locks';
    var queryParameters = [];
    queryParameters.push('api-version=2015-01-01');
    var odataFilter = [];
    if (parameters !== null && parameters !== undefined && parameters.atScope !== null && parameters.atScope !== undefined) {
      odataFilter.push(encodeURIComponent(parameters.atScope));
    }
    if (odataFilter.length > 0) {
      queryParameters.push('$filter=' + odataFilter.join(null));
    }
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = { lock: [] };
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var valueArray = responseDoc['value'];
          if (valueArray !== null && valueArray !== undefined) {
            for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var valueValue = valueArray[loweredIndex1];
              var managementLockObjectInstance = {};
              result.lock.push(managementLockObjectInstance);
              
              var propertiesValue = valueValue['properties'];
              if (propertiesValue !== null && propertiesValue !== undefined) {
                var propertiesInstance = {};
                managementLockObjectInstance.properties = propertiesInstance;
                
                var levelValue = propertiesValue['level'];
                if (levelValue !== null && levelValue !== undefined) {
                  var levelInstance = levelValue;
                  propertiesInstance.level = levelInstance;
                }
                
                var notesValue = propertiesValue['notes'];
                if (notesValue !== null && notesValue !== undefined) {
                  var notesInstance = notesValue;
                  propertiesInstance.notes = notesInstance;
                }
              }
              
              var idValue = valueValue['id'];
              if (idValue !== null && idValue !== undefined) {
                var idInstance = idValue;
                managementLockObjectInstance.id = idInstance;
              }
              
              var typeValue = valueValue['type'];
              if (typeValue !== null && typeValue !== undefined) {
                var typeInstance = typeValue;
                managementLockObjectInstance.type = typeInstance;
              }
              
              var nameValue = valueValue['name'];
              if (nameValue !== null && nameValue !== undefined) {
                var nameInstance = nameValue;
                managementLockObjectInstance.name = nameInstance;
              }
            }
          }
          
          var nextLinkValue = responseDoc['nextLink'];
          if (nextLinkValue !== null && nextLinkValue !== undefined) {
            var nextLinkInstance = nextLinkValue;
            result.nextLink = nextLinkInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Gets all the management locks of a subscription.
   * 
   * @param {ManagementLockGetQueryParameter} [parametersOrCallback] Query
   * parameters. If empty is passed returns all locks at, above or below the
   * subscription.
   * 
   * @param {string} [parametersOrCallback.atScope] Get or sets the atScope
   * parameter. If empty is passed returns all locks at, above or below the
   * scope. Otherwise, returns locks at or above the scope.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ManagementLockOperations.prototype.listAtSubscriptionLevel = function(parametersOrCallback, callback) {
    var parameters = parametersOrCallback;
    if (_.isFunction(parameters)) {
      callback = parameters;
      parameters = null;
    }
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/providers/Microsoft.Authorization/locks';
    var queryParameters = [];
    queryParameters.push('api-version=2015-01-01');
    var odataFilter = [];
    if (parameters !== null && parameters !== undefined && parameters.atScope !== null && parameters.atScope !== undefined) {
      odataFilter.push(encodeURIComponent(parameters.atScope));
    }
    if (odataFilter.length > 0) {
      queryParameters.push('$filter=' + odataFilter.join(null));
    }
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = { lock: [] };
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var valueArray = responseDoc['value'];
          if (valueArray !== null && valueArray !== undefined) {
            for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var valueValue = valueArray[loweredIndex1];
              var managementLockObjectInstance = {};
              result.lock.push(managementLockObjectInstance);
              
              var propertiesValue = valueValue['properties'];
              if (propertiesValue !== null && propertiesValue !== undefined) {
                var propertiesInstance = {};
                managementLockObjectInstance.properties = propertiesInstance;
                
                var levelValue = propertiesValue['level'];
                if (levelValue !== null && levelValue !== undefined) {
                  var levelInstance = levelValue;
                  propertiesInstance.level = levelInstance;
                }
                
                var notesValue = propertiesValue['notes'];
                if (notesValue !== null && notesValue !== undefined) {
                  var notesInstance = notesValue;
                  propertiesInstance.notes = notesInstance;
                }
              }
              
              var idValue = valueValue['id'];
              if (idValue !== null && idValue !== undefined) {
                var idInstance = idValue;
                managementLockObjectInstance.id = idInstance;
              }
              
              var typeValue = valueValue['type'];
              if (typeValue !== null && typeValue !== undefined) {
                var typeInstance = typeValue;
                managementLockObjectInstance.type = typeInstance;
              }
              
              var nameValue = valueValue['name'];
              if (nameValue !== null && nameValue !== undefined) {
                var nameInstance = nameValue;
                managementLockObjectInstance.name = nameInstance;
              }
            }
          }
          
          var nextLinkValue = responseDoc['nextLink'];
          if (nextLinkValue !== null && nextLinkValue !== undefined) {
            var nextLinkInstance = nextLinkValue;
            result.nextLink = nextLinkInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Get a list of management locks at resource level or below.
   * 
   * @param {string} nextLink NextLink from the previous successful call to
   * List operation.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ManagementLockOperations.prototype.listNext = function(nextLink, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (nextLink === null || nextLink === undefined) {
      return callback(new Error('nextLink cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + nextLink;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = { lock: [] };
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var valueArray = responseDoc['value'];
          if (valueArray !== null && valueArray !== undefined) {
            for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var valueValue = valueArray[loweredIndex1];
              var managementLockObjectInstance = {};
              result.lock.push(managementLockObjectInstance);
              
              var propertiesValue = valueValue['properties'];
              if (propertiesValue !== null && propertiesValue !== undefined) {
                var propertiesInstance = {};
                managementLockObjectInstance.properties = propertiesInstance;
                
                var levelValue = propertiesValue['level'];
                if (levelValue !== null && levelValue !== undefined) {
                  var levelInstance = levelValue;
                  propertiesInstance.level = levelInstance;
                }
                
                var notesValue = propertiesValue['notes'];
                if (notesValue !== null && notesValue !== undefined) {
                  var notesInstance = notesValue;
                  propertiesInstance.notes = notesInstance;
                }
              }
              
              var idValue = valueValue['id'];
              if (idValue !== null && idValue !== undefined) {
                var idInstance = idValue;
                managementLockObjectInstance.id = idInstance;
              }
              
              var typeValue = valueValue['type'];
              if (typeValue !== null && typeValue !== undefined) {
                var typeInstance = typeValue;
                managementLockObjectInstance.type = typeInstance;
              }
              
              var nameValue = valueValue['name'];
              if (nameValue !== null && nameValue !== undefined) {
                var nameInstance = nameValue;
                managementLockObjectInstance.name = nameInstance;
              }
            }
          }
          
          var nextLinkValue = responseDoc['nextLink'];
          if (nextLinkValue !== null && nextLinkValue !== undefined) {
            var nextLinkInstance = nextLinkValue;
            result.nextLink = nextLinkInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  return ManagementLockOperations;
})();
