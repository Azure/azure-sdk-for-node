/* jshint latedef:false */
/* jshint forin:false */
/* jshint noempty:false */

// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

'use strict';

var util = require('util');
var azureCommon = require('azure-common');
var Service = azureCommon.Service;
var WebResource = azureCommon.WebResource;

var NetworkResourceProviderClient = ( /** @lends NetworkResourceProviderClient */ function() {
  /**
   * @class
   * The Windows Azure Network management API provides a RESTful set of web
   * services that interact with Windows Azure Networks service to manage your
   * network resrources. The API has entities that capture the relationship
   * between an end user and the Windows Azure Networks service.
   * Initializes a new instance of the NetworkResourceProviderClient class.
   * @constructor
   * 
   * @param {SubscriptionCloudCredentials} credentials Gets subscription
   * credentials which uniquely identify Microsoft Azure subscription. The
   * subscription ID forms part of the URI for every service call.
   * 
   * @param {string} [credentials.subscriptionId]
   * 
   * @param {string} [baseUri] Gets the URI used as the base for all cloud
   * service requests.
   * 
   * @param {Array} filters
   */
  function NetworkResourceProviderClient(credentials, baseUri, filters) {
    if (credentials === null || credentials === undefined) {
      throw new Error('credentials cannot be null.');
    }
    
    NetworkResourceProviderClient['super_'].call(this, credentials, filters);
    
    this.credentials = credentials;
    this.baseUri = baseUri;
    if (this.baseUri === null || this.baseUri === undefined) {
      this.baseUri = 'https://management.azure.com/';
    }
    if (this.apiVersion === null || this.apiVersion === undefined) {
      this.apiVersion = '2015-05-01-preview';
    }
    if (this.longRunningOperationInitialTimeout === null || this.longRunningOperationInitialTimeout === undefined) {
      this.longRunningOperationInitialTimeout = -1;
    }
    if (this.longRunningOperationRetryTimeout === null || this.longRunningOperationRetryTimeout === undefined) {
      this.longRunningOperationRetryTimeout = -1;
    }
    /**
     * Provides an instance of the
     * [ApplicationGatewayOperations](-ApplicationGatewayOperations.html)
     * object.
     * @type {object}
     */
    this.applicationGateways = new ApplicationGatewayOperations(this);
    /**
     * Provides an instance of the
     * [ExpressRouteCircuitAuthorizationOperations](-ExpressRouteCircuitAuthorizationOperations.html)
     * object.
     * @type {object}
     */
    this.expressRouteCircuitAuthorizations = new ExpressRouteCircuitAuthorizationOperations(this);
    /**
     * Provides an instance of the
     * [ExpressRouteCircuitOperations](-ExpressRouteCircuitOperations.html)
     * object.
     * @type {object}
     */
    this.expressRouteCircuits = new ExpressRouteCircuitOperations(this);
    /**
     * Provides an instance of the
     * [ExpressRouteCircuitPeeringOperations](-ExpressRouteCircuitPeeringOperations.html)
     * object.
     * @type {object}
     */
    this.expressRouteCircuitPeerings = new ExpressRouteCircuitPeeringOperations(this);
    /**
     * Provides an instance of the
     * [ExpressRouteServiceProviderOperations](-ExpressRouteServiceProviderOperations.html)
     * object.
     * @type {object}
     */
    this.expressRouteServiceProviders = new ExpressRouteServiceProviderOperations(this);
    /**
     * Provides an instance of the
     * [LoadBalancerOperations](-LoadBalancerOperations.html) object.
     * @type {object}
     */
    this.loadBalancers = new LoadBalancerOperations(this);
    /**
     * Provides an instance of the
     * [LocalNetworkGatewayOperations](-LocalNetworkGatewayOperations.html)
     * object.
     * @type {object}
     */
    this.localNetworkGateways = new LocalNetworkGatewayOperations(this);
    /**
     * Provides an instance of the
     * [NetworkInterfaceOperations](-NetworkInterfaceOperations.html) object.
     * @type {object}
     */
    this.networkInterfaces = new NetworkInterfaceOperations(this);
    /**
     * Provides an instance of the
     * [NetworkSecurityGroupOperations](-NetworkSecurityGroupOperations.html)
     * object.
     * @type {object}
     */
    this.networkSecurityGroups = new NetworkSecurityGroupOperations(this);
    /**
     * Provides an instance of the
     * [PublicIpAddressOperations](-PublicIpAddressOperations.html) object.
     * @type {object}
     */
    this.publicIpAddresses = new PublicIpAddressOperations(this);
    /**
     * Provides an instance of the [RouteOperations](-RouteOperations.html)
     * object.
     * @type {object}
     */
    this.routes = new RouteOperations(this);
    /**
     * Provides an instance of the
     * [RouteTableOperations](-RouteTableOperations.html) object.
     * @type {object}
     */
    this.routeTables = new RouteTableOperations(this);
    /**
     * Provides an instance of the
     * [SecurityRuleOperations](-SecurityRuleOperations.html) object.
     * @type {object}
     */
    this.securityRules = new SecurityRuleOperations(this);
    /**
     * Provides an instance of the [SubnetOperations](-SubnetOperations.html)
     * object.
     * @type {object}
     */
    this.subnets = new SubnetOperations(this);
    /**
     * Provides an instance of the [UsageOperations](-UsageOperations.html)
     * object.
     * @type {object}
     */
    this.usages = new UsageOperations(this);
    /**
     * Provides an instance of the
     * [VirtualNetworkGatewayConnectionOperations](-VirtualNetworkGatewayConnectionOperations.html)
     * object.
     * @type {object}
     */
    this.virtualNetworkGatewayConnections = new VirtualNetworkGatewayConnectionOperations(this);
    /**
     * Provides an instance of the
     * [VirtualNetworkGatewayOperations](-VirtualNetworkGatewayOperations.html)
     * object.
     * @type {object}
     */
    this.virtualNetworkGateways = new VirtualNetworkGatewayOperations(this);
    /**
     * Provides an instance of the
     * [VirtualNetworkOperations](-VirtualNetworkOperations.html) object.
     * @type {object}
     */
    this.virtualNetworks = new VirtualNetworkOperations(this);
  }
  
  util.inherits(NetworkResourceProviderClient, Service);
  
  /**
   * Checks whether a domain name in the cloudapp.net zone is available for use.
   * 
   * @param {string} location The location of the domain name
   * 
   * @param {string} domainNameLabel The domain name to be verified. It must
   * conform to the following regular expression:
   * ^[a-z][a-z0-9-]{1,61}[a-z0-9]$.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  NetworkResourceProviderClient.prototype.checkDnsNameAvailability = function(location, domainNameLabel, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (location === null || location === undefined) {
      return callback(new Error('location cannot be null.'));
    }
    if (domainNameLabel === null || domainNameLabel === undefined) {
      return callback(new Error('domainNameLabel cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.credentials.subscriptionId !== null && this.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.credentials.subscriptionId);
    }
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Network';
    url2 = url2 + '/locations/';
    url2 = url2 + encodeURIComponent(location);
    url2 = url2 + '/CheckDnsNameAvailability';
    var queryParameters = [];
    queryParameters.push('domainNameLabel=' + encodeURIComponent(domainNameLabel));
    queryParameters.push('api-version=2015-05-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var availableValue = responseDoc['available'];
          if (availableValue !== null && availableValue !== undefined) {
            var availableInstance = availableValue;
            result.dnsNameAvailability = availableInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The Get Operation Status operation returns the status of the specified
   * operation. After calling an asynchronous operation, you can call Get
   * Operation Status to determine whether the operation has succeeded,
   * failed, or is still in progress.
   * 
   * @param {string} azureAsyncOperation Location value returned by the Begin
   * operation.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  NetworkResourceProviderClient.prototype.getLongRunningOperationStatus = function(azureAsyncOperation, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (azureAsyncOperation === null || azureAsyncOperation === undefined) {
      return callback(new Error('azureAsyncOperation cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + azureAsyncOperation;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2015-05-01-preview';
    
    // Send Request
    return this.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200 && statusCode !== 202) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200 || statusCode === 202) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var statusValue = responseDoc['status'];
          if (statusValue !== null && statusValue !== undefined) {
            var statusInstance = statusValue;
            result.status = statusInstance;
          }
          
          var errorValue = responseDoc['error'];
          if (errorValue !== null && errorValue !== undefined) {
            var errorInstance = { details: [] };
            result.error = errorInstance;
            
            var codeValue = errorValue['code'];
            if (codeValue !== null && codeValue !== undefined) {
              var codeInstance = codeValue;
              errorInstance.code = codeInstance;
            }
            
            var messageValue = errorValue['message'];
            if (messageValue !== null && messageValue !== undefined) {
              var messageInstance = messageValue;
              errorInstance.message = messageInstance;
            }
            
            var targetValue = errorValue['target'];
            if (targetValue !== null && targetValue !== undefined) {
              var targetInstance = targetValue;
              errorInstance.target = targetInstance;
            }
            
            var detailsArray = errorValue['details'];
            if (detailsArray !== null && detailsArray !== undefined) {
              for (var loweredIndex1 = 0; loweredIndex1 < detailsArray.length; loweredIndex1 = loweredIndex1 + 1) {
                var detailsValue = detailsArray[loweredIndex1];
                var errorDetailsInstance = {};
                errorInstance.details.push(errorDetailsInstance);
                
                var codeValue2 = detailsValue['code'];
                if (codeValue2 !== null && codeValue2 !== undefined) {
                  var codeInstance2 = codeValue2;
                  errorDetailsInstance.code = codeInstance2;
                }
                
                var targetValue2 = detailsValue['target'];
                if (targetValue2 !== null && targetValue2 !== undefined) {
                  var targetInstance2 = targetValue2;
                  errorDetailsInstance.target = targetInstance2;
                }
                
                var messageValue2 = detailsValue['message'];
                if (messageValue2 !== null && messageValue2 !== undefined) {
                  var messageInstance2 = messageValue2;
                  errorDetailsInstance.message = messageInstance2;
                }
              }
            }
            
            var innerErrorValue = errorValue['innerError'];
            if (innerErrorValue !== null && innerErrorValue !== undefined) {
              var innerErrorInstance = innerErrorValue;
              errorInstance.innerError = innerErrorInstance;
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  return NetworkResourceProviderClient;
})();
exports.NetworkResourceProviderClient = NetworkResourceProviderClient;

var ApplicationGatewayOperations = ( /** @lends ApplicationGatewayOperations */ function() {
  /**
   * @class
   * The Network Resource Provider API includes operations managing the
   * application gateways for your subscription.
   * __NOTE__: An instance of this class is automatically created for an
   * instance of the [NetworkResourceProviderClient] {@link
   * NetworkResourceProviderClient~NetworkResourceProviderClient}.
   * See [applicationGateways] {@link
   * NetworkResourceProviderClient~NetworkResourceProviderClient#applicationGateways}.
   * Initializes a new instance of the ApplicationGatewayOperations class.
   * @constructor
   * 
   * @param {NetworkResourceProviderClient} client Reference to the service
   * client.
   */
  function ApplicationGatewayOperations(client) {
    this.client = client;
  }
  
  /**
   * The Put ApplicationGateway operation creates/updates a ApplicationGateway
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} applicationGatewayName The name of the ApplicationGateway.
   * 
   * @param {ApplicationGateway} parameters Parameters supplied to the
   * create/delete ApplicationGateway operation
   * 
   * @param {ApplicationGatewaySku} [parameters.sku] Gets or sets sku of
   * application gateway resource
   * 
   * @param {string} [parameters.sku.name] Gets or sets name of application
   * gateway SKU
   * 
   * @param {string} [parameters.sku.tier] Gets or sets tier of application
   * gateway
   * 
   * @param {number} [parameters.sku.capacity] Gets or sets capacity (instance
   * count) of application gateway
   * 
   * @param {string} [parameters.operationalState] Gets operational state of
   * application gateway resource
   * 
   * @param {IEnumerable} [parameters.gatewayIPConfigurations] Gets or sets
   * subnets of application gateway resource
   * 
   * @param {IEnumerable} [parameters.sslCertificates] Gets or sets ssl
   * certificates of application gateway resource
   * 
   * @param {IEnumerable} [parameters.frontendIPConfigurations] Gets or sets
   * frontend IP addresses of application gateway resource
   * 
   * @param {IEnumerable} [parameters.frontendPorts] Gets or sets frontend
   * ports of application gateway resource
   * 
   * @param {IEnumerable} [parameters.backendAddressPools] Gets or sets backend
   * address pool of application gateway resource
   * 
   * @param {IEnumerable} [parameters.backendHttpSettingsCollection] Gets or
   * sets backend http settings of application gateway resource
   * 
   * @param {IEnumerable} [parameters.httpListeners] Gets or sets HTTP
   * listeners of application gateway resource
   * 
   * @param {IEnumerable} [parameters.requestRoutingRules] Gets or sets request
   * routing rules of application gateway resource
   * 
   * @param {string} [parameters.provisioningState] Gets or sets Provisioning
   * state of the ApplicationGateway resource Updating/Deleting/Failed
   * 
   * @param {string} [parameters.resourceGuid] Gets or sets resource guid
   * property of the ApplicationGateway resource
   * 
   * @param {string} [parameters.etag] Gets a unique read-only string that
   * changes whenever the resource is updated
   * 
   * @param {string} [parameters.id] Gets or sets the ID of the resource.
   * 
   * @param {string} [parameters.name] Gets or sets the name of the resource.
   * 
   * @param {string} [parameters.type] Gets or sets the type of the resource.
   * 
   * @param {string} [parameters.location] Gets or sets the location of the
   * resource.
   * 
   * @param {object} [parameters.tags] Gets or sets the tags attached to the
   * resource.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ApplicationGatewayOperations.prototype.beginCreateOrUpdating = function(resourceGroupName, applicationGatewayName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (applicationGatewayName === null || applicationGatewayName === undefined) {
      return callback(new Error('applicationGatewayName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Network';
    url2 = url2 + '/applicationGateways/';
    url2 = url2 + encodeURIComponent(applicationGatewayName);
    var queryParameters = [];
    queryParameters.push('api-version=2015-05-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = null;
    
    var applicationGatewayJsonFormatValue = {};
    requestDoc = applicationGatewayJsonFormatValue;
    
    var propertiesValue = {};
    applicationGatewayJsonFormatValue['properties'] = propertiesValue;
    
    if (parameters.sku !== null && parameters.sku !== undefined) {
      var skuValue = {};
      propertiesValue['sku'] = skuValue;
      
      if (parameters.sku.name !== null && parameters.sku.name !== undefined) {
        skuValue['name'] = parameters.sku.name;
      }
      
      if (parameters.sku.tier !== null && parameters.sku.tier !== undefined) {
        skuValue['tier'] = parameters.sku.tier;
      }
      
      if (parameters.sku.capacity !== null && parameters.sku.capacity !== undefined) {
        skuValue['capacity'] = parameters.sku.capacity;
      }
    }
    
    if (parameters.operationalState !== null && parameters.operationalState !== undefined) {
      propertiesValue['operationalState'] = parameters.operationalState;
    }
    
    if (parameters.gatewayIPConfigurations !== null && parameters.gatewayIPConfigurations !== undefined) {
      var gatewayIPConfigurationsArray = [];
      for (var loweredIndex1 = 0; loweredIndex1 < parameters.gatewayIPConfigurations.length; loweredIndex1 = loweredIndex1 + 1) {
        var gatewayIPConfigurationsItem = parameters.gatewayIPConfigurations[loweredIndex1];
        var applicationGatewayIPConfigurationJsonFormatValue = {};
        gatewayIPConfigurationsArray.push(applicationGatewayIPConfigurationJsonFormatValue);
        
        var propertiesValue2 = {};
        applicationGatewayIPConfigurationJsonFormatValue['properties'] = propertiesValue2;
        
        if (gatewayIPConfigurationsItem.subnet !== null && gatewayIPConfigurationsItem.subnet !== undefined) {
          var subnetValue = {};
          propertiesValue2['subnet'] = subnetValue;
          
          if (gatewayIPConfigurationsItem.subnet.id !== null && gatewayIPConfigurationsItem.subnet.id !== undefined) {
            subnetValue['id'] = gatewayIPConfigurationsItem.subnet.id;
          }
        }
        
        if (gatewayIPConfigurationsItem.provisioningState !== null && gatewayIPConfigurationsItem.provisioningState !== undefined) {
          propertiesValue2['provisioningState'] = gatewayIPConfigurationsItem.provisioningState;
        }
        
        if (gatewayIPConfigurationsItem.name !== null && gatewayIPConfigurationsItem.name !== undefined) {
          applicationGatewayIPConfigurationJsonFormatValue['name'] = gatewayIPConfigurationsItem.name;
        }
        
        if (gatewayIPConfigurationsItem.etag !== null && gatewayIPConfigurationsItem.etag !== undefined) {
          applicationGatewayIPConfigurationJsonFormatValue['etag'] = gatewayIPConfigurationsItem.etag;
        }
        
        if (gatewayIPConfigurationsItem.id !== null && gatewayIPConfigurationsItem.id !== undefined) {
          applicationGatewayIPConfigurationJsonFormatValue['id'] = gatewayIPConfigurationsItem.id;
        }
      }
      propertiesValue['gatewayIPConfigurations'] = gatewayIPConfigurationsArray;
    }
    
    if (parameters.sslCertificates !== null && parameters.sslCertificates !== undefined) {
      var sslCertificatesArray = [];
      for (var loweredIndex2 = 0; loweredIndex2 < parameters.sslCertificates.length; loweredIndex2 = loweredIndex2 + 1) {
        var sslCertificatesItem = parameters.sslCertificates[loweredIndex2];
        var applicationGatewaySslCertificateJsonFormatValue = {};
        sslCertificatesArray.push(applicationGatewaySslCertificateJsonFormatValue);
        
        var propertiesValue3 = {};
        applicationGatewaySslCertificateJsonFormatValue['properties'] = propertiesValue3;
        
        if (sslCertificatesItem.data !== null && sslCertificatesItem.data !== undefined) {
          propertiesValue3['data'] = sslCertificatesItem.data;
        }
        
        if (sslCertificatesItem.password !== null && sslCertificatesItem.password !== undefined) {
          propertiesValue3['password'] = sslCertificatesItem.password;
        }
        
        if (sslCertificatesItem.publicCertData !== null && sslCertificatesItem.publicCertData !== undefined) {
          propertiesValue3['publicCertData'] = sslCertificatesItem.publicCertData;
        }
        
        if (sslCertificatesItem.provisioningState !== null && sslCertificatesItem.provisioningState !== undefined) {
          propertiesValue3['provisioningState'] = sslCertificatesItem.provisioningState;
        }
        
        if (sslCertificatesItem.name !== null && sslCertificatesItem.name !== undefined) {
          applicationGatewaySslCertificateJsonFormatValue['name'] = sslCertificatesItem.name;
        }
        
        if (sslCertificatesItem.etag !== null && sslCertificatesItem.etag !== undefined) {
          applicationGatewaySslCertificateJsonFormatValue['etag'] = sslCertificatesItem.etag;
        }
        
        if (sslCertificatesItem.id !== null && sslCertificatesItem.id !== undefined) {
          applicationGatewaySslCertificateJsonFormatValue['id'] = sslCertificatesItem.id;
        }
      }
      propertiesValue['sslCertificates'] = sslCertificatesArray;
    }
    
    if (parameters.frontendIPConfigurations !== null && parameters.frontendIPConfigurations !== undefined) {
      var frontendIPConfigurationsArray = [];
      for (var loweredIndex3 = 0; loweredIndex3 < parameters.frontendIPConfigurations.length; loweredIndex3 = loweredIndex3 + 1) {
        var frontendIPConfigurationsItem = parameters.frontendIPConfigurations[loweredIndex3];
        var applicationGatewayFrontendIPConfigurationJsonFormatValue = {};
        frontendIPConfigurationsArray.push(applicationGatewayFrontendIPConfigurationJsonFormatValue);
        
        var propertiesValue4 = {};
        applicationGatewayFrontendIPConfigurationJsonFormatValue['properties'] = propertiesValue4;
        
        if (frontendIPConfigurationsItem.privateIPAddress !== null && frontendIPConfigurationsItem.privateIPAddress !== undefined) {
          propertiesValue4['privateIPAddress'] = frontendIPConfigurationsItem.privateIPAddress;
        }
        
        if (frontendIPConfigurationsItem.privateIPAllocationMethod !== null && frontendIPConfigurationsItem.privateIPAllocationMethod !== undefined) {
          propertiesValue4['privateIPAllocationMethod'] = frontendIPConfigurationsItem.privateIPAllocationMethod;
        }
        
        if (frontendIPConfigurationsItem.subnet !== null && frontendIPConfigurationsItem.subnet !== undefined) {
          var subnetValue2 = {};
          propertiesValue4['subnet'] = subnetValue2;
          
          if (frontendIPConfigurationsItem.subnet.id !== null && frontendIPConfigurationsItem.subnet.id !== undefined) {
            subnetValue2['id'] = frontendIPConfigurationsItem.subnet.id;
          }
        }
        
        if (frontendIPConfigurationsItem.publicIPAddress !== null && frontendIPConfigurationsItem.publicIPAddress !== undefined) {
          var publicIPAddressValue = {};
          propertiesValue4['publicIPAddress'] = publicIPAddressValue;
          
          if (frontendIPConfigurationsItem.publicIPAddress.id !== null && frontendIPConfigurationsItem.publicIPAddress.id !== undefined) {
            publicIPAddressValue['id'] = frontendIPConfigurationsItem.publicIPAddress.id;
          }
        }
        
        if (frontendIPConfigurationsItem.provisioningState !== null && frontendIPConfigurationsItem.provisioningState !== undefined) {
          propertiesValue4['provisioningState'] = frontendIPConfigurationsItem.provisioningState;
        }
        
        if (frontendIPConfigurationsItem.name !== null && frontendIPConfigurationsItem.name !== undefined) {
          applicationGatewayFrontendIPConfigurationJsonFormatValue['name'] = frontendIPConfigurationsItem.name;
        }
        
        if (frontendIPConfigurationsItem.etag !== null && frontendIPConfigurationsItem.etag !== undefined) {
          applicationGatewayFrontendIPConfigurationJsonFormatValue['etag'] = frontendIPConfigurationsItem.etag;
        }
        
        if (frontendIPConfigurationsItem.id !== null && frontendIPConfigurationsItem.id !== undefined) {
          applicationGatewayFrontendIPConfigurationJsonFormatValue['id'] = frontendIPConfigurationsItem.id;
        }
      }
      propertiesValue['frontendIPConfigurations'] = frontendIPConfigurationsArray;
    }
    
    if (parameters.frontendPorts !== null && parameters.frontendPorts !== undefined) {
      var frontendPortsArray = [];
      for (var loweredIndex4 = 0; loweredIndex4 < parameters.frontendPorts.length; loweredIndex4 = loweredIndex4 + 1) {
        var frontendPortsItem = parameters.frontendPorts[loweredIndex4];
        var applicationGatewayFrontendPortJsonFormatValue = {};
        frontendPortsArray.push(applicationGatewayFrontendPortJsonFormatValue);
        
        var propertiesValue5 = {};
        applicationGatewayFrontendPortJsonFormatValue['properties'] = propertiesValue5;
        
        if (frontendPortsItem.port !== null && frontendPortsItem.port !== undefined) {
          propertiesValue5['port'] = frontendPortsItem.port;
        }
        
        if (frontendPortsItem.provisioningState !== null && frontendPortsItem.provisioningState !== undefined) {
          propertiesValue5['provisioningState'] = frontendPortsItem.provisioningState;
        }
        
        if (frontendPortsItem.name !== null && frontendPortsItem.name !== undefined) {
          applicationGatewayFrontendPortJsonFormatValue['name'] = frontendPortsItem.name;
        }
        
        if (frontendPortsItem.etag !== null && frontendPortsItem.etag !== undefined) {
          applicationGatewayFrontendPortJsonFormatValue['etag'] = frontendPortsItem.etag;
        }
        
        if (frontendPortsItem.id !== null && frontendPortsItem.id !== undefined) {
          applicationGatewayFrontendPortJsonFormatValue['id'] = frontendPortsItem.id;
        }
      }
      propertiesValue['frontendPorts'] = frontendPortsArray;
    }
    
    if (parameters.backendAddressPools !== null && parameters.backendAddressPools !== undefined) {
      var backendAddressPoolsArray = [];
      for (var loweredIndex5 = 0; loweredIndex5 < parameters.backendAddressPools.length; loweredIndex5 = loweredIndex5 + 1) {
        var backendAddressPoolsItem = parameters.backendAddressPools[loweredIndex5];
        var applicationGatewayBackendAddressPoolJsonFormatValue = {};
        backendAddressPoolsArray.push(applicationGatewayBackendAddressPoolJsonFormatValue);
        
        var propertiesValue6 = {};
        applicationGatewayBackendAddressPoolJsonFormatValue['properties'] = propertiesValue6;
        
        if (backendAddressPoolsItem.backendIPConfigurations !== null && backendAddressPoolsItem.backendIPConfigurations !== undefined) {
          var backendIPConfigurationsArray = [];
          for (var loweredIndex6 = 0; loweredIndex6 < backendAddressPoolsItem.backendIPConfigurations.length; loweredIndex6 = loweredIndex6 + 1) {
            var backendIPConfigurationsItem = backendAddressPoolsItem.backendIPConfigurations[loweredIndex6];
            var resourceIdValue = {};
            backendIPConfigurationsArray.push(resourceIdValue);
            
            if (backendIPConfigurationsItem.id !== null && backendIPConfigurationsItem.id !== undefined) {
              resourceIdValue['id'] = backendIPConfigurationsItem.id;
            }
          }
          propertiesValue6['backendIPConfigurations'] = backendIPConfigurationsArray;
        }
        
        if (backendAddressPoolsItem.backendAddresses !== null && backendAddressPoolsItem.backendAddresses !== undefined) {
          var backendAddressesArray = [];
          for (var loweredIndex7 = 0; loweredIndex7 < backendAddressPoolsItem.backendAddresses.length; loweredIndex7 = loweredIndex7 + 1) {
            var backendAddressesItem = backendAddressPoolsItem.backendAddresses[loweredIndex7];
            var applicationGatewayBackendAddressValue = {};
            backendAddressesArray.push(applicationGatewayBackendAddressValue);
            
            if (backendAddressesItem.fqdn !== null && backendAddressesItem.fqdn !== undefined) {
              applicationGatewayBackendAddressValue['fqdn'] = backendAddressesItem.fqdn;
            }
            
            if (backendAddressesItem.ipAddress !== null && backendAddressesItem.ipAddress !== undefined) {
              applicationGatewayBackendAddressValue['ipAddress'] = backendAddressesItem.ipAddress;
            }
          }
          propertiesValue6['backendAddresses'] = backendAddressesArray;
        }
        
        if (backendAddressPoolsItem.provisioningState !== null && backendAddressPoolsItem.provisioningState !== undefined) {
          propertiesValue6['provisioningState'] = backendAddressPoolsItem.provisioningState;
        }
        
        if (backendAddressPoolsItem.name !== null && backendAddressPoolsItem.name !== undefined) {
          applicationGatewayBackendAddressPoolJsonFormatValue['name'] = backendAddressPoolsItem.name;
        }
        
        if (backendAddressPoolsItem.etag !== null && backendAddressPoolsItem.etag !== undefined) {
          applicationGatewayBackendAddressPoolJsonFormatValue['etag'] = backendAddressPoolsItem.etag;
        }
        
        if (backendAddressPoolsItem.id !== null && backendAddressPoolsItem.id !== undefined) {
          applicationGatewayBackendAddressPoolJsonFormatValue['id'] = backendAddressPoolsItem.id;
        }
      }
      propertiesValue['backendAddressPools'] = backendAddressPoolsArray;
    }
    
    if (parameters.backendHttpSettingsCollection !== null && parameters.backendHttpSettingsCollection !== undefined) {
      var backendHttpSettingsCollectionArray = [];
      for (var loweredIndex8 = 0; loweredIndex8 < parameters.backendHttpSettingsCollection.length; loweredIndex8 = loweredIndex8 + 1) {
        var backendHttpSettingsCollectionItem = parameters.backendHttpSettingsCollection[loweredIndex8];
        var applicationGatewayBackendHttpSettingsJsonFormatValue = {};
        backendHttpSettingsCollectionArray.push(applicationGatewayBackendHttpSettingsJsonFormatValue);
        
        var propertiesValue7 = {};
        applicationGatewayBackendHttpSettingsJsonFormatValue['properties'] = propertiesValue7;
        
        if (backendHttpSettingsCollectionItem.port !== null && backendHttpSettingsCollectionItem.port !== undefined) {
          propertiesValue7['port'] = backendHttpSettingsCollectionItem.port;
        }
        
        if (backendHttpSettingsCollectionItem.protocol !== null && backendHttpSettingsCollectionItem.protocol !== undefined) {
          propertiesValue7['protocol'] = backendHttpSettingsCollectionItem.protocol;
        }
        
        if (backendHttpSettingsCollectionItem.cookieBasedAffinity !== null && backendHttpSettingsCollectionItem.cookieBasedAffinity !== undefined) {
          propertiesValue7['cookieBasedAffinity'] = backendHttpSettingsCollectionItem.cookieBasedAffinity;
        }
        
        if (backendHttpSettingsCollectionItem.provisioningState !== null && backendHttpSettingsCollectionItem.provisioningState !== undefined) {
          propertiesValue7['provisioningState'] = backendHttpSettingsCollectionItem.provisioningState;
        }
        
        if (backendHttpSettingsCollectionItem.name !== null && backendHttpSettingsCollectionItem.name !== undefined) {
          applicationGatewayBackendHttpSettingsJsonFormatValue['name'] = backendHttpSettingsCollectionItem.name;
        }
        
        if (backendHttpSettingsCollectionItem.etag !== null && backendHttpSettingsCollectionItem.etag !== undefined) {
          applicationGatewayBackendHttpSettingsJsonFormatValue['etag'] = backendHttpSettingsCollectionItem.etag;
        }
        
        if (backendHttpSettingsCollectionItem.id !== null && backendHttpSettingsCollectionItem.id !== undefined) {
          applicationGatewayBackendHttpSettingsJsonFormatValue['id'] = backendHttpSettingsCollectionItem.id;
        }
      }
      propertiesValue['backendHttpSettingsCollection'] = backendHttpSettingsCollectionArray;
    }
    
    if (parameters.httpListeners !== null && parameters.httpListeners !== undefined) {
      var httpListenersArray = [];
      for (var loweredIndex9 = 0; loweredIndex9 < parameters.httpListeners.length; loweredIndex9 = loweredIndex9 + 1) {
        var httpListenersItem = parameters.httpListeners[loweredIndex9];
        var applicationGatewayHttpListenerJsonFormatValue = {};
        httpListenersArray.push(applicationGatewayHttpListenerJsonFormatValue);
        
        var propertiesValue8 = {};
        applicationGatewayHttpListenerJsonFormatValue['properties'] = propertiesValue8;
        
        if (httpListenersItem.frontendIPConfiguration !== null && httpListenersItem.frontendIPConfiguration !== undefined) {
          var frontendIPConfigurationValue = {};
          propertiesValue8['frontendIPConfiguration'] = frontendIPConfigurationValue;
          
          if (httpListenersItem.frontendIPConfiguration.id !== null && httpListenersItem.frontendIPConfiguration.id !== undefined) {
            frontendIPConfigurationValue['id'] = httpListenersItem.frontendIPConfiguration.id;
          }
        }
        
        if (httpListenersItem.frontendPort !== null && httpListenersItem.frontendPort !== undefined) {
          var frontendPortValue = {};
          propertiesValue8['frontendPort'] = frontendPortValue;
          
          if (httpListenersItem.frontendPort.id !== null && httpListenersItem.frontendPort.id !== undefined) {
            frontendPortValue['id'] = httpListenersItem.frontendPort.id;
          }
        }
        
        if (httpListenersItem.protocol !== null && httpListenersItem.protocol !== undefined) {
          propertiesValue8['protocol'] = httpListenersItem.protocol;
        }
        
        if (httpListenersItem.sslCertificate !== null && httpListenersItem.sslCertificate !== undefined) {
          var sslCertificateValue = {};
          propertiesValue8['sslCertificate'] = sslCertificateValue;
          
          if (httpListenersItem.sslCertificate.id !== null && httpListenersItem.sslCertificate.id !== undefined) {
            sslCertificateValue['id'] = httpListenersItem.sslCertificate.id;
          }
        }
        
        if (httpListenersItem.provisioningState !== null && httpListenersItem.provisioningState !== undefined) {
          propertiesValue8['provisioningState'] = httpListenersItem.provisioningState;
        }
        
        if (httpListenersItem.name !== null && httpListenersItem.name !== undefined) {
          applicationGatewayHttpListenerJsonFormatValue['name'] = httpListenersItem.name;
        }
        
        if (httpListenersItem.etag !== null && httpListenersItem.etag !== undefined) {
          applicationGatewayHttpListenerJsonFormatValue['etag'] = httpListenersItem.etag;
        }
        
        if (httpListenersItem.id !== null && httpListenersItem.id !== undefined) {
          applicationGatewayHttpListenerJsonFormatValue['id'] = httpListenersItem.id;
        }
      }
      propertiesValue['httpListeners'] = httpListenersArray;
    }
    
    if (parameters.requestRoutingRules !== null && parameters.requestRoutingRules !== undefined) {
      var requestRoutingRulesArray = [];
      for (var loweredIndex10 = 0; loweredIndex10 < parameters.requestRoutingRules.length; loweredIndex10 = loweredIndex10 + 1) {
        var requestRoutingRulesItem = parameters.requestRoutingRules[loweredIndex10];
        var applicationGatewayRequestRoutingRuleJsonFormatValue = {};
        requestRoutingRulesArray.push(applicationGatewayRequestRoutingRuleJsonFormatValue);
        
        var propertiesValue9 = {};
        applicationGatewayRequestRoutingRuleJsonFormatValue['properties'] = propertiesValue9;
        
        if (requestRoutingRulesItem.ruleType !== null && requestRoutingRulesItem.ruleType !== undefined) {
          propertiesValue9['ruleType'] = requestRoutingRulesItem.ruleType;
        }
        
        if (requestRoutingRulesItem.backendAddressPool !== null && requestRoutingRulesItem.backendAddressPool !== undefined) {
          var backendAddressPoolValue = {};
          propertiesValue9['backendAddressPool'] = backendAddressPoolValue;
          
          if (requestRoutingRulesItem.backendAddressPool.id !== null && requestRoutingRulesItem.backendAddressPool.id !== undefined) {
            backendAddressPoolValue['id'] = requestRoutingRulesItem.backendAddressPool.id;
          }
        }
        
        if (requestRoutingRulesItem.backendHttpSettings !== null && requestRoutingRulesItem.backendHttpSettings !== undefined) {
          var backendHttpSettingsValue = {};
          propertiesValue9['backendHttpSettings'] = backendHttpSettingsValue;
          
          if (requestRoutingRulesItem.backendHttpSettings.id !== null && requestRoutingRulesItem.backendHttpSettings.id !== undefined) {
            backendHttpSettingsValue['id'] = requestRoutingRulesItem.backendHttpSettings.id;
          }
        }
        
        if (requestRoutingRulesItem.httpListener !== null && requestRoutingRulesItem.httpListener !== undefined) {
          var httpListenerValue = {};
          propertiesValue9['httpListener'] = httpListenerValue;
          
          if (requestRoutingRulesItem.httpListener.id !== null && requestRoutingRulesItem.httpListener.id !== undefined) {
            httpListenerValue['id'] = requestRoutingRulesItem.httpListener.id;
          }
        }
        
        if (requestRoutingRulesItem.provisioningState !== null && requestRoutingRulesItem.provisioningState !== undefined) {
          propertiesValue9['provisioningState'] = requestRoutingRulesItem.provisioningState;
        }
        
        if (requestRoutingRulesItem.name !== null && requestRoutingRulesItem.name !== undefined) {
          applicationGatewayRequestRoutingRuleJsonFormatValue['name'] = requestRoutingRulesItem.name;
        }
        
        if (requestRoutingRulesItem.etag !== null && requestRoutingRulesItem.etag !== undefined) {
          applicationGatewayRequestRoutingRuleJsonFormatValue['etag'] = requestRoutingRulesItem.etag;
        }
        
        if (requestRoutingRulesItem.id !== null && requestRoutingRulesItem.id !== undefined) {
          applicationGatewayRequestRoutingRuleJsonFormatValue['id'] = requestRoutingRulesItem.id;
        }
      }
      propertiesValue['requestRoutingRules'] = requestRoutingRulesArray;
    }
    
    if (parameters.resourceGuid !== null && parameters.resourceGuid !== undefined) {
      propertiesValue['resourceGuid'] = parameters.resourceGuid;
    }
    
    if (parameters.provisioningState !== null && parameters.provisioningState !== undefined) {
      propertiesValue['provisioningState'] = parameters.provisioningState;
    }
    
    if (parameters.etag !== null && parameters.etag !== undefined) {
      applicationGatewayJsonFormatValue['etag'] = parameters.etag;
    }
    
    if (parameters.id !== null && parameters.id !== undefined) {
      applicationGatewayJsonFormatValue['id'] = parameters.id;
    }
    
    if (parameters.name !== null && parameters.name !== undefined) {
      applicationGatewayJsonFormatValue['name'] = parameters.name;
    }
    
    if (parameters.type !== null && parameters.type !== undefined) {
      applicationGatewayJsonFormatValue['type'] = parameters.type;
    }
    
    if (parameters.location !== null && parameters.location !== undefined) {
      applicationGatewayJsonFormatValue['location'] = parameters.location;
    }
    
    if (parameters.tags !== null && parameters.tags !== undefined) {
      var tagsDictionary = {};
      for (var tagsKey in parameters.tags) {
        var tagsValue = parameters.tags[tagsKey];
        tagsDictionary[tagsKey] = tagsValue;
      }
      applicationGatewayJsonFormatValue['tags'] = tagsDictionary;
    }
    
    requestContent = JSON.stringify(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200 && statusCode !== 201) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200 || statusCode === 201) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var applicationGatewayInstance = { backendAddressPools: [], backendHttpSettingsCollection: [], frontendIPConfigurations: [], frontendPorts: [], gatewayIPConfigurations: [], httpListeners: [], requestRoutingRules: [], sslCertificates: [], tags: {} };
          result.applicationGateway = applicationGatewayInstance;
          
          var propertiesValue10 = responseDoc['properties'];
          if (propertiesValue10 !== null && propertiesValue10 !== undefined) {
            var skuValue2 = propertiesValue10['sku'];
            if (skuValue2 !== null && skuValue2 !== undefined) {
              var skuInstance = {};
              applicationGatewayInstance.sku = skuInstance;
              
              var nameValue = skuValue2['name'];
              if (nameValue !== null && nameValue !== undefined) {
                var nameInstance = nameValue;
                skuInstance.name = nameInstance;
              }
              
              var tierValue = skuValue2['tier'];
              if (tierValue !== null && tierValue !== undefined) {
                var tierInstance = tierValue;
                skuInstance.tier = tierInstance;
              }
              
              var capacityValue = skuValue2['capacity'];
              if (capacityValue !== null && capacityValue !== undefined) {
                var capacityInstance = capacityValue;
                skuInstance.capacity = capacityInstance;
              }
            }
            
            var operationalStateValue = propertiesValue10['operationalState'];
            if (operationalStateValue !== null && operationalStateValue !== undefined) {
              var operationalStateInstance = operationalStateValue;
              applicationGatewayInstance.operationalState = operationalStateInstance;
            }
            
            var gatewayIPConfigurationsArray2 = propertiesValue10['gatewayIPConfigurations'];
            if (gatewayIPConfigurationsArray2 !== null && gatewayIPConfigurationsArray2 !== undefined) {
              for (var loweredIndex11 = 0; loweredIndex11 < gatewayIPConfigurationsArray2.length; loweredIndex11 = loweredIndex11 + 1) {
                var gatewayIPConfigurationsValue = gatewayIPConfigurationsArray2[loweredIndex11];
                var applicationGatewayIPConfigurationJsonFormatInstance = {};
                applicationGatewayInstance.gatewayIPConfigurations.push(applicationGatewayIPConfigurationJsonFormatInstance);
                
                var propertiesValue11 = gatewayIPConfigurationsValue['properties'];
                if (propertiesValue11 !== null && propertiesValue11 !== undefined) {
                  var subnetValue3 = propertiesValue11['subnet'];
                  if (subnetValue3 !== null && subnetValue3 !== undefined) {
                    var subnetInstance = {};
                    applicationGatewayIPConfigurationJsonFormatInstance.subnet = subnetInstance;
                    
                    var idValue = subnetValue3['id'];
                    if (idValue !== null && idValue !== undefined) {
                      var idInstance = idValue;
                      subnetInstance.id = idInstance;
                    }
                  }
                  
                  var provisioningStateValue = propertiesValue11['provisioningState'];
                  if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
                    var provisioningStateInstance = provisioningStateValue;
                    applicationGatewayIPConfigurationJsonFormatInstance.provisioningState = provisioningStateInstance;
                  }
                }
                
                var nameValue2 = gatewayIPConfigurationsValue['name'];
                if (nameValue2 !== null && nameValue2 !== undefined) {
                  var nameInstance2 = nameValue2;
                  applicationGatewayIPConfigurationJsonFormatInstance.name = nameInstance2;
                }
                
                var etagValue = gatewayIPConfigurationsValue['etag'];
                if (etagValue !== null && etagValue !== undefined) {
                  var etagInstance = etagValue;
                  applicationGatewayIPConfigurationJsonFormatInstance.etag = etagInstance;
                }
                
                var idValue2 = gatewayIPConfigurationsValue['id'];
                if (idValue2 !== null && idValue2 !== undefined) {
                  var idInstance2 = idValue2;
                  applicationGatewayIPConfigurationJsonFormatInstance.id = idInstance2;
                }
              }
            }
            
            var sslCertificatesArray2 = propertiesValue10['sslCertificates'];
            if (sslCertificatesArray2 !== null && sslCertificatesArray2 !== undefined) {
              for (var loweredIndex12 = 0; loweredIndex12 < sslCertificatesArray2.length; loweredIndex12 = loweredIndex12 + 1) {
                var sslCertificatesValue = sslCertificatesArray2[loweredIndex12];
                var applicationGatewaySslCertificateJsonFormatInstance = {};
                applicationGatewayInstance.sslCertificates.push(applicationGatewaySslCertificateJsonFormatInstance);
                
                var propertiesValue12 = sslCertificatesValue['properties'];
                if (propertiesValue12 !== null && propertiesValue12 !== undefined) {
                  var dataValue = propertiesValue12['data'];
                  if (dataValue !== null && dataValue !== undefined) {
                    var dataInstance = dataValue;
                    applicationGatewaySslCertificateJsonFormatInstance.data = dataInstance;
                  }
                  
                  var passwordValue = propertiesValue12['password'];
                  if (passwordValue !== null && passwordValue !== undefined) {
                    var passwordInstance = passwordValue;
                    applicationGatewaySslCertificateJsonFormatInstance.password = passwordInstance;
                  }
                  
                  var publicCertDataValue = propertiesValue12['publicCertData'];
                  if (publicCertDataValue !== null && publicCertDataValue !== undefined) {
                    var publicCertDataInstance = publicCertDataValue;
                    applicationGatewaySslCertificateJsonFormatInstance.publicCertData = publicCertDataInstance;
                  }
                  
                  var provisioningStateValue2 = propertiesValue12['provisioningState'];
                  if (provisioningStateValue2 !== null && provisioningStateValue2 !== undefined) {
                    var provisioningStateInstance2 = provisioningStateValue2;
                    applicationGatewaySslCertificateJsonFormatInstance.provisioningState = provisioningStateInstance2;
                  }
                }
                
                var nameValue3 = sslCertificatesValue['name'];
                if (nameValue3 !== null && nameValue3 !== undefined) {
                  var nameInstance3 = nameValue3;
                  applicationGatewaySslCertificateJsonFormatInstance.name = nameInstance3;
                }
                
                var etagValue2 = sslCertificatesValue['etag'];
                if (etagValue2 !== null && etagValue2 !== undefined) {
                  var etagInstance2 = etagValue2;
                  applicationGatewaySslCertificateJsonFormatInstance.etag = etagInstance2;
                }
                
                var idValue3 = sslCertificatesValue['id'];
                if (idValue3 !== null && idValue3 !== undefined) {
                  var idInstance3 = idValue3;
                  applicationGatewaySslCertificateJsonFormatInstance.id = idInstance3;
                }
              }
            }
            
            var frontendIPConfigurationsArray2 = propertiesValue10['frontendIPConfigurations'];
            if (frontendIPConfigurationsArray2 !== null && frontendIPConfigurationsArray2 !== undefined) {
              for (var loweredIndex13 = 0; loweredIndex13 < frontendIPConfigurationsArray2.length; loweredIndex13 = loweredIndex13 + 1) {
                var frontendIPConfigurationsValue = frontendIPConfigurationsArray2[loweredIndex13];
                var applicationGatewayFrontendIPConfigurationJsonFormatInstance = {};
                applicationGatewayInstance.frontendIPConfigurations.push(applicationGatewayFrontendIPConfigurationJsonFormatInstance);
                
                var propertiesValue13 = frontendIPConfigurationsValue['properties'];
                if (propertiesValue13 !== null && propertiesValue13 !== undefined) {
                  var privateIPAddressValue = propertiesValue13['privateIPAddress'];
                  if (privateIPAddressValue !== null && privateIPAddressValue !== undefined) {
                    var privateIPAddressInstance = privateIPAddressValue;
                    applicationGatewayFrontendIPConfigurationJsonFormatInstance.privateIPAddress = privateIPAddressInstance;
                  }
                  
                  var privateIPAllocationMethodValue = propertiesValue13['privateIPAllocationMethod'];
                  if (privateIPAllocationMethodValue !== null && privateIPAllocationMethodValue !== undefined) {
                    var privateIPAllocationMethodInstance = privateIPAllocationMethodValue;
                    applicationGatewayFrontendIPConfigurationJsonFormatInstance.privateIPAllocationMethod = privateIPAllocationMethodInstance;
                  }
                  
                  var subnetValue4 = propertiesValue13['subnet'];
                  if (subnetValue4 !== null && subnetValue4 !== undefined) {
                    var subnetInstance2 = {};
                    applicationGatewayFrontendIPConfigurationJsonFormatInstance.subnet = subnetInstance2;
                    
                    var idValue4 = subnetValue4['id'];
                    if (idValue4 !== null && idValue4 !== undefined) {
                      var idInstance4 = idValue4;
                      subnetInstance2.id = idInstance4;
                    }
                  }
                  
                  var publicIPAddressValue2 = propertiesValue13['publicIPAddress'];
                  if (publicIPAddressValue2 !== null && publicIPAddressValue2 !== undefined) {
                    var publicIPAddressInstance = {};
                    applicationGatewayFrontendIPConfigurationJsonFormatInstance.publicIPAddress = publicIPAddressInstance;
                    
                    var idValue5 = publicIPAddressValue2['id'];
                    if (idValue5 !== null && idValue5 !== undefined) {
                      var idInstance5 = idValue5;
                      publicIPAddressInstance.id = idInstance5;
                    }
                  }
                  
                  var provisioningStateValue3 = propertiesValue13['provisioningState'];
                  if (provisioningStateValue3 !== null && provisioningStateValue3 !== undefined) {
                    var provisioningStateInstance3 = provisioningStateValue3;
                    applicationGatewayFrontendIPConfigurationJsonFormatInstance.provisioningState = provisioningStateInstance3;
                  }
                }
                
                var nameValue4 = frontendIPConfigurationsValue['name'];
                if (nameValue4 !== null && nameValue4 !== undefined) {
                  var nameInstance4 = nameValue4;
                  applicationGatewayFrontendIPConfigurationJsonFormatInstance.name = nameInstance4;
                }
                
                var etagValue3 = frontendIPConfigurationsValue['etag'];
                if (etagValue3 !== null && etagValue3 !== undefined) {
                  var etagInstance3 = etagValue3;
                  applicationGatewayFrontendIPConfigurationJsonFormatInstance.etag = etagInstance3;
                }
                
                var idValue6 = frontendIPConfigurationsValue['id'];
                if (idValue6 !== null && idValue6 !== undefined) {
                  var idInstance6 = idValue6;
                  applicationGatewayFrontendIPConfigurationJsonFormatInstance.id = idInstance6;
                }
              }
            }
            
            var frontendPortsArray2 = propertiesValue10['frontendPorts'];
            if (frontendPortsArray2 !== null && frontendPortsArray2 !== undefined) {
              for (var loweredIndex14 = 0; loweredIndex14 < frontendPortsArray2.length; loweredIndex14 = loweredIndex14 + 1) {
                var frontendPortsValue = frontendPortsArray2[loweredIndex14];
                var applicationGatewayFrontendPortJsonFormatInstance = {};
                applicationGatewayInstance.frontendPorts.push(applicationGatewayFrontendPortJsonFormatInstance);
                
                var propertiesValue14 = frontendPortsValue['properties'];
                if (propertiesValue14 !== null && propertiesValue14 !== undefined) {
                  var portValue = propertiesValue14['port'];
                  if (portValue !== null && portValue !== undefined) {
                    var portInstance = portValue;
                    applicationGatewayFrontendPortJsonFormatInstance.port = portInstance;
                  }
                  
                  var provisioningStateValue4 = propertiesValue14['provisioningState'];
                  if (provisioningStateValue4 !== null && provisioningStateValue4 !== undefined) {
                    var provisioningStateInstance4 = provisioningStateValue4;
                    applicationGatewayFrontendPortJsonFormatInstance.provisioningState = provisioningStateInstance4;
                  }
                }
                
                var nameValue5 = frontendPortsValue['name'];
                if (nameValue5 !== null && nameValue5 !== undefined) {
                  var nameInstance5 = nameValue5;
                  applicationGatewayFrontendPortJsonFormatInstance.name = nameInstance5;
                }
                
                var etagValue4 = frontendPortsValue['etag'];
                if (etagValue4 !== null && etagValue4 !== undefined) {
                  var etagInstance4 = etagValue4;
                  applicationGatewayFrontendPortJsonFormatInstance.etag = etagInstance4;
                }
                
                var idValue7 = frontendPortsValue['id'];
                if (idValue7 !== null && idValue7 !== undefined) {
                  var idInstance7 = idValue7;
                  applicationGatewayFrontendPortJsonFormatInstance.id = idInstance7;
                }
              }
            }
            
            var backendAddressPoolsArray2 = propertiesValue10['backendAddressPools'];
            if (backendAddressPoolsArray2 !== null && backendAddressPoolsArray2 !== undefined) {
              for (var loweredIndex15 = 0; loweredIndex15 < backendAddressPoolsArray2.length; loweredIndex15 = loweredIndex15 + 1) {
                var backendAddressPoolsValue = backendAddressPoolsArray2[loweredIndex15];
                var applicationGatewayBackendAddressPoolJsonFormatInstance = { backendAddresses: [], backendIPConfigurations: [] };
                applicationGatewayInstance.backendAddressPools.push(applicationGatewayBackendAddressPoolJsonFormatInstance);
                
                var propertiesValue15 = backendAddressPoolsValue['properties'];
                if (propertiesValue15 !== null && propertiesValue15 !== undefined) {
                  var backendIPConfigurationsArray2 = propertiesValue15['backendIPConfigurations'];
                  if (backendIPConfigurationsArray2 !== null && backendIPConfigurationsArray2 !== undefined) {
                    for (var loweredIndex16 = 0; loweredIndex16 < backendIPConfigurationsArray2.length; loweredIndex16 = loweredIndex16 + 1) {
                      var backendIPConfigurationsValue = backendIPConfigurationsArray2[loweredIndex16];
                      var resourceIdInstance = {};
                      applicationGatewayBackendAddressPoolJsonFormatInstance.backendIPConfigurations.push(resourceIdInstance);
                      
                      var idValue8 = backendIPConfigurationsValue['id'];
                      if (idValue8 !== null && idValue8 !== undefined) {
                        var idInstance8 = idValue8;
                        resourceIdInstance.id = idInstance8;
                      }
                    }
                  }
                  
                  var backendAddressesArray2 = propertiesValue15['backendAddresses'];
                  if (backendAddressesArray2 !== null && backendAddressesArray2 !== undefined) {
                    for (var loweredIndex17 = 0; loweredIndex17 < backendAddressesArray2.length; loweredIndex17 = loweredIndex17 + 1) {
                      var backendAddressesValue = backendAddressesArray2[loweredIndex17];
                      var applicationGatewayBackendAddressInstance = {};
                      applicationGatewayBackendAddressPoolJsonFormatInstance.backendAddresses.push(applicationGatewayBackendAddressInstance);
                      
                      var fqdnValue = backendAddressesValue['fqdn'];
                      if (fqdnValue !== null && fqdnValue !== undefined) {
                        var fqdnInstance = fqdnValue;
                        applicationGatewayBackendAddressInstance.fqdn = fqdnInstance;
                      }
                      
                      var ipAddressValue = backendAddressesValue['ipAddress'];
                      if (ipAddressValue !== null && ipAddressValue !== undefined) {
                        var ipAddressInstance = ipAddressValue;
                        applicationGatewayBackendAddressInstance.ipAddress = ipAddressInstance;
                      }
                    }
                  }
                  
                  var provisioningStateValue5 = propertiesValue15['provisioningState'];
                  if (provisioningStateValue5 !== null && provisioningStateValue5 !== undefined) {
                    var provisioningStateInstance5 = provisioningStateValue5;
                    applicationGatewayBackendAddressPoolJsonFormatInstance.provisioningState = provisioningStateInstance5;
                  }
                }
                
                var nameValue6 = backendAddressPoolsValue['name'];
                if (nameValue6 !== null && nameValue6 !== undefined) {
                  var nameInstance6 = nameValue6;
                  applicationGatewayBackendAddressPoolJsonFormatInstance.name = nameInstance6;
                }
                
                var etagValue5 = backendAddressPoolsValue['etag'];
                if (etagValue5 !== null && etagValue5 !== undefined) {
                  var etagInstance5 = etagValue5;
                  applicationGatewayBackendAddressPoolJsonFormatInstance.etag = etagInstance5;
                }
                
                var idValue9 = backendAddressPoolsValue['id'];
                if (idValue9 !== null && idValue9 !== undefined) {
                  var idInstance9 = idValue9;
                  applicationGatewayBackendAddressPoolJsonFormatInstance.id = idInstance9;
                }
              }
            }
            
            var backendHttpSettingsCollectionArray2 = propertiesValue10['backendHttpSettingsCollection'];
            if (backendHttpSettingsCollectionArray2 !== null && backendHttpSettingsCollectionArray2 !== undefined) {
              for (var loweredIndex18 = 0; loweredIndex18 < backendHttpSettingsCollectionArray2.length; loweredIndex18 = loweredIndex18 + 1) {
                var backendHttpSettingsCollectionValue = backendHttpSettingsCollectionArray2[loweredIndex18];
                var applicationGatewayBackendHttpSettingsJsonFormatInstance = {};
                applicationGatewayInstance.backendHttpSettingsCollection.push(applicationGatewayBackendHttpSettingsJsonFormatInstance);
                
                var propertiesValue16 = backendHttpSettingsCollectionValue['properties'];
                if (propertiesValue16 !== null && propertiesValue16 !== undefined) {
                  var portValue2 = propertiesValue16['port'];
                  if (portValue2 !== null && portValue2 !== undefined) {
                    var portInstance2 = portValue2;
                    applicationGatewayBackendHttpSettingsJsonFormatInstance.port = portInstance2;
                  }
                  
                  var protocolValue = propertiesValue16['protocol'];
                  if (protocolValue !== null && protocolValue !== undefined) {
                    var protocolInstance = protocolValue;
                    applicationGatewayBackendHttpSettingsJsonFormatInstance.protocol = protocolInstance;
                  }
                  
                  var cookieBasedAffinityValue = propertiesValue16['cookieBasedAffinity'];
                  if (cookieBasedAffinityValue !== null && cookieBasedAffinityValue !== undefined) {
                    var cookieBasedAffinityInstance = cookieBasedAffinityValue;
                    applicationGatewayBackendHttpSettingsJsonFormatInstance.cookieBasedAffinity = cookieBasedAffinityInstance;
                  }
                  
                  var provisioningStateValue6 = propertiesValue16['provisioningState'];
                  if (provisioningStateValue6 !== null && provisioningStateValue6 !== undefined) {
                    var provisioningStateInstance6 = provisioningStateValue6;
                    applicationGatewayBackendHttpSettingsJsonFormatInstance.provisioningState = provisioningStateInstance6;
                  }
                }
                
                var nameValue7 = backendHttpSettingsCollectionValue['name'];
                if (nameValue7 !== null && nameValue7 !== undefined) {
                  var nameInstance7 = nameValue7;
                  applicationGatewayBackendHttpSettingsJsonFormatInstance.name = nameInstance7;
                }
                
                var etagValue6 = backendHttpSettingsCollectionValue['etag'];
                if (etagValue6 !== null && etagValue6 !== undefined) {
                  var etagInstance6 = etagValue6;
                  applicationGatewayBackendHttpSettingsJsonFormatInstance.etag = etagInstance6;
                }
                
                var idValue10 = backendHttpSettingsCollectionValue['id'];
                if (idValue10 !== null && idValue10 !== undefined) {
                  var idInstance10 = idValue10;
                  applicationGatewayBackendHttpSettingsJsonFormatInstance.id = idInstance10;
                }
              }
            }
            
            var httpListenersArray2 = propertiesValue10['httpListeners'];
            if (httpListenersArray2 !== null && httpListenersArray2 !== undefined) {
              for (var loweredIndex19 = 0; loweredIndex19 < httpListenersArray2.length; loweredIndex19 = loweredIndex19 + 1) {
                var httpListenersValue = httpListenersArray2[loweredIndex19];
                var applicationGatewayHttpListenerJsonFormatInstance = {};
                applicationGatewayInstance.httpListeners.push(applicationGatewayHttpListenerJsonFormatInstance);
                
                var propertiesValue17 = httpListenersValue['properties'];
                if (propertiesValue17 !== null && propertiesValue17 !== undefined) {
                  var frontendIPConfigurationValue2 = propertiesValue17['frontendIPConfiguration'];
                  if (frontendIPConfigurationValue2 !== null && frontendIPConfigurationValue2 !== undefined) {
                    var frontendIPConfigurationInstance = {};
                    applicationGatewayHttpListenerJsonFormatInstance.frontendIPConfiguration = frontendIPConfigurationInstance;
                    
                    var idValue11 = frontendIPConfigurationValue2['id'];
                    if (idValue11 !== null && idValue11 !== undefined) {
                      var idInstance11 = idValue11;
                      frontendIPConfigurationInstance.id = idInstance11;
                    }
                  }
                  
                  var frontendPortValue2 = propertiesValue17['frontendPort'];
                  if (frontendPortValue2 !== null && frontendPortValue2 !== undefined) {
                    var frontendPortInstance = {};
                    applicationGatewayHttpListenerJsonFormatInstance.frontendPort = frontendPortInstance;
                    
                    var idValue12 = frontendPortValue2['id'];
                    if (idValue12 !== null && idValue12 !== undefined) {
                      var idInstance12 = idValue12;
                      frontendPortInstance.id = idInstance12;
                    }
                  }
                  
                  var protocolValue2 = propertiesValue17['protocol'];
                  if (protocolValue2 !== null && protocolValue2 !== undefined) {
                    var protocolInstance2 = protocolValue2;
                    applicationGatewayHttpListenerJsonFormatInstance.protocol = protocolInstance2;
                  }
                  
                  var sslCertificateValue2 = propertiesValue17['sslCertificate'];
                  if (sslCertificateValue2 !== null && sslCertificateValue2 !== undefined) {
                    var sslCertificateInstance = {};
                    applicationGatewayHttpListenerJsonFormatInstance.sslCertificate = sslCertificateInstance;
                    
                    var idValue13 = sslCertificateValue2['id'];
                    if (idValue13 !== null && idValue13 !== undefined) {
                      var idInstance13 = idValue13;
                      sslCertificateInstance.id = idInstance13;
                    }
                  }
                  
                  var provisioningStateValue7 = propertiesValue17['provisioningState'];
                  if (provisioningStateValue7 !== null && provisioningStateValue7 !== undefined) {
                    var provisioningStateInstance7 = provisioningStateValue7;
                    applicationGatewayHttpListenerJsonFormatInstance.provisioningState = provisioningStateInstance7;
                  }
                }
                
                var nameValue8 = httpListenersValue['name'];
                if (nameValue8 !== null && nameValue8 !== undefined) {
                  var nameInstance8 = nameValue8;
                  applicationGatewayHttpListenerJsonFormatInstance.name = nameInstance8;
                }
                
                var etagValue7 = httpListenersValue['etag'];
                if (etagValue7 !== null && etagValue7 !== undefined) {
                  var etagInstance7 = etagValue7;
                  applicationGatewayHttpListenerJsonFormatInstance.etag = etagInstance7;
                }
                
                var idValue14 = httpListenersValue['id'];
                if (idValue14 !== null && idValue14 !== undefined) {
                  var idInstance14 = idValue14;
                  applicationGatewayHttpListenerJsonFormatInstance.id = idInstance14;
                }
              }
            }
            
            var requestRoutingRulesArray2 = propertiesValue10['requestRoutingRules'];
            if (requestRoutingRulesArray2 !== null && requestRoutingRulesArray2 !== undefined) {
              for (var loweredIndex20 = 0; loweredIndex20 < requestRoutingRulesArray2.length; loweredIndex20 = loweredIndex20 + 1) {
                var requestRoutingRulesValue = requestRoutingRulesArray2[loweredIndex20];
                var applicationGatewayRequestRoutingRuleJsonFormatInstance = {};
                applicationGatewayInstance.requestRoutingRules.push(applicationGatewayRequestRoutingRuleJsonFormatInstance);
                
                var propertiesValue18 = requestRoutingRulesValue['properties'];
                if (propertiesValue18 !== null && propertiesValue18 !== undefined) {
                  var ruleTypeValue = propertiesValue18['ruleType'];
                  if (ruleTypeValue !== null && ruleTypeValue !== undefined) {
                    var ruleTypeInstance = ruleTypeValue;
                    applicationGatewayRequestRoutingRuleJsonFormatInstance.ruleType = ruleTypeInstance;
                  }
                  
                  var backendAddressPoolValue2 = propertiesValue18['backendAddressPool'];
                  if (backendAddressPoolValue2 !== null && backendAddressPoolValue2 !== undefined) {
                    var backendAddressPoolInstance = {};
                    applicationGatewayRequestRoutingRuleJsonFormatInstance.backendAddressPool = backendAddressPoolInstance;
                    
                    var idValue15 = backendAddressPoolValue2['id'];
                    if (idValue15 !== null && idValue15 !== undefined) {
                      var idInstance15 = idValue15;
                      backendAddressPoolInstance.id = idInstance15;
                    }
                  }
                  
                  var backendHttpSettingsValue2 = propertiesValue18['backendHttpSettings'];
                  if (backendHttpSettingsValue2 !== null && backendHttpSettingsValue2 !== undefined) {
                    var backendHttpSettingsInstance = {};
                    applicationGatewayRequestRoutingRuleJsonFormatInstance.backendHttpSettings = backendHttpSettingsInstance;
                    
                    var idValue16 = backendHttpSettingsValue2['id'];
                    if (idValue16 !== null && idValue16 !== undefined) {
                      var idInstance16 = idValue16;
                      backendHttpSettingsInstance.id = idInstance16;
                    }
                  }
                  
                  var httpListenerValue2 = propertiesValue18['httpListener'];
                  if (httpListenerValue2 !== null && httpListenerValue2 !== undefined) {
                    var httpListenerInstance = {};
                    applicationGatewayRequestRoutingRuleJsonFormatInstance.httpListener = httpListenerInstance;
                    
                    var idValue17 = httpListenerValue2['id'];
                    if (idValue17 !== null && idValue17 !== undefined) {
                      var idInstance17 = idValue17;
                      httpListenerInstance.id = idInstance17;
                    }
                  }
                  
                  var provisioningStateValue8 = propertiesValue18['provisioningState'];
                  if (provisioningStateValue8 !== null && provisioningStateValue8 !== undefined) {
                    var provisioningStateInstance8 = provisioningStateValue8;
                    applicationGatewayRequestRoutingRuleJsonFormatInstance.provisioningState = provisioningStateInstance8;
                  }
                }
                
                var nameValue9 = requestRoutingRulesValue['name'];
                if (nameValue9 !== null && nameValue9 !== undefined) {
                  var nameInstance9 = nameValue9;
                  applicationGatewayRequestRoutingRuleJsonFormatInstance.name = nameInstance9;
                }
                
                var etagValue8 = requestRoutingRulesValue['etag'];
                if (etagValue8 !== null && etagValue8 !== undefined) {
                  var etagInstance8 = etagValue8;
                  applicationGatewayRequestRoutingRuleJsonFormatInstance.etag = etagInstance8;
                }
                
                var idValue18 = requestRoutingRulesValue['id'];
                if (idValue18 !== null && idValue18 !== undefined) {
                  var idInstance18 = idValue18;
                  applicationGatewayRequestRoutingRuleJsonFormatInstance.id = idInstance18;
                }
              }
            }
            
            var resourceGuidValue = propertiesValue10['resourceGuid'];
            if (resourceGuidValue !== null && resourceGuidValue !== undefined) {
              var resourceGuidInstance = resourceGuidValue;
              applicationGatewayInstance.resourceGuid = resourceGuidInstance;
            }
            
            var provisioningStateValue9 = propertiesValue10['provisioningState'];
            if (provisioningStateValue9 !== null && provisioningStateValue9 !== undefined) {
              var provisioningStateInstance9 = provisioningStateValue9;
              applicationGatewayInstance.provisioningState = provisioningStateInstance9;
            }
          }
          
          var etagValue9 = responseDoc['etag'];
          if (etagValue9 !== null && etagValue9 !== undefined) {
            var etagInstance9 = etagValue9;
            applicationGatewayInstance.etag = etagInstance9;
          }
          
          var idValue19 = responseDoc['id'];
          if (idValue19 !== null && idValue19 !== undefined) {
            var idInstance19 = idValue19;
            applicationGatewayInstance.id = idInstance19;
          }
          
          var nameValue10 = responseDoc['name'];
          if (nameValue10 !== null && nameValue10 !== undefined) {
            var nameInstance10 = nameValue10;
            applicationGatewayInstance.name = nameInstance10;
          }
          
          var typeValue = responseDoc['type'];
          if (typeValue !== null && typeValue !== undefined) {
            var typeInstance = typeValue;
            applicationGatewayInstance.type = typeInstance;
          }
          
          var locationValue = responseDoc['location'];
          if (locationValue !== null && locationValue !== undefined) {
            var locationInstance = locationValue;
            applicationGatewayInstance.location = locationInstance;
          }
          
          var tagsSequenceElement = responseDoc['tags'];
          if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
            for (var property in tagsSequenceElement) {
              var tagsKey2 = property;
              var tagsValue2 = tagsSequenceElement[property];
              applicationGatewayInstance.tags[tagsKey2] = tagsValue2;
            }
          }
          
          var errorValue = responseDoc['error'];
          if (errorValue !== null && errorValue !== undefined) {
            var errorInstance = { details: [] };
            result.error = errorInstance;
            
            var codeValue = errorValue['code'];
            if (codeValue !== null && codeValue !== undefined) {
              var codeInstance = codeValue;
              errorInstance.code = codeInstance;
            }
            
            var messageValue = errorValue['message'];
            if (messageValue !== null && messageValue !== undefined) {
              var messageInstance = messageValue;
              errorInstance.message = messageInstance;
            }
            
            var targetValue = errorValue['target'];
            if (targetValue !== null && targetValue !== undefined) {
              var targetInstance = targetValue;
              errorInstance.target = targetInstance;
            }
            
            var detailsArray = errorValue['details'];
            if (detailsArray !== null && detailsArray !== undefined) {
              for (var loweredIndex21 = 0; loweredIndex21 < detailsArray.length; loweredIndex21 = loweredIndex21 + 1) {
                var detailsValue = detailsArray[loweredIndex21];
                var errorDetailsInstance = {};
                errorInstance.details.push(errorDetailsInstance);
                
                var codeValue2 = detailsValue['code'];
                if (codeValue2 !== null && codeValue2 !== undefined) {
                  var codeInstance2 = codeValue2;
                  errorDetailsInstance.code = codeInstance2;
                }
                
                var targetValue2 = detailsValue['target'];
                if (targetValue2 !== null && targetValue2 !== undefined) {
                  var targetInstance2 = targetValue2;
                  errorDetailsInstance.target = targetInstance2;
                }
                
                var messageValue2 = detailsValue['message'];
                if (messageValue2 !== null && messageValue2 !== undefined) {
                  var messageInstance2 = messageValue2;
                  errorDetailsInstance.message = messageInstance2;
                }
              }
            }
            
            var innerErrorValue = errorValue['innerError'];
            if (innerErrorValue !== null && innerErrorValue !== undefined) {
              var innerErrorInstance = innerErrorValue;
              errorInstance.innerError = innerErrorInstance;
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      result.azureAsyncOperation = response.headers['azure-asyncoperation'];
      result.retryAfter = parseInt(response.headers['retry-after'], 10);
      
      return callback(null, result);
    });
  };
  
  /**
   * The delete applicationgateway operation deletes the specified
   * applicationgateway.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} applicationGatewayName The name of the applicationgateway.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ApplicationGatewayOperations.prototype.beginDeleting = function(resourceGroupName, applicationGatewayName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (applicationGatewayName === null || applicationGatewayName === undefined) {
      return callback(new Error('applicationGatewayName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Network';
    url2 = url2 + '/applicationGateways/';
    url2 = url2 + encodeURIComponent(applicationGatewayName);
    var queryParameters = [];
    queryParameters.push('api-version=2015-05-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'DELETE';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200 && statusCode !== 202 && statusCode !== 204) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      result = {};
      result.statusCode = statusCode;
      result.azureAsyncOperation = response.headers['azure-asyncoperation'];
      result.retryAfter = parseInt(response.headers['retry-after'], 10);
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The Start ApplicationGateway operation starts application gatewayin the
   * specified resource group through Network resource provider.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} applicationGatewayName The name of the application gateway.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ApplicationGatewayOperations.prototype.beginStart = function(resourceGroupName, applicationGatewayName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (applicationGatewayName === null || applicationGatewayName === undefined) {
      return callback(new Error('applicationGatewayName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Network';
    url2 = url2 + '/applicationGateways/';
    url2 = url2 + encodeURIComponent(applicationGatewayName);
    url2 = url2 + '/start';
    var queryParameters = [];
    queryParameters.push('api-version=2015-05-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 202) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      result = {};
      result.statusCode = statusCode;
      result.azureAsyncOperation = response.headers['azure-asyncoperation'];
      result.retryAfter = parseInt(response.headers['retry-after'], 10);
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The STOP ApplicationGateway operation stops application gatewayin the
   * specified resource group through Network resource provider.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} applicationGatewayName The name of the application gateway.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ApplicationGatewayOperations.prototype.beginStop = function(resourceGroupName, applicationGatewayName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (applicationGatewayName === null || applicationGatewayName === undefined) {
      return callback(new Error('applicationGatewayName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Network';
    url2 = url2 + '/applicationGateways/';
    url2 = url2 + encodeURIComponent(applicationGatewayName);
    url2 = url2 + '/stop';
    var queryParameters = [];
    queryParameters.push('api-version=2015-05-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200 && statusCode !== 202) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      result = {};
      result.statusCode = statusCode;
      result.azureAsyncOperation = response.headers['azure-asyncoperation'];
      result.retryAfter = parseInt(response.headers['retry-after'], 10);
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The Put ApplicationGateway operation creates/updates a ApplicationGateway
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} applicationGatewayName The name of the ApplicationGateway.
   * 
   * @param {ApplicationGateway} parameters Parameters supplied to the
   * create/update ApplicationGateway operation
   * 
   * @param {ApplicationGatewaySku} [parameters.sku] Gets or sets sku of
   * application gateway resource
   * 
   * @param {string} [parameters.sku.name] Gets or sets name of application
   * gateway SKU
   * 
   * @param {string} [parameters.sku.tier] Gets or sets tier of application
   * gateway
   * 
   * @param {number} [parameters.sku.capacity] Gets or sets capacity (instance
   * count) of application gateway
   * 
   * @param {string} [parameters.operationalState] Gets operational state of
   * application gateway resource
   * 
   * @param {IEnumerable} [parameters.gatewayIPConfigurations] Gets or sets
   * subnets of application gateway resource
   * 
   * @param {IEnumerable} [parameters.sslCertificates] Gets or sets ssl
   * certificates of application gateway resource
   * 
   * @param {IEnumerable} [parameters.frontendIPConfigurations] Gets or sets
   * frontend IP addresses of application gateway resource
   * 
   * @param {IEnumerable} [parameters.frontendPorts] Gets or sets frontend
   * ports of application gateway resource
   * 
   * @param {IEnumerable} [parameters.backendAddressPools] Gets or sets backend
   * address pool of application gateway resource
   * 
   * @param {IEnumerable} [parameters.backendHttpSettingsCollection] Gets or
   * sets backend http settings of application gateway resource
   * 
   * @param {IEnumerable} [parameters.httpListeners] Gets or sets HTTP
   * listeners of application gateway resource
   * 
   * @param {IEnumerable} [parameters.requestRoutingRules] Gets or sets request
   * routing rules of application gateway resource
   * 
   * @param {string} [parameters.provisioningState] Gets or sets Provisioning
   * state of the ApplicationGateway resource Updating/Deleting/Failed
   * 
   * @param {string} [parameters.resourceGuid] Gets or sets resource guid
   * property of the ApplicationGateway resource
   * 
   * @param {string} [parameters.etag] Gets a unique read-only string that
   * changes whenever the resource is updated
   * 
   * @param {string} [parameters.id] Gets or sets the ID of the resource.
   * 
   * @param {string} [parameters.name] Gets or sets the name of the resource.
   * 
   * @param {string} [parameters.type] Gets or sets the type of the resource.
   * 
   * @param {string} [parameters.location] Gets or sets the location of the
   * resource.
   * 
   * @param {object} [parameters.tags] Gets or sets the tags attached to the
   * resource.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ApplicationGatewayOperations.prototype.createOrUpdate = function(resourceGroupName, applicationGatewayName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.applicationGateways.beginCreateOrUpdating(resourceGroupName, applicationGatewayName, parameters, function (err, result) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var delayInSeconds = result.retryAfter;
      if (delayInSeconds === 0) {
        delayInSeconds = 30;
      }
      if (client2.longRunningOperationInitialTimeout >= 0) {
        delayInSeconds = client2.longRunningOperationInitialTimeout;
      }
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.getLongRunningOperationStatus(result.azureAsyncOperation, function (err2, result2) {
            if (err2 !== null && err2 !== undefined) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                return callback(null, result2);
              } else {
                delayInSeconds = result2.retryAfter;
                if (delayInSeconds === 0) {
                  delayInSeconds = 15;
                }
                if (client2.longRunningOperationRetryTimeout >= 0) {
                  delayInSeconds = client2.longRunningOperationRetryTimeout;
                }
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  /**
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} applicationGatewayName The name of the applicationgateway.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ApplicationGatewayOperations.prototype.deleteMethod = function(resourceGroupName, applicationGatewayName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.applicationGateways.beginDeleting(resourceGroupName, applicationGatewayName, function (err, result) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var delayInSeconds = result.retryAfter;
      if (delayInSeconds === 0) {
        delayInSeconds = 30;
      }
      if (client2.longRunningOperationInitialTimeout >= 0) {
        delayInSeconds = client2.longRunningOperationInitialTimeout;
      }
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.getLongRunningOperationStatus(result.azureAsyncOperation, function (err2, result2) {
            if (err2 !== null && err2 !== undefined) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                return callback(null, result2);
              } else {
                delayInSeconds = result2.retryAfter;
                if (delayInSeconds === 0) {
                  delayInSeconds = 15;
                }
                if (client2.longRunningOperationRetryTimeout >= 0) {
                  delayInSeconds = client2.longRunningOperationRetryTimeout;
                }
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  /**
   * The Get applicationgateway operation retreives information about the
   * specified applicationgateway.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} applicationGatewayName The name of the applicationgateway.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ApplicationGatewayOperations.prototype.get = function(resourceGroupName, applicationGatewayName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (applicationGatewayName === null || applicationGatewayName === undefined) {
      return callback(new Error('applicationGatewayName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Network';
    url2 = url2 + '/applicationGateways/';
    url2 = url2 + encodeURIComponent(applicationGatewayName);
    var queryParameters = [];
    queryParameters.push('api-version=2015-05-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var applicationGatewayInstance = { backendAddressPools: [], backendHttpSettingsCollection: [], frontendIPConfigurations: [], frontendPorts: [], gatewayIPConfigurations: [], httpListeners: [], requestRoutingRules: [], sslCertificates: [], tags: {} };
          result.applicationGateway = applicationGatewayInstance;
          
          var propertiesValue = responseDoc['properties'];
          if (propertiesValue !== null && propertiesValue !== undefined) {
            var skuValue = propertiesValue['sku'];
            if (skuValue !== null && skuValue !== undefined) {
              var skuInstance = {};
              applicationGatewayInstance.sku = skuInstance;
              
              var nameValue = skuValue['name'];
              if (nameValue !== null && nameValue !== undefined) {
                var nameInstance = nameValue;
                skuInstance.name = nameInstance;
              }
              
              var tierValue = skuValue['tier'];
              if (tierValue !== null && tierValue !== undefined) {
                var tierInstance = tierValue;
                skuInstance.tier = tierInstance;
              }
              
              var capacityValue = skuValue['capacity'];
              if (capacityValue !== null && capacityValue !== undefined) {
                var capacityInstance = capacityValue;
                skuInstance.capacity = capacityInstance;
              }
            }
            
            var operationalStateValue = propertiesValue['operationalState'];
            if (operationalStateValue !== null && operationalStateValue !== undefined) {
              var operationalStateInstance = operationalStateValue;
              applicationGatewayInstance.operationalState = operationalStateInstance;
            }
            
            var gatewayIPConfigurationsArray = propertiesValue['gatewayIPConfigurations'];
            if (gatewayIPConfigurationsArray !== null && gatewayIPConfigurationsArray !== undefined) {
              for (var loweredIndex1 = 0; loweredIndex1 < gatewayIPConfigurationsArray.length; loweredIndex1 = loweredIndex1 + 1) {
                var gatewayIPConfigurationsValue = gatewayIPConfigurationsArray[loweredIndex1];
                var applicationGatewayIPConfigurationJsonFormatInstance = {};
                applicationGatewayInstance.gatewayIPConfigurations.push(applicationGatewayIPConfigurationJsonFormatInstance);
                
                var propertiesValue2 = gatewayIPConfigurationsValue['properties'];
                if (propertiesValue2 !== null && propertiesValue2 !== undefined) {
                  var subnetValue = propertiesValue2['subnet'];
                  if (subnetValue !== null && subnetValue !== undefined) {
                    var subnetInstance = {};
                    applicationGatewayIPConfigurationJsonFormatInstance.subnet = subnetInstance;
                    
                    var idValue = subnetValue['id'];
                    if (idValue !== null && idValue !== undefined) {
                      var idInstance = idValue;
                      subnetInstance.id = idInstance;
                    }
                  }
                  
                  var provisioningStateValue = propertiesValue2['provisioningState'];
                  if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
                    var provisioningStateInstance = provisioningStateValue;
                    applicationGatewayIPConfigurationJsonFormatInstance.provisioningState = provisioningStateInstance;
                  }
                }
                
                var nameValue2 = gatewayIPConfigurationsValue['name'];
                if (nameValue2 !== null && nameValue2 !== undefined) {
                  var nameInstance2 = nameValue2;
                  applicationGatewayIPConfigurationJsonFormatInstance.name = nameInstance2;
                }
                
                var etagValue = gatewayIPConfigurationsValue['etag'];
                if (etagValue !== null && etagValue !== undefined) {
                  var etagInstance = etagValue;
                  applicationGatewayIPConfigurationJsonFormatInstance.etag = etagInstance;
                }
                
                var idValue2 = gatewayIPConfigurationsValue['id'];
                if (idValue2 !== null && idValue2 !== undefined) {
                  var idInstance2 = idValue2;
                  applicationGatewayIPConfigurationJsonFormatInstance.id = idInstance2;
                }
              }
            }
            
            var sslCertificatesArray = propertiesValue['sslCertificates'];
            if (sslCertificatesArray !== null && sslCertificatesArray !== undefined) {
              for (var loweredIndex2 = 0; loweredIndex2 < sslCertificatesArray.length; loweredIndex2 = loweredIndex2 + 1) {
                var sslCertificatesValue = sslCertificatesArray[loweredIndex2];
                var applicationGatewaySslCertificateJsonFormatInstance = {};
                applicationGatewayInstance.sslCertificates.push(applicationGatewaySslCertificateJsonFormatInstance);
                
                var propertiesValue3 = sslCertificatesValue['properties'];
                if (propertiesValue3 !== null && propertiesValue3 !== undefined) {
                  var dataValue = propertiesValue3['data'];
                  if (dataValue !== null && dataValue !== undefined) {
                    var dataInstance = dataValue;
                    applicationGatewaySslCertificateJsonFormatInstance.data = dataInstance;
                  }
                  
                  var passwordValue = propertiesValue3['password'];
                  if (passwordValue !== null && passwordValue !== undefined) {
                    var passwordInstance = passwordValue;
                    applicationGatewaySslCertificateJsonFormatInstance.password = passwordInstance;
                  }
                  
                  var publicCertDataValue = propertiesValue3['publicCertData'];
                  if (publicCertDataValue !== null && publicCertDataValue !== undefined) {
                    var publicCertDataInstance = publicCertDataValue;
                    applicationGatewaySslCertificateJsonFormatInstance.publicCertData = publicCertDataInstance;
                  }
                  
                  var provisioningStateValue2 = propertiesValue3['provisioningState'];
                  if (provisioningStateValue2 !== null && provisioningStateValue2 !== undefined) {
                    var provisioningStateInstance2 = provisioningStateValue2;
                    applicationGatewaySslCertificateJsonFormatInstance.provisioningState = provisioningStateInstance2;
                  }
                }
                
                var nameValue3 = sslCertificatesValue['name'];
                if (nameValue3 !== null && nameValue3 !== undefined) {
                  var nameInstance3 = nameValue3;
                  applicationGatewaySslCertificateJsonFormatInstance.name = nameInstance3;
                }
                
                var etagValue2 = sslCertificatesValue['etag'];
                if (etagValue2 !== null && etagValue2 !== undefined) {
                  var etagInstance2 = etagValue2;
                  applicationGatewaySslCertificateJsonFormatInstance.etag = etagInstance2;
                }
                
                var idValue3 = sslCertificatesValue['id'];
                if (idValue3 !== null && idValue3 !== undefined) {
                  var idInstance3 = idValue3;
                  applicationGatewaySslCertificateJsonFormatInstance.id = idInstance3;
                }
              }
            }
            
            var frontendIPConfigurationsArray = propertiesValue['frontendIPConfigurations'];
            if (frontendIPConfigurationsArray !== null && frontendIPConfigurationsArray !== undefined) {
              for (var loweredIndex3 = 0; loweredIndex3 < frontendIPConfigurationsArray.length; loweredIndex3 = loweredIndex3 + 1) {
                var frontendIPConfigurationsValue = frontendIPConfigurationsArray[loweredIndex3];
                var applicationGatewayFrontendIPConfigurationJsonFormatInstance = {};
                applicationGatewayInstance.frontendIPConfigurations.push(applicationGatewayFrontendIPConfigurationJsonFormatInstance);
                
                var propertiesValue4 = frontendIPConfigurationsValue['properties'];
                if (propertiesValue4 !== null && propertiesValue4 !== undefined) {
                  var privateIPAddressValue = propertiesValue4['privateIPAddress'];
                  if (privateIPAddressValue !== null && privateIPAddressValue !== undefined) {
                    var privateIPAddressInstance = privateIPAddressValue;
                    applicationGatewayFrontendIPConfigurationJsonFormatInstance.privateIPAddress = privateIPAddressInstance;
                  }
                  
                  var privateIPAllocationMethodValue = propertiesValue4['privateIPAllocationMethod'];
                  if (privateIPAllocationMethodValue !== null && privateIPAllocationMethodValue !== undefined) {
                    var privateIPAllocationMethodInstance = privateIPAllocationMethodValue;
                    applicationGatewayFrontendIPConfigurationJsonFormatInstance.privateIPAllocationMethod = privateIPAllocationMethodInstance;
                  }
                  
                  var subnetValue2 = propertiesValue4['subnet'];
                  if (subnetValue2 !== null && subnetValue2 !== undefined) {
                    var subnetInstance2 = {};
                    applicationGatewayFrontendIPConfigurationJsonFormatInstance.subnet = subnetInstance2;
                    
                    var idValue4 = subnetValue2['id'];
                    if (idValue4 !== null && idValue4 !== undefined) {
                      var idInstance4 = idValue4;
                      subnetInstance2.id = idInstance4;
                    }
                  }
                  
                  var publicIPAddressValue = propertiesValue4['publicIPAddress'];
                  if (publicIPAddressValue !== null && publicIPAddressValue !== undefined) {
                    var publicIPAddressInstance = {};
                    applicationGatewayFrontendIPConfigurationJsonFormatInstance.publicIPAddress = publicIPAddressInstance;
                    
                    var idValue5 = publicIPAddressValue['id'];
                    if (idValue5 !== null && idValue5 !== undefined) {
                      var idInstance5 = idValue5;
                      publicIPAddressInstance.id = idInstance5;
                    }
                  }
                  
                  var provisioningStateValue3 = propertiesValue4['provisioningState'];
                  if (provisioningStateValue3 !== null && provisioningStateValue3 !== undefined) {
                    var provisioningStateInstance3 = provisioningStateValue3;
                    applicationGatewayFrontendIPConfigurationJsonFormatInstance.provisioningState = provisioningStateInstance3;
                  }
                }
                
                var nameValue4 = frontendIPConfigurationsValue['name'];
                if (nameValue4 !== null && nameValue4 !== undefined) {
                  var nameInstance4 = nameValue4;
                  applicationGatewayFrontendIPConfigurationJsonFormatInstance.name = nameInstance4;
                }
                
                var etagValue3 = frontendIPConfigurationsValue['etag'];
                if (etagValue3 !== null && etagValue3 !== undefined) {
                  var etagInstance3 = etagValue3;
                  applicationGatewayFrontendIPConfigurationJsonFormatInstance.etag = etagInstance3;
                }
                
                var idValue6 = frontendIPConfigurationsValue['id'];
                if (idValue6 !== null && idValue6 !== undefined) {
                  var idInstance6 = idValue6;
                  applicationGatewayFrontendIPConfigurationJsonFormatInstance.id = idInstance6;
                }
              }
            }
            
            var frontendPortsArray = propertiesValue['frontendPorts'];
            if (frontendPortsArray !== null && frontendPortsArray !== undefined) {
              for (var loweredIndex4 = 0; loweredIndex4 < frontendPortsArray.length; loweredIndex4 = loweredIndex4 + 1) {
                var frontendPortsValue = frontendPortsArray[loweredIndex4];
                var applicationGatewayFrontendPortJsonFormatInstance = {};
                applicationGatewayInstance.frontendPorts.push(applicationGatewayFrontendPortJsonFormatInstance);
                
                var propertiesValue5 = frontendPortsValue['properties'];
                if (propertiesValue5 !== null && propertiesValue5 !== undefined) {
                  var portValue = propertiesValue5['port'];
                  if (portValue !== null && portValue !== undefined) {
                    var portInstance = portValue;
                    applicationGatewayFrontendPortJsonFormatInstance.port = portInstance;
                  }
                  
                  var provisioningStateValue4 = propertiesValue5['provisioningState'];
                  if (provisioningStateValue4 !== null && provisioningStateValue4 !== undefined) {
                    var provisioningStateInstance4 = provisioningStateValue4;
                    applicationGatewayFrontendPortJsonFormatInstance.provisioningState = provisioningStateInstance4;
                  }
                }
                
                var nameValue5 = frontendPortsValue['name'];
                if (nameValue5 !== null && nameValue5 !== undefined) {
                  var nameInstance5 = nameValue5;
                  applicationGatewayFrontendPortJsonFormatInstance.name = nameInstance5;
                }
                
                var etagValue4 = frontendPortsValue['etag'];
                if (etagValue4 !== null && etagValue4 !== undefined) {
                  var etagInstance4 = etagValue4;
                  applicationGatewayFrontendPortJsonFormatInstance.etag = etagInstance4;
                }
                
                var idValue7 = frontendPortsValue['id'];
                if (idValue7 !== null && idValue7 !== undefined) {
                  var idInstance7 = idValue7;
                  applicationGatewayFrontendPortJsonFormatInstance.id = idInstance7;
                }
              }
            }
            
            var backendAddressPoolsArray = propertiesValue['backendAddressPools'];
            if (backendAddressPoolsArray !== null && backendAddressPoolsArray !== undefined) {
              for (var loweredIndex5 = 0; loweredIndex5 < backendAddressPoolsArray.length; loweredIndex5 = loweredIndex5 + 1) {
                var backendAddressPoolsValue = backendAddressPoolsArray[loweredIndex5];
                var applicationGatewayBackendAddressPoolJsonFormatInstance = { backendAddresses: [], backendIPConfigurations: [] };
                applicationGatewayInstance.backendAddressPools.push(applicationGatewayBackendAddressPoolJsonFormatInstance);
                
                var propertiesValue6 = backendAddressPoolsValue['properties'];
                if (propertiesValue6 !== null && propertiesValue6 !== undefined) {
                  var backendIPConfigurationsArray = propertiesValue6['backendIPConfigurations'];
                  if (backendIPConfigurationsArray !== null && backendIPConfigurationsArray !== undefined) {
                    for (var loweredIndex6 = 0; loweredIndex6 < backendIPConfigurationsArray.length; loweredIndex6 = loweredIndex6 + 1) {
                      var backendIPConfigurationsValue = backendIPConfigurationsArray[loweredIndex6];
                      var resourceIdInstance = {};
                      applicationGatewayBackendAddressPoolJsonFormatInstance.backendIPConfigurations.push(resourceIdInstance);
                      
                      var idValue8 = backendIPConfigurationsValue['id'];
                      if (idValue8 !== null && idValue8 !== undefined) {
                        var idInstance8 = idValue8;
                        resourceIdInstance.id = idInstance8;
                      }
                    }
                  }
                  
                  var backendAddressesArray = propertiesValue6['backendAddresses'];
                  if (backendAddressesArray !== null && backendAddressesArray !== undefined) {
                    for (var loweredIndex7 = 0; loweredIndex7 < backendAddressesArray.length; loweredIndex7 = loweredIndex7 + 1) {
                      var backendAddressesValue = backendAddressesArray[loweredIndex7];
                      var applicationGatewayBackendAddressInstance = {};
                      applicationGatewayBackendAddressPoolJsonFormatInstance.backendAddresses.push(applicationGatewayBackendAddressInstance);
                      
                      var fqdnValue = backendAddressesValue['fqdn'];
                      if (fqdnValue !== null && fqdnValue !== undefined) {
                        var fqdnInstance = fqdnValue;
                        applicationGatewayBackendAddressInstance.fqdn = fqdnInstance;
                      }
                      
                      var ipAddressValue = backendAddressesValue['ipAddress'];
                      if (ipAddressValue !== null && ipAddressValue !== undefined) {
                        var ipAddressInstance = ipAddressValue;
                        applicationGatewayBackendAddressInstance.ipAddress = ipAddressInstance;
                      }
                    }
                  }
                  
                  var provisioningStateValue5 = propertiesValue6['provisioningState'];
                  if (provisioningStateValue5 !== null && provisioningStateValue5 !== undefined) {
                    var provisioningStateInstance5 = provisioningStateValue5;
                    applicationGatewayBackendAddressPoolJsonFormatInstance.provisioningState = provisioningStateInstance5;
                  }
                }
                
                var nameValue6 = backendAddressPoolsValue['name'];
                if (nameValue6 !== null && nameValue6 !== undefined) {
                  var nameInstance6 = nameValue6;
                  applicationGatewayBackendAddressPoolJsonFormatInstance.name = nameInstance6;
                }
                
                var etagValue5 = backendAddressPoolsValue['etag'];
                if (etagValue5 !== null && etagValue5 !== undefined) {
                  var etagInstance5 = etagValue5;
                  applicationGatewayBackendAddressPoolJsonFormatInstance.etag = etagInstance5;
                }
                
                var idValue9 = backendAddressPoolsValue['id'];
                if (idValue9 !== null && idValue9 !== undefined) {
                  var idInstance9 = idValue9;
                  applicationGatewayBackendAddressPoolJsonFormatInstance.id = idInstance9;
                }
              }
            }
            
            var backendHttpSettingsCollectionArray = propertiesValue['backendHttpSettingsCollection'];
            if (backendHttpSettingsCollectionArray !== null && backendHttpSettingsCollectionArray !== undefined) {
              for (var loweredIndex8 = 0; loweredIndex8 < backendHttpSettingsCollectionArray.length; loweredIndex8 = loweredIndex8 + 1) {
                var backendHttpSettingsCollectionValue = backendHttpSettingsCollectionArray[loweredIndex8];
                var applicationGatewayBackendHttpSettingsJsonFormatInstance = {};
                applicationGatewayInstance.backendHttpSettingsCollection.push(applicationGatewayBackendHttpSettingsJsonFormatInstance);
                
                var propertiesValue7 = backendHttpSettingsCollectionValue['properties'];
                if (propertiesValue7 !== null && propertiesValue7 !== undefined) {
                  var portValue2 = propertiesValue7['port'];
                  if (portValue2 !== null && portValue2 !== undefined) {
                    var portInstance2 = portValue2;
                    applicationGatewayBackendHttpSettingsJsonFormatInstance.port = portInstance2;
                  }
                  
                  var protocolValue = propertiesValue7['protocol'];
                  if (protocolValue !== null && protocolValue !== undefined) {
                    var protocolInstance = protocolValue;
                    applicationGatewayBackendHttpSettingsJsonFormatInstance.protocol = protocolInstance;
                  }
                  
                  var cookieBasedAffinityValue = propertiesValue7['cookieBasedAffinity'];
                  if (cookieBasedAffinityValue !== null && cookieBasedAffinityValue !== undefined) {
                    var cookieBasedAffinityInstance = cookieBasedAffinityValue;
                    applicationGatewayBackendHttpSettingsJsonFormatInstance.cookieBasedAffinity = cookieBasedAffinityInstance;
                  }
                  
                  var provisioningStateValue6 = propertiesValue7['provisioningState'];
                  if (provisioningStateValue6 !== null && provisioningStateValue6 !== undefined) {
                    var provisioningStateInstance6 = provisioningStateValue6;
                    applicationGatewayBackendHttpSettingsJsonFormatInstance.provisioningState = provisioningStateInstance6;
                  }
                }
                
                var nameValue7 = backendHttpSettingsCollectionValue['name'];
                if (nameValue7 !== null && nameValue7 !== undefined) {
                  var nameInstance7 = nameValue7;
                  applicationGatewayBackendHttpSettingsJsonFormatInstance.name = nameInstance7;
                }
                
                var etagValue6 = backendHttpSettingsCollectionValue['etag'];
                if (etagValue6 !== null && etagValue6 !== undefined) {
                  var etagInstance6 = etagValue6;
                  applicationGatewayBackendHttpSettingsJsonFormatInstance.etag = etagInstance6;
                }
                
                var idValue10 = backendHttpSettingsCollectionValue['id'];
                if (idValue10 !== null && idValue10 !== undefined) {
                  var idInstance10 = idValue10;
                  applicationGatewayBackendHttpSettingsJsonFormatInstance.id = idInstance10;
                }
              }
            }
            
            var httpListenersArray = propertiesValue['httpListeners'];
            if (httpListenersArray !== null && httpListenersArray !== undefined) {
              for (var loweredIndex9 = 0; loweredIndex9 < httpListenersArray.length; loweredIndex9 = loweredIndex9 + 1) {
                var httpListenersValue = httpListenersArray[loweredIndex9];
                var applicationGatewayHttpListenerJsonFormatInstance = {};
                applicationGatewayInstance.httpListeners.push(applicationGatewayHttpListenerJsonFormatInstance);
                
                var propertiesValue8 = httpListenersValue['properties'];
                if (propertiesValue8 !== null && propertiesValue8 !== undefined) {
                  var frontendIPConfigurationValue = propertiesValue8['frontendIPConfiguration'];
                  if (frontendIPConfigurationValue !== null && frontendIPConfigurationValue !== undefined) {
                    var frontendIPConfigurationInstance = {};
                    applicationGatewayHttpListenerJsonFormatInstance.frontendIPConfiguration = frontendIPConfigurationInstance;
                    
                    var idValue11 = frontendIPConfigurationValue['id'];
                    if (idValue11 !== null && idValue11 !== undefined) {
                      var idInstance11 = idValue11;
                      frontendIPConfigurationInstance.id = idInstance11;
                    }
                  }
                  
                  var frontendPortValue = propertiesValue8['frontendPort'];
                  if (frontendPortValue !== null && frontendPortValue !== undefined) {
                    var frontendPortInstance = {};
                    applicationGatewayHttpListenerJsonFormatInstance.frontendPort = frontendPortInstance;
                    
                    var idValue12 = frontendPortValue['id'];
                    if (idValue12 !== null && idValue12 !== undefined) {
                      var idInstance12 = idValue12;
                      frontendPortInstance.id = idInstance12;
                    }
                  }
                  
                  var protocolValue2 = propertiesValue8['protocol'];
                  if (protocolValue2 !== null && protocolValue2 !== undefined) {
                    var protocolInstance2 = protocolValue2;
                    applicationGatewayHttpListenerJsonFormatInstance.protocol = protocolInstance2;
                  }
                  
                  var sslCertificateValue = propertiesValue8['sslCertificate'];
                  if (sslCertificateValue !== null && sslCertificateValue !== undefined) {
                    var sslCertificateInstance = {};
                    applicationGatewayHttpListenerJsonFormatInstance.sslCertificate = sslCertificateInstance;
                    
                    var idValue13 = sslCertificateValue['id'];
                    if (idValue13 !== null && idValue13 !== undefined) {
                      var idInstance13 = idValue13;
                      sslCertificateInstance.id = idInstance13;
                    }
                  }
                  
                  var provisioningStateValue7 = propertiesValue8['provisioningState'];
                  if (provisioningStateValue7 !== null && provisioningStateValue7 !== undefined) {
                    var provisioningStateInstance7 = provisioningStateValue7;
                    applicationGatewayHttpListenerJsonFormatInstance.provisioningState = provisioningStateInstance7;
                  }
                }
                
                var nameValue8 = httpListenersValue['name'];
                if (nameValue8 !== null && nameValue8 !== undefined) {
                  var nameInstance8 = nameValue8;
                  applicationGatewayHttpListenerJsonFormatInstance.name = nameInstance8;
                }
                
                var etagValue7 = httpListenersValue['etag'];
                if (etagValue7 !== null && etagValue7 !== undefined) {
                  var etagInstance7 = etagValue7;
                  applicationGatewayHttpListenerJsonFormatInstance.etag = etagInstance7;
                }
                
                var idValue14 = httpListenersValue['id'];
                if (idValue14 !== null && idValue14 !== undefined) {
                  var idInstance14 = idValue14;
                  applicationGatewayHttpListenerJsonFormatInstance.id = idInstance14;
                }
              }
            }
            
            var requestRoutingRulesArray = propertiesValue['requestRoutingRules'];
            if (requestRoutingRulesArray !== null && requestRoutingRulesArray !== undefined) {
              for (var loweredIndex10 = 0; loweredIndex10 < requestRoutingRulesArray.length; loweredIndex10 = loweredIndex10 + 1) {
                var requestRoutingRulesValue = requestRoutingRulesArray[loweredIndex10];
                var applicationGatewayRequestRoutingRuleJsonFormatInstance = {};
                applicationGatewayInstance.requestRoutingRules.push(applicationGatewayRequestRoutingRuleJsonFormatInstance);
                
                var propertiesValue9 = requestRoutingRulesValue['properties'];
                if (propertiesValue9 !== null && propertiesValue9 !== undefined) {
                  var ruleTypeValue = propertiesValue9['ruleType'];
                  if (ruleTypeValue !== null && ruleTypeValue !== undefined) {
                    var ruleTypeInstance = ruleTypeValue;
                    applicationGatewayRequestRoutingRuleJsonFormatInstance.ruleType = ruleTypeInstance;
                  }
                  
                  var backendAddressPoolValue = propertiesValue9['backendAddressPool'];
                  if (backendAddressPoolValue !== null && backendAddressPoolValue !== undefined) {
                    var backendAddressPoolInstance = {};
                    applicationGatewayRequestRoutingRuleJsonFormatInstance.backendAddressPool = backendAddressPoolInstance;
                    
                    var idValue15 = backendAddressPoolValue['id'];
                    if (idValue15 !== null && idValue15 !== undefined) {
                      var idInstance15 = idValue15;
                      backendAddressPoolInstance.id = idInstance15;
                    }
                  }
                  
                  var backendHttpSettingsValue = propertiesValue9['backendHttpSettings'];
                  if (backendHttpSettingsValue !== null && backendHttpSettingsValue !== undefined) {
                    var backendHttpSettingsInstance = {};
                    applicationGatewayRequestRoutingRuleJsonFormatInstance.backendHttpSettings = backendHttpSettingsInstance;
                    
                    var idValue16 = backendHttpSettingsValue['id'];
                    if (idValue16 !== null && idValue16 !== undefined) {
                      var idInstance16 = idValue16;
                      backendHttpSettingsInstance.id = idInstance16;
                    }
                  }
                  
                  var httpListenerValue = propertiesValue9['httpListener'];
                  if (httpListenerValue !== null && httpListenerValue !== undefined) {
                    var httpListenerInstance = {};
                    applicationGatewayRequestRoutingRuleJsonFormatInstance.httpListener = httpListenerInstance;
                    
                    var idValue17 = httpListenerValue['id'];
                    if (idValue17 !== null && idValue17 !== undefined) {
                      var idInstance17 = idValue17;
                      httpListenerInstance.id = idInstance17;
                    }
                  }
                  
                  var provisioningStateValue8 = propertiesValue9['provisioningState'];
                  if (provisioningStateValue8 !== null && provisioningStateValue8 !== undefined) {
                    var provisioningStateInstance8 = provisioningStateValue8;
                    applicationGatewayRequestRoutingRuleJsonFormatInstance.provisioningState = provisioningStateInstance8;
                  }
                }
                
                var nameValue9 = requestRoutingRulesValue['name'];
                if (nameValue9 !== null && nameValue9 !== undefined) {
                  var nameInstance9 = nameValue9;
                  applicationGatewayRequestRoutingRuleJsonFormatInstance.name = nameInstance9;
                }
                
                var etagValue8 = requestRoutingRulesValue['etag'];
                if (etagValue8 !== null && etagValue8 !== undefined) {
                  var etagInstance8 = etagValue8;
                  applicationGatewayRequestRoutingRuleJsonFormatInstance.etag = etagInstance8;
                }
                
                var idValue18 = requestRoutingRulesValue['id'];
                if (idValue18 !== null && idValue18 !== undefined) {
                  var idInstance18 = idValue18;
                  applicationGatewayRequestRoutingRuleJsonFormatInstance.id = idInstance18;
                }
              }
            }
            
            var resourceGuidValue = propertiesValue['resourceGuid'];
            if (resourceGuidValue !== null && resourceGuidValue !== undefined) {
              var resourceGuidInstance = resourceGuidValue;
              applicationGatewayInstance.resourceGuid = resourceGuidInstance;
            }
            
            var provisioningStateValue9 = propertiesValue['provisioningState'];
            if (provisioningStateValue9 !== null && provisioningStateValue9 !== undefined) {
              var provisioningStateInstance9 = provisioningStateValue9;
              applicationGatewayInstance.provisioningState = provisioningStateInstance9;
            }
          }
          
          var etagValue9 = responseDoc['etag'];
          if (etagValue9 !== null && etagValue9 !== undefined) {
            var etagInstance9 = etagValue9;
            applicationGatewayInstance.etag = etagInstance9;
          }
          
          var idValue19 = responseDoc['id'];
          if (idValue19 !== null && idValue19 !== undefined) {
            var idInstance19 = idValue19;
            applicationGatewayInstance.id = idInstance19;
          }
          
          var nameValue10 = responseDoc['name'];
          if (nameValue10 !== null && nameValue10 !== undefined) {
            var nameInstance10 = nameValue10;
            applicationGatewayInstance.name = nameInstance10;
          }
          
          var typeValue = responseDoc['type'];
          if (typeValue !== null && typeValue !== undefined) {
            var typeInstance = typeValue;
            applicationGatewayInstance.type = typeInstance;
          }
          
          var locationValue = responseDoc['location'];
          if (locationValue !== null && locationValue !== undefined) {
            var locationInstance = locationValue;
            applicationGatewayInstance.location = locationInstance;
          }
          
          var tagsSequenceElement = responseDoc['tags'];
          if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
            for (var property in tagsSequenceElement) {
              var tagsKey = property;
              var tagsValue = tagsSequenceElement[property];
              applicationGatewayInstance.tags[tagsKey] = tagsValue;
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The List ApplicationGateway opertion retrieves all the applicationgateways
   * in a resource group.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ApplicationGatewayOperations.prototype.list = function(resourceGroupName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Network';
    url2 = url2 + '/applicationGateways';
    var queryParameters = [];
    queryParameters.push('api-version=2015-05-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = { applicationGateways: [] };
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var valueArray = responseDoc['value'];
          if (valueArray !== null && valueArray !== undefined) {
            for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var valueValue = valueArray[loweredIndex1];
              var applicationGatewayJsonFormatInstance = { backendAddressPools: [], backendHttpSettingsCollection: [], frontendIPConfigurations: [], frontendPorts: [], gatewayIPConfigurations: [], httpListeners: [], requestRoutingRules: [], sslCertificates: [], tags: {} };
              result.applicationGateways.push(applicationGatewayJsonFormatInstance);
              
              var propertiesValue = valueValue['properties'];
              if (propertiesValue !== null && propertiesValue !== undefined) {
                var skuValue = propertiesValue['sku'];
                if (skuValue !== null && skuValue !== undefined) {
                  var skuInstance = {};
                  applicationGatewayJsonFormatInstance.sku = skuInstance;
                  
                  var nameValue = skuValue['name'];
                  if (nameValue !== null && nameValue !== undefined) {
                    var nameInstance = nameValue;
                    skuInstance.name = nameInstance;
                  }
                  
                  var tierValue = skuValue['tier'];
                  if (tierValue !== null && tierValue !== undefined) {
                    var tierInstance = tierValue;
                    skuInstance.tier = tierInstance;
                  }
                  
                  var capacityValue = skuValue['capacity'];
                  if (capacityValue !== null && capacityValue !== undefined) {
                    var capacityInstance = capacityValue;
                    skuInstance.capacity = capacityInstance;
                  }
                }
                
                var operationalStateValue = propertiesValue['operationalState'];
                if (operationalStateValue !== null && operationalStateValue !== undefined) {
                  var operationalStateInstance = operationalStateValue;
                  applicationGatewayJsonFormatInstance.operationalState = operationalStateInstance;
                }
                
                var gatewayIPConfigurationsArray = propertiesValue['gatewayIPConfigurations'];
                if (gatewayIPConfigurationsArray !== null && gatewayIPConfigurationsArray !== undefined) {
                  for (var loweredIndex2 = 0; loweredIndex2 < gatewayIPConfigurationsArray.length; loweredIndex2 = loweredIndex2 + 1) {
                    var gatewayIPConfigurationsValue = gatewayIPConfigurationsArray[loweredIndex2];
                    var applicationGatewayIPConfigurationJsonFormatInstance = {};
                    applicationGatewayJsonFormatInstance.gatewayIPConfigurations.push(applicationGatewayIPConfigurationJsonFormatInstance);
                    
                    var propertiesValue2 = gatewayIPConfigurationsValue['properties'];
                    if (propertiesValue2 !== null && propertiesValue2 !== undefined) {
                      var subnetValue = propertiesValue2['subnet'];
                      if (subnetValue !== null && subnetValue !== undefined) {
                        var subnetInstance = {};
                        applicationGatewayIPConfigurationJsonFormatInstance.subnet = subnetInstance;
                        
                        var idValue = subnetValue['id'];
                        if (idValue !== null && idValue !== undefined) {
                          var idInstance = idValue;
                          subnetInstance.id = idInstance;
                        }
                      }
                      
                      var provisioningStateValue = propertiesValue2['provisioningState'];
                      if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
                        var provisioningStateInstance = provisioningStateValue;
                        applicationGatewayIPConfigurationJsonFormatInstance.provisioningState = provisioningStateInstance;
                      }
                    }
                    
                    var nameValue2 = gatewayIPConfigurationsValue['name'];
                    if (nameValue2 !== null && nameValue2 !== undefined) {
                      var nameInstance2 = nameValue2;
                      applicationGatewayIPConfigurationJsonFormatInstance.name = nameInstance2;
                    }
                    
                    var etagValue = gatewayIPConfigurationsValue['etag'];
                    if (etagValue !== null && etagValue !== undefined) {
                      var etagInstance = etagValue;
                      applicationGatewayIPConfigurationJsonFormatInstance.etag = etagInstance;
                    }
                    
                    var idValue2 = gatewayIPConfigurationsValue['id'];
                    if (idValue2 !== null && idValue2 !== undefined) {
                      var idInstance2 = idValue2;
                      applicationGatewayIPConfigurationJsonFormatInstance.id = idInstance2;
                    }
                  }
                }
                
                var sslCertificatesArray = propertiesValue['sslCertificates'];
                if (sslCertificatesArray !== null && sslCertificatesArray !== undefined) {
                  for (var loweredIndex3 = 0; loweredIndex3 < sslCertificatesArray.length; loweredIndex3 = loweredIndex3 + 1) {
                    var sslCertificatesValue = sslCertificatesArray[loweredIndex3];
                    var applicationGatewaySslCertificateJsonFormatInstance = {};
                    applicationGatewayJsonFormatInstance.sslCertificates.push(applicationGatewaySslCertificateJsonFormatInstance);
                    
                    var propertiesValue3 = sslCertificatesValue['properties'];
                    if (propertiesValue3 !== null && propertiesValue3 !== undefined) {
                      var dataValue = propertiesValue3['data'];
                      if (dataValue !== null && dataValue !== undefined) {
                        var dataInstance = dataValue;
                        applicationGatewaySslCertificateJsonFormatInstance.data = dataInstance;
                      }
                      
                      var passwordValue = propertiesValue3['password'];
                      if (passwordValue !== null && passwordValue !== undefined) {
                        var passwordInstance = passwordValue;
                        applicationGatewaySslCertificateJsonFormatInstance.password = passwordInstance;
                      }
                      
                      var publicCertDataValue = propertiesValue3['publicCertData'];
                      if (publicCertDataValue !== null && publicCertDataValue !== undefined) {
                        var publicCertDataInstance = publicCertDataValue;
                        applicationGatewaySslCertificateJsonFormatInstance.publicCertData = publicCertDataInstance;
                      }
                      
                      var provisioningStateValue2 = propertiesValue3['provisioningState'];
                      if (provisioningStateValue2 !== null && provisioningStateValue2 !== undefined) {
                        var provisioningStateInstance2 = provisioningStateValue2;
                        applicationGatewaySslCertificateJsonFormatInstance.provisioningState = provisioningStateInstance2;
                      }
                    }
                    
                    var nameValue3 = sslCertificatesValue['name'];
                    if (nameValue3 !== null && nameValue3 !== undefined) {
                      var nameInstance3 = nameValue3;
                      applicationGatewaySslCertificateJsonFormatInstance.name = nameInstance3;
                    }
                    
                    var etagValue2 = sslCertificatesValue['etag'];
                    if (etagValue2 !== null && etagValue2 !== undefined) {
                      var etagInstance2 = etagValue2;
                      applicationGatewaySslCertificateJsonFormatInstance.etag = etagInstance2;
                    }
                    
                    var idValue3 = sslCertificatesValue['id'];
                    if (idValue3 !== null && idValue3 !== undefined) {
                      var idInstance3 = idValue3;
                      applicationGatewaySslCertificateJsonFormatInstance.id = idInstance3;
                    }
                  }
                }
                
                var frontendIPConfigurationsArray = propertiesValue['frontendIPConfigurations'];
                if (frontendIPConfigurationsArray !== null && frontendIPConfigurationsArray !== undefined) {
                  for (var loweredIndex4 = 0; loweredIndex4 < frontendIPConfigurationsArray.length; loweredIndex4 = loweredIndex4 + 1) {
                    var frontendIPConfigurationsValue = frontendIPConfigurationsArray[loweredIndex4];
                    var applicationGatewayFrontendIPConfigurationJsonFormatInstance = {};
                    applicationGatewayJsonFormatInstance.frontendIPConfigurations.push(applicationGatewayFrontendIPConfigurationJsonFormatInstance);
                    
                    var propertiesValue4 = frontendIPConfigurationsValue['properties'];
                    if (propertiesValue4 !== null && propertiesValue4 !== undefined) {
                      var privateIPAddressValue = propertiesValue4['privateIPAddress'];
                      if (privateIPAddressValue !== null && privateIPAddressValue !== undefined) {
                        var privateIPAddressInstance = privateIPAddressValue;
                        applicationGatewayFrontendIPConfigurationJsonFormatInstance.privateIPAddress = privateIPAddressInstance;
                      }
                      
                      var privateIPAllocationMethodValue = propertiesValue4['privateIPAllocationMethod'];
                      if (privateIPAllocationMethodValue !== null && privateIPAllocationMethodValue !== undefined) {
                        var privateIPAllocationMethodInstance = privateIPAllocationMethodValue;
                        applicationGatewayFrontendIPConfigurationJsonFormatInstance.privateIPAllocationMethod = privateIPAllocationMethodInstance;
                      }
                      
                      var subnetValue2 = propertiesValue4['subnet'];
                      if (subnetValue2 !== null && subnetValue2 !== undefined) {
                        var subnetInstance2 = {};
                        applicationGatewayFrontendIPConfigurationJsonFormatInstance.subnet = subnetInstance2;
                        
                        var idValue4 = subnetValue2['id'];
                        if (idValue4 !== null && idValue4 !== undefined) {
                          var idInstance4 = idValue4;
                          subnetInstance2.id = idInstance4;
                        }
                      }
                      
                      var publicIPAddressValue = propertiesValue4['publicIPAddress'];
                      if (publicIPAddressValue !== null && publicIPAddressValue !== undefined) {
                        var publicIPAddressInstance = {};
                        applicationGatewayFrontendIPConfigurationJsonFormatInstance.publicIPAddress = publicIPAddressInstance;
                        
                        var idValue5 = publicIPAddressValue['id'];
                        if (idValue5 !== null && idValue5 !== undefined) {
                          var idInstance5 = idValue5;
                          publicIPAddressInstance.id = idInstance5;
                        }
                      }
                      
                      var provisioningStateValue3 = propertiesValue4['provisioningState'];
                      if (provisioningStateValue3 !== null && provisioningStateValue3 !== undefined) {
                        var provisioningStateInstance3 = provisioningStateValue3;
                        applicationGatewayFrontendIPConfigurationJsonFormatInstance.provisioningState = provisioningStateInstance3;
                      }
                    }
                    
                    var nameValue4 = frontendIPConfigurationsValue['name'];
                    if (nameValue4 !== null && nameValue4 !== undefined) {
                      var nameInstance4 = nameValue4;
                      applicationGatewayFrontendIPConfigurationJsonFormatInstance.name = nameInstance4;
                    }
                    
                    var etagValue3 = frontendIPConfigurationsValue['etag'];
                    if (etagValue3 !== null && etagValue3 !== undefined) {
                      var etagInstance3 = etagValue3;
                      applicationGatewayFrontendIPConfigurationJsonFormatInstance.etag = etagInstance3;
                    }
                    
                    var idValue6 = frontendIPConfigurationsValue['id'];
                    if (idValue6 !== null && idValue6 !== undefined) {
                      var idInstance6 = idValue6;
                      applicationGatewayFrontendIPConfigurationJsonFormatInstance.id = idInstance6;
                    }
                  }
                }
                
                var frontendPortsArray = propertiesValue['frontendPorts'];
                if (frontendPortsArray !== null && frontendPortsArray !== undefined) {
                  for (var loweredIndex5 = 0; loweredIndex5 < frontendPortsArray.length; loweredIndex5 = loweredIndex5 + 1) {
                    var frontendPortsValue = frontendPortsArray[loweredIndex5];
                    var applicationGatewayFrontendPortJsonFormatInstance = {};
                    applicationGatewayJsonFormatInstance.frontendPorts.push(applicationGatewayFrontendPortJsonFormatInstance);
                    
                    var propertiesValue5 = frontendPortsValue['properties'];
                    if (propertiesValue5 !== null && propertiesValue5 !== undefined) {
                      var portValue = propertiesValue5['port'];
                      if (portValue !== null && portValue !== undefined) {
                        var portInstance = portValue;
                        applicationGatewayFrontendPortJsonFormatInstance.port = portInstance;
                      }
                      
                      var provisioningStateValue4 = propertiesValue5['provisioningState'];
                      if (provisioningStateValue4 !== null && provisioningStateValue4 !== undefined) {
                        var provisioningStateInstance4 = provisioningStateValue4;
                        applicationGatewayFrontendPortJsonFormatInstance.provisioningState = provisioningStateInstance4;
                      }
                    }
                    
                    var nameValue5 = frontendPortsValue['name'];
                    if (nameValue5 !== null && nameValue5 !== undefined) {
                      var nameInstance5 = nameValue5;
                      applicationGatewayFrontendPortJsonFormatInstance.name = nameInstance5;
                    }
                    
                    var etagValue4 = frontendPortsValue['etag'];
                    if (etagValue4 !== null && etagValue4 !== undefined) {
                      var etagInstance4 = etagValue4;
                      applicationGatewayFrontendPortJsonFormatInstance.etag = etagInstance4;
                    }
                    
                    var idValue7 = frontendPortsValue['id'];
                    if (idValue7 !== null && idValue7 !== undefined) {
                      var idInstance7 = idValue7;
                      applicationGatewayFrontendPortJsonFormatInstance.id = idInstance7;
                    }
                  }
                }
                
                var backendAddressPoolsArray = propertiesValue['backendAddressPools'];
                if (backendAddressPoolsArray !== null && backendAddressPoolsArray !== undefined) {
                  for (var loweredIndex6 = 0; loweredIndex6 < backendAddressPoolsArray.length; loweredIndex6 = loweredIndex6 + 1) {
                    var backendAddressPoolsValue = backendAddressPoolsArray[loweredIndex6];
                    var applicationGatewayBackendAddressPoolJsonFormatInstance = { backendAddresses: [], backendIPConfigurations: [] };
                    applicationGatewayJsonFormatInstance.backendAddressPools.push(applicationGatewayBackendAddressPoolJsonFormatInstance);
                    
                    var propertiesValue6 = backendAddressPoolsValue['properties'];
                    if (propertiesValue6 !== null && propertiesValue6 !== undefined) {
                      var backendIPConfigurationsArray = propertiesValue6['backendIPConfigurations'];
                      if (backendIPConfigurationsArray !== null && backendIPConfigurationsArray !== undefined) {
                        for (var loweredIndex7 = 0; loweredIndex7 < backendIPConfigurationsArray.length; loweredIndex7 = loweredIndex7 + 1) {
                          var backendIPConfigurationsValue = backendIPConfigurationsArray[loweredIndex7];
                          var resourceIdInstance = {};
                          applicationGatewayBackendAddressPoolJsonFormatInstance.backendIPConfigurations.push(resourceIdInstance);
                          
                          var idValue8 = backendIPConfigurationsValue['id'];
                          if (idValue8 !== null && idValue8 !== undefined) {
                            var idInstance8 = idValue8;
                            resourceIdInstance.id = idInstance8;
                          }
                        }
                      }
                      
                      var backendAddressesArray = propertiesValue6['backendAddresses'];
                      if (backendAddressesArray !== null && backendAddressesArray !== undefined) {
                        for (var loweredIndex8 = 0; loweredIndex8 < backendAddressesArray.length; loweredIndex8 = loweredIndex8 + 1) {
                          var backendAddressesValue = backendAddressesArray[loweredIndex8];
                          var applicationGatewayBackendAddressInstance = {};
                          applicationGatewayBackendAddressPoolJsonFormatInstance.backendAddresses.push(applicationGatewayBackendAddressInstance);
                          
                          var fqdnValue = backendAddressesValue['fqdn'];
                          if (fqdnValue !== null && fqdnValue !== undefined) {
                            var fqdnInstance = fqdnValue;
                            applicationGatewayBackendAddressInstance.fqdn = fqdnInstance;
                          }
                          
                          var ipAddressValue = backendAddressesValue['ipAddress'];
                          if (ipAddressValue !== null && ipAddressValue !== undefined) {
                            var ipAddressInstance = ipAddressValue;
                            applicationGatewayBackendAddressInstance.ipAddress = ipAddressInstance;
                          }
                        }
                      }
                      
                      var provisioningStateValue5 = propertiesValue6['provisioningState'];
                      if (provisioningStateValue5 !== null && provisioningStateValue5 !== undefined) {
                        var provisioningStateInstance5 = provisioningStateValue5;
                        applicationGatewayBackendAddressPoolJsonFormatInstance.provisioningState = provisioningStateInstance5;
                      }
                    }
                    
                    var nameValue6 = backendAddressPoolsValue['name'];
                    if (nameValue6 !== null && nameValue6 !== undefined) {
                      var nameInstance6 = nameValue6;
                      applicationGatewayBackendAddressPoolJsonFormatInstance.name = nameInstance6;
                    }
                    
                    var etagValue5 = backendAddressPoolsValue['etag'];
                    if (etagValue5 !== null && etagValue5 !== undefined) {
                      var etagInstance5 = etagValue5;
                      applicationGatewayBackendAddressPoolJsonFormatInstance.etag = etagInstance5;
                    }
                    
                    var idValue9 = backendAddressPoolsValue['id'];
                    if (idValue9 !== null && idValue9 !== undefined) {
                      var idInstance9 = idValue9;
                      applicationGatewayBackendAddressPoolJsonFormatInstance.id = idInstance9;
                    }
                  }
                }
                
                var backendHttpSettingsCollectionArray = propertiesValue['backendHttpSettingsCollection'];
                if (backendHttpSettingsCollectionArray !== null && backendHttpSettingsCollectionArray !== undefined) {
                  for (var loweredIndex9 = 0; loweredIndex9 < backendHttpSettingsCollectionArray.length; loweredIndex9 = loweredIndex9 + 1) {
                    var backendHttpSettingsCollectionValue = backendHttpSettingsCollectionArray[loweredIndex9];
                    var applicationGatewayBackendHttpSettingsJsonFormatInstance = {};
                    applicationGatewayJsonFormatInstance.backendHttpSettingsCollection.push(applicationGatewayBackendHttpSettingsJsonFormatInstance);
                    
                    var propertiesValue7 = backendHttpSettingsCollectionValue['properties'];
                    if (propertiesValue7 !== null && propertiesValue7 !== undefined) {
                      var portValue2 = propertiesValue7['port'];
                      if (portValue2 !== null && portValue2 !== undefined) {
                        var portInstance2 = portValue2;
                        applicationGatewayBackendHttpSettingsJsonFormatInstance.port = portInstance2;
                      }
                      
                      var protocolValue = propertiesValue7['protocol'];
                      if (protocolValue !== null && protocolValue !== undefined) {
                        var protocolInstance = protocolValue;
                        applicationGatewayBackendHttpSettingsJsonFormatInstance.protocol = protocolInstance;
                      }
                      
                      var cookieBasedAffinityValue = propertiesValue7['cookieBasedAffinity'];
                      if (cookieBasedAffinityValue !== null && cookieBasedAffinityValue !== undefined) {
                        var cookieBasedAffinityInstance = cookieBasedAffinityValue;
                        applicationGatewayBackendHttpSettingsJsonFormatInstance.cookieBasedAffinity = cookieBasedAffinityInstance;
                      }
                      
                      var provisioningStateValue6 = propertiesValue7['provisioningState'];
                      if (provisioningStateValue6 !== null && provisioningStateValue6 !== undefined) {
                        var provisioningStateInstance6 = provisioningStateValue6;
                        applicationGatewayBackendHttpSettingsJsonFormatInstance.provisioningState = provisioningStateInstance6;
                      }
                    }
                    
                    var nameValue7 = backendHttpSettingsCollectionValue['name'];
                    if (nameValue7 !== null && nameValue7 !== undefined) {
                      var nameInstance7 = nameValue7;
                      applicationGatewayBackendHttpSettingsJsonFormatInstance.name = nameInstance7;
                    }
                    
                    var etagValue6 = backendHttpSettingsCollectionValue['etag'];
                    if (etagValue6 !== null && etagValue6 !== undefined) {
                      var etagInstance6 = etagValue6;
                      applicationGatewayBackendHttpSettingsJsonFormatInstance.etag = etagInstance6;
                    }
                    
                    var idValue10 = backendHttpSettingsCollectionValue['id'];
                    if (idValue10 !== null && idValue10 !== undefined) {
                      var idInstance10 = idValue10;
                      applicationGatewayBackendHttpSettingsJsonFormatInstance.id = idInstance10;
                    }
                  }
                }
                
                var httpListenersArray = propertiesValue['httpListeners'];
                if (httpListenersArray !== null && httpListenersArray !== undefined) {
                  for (var loweredIndex10 = 0; loweredIndex10 < httpListenersArray.length; loweredIndex10 = loweredIndex10 + 1) {
                    var httpListenersValue = httpListenersArray[loweredIndex10];
                    var applicationGatewayHttpListenerJsonFormatInstance = {};
                    applicationGatewayJsonFormatInstance.httpListeners.push(applicationGatewayHttpListenerJsonFormatInstance);
                    
                    var propertiesValue8 = httpListenersValue['properties'];
                    if (propertiesValue8 !== null && propertiesValue8 !== undefined) {
                      var frontendIPConfigurationValue = propertiesValue8['frontendIPConfiguration'];
                      if (frontendIPConfigurationValue !== null && frontendIPConfigurationValue !== undefined) {
                        var frontendIPConfigurationInstance = {};
                        applicationGatewayHttpListenerJsonFormatInstance.frontendIPConfiguration = frontendIPConfigurationInstance;
                        
                        var idValue11 = frontendIPConfigurationValue['id'];
                        if (idValue11 !== null && idValue11 !== undefined) {
                          var idInstance11 = idValue11;
                          frontendIPConfigurationInstance.id = idInstance11;
                        }
                      }
                      
                      var frontendPortValue = propertiesValue8['frontendPort'];
                      if (frontendPortValue !== null && frontendPortValue !== undefined) {
                        var frontendPortInstance = {};
                        applicationGatewayHttpListenerJsonFormatInstance.frontendPort = frontendPortInstance;
                        
                        var idValue12 = frontendPortValue['id'];
                        if (idValue12 !== null && idValue12 !== undefined) {
                          var idInstance12 = idValue12;
                          frontendPortInstance.id = idInstance12;
                        }
                      }
                      
                      var protocolValue2 = propertiesValue8['protocol'];
                      if (protocolValue2 !== null && protocolValue2 !== undefined) {
                        var protocolInstance2 = protocolValue2;
                        applicationGatewayHttpListenerJsonFormatInstance.protocol = protocolInstance2;
                      }
                      
                      var sslCertificateValue = propertiesValue8['sslCertificate'];
                      if (sslCertificateValue !== null && sslCertificateValue !== undefined) {
                        var sslCertificateInstance = {};
                        applicationGatewayHttpListenerJsonFormatInstance.sslCertificate = sslCertificateInstance;
                        
                        var idValue13 = sslCertificateValue['id'];
                        if (idValue13 !== null && idValue13 !== undefined) {
                          var idInstance13 = idValue13;
                          sslCertificateInstance.id = idInstance13;
                        }
                      }
                      
                      var provisioningStateValue7 = propertiesValue8['provisioningState'];
                      if (provisioningStateValue7 !== null && provisioningStateValue7 !== undefined) {
                        var provisioningStateInstance7 = provisioningStateValue7;
                        applicationGatewayHttpListenerJsonFormatInstance.provisioningState = provisioningStateInstance7;
                      }
                    }
                    
                    var nameValue8 = httpListenersValue['name'];
                    if (nameValue8 !== null && nameValue8 !== undefined) {
                      var nameInstance8 = nameValue8;
                      applicationGatewayHttpListenerJsonFormatInstance.name = nameInstance8;
                    }
                    
                    var etagValue7 = httpListenersValue['etag'];
                    if (etagValue7 !== null && etagValue7 !== undefined) {
                      var etagInstance7 = etagValue7;
                      applicationGatewayHttpListenerJsonFormatInstance.etag = etagInstance7;
                    }
                    
                    var idValue14 = httpListenersValue['id'];
                    if (idValue14 !== null && idValue14 !== undefined) {
                      var idInstance14 = idValue14;
                      applicationGatewayHttpListenerJsonFormatInstance.id = idInstance14;
                    }
                  }
                }
                
                var requestRoutingRulesArray = propertiesValue['requestRoutingRules'];
                if (requestRoutingRulesArray !== null && requestRoutingRulesArray !== undefined) {
                  for (var loweredIndex11 = 0; loweredIndex11 < requestRoutingRulesArray.length; loweredIndex11 = loweredIndex11 + 1) {
                    var requestRoutingRulesValue = requestRoutingRulesArray[loweredIndex11];
                    var applicationGatewayRequestRoutingRuleJsonFormatInstance = {};
                    applicationGatewayJsonFormatInstance.requestRoutingRules.push(applicationGatewayRequestRoutingRuleJsonFormatInstance);
                    
                    var propertiesValue9 = requestRoutingRulesValue['properties'];
                    if (propertiesValue9 !== null && propertiesValue9 !== undefined) {
                      var ruleTypeValue = propertiesValue9['ruleType'];
                      if (ruleTypeValue !== null && ruleTypeValue !== undefined) {
                        var ruleTypeInstance = ruleTypeValue;
                        applicationGatewayRequestRoutingRuleJsonFormatInstance.ruleType = ruleTypeInstance;
                      }
                      
                      var backendAddressPoolValue = propertiesValue9['backendAddressPool'];
                      if (backendAddressPoolValue !== null && backendAddressPoolValue !== undefined) {
                        var backendAddressPoolInstance = {};
                        applicationGatewayRequestRoutingRuleJsonFormatInstance.backendAddressPool = backendAddressPoolInstance;
                        
                        var idValue15 = backendAddressPoolValue['id'];
                        if (idValue15 !== null && idValue15 !== undefined) {
                          var idInstance15 = idValue15;
                          backendAddressPoolInstance.id = idInstance15;
                        }
                      }
                      
                      var backendHttpSettingsValue = propertiesValue9['backendHttpSettings'];
                      if (backendHttpSettingsValue !== null && backendHttpSettingsValue !== undefined) {
                        var backendHttpSettingsInstance = {};
                        applicationGatewayRequestRoutingRuleJsonFormatInstance.backendHttpSettings = backendHttpSettingsInstance;
                        
                        var idValue16 = backendHttpSettingsValue['id'];
                        if (idValue16 !== null && idValue16 !== undefined) {
                          var idInstance16 = idValue16;
                          backendHttpSettingsInstance.id = idInstance16;
                        }
                      }
                      
                      var httpListenerValue = propertiesValue9['httpListener'];
                      if (httpListenerValue !== null && httpListenerValue !== undefined) {
                        var httpListenerInstance = {};
                        applicationGatewayRequestRoutingRuleJsonFormatInstance.httpListener = httpListenerInstance;
                        
                        var idValue17 = httpListenerValue['id'];
                        if (idValue17 !== null && idValue17 !== undefined) {
                          var idInstance17 = idValue17;
                          httpListenerInstance.id = idInstance17;
                        }
                      }
                      
                      var provisioningStateValue8 = propertiesValue9['provisioningState'];
                      if (provisioningStateValue8 !== null && provisioningStateValue8 !== undefined) {
                        var provisioningStateInstance8 = provisioningStateValue8;
                        applicationGatewayRequestRoutingRuleJsonFormatInstance.provisioningState = provisioningStateInstance8;
                      }
                    }
                    
                    var nameValue9 = requestRoutingRulesValue['name'];
                    if (nameValue9 !== null && nameValue9 !== undefined) {
                      var nameInstance9 = nameValue9;
                      applicationGatewayRequestRoutingRuleJsonFormatInstance.name = nameInstance9;
                    }
                    
                    var etagValue8 = requestRoutingRulesValue['etag'];
                    if (etagValue8 !== null && etagValue8 !== undefined) {
                      var etagInstance8 = etagValue8;
                      applicationGatewayRequestRoutingRuleJsonFormatInstance.etag = etagInstance8;
                    }
                    
                    var idValue18 = requestRoutingRulesValue['id'];
                    if (idValue18 !== null && idValue18 !== undefined) {
                      var idInstance18 = idValue18;
                      applicationGatewayRequestRoutingRuleJsonFormatInstance.id = idInstance18;
                    }
                  }
                }
                
                var resourceGuidValue = propertiesValue['resourceGuid'];
                if (resourceGuidValue !== null && resourceGuidValue !== undefined) {
                  var resourceGuidInstance = resourceGuidValue;
                  applicationGatewayJsonFormatInstance.resourceGuid = resourceGuidInstance;
                }
                
                var provisioningStateValue9 = propertiesValue['provisioningState'];
                if (provisioningStateValue9 !== null && provisioningStateValue9 !== undefined) {
                  var provisioningStateInstance9 = provisioningStateValue9;
                  applicationGatewayJsonFormatInstance.provisioningState = provisioningStateInstance9;
                }
              }
              
              var etagValue9 = valueValue['etag'];
              if (etagValue9 !== null && etagValue9 !== undefined) {
                var etagInstance9 = etagValue9;
                applicationGatewayJsonFormatInstance.etag = etagInstance9;
              }
              
              var idValue19 = valueValue['id'];
              if (idValue19 !== null && idValue19 !== undefined) {
                var idInstance19 = idValue19;
                applicationGatewayJsonFormatInstance.id = idInstance19;
              }
              
              var nameValue10 = valueValue['name'];
              if (nameValue10 !== null && nameValue10 !== undefined) {
                var nameInstance10 = nameValue10;
                applicationGatewayJsonFormatInstance.name = nameInstance10;
              }
              
              var typeValue = valueValue['type'];
              if (typeValue !== null && typeValue !== undefined) {
                var typeInstance = typeValue;
                applicationGatewayJsonFormatInstance.type = typeInstance;
              }
              
              var locationValue = valueValue['location'];
              if (locationValue !== null && locationValue !== undefined) {
                var locationInstance = locationValue;
                applicationGatewayJsonFormatInstance.location = locationInstance;
              }
              
              var tagsSequenceElement = valueValue['tags'];
              if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
                for (var property in tagsSequenceElement) {
                  var tagsKey = property;
                  var tagsValue = tagsSequenceElement[property];
                  applicationGatewayJsonFormatInstance.tags[tagsKey] = tagsValue;
                }
              }
            }
          }
          
          var nextLinkValue = responseDoc['nextLink'];
          if (nextLinkValue !== null && nextLinkValue !== undefined) {
            var nextLinkInstance = nextLinkValue;
            result.nextLink = nextLinkInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The List applicationgateway opertion retrieves all the applicationgateways
   * in a subscription.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ApplicationGatewayOperations.prototype.listAll = function(callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Network';
    url2 = url2 + '/applicationGateways';
    var queryParameters = [];
    queryParameters.push('api-version=2015-05-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = { applicationGateways: [] };
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var valueArray = responseDoc['value'];
          if (valueArray !== null && valueArray !== undefined) {
            for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var valueValue = valueArray[loweredIndex1];
              var applicationGatewayJsonFormatInstance = { backendAddressPools: [], backendHttpSettingsCollection: [], frontendIPConfigurations: [], frontendPorts: [], gatewayIPConfigurations: [], httpListeners: [], requestRoutingRules: [], sslCertificates: [], tags: {} };
              result.applicationGateways.push(applicationGatewayJsonFormatInstance);
              
              var propertiesValue = valueValue['properties'];
              if (propertiesValue !== null && propertiesValue !== undefined) {
                var skuValue = propertiesValue['sku'];
                if (skuValue !== null && skuValue !== undefined) {
                  var skuInstance = {};
                  applicationGatewayJsonFormatInstance.sku = skuInstance;
                  
                  var nameValue = skuValue['name'];
                  if (nameValue !== null && nameValue !== undefined) {
                    var nameInstance = nameValue;
                    skuInstance.name = nameInstance;
                  }
                  
                  var tierValue = skuValue['tier'];
                  if (tierValue !== null && tierValue !== undefined) {
                    var tierInstance = tierValue;
                    skuInstance.tier = tierInstance;
                  }
                  
                  var capacityValue = skuValue['capacity'];
                  if (capacityValue !== null && capacityValue !== undefined) {
                    var capacityInstance = capacityValue;
                    skuInstance.capacity = capacityInstance;
                  }
                }
                
                var operationalStateValue = propertiesValue['operationalState'];
                if (operationalStateValue !== null && operationalStateValue !== undefined) {
                  var operationalStateInstance = operationalStateValue;
                  applicationGatewayJsonFormatInstance.operationalState = operationalStateInstance;
                }
                
                var gatewayIPConfigurationsArray = propertiesValue['gatewayIPConfigurations'];
                if (gatewayIPConfigurationsArray !== null && gatewayIPConfigurationsArray !== undefined) {
                  for (var loweredIndex2 = 0; loweredIndex2 < gatewayIPConfigurationsArray.length; loweredIndex2 = loweredIndex2 + 1) {
                    var gatewayIPConfigurationsValue = gatewayIPConfigurationsArray[loweredIndex2];
                    var applicationGatewayIPConfigurationJsonFormatInstance = {};
                    applicationGatewayJsonFormatInstance.gatewayIPConfigurations.push(applicationGatewayIPConfigurationJsonFormatInstance);
                    
                    var propertiesValue2 = gatewayIPConfigurationsValue['properties'];
                    if (propertiesValue2 !== null && propertiesValue2 !== undefined) {
                      var subnetValue = propertiesValue2['subnet'];
                      if (subnetValue !== null && subnetValue !== undefined) {
                        var subnetInstance = {};
                        applicationGatewayIPConfigurationJsonFormatInstance.subnet = subnetInstance;
                        
                        var idValue = subnetValue['id'];
                        if (idValue !== null && idValue !== undefined) {
                          var idInstance = idValue;
                          subnetInstance.id = idInstance;
                        }
                      }
                      
                      var provisioningStateValue = propertiesValue2['provisioningState'];
                      if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
                        var provisioningStateInstance = provisioningStateValue;
                        applicationGatewayIPConfigurationJsonFormatInstance.provisioningState = provisioningStateInstance;
                      }
                    }
                    
                    var nameValue2 = gatewayIPConfigurationsValue['name'];
                    if (nameValue2 !== null && nameValue2 !== undefined) {
                      var nameInstance2 = nameValue2;
                      applicationGatewayIPConfigurationJsonFormatInstance.name = nameInstance2;
                    }
                    
                    var etagValue = gatewayIPConfigurationsValue['etag'];
                    if (etagValue !== null && etagValue !== undefined) {
                      var etagInstance = etagValue;
                      applicationGatewayIPConfigurationJsonFormatInstance.etag = etagInstance;
                    }
                    
                    var idValue2 = gatewayIPConfigurationsValue['id'];
                    if (idValue2 !== null && idValue2 !== undefined) {
                      var idInstance2 = idValue2;
                      applicationGatewayIPConfigurationJsonFormatInstance.id = idInstance2;
                    }
                  }
                }
                
                var sslCertificatesArray = propertiesValue['sslCertificates'];
                if (sslCertificatesArray !== null && sslCertificatesArray !== undefined) {
                  for (var loweredIndex3 = 0; loweredIndex3 < sslCertificatesArray.length; loweredIndex3 = loweredIndex3 + 1) {
                    var sslCertificatesValue = sslCertificatesArray[loweredIndex3];
                    var applicationGatewaySslCertificateJsonFormatInstance = {};
                    applicationGatewayJsonFormatInstance.sslCertificates.push(applicationGatewaySslCertificateJsonFormatInstance);
                    
                    var propertiesValue3 = sslCertificatesValue['properties'];
                    if (propertiesValue3 !== null && propertiesValue3 !== undefined) {
                      var dataValue = propertiesValue3['data'];
                      if (dataValue !== null && dataValue !== undefined) {
                        var dataInstance = dataValue;
                        applicationGatewaySslCertificateJsonFormatInstance.data = dataInstance;
                      }
                      
                      var passwordValue = propertiesValue3['password'];
                      if (passwordValue !== null && passwordValue !== undefined) {
                        var passwordInstance = passwordValue;
                        applicationGatewaySslCertificateJsonFormatInstance.password = passwordInstance;
                      }
                      
                      var publicCertDataValue = propertiesValue3['publicCertData'];
                      if (publicCertDataValue !== null && publicCertDataValue !== undefined) {
                        var publicCertDataInstance = publicCertDataValue;
                        applicationGatewaySslCertificateJsonFormatInstance.publicCertData = publicCertDataInstance;
                      }
                      
                      var provisioningStateValue2 = propertiesValue3['provisioningState'];
                      if (provisioningStateValue2 !== null && provisioningStateValue2 !== undefined) {
                        var provisioningStateInstance2 = provisioningStateValue2;
                        applicationGatewaySslCertificateJsonFormatInstance.provisioningState = provisioningStateInstance2;
                      }
                    }
                    
                    var nameValue3 = sslCertificatesValue['name'];
                    if (nameValue3 !== null && nameValue3 !== undefined) {
                      var nameInstance3 = nameValue3;
                      applicationGatewaySslCertificateJsonFormatInstance.name = nameInstance3;
                    }
                    
                    var etagValue2 = sslCertificatesValue['etag'];
                    if (etagValue2 !== null && etagValue2 !== undefined) {
                      var etagInstance2 = etagValue2;
                      applicationGatewaySslCertificateJsonFormatInstance.etag = etagInstance2;
                    }
                    
                    var idValue3 = sslCertificatesValue['id'];
                    if (idValue3 !== null && idValue3 !== undefined) {
                      var idInstance3 = idValue3;
                      applicationGatewaySslCertificateJsonFormatInstance.id = idInstance3;
                    }
                  }
                }
                
                var frontendIPConfigurationsArray = propertiesValue['frontendIPConfigurations'];
                if (frontendIPConfigurationsArray !== null && frontendIPConfigurationsArray !== undefined) {
                  for (var loweredIndex4 = 0; loweredIndex4 < frontendIPConfigurationsArray.length; loweredIndex4 = loweredIndex4 + 1) {
                    var frontendIPConfigurationsValue = frontendIPConfigurationsArray[loweredIndex4];
                    var applicationGatewayFrontendIPConfigurationJsonFormatInstance = {};
                    applicationGatewayJsonFormatInstance.frontendIPConfigurations.push(applicationGatewayFrontendIPConfigurationJsonFormatInstance);
                    
                    var propertiesValue4 = frontendIPConfigurationsValue['properties'];
                    if (propertiesValue4 !== null && propertiesValue4 !== undefined) {
                      var privateIPAddressValue = propertiesValue4['privateIPAddress'];
                      if (privateIPAddressValue !== null && privateIPAddressValue !== undefined) {
                        var privateIPAddressInstance = privateIPAddressValue;
                        applicationGatewayFrontendIPConfigurationJsonFormatInstance.privateIPAddress = privateIPAddressInstance;
                      }
                      
                      var privateIPAllocationMethodValue = propertiesValue4['privateIPAllocationMethod'];
                      if (privateIPAllocationMethodValue !== null && privateIPAllocationMethodValue !== undefined) {
                        var privateIPAllocationMethodInstance = privateIPAllocationMethodValue;
                        applicationGatewayFrontendIPConfigurationJsonFormatInstance.privateIPAllocationMethod = privateIPAllocationMethodInstance;
                      }
                      
                      var subnetValue2 = propertiesValue4['subnet'];
                      if (subnetValue2 !== null && subnetValue2 !== undefined) {
                        var subnetInstance2 = {};
                        applicationGatewayFrontendIPConfigurationJsonFormatInstance.subnet = subnetInstance2;
                        
                        var idValue4 = subnetValue2['id'];
                        if (idValue4 !== null && idValue4 !== undefined) {
                          var idInstance4 = idValue4;
                          subnetInstance2.id = idInstance4;
                        }
                      }
                      
                      var publicIPAddressValue = propertiesValue4['publicIPAddress'];
                      if (publicIPAddressValue !== null && publicIPAddressValue !== undefined) {
                        var publicIPAddressInstance = {};
                        applicationGatewayFrontendIPConfigurationJsonFormatInstance.publicIPAddress = publicIPAddressInstance;
                        
                        var idValue5 = publicIPAddressValue['id'];
                        if (idValue5 !== null && idValue5 !== undefined) {
                          var idInstance5 = idValue5;
                          publicIPAddressInstance.id = idInstance5;
                        }
                      }
                      
                      var provisioningStateValue3 = propertiesValue4['provisioningState'];
                      if (provisioningStateValue3 !== null && provisioningStateValue3 !== undefined) {
                        var provisioningStateInstance3 = provisioningStateValue3;
                        applicationGatewayFrontendIPConfigurationJsonFormatInstance.provisioningState = provisioningStateInstance3;
                      }
                    }
                    
                    var nameValue4 = frontendIPConfigurationsValue['name'];
                    if (nameValue4 !== null && nameValue4 !== undefined) {
                      var nameInstance4 = nameValue4;
                      applicationGatewayFrontendIPConfigurationJsonFormatInstance.name = nameInstance4;
                    }
                    
                    var etagValue3 = frontendIPConfigurationsValue['etag'];
                    if (etagValue3 !== null && etagValue3 !== undefined) {
                      var etagInstance3 = etagValue3;
                      applicationGatewayFrontendIPConfigurationJsonFormatInstance.etag = etagInstance3;
                    }
                    
                    var idValue6 = frontendIPConfigurationsValue['id'];
                    if (idValue6 !== null && idValue6 !== undefined) {
                      var idInstance6 = idValue6;
                      applicationGatewayFrontendIPConfigurationJsonFormatInstance.id = idInstance6;
                    }
                  }
                }
                
                var frontendPortsArray = propertiesValue['frontendPorts'];
                if (frontendPortsArray !== null && frontendPortsArray !== undefined) {
                  for (var loweredIndex5 = 0; loweredIndex5 < frontendPortsArray.length; loweredIndex5 = loweredIndex5 + 1) {
                    var frontendPortsValue = frontendPortsArray[loweredIndex5];
                    var applicationGatewayFrontendPortJsonFormatInstance = {};
                    applicationGatewayJsonFormatInstance.frontendPorts.push(applicationGatewayFrontendPortJsonFormatInstance);
                    
                    var propertiesValue5 = frontendPortsValue['properties'];
                    if (propertiesValue5 !== null && propertiesValue5 !== undefined) {
                      var portValue = propertiesValue5['port'];
                      if (portValue !== null && portValue !== undefined) {
                        var portInstance = portValue;
                        applicationGatewayFrontendPortJsonFormatInstance.port = portInstance;
                      }
                      
                      var provisioningStateValue4 = propertiesValue5['provisioningState'];
                      if (provisioningStateValue4 !== null && provisioningStateValue4 !== undefined) {
                        var provisioningStateInstance4 = provisioningStateValue4;
                        applicationGatewayFrontendPortJsonFormatInstance.provisioningState = provisioningStateInstance4;
                      }
                    }
                    
                    var nameValue5 = frontendPortsValue['name'];
                    if (nameValue5 !== null && nameValue5 !== undefined) {
                      var nameInstance5 = nameValue5;
                      applicationGatewayFrontendPortJsonFormatInstance.name = nameInstance5;
                    }
                    
                    var etagValue4 = frontendPortsValue['etag'];
                    if (etagValue4 !== null && etagValue4 !== undefined) {
                      var etagInstance4 = etagValue4;
                      applicationGatewayFrontendPortJsonFormatInstance.etag = etagInstance4;
                    }
                    
                    var idValue7 = frontendPortsValue['id'];
                    if (idValue7 !== null && idValue7 !== undefined) {
                      var idInstance7 = idValue7;
                      applicationGatewayFrontendPortJsonFormatInstance.id = idInstance7;
                    }
                  }
                }
                
                var backendAddressPoolsArray = propertiesValue['backendAddressPools'];
                if (backendAddressPoolsArray !== null && backendAddressPoolsArray !== undefined) {
                  for (var loweredIndex6 = 0; loweredIndex6 < backendAddressPoolsArray.length; loweredIndex6 = loweredIndex6 + 1) {
                    var backendAddressPoolsValue = backendAddressPoolsArray[loweredIndex6];
                    var applicationGatewayBackendAddressPoolJsonFormatInstance = { backendAddresses: [], backendIPConfigurations: [] };
                    applicationGatewayJsonFormatInstance.backendAddressPools.push(applicationGatewayBackendAddressPoolJsonFormatInstance);
                    
                    var propertiesValue6 = backendAddressPoolsValue['properties'];
                    if (propertiesValue6 !== null && propertiesValue6 !== undefined) {
                      var backendIPConfigurationsArray = propertiesValue6['backendIPConfigurations'];
                      if (backendIPConfigurationsArray !== null && backendIPConfigurationsArray !== undefined) {
                        for (var loweredIndex7 = 0; loweredIndex7 < backendIPConfigurationsArray.length; loweredIndex7 = loweredIndex7 + 1) {
                          var backendIPConfigurationsValue = backendIPConfigurationsArray[loweredIndex7];
                          var resourceIdInstance = {};
                          applicationGatewayBackendAddressPoolJsonFormatInstance.backendIPConfigurations.push(resourceIdInstance);
                          
                          var idValue8 = backendIPConfigurationsValue['id'];
                          if (idValue8 !== null && idValue8 !== undefined) {
                            var idInstance8 = idValue8;
                            resourceIdInstance.id = idInstance8;
                          }
                        }
                      }
                      
                      var backendAddressesArray = propertiesValue6['backendAddresses'];
                      if (backendAddressesArray !== null && backendAddressesArray !== undefined) {
                        for (var loweredIndex8 = 0; loweredIndex8 < backendAddressesArray.length; loweredIndex8 = loweredIndex8 + 1) {
                          var backendAddressesValue = backendAddressesArray[loweredIndex8];
                          var applicationGatewayBackendAddressInstance = {};
                          applicationGatewayBackendAddressPoolJsonFormatInstance.backendAddresses.push(applicationGatewayBackendAddressInstance);
                          
                          var fqdnValue = backendAddressesValue['fqdn'];
                          if (fqdnValue !== null && fqdnValue !== undefined) {
                            var fqdnInstance = fqdnValue;
                            applicationGatewayBackendAddressInstance.fqdn = fqdnInstance;
                          }
                          
                          var ipAddressValue = backendAddressesValue['ipAddress'];
                          if (ipAddressValue !== null && ipAddressValue !== undefined) {
                            var ipAddressInstance = ipAddressValue;
                            applicationGatewayBackendAddressInstance.ipAddress = ipAddressInstance;
                          }
                        }
                      }
                      
                      var provisioningStateValue5 = propertiesValue6['provisioningState'];
                      if (provisioningStateValue5 !== null && provisioningStateValue5 !== undefined) {
                        var provisioningStateInstance5 = provisioningStateValue5;
                        applicationGatewayBackendAddressPoolJsonFormatInstance.provisioningState = provisioningStateInstance5;
                      }
                    }
                    
                    var nameValue6 = backendAddressPoolsValue['name'];
                    if (nameValue6 !== null && nameValue6 !== undefined) {
                      var nameInstance6 = nameValue6;
                      applicationGatewayBackendAddressPoolJsonFormatInstance.name = nameInstance6;
                    }
                    
                    var etagValue5 = backendAddressPoolsValue['etag'];
                    if (etagValue5 !== null && etagValue5 !== undefined) {
                      var etagInstance5 = etagValue5;
                      applicationGatewayBackendAddressPoolJsonFormatInstance.etag = etagInstance5;
                    }
                    
                    var idValue9 = backendAddressPoolsValue['id'];
                    if (idValue9 !== null && idValue9 !== undefined) {
                      var idInstance9 = idValue9;
                      applicationGatewayBackendAddressPoolJsonFormatInstance.id = idInstance9;
                    }
                  }
                }
                
                var backendHttpSettingsCollectionArray = propertiesValue['backendHttpSettingsCollection'];
                if (backendHttpSettingsCollectionArray !== null && backendHttpSettingsCollectionArray !== undefined) {
                  for (var loweredIndex9 = 0; loweredIndex9 < backendHttpSettingsCollectionArray.length; loweredIndex9 = loweredIndex9 + 1) {
                    var backendHttpSettingsCollectionValue = backendHttpSettingsCollectionArray[loweredIndex9];
                    var applicationGatewayBackendHttpSettingsJsonFormatInstance = {};
                    applicationGatewayJsonFormatInstance.backendHttpSettingsCollection.push(applicationGatewayBackendHttpSettingsJsonFormatInstance);
                    
                    var propertiesValue7 = backendHttpSettingsCollectionValue['properties'];
                    if (propertiesValue7 !== null && propertiesValue7 !== undefined) {
                      var portValue2 = propertiesValue7['port'];
                      if (portValue2 !== null && portValue2 !== undefined) {
                        var portInstance2 = portValue2;
                        applicationGatewayBackendHttpSettingsJsonFormatInstance.port = portInstance2;
                      }
                      
                      var protocolValue = propertiesValue7['protocol'];
                      if (protocolValue !== null && protocolValue !== undefined) {
                        var protocolInstance = protocolValue;
                        applicationGatewayBackendHttpSettingsJsonFormatInstance.protocol = protocolInstance;
                      }
                      
                      var cookieBasedAffinityValue = propertiesValue7['cookieBasedAffinity'];
                      if (cookieBasedAffinityValue !== null && cookieBasedAffinityValue !== undefined) {
                        var cookieBasedAffinityInstance = cookieBasedAffinityValue;
                        applicationGatewayBackendHttpSettingsJsonFormatInstance.cookieBasedAffinity = cookieBasedAffinityInstance;
                      }
                      
                      var provisioningStateValue6 = propertiesValue7['provisioningState'];
                      if (provisioningStateValue6 !== null && provisioningStateValue6 !== undefined) {
                        var provisioningStateInstance6 = provisioningStateValue6;
                        applicationGatewayBackendHttpSettingsJsonFormatInstance.provisioningState = provisioningStateInstance6;
                      }
                    }
                    
                    var nameValue7 = backendHttpSettingsCollectionValue['name'];
                    if (nameValue7 !== null && nameValue7 !== undefined) {
                      var nameInstance7 = nameValue7;
                      applicationGatewayBackendHttpSettingsJsonFormatInstance.name = nameInstance7;
                    }
                    
                    var etagValue6 = backendHttpSettingsCollectionValue['etag'];
                    if (etagValue6 !== null && etagValue6 !== undefined) {
                      var etagInstance6 = etagValue6;
                      applicationGatewayBackendHttpSettingsJsonFormatInstance.etag = etagInstance6;
                    }
                    
                    var idValue10 = backendHttpSettingsCollectionValue['id'];
                    if (idValue10 !== null && idValue10 !== undefined) {
                      var idInstance10 = idValue10;
                      applicationGatewayBackendHttpSettingsJsonFormatInstance.id = idInstance10;
                    }
                  }
                }
                
                var httpListenersArray = propertiesValue['httpListeners'];
                if (httpListenersArray !== null && httpListenersArray !== undefined) {
                  for (var loweredIndex10 = 0; loweredIndex10 < httpListenersArray.length; loweredIndex10 = loweredIndex10 + 1) {
                    var httpListenersValue = httpListenersArray[loweredIndex10];
                    var applicationGatewayHttpListenerJsonFormatInstance = {};
                    applicationGatewayJsonFormatInstance.httpListeners.push(applicationGatewayHttpListenerJsonFormatInstance);
                    
                    var propertiesValue8 = httpListenersValue['properties'];
                    if (propertiesValue8 !== null && propertiesValue8 !== undefined) {
                      var frontendIPConfigurationValue = propertiesValue8['frontendIPConfiguration'];
                      if (frontendIPConfigurationValue !== null && frontendIPConfigurationValue !== undefined) {
                        var frontendIPConfigurationInstance = {};
                        applicationGatewayHttpListenerJsonFormatInstance.frontendIPConfiguration = frontendIPConfigurationInstance;
                        
                        var idValue11 = frontendIPConfigurationValue['id'];
                        if (idValue11 !== null && idValue11 !== undefined) {
                          var idInstance11 = idValue11;
                          frontendIPConfigurationInstance.id = idInstance11;
                        }
                      }
                      
                      var frontendPortValue = propertiesValue8['frontendPort'];
                      if (frontendPortValue !== null && frontendPortValue !== undefined) {
                        var frontendPortInstance = {};
                        applicationGatewayHttpListenerJsonFormatInstance.frontendPort = frontendPortInstance;
                        
                        var idValue12 = frontendPortValue['id'];
                        if (idValue12 !== null && idValue12 !== undefined) {
                          var idInstance12 = idValue12;
                          frontendPortInstance.id = idInstance12;
                        }
                      }
                      
                      var protocolValue2 = propertiesValue8['protocol'];
                      if (protocolValue2 !== null && protocolValue2 !== undefined) {
                        var protocolInstance2 = protocolValue2;
                        applicationGatewayHttpListenerJsonFormatInstance.protocol = protocolInstance2;
                      }
                      
                      var sslCertificateValue = propertiesValue8['sslCertificate'];
                      if (sslCertificateValue !== null && sslCertificateValue !== undefined) {
                        var sslCertificateInstance = {};
                        applicationGatewayHttpListenerJsonFormatInstance.sslCertificate = sslCertificateInstance;
                        
                        var idValue13 = sslCertificateValue['id'];
                        if (idValue13 !== null && idValue13 !== undefined) {
                          var idInstance13 = idValue13;
                          sslCertificateInstance.id = idInstance13;
                        }
                      }
                      
                      var provisioningStateValue7 = propertiesValue8['provisioningState'];
                      if (provisioningStateValue7 !== null && provisioningStateValue7 !== undefined) {
                        var provisioningStateInstance7 = provisioningStateValue7;
                        applicationGatewayHttpListenerJsonFormatInstance.provisioningState = provisioningStateInstance7;
                      }
                    }
                    
                    var nameValue8 = httpListenersValue['name'];
                    if (nameValue8 !== null && nameValue8 !== undefined) {
                      var nameInstance8 = nameValue8;
                      applicationGatewayHttpListenerJsonFormatInstance.name = nameInstance8;
                    }
                    
                    var etagValue7 = httpListenersValue['etag'];
                    if (etagValue7 !== null && etagValue7 !== undefined) {
                      var etagInstance7 = etagValue7;
                      applicationGatewayHttpListenerJsonFormatInstance.etag = etagInstance7;
                    }
                    
                    var idValue14 = httpListenersValue['id'];
                    if (idValue14 !== null && idValue14 !== undefined) {
                      var idInstance14 = idValue14;
                      applicationGatewayHttpListenerJsonFormatInstance.id = idInstance14;
                    }
                  }
                }
                
                var requestRoutingRulesArray = propertiesValue['requestRoutingRules'];
                if (requestRoutingRulesArray !== null && requestRoutingRulesArray !== undefined) {
                  for (var loweredIndex11 = 0; loweredIndex11 < requestRoutingRulesArray.length; loweredIndex11 = loweredIndex11 + 1) {
                    var requestRoutingRulesValue = requestRoutingRulesArray[loweredIndex11];
                    var applicationGatewayRequestRoutingRuleJsonFormatInstance = {};
                    applicationGatewayJsonFormatInstance.requestRoutingRules.push(applicationGatewayRequestRoutingRuleJsonFormatInstance);
                    
                    var propertiesValue9 = requestRoutingRulesValue['properties'];
                    if (propertiesValue9 !== null && propertiesValue9 !== undefined) {
                      var ruleTypeValue = propertiesValue9['ruleType'];
                      if (ruleTypeValue !== null && ruleTypeValue !== undefined) {
                        var ruleTypeInstance = ruleTypeValue;
                        applicationGatewayRequestRoutingRuleJsonFormatInstance.ruleType = ruleTypeInstance;
                      }
                      
                      var backendAddressPoolValue = propertiesValue9['backendAddressPool'];
                      if (backendAddressPoolValue !== null && backendAddressPoolValue !== undefined) {
                        var backendAddressPoolInstance = {};
                        applicationGatewayRequestRoutingRuleJsonFormatInstance.backendAddressPool = backendAddressPoolInstance;
                        
                        var idValue15 = backendAddressPoolValue['id'];
                        if (idValue15 !== null && idValue15 !== undefined) {
                          var idInstance15 = idValue15;
                          backendAddressPoolInstance.id = idInstance15;
                        }
                      }
                      
                      var backendHttpSettingsValue = propertiesValue9['backendHttpSettings'];
                      if (backendHttpSettingsValue !== null && backendHttpSettingsValue !== undefined) {
                        var backendHttpSettingsInstance = {};
                        applicationGatewayRequestRoutingRuleJsonFormatInstance.backendHttpSettings = backendHttpSettingsInstance;
                        
                        var idValue16 = backendHttpSettingsValue['id'];
                        if (idValue16 !== null && idValue16 !== undefined) {
                          var idInstance16 = idValue16;
                          backendHttpSettingsInstance.id = idInstance16;
                        }
                      }
                      
                      var httpListenerValue = propertiesValue9['httpListener'];
                      if (httpListenerValue !== null && httpListenerValue !== undefined) {
                        var httpListenerInstance = {};
                        applicationGatewayRequestRoutingRuleJsonFormatInstance.httpListener = httpListenerInstance;
                        
                        var idValue17 = httpListenerValue['id'];
                        if (idValue17 !== null && idValue17 !== undefined) {
                          var idInstance17 = idValue17;
                          httpListenerInstance.id = idInstance17;
                        }
                      }
                      
                      var provisioningStateValue8 = propertiesValue9['provisioningState'];
                      if (provisioningStateValue8 !== null && provisioningStateValue8 !== undefined) {
                        var provisioningStateInstance8 = provisioningStateValue8;
                        applicationGatewayRequestRoutingRuleJsonFormatInstance.provisioningState = provisioningStateInstance8;
                      }
                    }
                    
                    var nameValue9 = requestRoutingRulesValue['name'];
                    if (nameValue9 !== null && nameValue9 !== undefined) {
                      var nameInstance9 = nameValue9;
                      applicationGatewayRequestRoutingRuleJsonFormatInstance.name = nameInstance9;
                    }
                    
                    var etagValue8 = requestRoutingRulesValue['etag'];
                    if (etagValue8 !== null && etagValue8 !== undefined) {
                      var etagInstance8 = etagValue8;
                      applicationGatewayRequestRoutingRuleJsonFormatInstance.etag = etagInstance8;
                    }
                    
                    var idValue18 = requestRoutingRulesValue['id'];
                    if (idValue18 !== null && idValue18 !== undefined) {
                      var idInstance18 = idValue18;
                      applicationGatewayRequestRoutingRuleJsonFormatInstance.id = idInstance18;
                    }
                  }
                }
                
                var resourceGuidValue = propertiesValue['resourceGuid'];
                if (resourceGuidValue !== null && resourceGuidValue !== undefined) {
                  var resourceGuidInstance = resourceGuidValue;
                  applicationGatewayJsonFormatInstance.resourceGuid = resourceGuidInstance;
                }
                
                var provisioningStateValue9 = propertiesValue['provisioningState'];
                if (provisioningStateValue9 !== null && provisioningStateValue9 !== undefined) {
                  var provisioningStateInstance9 = provisioningStateValue9;
                  applicationGatewayJsonFormatInstance.provisioningState = provisioningStateInstance9;
                }
              }
              
              var etagValue9 = valueValue['etag'];
              if (etagValue9 !== null && etagValue9 !== undefined) {
                var etagInstance9 = etagValue9;
                applicationGatewayJsonFormatInstance.etag = etagInstance9;
              }
              
              var idValue19 = valueValue['id'];
              if (idValue19 !== null && idValue19 !== undefined) {
                var idInstance19 = idValue19;
                applicationGatewayJsonFormatInstance.id = idInstance19;
              }
              
              var nameValue10 = valueValue['name'];
              if (nameValue10 !== null && nameValue10 !== undefined) {
                var nameInstance10 = nameValue10;
                applicationGatewayJsonFormatInstance.name = nameInstance10;
              }
              
              var typeValue = valueValue['type'];
              if (typeValue !== null && typeValue !== undefined) {
                var typeInstance = typeValue;
                applicationGatewayJsonFormatInstance.type = typeInstance;
              }
              
              var locationValue = valueValue['location'];
              if (locationValue !== null && locationValue !== undefined) {
                var locationInstance = locationValue;
                applicationGatewayJsonFormatInstance.location = locationInstance;
              }
              
              var tagsSequenceElement = valueValue['tags'];
              if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
                for (var property in tagsSequenceElement) {
                  var tagsKey = property;
                  var tagsValue = tagsSequenceElement[property];
                  applicationGatewayJsonFormatInstance.tags[tagsKey] = tagsValue;
                }
              }
            }
          }
          
          var nextLinkValue = responseDoc['nextLink'];
          if (nextLinkValue !== null && nextLinkValue !== undefined) {
            var nextLinkInstance = nextLinkValue;
            result.nextLink = nextLinkInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The Start ApplicationGateway operation starts application gatewayin the
   * specified resource group through Network resource provider.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} applicationGatewayName The name of the application gateway.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ApplicationGatewayOperations.prototype.start = function(resourceGroupName, applicationGatewayName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.applicationGateways.beginStart(resourceGroupName, applicationGatewayName, function (err, result) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var delayInSeconds = result.retryAfter;
      if (delayInSeconds === 0) {
        delayInSeconds = 30;
      }
      if (client2.longRunningOperationInitialTimeout >= 0) {
        delayInSeconds = client2.longRunningOperationInitialTimeout;
      }
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.getLongRunningOperationStatus(result.azureAsyncOperation, function (err2, result2) {
            if (err2 !== null && err2 !== undefined) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                return callback(null, result2);
              } else {
                delayInSeconds = result2.retryAfter;
                if (delayInSeconds === 0) {
                  delayInSeconds = 30;
                }
                if (client2.longRunningOperationRetryTimeout >= 0) {
                  delayInSeconds = client2.longRunningOperationRetryTimeout;
                }
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  /**
   * The STOP ApplicationGateway operation stops application gatewayin the
   * specified resource group through Network resource provider.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} applicationGatewayName The name of the application gateway.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ApplicationGatewayOperations.prototype.stop = function(resourceGroupName, applicationGatewayName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.applicationGateways.beginStop(resourceGroupName, applicationGatewayName, function (err, result) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var delayInSeconds = result.retryAfter;
      if (delayInSeconds === 0) {
        delayInSeconds = 30;
      }
      if (client2.longRunningOperationInitialTimeout >= 0) {
        delayInSeconds = client2.longRunningOperationInitialTimeout;
      }
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.getLongRunningOperationStatus(result.azureAsyncOperation, function (err2, result2) {
            if (err2 !== null && err2 !== undefined) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                return callback(null, result2);
              } else {
                delayInSeconds = result2.retryAfter;
                if (delayInSeconds === 0) {
                  delayInSeconds = 30;
                }
                if (client2.longRunningOperationRetryTimeout >= 0) {
                  delayInSeconds = client2.longRunningOperationRetryTimeout;
                }
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  return ApplicationGatewayOperations;
})();

var ExpressRouteCircuitAuthorizationOperations = ( /** @lends ExpressRouteCircuitAuthorizationOperations */ function() {
  /**
   * @class
   * The Network Resource Provider API includes operations for managing the
   * Authorizations for your subscription.
   * __NOTE__: An instance of this class is automatically created for an
   * instance of the [NetworkResourceProviderClient] {@link
   * NetworkResourceProviderClient~NetworkResourceProviderClient}.
   * See [expressRouteCircuitAuthorizations] {@link
   * NetworkResourceProviderClient~NetworkResourceProviderClient#expressRouteCircuitAuthorizations}.
   * Initializes a new instance of the
   * ExpressRouteCircuitAuthorizationOperations class.
   * @constructor
   * 
   * @param {NetworkResourceProviderClient} client Reference to the service
   * client.
   */
  function ExpressRouteCircuitAuthorizationOperations(client) {
    this.client = client;
  }
  
  /**
   * The Put Authorization operation creates/updates an authorization in
   * thespecified ExpressRouteCircuits
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} circuitName The name of the express route circuit.
   * 
   * @param {string} authorizationName The name of the authorization.
   * 
   * @param {ExpressRouteCircuitAuthorization} authorizationParameters
   * Parameters supplied to the create/update ExpressRouteCircuitAuthorization
   * operation
   * 
   * @param {string} [authorizationParameters.authorizationKey] Gets or sets
   * the authorization key
   * 
   * @param {string} [authorizationParameters.authorizationUseStatus] Gets or
   * sets AuthorizationUseStatus
   * 
   * @param {string} [authorizationParameters.provisioningState] Gets or sets
   * Provisioning state of the PublicIP resource Updating/Deleting/Failed
   * 
   * @param {string} [authorizationParameters.name] Gets name of the resource
   * that is unique within a resource group. This name can be used to access
   * the resource
   * 
   * @param {string} [authorizationParameters.etag] A unique read-only string
   * that changes whenever the resource is updated
   * 
   * @param {string} [authorizationParameters.id] Id of the resource
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ExpressRouteCircuitAuthorizationOperations.prototype.beginCreateOrUpdating = function(resourceGroupName, circuitName, authorizationName, authorizationParameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (circuitName === null || circuitName === undefined) {
      return callback(new Error('circuitName cannot be null.'));
    }
    if (authorizationName === null || authorizationName === undefined) {
      return callback(new Error('authorizationName cannot be null.'));
    }
    if (authorizationParameters === null || authorizationParameters === undefined) {
      return callback(new Error('authorizationParameters cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Network';
    url2 = url2 + '/expressRouteCircuits/';
    url2 = url2 + encodeURIComponent(circuitName);
    url2 = url2 + '/authorizations/';
    url2 = url2 + encodeURIComponent(authorizationName);
    var queryParameters = [];
    queryParameters.push('api-version=2015-05-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = null;
    
    var authorizationJsonFormatValue = {};
    requestDoc = authorizationJsonFormatValue;
    
    var propertiesValue = {};
    authorizationJsonFormatValue['properties'] = propertiesValue;
    
    if (authorizationParameters.authorizationKey !== null && authorizationParameters.authorizationKey !== undefined) {
      propertiesValue['authorizationKey'] = authorizationParameters.authorizationKey;
    }
    
    if (authorizationParameters.authorizationUseStatus !== null && authorizationParameters.authorizationUseStatus !== undefined) {
      propertiesValue['authorizationUseStatus'] = authorizationParameters.authorizationUseStatus;
    }
    
    if (authorizationParameters.provisioningState !== null && authorizationParameters.provisioningState !== undefined) {
      propertiesValue['provisioningState'] = authorizationParameters.provisioningState;
    }
    
    if (authorizationParameters.name !== null && authorizationParameters.name !== undefined) {
      authorizationJsonFormatValue['name'] = authorizationParameters.name;
    }
    
    if (authorizationParameters.etag !== null && authorizationParameters.etag !== undefined) {
      authorizationJsonFormatValue['etag'] = authorizationParameters.etag;
    }
    
    if (authorizationParameters.id !== null && authorizationParameters.id !== undefined) {
      authorizationJsonFormatValue['id'] = authorizationParameters.id;
    }
    
    requestContent = JSON.stringify(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200 && statusCode !== 201) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200 || statusCode === 201) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var authorizationInstance = {};
          result.authorization = authorizationInstance;
          
          var propertiesValue2 = responseDoc['properties'];
          if (propertiesValue2 !== null && propertiesValue2 !== undefined) {
            var authorizationKeyValue = propertiesValue2['authorizationKey'];
            if (authorizationKeyValue !== null && authorizationKeyValue !== undefined) {
              var authorizationKeyInstance = authorizationKeyValue;
              authorizationInstance.authorizationKey = authorizationKeyInstance;
            }
            
            var authorizationUseStatusValue = propertiesValue2['authorizationUseStatus'];
            if (authorizationUseStatusValue !== null && authorizationUseStatusValue !== undefined) {
              var authorizationUseStatusInstance = authorizationUseStatusValue;
              authorizationInstance.authorizationUseStatus = authorizationUseStatusInstance;
            }
            
            var provisioningStateValue = propertiesValue2['provisioningState'];
            if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
              var provisioningStateInstance = provisioningStateValue;
              authorizationInstance.provisioningState = provisioningStateInstance;
            }
          }
          
          var nameValue = responseDoc['name'];
          if (nameValue !== null && nameValue !== undefined) {
            var nameInstance = nameValue;
            authorizationInstance.name = nameInstance;
          }
          
          var etagValue = responseDoc['etag'];
          if (etagValue !== null && etagValue !== undefined) {
            var etagInstance = etagValue;
            authorizationInstance.etag = etagInstance;
          }
          
          var idValue = responseDoc['id'];
          if (idValue !== null && idValue !== undefined) {
            var idInstance = idValue;
            authorizationInstance.id = idInstance;
          }
          
          var errorValue = responseDoc['error'];
          if (errorValue !== null && errorValue !== undefined) {
            var errorInstance = { details: [] };
            result.error = errorInstance;
            
            var codeValue = errorValue['code'];
            if (codeValue !== null && codeValue !== undefined) {
              var codeInstance = codeValue;
              errorInstance.code = codeInstance;
            }
            
            var messageValue = errorValue['message'];
            if (messageValue !== null && messageValue !== undefined) {
              var messageInstance = messageValue;
              errorInstance.message = messageInstance;
            }
            
            var targetValue = errorValue['target'];
            if (targetValue !== null && targetValue !== undefined) {
              var targetInstance = targetValue;
              errorInstance.target = targetInstance;
            }
            
            var detailsArray = errorValue['details'];
            if (detailsArray !== null && detailsArray !== undefined) {
              for (var loweredIndex1 = 0; loweredIndex1 < detailsArray.length; loweredIndex1 = loweredIndex1 + 1) {
                var detailsValue = detailsArray[loweredIndex1];
                var errorDetailsInstance = {};
                errorInstance.details.push(errorDetailsInstance);
                
                var codeValue2 = detailsValue['code'];
                if (codeValue2 !== null && codeValue2 !== undefined) {
                  var codeInstance2 = codeValue2;
                  errorDetailsInstance.code = codeInstance2;
                }
                
                var targetValue2 = detailsValue['target'];
                if (targetValue2 !== null && targetValue2 !== undefined) {
                  var targetInstance2 = targetValue2;
                  errorDetailsInstance.target = targetInstance2;
                }
                
                var messageValue2 = detailsValue['message'];
                if (messageValue2 !== null && messageValue2 !== undefined) {
                  var messageInstance2 = messageValue2;
                  errorDetailsInstance.message = messageInstance2;
                }
              }
            }
            
            var innerErrorValue = errorValue['innerError'];
            if (innerErrorValue !== null && innerErrorValue !== undefined) {
              var innerErrorInstance = innerErrorValue;
              errorInstance.innerError = innerErrorInstance;
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      result.azureAsyncOperation = response.headers['azure-asyncoperation'];
      result.retryAfter = parseInt(response.headers['retry-after'], 10);
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The delete authorization operation deletes the specified authorization
   * from the specified ExpressRouteCircuit.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} circuitName The name of the express route circuit.
   * 
   * @param {string} authorizationName The name of the authorization.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ExpressRouteCircuitAuthorizationOperations.prototype.beginDeleting = function(resourceGroupName, circuitName, authorizationName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (circuitName === null || circuitName === undefined) {
      return callback(new Error('circuitName cannot be null.'));
    }
    if (authorizationName === null || authorizationName === undefined) {
      return callback(new Error('authorizationName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Network';
    url2 = url2 + '/expressRouteCircuits/';
    url2 = url2 + encodeURIComponent(circuitName);
    url2 = url2 + '/authorizations/';
    url2 = url2 + encodeURIComponent(authorizationName);
    var queryParameters = [];
    queryParameters.push('api-version=2015-05-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'DELETE';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200 && statusCode !== 202 && statusCode !== 204) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      result = {};
      result.statusCode = statusCode;
      result.azureAsyncOperation = response.headers['azure-asyncoperation'];
      result.retryAfter = parseInt(response.headers['retry-after'], 10);
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The Put Authorization operation creates/updates an authorization in
   * thespecified ExpressRouteCircuits
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} circuitName The name of the express route circuit.
   * 
   * @param {string} authorizationName The name of the authorization.
   * 
   * @param {ExpressRouteCircuitAuthorization} authorizationParameters
   * Parameters supplied to the create/update ExpressRouteCircuitAuthorization
   * operation
   * 
   * @param {string} [authorizationParameters.authorizationKey] Gets or sets
   * the authorization key
   * 
   * @param {string} [authorizationParameters.authorizationUseStatus] Gets or
   * sets AuthorizationUseStatus
   * 
   * @param {string} [authorizationParameters.provisioningState] Gets or sets
   * Provisioning state of the PublicIP resource Updating/Deleting/Failed
   * 
   * @param {string} [authorizationParameters.name] Gets name of the resource
   * that is unique within a resource group. This name can be used to access
   * the resource
   * 
   * @param {string} [authorizationParameters.etag] A unique read-only string
   * that changes whenever the resource is updated
   * 
   * @param {string} [authorizationParameters.id] Id of the resource
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ExpressRouteCircuitAuthorizationOperations.prototype.createOrUpdate = function(resourceGroupName, circuitName, authorizationName, authorizationParameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.expressRouteCircuitAuthorizations.beginCreateOrUpdating(resourceGroupName, circuitName, authorizationName, authorizationParameters, function (err, result) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var delayInSeconds = result.retryAfter;
      if (delayInSeconds === 0) {
        delayInSeconds = 30;
      }
      if (client2.longRunningOperationInitialTimeout >= 0) {
        delayInSeconds = client2.longRunningOperationInitialTimeout;
      }
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.getLongRunningOperationStatus(result.azureAsyncOperation, function (err2, result2) {
            if (err2 !== null && err2 !== undefined) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                return callback(null, result2);
              } else {
                delayInSeconds = result2.retryAfter;
                if (delayInSeconds === 0) {
                  delayInSeconds = 15;
                }
                if (client2.longRunningOperationRetryTimeout >= 0) {
                  delayInSeconds = client2.longRunningOperationRetryTimeout;
                }
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  /**
   * The delete authorization operation deletes the specified authorization
   * from the specified ExpressRouteCircuit.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} circuitName The name of the express route circuit.
   * 
   * @param {string} authorizationName The name of the authorization.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ExpressRouteCircuitAuthorizationOperations.prototype.deleteMethod = function(resourceGroupName, circuitName, authorizationName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.expressRouteCircuitAuthorizations.beginDeleting(resourceGroupName, circuitName, authorizationName, function (err, result) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var delayInSeconds = result.retryAfter;
      if (delayInSeconds === 0) {
        delayInSeconds = 30;
      }
      if (client2.longRunningOperationInitialTimeout >= 0) {
        delayInSeconds = client2.longRunningOperationInitialTimeout;
      }
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.getLongRunningOperationStatus(result.azureAsyncOperation, function (err2, result2) {
            if (err2 !== null && err2 !== undefined) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                return callback(null, result2);
              } else {
                delayInSeconds = result2.retryAfter;
                if (delayInSeconds === 0) {
                  delayInSeconds = 15;
                }
                if (client2.longRunningOperationRetryTimeout >= 0) {
                  delayInSeconds = client2.longRunningOperationRetryTimeout;
                }
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  /**
   * The GET authorization operation retrieves the specified authorization from
   * the specified ExpressRouteCircuit.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} circuitName The name of the express route circuit.
   * 
   * @param {string} authorizationName The name of the authorization.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ExpressRouteCircuitAuthorizationOperations.prototype.get = function(resourceGroupName, circuitName, authorizationName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (circuitName === null || circuitName === undefined) {
      return callback(new Error('circuitName cannot be null.'));
    }
    if (authorizationName === null || authorizationName === undefined) {
      return callback(new Error('authorizationName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Network';
    url2 = url2 + '/expressRouteCircuits/';
    url2 = url2 + encodeURIComponent(circuitName);
    url2 = url2 + '/authorizations/';
    url2 = url2 + encodeURIComponent(authorizationName);
    var queryParameters = [];
    queryParameters.push('api-version=2015-05-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var authorizationInstance = {};
          result.authorization = authorizationInstance;
          
          var propertiesValue = responseDoc['properties'];
          if (propertiesValue !== null && propertiesValue !== undefined) {
            var authorizationKeyValue = propertiesValue['authorizationKey'];
            if (authorizationKeyValue !== null && authorizationKeyValue !== undefined) {
              var authorizationKeyInstance = authorizationKeyValue;
              authorizationInstance.authorizationKey = authorizationKeyInstance;
            }
            
            var authorizationUseStatusValue = propertiesValue['authorizationUseStatus'];
            if (authorizationUseStatusValue !== null && authorizationUseStatusValue !== undefined) {
              var authorizationUseStatusInstance = authorizationUseStatusValue;
              authorizationInstance.authorizationUseStatus = authorizationUseStatusInstance;
            }
            
            var provisioningStateValue = propertiesValue['provisioningState'];
            if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
              var provisioningStateInstance = provisioningStateValue;
              authorizationInstance.provisioningState = provisioningStateInstance;
            }
          }
          
          var nameValue = responseDoc['name'];
          if (nameValue !== null && nameValue !== undefined) {
            var nameInstance = nameValue;
            authorizationInstance.name = nameInstance;
          }
          
          var etagValue = responseDoc['etag'];
          if (etagValue !== null && etagValue !== undefined) {
            var etagInstance = etagValue;
            authorizationInstance.etag = etagInstance;
          }
          
          var idValue = responseDoc['id'];
          if (idValue !== null && idValue !== undefined) {
            var idInstance = idValue;
            authorizationInstance.id = idInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The List authorization operation retrieves all the authorizations in an
   * ExpressRouteCircuit.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} circuitName The name of the curcuit.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ExpressRouteCircuitAuthorizationOperations.prototype.list = function(resourceGroupName, circuitName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (circuitName === null || circuitName === undefined) {
      return callback(new Error('circuitName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Network';
    url2 = url2 + '/expressRouteCircuits/';
    url2 = url2 + encodeURIComponent(circuitName);
    url2 = url2 + '/authorizations';
    var queryParameters = [];
    queryParameters.push('api-version=2015-05-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = { authorizations: [] };
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var valueArray = responseDoc['value'];
          if (valueArray !== null && valueArray !== undefined) {
            for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var valueValue = valueArray[loweredIndex1];
              var authorizationJsonFormatInstance = {};
              result.authorizations.push(authorizationJsonFormatInstance);
              
              var propertiesValue = valueValue['properties'];
              if (propertiesValue !== null && propertiesValue !== undefined) {
                var authorizationKeyValue = propertiesValue['authorizationKey'];
                if (authorizationKeyValue !== null && authorizationKeyValue !== undefined) {
                  var authorizationKeyInstance = authorizationKeyValue;
                  authorizationJsonFormatInstance.authorizationKey = authorizationKeyInstance;
                }
                
                var authorizationUseStatusValue = propertiesValue['authorizationUseStatus'];
                if (authorizationUseStatusValue !== null && authorizationUseStatusValue !== undefined) {
                  var authorizationUseStatusInstance = authorizationUseStatusValue;
                  authorizationJsonFormatInstance.authorizationUseStatus = authorizationUseStatusInstance;
                }
                
                var provisioningStateValue = propertiesValue['provisioningState'];
                if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
                  var provisioningStateInstance = provisioningStateValue;
                  authorizationJsonFormatInstance.provisioningState = provisioningStateInstance;
                }
              }
              
              var nameValue = valueValue['name'];
              if (nameValue !== null && nameValue !== undefined) {
                var nameInstance = nameValue;
                authorizationJsonFormatInstance.name = nameInstance;
              }
              
              var etagValue = valueValue['etag'];
              if (etagValue !== null && etagValue !== undefined) {
                var etagInstance = etagValue;
                authorizationJsonFormatInstance.etag = etagInstance;
              }
              
              var idValue = valueValue['id'];
              if (idValue !== null && idValue !== undefined) {
                var idInstance = idValue;
                authorizationJsonFormatInstance.id = idInstance;
              }
            }
          }
          
          var nextLinkValue = responseDoc['nextLink'];
          if (nextLinkValue !== null && nextLinkValue !== undefined) {
            var nextLinkInstance = nextLinkValue;
            result.nextLink = nextLinkInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  return ExpressRouteCircuitAuthorizationOperations;
})();

var ExpressRouteCircuitOperations = ( /** @lends ExpressRouteCircuitOperations */ function() {
  /**
   * @class
   * The Network Resource Provider API includes operations for managing the
   * ExpressRouteCircuits for your subscription.
   * __NOTE__: An instance of this class is automatically created for an
   * instance of the [NetworkResourceProviderClient] {@link
   * NetworkResourceProviderClient~NetworkResourceProviderClient}.
   * See [expressRouteCircuits] {@link
   * NetworkResourceProviderClient~NetworkResourceProviderClient#expressRouteCircuits}.
   * Initializes a new instance of the ExpressRouteCircuitOperations class.
   * @constructor
   * 
   * @param {NetworkResourceProviderClient} client Reference to the service
   * client.
   */
  function ExpressRouteCircuitOperations(client) {
    this.client = client;
  }
  
  /**
   * The Put ExpressRouteCircuit operation creates/updates a ExpressRouteCircuit
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} circuitName The name of the circuit.
   * 
   * @param {ExpressRouteCircuit} parameters Parameters supplied to the
   * create/delete ExpressRouteCircuit operation
   * 
   * @param {string} [parameters.circuitProvisioningState] Gets or sets
   * CircuitProvisioningState state of the resource
   * 
   * @param {string} [parameters.serviceProviderProvisioningState] Gets or sets
   * ServiceProviderProvisioningState state of the resource
   * 
   * @param {IEnumerable} [parameters.authorizations] Gets or sets list of
   * authorizations
   * 
   * @param {IEnumerable} [parameters.peerings] Gets or sets list of peerings
   * 
   * @param {string} [parameters.serviceKey] Gets or sets ServiceKey
   * 
   * @param {string} [parameters.serviceProviderNotes] Gets or sets
   * ServiceProviderNotes
   * 
   * @param {ExpressRouteCircuitServiceProviderProperties}
   * [parameters.serviceProviderProperties] Gets or sets
   * ServiceProviderProperties
   * 
   * @param {string} [parameters.serviceProviderProperties.serviceProviderName]
   * Gets or sets serviceProviderName.
   * 
   * @param {string} [parameters.serviceProviderProperties.peeringLocation]
   * Gets or sets peering location.
   * 
   * @param {number} [parameters.serviceProviderProperties.bandwidthInMbps]
   * Gets or sets BandwidthInMbps.
   * 
   * @param {ExpressRouteCircuitSku} [parameters.sku] Gets or sets sku
   * 
   * @param {string} [parameters.sku.name] Gets or sets name of the sku.
   * 
   * @param {string} [parameters.sku.tier] Gets or sets tier of the sku.
   * 
   * @param {string} [parameters.sku.family] Gets or sets family of the sku.
   * 
   * @param {string} parameters.billingType BillingType to be used for the new
   * dedicated circuit.
   * 
   * @param {string} [parameters.provisioningState] Gets or sets Provisioning
   * state of the PublicIP resource Updating/Deleting/Failed
   * 
   * @param {string} [parameters.etag] Gets a unique read-only string that
   * changes whenever the resource is updated
   * 
   * @param {string} [parameters.id] Gets or sets the ID of the resource.
   * 
   * @param {string} [parameters.name] Gets or sets the name of the resource.
   * 
   * @param {string} [parameters.type] Gets or sets the type of the resource.
   * 
   * @param {string} [parameters.location] Gets or sets the location of the
   * resource.
   * 
   * @param {object} [parameters.tags] Gets or sets the tags attached to the
   * resource.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ExpressRouteCircuitOperations.prototype.beginCreateOrUpdating = function(resourceGroupName, circuitName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (circuitName === null || circuitName === undefined) {
      return callback(new Error('circuitName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.billingType === null || parameters.billingType === undefined) {
      return callback(new Error('parameters.billingType cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Network';
    url2 = url2 + '/expressRouteCircuits/';
    url2 = url2 + encodeURIComponent(circuitName);
    url2 = url2 + '/';
    var queryParameters = [];
    queryParameters.push('api-version=2015-05-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = null;
    
    var expressRouteCircuitJsonFormatValue = {};
    requestDoc = expressRouteCircuitJsonFormatValue;
    
    if (parameters.sku !== null && parameters.sku !== undefined) {
      var skuValue = {};
      expressRouteCircuitJsonFormatValue['sku'] = skuValue;
      
      if (parameters.sku.name !== null && parameters.sku.name !== undefined) {
        skuValue['name'] = parameters.sku.name;
      }
      
      if (parameters.sku.tier !== null && parameters.sku.tier !== undefined) {
        skuValue['tier'] = parameters.sku.tier;
      }
      
      if (parameters.sku.family !== null && parameters.sku.family !== undefined) {
        skuValue['family'] = parameters.sku.family;
      }
    }
    
    var propertiesValue = {};
    expressRouteCircuitJsonFormatValue['properties'] = propertiesValue;
    
    if (parameters.circuitProvisioningState !== null && parameters.circuitProvisioningState !== undefined) {
      propertiesValue['circuitProvisioningState'] = parameters.circuitProvisioningState;
    }
    
    if (parameters.serviceProviderProvisioningState !== null && parameters.serviceProviderProvisioningState !== undefined) {
      propertiesValue['serviceProviderProvisioningState'] = parameters.serviceProviderProvisioningState;
    }
    
    if (parameters.authorizations !== null && parameters.authorizations !== undefined) {
      var authorizationsArray = [];
      for (var loweredIndex1 = 0; loweredIndex1 < parameters.authorizations.length; loweredIndex1 = loweredIndex1 + 1) {
        var authorizationsItem = parameters.authorizations[loweredIndex1];
        var authorizationJsonFormatValue = {};
        authorizationsArray.push(authorizationJsonFormatValue);
        
        var propertiesValue2 = {};
        authorizationJsonFormatValue['properties'] = propertiesValue2;
        
        if (authorizationsItem.authorizationKey !== null && authorizationsItem.authorizationKey !== undefined) {
          propertiesValue2['authorizationKey'] = authorizationsItem.authorizationKey;
        }
        
        if (authorizationsItem.authorizationUseStatus !== null && authorizationsItem.authorizationUseStatus !== undefined) {
          propertiesValue2['authorizationUseStatus'] = authorizationsItem.authorizationUseStatus;
        }
        
        if (authorizationsItem.provisioningState !== null && authorizationsItem.provisioningState !== undefined) {
          propertiesValue2['provisioningState'] = authorizationsItem.provisioningState;
        }
        
        if (authorizationsItem.name !== null && authorizationsItem.name !== undefined) {
          authorizationJsonFormatValue['name'] = authorizationsItem.name;
        }
        
        if (authorizationsItem.etag !== null && authorizationsItem.etag !== undefined) {
          authorizationJsonFormatValue['etag'] = authorizationsItem.etag;
        }
        
        if (authorizationsItem.id !== null && authorizationsItem.id !== undefined) {
          authorizationJsonFormatValue['id'] = authorizationsItem.id;
        }
      }
      propertiesValue['authorizations'] = authorizationsArray;
    }
    
    if (parameters.peerings !== null && parameters.peerings !== undefined) {
      var peeringsArray = [];
      for (var loweredIndex2 = 0; loweredIndex2 < parameters.peerings.length; loweredIndex2 = loweredIndex2 + 1) {
        var peeringsItem = parameters.peerings[loweredIndex2];
        var expressRouteCircuitPeeringJsonFormatValue = {};
        peeringsArray.push(expressRouteCircuitPeeringJsonFormatValue);
        
        var propertiesValue3 = {};
        expressRouteCircuitPeeringJsonFormatValue['properties'] = propertiesValue3;
        
        if (peeringsItem.peeringType !== null && peeringsItem.peeringType !== undefined) {
          propertiesValue3['peeringType'] = peeringsItem.peeringType;
        }
        
        if (peeringsItem.state !== null && peeringsItem.state !== undefined) {
          propertiesValue3['state'] = peeringsItem.state;
        }
        
        if (peeringsItem.azureASN !== null && peeringsItem.azureASN !== undefined) {
          propertiesValue3['azureASN'] = peeringsItem.azureASN;
        }
        
        if (peeringsItem.peerASN !== null && peeringsItem.peerASN !== undefined) {
          propertiesValue3['peerASN'] = peeringsItem.peerASN;
        }
        
        if (peeringsItem.primaryPeerAddressPrefix !== null && peeringsItem.primaryPeerAddressPrefix !== undefined) {
          propertiesValue3['primaryPeerAddressPrefix'] = peeringsItem.primaryPeerAddressPrefix;
        }
        
        if (peeringsItem.secondaryPeerAddressPrefix !== null && peeringsItem.secondaryPeerAddressPrefix !== undefined) {
          propertiesValue3['secondaryPeerAddressPrefix'] = peeringsItem.secondaryPeerAddressPrefix;
        }
        
        if (peeringsItem.primaryAzurePort !== null && peeringsItem.primaryAzurePort !== undefined) {
          propertiesValue3['primaryAzurePort'] = peeringsItem.primaryAzurePort;
        }
        
        if (peeringsItem.secondaryAzurePort !== null && peeringsItem.secondaryAzurePort !== undefined) {
          propertiesValue3['secondaryAzurePort'] = peeringsItem.secondaryAzurePort;
        }
        
        if (peeringsItem.sharedKey !== null && peeringsItem.sharedKey !== undefined) {
          propertiesValue3['sharedKey'] = peeringsItem.sharedKey;
        }
        
        if (peeringsItem.vlanId !== null && peeringsItem.vlanId !== undefined) {
          propertiesValue3['vlanId'] = peeringsItem.vlanId;
        }
        
        if (peeringsItem.microsoftPeeringConfig !== null && peeringsItem.microsoftPeeringConfig !== undefined) {
          var microsoftPeeringConfigValue = {};
          propertiesValue3['microsoftPeeringConfig'] = microsoftPeeringConfigValue;
          
          if (peeringsItem.microsoftPeeringConfig.advertisedPublicPrefixes !== null && peeringsItem.microsoftPeeringConfig.advertisedPublicPrefixes !== undefined) {
            var advertisedPublicPrefixesArray = [];
            for (var loweredIndex3 = 0; loweredIndex3 < peeringsItem.microsoftPeeringConfig.advertisedPublicPrefixes.length; loweredIndex3 = loweredIndex3 + 1) {
              var advertisedPublicPrefixesItem = peeringsItem.microsoftPeeringConfig.advertisedPublicPrefixes[loweredIndex3];
              advertisedPublicPrefixesArray.push(advertisedPublicPrefixesItem);
            }
            microsoftPeeringConfigValue['advertisedPublicPrefixes'] = advertisedPublicPrefixesArray;
          }
          
          if (peeringsItem.microsoftPeeringConfig.advertisedPublicPrefixesState !== null && peeringsItem.microsoftPeeringConfig.advertisedPublicPrefixesState !== undefined) {
            microsoftPeeringConfigValue['advertisedPublicPrefixesState'] = peeringsItem.microsoftPeeringConfig.advertisedPublicPrefixesState;
          }
          
          if (peeringsItem.microsoftPeeringConfig.customerASN !== null && peeringsItem.microsoftPeeringConfig.customerASN !== undefined) {
            microsoftPeeringConfigValue['customerASN'] = peeringsItem.microsoftPeeringConfig.customerASN;
          }
          
          if (peeringsItem.microsoftPeeringConfig.routingRegistryName !== null && peeringsItem.microsoftPeeringConfig.routingRegistryName !== undefined) {
            microsoftPeeringConfigValue['routingRegistryName'] = peeringsItem.microsoftPeeringConfig.routingRegistryName;
          }
        }
        
        if (peeringsItem.stats !== null && peeringsItem.stats !== undefined) {
          var statsValue = {};
          propertiesValue3['stats'] = statsValue;
          
          if (peeringsItem.stats.bytesIn !== null && peeringsItem.stats.bytesIn !== undefined) {
            statsValue['bytesIn'] = peeringsItem.stats.bytesIn;
          }
          
          if (peeringsItem.stats.bytesOut !== null && peeringsItem.stats.bytesOut !== undefined) {
            statsValue['bytesOut'] = peeringsItem.stats.bytesOut;
          }
        }
        
        if (peeringsItem.provisioningState !== null && peeringsItem.provisioningState !== undefined) {
          propertiesValue3['provisioningState'] = peeringsItem.provisioningState;
        }
        
        if (peeringsItem.name !== null && peeringsItem.name !== undefined) {
          expressRouteCircuitPeeringJsonFormatValue['name'] = peeringsItem.name;
        }
        
        if (peeringsItem.etag !== null && peeringsItem.etag !== undefined) {
          expressRouteCircuitPeeringJsonFormatValue['etag'] = peeringsItem.etag;
        }
        
        if (peeringsItem.id !== null && peeringsItem.id !== undefined) {
          expressRouteCircuitPeeringJsonFormatValue['id'] = peeringsItem.id;
        }
      }
      propertiesValue['peerings'] = peeringsArray;
    }
    
    if (parameters.serviceKey !== null && parameters.serviceKey !== undefined) {
      propertiesValue['serviceKey'] = parameters.serviceKey;
    }
    
    if (parameters.serviceProviderNotes !== null && parameters.serviceProviderNotes !== undefined) {
      propertiesValue['serviceProviderNotes'] = parameters.serviceProviderNotes;
    }
    
    if (parameters.serviceProviderProperties !== null && parameters.serviceProviderProperties !== undefined) {
      var serviceProviderPropertiesValue = {};
      propertiesValue['serviceProviderProperties'] = serviceProviderPropertiesValue;
      
      if (parameters.serviceProviderProperties.serviceProviderName !== null && parameters.serviceProviderProperties.serviceProviderName !== undefined) {
        serviceProviderPropertiesValue['serviceProviderName'] = parameters.serviceProviderProperties.serviceProviderName;
      }
      
      if (parameters.serviceProviderProperties.peeringLocation !== null && parameters.serviceProviderProperties.peeringLocation !== undefined) {
        serviceProviderPropertiesValue['peeringLocation'] = parameters.serviceProviderProperties.peeringLocation;
      }
      
      if (parameters.serviceProviderProperties.bandwidthInMbps !== null && parameters.serviceProviderProperties.bandwidthInMbps !== undefined) {
        serviceProviderPropertiesValue['bandwidthInMbps'] = parameters.serviceProviderProperties.bandwidthInMbps;
      }
    }
    
    if (parameters.provisioningState !== null && parameters.provisioningState !== undefined) {
      propertiesValue['provisioningState'] = parameters.provisioningState;
    }
    
    if (parameters.etag !== null && parameters.etag !== undefined) {
      expressRouteCircuitJsonFormatValue['etag'] = parameters.etag;
    }
    
    if (parameters.id !== null && parameters.id !== undefined) {
      expressRouteCircuitJsonFormatValue['id'] = parameters.id;
    }
    
    if (parameters.name !== null && parameters.name !== undefined) {
      expressRouteCircuitJsonFormatValue['name'] = parameters.name;
    }
    
    if (parameters.type !== null && parameters.type !== undefined) {
      expressRouteCircuitJsonFormatValue['type'] = parameters.type;
    }
    
    if (parameters.location !== null && parameters.location !== undefined) {
      expressRouteCircuitJsonFormatValue['location'] = parameters.location;
    }
    
    if (parameters.tags !== null && parameters.tags !== undefined) {
      var tagsDictionary = {};
      for (var tagsKey in parameters.tags) {
        var tagsValue = parameters.tags[tagsKey];
        tagsDictionary[tagsKey] = tagsValue;
      }
      expressRouteCircuitJsonFormatValue['tags'] = tagsDictionary;
    }
    
    requestContent = JSON.stringify(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200 && statusCode !== 201) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200 || statusCode === 201) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var expressRouteCircuitInstance = { authorizations: [], peerings: [], tags: {} };
          result.expressRouteCircuit = expressRouteCircuitInstance;
          
          var skuValue2 = responseDoc['sku'];
          if (skuValue2 !== null && skuValue2 !== undefined) {
            var skuInstance = {};
            expressRouteCircuitInstance.sku = skuInstance;
            
            var nameValue = skuValue2['name'];
            if (nameValue !== null && nameValue !== undefined) {
              var nameInstance = nameValue;
              skuInstance.name = nameInstance;
            }
            
            var tierValue = skuValue2['tier'];
            if (tierValue !== null && tierValue !== undefined) {
              var tierInstance = tierValue;
              skuInstance.tier = tierInstance;
            }
            
            var familyValue = skuValue2['family'];
            if (familyValue !== null && familyValue !== undefined) {
              var familyInstance = familyValue;
              skuInstance.family = familyInstance;
            }
          }
          
          var propertiesValue4 = responseDoc['properties'];
          if (propertiesValue4 !== null && propertiesValue4 !== undefined) {
            var circuitProvisioningStateValue = propertiesValue4['circuitProvisioningState'];
            if (circuitProvisioningStateValue !== null && circuitProvisioningStateValue !== undefined) {
              var circuitProvisioningStateInstance = circuitProvisioningStateValue;
              expressRouteCircuitInstance.circuitProvisioningState = circuitProvisioningStateInstance;
            }
            
            var serviceProviderProvisioningStateValue = propertiesValue4['serviceProviderProvisioningState'];
            if (serviceProviderProvisioningStateValue !== null && serviceProviderProvisioningStateValue !== undefined) {
              var serviceProviderProvisioningStateInstance = serviceProviderProvisioningStateValue;
              expressRouteCircuitInstance.serviceProviderProvisioningState = serviceProviderProvisioningStateInstance;
            }
            
            var authorizationsArray2 = propertiesValue4['authorizations'];
            if (authorizationsArray2 !== null && authorizationsArray2 !== undefined) {
              for (var loweredIndex4 = 0; loweredIndex4 < authorizationsArray2.length; loweredIndex4 = loweredIndex4 + 1) {
                var authorizationsValue = authorizationsArray2[loweredIndex4];
                var authorizationJsonFormatInstance = {};
                expressRouteCircuitInstance.authorizations.push(authorizationJsonFormatInstance);
                
                var propertiesValue5 = authorizationsValue['properties'];
                if (propertiesValue5 !== null && propertiesValue5 !== undefined) {
                  var authorizationKeyValue = propertiesValue5['authorizationKey'];
                  if (authorizationKeyValue !== null && authorizationKeyValue !== undefined) {
                    var authorizationKeyInstance = authorizationKeyValue;
                    authorizationJsonFormatInstance.authorizationKey = authorizationKeyInstance;
                  }
                  
                  var authorizationUseStatusValue = propertiesValue5['authorizationUseStatus'];
                  if (authorizationUseStatusValue !== null && authorizationUseStatusValue !== undefined) {
                    var authorizationUseStatusInstance = authorizationUseStatusValue;
                    authorizationJsonFormatInstance.authorizationUseStatus = authorizationUseStatusInstance;
                  }
                  
                  var provisioningStateValue = propertiesValue5['provisioningState'];
                  if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
                    var provisioningStateInstance = provisioningStateValue;
                    authorizationJsonFormatInstance.provisioningState = provisioningStateInstance;
                  }
                }
                
                var nameValue2 = authorizationsValue['name'];
                if (nameValue2 !== null && nameValue2 !== undefined) {
                  var nameInstance2 = nameValue2;
                  authorizationJsonFormatInstance.name = nameInstance2;
                }
                
                var etagValue = authorizationsValue['etag'];
                if (etagValue !== null && etagValue !== undefined) {
                  var etagInstance = etagValue;
                  authorizationJsonFormatInstance.etag = etagInstance;
                }
                
                var idValue = authorizationsValue['id'];
                if (idValue !== null && idValue !== undefined) {
                  var idInstance = idValue;
                  authorizationJsonFormatInstance.id = idInstance;
                }
              }
            }
            
            var peeringsArray2 = propertiesValue4['peerings'];
            if (peeringsArray2 !== null && peeringsArray2 !== undefined) {
              for (var loweredIndex5 = 0; loweredIndex5 < peeringsArray2.length; loweredIndex5 = loweredIndex5 + 1) {
                var peeringsValue = peeringsArray2[loweredIndex5];
                var expressRouteCircuitPeeringJsonFormatInstance = {};
                expressRouteCircuitInstance.peerings.push(expressRouteCircuitPeeringJsonFormatInstance);
                
                var propertiesValue6 = peeringsValue['properties'];
                if (propertiesValue6 !== null && propertiesValue6 !== undefined) {
                  var peeringTypeValue = propertiesValue6['peeringType'];
                  if (peeringTypeValue !== null && peeringTypeValue !== undefined) {
                    var peeringTypeInstance = peeringTypeValue;
                    expressRouteCircuitPeeringJsonFormatInstance.peeringType = peeringTypeInstance;
                  }
                  
                  var stateValue = propertiesValue6['state'];
                  if (stateValue !== null && stateValue !== undefined) {
                    var stateInstance = stateValue;
                    expressRouteCircuitPeeringJsonFormatInstance.state = stateInstance;
                  }
                  
                  var azureASNValue = propertiesValue6['azureASN'];
                  if (azureASNValue !== null && azureASNValue !== undefined) {
                    var azureASNInstance = azureASNValue;
                    expressRouteCircuitPeeringJsonFormatInstance.azureASN = azureASNInstance;
                  }
                  
                  var peerASNValue = propertiesValue6['peerASN'];
                  if (peerASNValue !== null && peerASNValue !== undefined) {
                    var peerASNInstance = peerASNValue;
                    expressRouteCircuitPeeringJsonFormatInstance.peerASN = peerASNInstance;
                  }
                  
                  var primaryPeerAddressPrefixValue = propertiesValue6['primaryPeerAddressPrefix'];
                  if (primaryPeerAddressPrefixValue !== null && primaryPeerAddressPrefixValue !== undefined) {
                    var primaryPeerAddressPrefixInstance = primaryPeerAddressPrefixValue;
                    expressRouteCircuitPeeringJsonFormatInstance.primaryPeerAddressPrefix = primaryPeerAddressPrefixInstance;
                  }
                  
                  var secondaryPeerAddressPrefixValue = propertiesValue6['secondaryPeerAddressPrefix'];
                  if (secondaryPeerAddressPrefixValue !== null && secondaryPeerAddressPrefixValue !== undefined) {
                    var secondaryPeerAddressPrefixInstance = secondaryPeerAddressPrefixValue;
                    expressRouteCircuitPeeringJsonFormatInstance.secondaryPeerAddressPrefix = secondaryPeerAddressPrefixInstance;
                  }
                  
                  var primaryAzurePortValue = propertiesValue6['primaryAzurePort'];
                  if (primaryAzurePortValue !== null && primaryAzurePortValue !== undefined) {
                    var primaryAzurePortInstance = primaryAzurePortValue;
                    expressRouteCircuitPeeringJsonFormatInstance.primaryAzurePort = primaryAzurePortInstance;
                  }
                  
                  var secondaryAzurePortValue = propertiesValue6['secondaryAzurePort'];
                  if (secondaryAzurePortValue !== null && secondaryAzurePortValue !== undefined) {
                    var secondaryAzurePortInstance = secondaryAzurePortValue;
                    expressRouteCircuitPeeringJsonFormatInstance.secondaryAzurePort = secondaryAzurePortInstance;
                  }
                  
                  var sharedKeyValue = propertiesValue6['sharedKey'];
                  if (sharedKeyValue !== null && sharedKeyValue !== undefined) {
                    var sharedKeyInstance = sharedKeyValue;
                    expressRouteCircuitPeeringJsonFormatInstance.sharedKey = sharedKeyInstance;
                  }
                  
                  var vlanIdValue = propertiesValue6['vlanId'];
                  if (vlanIdValue !== null && vlanIdValue !== undefined) {
                    var vlanIdInstance = vlanIdValue;
                    expressRouteCircuitPeeringJsonFormatInstance.vlanId = vlanIdInstance;
                  }
                  
                  var microsoftPeeringConfigValue2 = propertiesValue6['microsoftPeeringConfig'];
                  if (microsoftPeeringConfigValue2 !== null && microsoftPeeringConfigValue2 !== undefined) {
                    var microsoftPeeringConfigInstance = { advertisedPublicPrefixes: [] };
                    expressRouteCircuitPeeringJsonFormatInstance.microsoftPeeringConfig = microsoftPeeringConfigInstance;
                    
                    var advertisedPublicPrefixesArray2 = microsoftPeeringConfigValue2['advertisedPublicPrefixes'];
                    if (advertisedPublicPrefixesArray2 !== null && advertisedPublicPrefixesArray2 !== undefined) {
                      for (var loweredIndex6 = 0; loweredIndex6 < advertisedPublicPrefixesArray2.length; loweredIndex6 = loweredIndex6 + 1) {
                        var advertisedPublicPrefixesValue = advertisedPublicPrefixesArray2[loweredIndex6];
                        microsoftPeeringConfigInstance.advertisedPublicPrefixes.push(advertisedPublicPrefixesValue);
                      }
                    }
                    
                    var advertisedPublicPrefixesStateValue = microsoftPeeringConfigValue2['advertisedPublicPrefixesState'];
                    if (advertisedPublicPrefixesStateValue !== null && advertisedPublicPrefixesStateValue !== undefined) {
                      var advertisedPublicPrefixesStateInstance = advertisedPublicPrefixesStateValue;
                      microsoftPeeringConfigInstance.advertisedPublicPrefixesState = advertisedPublicPrefixesStateInstance;
                    }
                    
                    var customerASNValue = microsoftPeeringConfigValue2['customerASN'];
                    if (customerASNValue !== null && customerASNValue !== undefined) {
                      var customerASNInstance = customerASNValue;
                      microsoftPeeringConfigInstance.customerASN = customerASNInstance;
                    }
                    
                    var routingRegistryNameValue = microsoftPeeringConfigValue2['routingRegistryName'];
                    if (routingRegistryNameValue !== null && routingRegistryNameValue !== undefined) {
                      var routingRegistryNameInstance = routingRegistryNameValue;
                      microsoftPeeringConfigInstance.routingRegistryName = routingRegistryNameInstance;
                    }
                  }
                  
                  var statsValue2 = propertiesValue6['stats'];
                  if (statsValue2 !== null && statsValue2 !== undefined) {
                    var statsInstance = {};
                    expressRouteCircuitPeeringJsonFormatInstance.stats = statsInstance;
                    
                    var bytesInValue = statsValue2['bytesIn'];
                    if (bytesInValue !== null && bytesInValue !== undefined) {
                      var bytesInInstance = bytesInValue;
                      statsInstance.bytesIn = bytesInInstance;
                    }
                    
                    var bytesOutValue = statsValue2['bytesOut'];
                    if (bytesOutValue !== null && bytesOutValue !== undefined) {
                      var bytesOutInstance = bytesOutValue;
                      statsInstance.bytesOut = bytesOutInstance;
                    }
                  }
                  
                  var provisioningStateValue2 = propertiesValue6['provisioningState'];
                  if (provisioningStateValue2 !== null && provisioningStateValue2 !== undefined) {
                    var provisioningStateInstance2 = provisioningStateValue2;
                    expressRouteCircuitPeeringJsonFormatInstance.provisioningState = provisioningStateInstance2;
                  }
                }
                
                var nameValue3 = peeringsValue['name'];
                if (nameValue3 !== null && nameValue3 !== undefined) {
                  var nameInstance3 = nameValue3;
                  expressRouteCircuitPeeringJsonFormatInstance.name = nameInstance3;
                }
                
                var etagValue2 = peeringsValue['etag'];
                if (etagValue2 !== null && etagValue2 !== undefined) {
                  var etagInstance2 = etagValue2;
                  expressRouteCircuitPeeringJsonFormatInstance.etag = etagInstance2;
                }
                
                var idValue2 = peeringsValue['id'];
                if (idValue2 !== null && idValue2 !== undefined) {
                  var idInstance2 = idValue2;
                  expressRouteCircuitPeeringJsonFormatInstance.id = idInstance2;
                }
              }
            }
            
            var serviceKeyValue = propertiesValue4['serviceKey'];
            if (serviceKeyValue !== null && serviceKeyValue !== undefined) {
              var serviceKeyInstance = serviceKeyValue;
              expressRouteCircuitInstance.serviceKey = serviceKeyInstance;
            }
            
            var serviceProviderNotesValue = propertiesValue4['serviceProviderNotes'];
            if (serviceProviderNotesValue !== null && serviceProviderNotesValue !== undefined) {
              var serviceProviderNotesInstance = serviceProviderNotesValue;
              expressRouteCircuitInstance.serviceProviderNotes = serviceProviderNotesInstance;
            }
            
            var serviceProviderPropertiesValue2 = propertiesValue4['serviceProviderProperties'];
            if (serviceProviderPropertiesValue2 !== null && serviceProviderPropertiesValue2 !== undefined) {
              var serviceProviderPropertiesInstance = {};
              expressRouteCircuitInstance.serviceProviderProperties = serviceProviderPropertiesInstance;
              
              var serviceProviderNameValue = serviceProviderPropertiesValue2['serviceProviderName'];
              if (serviceProviderNameValue !== null && serviceProviderNameValue !== undefined) {
                var serviceProviderNameInstance = serviceProviderNameValue;
                serviceProviderPropertiesInstance.serviceProviderName = serviceProviderNameInstance;
              }
              
              var peeringLocationValue = serviceProviderPropertiesValue2['peeringLocation'];
              if (peeringLocationValue !== null && peeringLocationValue !== undefined) {
                var peeringLocationInstance = peeringLocationValue;
                serviceProviderPropertiesInstance.peeringLocation = peeringLocationInstance;
              }
              
              var bandwidthInMbpsValue = serviceProviderPropertiesValue2['bandwidthInMbps'];
              if (bandwidthInMbpsValue !== null && bandwidthInMbpsValue !== undefined) {
                var bandwidthInMbpsInstance = bandwidthInMbpsValue;
                serviceProviderPropertiesInstance.bandwidthInMbps = bandwidthInMbpsInstance;
              }
            }
            
            var provisioningStateValue3 = propertiesValue4['provisioningState'];
            if (provisioningStateValue3 !== null && provisioningStateValue3 !== undefined) {
              var provisioningStateInstance3 = provisioningStateValue3;
              expressRouteCircuitInstance.provisioningState = provisioningStateInstance3;
            }
          }
          
          var etagValue3 = responseDoc['etag'];
          if (etagValue3 !== null && etagValue3 !== undefined) {
            var etagInstance3 = etagValue3;
            expressRouteCircuitInstance.etag = etagInstance3;
          }
          
          var idValue3 = responseDoc['id'];
          if (idValue3 !== null && idValue3 !== undefined) {
            var idInstance3 = idValue3;
            expressRouteCircuitInstance.id = idInstance3;
          }
          
          var nameValue4 = responseDoc['name'];
          if (nameValue4 !== null && nameValue4 !== undefined) {
            var nameInstance4 = nameValue4;
            expressRouteCircuitInstance.name = nameInstance4;
          }
          
          var typeValue = responseDoc['type'];
          if (typeValue !== null && typeValue !== undefined) {
            var typeInstance = typeValue;
            expressRouteCircuitInstance.type = typeInstance;
          }
          
          var locationValue = responseDoc['location'];
          if (locationValue !== null && locationValue !== undefined) {
            var locationInstance = locationValue;
            expressRouteCircuitInstance.location = locationInstance;
          }
          
          var tagsSequenceElement = responseDoc['tags'];
          if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
            for (var property in tagsSequenceElement) {
              var tagsKey2 = property;
              var tagsValue2 = tagsSequenceElement[property];
              expressRouteCircuitInstance.tags[tagsKey2] = tagsValue2;
            }
          }
          
          var errorValue = responseDoc['error'];
          if (errorValue !== null && errorValue !== undefined) {
            var errorInstance = { details: [] };
            result.error = errorInstance;
            
            var codeValue = errorValue['code'];
            if (codeValue !== null && codeValue !== undefined) {
              var codeInstance = codeValue;
              errorInstance.code = codeInstance;
            }
            
            var messageValue = errorValue['message'];
            if (messageValue !== null && messageValue !== undefined) {
              var messageInstance = messageValue;
              errorInstance.message = messageInstance;
            }
            
            var targetValue = errorValue['target'];
            if (targetValue !== null && targetValue !== undefined) {
              var targetInstance = targetValue;
              errorInstance.target = targetInstance;
            }
            
            var detailsArray = errorValue['details'];
            if (detailsArray !== null && detailsArray !== undefined) {
              for (var loweredIndex7 = 0; loweredIndex7 < detailsArray.length; loweredIndex7 = loweredIndex7 + 1) {
                var detailsValue = detailsArray[loweredIndex7];
                var errorDetailsInstance = {};
                errorInstance.details.push(errorDetailsInstance);
                
                var codeValue2 = detailsValue['code'];
                if (codeValue2 !== null && codeValue2 !== undefined) {
                  var codeInstance2 = codeValue2;
                  errorDetailsInstance.code = codeInstance2;
                }
                
                var targetValue2 = detailsValue['target'];
                if (targetValue2 !== null && targetValue2 !== undefined) {
                  var targetInstance2 = targetValue2;
                  errorDetailsInstance.target = targetInstance2;
                }
                
                var messageValue2 = detailsValue['message'];
                if (messageValue2 !== null && messageValue2 !== undefined) {
                  var messageInstance2 = messageValue2;
                  errorDetailsInstance.message = messageInstance2;
                }
              }
            }
            
            var innerErrorValue = errorValue['innerError'];
            if (innerErrorValue !== null && innerErrorValue !== undefined) {
              var innerErrorInstance = innerErrorValue;
              errorInstance.innerError = innerErrorInstance;
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      result.azureAsyncOperation = response.headers['azure-asyncoperation'];
      result.retryAfter = parseInt(response.headers['retry-after'], 10);
      
      return callback(null, result);
    });
  };
  
  /**
   * The delete ExpressRouteCircuit operation deletes the specified
   * ExpressRouteCircuit.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} circuitName The name of the express route Circuit.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ExpressRouteCircuitOperations.prototype.beginDeleting = function(resourceGroupName, circuitName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (circuitName === null || circuitName === undefined) {
      return callback(new Error('circuitName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Network';
    url2 = url2 + '/expressRouteCircuits/';
    url2 = url2 + encodeURIComponent(circuitName);
    url2 = url2 + '/';
    var queryParameters = [];
    queryParameters.push('api-version=2015-05-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'DELETE';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200 && statusCode !== 202 && statusCode !== 204) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      result = {};
      result.statusCode = statusCode;
      result.azureAsyncOperation = response.headers['azure-asyncoperation'];
      result.retryAfter = parseInt(response.headers['retry-after'], 10);
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The Put ExpressRouteCircuit operation creates/updates a ExpressRouteCircuit
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} circuitName The name of the ExpressRouteCircuit.
   * 
   * @param {ExpressRouteCircuit} parameters Parameters supplied to the
   * create/update ExpressRouteCircuit operation
   * 
   * @param {string} [parameters.circuitProvisioningState] Gets or sets
   * CircuitProvisioningState state of the resource
   * 
   * @param {string} [parameters.serviceProviderProvisioningState] Gets or sets
   * ServiceProviderProvisioningState state of the resource
   * 
   * @param {IEnumerable} [parameters.authorizations] Gets or sets list of
   * authorizations
   * 
   * @param {IEnumerable} [parameters.peerings] Gets or sets list of peerings
   * 
   * @param {string} [parameters.serviceKey] Gets or sets ServiceKey
   * 
   * @param {string} [parameters.serviceProviderNotes] Gets or sets
   * ServiceProviderNotes
   * 
   * @param {ExpressRouteCircuitServiceProviderProperties}
   * [parameters.serviceProviderProperties] Gets or sets
   * ServiceProviderProperties
   * 
   * @param {string} [parameters.serviceProviderProperties.serviceProviderName]
   * Gets or sets serviceProviderName.
   * 
   * @param {string} [parameters.serviceProviderProperties.peeringLocation]
   * Gets or sets peering location.
   * 
   * @param {number} [parameters.serviceProviderProperties.bandwidthInMbps]
   * Gets or sets BandwidthInMbps.
   * 
   * @param {ExpressRouteCircuitSku} [parameters.sku] Gets or sets sku
   * 
   * @param {string} [parameters.sku.name] Gets or sets name of the sku.
   * 
   * @param {string} [parameters.sku.tier] Gets or sets tier of the sku.
   * 
   * @param {string} [parameters.sku.family] Gets or sets family of the sku.
   * 
   * @param {string} parameters.billingType BillingType to be used for the new
   * dedicated circuit.
   * 
   * @param {string} [parameters.provisioningState] Gets or sets Provisioning
   * state of the PublicIP resource Updating/Deleting/Failed
   * 
   * @param {string} [parameters.etag] Gets a unique read-only string that
   * changes whenever the resource is updated
   * 
   * @param {string} [parameters.id] Gets or sets the ID of the resource.
   * 
   * @param {string} [parameters.name] Gets or sets the name of the resource.
   * 
   * @param {string} [parameters.type] Gets or sets the type of the resource.
   * 
   * @param {string} [parameters.location] Gets or sets the location of the
   * resource.
   * 
   * @param {object} [parameters.tags] Gets or sets the tags attached to the
   * resource.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ExpressRouteCircuitOperations.prototype.createOrUpdate = function(resourceGroupName, circuitName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.expressRouteCircuits.beginCreateOrUpdating(resourceGroupName, circuitName, parameters, function (err, result) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var delayInSeconds = result.retryAfter;
      if (delayInSeconds === 0) {
        delayInSeconds = 30;
      }
      if (client2.longRunningOperationInitialTimeout >= 0) {
        delayInSeconds = client2.longRunningOperationInitialTimeout;
      }
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.getLongRunningOperationStatus(result.azureAsyncOperation, function (err2, result2) {
            if (err2 !== null && err2 !== undefined) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                return callback(null, result2);
              } else {
                delayInSeconds = result2.retryAfter;
                if (delayInSeconds === 0) {
                  delayInSeconds = 15;
                }
                if (client2.longRunningOperationRetryTimeout >= 0) {
                  delayInSeconds = client2.longRunningOperationRetryTimeout;
                }
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  /**
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} circuitName The name of the express route circuit.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ExpressRouteCircuitOperations.prototype.deleteMethod = function(resourceGroupName, circuitName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.expressRouteCircuits.beginDeleting(resourceGroupName, circuitName, function (err, result) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var delayInSeconds = result.retryAfter;
      if (delayInSeconds === 0) {
        delayInSeconds = 30;
      }
      if (client2.longRunningOperationInitialTimeout >= 0) {
        delayInSeconds = client2.longRunningOperationInitialTimeout;
      }
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.getLongRunningOperationStatus(result.azureAsyncOperation, function (err2, result2) {
            if (err2 !== null && err2 !== undefined) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                return callback(null, result2);
              } else {
                delayInSeconds = result2.retryAfter;
                if (delayInSeconds === 0) {
                  delayInSeconds = 15;
                }
                if (client2.longRunningOperationRetryTimeout >= 0) {
                  delayInSeconds = client2.longRunningOperationRetryTimeout;
                }
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  /**
   * The Get ExpressRouteCircuit operation retreives information about the
   * specified ExpressRouteCircuit.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} circuitName The name of the circuit.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ExpressRouteCircuitOperations.prototype.get = function(resourceGroupName, circuitName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (circuitName === null || circuitName === undefined) {
      return callback(new Error('circuitName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Network';
    url2 = url2 + '/expressRouteCircuits/';
    url2 = url2 + encodeURIComponent(circuitName);
    url2 = url2 + '/';
    var queryParameters = [];
    queryParameters.push('api-version=2015-05-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var expressRouteCircuitInstance = { authorizations: [], peerings: [], tags: {} };
          result.expressRouteCircuit = expressRouteCircuitInstance;
          
          var skuValue = responseDoc['sku'];
          if (skuValue !== null && skuValue !== undefined) {
            var skuInstance = {};
            expressRouteCircuitInstance.sku = skuInstance;
            
            var nameValue = skuValue['name'];
            if (nameValue !== null && nameValue !== undefined) {
              var nameInstance = nameValue;
              skuInstance.name = nameInstance;
            }
            
            var tierValue = skuValue['tier'];
            if (tierValue !== null && tierValue !== undefined) {
              var tierInstance = tierValue;
              skuInstance.tier = tierInstance;
            }
            
            var familyValue = skuValue['family'];
            if (familyValue !== null && familyValue !== undefined) {
              var familyInstance = familyValue;
              skuInstance.family = familyInstance;
            }
          }
          
          var propertiesValue = responseDoc['properties'];
          if (propertiesValue !== null && propertiesValue !== undefined) {
            var circuitProvisioningStateValue = propertiesValue['circuitProvisioningState'];
            if (circuitProvisioningStateValue !== null && circuitProvisioningStateValue !== undefined) {
              var circuitProvisioningStateInstance = circuitProvisioningStateValue;
              expressRouteCircuitInstance.circuitProvisioningState = circuitProvisioningStateInstance;
            }
            
            var serviceProviderProvisioningStateValue = propertiesValue['serviceProviderProvisioningState'];
            if (serviceProviderProvisioningStateValue !== null && serviceProviderProvisioningStateValue !== undefined) {
              var serviceProviderProvisioningStateInstance = serviceProviderProvisioningStateValue;
              expressRouteCircuitInstance.serviceProviderProvisioningState = serviceProviderProvisioningStateInstance;
            }
            
            var authorizationsArray = propertiesValue['authorizations'];
            if (authorizationsArray !== null && authorizationsArray !== undefined) {
              for (var loweredIndex1 = 0; loweredIndex1 < authorizationsArray.length; loweredIndex1 = loweredIndex1 + 1) {
                var authorizationsValue = authorizationsArray[loweredIndex1];
                var authorizationJsonFormatInstance = {};
                expressRouteCircuitInstance.authorizations.push(authorizationJsonFormatInstance);
                
                var propertiesValue2 = authorizationsValue['properties'];
                if (propertiesValue2 !== null && propertiesValue2 !== undefined) {
                  var authorizationKeyValue = propertiesValue2['authorizationKey'];
                  if (authorizationKeyValue !== null && authorizationKeyValue !== undefined) {
                    var authorizationKeyInstance = authorizationKeyValue;
                    authorizationJsonFormatInstance.authorizationKey = authorizationKeyInstance;
                  }
                  
                  var authorizationUseStatusValue = propertiesValue2['authorizationUseStatus'];
                  if (authorizationUseStatusValue !== null && authorizationUseStatusValue !== undefined) {
                    var authorizationUseStatusInstance = authorizationUseStatusValue;
                    authorizationJsonFormatInstance.authorizationUseStatus = authorizationUseStatusInstance;
                  }
                  
                  var provisioningStateValue = propertiesValue2['provisioningState'];
                  if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
                    var provisioningStateInstance = provisioningStateValue;
                    authorizationJsonFormatInstance.provisioningState = provisioningStateInstance;
                  }
                }
                
                var nameValue2 = authorizationsValue['name'];
                if (nameValue2 !== null && nameValue2 !== undefined) {
                  var nameInstance2 = nameValue2;
                  authorizationJsonFormatInstance.name = nameInstance2;
                }
                
                var etagValue = authorizationsValue['etag'];
                if (etagValue !== null && etagValue !== undefined) {
                  var etagInstance = etagValue;
                  authorizationJsonFormatInstance.etag = etagInstance;
                }
                
                var idValue = authorizationsValue['id'];
                if (idValue !== null && idValue !== undefined) {
                  var idInstance = idValue;
                  authorizationJsonFormatInstance.id = idInstance;
                }
              }
            }
            
            var peeringsArray = propertiesValue['peerings'];
            if (peeringsArray !== null && peeringsArray !== undefined) {
              for (var loweredIndex2 = 0; loweredIndex2 < peeringsArray.length; loweredIndex2 = loweredIndex2 + 1) {
                var peeringsValue = peeringsArray[loweredIndex2];
                var expressRouteCircuitPeeringJsonFormatInstance = {};
                expressRouteCircuitInstance.peerings.push(expressRouteCircuitPeeringJsonFormatInstance);
                
                var propertiesValue3 = peeringsValue['properties'];
                if (propertiesValue3 !== null && propertiesValue3 !== undefined) {
                  var peeringTypeValue = propertiesValue3['peeringType'];
                  if (peeringTypeValue !== null && peeringTypeValue !== undefined) {
                    var peeringTypeInstance = peeringTypeValue;
                    expressRouteCircuitPeeringJsonFormatInstance.peeringType = peeringTypeInstance;
                  }
                  
                  var stateValue = propertiesValue3['state'];
                  if (stateValue !== null && stateValue !== undefined) {
                    var stateInstance = stateValue;
                    expressRouteCircuitPeeringJsonFormatInstance.state = stateInstance;
                  }
                  
                  var azureASNValue = propertiesValue3['azureASN'];
                  if (azureASNValue !== null && azureASNValue !== undefined) {
                    var azureASNInstance = azureASNValue;
                    expressRouteCircuitPeeringJsonFormatInstance.azureASN = azureASNInstance;
                  }
                  
                  var peerASNValue = propertiesValue3['peerASN'];
                  if (peerASNValue !== null && peerASNValue !== undefined) {
                    var peerASNInstance = peerASNValue;
                    expressRouteCircuitPeeringJsonFormatInstance.peerASN = peerASNInstance;
                  }
                  
                  var primaryPeerAddressPrefixValue = propertiesValue3['primaryPeerAddressPrefix'];
                  if (primaryPeerAddressPrefixValue !== null && primaryPeerAddressPrefixValue !== undefined) {
                    var primaryPeerAddressPrefixInstance = primaryPeerAddressPrefixValue;
                    expressRouteCircuitPeeringJsonFormatInstance.primaryPeerAddressPrefix = primaryPeerAddressPrefixInstance;
                  }
                  
                  var secondaryPeerAddressPrefixValue = propertiesValue3['secondaryPeerAddressPrefix'];
                  if (secondaryPeerAddressPrefixValue !== null && secondaryPeerAddressPrefixValue !== undefined) {
                    var secondaryPeerAddressPrefixInstance = secondaryPeerAddressPrefixValue;
                    expressRouteCircuitPeeringJsonFormatInstance.secondaryPeerAddressPrefix = secondaryPeerAddressPrefixInstance;
                  }
                  
                  var primaryAzurePortValue = propertiesValue3['primaryAzurePort'];
                  if (primaryAzurePortValue !== null && primaryAzurePortValue !== undefined) {
                    var primaryAzurePortInstance = primaryAzurePortValue;
                    expressRouteCircuitPeeringJsonFormatInstance.primaryAzurePort = primaryAzurePortInstance;
                  }
                  
                  var secondaryAzurePortValue = propertiesValue3['secondaryAzurePort'];
                  if (secondaryAzurePortValue !== null && secondaryAzurePortValue !== undefined) {
                    var secondaryAzurePortInstance = secondaryAzurePortValue;
                    expressRouteCircuitPeeringJsonFormatInstance.secondaryAzurePort = secondaryAzurePortInstance;
                  }
                  
                  var sharedKeyValue = propertiesValue3['sharedKey'];
                  if (sharedKeyValue !== null && sharedKeyValue !== undefined) {
                    var sharedKeyInstance = sharedKeyValue;
                    expressRouteCircuitPeeringJsonFormatInstance.sharedKey = sharedKeyInstance;
                  }
                  
                  var vlanIdValue = propertiesValue3['vlanId'];
                  if (vlanIdValue !== null && vlanIdValue !== undefined) {
                    var vlanIdInstance = vlanIdValue;
                    expressRouteCircuitPeeringJsonFormatInstance.vlanId = vlanIdInstance;
                  }
                  
                  var microsoftPeeringConfigValue = propertiesValue3['microsoftPeeringConfig'];
                  if (microsoftPeeringConfigValue !== null && microsoftPeeringConfigValue !== undefined) {
                    var microsoftPeeringConfigInstance = { advertisedPublicPrefixes: [] };
                    expressRouteCircuitPeeringJsonFormatInstance.microsoftPeeringConfig = microsoftPeeringConfigInstance;
                    
                    var advertisedPublicPrefixesArray = microsoftPeeringConfigValue['advertisedPublicPrefixes'];
                    if (advertisedPublicPrefixesArray !== null && advertisedPublicPrefixesArray !== undefined) {
                      for (var loweredIndex3 = 0; loweredIndex3 < advertisedPublicPrefixesArray.length; loweredIndex3 = loweredIndex3 + 1) {
                        var advertisedPublicPrefixesValue = advertisedPublicPrefixesArray[loweredIndex3];
                        microsoftPeeringConfigInstance.advertisedPublicPrefixes.push(advertisedPublicPrefixesValue);
                      }
                    }
                    
                    var advertisedPublicPrefixesStateValue = microsoftPeeringConfigValue['advertisedPublicPrefixesState'];
                    if (advertisedPublicPrefixesStateValue !== null && advertisedPublicPrefixesStateValue !== undefined) {
                      var advertisedPublicPrefixesStateInstance = advertisedPublicPrefixesStateValue;
                      microsoftPeeringConfigInstance.advertisedPublicPrefixesState = advertisedPublicPrefixesStateInstance;
                    }
                    
                    var customerASNValue = microsoftPeeringConfigValue['customerASN'];
                    if (customerASNValue !== null && customerASNValue !== undefined) {
                      var customerASNInstance = customerASNValue;
                      microsoftPeeringConfigInstance.customerASN = customerASNInstance;
                    }
                    
                    var routingRegistryNameValue = microsoftPeeringConfigValue['routingRegistryName'];
                    if (routingRegistryNameValue !== null && routingRegistryNameValue !== undefined) {
                      var routingRegistryNameInstance = routingRegistryNameValue;
                      microsoftPeeringConfigInstance.routingRegistryName = routingRegistryNameInstance;
                    }
                  }
                  
                  var statsValue = propertiesValue3['stats'];
                  if (statsValue !== null && statsValue !== undefined) {
                    var statsInstance = {};
                    expressRouteCircuitPeeringJsonFormatInstance.stats = statsInstance;
                    
                    var bytesInValue = statsValue['bytesIn'];
                    if (bytesInValue !== null && bytesInValue !== undefined) {
                      var bytesInInstance = bytesInValue;
                      statsInstance.bytesIn = bytesInInstance;
                    }
                    
                    var bytesOutValue = statsValue['bytesOut'];
                    if (bytesOutValue !== null && bytesOutValue !== undefined) {
                      var bytesOutInstance = bytesOutValue;
                      statsInstance.bytesOut = bytesOutInstance;
                    }
                  }
                  
                  var provisioningStateValue2 = propertiesValue3['provisioningState'];
                  if (provisioningStateValue2 !== null && provisioningStateValue2 !== undefined) {
                    var provisioningStateInstance2 = provisioningStateValue2;
                    expressRouteCircuitPeeringJsonFormatInstance.provisioningState = provisioningStateInstance2;
                  }
                }
                
                var nameValue3 = peeringsValue['name'];
                if (nameValue3 !== null && nameValue3 !== undefined) {
                  var nameInstance3 = nameValue3;
                  expressRouteCircuitPeeringJsonFormatInstance.name = nameInstance3;
                }
                
                var etagValue2 = peeringsValue['etag'];
                if (etagValue2 !== null && etagValue2 !== undefined) {
                  var etagInstance2 = etagValue2;
                  expressRouteCircuitPeeringJsonFormatInstance.etag = etagInstance2;
                }
                
                var idValue2 = peeringsValue['id'];
                if (idValue2 !== null && idValue2 !== undefined) {
                  var idInstance2 = idValue2;
                  expressRouteCircuitPeeringJsonFormatInstance.id = idInstance2;
                }
              }
            }
            
            var serviceKeyValue = propertiesValue['serviceKey'];
            if (serviceKeyValue !== null && serviceKeyValue !== undefined) {
              var serviceKeyInstance = serviceKeyValue;
              expressRouteCircuitInstance.serviceKey = serviceKeyInstance;
            }
            
            var serviceProviderNotesValue = propertiesValue['serviceProviderNotes'];
            if (serviceProviderNotesValue !== null && serviceProviderNotesValue !== undefined) {
              var serviceProviderNotesInstance = serviceProviderNotesValue;
              expressRouteCircuitInstance.serviceProviderNotes = serviceProviderNotesInstance;
            }
            
            var serviceProviderPropertiesValue = propertiesValue['serviceProviderProperties'];
            if (serviceProviderPropertiesValue !== null && serviceProviderPropertiesValue !== undefined) {
              var serviceProviderPropertiesInstance = {};
              expressRouteCircuitInstance.serviceProviderProperties = serviceProviderPropertiesInstance;
              
              var serviceProviderNameValue = serviceProviderPropertiesValue['serviceProviderName'];
              if (serviceProviderNameValue !== null && serviceProviderNameValue !== undefined) {
                var serviceProviderNameInstance = serviceProviderNameValue;
                serviceProviderPropertiesInstance.serviceProviderName = serviceProviderNameInstance;
              }
              
              var peeringLocationValue = serviceProviderPropertiesValue['peeringLocation'];
              if (peeringLocationValue !== null && peeringLocationValue !== undefined) {
                var peeringLocationInstance = peeringLocationValue;
                serviceProviderPropertiesInstance.peeringLocation = peeringLocationInstance;
              }
              
              var bandwidthInMbpsValue = serviceProviderPropertiesValue['bandwidthInMbps'];
              if (bandwidthInMbpsValue !== null && bandwidthInMbpsValue !== undefined) {
                var bandwidthInMbpsInstance = bandwidthInMbpsValue;
                serviceProviderPropertiesInstance.bandwidthInMbps = bandwidthInMbpsInstance;
              }
            }
            
            var provisioningStateValue3 = propertiesValue['provisioningState'];
            if (provisioningStateValue3 !== null && provisioningStateValue3 !== undefined) {
              var provisioningStateInstance3 = provisioningStateValue3;
              expressRouteCircuitInstance.provisioningState = provisioningStateInstance3;
            }
          }
          
          var etagValue3 = responseDoc['etag'];
          if (etagValue3 !== null && etagValue3 !== undefined) {
            var etagInstance3 = etagValue3;
            expressRouteCircuitInstance.etag = etagInstance3;
          }
          
          var idValue3 = responseDoc['id'];
          if (idValue3 !== null && idValue3 !== undefined) {
            var idInstance3 = idValue3;
            expressRouteCircuitInstance.id = idInstance3;
          }
          
          var nameValue4 = responseDoc['name'];
          if (nameValue4 !== null && nameValue4 !== undefined) {
            var nameInstance4 = nameValue4;
            expressRouteCircuitInstance.name = nameInstance4;
          }
          
          var typeValue = responseDoc['type'];
          if (typeValue !== null && typeValue !== undefined) {
            var typeInstance = typeValue;
            expressRouteCircuitInstance.type = typeInstance;
          }
          
          var locationValue = responseDoc['location'];
          if (locationValue !== null && locationValue !== undefined) {
            var locationInstance = locationValue;
            expressRouteCircuitInstance.location = locationInstance;
          }
          
          var tagsSequenceElement = responseDoc['tags'];
          if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
            for (var property in tagsSequenceElement) {
              var tagsKey = property;
              var tagsValue = tagsSequenceElement[property];
              expressRouteCircuitInstance.tags[tagsKey] = tagsValue;
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The List ExpressRouteCircuit opertion retrieves all the
   * ExpressRouteCircuits in a resource group.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ExpressRouteCircuitOperations.prototype.list = function(resourceGroupName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Network';
    url2 = url2 + '/expressRouteCircuits';
    var queryParameters = [];
    queryParameters.push('api-version=2015-05-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = { expressRouteCircuits: [] };
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var valueArray = responseDoc['value'];
          if (valueArray !== null && valueArray !== undefined) {
            for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var valueValue = valueArray[loweredIndex1];
              var expressRouteCircuitJsonFormatInstance = { authorizations: [], peerings: [], tags: {} };
              result.expressRouteCircuits.push(expressRouteCircuitJsonFormatInstance);
              
              var skuValue = valueValue['sku'];
              if (skuValue !== null && skuValue !== undefined) {
                var skuInstance = {};
                expressRouteCircuitJsonFormatInstance.sku = skuInstance;
                
                var nameValue = skuValue['name'];
                if (nameValue !== null && nameValue !== undefined) {
                  var nameInstance = nameValue;
                  skuInstance.name = nameInstance;
                }
                
                var tierValue = skuValue['tier'];
                if (tierValue !== null && tierValue !== undefined) {
                  var tierInstance = tierValue;
                  skuInstance.tier = tierInstance;
                }
                
                var familyValue = skuValue['family'];
                if (familyValue !== null && familyValue !== undefined) {
                  var familyInstance = familyValue;
                  skuInstance.family = familyInstance;
                }
              }
              
              var propertiesValue = valueValue['properties'];
              if (propertiesValue !== null && propertiesValue !== undefined) {
                var circuitProvisioningStateValue = propertiesValue['circuitProvisioningState'];
                if (circuitProvisioningStateValue !== null && circuitProvisioningStateValue !== undefined) {
                  var circuitProvisioningStateInstance = circuitProvisioningStateValue;
                  expressRouteCircuitJsonFormatInstance.circuitProvisioningState = circuitProvisioningStateInstance;
                }
                
                var serviceProviderProvisioningStateValue = propertiesValue['serviceProviderProvisioningState'];
                if (serviceProviderProvisioningStateValue !== null && serviceProviderProvisioningStateValue !== undefined) {
                  var serviceProviderProvisioningStateInstance = serviceProviderProvisioningStateValue;
                  expressRouteCircuitJsonFormatInstance.serviceProviderProvisioningState = serviceProviderProvisioningStateInstance;
                }
                
                var authorizationsArray = propertiesValue['authorizations'];
                if (authorizationsArray !== null && authorizationsArray !== undefined) {
                  for (var loweredIndex2 = 0; loweredIndex2 < authorizationsArray.length; loweredIndex2 = loweredIndex2 + 1) {
                    var authorizationsValue = authorizationsArray[loweredIndex2];
                    var authorizationJsonFormatInstance = {};
                    expressRouteCircuitJsonFormatInstance.authorizations.push(authorizationJsonFormatInstance);
                    
                    var propertiesValue2 = authorizationsValue['properties'];
                    if (propertiesValue2 !== null && propertiesValue2 !== undefined) {
                      var authorizationKeyValue = propertiesValue2['authorizationKey'];
                      if (authorizationKeyValue !== null && authorizationKeyValue !== undefined) {
                        var authorizationKeyInstance = authorizationKeyValue;
                        authorizationJsonFormatInstance.authorizationKey = authorizationKeyInstance;
                      }
                      
                      var authorizationUseStatusValue = propertiesValue2['authorizationUseStatus'];
                      if (authorizationUseStatusValue !== null && authorizationUseStatusValue !== undefined) {
                        var authorizationUseStatusInstance = authorizationUseStatusValue;
                        authorizationJsonFormatInstance.authorizationUseStatus = authorizationUseStatusInstance;
                      }
                      
                      var provisioningStateValue = propertiesValue2['provisioningState'];
                      if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
                        var provisioningStateInstance = provisioningStateValue;
                        authorizationJsonFormatInstance.provisioningState = provisioningStateInstance;
                      }
                    }
                    
                    var nameValue2 = authorizationsValue['name'];
                    if (nameValue2 !== null && nameValue2 !== undefined) {
                      var nameInstance2 = nameValue2;
                      authorizationJsonFormatInstance.name = nameInstance2;
                    }
                    
                    var etagValue = authorizationsValue['etag'];
                    if (etagValue !== null && etagValue !== undefined) {
                      var etagInstance = etagValue;
                      authorizationJsonFormatInstance.etag = etagInstance;
                    }
                    
                    var idValue = authorizationsValue['id'];
                    if (idValue !== null && idValue !== undefined) {
                      var idInstance = idValue;
                      authorizationJsonFormatInstance.id = idInstance;
                    }
                  }
                }
                
                var peeringsArray = propertiesValue['peerings'];
                if (peeringsArray !== null && peeringsArray !== undefined) {
                  for (var loweredIndex3 = 0; loweredIndex3 < peeringsArray.length; loweredIndex3 = loweredIndex3 + 1) {
                    var peeringsValue = peeringsArray[loweredIndex3];
                    var expressRouteCircuitPeeringJsonFormatInstance = {};
                    expressRouteCircuitJsonFormatInstance.peerings.push(expressRouteCircuitPeeringJsonFormatInstance);
                    
                    var propertiesValue3 = peeringsValue['properties'];
                    if (propertiesValue3 !== null && propertiesValue3 !== undefined) {
                      var peeringTypeValue = propertiesValue3['peeringType'];
                      if (peeringTypeValue !== null && peeringTypeValue !== undefined) {
                        var peeringTypeInstance = peeringTypeValue;
                        expressRouteCircuitPeeringJsonFormatInstance.peeringType = peeringTypeInstance;
                      }
                      
                      var stateValue = propertiesValue3['state'];
                      if (stateValue !== null && stateValue !== undefined) {
                        var stateInstance = stateValue;
                        expressRouteCircuitPeeringJsonFormatInstance.state = stateInstance;
                      }
                      
                      var azureASNValue = propertiesValue3['azureASN'];
                      if (azureASNValue !== null && azureASNValue !== undefined) {
                        var azureASNInstance = azureASNValue;
                        expressRouteCircuitPeeringJsonFormatInstance.azureASN = azureASNInstance;
                      }
                      
                      var peerASNValue = propertiesValue3['peerASN'];
                      if (peerASNValue !== null && peerASNValue !== undefined) {
                        var peerASNInstance = peerASNValue;
                        expressRouteCircuitPeeringJsonFormatInstance.peerASN = peerASNInstance;
                      }
                      
                      var primaryPeerAddressPrefixValue = propertiesValue3['primaryPeerAddressPrefix'];
                      if (primaryPeerAddressPrefixValue !== null && primaryPeerAddressPrefixValue !== undefined) {
                        var primaryPeerAddressPrefixInstance = primaryPeerAddressPrefixValue;
                        expressRouteCircuitPeeringJsonFormatInstance.primaryPeerAddressPrefix = primaryPeerAddressPrefixInstance;
                      }
                      
                      var secondaryPeerAddressPrefixValue = propertiesValue3['secondaryPeerAddressPrefix'];
                      if (secondaryPeerAddressPrefixValue !== null && secondaryPeerAddressPrefixValue !== undefined) {
                        var secondaryPeerAddressPrefixInstance = secondaryPeerAddressPrefixValue;
                        expressRouteCircuitPeeringJsonFormatInstance.secondaryPeerAddressPrefix = secondaryPeerAddressPrefixInstance;
                      }
                      
                      var primaryAzurePortValue = propertiesValue3['primaryAzurePort'];
                      if (primaryAzurePortValue !== null && primaryAzurePortValue !== undefined) {
                        var primaryAzurePortInstance = primaryAzurePortValue;
                        expressRouteCircuitPeeringJsonFormatInstance.primaryAzurePort = primaryAzurePortInstance;
                      }
                      
                      var secondaryAzurePortValue = propertiesValue3['secondaryAzurePort'];
                      if (secondaryAzurePortValue !== null && secondaryAzurePortValue !== undefined) {
                        var secondaryAzurePortInstance = secondaryAzurePortValue;
                        expressRouteCircuitPeeringJsonFormatInstance.secondaryAzurePort = secondaryAzurePortInstance;
                      }
                      
                      var sharedKeyValue = propertiesValue3['sharedKey'];
                      if (sharedKeyValue !== null && sharedKeyValue !== undefined) {
                        var sharedKeyInstance = sharedKeyValue;
                        expressRouteCircuitPeeringJsonFormatInstance.sharedKey = sharedKeyInstance;
                      }
                      
                      var vlanIdValue = propertiesValue3['vlanId'];
                      if (vlanIdValue !== null && vlanIdValue !== undefined) {
                        var vlanIdInstance = vlanIdValue;
                        expressRouteCircuitPeeringJsonFormatInstance.vlanId = vlanIdInstance;
                      }
                      
                      var microsoftPeeringConfigValue = propertiesValue3['microsoftPeeringConfig'];
                      if (microsoftPeeringConfigValue !== null && microsoftPeeringConfigValue !== undefined) {
                        var microsoftPeeringConfigInstance = { advertisedPublicPrefixes: [] };
                        expressRouteCircuitPeeringJsonFormatInstance.microsoftPeeringConfig = microsoftPeeringConfigInstance;
                        
                        var advertisedPublicPrefixesArray = microsoftPeeringConfigValue['advertisedPublicPrefixes'];
                        if (advertisedPublicPrefixesArray !== null && advertisedPublicPrefixesArray !== undefined) {
                          for (var loweredIndex4 = 0; loweredIndex4 < advertisedPublicPrefixesArray.length; loweredIndex4 = loweredIndex4 + 1) {
                            var advertisedPublicPrefixesValue = advertisedPublicPrefixesArray[loweredIndex4];
                            microsoftPeeringConfigInstance.advertisedPublicPrefixes.push(advertisedPublicPrefixesValue);
                          }
                        }
                        
                        var advertisedPublicPrefixesStateValue = microsoftPeeringConfigValue['advertisedPublicPrefixesState'];
                        if (advertisedPublicPrefixesStateValue !== null && advertisedPublicPrefixesStateValue !== undefined) {
                          var advertisedPublicPrefixesStateInstance = advertisedPublicPrefixesStateValue;
                          microsoftPeeringConfigInstance.advertisedPublicPrefixesState = advertisedPublicPrefixesStateInstance;
                        }
                        
                        var customerASNValue = microsoftPeeringConfigValue['customerASN'];
                        if (customerASNValue !== null && customerASNValue !== undefined) {
                          var customerASNInstance = customerASNValue;
                          microsoftPeeringConfigInstance.customerASN = customerASNInstance;
                        }
                        
                        var routingRegistryNameValue = microsoftPeeringConfigValue['routingRegistryName'];
                        if (routingRegistryNameValue !== null && routingRegistryNameValue !== undefined) {
                          var routingRegistryNameInstance = routingRegistryNameValue;
                          microsoftPeeringConfigInstance.routingRegistryName = routingRegistryNameInstance;
                        }
                      }
                      
                      var statsValue = propertiesValue3['stats'];
                      if (statsValue !== null && statsValue !== undefined) {
                        var statsInstance = {};
                        expressRouteCircuitPeeringJsonFormatInstance.stats = statsInstance;
                        
                        var bytesInValue = statsValue['bytesIn'];
                        if (bytesInValue !== null && bytesInValue !== undefined) {
                          var bytesInInstance = bytesInValue;
                          statsInstance.bytesIn = bytesInInstance;
                        }
                        
                        var bytesOutValue = statsValue['bytesOut'];
                        if (bytesOutValue !== null && bytesOutValue !== undefined) {
                          var bytesOutInstance = bytesOutValue;
                          statsInstance.bytesOut = bytesOutInstance;
                        }
                      }
                      
                      var provisioningStateValue2 = propertiesValue3['provisioningState'];
                      if (provisioningStateValue2 !== null && provisioningStateValue2 !== undefined) {
                        var provisioningStateInstance2 = provisioningStateValue2;
                        expressRouteCircuitPeeringJsonFormatInstance.provisioningState = provisioningStateInstance2;
                      }
                    }
                    
                    var nameValue3 = peeringsValue['name'];
                    if (nameValue3 !== null && nameValue3 !== undefined) {
                      var nameInstance3 = nameValue3;
                      expressRouteCircuitPeeringJsonFormatInstance.name = nameInstance3;
                    }
                    
                    var etagValue2 = peeringsValue['etag'];
                    if (etagValue2 !== null && etagValue2 !== undefined) {
                      var etagInstance2 = etagValue2;
                      expressRouteCircuitPeeringJsonFormatInstance.etag = etagInstance2;
                    }
                    
                    var idValue2 = peeringsValue['id'];
                    if (idValue2 !== null && idValue2 !== undefined) {
                      var idInstance2 = idValue2;
                      expressRouteCircuitPeeringJsonFormatInstance.id = idInstance2;
                    }
                  }
                }
                
                var serviceKeyValue = propertiesValue['serviceKey'];
                if (serviceKeyValue !== null && serviceKeyValue !== undefined) {
                  var serviceKeyInstance = serviceKeyValue;
                  expressRouteCircuitJsonFormatInstance.serviceKey = serviceKeyInstance;
                }
                
                var serviceProviderNotesValue = propertiesValue['serviceProviderNotes'];
                if (serviceProviderNotesValue !== null && serviceProviderNotesValue !== undefined) {
                  var serviceProviderNotesInstance = serviceProviderNotesValue;
                  expressRouteCircuitJsonFormatInstance.serviceProviderNotes = serviceProviderNotesInstance;
                }
                
                var serviceProviderPropertiesValue = propertiesValue['serviceProviderProperties'];
                if (serviceProviderPropertiesValue !== null && serviceProviderPropertiesValue !== undefined) {
                  var serviceProviderPropertiesInstance = {};
                  expressRouteCircuitJsonFormatInstance.serviceProviderProperties = serviceProviderPropertiesInstance;
                  
                  var serviceProviderNameValue = serviceProviderPropertiesValue['serviceProviderName'];
                  if (serviceProviderNameValue !== null && serviceProviderNameValue !== undefined) {
                    var serviceProviderNameInstance = serviceProviderNameValue;
                    serviceProviderPropertiesInstance.serviceProviderName = serviceProviderNameInstance;
                  }
                  
                  var peeringLocationValue = serviceProviderPropertiesValue['peeringLocation'];
                  if (peeringLocationValue !== null && peeringLocationValue !== undefined) {
                    var peeringLocationInstance = peeringLocationValue;
                    serviceProviderPropertiesInstance.peeringLocation = peeringLocationInstance;
                  }
                  
                  var bandwidthInMbpsValue = serviceProviderPropertiesValue['bandwidthInMbps'];
                  if (bandwidthInMbpsValue !== null && bandwidthInMbpsValue !== undefined) {
                    var bandwidthInMbpsInstance = bandwidthInMbpsValue;
                    serviceProviderPropertiesInstance.bandwidthInMbps = bandwidthInMbpsInstance;
                  }
                }
                
                var provisioningStateValue3 = propertiesValue['provisioningState'];
                if (provisioningStateValue3 !== null && provisioningStateValue3 !== undefined) {
                  var provisioningStateInstance3 = provisioningStateValue3;
                  expressRouteCircuitJsonFormatInstance.provisioningState = provisioningStateInstance3;
                }
              }
              
              var etagValue3 = valueValue['etag'];
              if (etagValue3 !== null && etagValue3 !== undefined) {
                var etagInstance3 = etagValue3;
                expressRouteCircuitJsonFormatInstance.etag = etagInstance3;
              }
              
              var idValue3 = valueValue['id'];
              if (idValue3 !== null && idValue3 !== undefined) {
                var idInstance3 = idValue3;
                expressRouteCircuitJsonFormatInstance.id = idInstance3;
              }
              
              var nameValue4 = valueValue['name'];
              if (nameValue4 !== null && nameValue4 !== undefined) {
                var nameInstance4 = nameValue4;
                expressRouteCircuitJsonFormatInstance.name = nameInstance4;
              }
              
              var typeValue = valueValue['type'];
              if (typeValue !== null && typeValue !== undefined) {
                var typeInstance = typeValue;
                expressRouteCircuitJsonFormatInstance.type = typeInstance;
              }
              
              var locationValue = valueValue['location'];
              if (locationValue !== null && locationValue !== undefined) {
                var locationInstance = locationValue;
                expressRouteCircuitJsonFormatInstance.location = locationInstance;
              }
              
              var tagsSequenceElement = valueValue['tags'];
              if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
                for (var property in tagsSequenceElement) {
                  var tagsKey = property;
                  var tagsValue = tagsSequenceElement[property];
                  expressRouteCircuitJsonFormatInstance.tags[tagsKey] = tagsValue;
                }
              }
            }
          }
          
          var nextLinkValue = responseDoc['nextLink'];
          if (nextLinkValue !== null && nextLinkValue !== undefined) {
            var nextLinkInstance = nextLinkValue;
            result.nextLink = nextLinkInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The List ExpressRouteCircuit opertion retrieves all the
   * ExpressRouteCircuits in a subscription.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ExpressRouteCircuitOperations.prototype.listAll = function(callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Network';
    url2 = url2 + '/expressRouteCircuits';
    var queryParameters = [];
    queryParameters.push('api-version=2015-05-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = { expressRouteCircuits: [] };
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var valueArray = responseDoc['value'];
          if (valueArray !== null && valueArray !== undefined) {
            for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var valueValue = valueArray[loweredIndex1];
              var expressRouteCircuitJsonFormatInstance = { authorizations: [], peerings: [], tags: {} };
              result.expressRouteCircuits.push(expressRouteCircuitJsonFormatInstance);
              
              var skuValue = valueValue['sku'];
              if (skuValue !== null && skuValue !== undefined) {
                var skuInstance = {};
                expressRouteCircuitJsonFormatInstance.sku = skuInstance;
                
                var nameValue = skuValue['name'];
                if (nameValue !== null && nameValue !== undefined) {
                  var nameInstance = nameValue;
                  skuInstance.name = nameInstance;
                }
                
                var tierValue = skuValue['tier'];
                if (tierValue !== null && tierValue !== undefined) {
                  var tierInstance = tierValue;
                  skuInstance.tier = tierInstance;
                }
                
                var familyValue = skuValue['family'];
                if (familyValue !== null && familyValue !== undefined) {
                  var familyInstance = familyValue;
                  skuInstance.family = familyInstance;
                }
              }
              
              var propertiesValue = valueValue['properties'];
              if (propertiesValue !== null && propertiesValue !== undefined) {
                var circuitProvisioningStateValue = propertiesValue['circuitProvisioningState'];
                if (circuitProvisioningStateValue !== null && circuitProvisioningStateValue !== undefined) {
                  var circuitProvisioningStateInstance = circuitProvisioningStateValue;
                  expressRouteCircuitJsonFormatInstance.circuitProvisioningState = circuitProvisioningStateInstance;
                }
                
                var serviceProviderProvisioningStateValue = propertiesValue['serviceProviderProvisioningState'];
                if (serviceProviderProvisioningStateValue !== null && serviceProviderProvisioningStateValue !== undefined) {
                  var serviceProviderProvisioningStateInstance = serviceProviderProvisioningStateValue;
                  expressRouteCircuitJsonFormatInstance.serviceProviderProvisioningState = serviceProviderProvisioningStateInstance;
                }
                
                var authorizationsArray = propertiesValue['authorizations'];
                if (authorizationsArray !== null && authorizationsArray !== undefined) {
                  for (var loweredIndex2 = 0; loweredIndex2 < authorizationsArray.length; loweredIndex2 = loweredIndex2 + 1) {
                    var authorizationsValue = authorizationsArray[loweredIndex2];
                    var authorizationJsonFormatInstance = {};
                    expressRouteCircuitJsonFormatInstance.authorizations.push(authorizationJsonFormatInstance);
                    
                    var propertiesValue2 = authorizationsValue['properties'];
                    if (propertiesValue2 !== null && propertiesValue2 !== undefined) {
                      var authorizationKeyValue = propertiesValue2['authorizationKey'];
                      if (authorizationKeyValue !== null && authorizationKeyValue !== undefined) {
                        var authorizationKeyInstance = authorizationKeyValue;
                        authorizationJsonFormatInstance.authorizationKey = authorizationKeyInstance;
                      }
                      
                      var authorizationUseStatusValue = propertiesValue2['authorizationUseStatus'];
                      if (authorizationUseStatusValue !== null && authorizationUseStatusValue !== undefined) {
                        var authorizationUseStatusInstance = authorizationUseStatusValue;
                        authorizationJsonFormatInstance.authorizationUseStatus = authorizationUseStatusInstance;
                      }
                      
                      var provisioningStateValue = propertiesValue2['provisioningState'];
                      if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
                        var provisioningStateInstance = provisioningStateValue;
                        authorizationJsonFormatInstance.provisioningState = provisioningStateInstance;
                      }
                    }
                    
                    var nameValue2 = authorizationsValue['name'];
                    if (nameValue2 !== null && nameValue2 !== undefined) {
                      var nameInstance2 = nameValue2;
                      authorizationJsonFormatInstance.name = nameInstance2;
                    }
                    
                    var etagValue = authorizationsValue['etag'];
                    if (etagValue !== null && etagValue !== undefined) {
                      var etagInstance = etagValue;
                      authorizationJsonFormatInstance.etag = etagInstance;
                    }
                    
                    var idValue = authorizationsValue['id'];
                    if (idValue !== null && idValue !== undefined) {
                      var idInstance = idValue;
                      authorizationJsonFormatInstance.id = idInstance;
                    }
                  }
                }
                
                var peeringsArray = propertiesValue['peerings'];
                if (peeringsArray !== null && peeringsArray !== undefined) {
                  for (var loweredIndex3 = 0; loweredIndex3 < peeringsArray.length; loweredIndex3 = loweredIndex3 + 1) {
                    var peeringsValue = peeringsArray[loweredIndex3];
                    var expressRouteCircuitPeeringJsonFormatInstance = {};
                    expressRouteCircuitJsonFormatInstance.peerings.push(expressRouteCircuitPeeringJsonFormatInstance);
                    
                    var propertiesValue3 = peeringsValue['properties'];
                    if (propertiesValue3 !== null && propertiesValue3 !== undefined) {
                      var peeringTypeValue = propertiesValue3['peeringType'];
                      if (peeringTypeValue !== null && peeringTypeValue !== undefined) {
                        var peeringTypeInstance = peeringTypeValue;
                        expressRouteCircuitPeeringJsonFormatInstance.peeringType = peeringTypeInstance;
                      }
                      
                      var stateValue = propertiesValue3['state'];
                      if (stateValue !== null && stateValue !== undefined) {
                        var stateInstance = stateValue;
                        expressRouteCircuitPeeringJsonFormatInstance.state = stateInstance;
                      }
                      
                      var azureASNValue = propertiesValue3['azureASN'];
                      if (azureASNValue !== null && azureASNValue !== undefined) {
                        var azureASNInstance = azureASNValue;
                        expressRouteCircuitPeeringJsonFormatInstance.azureASN = azureASNInstance;
                      }
                      
                      var peerASNValue = propertiesValue3['peerASN'];
                      if (peerASNValue !== null && peerASNValue !== undefined) {
                        var peerASNInstance = peerASNValue;
                        expressRouteCircuitPeeringJsonFormatInstance.peerASN = peerASNInstance;
                      }
                      
                      var primaryPeerAddressPrefixValue = propertiesValue3['primaryPeerAddressPrefix'];
                      if (primaryPeerAddressPrefixValue !== null && primaryPeerAddressPrefixValue !== undefined) {
                        var primaryPeerAddressPrefixInstance = primaryPeerAddressPrefixValue;
                        expressRouteCircuitPeeringJsonFormatInstance.primaryPeerAddressPrefix = primaryPeerAddressPrefixInstance;
                      }
                      
                      var secondaryPeerAddressPrefixValue = propertiesValue3['secondaryPeerAddressPrefix'];
                      if (secondaryPeerAddressPrefixValue !== null && secondaryPeerAddressPrefixValue !== undefined) {
                        var secondaryPeerAddressPrefixInstance = secondaryPeerAddressPrefixValue;
                        expressRouteCircuitPeeringJsonFormatInstance.secondaryPeerAddressPrefix = secondaryPeerAddressPrefixInstance;
                      }
                      
                      var primaryAzurePortValue = propertiesValue3['primaryAzurePort'];
                      if (primaryAzurePortValue !== null && primaryAzurePortValue !== undefined) {
                        var primaryAzurePortInstance = primaryAzurePortValue;
                        expressRouteCircuitPeeringJsonFormatInstance.primaryAzurePort = primaryAzurePortInstance;
                      }
                      
                      var secondaryAzurePortValue = propertiesValue3['secondaryAzurePort'];
                      if (secondaryAzurePortValue !== null && secondaryAzurePortValue !== undefined) {
                        var secondaryAzurePortInstance = secondaryAzurePortValue;
                        expressRouteCircuitPeeringJsonFormatInstance.secondaryAzurePort = secondaryAzurePortInstance;
                      }
                      
                      var sharedKeyValue = propertiesValue3['sharedKey'];
                      if (sharedKeyValue !== null && sharedKeyValue !== undefined) {
                        var sharedKeyInstance = sharedKeyValue;
                        expressRouteCircuitPeeringJsonFormatInstance.sharedKey = sharedKeyInstance;
                      }
                      
                      var vlanIdValue = propertiesValue3['vlanId'];
                      if (vlanIdValue !== null && vlanIdValue !== undefined) {
                        var vlanIdInstance = vlanIdValue;
                        expressRouteCircuitPeeringJsonFormatInstance.vlanId = vlanIdInstance;
                      }
                      
                      var microsoftPeeringConfigValue = propertiesValue3['microsoftPeeringConfig'];
                      if (microsoftPeeringConfigValue !== null && microsoftPeeringConfigValue !== undefined) {
                        var microsoftPeeringConfigInstance = { advertisedPublicPrefixes: [] };
                        expressRouteCircuitPeeringJsonFormatInstance.microsoftPeeringConfig = microsoftPeeringConfigInstance;
                        
                        var advertisedPublicPrefixesArray = microsoftPeeringConfigValue['advertisedPublicPrefixes'];
                        if (advertisedPublicPrefixesArray !== null && advertisedPublicPrefixesArray !== undefined) {
                          for (var loweredIndex4 = 0; loweredIndex4 < advertisedPublicPrefixesArray.length; loweredIndex4 = loweredIndex4 + 1) {
                            var advertisedPublicPrefixesValue = advertisedPublicPrefixesArray[loweredIndex4];
                            microsoftPeeringConfigInstance.advertisedPublicPrefixes.push(advertisedPublicPrefixesValue);
                          }
                        }
                        
                        var advertisedPublicPrefixesStateValue = microsoftPeeringConfigValue['advertisedPublicPrefixesState'];
                        if (advertisedPublicPrefixesStateValue !== null && advertisedPublicPrefixesStateValue !== undefined) {
                          var advertisedPublicPrefixesStateInstance = advertisedPublicPrefixesStateValue;
                          microsoftPeeringConfigInstance.advertisedPublicPrefixesState = advertisedPublicPrefixesStateInstance;
                        }
                        
                        var customerASNValue = microsoftPeeringConfigValue['customerASN'];
                        if (customerASNValue !== null && customerASNValue !== undefined) {
                          var customerASNInstance = customerASNValue;
                          microsoftPeeringConfigInstance.customerASN = customerASNInstance;
                        }
                        
                        var routingRegistryNameValue = microsoftPeeringConfigValue['routingRegistryName'];
                        if (routingRegistryNameValue !== null && routingRegistryNameValue !== undefined) {
                          var routingRegistryNameInstance = routingRegistryNameValue;
                          microsoftPeeringConfigInstance.routingRegistryName = routingRegistryNameInstance;
                        }
                      }
                      
                      var statsValue = propertiesValue3['stats'];
                      if (statsValue !== null && statsValue !== undefined) {
                        var statsInstance = {};
                        expressRouteCircuitPeeringJsonFormatInstance.stats = statsInstance;
                        
                        var bytesInValue = statsValue['bytesIn'];
                        if (bytesInValue !== null && bytesInValue !== undefined) {
                          var bytesInInstance = bytesInValue;
                          statsInstance.bytesIn = bytesInInstance;
                        }
                        
                        var bytesOutValue = statsValue['bytesOut'];
                        if (bytesOutValue !== null && bytesOutValue !== undefined) {
                          var bytesOutInstance = bytesOutValue;
                          statsInstance.bytesOut = bytesOutInstance;
                        }
                      }
                      
                      var provisioningStateValue2 = propertiesValue3['provisioningState'];
                      if (provisioningStateValue2 !== null && provisioningStateValue2 !== undefined) {
                        var provisioningStateInstance2 = provisioningStateValue2;
                        expressRouteCircuitPeeringJsonFormatInstance.provisioningState = provisioningStateInstance2;
                      }
                    }
                    
                    var nameValue3 = peeringsValue['name'];
                    if (nameValue3 !== null && nameValue3 !== undefined) {
                      var nameInstance3 = nameValue3;
                      expressRouteCircuitPeeringJsonFormatInstance.name = nameInstance3;
                    }
                    
                    var etagValue2 = peeringsValue['etag'];
                    if (etagValue2 !== null && etagValue2 !== undefined) {
                      var etagInstance2 = etagValue2;
                      expressRouteCircuitPeeringJsonFormatInstance.etag = etagInstance2;
                    }
                    
                    var idValue2 = peeringsValue['id'];
                    if (idValue2 !== null && idValue2 !== undefined) {
                      var idInstance2 = idValue2;
                      expressRouteCircuitPeeringJsonFormatInstance.id = idInstance2;
                    }
                  }
                }
                
                var serviceKeyValue = propertiesValue['serviceKey'];
                if (serviceKeyValue !== null && serviceKeyValue !== undefined) {
                  var serviceKeyInstance = serviceKeyValue;
                  expressRouteCircuitJsonFormatInstance.serviceKey = serviceKeyInstance;
                }
                
                var serviceProviderNotesValue = propertiesValue['serviceProviderNotes'];
                if (serviceProviderNotesValue !== null && serviceProviderNotesValue !== undefined) {
                  var serviceProviderNotesInstance = serviceProviderNotesValue;
                  expressRouteCircuitJsonFormatInstance.serviceProviderNotes = serviceProviderNotesInstance;
                }
                
                var serviceProviderPropertiesValue = propertiesValue['serviceProviderProperties'];
                if (serviceProviderPropertiesValue !== null && serviceProviderPropertiesValue !== undefined) {
                  var serviceProviderPropertiesInstance = {};
                  expressRouteCircuitJsonFormatInstance.serviceProviderProperties = serviceProviderPropertiesInstance;
                  
                  var serviceProviderNameValue = serviceProviderPropertiesValue['serviceProviderName'];
                  if (serviceProviderNameValue !== null && serviceProviderNameValue !== undefined) {
                    var serviceProviderNameInstance = serviceProviderNameValue;
                    serviceProviderPropertiesInstance.serviceProviderName = serviceProviderNameInstance;
                  }
                  
                  var peeringLocationValue = serviceProviderPropertiesValue['peeringLocation'];
                  if (peeringLocationValue !== null && peeringLocationValue !== undefined) {
                    var peeringLocationInstance = peeringLocationValue;
                    serviceProviderPropertiesInstance.peeringLocation = peeringLocationInstance;
                  }
                  
                  var bandwidthInMbpsValue = serviceProviderPropertiesValue['bandwidthInMbps'];
                  if (bandwidthInMbpsValue !== null && bandwidthInMbpsValue !== undefined) {
                    var bandwidthInMbpsInstance = bandwidthInMbpsValue;
                    serviceProviderPropertiesInstance.bandwidthInMbps = bandwidthInMbpsInstance;
                  }
                }
                
                var provisioningStateValue3 = propertiesValue['provisioningState'];
                if (provisioningStateValue3 !== null && provisioningStateValue3 !== undefined) {
                  var provisioningStateInstance3 = provisioningStateValue3;
                  expressRouteCircuitJsonFormatInstance.provisioningState = provisioningStateInstance3;
                }
              }
              
              var etagValue3 = valueValue['etag'];
              if (etagValue3 !== null && etagValue3 !== undefined) {
                var etagInstance3 = etagValue3;
                expressRouteCircuitJsonFormatInstance.etag = etagInstance3;
              }
              
              var idValue3 = valueValue['id'];
              if (idValue3 !== null && idValue3 !== undefined) {
                var idInstance3 = idValue3;
                expressRouteCircuitJsonFormatInstance.id = idInstance3;
              }
              
              var nameValue4 = valueValue['name'];
              if (nameValue4 !== null && nameValue4 !== undefined) {
                var nameInstance4 = nameValue4;
                expressRouteCircuitJsonFormatInstance.name = nameInstance4;
              }
              
              var typeValue = valueValue['type'];
              if (typeValue !== null && typeValue !== undefined) {
                var typeInstance = typeValue;
                expressRouteCircuitJsonFormatInstance.type = typeInstance;
              }
              
              var locationValue = valueValue['location'];
              if (locationValue !== null && locationValue !== undefined) {
                var locationInstance = locationValue;
                expressRouteCircuitJsonFormatInstance.location = locationInstance;
              }
              
              var tagsSequenceElement = valueValue['tags'];
              if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
                for (var property in tagsSequenceElement) {
                  var tagsKey = property;
                  var tagsValue = tagsSequenceElement[property];
                  expressRouteCircuitJsonFormatInstance.tags[tagsKey] = tagsValue;
                }
              }
            }
          }
          
          var nextLinkValue = responseDoc['nextLink'];
          if (nextLinkValue !== null && nextLinkValue !== undefined) {
            var nextLinkInstance = nextLinkValue;
            result.nextLink = nextLinkInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The ListArpTable from ExpressRouteCircuit opertion retrieves the currently
   * advertised arp table associated with the ExpressRouteCircuits in a
   * resource group.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} circuitName The name of the circuit.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ExpressRouteCircuitOperations.prototype.listArpTable = function(resourceGroupName, circuitName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (circuitName === null || circuitName === undefined) {
      return callback(new Error('circuitName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Network';
    url2 = url2 + '/expressRouteCircuits/';
    url2 = url2 + encodeURIComponent(circuitName);
    url2 = url2 + 'arpTable';
    var queryParameters = [];
    queryParameters.push('api-version=2015-05-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = { arpTable: [] };
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var valueArray = responseDoc['value'];
          if (valueArray !== null && valueArray !== undefined) {
            for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var valueValue = valueArray[loweredIndex1];
              var expressRouteCircuitArpTableInstance = {};
              result.arpTable.push(expressRouteCircuitArpTableInstance);
              
              var ipAddressValue = valueValue['ipAddress'];
              if (ipAddressValue !== null && ipAddressValue !== undefined) {
                var ipAddressInstance = ipAddressValue;
                expressRouteCircuitArpTableInstance.iPAddress = ipAddressInstance;
              }
              
              var macAddressValue = valueValue['macAddress'];
              if (macAddressValue !== null && macAddressValue !== undefined) {
                var macAddressInstance = macAddressValue;
                expressRouteCircuitArpTableInstance.macAddress = macAddressInstance;
              }
            }
          }
          
          var nextLinkValue = responseDoc['nextLink'];
          if (nextLinkValue !== null && nextLinkValue !== undefined) {
            var nextLinkInstance = nextLinkValue;
            result.nextLink = nextLinkInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The ListRoutesTable from ExpressRouteCircuit opertion retrieves the
   * currently advertised routes table associated with the
   * ExpressRouteCircuits in a resource group.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} circuitName The name of the circuit.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ExpressRouteCircuitOperations.prototype.listRoutesTable = function(resourceGroupName, circuitName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (circuitName === null || circuitName === undefined) {
      return callback(new Error('circuitName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Network';
    url2 = url2 + '/expressRouteCircuits/';
    url2 = url2 + encodeURIComponent(circuitName);
    url2 = url2 + 'routesTable';
    var queryParameters = [];
    queryParameters.push('api-version=2015-05-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = { routesTable: [] };
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var valueArray = responseDoc['value'];
          if (valueArray !== null && valueArray !== undefined) {
            for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var valueValue = valueArray[loweredIndex1];
              var expressRouteCircuitRoutesTableInstance = {};
              result.routesTable.push(expressRouteCircuitRoutesTableInstance);
              
              var addressPrefixValue = valueValue['addressPrefix'];
              if (addressPrefixValue !== null && addressPrefixValue !== undefined) {
                var addressPrefixInstance = addressPrefixValue;
                expressRouteCircuitRoutesTableInstance.addressPrefix = addressPrefixInstance;
              }
              
              var nextHopTypeValue = valueValue['nextHopType'];
              if (nextHopTypeValue !== null && nextHopTypeValue !== undefined) {
                var nextHopTypeInstance = nextHopTypeValue;
                expressRouteCircuitRoutesTableInstance.nextHopType = nextHopTypeInstance;
              }
              
              var nextHopIPValue = valueValue['nextHopIP'];
              if (nextHopIPValue !== null && nextHopIPValue !== undefined) {
                var nextHopIPInstance = nextHopIPValue;
                expressRouteCircuitRoutesTableInstance.nextHopIP = nextHopIPInstance;
              }
              
              var asPathValue = valueValue['asPath'];
              if (asPathValue !== null && asPathValue !== undefined) {
                var asPathInstance = asPathValue;
                expressRouteCircuitRoutesTableInstance.asPath = asPathInstance;
              }
            }
          }
          
          var nextLinkValue = responseDoc['nextLink'];
          if (nextLinkValue !== null && nextLinkValue !== undefined) {
            var nextLinkInstance = nextLinkValue;
            result.nextLink = nextLinkInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The Liststats ExpressRouteCircuit opertion retrieves all the stats from a
   * ExpressRouteCircuits in a resource group.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} circuitName The name of the loadBalancer.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ExpressRouteCircuitOperations.prototype.listStats = function(resourceGroupName, circuitName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (circuitName === null || circuitName === undefined) {
      return callback(new Error('circuitName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Network';
    url2 = url2 + '/expressRouteCircuits/';
    url2 = url2 + encodeURIComponent(circuitName);
    url2 = url2 + 'stats';
    var queryParameters = [];
    queryParameters.push('api-version=2015-05-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = { stats: [] };
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var valueArray = responseDoc['value'];
          if (valueArray !== null && valueArray !== undefined) {
            for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var valueValue = valueArray[loweredIndex1];
              var expressRouteCircuitStatsInstance = {};
              result.stats.push(expressRouteCircuitStatsInstance);
              
              var bytesInValue = valueValue['bytesIn'];
              if (bytesInValue !== null && bytesInValue !== undefined) {
                var bytesInInstance = bytesInValue;
                expressRouteCircuitStatsInstance.bytesIn = bytesInInstance;
              }
              
              var bytesOutValue = valueValue['bytesOut'];
              if (bytesOutValue !== null && bytesOutValue !== undefined) {
                var bytesOutInstance = bytesOutValue;
                expressRouteCircuitStatsInstance.bytesOut = bytesOutInstance;
              }
            }
          }
          
          var nextLinkValue = responseDoc['nextLink'];
          if (nextLinkValue !== null && nextLinkValue !== undefined) {
            var nextLinkInstance = nextLinkValue;
            result.nextLink = nextLinkInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  return ExpressRouteCircuitOperations;
})();

var ExpressRouteCircuitPeeringOperations = ( /** @lends ExpressRouteCircuitPeeringOperations */ function() {
  /**
   * @class
   * The Network Resource Provider API includes operations for managing the
   * Peerings for your subscription.
   * __NOTE__: An instance of this class is automatically created for an
   * instance of the [NetworkResourceProviderClient] {@link
   * NetworkResourceProviderClient~NetworkResourceProviderClient}.
   * See [expressRouteCircuitPeerings] {@link
   * NetworkResourceProviderClient~NetworkResourceProviderClient#expressRouteCircuitPeerings}.
   * Initializes a new instance of the ExpressRouteCircuitPeeringOperations
   * class.
   * @constructor
   * 
   * @param {NetworkResourceProviderClient} client Reference to the service
   * client.
   */
  function ExpressRouteCircuitPeeringOperations(client) {
    this.client = client;
  }
  
  /**
   * The Put Pering operation creates/updates an peering in the specified
   * ExpressRouteCircuits
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} circuitName The name of the express route circuit.
   * 
   * @param {string} peeringName The name of the peering.
   * 
   * @param {ExpressRouteCircuitPeering} peeringParameters Parameters supplied
   * to the create/update ExpressRouteCircuit Peering operation
   * 
   * @param {string} [peeringParameters.peeringType] Gets or sets PeeringType
   * 
   * @param {string} [peeringParameters.state] Gets or sets state of Peering
   * 
   * @param {number} [peeringParameters.azureASN] Gets or sets the azure ASN
   * 
   * @param {number} [peeringParameters.peerASN] Gets or sets the peer ASN
   * 
   * @param {string} [peeringParameters.primaryPeerAddressPrefix] Gets or sets
   * the primary address prefix
   * 
   * @param {string} [peeringParameters.secondaryPeerAddressPrefix] Gets or
   * sets the secondary address prefix
   * 
   * @param {string} [peeringParameters.primaryAzurePort] Gets or sets the
   * primary port
   * 
   * @param {string} [peeringParameters.secondaryAzurePort] Gets or sets the
   * secondary port
   * 
   * @param {string} [peeringParameters.sharedKey] Gets or sets the shared key
   * 
   * @param {number} [peeringParameters.vlanId] Gets or sets the vlan id
   * 
   * @param {ExpressRouteCircuitPeeringConfig}
   * [peeringParameters.microsoftPeeringConfig] Gets or sets the mircosoft
   * peering config
   * 
   * @param {IEnumerable}
   * [peeringParameters.microsoftPeeringConfig.advertisedPublicPrefixes] Gets
   * or sets the reference of AdvertisedPublicPrefixes
   * 
   * @param {string}
   * [peeringParameters.microsoftPeeringConfig.advertisedPublicPrefixesState]
   * Gets or sets AdvertisedPublicPrefixState of the Peering resource
   * 
   * @param {number} [peeringParameters.microsoftPeeringConfig.customerASN]
   * Gets or Sets CustomerAsn of the peering.
   * 
   * @param {string}
   * [peeringParameters.microsoftPeeringConfig.routingRegistryName] Gets or
   * Sets RoutingRegistryName of the config.
   * 
   * @param {ExpressRouteCircuitStats} [peeringParameters.stats] Gets or
   * peering stats
   * 
   * @param {number} [peeringParameters.stats.bytesIn] Gets BytesIn of the
   * peering.
   * 
   * @param {number} [peeringParameters.stats.bytesOut] Gets BytesOut of the
   * peering.
   * 
   * @param {string} [peeringParameters.provisioningState] Gets or sets
   * Provisioning state of the PublicIP resource Updating/Deleting/Failed
   * 
   * @param {string} [peeringParameters.name] Gets name of the resource that is
   * unique within a resource group. This name can be used to access the
   * resource
   * 
   * @param {string} [peeringParameters.etag] A unique read-only string that
   * changes whenever the resource is updated
   * 
   * @param {string} [peeringParameters.id] Id of the resource
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ExpressRouteCircuitPeeringOperations.prototype.beginCreateOrUpdating = function(resourceGroupName, circuitName, peeringName, peeringParameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (circuitName === null || circuitName === undefined) {
      return callback(new Error('circuitName cannot be null.'));
    }
    if (peeringName === null || peeringName === undefined) {
      return callback(new Error('peeringName cannot be null.'));
    }
    if (peeringParameters === null || peeringParameters === undefined) {
      return callback(new Error('peeringParameters cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Network';
    url2 = url2 + '/expressRouteCircuits/';
    url2 = url2 + encodeURIComponent(circuitName);
    url2 = url2 + '/peerings/';
    url2 = url2 + encodeURIComponent(peeringName);
    var queryParameters = [];
    queryParameters.push('api-version=2015-05-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = null;
    
    var expressRouteCircuitPeeringJsonFormatValue = {};
    requestDoc = expressRouteCircuitPeeringJsonFormatValue;
    
    var propertiesValue = {};
    expressRouteCircuitPeeringJsonFormatValue['properties'] = propertiesValue;
    
    if (peeringParameters.peeringType !== null && peeringParameters.peeringType !== undefined) {
      propertiesValue['peeringType'] = peeringParameters.peeringType;
    }
    
    if (peeringParameters.state !== null && peeringParameters.state !== undefined) {
      propertiesValue['state'] = peeringParameters.state;
    }
    
    if (peeringParameters.azureASN !== null && peeringParameters.azureASN !== undefined) {
      propertiesValue['azureASN'] = peeringParameters.azureASN;
    }
    
    if (peeringParameters.peerASN !== null && peeringParameters.peerASN !== undefined) {
      propertiesValue['peerASN'] = peeringParameters.peerASN;
    }
    
    if (peeringParameters.primaryPeerAddressPrefix !== null && peeringParameters.primaryPeerAddressPrefix !== undefined) {
      propertiesValue['primaryPeerAddressPrefix'] = peeringParameters.primaryPeerAddressPrefix;
    }
    
    if (peeringParameters.secondaryPeerAddressPrefix !== null && peeringParameters.secondaryPeerAddressPrefix !== undefined) {
      propertiesValue['secondaryPeerAddressPrefix'] = peeringParameters.secondaryPeerAddressPrefix;
    }
    
    if (peeringParameters.primaryAzurePort !== null && peeringParameters.primaryAzurePort !== undefined) {
      propertiesValue['primaryAzurePort'] = peeringParameters.primaryAzurePort;
    }
    
    if (peeringParameters.secondaryAzurePort !== null && peeringParameters.secondaryAzurePort !== undefined) {
      propertiesValue['secondaryAzurePort'] = peeringParameters.secondaryAzurePort;
    }
    
    if (peeringParameters.sharedKey !== null && peeringParameters.sharedKey !== undefined) {
      propertiesValue['sharedKey'] = peeringParameters.sharedKey;
    }
    
    if (peeringParameters.vlanId !== null && peeringParameters.vlanId !== undefined) {
      propertiesValue['vlanId'] = peeringParameters.vlanId;
    }
    
    if (peeringParameters.microsoftPeeringConfig !== null && peeringParameters.microsoftPeeringConfig !== undefined) {
      var microsoftPeeringConfigValue = {};
      propertiesValue['microsoftPeeringConfig'] = microsoftPeeringConfigValue;
      
      if (peeringParameters.microsoftPeeringConfig.advertisedPublicPrefixes !== null && peeringParameters.microsoftPeeringConfig.advertisedPublicPrefixes !== undefined) {
        var advertisedPublicPrefixesArray = [];
        for (var loweredIndex1 = 0; loweredIndex1 < peeringParameters.microsoftPeeringConfig.advertisedPublicPrefixes.length; loweredIndex1 = loweredIndex1 + 1) {
          var advertisedPublicPrefixesItem = peeringParameters.microsoftPeeringConfig.advertisedPublicPrefixes[loweredIndex1];
          advertisedPublicPrefixesArray.push(advertisedPublicPrefixesItem);
        }
        microsoftPeeringConfigValue['advertisedPublicPrefixes'] = advertisedPublicPrefixesArray;
      }
      
      if (peeringParameters.microsoftPeeringConfig.advertisedPublicPrefixesState !== null && peeringParameters.microsoftPeeringConfig.advertisedPublicPrefixesState !== undefined) {
        microsoftPeeringConfigValue['advertisedPublicPrefixesState'] = peeringParameters.microsoftPeeringConfig.advertisedPublicPrefixesState;
      }
      
      if (peeringParameters.microsoftPeeringConfig.customerASN !== null && peeringParameters.microsoftPeeringConfig.customerASN !== undefined) {
        microsoftPeeringConfigValue['customerASN'] = peeringParameters.microsoftPeeringConfig.customerASN;
      }
      
      if (peeringParameters.microsoftPeeringConfig.routingRegistryName !== null && peeringParameters.microsoftPeeringConfig.routingRegistryName !== undefined) {
        microsoftPeeringConfigValue['routingRegistryName'] = peeringParameters.microsoftPeeringConfig.routingRegistryName;
      }
    }
    
    if (peeringParameters.stats !== null && peeringParameters.stats !== undefined) {
      var statsValue = {};
      propertiesValue['stats'] = statsValue;
      
      if (peeringParameters.stats.bytesIn !== null && peeringParameters.stats.bytesIn !== undefined) {
        statsValue['bytesIn'] = peeringParameters.stats.bytesIn;
      }
      
      if (peeringParameters.stats.bytesOut !== null && peeringParameters.stats.bytesOut !== undefined) {
        statsValue['bytesOut'] = peeringParameters.stats.bytesOut;
      }
    }
    
    if (peeringParameters.provisioningState !== null && peeringParameters.provisioningState !== undefined) {
      propertiesValue['provisioningState'] = peeringParameters.provisioningState;
    }
    
    if (peeringParameters.name !== null && peeringParameters.name !== undefined) {
      expressRouteCircuitPeeringJsonFormatValue['name'] = peeringParameters.name;
    }
    
    if (peeringParameters.etag !== null && peeringParameters.etag !== undefined) {
      expressRouteCircuitPeeringJsonFormatValue['etag'] = peeringParameters.etag;
    }
    
    if (peeringParameters.id !== null && peeringParameters.id !== undefined) {
      expressRouteCircuitPeeringJsonFormatValue['id'] = peeringParameters.id;
    }
    
    requestContent = JSON.stringify(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200 && statusCode !== 201) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200 || statusCode === 201) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var peeringInstance = {};
          result.peering = peeringInstance;
          
          var propertiesValue2 = responseDoc['properties'];
          if (propertiesValue2 !== null && propertiesValue2 !== undefined) {
            var peeringTypeValue = propertiesValue2['peeringType'];
            if (peeringTypeValue !== null && peeringTypeValue !== undefined) {
              var peeringTypeInstance = peeringTypeValue;
              peeringInstance.peeringType = peeringTypeInstance;
            }
            
            var stateValue = propertiesValue2['state'];
            if (stateValue !== null && stateValue !== undefined) {
              var stateInstance = stateValue;
              peeringInstance.state = stateInstance;
            }
            
            var azureASNValue = propertiesValue2['azureASN'];
            if (azureASNValue !== null && azureASNValue !== undefined) {
              var azureASNInstance = azureASNValue;
              peeringInstance.azureASN = azureASNInstance;
            }
            
            var peerASNValue = propertiesValue2['peerASN'];
            if (peerASNValue !== null && peerASNValue !== undefined) {
              var peerASNInstance = peerASNValue;
              peeringInstance.peerASN = peerASNInstance;
            }
            
            var primaryPeerAddressPrefixValue = propertiesValue2['primaryPeerAddressPrefix'];
            if (primaryPeerAddressPrefixValue !== null && primaryPeerAddressPrefixValue !== undefined) {
              var primaryPeerAddressPrefixInstance = primaryPeerAddressPrefixValue;
              peeringInstance.primaryPeerAddressPrefix = primaryPeerAddressPrefixInstance;
            }
            
            var secondaryPeerAddressPrefixValue = propertiesValue2['secondaryPeerAddressPrefix'];
            if (secondaryPeerAddressPrefixValue !== null && secondaryPeerAddressPrefixValue !== undefined) {
              var secondaryPeerAddressPrefixInstance = secondaryPeerAddressPrefixValue;
              peeringInstance.secondaryPeerAddressPrefix = secondaryPeerAddressPrefixInstance;
            }
            
            var primaryAzurePortValue = propertiesValue2['primaryAzurePort'];
            if (primaryAzurePortValue !== null && primaryAzurePortValue !== undefined) {
              var primaryAzurePortInstance = primaryAzurePortValue;
              peeringInstance.primaryAzurePort = primaryAzurePortInstance;
            }
            
            var secondaryAzurePortValue = propertiesValue2['secondaryAzurePort'];
            if (secondaryAzurePortValue !== null && secondaryAzurePortValue !== undefined) {
              var secondaryAzurePortInstance = secondaryAzurePortValue;
              peeringInstance.secondaryAzurePort = secondaryAzurePortInstance;
            }
            
            var sharedKeyValue = propertiesValue2['sharedKey'];
            if (sharedKeyValue !== null && sharedKeyValue !== undefined) {
              var sharedKeyInstance = sharedKeyValue;
              peeringInstance.sharedKey = sharedKeyInstance;
            }
            
            var vlanIdValue = propertiesValue2['vlanId'];
            if (vlanIdValue !== null && vlanIdValue !== undefined) {
              var vlanIdInstance = vlanIdValue;
              peeringInstance.vlanId = vlanIdInstance;
            }
            
            var microsoftPeeringConfigValue2 = propertiesValue2['microsoftPeeringConfig'];
            if (microsoftPeeringConfigValue2 !== null && microsoftPeeringConfigValue2 !== undefined) {
              var microsoftPeeringConfigInstance = { advertisedPublicPrefixes: [] };
              peeringInstance.microsoftPeeringConfig = microsoftPeeringConfigInstance;
              
              var advertisedPublicPrefixesArray2 = microsoftPeeringConfigValue2['advertisedPublicPrefixes'];
              if (advertisedPublicPrefixesArray2 !== null && advertisedPublicPrefixesArray2 !== undefined) {
                for (var loweredIndex2 = 0; loweredIndex2 < advertisedPublicPrefixesArray2.length; loweredIndex2 = loweredIndex2 + 1) {
                  var advertisedPublicPrefixesValue = advertisedPublicPrefixesArray2[loweredIndex2];
                  microsoftPeeringConfigInstance.advertisedPublicPrefixes.push(advertisedPublicPrefixesValue);
                }
              }
              
              var advertisedPublicPrefixesStateValue = microsoftPeeringConfigValue2['advertisedPublicPrefixesState'];
              if (advertisedPublicPrefixesStateValue !== null && advertisedPublicPrefixesStateValue !== undefined) {
                var advertisedPublicPrefixesStateInstance = advertisedPublicPrefixesStateValue;
                microsoftPeeringConfigInstance.advertisedPublicPrefixesState = advertisedPublicPrefixesStateInstance;
              }
              
              var customerASNValue = microsoftPeeringConfigValue2['customerASN'];
              if (customerASNValue !== null && customerASNValue !== undefined) {
                var customerASNInstance = customerASNValue;
                microsoftPeeringConfigInstance.customerASN = customerASNInstance;
              }
              
              var routingRegistryNameValue = microsoftPeeringConfigValue2['routingRegistryName'];
              if (routingRegistryNameValue !== null && routingRegistryNameValue !== undefined) {
                var routingRegistryNameInstance = routingRegistryNameValue;
                microsoftPeeringConfigInstance.routingRegistryName = routingRegistryNameInstance;
              }
            }
            
            var statsValue2 = propertiesValue2['stats'];
            if (statsValue2 !== null && statsValue2 !== undefined) {
              var statsInstance = {};
              peeringInstance.stats = statsInstance;
              
              var bytesInValue = statsValue2['bytesIn'];
              if (bytesInValue !== null && bytesInValue !== undefined) {
                var bytesInInstance = bytesInValue;
                statsInstance.bytesIn = bytesInInstance;
              }
              
              var bytesOutValue = statsValue2['bytesOut'];
              if (bytesOutValue !== null && bytesOutValue !== undefined) {
                var bytesOutInstance = bytesOutValue;
                statsInstance.bytesOut = bytesOutInstance;
              }
            }
            
            var provisioningStateValue = propertiesValue2['provisioningState'];
            if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
              var provisioningStateInstance = provisioningStateValue;
              peeringInstance.provisioningState = provisioningStateInstance;
            }
          }
          
          var nameValue = responseDoc['name'];
          if (nameValue !== null && nameValue !== undefined) {
            var nameInstance = nameValue;
            peeringInstance.name = nameInstance;
          }
          
          var etagValue = responseDoc['etag'];
          if (etagValue !== null && etagValue !== undefined) {
            var etagInstance = etagValue;
            peeringInstance.etag = etagInstance;
          }
          
          var idValue = responseDoc['id'];
          if (idValue !== null && idValue !== undefined) {
            var idInstance = idValue;
            peeringInstance.id = idInstance;
          }
          
          var errorValue = responseDoc['error'];
          if (errorValue !== null && errorValue !== undefined) {
            var errorInstance = { details: [] };
            result.error = errorInstance;
            
            var codeValue = errorValue['code'];
            if (codeValue !== null && codeValue !== undefined) {
              var codeInstance = codeValue;
              errorInstance.code = codeInstance;
            }
            
            var messageValue = errorValue['message'];
            if (messageValue !== null && messageValue !== undefined) {
              var messageInstance = messageValue;
              errorInstance.message = messageInstance;
            }
            
            var targetValue = errorValue['target'];
            if (targetValue !== null && targetValue !== undefined) {
              var targetInstance = targetValue;
              errorInstance.target = targetInstance;
            }
            
            var detailsArray = errorValue['details'];
            if (detailsArray !== null && detailsArray !== undefined) {
              for (var loweredIndex3 = 0; loweredIndex3 < detailsArray.length; loweredIndex3 = loweredIndex3 + 1) {
                var detailsValue = detailsArray[loweredIndex3];
                var errorDetailsInstance = {};
                errorInstance.details.push(errorDetailsInstance);
                
                var codeValue2 = detailsValue['code'];
                if (codeValue2 !== null && codeValue2 !== undefined) {
                  var codeInstance2 = codeValue2;
                  errorDetailsInstance.code = codeInstance2;
                }
                
                var targetValue2 = detailsValue['target'];
                if (targetValue2 !== null && targetValue2 !== undefined) {
                  var targetInstance2 = targetValue2;
                  errorDetailsInstance.target = targetInstance2;
                }
                
                var messageValue2 = detailsValue['message'];
                if (messageValue2 !== null && messageValue2 !== undefined) {
                  var messageInstance2 = messageValue2;
                  errorDetailsInstance.message = messageInstance2;
                }
              }
            }
            
            var innerErrorValue = errorValue['innerError'];
            if (innerErrorValue !== null && innerErrorValue !== undefined) {
              var innerErrorInstance = innerErrorValue;
              errorInstance.innerError = innerErrorInstance;
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      result.azureAsyncOperation = response.headers['azure-asyncoperation'];
      result.retryAfter = parseInt(response.headers['retry-after'], 10);
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The delete peering operation deletes the specified peering from the
   * ExpressRouteCircuit.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} circuitName The name of the express route circuit.
   * 
   * @param {string} peeringName The name of the peering.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ExpressRouteCircuitPeeringOperations.prototype.beginDeleting = function(resourceGroupName, circuitName, peeringName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (circuitName === null || circuitName === undefined) {
      return callback(new Error('circuitName cannot be null.'));
    }
    if (peeringName === null || peeringName === undefined) {
      return callback(new Error('peeringName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Network';
    url2 = url2 + '/expressRouteCircuits/';
    url2 = url2 + encodeURIComponent(circuitName);
    url2 = url2 + '/peerings/';
    url2 = url2 + encodeURIComponent(peeringName);
    var queryParameters = [];
    queryParameters.push('api-version=2015-05-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'DELETE';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200 && statusCode !== 202 && statusCode !== 204) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      result = {};
      result.statusCode = statusCode;
      result.azureAsyncOperation = response.headers['azure-asyncoperation'];
      result.retryAfter = parseInt(response.headers['retry-after'], 10);
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The Put Pering operation creates/updates an peering in thespecified
   * ExpressRouteCircuits
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} circuitName The name of the express route circuit.
   * 
   * @param {string} peeringName The name of the peering.
   * 
   * @param {ExpressRouteCircuitPeering} peeringParameters Parameters supplied
   * to the create/update ExpressRouteCircuit Peering operation
   * 
   * @param {string} [peeringParameters.peeringType] Gets or sets PeeringType
   * 
   * @param {string} [peeringParameters.state] Gets or sets state of Peering
   * 
   * @param {number} [peeringParameters.azureASN] Gets or sets the azure ASN
   * 
   * @param {number} [peeringParameters.peerASN] Gets or sets the peer ASN
   * 
   * @param {string} [peeringParameters.primaryPeerAddressPrefix] Gets or sets
   * the primary address prefix
   * 
   * @param {string} [peeringParameters.secondaryPeerAddressPrefix] Gets or
   * sets the secondary address prefix
   * 
   * @param {string} [peeringParameters.primaryAzurePort] Gets or sets the
   * primary port
   * 
   * @param {string} [peeringParameters.secondaryAzurePort] Gets or sets the
   * secondary port
   * 
   * @param {string} [peeringParameters.sharedKey] Gets or sets the shared key
   * 
   * @param {number} [peeringParameters.vlanId] Gets or sets the vlan id
   * 
   * @param {ExpressRouteCircuitPeeringConfig}
   * [peeringParameters.microsoftPeeringConfig] Gets or sets the mircosoft
   * peering config
   * 
   * @param {IEnumerable}
   * [peeringParameters.microsoftPeeringConfig.advertisedPublicPrefixes] Gets
   * or sets the reference of AdvertisedPublicPrefixes
   * 
   * @param {string}
   * [peeringParameters.microsoftPeeringConfig.advertisedPublicPrefixesState]
   * Gets or sets AdvertisedPublicPrefixState of the Peering resource
   * 
   * @param {number} [peeringParameters.microsoftPeeringConfig.customerASN]
   * Gets or Sets CustomerAsn of the peering.
   * 
   * @param {string}
   * [peeringParameters.microsoftPeeringConfig.routingRegistryName] Gets or
   * Sets RoutingRegistryName of the config.
   * 
   * @param {ExpressRouteCircuitStats} [peeringParameters.stats] Gets or
   * peering stats
   * 
   * @param {number} [peeringParameters.stats.bytesIn] Gets BytesIn of the
   * peering.
   * 
   * @param {number} [peeringParameters.stats.bytesOut] Gets BytesOut of the
   * peering.
   * 
   * @param {string} [peeringParameters.provisioningState] Gets or sets
   * Provisioning state of the PublicIP resource Updating/Deleting/Failed
   * 
   * @param {string} [peeringParameters.name] Gets name of the resource that is
   * unique within a resource group. This name can be used to access the
   * resource
   * 
   * @param {string} [peeringParameters.etag] A unique read-only string that
   * changes whenever the resource is updated
   * 
   * @param {string} [peeringParameters.id] Id of the resource
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ExpressRouteCircuitPeeringOperations.prototype.createOrUpdate = function(resourceGroupName, circuitName, peeringName, peeringParameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.expressRouteCircuitPeerings.beginCreateOrUpdating(resourceGroupName, circuitName, peeringName, peeringParameters, function (err, result) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var delayInSeconds = result.retryAfter;
      if (delayInSeconds === 0) {
        delayInSeconds = 30;
      }
      if (client2.longRunningOperationInitialTimeout >= 0) {
        delayInSeconds = client2.longRunningOperationInitialTimeout;
      }
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.getLongRunningOperationStatus(result.azureAsyncOperation, function (err2, result2) {
            if (err2 !== null && err2 !== undefined) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                return callback(null, result2);
              } else {
                delayInSeconds = result2.retryAfter;
                if (delayInSeconds === 0) {
                  delayInSeconds = 15;
                }
                if (client2.longRunningOperationRetryTimeout >= 0) {
                  delayInSeconds = client2.longRunningOperationRetryTimeout;
                }
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  /**
   * The delete peering operation deletes the specified peering from the
   * ExpressRouteCircuit.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} circuitName The name of the express route circuit.
   * 
   * @param {string} peeringName The name of the peering.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ExpressRouteCircuitPeeringOperations.prototype.deleteMethod = function(resourceGroupName, circuitName, peeringName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.expressRouteCircuitPeerings.beginDeleting(resourceGroupName, circuitName, peeringName, function (err, result) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var delayInSeconds = result.retryAfter;
      if (delayInSeconds === 0) {
        delayInSeconds = 30;
      }
      if (client2.longRunningOperationInitialTimeout >= 0) {
        delayInSeconds = client2.longRunningOperationInitialTimeout;
      }
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.getLongRunningOperationStatus(result.azureAsyncOperation, function (err2, result2) {
            if (err2 !== null && err2 !== undefined) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                return callback(null, result2);
              } else {
                delayInSeconds = result2.retryAfter;
                if (delayInSeconds === 0) {
                  delayInSeconds = 15;
                }
                if (client2.longRunningOperationRetryTimeout >= 0) {
                  delayInSeconds = client2.longRunningOperationRetryTimeout;
                }
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  /**
   * The GET peering operation retrieves the specified authorization from the
   * ExpressRouteCircuit.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} circuitName The name of the express route circuit.
   * 
   * @param {string} peeringName The name of the peering.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ExpressRouteCircuitPeeringOperations.prototype.get = function(resourceGroupName, circuitName, peeringName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (circuitName === null || circuitName === undefined) {
      return callback(new Error('circuitName cannot be null.'));
    }
    if (peeringName === null || peeringName === undefined) {
      return callback(new Error('peeringName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Network';
    url2 = url2 + '/expressRouteCircuits/';
    url2 = url2 + encodeURIComponent(circuitName);
    url2 = url2 + '/peerings/';
    url2 = url2 + encodeURIComponent(peeringName);
    var queryParameters = [];
    queryParameters.push('api-version=2015-05-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var peeringInstance = {};
          result.peering = peeringInstance;
          
          var propertiesValue = responseDoc['properties'];
          if (propertiesValue !== null && propertiesValue !== undefined) {
            var peeringTypeValue = propertiesValue['peeringType'];
            if (peeringTypeValue !== null && peeringTypeValue !== undefined) {
              var peeringTypeInstance = peeringTypeValue;
              peeringInstance.peeringType = peeringTypeInstance;
            }
            
            var stateValue = propertiesValue['state'];
            if (stateValue !== null && stateValue !== undefined) {
              var stateInstance = stateValue;
              peeringInstance.state = stateInstance;
            }
            
            var azureASNValue = propertiesValue['azureASN'];
            if (azureASNValue !== null && azureASNValue !== undefined) {
              var azureASNInstance = azureASNValue;
              peeringInstance.azureASN = azureASNInstance;
            }
            
            var peerASNValue = propertiesValue['peerASN'];
            if (peerASNValue !== null && peerASNValue !== undefined) {
              var peerASNInstance = peerASNValue;
              peeringInstance.peerASN = peerASNInstance;
            }
            
            var primaryPeerAddressPrefixValue = propertiesValue['primaryPeerAddressPrefix'];
            if (primaryPeerAddressPrefixValue !== null && primaryPeerAddressPrefixValue !== undefined) {
              var primaryPeerAddressPrefixInstance = primaryPeerAddressPrefixValue;
              peeringInstance.primaryPeerAddressPrefix = primaryPeerAddressPrefixInstance;
            }
            
            var secondaryPeerAddressPrefixValue = propertiesValue['secondaryPeerAddressPrefix'];
            if (secondaryPeerAddressPrefixValue !== null && secondaryPeerAddressPrefixValue !== undefined) {
              var secondaryPeerAddressPrefixInstance = secondaryPeerAddressPrefixValue;
              peeringInstance.secondaryPeerAddressPrefix = secondaryPeerAddressPrefixInstance;
            }
            
            var primaryAzurePortValue = propertiesValue['primaryAzurePort'];
            if (primaryAzurePortValue !== null && primaryAzurePortValue !== undefined) {
              var primaryAzurePortInstance = primaryAzurePortValue;
              peeringInstance.primaryAzurePort = primaryAzurePortInstance;
            }
            
            var secondaryAzurePortValue = propertiesValue['secondaryAzurePort'];
            if (secondaryAzurePortValue !== null && secondaryAzurePortValue !== undefined) {
              var secondaryAzurePortInstance = secondaryAzurePortValue;
              peeringInstance.secondaryAzurePort = secondaryAzurePortInstance;
            }
            
            var sharedKeyValue = propertiesValue['sharedKey'];
            if (sharedKeyValue !== null && sharedKeyValue !== undefined) {
              var sharedKeyInstance = sharedKeyValue;
              peeringInstance.sharedKey = sharedKeyInstance;
            }
            
            var vlanIdValue = propertiesValue['vlanId'];
            if (vlanIdValue !== null && vlanIdValue !== undefined) {
              var vlanIdInstance = vlanIdValue;
              peeringInstance.vlanId = vlanIdInstance;
            }
            
            var microsoftPeeringConfigValue = propertiesValue['microsoftPeeringConfig'];
            if (microsoftPeeringConfigValue !== null && microsoftPeeringConfigValue !== undefined) {
              var microsoftPeeringConfigInstance = { advertisedPublicPrefixes: [] };
              peeringInstance.microsoftPeeringConfig = microsoftPeeringConfigInstance;
              
              var advertisedPublicPrefixesArray = microsoftPeeringConfigValue['advertisedPublicPrefixes'];
              if (advertisedPublicPrefixesArray !== null && advertisedPublicPrefixesArray !== undefined) {
                for (var loweredIndex1 = 0; loweredIndex1 < advertisedPublicPrefixesArray.length; loweredIndex1 = loweredIndex1 + 1) {
                  var advertisedPublicPrefixesValue = advertisedPublicPrefixesArray[loweredIndex1];
                  microsoftPeeringConfigInstance.advertisedPublicPrefixes.push(advertisedPublicPrefixesValue);
                }
              }
              
              var advertisedPublicPrefixesStateValue = microsoftPeeringConfigValue['advertisedPublicPrefixesState'];
              if (advertisedPublicPrefixesStateValue !== null && advertisedPublicPrefixesStateValue !== undefined) {
                var advertisedPublicPrefixesStateInstance = advertisedPublicPrefixesStateValue;
                microsoftPeeringConfigInstance.advertisedPublicPrefixesState = advertisedPublicPrefixesStateInstance;
              }
              
              var customerASNValue = microsoftPeeringConfigValue['customerASN'];
              if (customerASNValue !== null && customerASNValue !== undefined) {
                var customerASNInstance = customerASNValue;
                microsoftPeeringConfigInstance.customerASN = customerASNInstance;
              }
              
              var routingRegistryNameValue = microsoftPeeringConfigValue['routingRegistryName'];
              if (routingRegistryNameValue !== null && routingRegistryNameValue !== undefined) {
                var routingRegistryNameInstance = routingRegistryNameValue;
                microsoftPeeringConfigInstance.routingRegistryName = routingRegistryNameInstance;
              }
            }
            
            var statsValue = propertiesValue['stats'];
            if (statsValue !== null && statsValue !== undefined) {
              var statsInstance = {};
              peeringInstance.stats = statsInstance;
              
              var bytesInValue = statsValue['bytesIn'];
              if (bytesInValue !== null && bytesInValue !== undefined) {
                var bytesInInstance = bytesInValue;
                statsInstance.bytesIn = bytesInInstance;
              }
              
              var bytesOutValue = statsValue['bytesOut'];
              if (bytesOutValue !== null && bytesOutValue !== undefined) {
                var bytesOutInstance = bytesOutValue;
                statsInstance.bytesOut = bytesOutInstance;
              }
            }
            
            var provisioningStateValue = propertiesValue['provisioningState'];
            if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
              var provisioningStateInstance = provisioningStateValue;
              peeringInstance.provisioningState = provisioningStateInstance;
            }
          }
          
          var nameValue = responseDoc['name'];
          if (nameValue !== null && nameValue !== undefined) {
            var nameInstance = nameValue;
            peeringInstance.name = nameInstance;
          }
          
          var etagValue = responseDoc['etag'];
          if (etagValue !== null && etagValue !== undefined) {
            var etagInstance = etagValue;
            peeringInstance.etag = etagInstance;
          }
          
          var idValue = responseDoc['id'];
          if (idValue !== null && idValue !== undefined) {
            var idInstance = idValue;
            peeringInstance.id = idInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The List peering operation retrieves all the peerings in an
   * ExpressRouteCircuit.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} circuitName The name of the curcuit.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ExpressRouteCircuitPeeringOperations.prototype.list = function(resourceGroupName, circuitName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (circuitName === null || circuitName === undefined) {
      return callback(new Error('circuitName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Network';
    url2 = url2 + '/expressRouteCircuits/';
    url2 = url2 + encodeURIComponent(circuitName);
    url2 = url2 + '/peerings';
    var queryParameters = [];
    queryParameters.push('api-version=2015-05-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = { peerings: [] };
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var valueArray = responseDoc['value'];
          if (valueArray !== null && valueArray !== undefined) {
            for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var valueValue = valueArray[loweredIndex1];
              var expressRouteCircuitPeeringJsonFormatInstance = {};
              result.peerings.push(expressRouteCircuitPeeringJsonFormatInstance);
              
              var propertiesValue = valueValue['properties'];
              if (propertiesValue !== null && propertiesValue !== undefined) {
                var peeringTypeValue = propertiesValue['peeringType'];
                if (peeringTypeValue !== null && peeringTypeValue !== undefined) {
                  var peeringTypeInstance = peeringTypeValue;
                  expressRouteCircuitPeeringJsonFormatInstance.peeringType = peeringTypeInstance;
                }
                
                var stateValue = propertiesValue['state'];
                if (stateValue !== null && stateValue !== undefined) {
                  var stateInstance = stateValue;
                  expressRouteCircuitPeeringJsonFormatInstance.state = stateInstance;
                }
                
                var azureASNValue = propertiesValue['azureASN'];
                if (azureASNValue !== null && azureASNValue !== undefined) {
                  var azureASNInstance = azureASNValue;
                  expressRouteCircuitPeeringJsonFormatInstance.azureASN = azureASNInstance;
                }
                
                var peerASNValue = propertiesValue['peerASN'];
                if (peerASNValue !== null && peerASNValue !== undefined) {
                  var peerASNInstance = peerASNValue;
                  expressRouteCircuitPeeringJsonFormatInstance.peerASN = peerASNInstance;
                }
                
                var primaryPeerAddressPrefixValue = propertiesValue['primaryPeerAddressPrefix'];
                if (primaryPeerAddressPrefixValue !== null && primaryPeerAddressPrefixValue !== undefined) {
                  var primaryPeerAddressPrefixInstance = primaryPeerAddressPrefixValue;
                  expressRouteCircuitPeeringJsonFormatInstance.primaryPeerAddressPrefix = primaryPeerAddressPrefixInstance;
                }
                
                var secondaryPeerAddressPrefixValue = propertiesValue['secondaryPeerAddressPrefix'];
                if (secondaryPeerAddressPrefixValue !== null && secondaryPeerAddressPrefixValue !== undefined) {
                  var secondaryPeerAddressPrefixInstance = secondaryPeerAddressPrefixValue;
                  expressRouteCircuitPeeringJsonFormatInstance.secondaryPeerAddressPrefix = secondaryPeerAddressPrefixInstance;
                }
                
                var primaryAzurePortValue = propertiesValue['primaryAzurePort'];
                if (primaryAzurePortValue !== null && primaryAzurePortValue !== undefined) {
                  var primaryAzurePortInstance = primaryAzurePortValue;
                  expressRouteCircuitPeeringJsonFormatInstance.primaryAzurePort = primaryAzurePortInstance;
                }
                
                var secondaryAzurePortValue = propertiesValue['secondaryAzurePort'];
                if (secondaryAzurePortValue !== null && secondaryAzurePortValue !== undefined) {
                  var secondaryAzurePortInstance = secondaryAzurePortValue;
                  expressRouteCircuitPeeringJsonFormatInstance.secondaryAzurePort = secondaryAzurePortInstance;
                }
                
                var sharedKeyValue = propertiesValue['sharedKey'];
                if (sharedKeyValue !== null && sharedKeyValue !== undefined) {
                  var sharedKeyInstance = sharedKeyValue;
                  expressRouteCircuitPeeringJsonFormatInstance.sharedKey = sharedKeyInstance;
                }
                
                var vlanIdValue = propertiesValue['vlanId'];
                if (vlanIdValue !== null && vlanIdValue !== undefined) {
                  var vlanIdInstance = vlanIdValue;
                  expressRouteCircuitPeeringJsonFormatInstance.vlanId = vlanIdInstance;
                }
                
                var microsoftPeeringConfigValue = propertiesValue['microsoftPeeringConfig'];
                if (microsoftPeeringConfigValue !== null && microsoftPeeringConfigValue !== undefined) {
                  var microsoftPeeringConfigInstance = { advertisedPublicPrefixes: [] };
                  expressRouteCircuitPeeringJsonFormatInstance.microsoftPeeringConfig = microsoftPeeringConfigInstance;
                  
                  var advertisedPublicPrefixesArray = microsoftPeeringConfigValue['advertisedPublicPrefixes'];
                  if (advertisedPublicPrefixesArray !== null && advertisedPublicPrefixesArray !== undefined) {
                    for (var loweredIndex2 = 0; loweredIndex2 < advertisedPublicPrefixesArray.length; loweredIndex2 = loweredIndex2 + 1) {
                      var advertisedPublicPrefixesValue = advertisedPublicPrefixesArray[loweredIndex2];
                      microsoftPeeringConfigInstance.advertisedPublicPrefixes.push(advertisedPublicPrefixesValue);
                    }
                  }
                  
                  var advertisedPublicPrefixesStateValue = microsoftPeeringConfigValue['advertisedPublicPrefixesState'];
                  if (advertisedPublicPrefixesStateValue !== null && advertisedPublicPrefixesStateValue !== undefined) {
                    var advertisedPublicPrefixesStateInstance = advertisedPublicPrefixesStateValue;
                    microsoftPeeringConfigInstance.advertisedPublicPrefixesState = advertisedPublicPrefixesStateInstance;
                  }
                  
                  var customerASNValue = microsoftPeeringConfigValue['customerASN'];
                  if (customerASNValue !== null && customerASNValue !== undefined) {
                    var customerASNInstance = customerASNValue;
                    microsoftPeeringConfigInstance.customerASN = customerASNInstance;
                  }
                  
                  var routingRegistryNameValue = microsoftPeeringConfigValue['routingRegistryName'];
                  if (routingRegistryNameValue !== null && routingRegistryNameValue !== undefined) {
                    var routingRegistryNameInstance = routingRegistryNameValue;
                    microsoftPeeringConfigInstance.routingRegistryName = routingRegistryNameInstance;
                  }
                }
                
                var statsValue = propertiesValue['stats'];
                if (statsValue !== null && statsValue !== undefined) {
                  var statsInstance = {};
                  expressRouteCircuitPeeringJsonFormatInstance.stats = statsInstance;
                  
                  var bytesInValue = statsValue['bytesIn'];
                  if (bytesInValue !== null && bytesInValue !== undefined) {
                    var bytesInInstance = bytesInValue;
                    statsInstance.bytesIn = bytesInInstance;
                  }
                  
                  var bytesOutValue = statsValue['bytesOut'];
                  if (bytesOutValue !== null && bytesOutValue !== undefined) {
                    var bytesOutInstance = bytesOutValue;
                    statsInstance.bytesOut = bytesOutInstance;
                  }
                }
                
                var provisioningStateValue = propertiesValue['provisioningState'];
                if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
                  var provisioningStateInstance = provisioningStateValue;
                  expressRouteCircuitPeeringJsonFormatInstance.provisioningState = provisioningStateInstance;
                }
              }
              
              var nameValue = valueValue['name'];
              if (nameValue !== null && nameValue !== undefined) {
                var nameInstance = nameValue;
                expressRouteCircuitPeeringJsonFormatInstance.name = nameInstance;
              }
              
              var etagValue = valueValue['etag'];
              if (etagValue !== null && etagValue !== undefined) {
                var etagInstance = etagValue;
                expressRouteCircuitPeeringJsonFormatInstance.etag = etagInstance;
              }
              
              var idValue = valueValue['id'];
              if (idValue !== null && idValue !== undefined) {
                var idInstance = idValue;
                expressRouteCircuitPeeringJsonFormatInstance.id = idInstance;
              }
            }
          }
          
          var nextLinkValue = responseDoc['nextLink'];
          if (nextLinkValue !== null && nextLinkValue !== undefined) {
            var nextLinkInstance = nextLinkValue;
            result.nextLink = nextLinkInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  return ExpressRouteCircuitPeeringOperations;
})();

var ExpressRouteServiceProviderOperations = ( /** @lends ExpressRouteServiceProviderOperations */ function() {
  /**
   * @class
   * The Network Resource Provider API includes operations for managing the
   * ExpressRouteServiceProviders for your subscription.
   * __NOTE__: An instance of this class is automatically created for an
   * instance of the [NetworkResourceProviderClient] {@link
   * NetworkResourceProviderClient~NetworkResourceProviderClient}.
   * See [expressRouteServiceProviders] {@link
   * NetworkResourceProviderClient~NetworkResourceProviderClient#expressRouteServiceProviders}.
   * Initializes a new instance of the ExpressRouteServiceProviderOperations
   * class.
   * @constructor
   * 
   * @param {NetworkResourceProviderClient} client Reference to the service
   * client.
   */
  function ExpressRouteServiceProviderOperations(client) {
    this.client = client;
  }
  
  /**
   * The List ExpressRouteServiceProvider opertion retrieves all the available
   * ExpressRouteServiceProviders.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ExpressRouteServiceProviderOperations.prototype.list = function(callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Network';
    url2 = url2 + '/expressRouteServiceProviders';
    var queryParameters = [];
    queryParameters.push('api-version=2015-05-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = { expressRouteServiceProviders: [] };
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var valueArray = responseDoc['value'];
          if (valueArray !== null && valueArray !== undefined) {
            for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var valueValue = valueArray[loweredIndex1];
              var expressRouteServiceProviderJsonFormatInstance = { bandwidthsOffered: [], peeringLocations: [] };
              result.expressRouteServiceProviders.push(expressRouteServiceProviderJsonFormatInstance);
              
              var idValue = valueValue['id'];
              if (idValue !== null && idValue !== undefined) {
                var idInstance = idValue;
                expressRouteServiceProviderJsonFormatInstance.id = idInstance;
              }
              
              var nameValue = valueValue['name'];
              if (nameValue !== null && nameValue !== undefined) {
                var nameInstance = nameValue;
                expressRouteServiceProviderJsonFormatInstance.name = nameInstance;
              }
              
              var typeValue = valueValue['type'];
              if (typeValue !== null && typeValue !== undefined) {
                var typeInstance = typeValue;
                expressRouteServiceProviderJsonFormatInstance.type = typeInstance;
              }
              
              var propertiesValue = valueValue['properties'];
              if (propertiesValue !== null && propertiesValue !== undefined) {
                var peeringLocationsArray = propertiesValue['peeringLocations'];
                if (peeringLocationsArray !== null && peeringLocationsArray !== undefined) {
                  for (var loweredIndex2 = 0; loweredIndex2 < peeringLocationsArray.length; loweredIndex2 = loweredIndex2 + 1) {
                    var peeringLocationsValue = peeringLocationsArray[loweredIndex2];
                    expressRouteServiceProviderJsonFormatInstance.peeringLocations.push(peeringLocationsValue);
                  }
                }
                
                var bandwidthsOfferedArray = propertiesValue['bandwidthsOffered'];
                if (bandwidthsOfferedArray !== null && bandwidthsOfferedArray !== undefined) {
                  for (var loweredIndex3 = 0; loweredIndex3 < bandwidthsOfferedArray.length; loweredIndex3 = loweredIndex3 + 1) {
                    var bandwidthsOfferedValue = bandwidthsOfferedArray[loweredIndex3];
                    var expressRouteServiceProviderBandwidthsOfferedJsonFormatInstance = {};
                    expressRouteServiceProviderJsonFormatInstance.bandwidthsOffered.push(expressRouteServiceProviderBandwidthsOfferedJsonFormatInstance);
                    
                    var offerNameValue = bandwidthsOfferedValue['offerName'];
                    if (offerNameValue !== null && offerNameValue !== undefined) {
                      var offerNameInstance = offerNameValue;
                      expressRouteServiceProviderBandwidthsOfferedJsonFormatInstance.offerName = offerNameInstance;
                    }
                    
                    var valueInMbpsValue = bandwidthsOfferedValue['valueInMbps'];
                    if (valueInMbpsValue !== null && valueInMbpsValue !== undefined) {
                      var valueInMbpsInstance = valueInMbpsValue;
                      expressRouteServiceProviderBandwidthsOfferedJsonFormatInstance.valueInMbps = valueInMbpsInstance;
                    }
                  }
                }
                
                var provisioningStateValue = propertiesValue['provisioningState'];
                if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
                  var provisioningStateInstance = provisioningStateValue;
                  expressRouteServiceProviderJsonFormatInstance.provisioningState = provisioningStateInstance;
                }
              }
            }
          }
          
          var nextLinkValue = responseDoc['nextLink'];
          if (nextLinkValue !== null && nextLinkValue !== undefined) {
            var nextLinkInstance = nextLinkValue;
            result.nextLink = nextLinkInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  return ExpressRouteServiceProviderOperations;
})();

var LoadBalancerOperations = ( /** @lends LoadBalancerOperations */ function() {
  /**
   * @class
   * The Network Resource Provider API includes operations for managing the
   * load balancers for your subscription.
   * __NOTE__: An instance of this class is automatically created for an
   * instance of the [NetworkResourceProviderClient] {@link
   * NetworkResourceProviderClient~NetworkResourceProviderClient}.
   * See [loadBalancers] {@link
   * NetworkResourceProviderClient~NetworkResourceProviderClient#loadBalancers}.
   * Initializes a new instance of the LoadBalancerOperations class.
   * @constructor
   * 
   * @param {NetworkResourceProviderClient} client Reference to the service
   * client.
   */
  function LoadBalancerOperations(client) {
    this.client = client;
  }
  
  /**
   * The Put LoadBalancer operation creates/updates a LoadBalancer
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} loadBalancerName The name of the loadBalancer.
   * 
   * @param {LoadBalancer} parameters Parameters supplied to the create/delete
   * LoadBalancer operation
   * 
   * @param {IEnumerable} [parameters.frontendIpConfigurations] Gets or sets
   * frontend IP addresses of the load balancer
   * 
   * @param {IEnumerable} [parameters.backendAddressPools] Gets or sets Pools
   * of backend IP addresseses
   * 
   * @param {IEnumerable} [parameters.loadBalancingRules] Gets or sets
   * loadbalancing rules
   * 
   * @param {IEnumerable} [parameters.probes] Gets or sets list of Load
   * balancer probes
   * 
   * @param {IEnumerable} [parameters.inboundNatRules] Gets or sets list of
   * inbound rules
   * 
   * @param {IEnumerable} [parameters.inboundNatPools] Gets or sets inbound NAT
   * pools
   * 
   * @param {IEnumerable} [parameters.outboundNatRules] Gets or sets outbound
   * NAT rules
   * 
   * @param {string} [parameters.provisioningState] Gets or sets Provisioning
   * state of the PublicIP resource Updating/Deleting/Failed
   * 
   * @param {string} [parameters.resourceGuid] Gets or sets resource guid
   * property of the Load balancer resource
   * 
   * @param {string} [parameters.etag] Gets a unique read-only string that
   * changes whenever the resource is updated
   * 
   * @param {string} [parameters.id] Gets or sets the ID of the resource.
   * 
   * @param {string} [parameters.name] Gets or sets the name of the resource.
   * 
   * @param {string} [parameters.type] Gets or sets the type of the resource.
   * 
   * @param {string} [parameters.location] Gets or sets the location of the
   * resource.
   * 
   * @param {object} [parameters.tags] Gets or sets the tags attached to the
   * resource.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  LoadBalancerOperations.prototype.beginCreateOrUpdating = function(resourceGroupName, loadBalancerName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (loadBalancerName === null || loadBalancerName === undefined) {
      return callback(new Error('loadBalancerName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.inboundNatPools !== null && parameters.inboundNatPools !== undefined) {
      for (var loweredIndex1 = 0; loweredIndex1 < parameters.inboundNatPools.length; loweredIndex1 = loweredIndex1 + 1) {
        var inboundNatPoolsParameterItem = parameters.inboundNatPools[loweredIndex1];
        if (inboundNatPoolsParameterItem.backendPort === null || inboundNatPoolsParameterItem.backendPort === undefined) {
          return callback(new Error('parameters.inboundNatPools.backendPort cannot be null.'));
        }
        if (inboundNatPoolsParameterItem.frontendPortRangeEnd === null || inboundNatPoolsParameterItem.frontendPortRangeEnd === undefined) {
          return callback(new Error('parameters.inboundNatPools.frontendPortRangeEnd cannot be null.'));
        }
        if (inboundNatPoolsParameterItem.frontendPortRangeStart === null || inboundNatPoolsParameterItem.frontendPortRangeStart === undefined) {
          return callback(new Error('parameters.inboundNatPools.frontendPortRangeStart cannot be null.'));
        }
        if (inboundNatPoolsParameterItem.protocol === null || inboundNatPoolsParameterItem.protocol === undefined) {
          return callback(new Error('parameters.inboundNatPools.protocol cannot be null.'));
        }
      }
    }
    if (parameters.inboundNatRules !== null && parameters.inboundNatRules !== undefined) {
      for (var loweredIndex2 = 0; loweredIndex2 < parameters.inboundNatRules.length; loweredIndex2 = loweredIndex2 + 1) {
        var inboundNatRulesParameterItem = parameters.inboundNatRules[loweredIndex2];
        if (inboundNatRulesParameterItem.enableFloatingIP === null || inboundNatRulesParameterItem.enableFloatingIP === undefined) {
          return callback(new Error('parameters.inboundNatRules.enableFloatingIP cannot be null.'));
        }
        if (inboundNatRulesParameterItem.frontendPort === null || inboundNatRulesParameterItem.frontendPort === undefined) {
          return callback(new Error('parameters.inboundNatRules.frontendPort cannot be null.'));
        }
        if (inboundNatRulesParameterItem.protocol === null || inboundNatRulesParameterItem.protocol === undefined) {
          return callback(new Error('parameters.inboundNatRules.protocol cannot be null.'));
        }
      }
    }
    if (parameters.loadBalancingRules !== null && parameters.loadBalancingRules !== undefined) {
      for (var loweredIndex3 = 0; loweredIndex3 < parameters.loadBalancingRules.length; loweredIndex3 = loweredIndex3 + 1) {
        var loadBalancingRulesParameterItem = parameters.loadBalancingRules[loweredIndex3];
        if (loadBalancingRulesParameterItem.backendAddressPool === null || loadBalancingRulesParameterItem.backendAddressPool === undefined) {
          return callback(new Error('parameters.loadBalancingRules.backendAddressPool cannot be null.'));
        }
        if (loadBalancingRulesParameterItem.enableFloatingIP === null || loadBalancingRulesParameterItem.enableFloatingIP === undefined) {
          return callback(new Error('parameters.loadBalancingRules.enableFloatingIP cannot be null.'));
        }
        if (loadBalancingRulesParameterItem.frontendPort === null || loadBalancingRulesParameterItem.frontendPort === undefined) {
          return callback(new Error('parameters.loadBalancingRules.frontendPort cannot be null.'));
        }
        if (loadBalancingRulesParameterItem.protocol === null || loadBalancingRulesParameterItem.protocol === undefined) {
          return callback(new Error('parameters.loadBalancingRules.protocol cannot be null.'));
        }
      }
    }
    if (parameters.outboundNatRules !== null && parameters.outboundNatRules !== undefined) {
      for (var loweredIndex4 = 0; loweredIndex4 < parameters.outboundNatRules.length; loweredIndex4 = loweredIndex4 + 1) {
        var outboundNatRulesParameterItem = parameters.outboundNatRules[loweredIndex4];
        if (outboundNatRulesParameterItem.allocatedOutboundPorts === null || outboundNatRulesParameterItem.allocatedOutboundPorts === undefined) {
          return callback(new Error('parameters.outboundNatRules.allocatedOutboundPorts cannot be null.'));
        }
        if (outboundNatRulesParameterItem.backendAddressPool === null || outboundNatRulesParameterItem.backendAddressPool === undefined) {
          return callback(new Error('parameters.outboundNatRules.backendAddressPool cannot be null.'));
        }
      }
    }
    if (parameters.probes !== null && parameters.probes !== undefined) {
      for (var loweredIndex5 = 0; loweredIndex5 < parameters.probes.length; loweredIndex5 = loweredIndex5 + 1) {
        var probesParameterItem = parameters.probes[loweredIndex5];
        if (probesParameterItem.port === null || probesParameterItem.port === undefined) {
          return callback(new Error('parameters.probes.port cannot be null.'));
        }
        if (probesParameterItem.protocol === null || probesParameterItem.protocol === undefined) {
          return callback(new Error('parameters.probes.protocol cannot be null.'));
        }
      }
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Network';
    url2 = url2 + '/loadBalancers/';
    url2 = url2 + encodeURIComponent(loadBalancerName);
    var queryParameters = [];
    queryParameters.push('api-version=2015-05-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = null;
    
    var loadBalancerJsonFormatValue = {};
    requestDoc = loadBalancerJsonFormatValue;
    
    var propertiesValue = {};
    loadBalancerJsonFormatValue['properties'] = propertiesValue;
    
    if (parameters.frontendIpConfigurations !== null && parameters.frontendIpConfigurations !== undefined) {
      var frontendIPConfigurationsArray = [];
      for (var loweredIndex6 = 0; loweredIndex6 < parameters.frontendIpConfigurations.length; loweredIndex6 = loweredIndex6 + 1) {
        var frontendIPConfigurationsItem = parameters.frontendIpConfigurations[loweredIndex6];
        var frontendIpConfigurationJsonFormatValue = {};
        frontendIPConfigurationsArray.push(frontendIpConfigurationJsonFormatValue);
        
        var propertiesValue2 = {};
        frontendIpConfigurationJsonFormatValue['properties'] = propertiesValue2;
        
        if (frontendIPConfigurationsItem.privateIpAddress !== null && frontendIPConfigurationsItem.privateIpAddress !== undefined) {
          propertiesValue2['privateIPAddress'] = frontendIPConfigurationsItem.privateIpAddress;
        }
        
        if (frontendIPConfigurationsItem.privateIpAllocationMethod !== null && frontendIPConfigurationsItem.privateIpAllocationMethod !== undefined) {
          propertiesValue2['privateIPAllocationMethod'] = frontendIPConfigurationsItem.privateIpAllocationMethod;
        }
        
        if (frontendIPConfigurationsItem.subnet !== null && frontendIPConfigurationsItem.subnet !== undefined) {
          var subnetValue = {};
          propertiesValue2['subnet'] = subnetValue;
          
          if (frontendIPConfigurationsItem.subnet.id !== null && frontendIPConfigurationsItem.subnet.id !== undefined) {
            subnetValue['id'] = frontendIPConfigurationsItem.subnet.id;
          }
        }
        
        if (frontendIPConfigurationsItem.publicIpAddress !== null && frontendIPConfigurationsItem.publicIpAddress !== undefined) {
          var publicIPAddressValue = {};
          propertiesValue2['publicIPAddress'] = publicIPAddressValue;
          
          if (frontendIPConfigurationsItem.publicIpAddress.id !== null && frontendIPConfigurationsItem.publicIpAddress.id !== undefined) {
            publicIPAddressValue['id'] = frontendIPConfigurationsItem.publicIpAddress.id;
          }
        }
        
        if (frontendIPConfigurationsItem.inboundNatRules !== null && frontendIPConfigurationsItem.inboundNatRules !== undefined) {
          var inboundNatRulesArray = [];
          for (var loweredIndex7 = 0; loweredIndex7 < frontendIPConfigurationsItem.inboundNatRules.length; loweredIndex7 = loweredIndex7 + 1) {
            var inboundNatRulesItem = frontendIPConfigurationsItem.inboundNatRules[loweredIndex7];
            var resourceIdValue = {};
            inboundNatRulesArray.push(resourceIdValue);
            
            if (inboundNatRulesItem.id !== null && inboundNatRulesItem.id !== undefined) {
              resourceIdValue['id'] = inboundNatRulesItem.id;
            }
          }
          propertiesValue2['inboundNatRules'] = inboundNatRulesArray;
        }
        
        if (frontendIPConfigurationsItem.inboundNatPools !== null && frontendIPConfigurationsItem.inboundNatPools !== undefined) {
          var inboundNatPoolsArray = [];
          for (var loweredIndex8 = 0; loweredIndex8 < frontendIPConfigurationsItem.inboundNatPools.length; loweredIndex8 = loweredIndex8 + 1) {
            var inboundNatPoolsItem = frontendIPConfigurationsItem.inboundNatPools[loweredIndex8];
            var resourceIdValue2 = {};
            inboundNatPoolsArray.push(resourceIdValue2);
            
            if (inboundNatPoolsItem.id !== null && inboundNatPoolsItem.id !== undefined) {
              resourceIdValue2['id'] = inboundNatPoolsItem.id;
            }
          }
          propertiesValue2['inboundNatPools'] = inboundNatPoolsArray;
        }
        
        if (frontendIPConfigurationsItem.outboundNatRules !== null && frontendIPConfigurationsItem.outboundNatRules !== undefined) {
          var outboundNatRulesArray = [];
          for (var loweredIndex9 = 0; loweredIndex9 < frontendIPConfigurationsItem.outboundNatRules.length; loweredIndex9 = loweredIndex9 + 1) {
            var outboundNatRulesItem = frontendIPConfigurationsItem.outboundNatRules[loweredIndex9];
            var resourceIdValue3 = {};
            outboundNatRulesArray.push(resourceIdValue3);
            
            if (outboundNatRulesItem.id !== null && outboundNatRulesItem.id !== undefined) {
              resourceIdValue3['id'] = outboundNatRulesItem.id;
            }
          }
          propertiesValue2['outboundNatRules'] = outboundNatRulesArray;
        }
        
        if (frontendIPConfigurationsItem.loadBalancingRules !== null && frontendIPConfigurationsItem.loadBalancingRules !== undefined) {
          var loadBalancingRulesArray = [];
          for (var loweredIndex10 = 0; loweredIndex10 < frontendIPConfigurationsItem.loadBalancingRules.length; loweredIndex10 = loweredIndex10 + 1) {
            var loadBalancingRulesItem = frontendIPConfigurationsItem.loadBalancingRules[loweredIndex10];
            var resourceIdValue4 = {};
            loadBalancingRulesArray.push(resourceIdValue4);
            
            if (loadBalancingRulesItem.id !== null && loadBalancingRulesItem.id !== undefined) {
              resourceIdValue4['id'] = loadBalancingRulesItem.id;
            }
          }
          propertiesValue2['loadBalancingRules'] = loadBalancingRulesArray;
        }
        
        if (frontendIPConfigurationsItem.provisioningState !== null && frontendIPConfigurationsItem.provisioningState !== undefined) {
          propertiesValue2['provisioningState'] = frontendIPConfigurationsItem.provisioningState;
        }
        
        if (frontendIPConfigurationsItem.name !== null && frontendIPConfigurationsItem.name !== undefined) {
          frontendIpConfigurationJsonFormatValue['name'] = frontendIPConfigurationsItem.name;
        }
        
        if (frontendIPConfigurationsItem.etag !== null && frontendIPConfigurationsItem.etag !== undefined) {
          frontendIpConfigurationJsonFormatValue['etag'] = frontendIPConfigurationsItem.etag;
        }
        
        if (frontendIPConfigurationsItem.id !== null && frontendIPConfigurationsItem.id !== undefined) {
          frontendIpConfigurationJsonFormatValue['id'] = frontendIPConfigurationsItem.id;
        }
      }
      propertiesValue['frontendIPConfigurations'] = frontendIPConfigurationsArray;
    }
    
    if (parameters.backendAddressPools !== null && parameters.backendAddressPools !== undefined) {
      var backendAddressPoolsArray = [];
      for (var loweredIndex11 = 0; loweredIndex11 < parameters.backendAddressPools.length; loweredIndex11 = loweredIndex11 + 1) {
        var backendAddressPoolsItem = parameters.backendAddressPools[loweredIndex11];
        var backendAddressPoolJsonFormatValue = {};
        backendAddressPoolsArray.push(backendAddressPoolJsonFormatValue);
        
        var propertiesValue3 = {};
        backendAddressPoolJsonFormatValue['properties'] = propertiesValue3;
        
        if (backendAddressPoolsItem.backendIpConfigurations !== null && backendAddressPoolsItem.backendIpConfigurations !== undefined) {
          var backendIPConfigurationsArray = [];
          for (var loweredIndex12 = 0; loweredIndex12 < backendAddressPoolsItem.backendIpConfigurations.length; loweredIndex12 = loweredIndex12 + 1) {
            var backendIPConfigurationsItem = backendAddressPoolsItem.backendIpConfigurations[loweredIndex12];
            var resourceIdValue5 = {};
            backendIPConfigurationsArray.push(resourceIdValue5);
            
            if (backendIPConfigurationsItem.id !== null && backendIPConfigurationsItem.id !== undefined) {
              resourceIdValue5['id'] = backendIPConfigurationsItem.id;
            }
          }
          propertiesValue3['backendIPConfigurations'] = backendIPConfigurationsArray;
        }
        
        if (backendAddressPoolsItem.loadBalancingRules !== null && backendAddressPoolsItem.loadBalancingRules !== undefined) {
          var loadBalancingRulesArray2 = [];
          for (var loweredIndex13 = 0; loweredIndex13 < backendAddressPoolsItem.loadBalancingRules.length; loweredIndex13 = loweredIndex13 + 1) {
            var loadBalancingRulesItem2 = backendAddressPoolsItem.loadBalancingRules[loweredIndex13];
            var resourceIdValue6 = {};
            loadBalancingRulesArray2.push(resourceIdValue6);
            
            if (loadBalancingRulesItem2.id !== null && loadBalancingRulesItem2.id !== undefined) {
              resourceIdValue6['id'] = loadBalancingRulesItem2.id;
            }
          }
          propertiesValue3['loadBalancingRules'] = loadBalancingRulesArray2;
        }
        
        if (backendAddressPoolsItem.outboundNatRule !== null && backendAddressPoolsItem.outboundNatRule !== undefined) {
          var outboundNatRuleValue = {};
          propertiesValue3['outboundNatRule'] = outboundNatRuleValue;
          
          if (backendAddressPoolsItem.outboundNatRule.id !== null && backendAddressPoolsItem.outboundNatRule.id !== undefined) {
            outboundNatRuleValue['id'] = backendAddressPoolsItem.outboundNatRule.id;
          }
        }
        
        if (backendAddressPoolsItem.provisioningState !== null && backendAddressPoolsItem.provisioningState !== undefined) {
          propertiesValue3['provisioningState'] = backendAddressPoolsItem.provisioningState;
        }
        
        if (backendAddressPoolsItem.name !== null && backendAddressPoolsItem.name !== undefined) {
          backendAddressPoolJsonFormatValue['name'] = backendAddressPoolsItem.name;
        }
        
        if (backendAddressPoolsItem.etag !== null && backendAddressPoolsItem.etag !== undefined) {
          backendAddressPoolJsonFormatValue['etag'] = backendAddressPoolsItem.etag;
        }
        
        if (backendAddressPoolsItem.id !== null && backendAddressPoolsItem.id !== undefined) {
          backendAddressPoolJsonFormatValue['id'] = backendAddressPoolsItem.id;
        }
      }
      propertiesValue['backendAddressPools'] = backendAddressPoolsArray;
    }
    
    if (parameters.loadBalancingRules !== null && parameters.loadBalancingRules !== undefined) {
      var loadBalancingRulesArray3 = [];
      for (var loweredIndex14 = 0; loweredIndex14 < parameters.loadBalancingRules.length; loweredIndex14 = loweredIndex14 + 1) {
        var loadBalancingRulesItem3 = parameters.loadBalancingRules[loweredIndex14];
        var loadBalancingRuleJsonFormatValue = {};
        loadBalancingRulesArray3.push(loadBalancingRuleJsonFormatValue);
        
        var propertiesValue4 = {};
        loadBalancingRuleJsonFormatValue['properties'] = propertiesValue4;
        
        if (loadBalancingRulesItem3.frontendIPConfiguration !== null && loadBalancingRulesItem3.frontendIPConfiguration !== undefined) {
          var frontendIPConfigurationValue = {};
          propertiesValue4['frontendIPConfiguration'] = frontendIPConfigurationValue;
          
          if (loadBalancingRulesItem3.frontendIPConfiguration.id !== null && loadBalancingRulesItem3.frontendIPConfiguration.id !== undefined) {
            frontendIPConfigurationValue['id'] = loadBalancingRulesItem3.frontendIPConfiguration.id;
          }
        }
        
        var backendAddressPoolValue = {};
        propertiesValue4['backendAddressPool'] = backendAddressPoolValue;
        
        if (loadBalancingRulesItem3.backendAddressPool.id !== null && loadBalancingRulesItem3.backendAddressPool.id !== undefined) {
          backendAddressPoolValue['id'] = loadBalancingRulesItem3.backendAddressPool.id;
        }
        
        if (loadBalancingRulesItem3.probe !== null && loadBalancingRulesItem3.probe !== undefined) {
          var probeValue = {};
          propertiesValue4['probe'] = probeValue;
          
          if (loadBalancingRulesItem3.probe.id !== null && loadBalancingRulesItem3.probe.id !== undefined) {
            probeValue['id'] = loadBalancingRulesItem3.probe.id;
          }
        }
        
        propertiesValue4['protocol'] = loadBalancingRulesItem3.protocol;
        
        if (loadBalancingRulesItem3.loadDistribution !== null && loadBalancingRulesItem3.loadDistribution !== undefined) {
          propertiesValue4['loadDistribution'] = loadBalancingRulesItem3.loadDistribution;
        }
        
        propertiesValue4['frontendPort'] = loadBalancingRulesItem3.frontendPort;
        
        if (loadBalancingRulesItem3.backendPort !== null && loadBalancingRulesItem3.backendPort !== undefined) {
          propertiesValue4['backendPort'] = loadBalancingRulesItem3.backendPort;
        }
        
        if (loadBalancingRulesItem3.idleTimeoutInMinutes !== null && loadBalancingRulesItem3.idleTimeoutInMinutes !== undefined) {
          propertiesValue4['idleTimeoutInMinutes'] = loadBalancingRulesItem3.idleTimeoutInMinutes;
        }
        
        propertiesValue4['enableFloatingIP'] = loadBalancingRulesItem3.enableFloatingIP;
        
        if (loadBalancingRulesItem3.provisioningState !== null && loadBalancingRulesItem3.provisioningState !== undefined) {
          propertiesValue4['provisioningState'] = loadBalancingRulesItem3.provisioningState;
        }
        
        if (loadBalancingRulesItem3.name !== null && loadBalancingRulesItem3.name !== undefined) {
          loadBalancingRuleJsonFormatValue['name'] = loadBalancingRulesItem3.name;
        }
        
        if (loadBalancingRulesItem3.etag !== null && loadBalancingRulesItem3.etag !== undefined) {
          loadBalancingRuleJsonFormatValue['etag'] = loadBalancingRulesItem3.etag;
        }
        
        if (loadBalancingRulesItem3.id !== null && loadBalancingRulesItem3.id !== undefined) {
          loadBalancingRuleJsonFormatValue['id'] = loadBalancingRulesItem3.id;
        }
      }
      propertiesValue['loadBalancingRules'] = loadBalancingRulesArray3;
    }
    
    if (parameters.probes !== null && parameters.probes !== undefined) {
      var probesArray = [];
      for (var loweredIndex15 = 0; loweredIndex15 < parameters.probes.length; loweredIndex15 = loweredIndex15 + 1) {
        var probesItem = parameters.probes[loweredIndex15];
        var probeJsonFormatValue = {};
        probesArray.push(probeJsonFormatValue);
        
        var propertiesValue5 = {};
        probeJsonFormatValue['properties'] = propertiesValue5;
        
        if (probesItem.loadBalancingRules !== null && probesItem.loadBalancingRules !== undefined) {
          var loadBalancingRulesArray4 = [];
          for (var loweredIndex16 = 0; loweredIndex16 < probesItem.loadBalancingRules.length; loweredIndex16 = loweredIndex16 + 1) {
            var loadBalancingRulesItem4 = probesItem.loadBalancingRules[loweredIndex16];
            var resourceIdValue7 = {};
            loadBalancingRulesArray4.push(resourceIdValue7);
            
            if (loadBalancingRulesItem4.id !== null && loadBalancingRulesItem4.id !== undefined) {
              resourceIdValue7['id'] = loadBalancingRulesItem4.id;
            }
          }
          propertiesValue5['loadBalancingRules'] = loadBalancingRulesArray4;
        }
        
        propertiesValue5['protocol'] = probesItem.protocol;
        
        propertiesValue5['port'] = probesItem.port;
        
        if (probesItem.intervalInSeconds !== null && probesItem.intervalInSeconds !== undefined) {
          propertiesValue5['intervalInSeconds'] = probesItem.intervalInSeconds;
        }
        
        if (probesItem.numberOfProbes !== null && probesItem.numberOfProbes !== undefined) {
          propertiesValue5['numberOfProbes'] = probesItem.numberOfProbes;
        }
        
        if (probesItem.requestPath !== null && probesItem.requestPath !== undefined) {
          propertiesValue5['requestPath'] = probesItem.requestPath;
        }
        
        if (probesItem.provisioningState !== null && probesItem.provisioningState !== undefined) {
          propertiesValue5['provisioningState'] = probesItem.provisioningState;
        }
        
        if (probesItem.name !== null && probesItem.name !== undefined) {
          probeJsonFormatValue['name'] = probesItem.name;
        }
        
        if (probesItem.etag !== null && probesItem.etag !== undefined) {
          probeJsonFormatValue['etag'] = probesItem.etag;
        }
        
        if (probesItem.id !== null && probesItem.id !== undefined) {
          probeJsonFormatValue['id'] = probesItem.id;
        }
      }
      propertiesValue['probes'] = probesArray;
    }
    
    if (parameters.inboundNatRules !== null && parameters.inboundNatRules !== undefined) {
      var inboundNatRulesArray2 = [];
      for (var loweredIndex17 = 0; loweredIndex17 < parameters.inboundNatRules.length; loweredIndex17 = loweredIndex17 + 1) {
        var inboundNatRulesItem2 = parameters.inboundNatRules[loweredIndex17];
        var inboundNatRuleJsonFormatValue = {};
        inboundNatRulesArray2.push(inboundNatRuleJsonFormatValue);
        
        var propertiesValue6 = {};
        inboundNatRuleJsonFormatValue['properties'] = propertiesValue6;
        
        if (inboundNatRulesItem2.frontendIPConfiguration !== null && inboundNatRulesItem2.frontendIPConfiguration !== undefined) {
          var frontendIPConfigurationValue2 = {};
          propertiesValue6['frontendIPConfiguration'] = frontendIPConfigurationValue2;
          
          if (inboundNatRulesItem2.frontendIPConfiguration.id !== null && inboundNatRulesItem2.frontendIPConfiguration.id !== undefined) {
            frontendIPConfigurationValue2['id'] = inboundNatRulesItem2.frontendIPConfiguration.id;
          }
        }
        
        if (inboundNatRulesItem2.backendIPConfiguration !== null && inboundNatRulesItem2.backendIPConfiguration !== undefined) {
          var backendIPConfigurationValue = {};
          propertiesValue6['backendIPConfiguration'] = backendIPConfigurationValue;
          
          if (inboundNatRulesItem2.backendIPConfiguration.id !== null && inboundNatRulesItem2.backendIPConfiguration.id !== undefined) {
            backendIPConfigurationValue['id'] = inboundNatRulesItem2.backendIPConfiguration.id;
          }
        }
        
        propertiesValue6['protocol'] = inboundNatRulesItem2.protocol;
        
        propertiesValue6['frontendPort'] = inboundNatRulesItem2.frontendPort;
        
        if (inboundNatRulesItem2.backendPort !== null && inboundNatRulesItem2.backendPort !== undefined) {
          propertiesValue6['backendPort'] = inboundNatRulesItem2.backendPort;
        }
        
        if (inboundNatRulesItem2.idleTimeoutInMinutes !== null && inboundNatRulesItem2.idleTimeoutInMinutes !== undefined) {
          propertiesValue6['idleTimeoutInMinutes'] = inboundNatRulesItem2.idleTimeoutInMinutes;
        }
        
        propertiesValue6['enableFloatingIP'] = inboundNatRulesItem2.enableFloatingIP;
        
        if (inboundNatRulesItem2.provisioningState !== null && inboundNatRulesItem2.provisioningState !== undefined) {
          propertiesValue6['provisioningState'] = inboundNatRulesItem2.provisioningState;
        }
        
        if (inboundNatRulesItem2.name !== null && inboundNatRulesItem2.name !== undefined) {
          inboundNatRuleJsonFormatValue['name'] = inboundNatRulesItem2.name;
        }
        
        if (inboundNatRulesItem2.etag !== null && inboundNatRulesItem2.etag !== undefined) {
          inboundNatRuleJsonFormatValue['etag'] = inboundNatRulesItem2.etag;
        }
        
        if (inboundNatRulesItem2.id !== null && inboundNatRulesItem2.id !== undefined) {
          inboundNatRuleJsonFormatValue['id'] = inboundNatRulesItem2.id;
        }
      }
      propertiesValue['inboundNatRules'] = inboundNatRulesArray2;
    }
    
    if (parameters.inboundNatPools !== null && parameters.inboundNatPools !== undefined) {
      var inboundNatPoolsArray2 = [];
      for (var loweredIndex18 = 0; loweredIndex18 < parameters.inboundNatPools.length; loweredIndex18 = loweredIndex18 + 1) {
        var inboundNatPoolsItem2 = parameters.inboundNatPools[loweredIndex18];
        var inboundNatPoolJsonFormatValue = {};
        inboundNatPoolsArray2.push(inboundNatPoolJsonFormatValue);
        
        var propertiesValue7 = {};
        inboundNatPoolJsonFormatValue['properties'] = propertiesValue7;
        
        if (inboundNatPoolsItem2.frontendIPConfiguration !== null && inboundNatPoolsItem2.frontendIPConfiguration !== undefined) {
          var frontendIPConfigurationValue3 = {};
          propertiesValue7['frontendIPConfiguration'] = frontendIPConfigurationValue3;
          
          if (inboundNatPoolsItem2.frontendIPConfiguration.id !== null && inboundNatPoolsItem2.frontendIPConfiguration.id !== undefined) {
            frontendIPConfigurationValue3['id'] = inboundNatPoolsItem2.frontendIPConfiguration.id;
          }
        }
        
        propertiesValue7['protocol'] = inboundNatPoolsItem2.protocol;
        
        propertiesValue7['frontendPortRangeStart'] = inboundNatPoolsItem2.frontendPortRangeStart;
        
        propertiesValue7['frontendPortRangeEnd'] = inboundNatPoolsItem2.frontendPortRangeEnd;
        
        propertiesValue7['backendPort'] = inboundNatPoolsItem2.backendPort;
        
        if (inboundNatPoolsItem2.provisioningState !== null && inboundNatPoolsItem2.provisioningState !== undefined) {
          propertiesValue7['provisioningState'] = inboundNatPoolsItem2.provisioningState;
        }
        
        if (inboundNatPoolsItem2.name !== null && inboundNatPoolsItem2.name !== undefined) {
          inboundNatPoolJsonFormatValue['name'] = inboundNatPoolsItem2.name;
        }
        
        if (inboundNatPoolsItem2.etag !== null && inboundNatPoolsItem2.etag !== undefined) {
          inboundNatPoolJsonFormatValue['etag'] = inboundNatPoolsItem2.etag;
        }
        
        if (inboundNatPoolsItem2.id !== null && inboundNatPoolsItem2.id !== undefined) {
          inboundNatPoolJsonFormatValue['id'] = inboundNatPoolsItem2.id;
        }
      }
      propertiesValue['inboundNatPools'] = inboundNatPoolsArray2;
    }
    
    if (parameters.outboundNatRules !== null && parameters.outboundNatRules !== undefined) {
      var outboundNatRulesArray2 = [];
      for (var loweredIndex19 = 0; loweredIndex19 < parameters.outboundNatRules.length; loweredIndex19 = loweredIndex19 + 1) {
        var outboundNatRulesItem2 = parameters.outboundNatRules[loweredIndex19];
        var outboundNatRuleJsonFormatValue = {};
        outboundNatRulesArray2.push(outboundNatRuleJsonFormatValue);
        
        var propertiesValue8 = {};
        outboundNatRuleJsonFormatValue['properties'] = propertiesValue8;
        
        propertiesValue8['allocatedOutboundPorts'] = outboundNatRulesItem2.allocatedOutboundPorts;
        
        if (outboundNatRulesItem2.frontendIpConfigurations !== null && outboundNatRulesItem2.frontendIpConfigurations !== undefined) {
          var frontendIPConfigurationsArray2 = [];
          for (var loweredIndex20 = 0; loweredIndex20 < outboundNatRulesItem2.frontendIpConfigurations.length; loweredIndex20 = loweredIndex20 + 1) {
            var frontendIPConfigurationsItem2 = outboundNatRulesItem2.frontendIpConfigurations[loweredIndex20];
            var resourceIdValue8 = {};
            frontendIPConfigurationsArray2.push(resourceIdValue8);
            
            if (frontendIPConfigurationsItem2.id !== null && frontendIPConfigurationsItem2.id !== undefined) {
              resourceIdValue8['id'] = frontendIPConfigurationsItem2.id;
            }
          }
          propertiesValue8['frontendIPConfigurations'] = frontendIPConfigurationsArray2;
        }
        
        var backendAddressPoolValue2 = {};
        propertiesValue8['backendAddressPool'] = backendAddressPoolValue2;
        
        if (outboundNatRulesItem2.backendAddressPool.id !== null && outboundNatRulesItem2.backendAddressPool.id !== undefined) {
          backendAddressPoolValue2['id'] = outboundNatRulesItem2.backendAddressPool.id;
        }
        
        if (outboundNatRulesItem2.provisioningState !== null && outboundNatRulesItem2.provisioningState !== undefined) {
          propertiesValue8['provisioningState'] = outboundNatRulesItem2.provisioningState;
        }
        
        if (outboundNatRulesItem2.name !== null && outboundNatRulesItem2.name !== undefined) {
          outboundNatRuleJsonFormatValue['name'] = outboundNatRulesItem2.name;
        }
        
        if (outboundNatRulesItem2.etag !== null && outboundNatRulesItem2.etag !== undefined) {
          outboundNatRuleJsonFormatValue['etag'] = outboundNatRulesItem2.etag;
        }
        
        if (outboundNatRulesItem2.id !== null && outboundNatRulesItem2.id !== undefined) {
          outboundNatRuleJsonFormatValue['id'] = outboundNatRulesItem2.id;
        }
      }
      propertiesValue['outboundNatRules'] = outboundNatRulesArray2;
    }
    
    if (parameters.resourceGuid !== null && parameters.resourceGuid !== undefined) {
      propertiesValue['resourceGuid'] = parameters.resourceGuid;
    }
    
    if (parameters.provisioningState !== null && parameters.provisioningState !== undefined) {
      propertiesValue['provisioningState'] = parameters.provisioningState;
    }
    
    if (parameters.etag !== null && parameters.etag !== undefined) {
      loadBalancerJsonFormatValue['etag'] = parameters.etag;
    }
    
    if (parameters.id !== null && parameters.id !== undefined) {
      loadBalancerJsonFormatValue['id'] = parameters.id;
    }
    
    if (parameters.name !== null && parameters.name !== undefined) {
      loadBalancerJsonFormatValue['name'] = parameters.name;
    }
    
    if (parameters.type !== null && parameters.type !== undefined) {
      loadBalancerJsonFormatValue['type'] = parameters.type;
    }
    
    if (parameters.location !== null && parameters.location !== undefined) {
      loadBalancerJsonFormatValue['location'] = parameters.location;
    }
    
    if (parameters.tags !== null && parameters.tags !== undefined) {
      var tagsDictionary = {};
      for (var tagsKey in parameters.tags) {
        var tagsValue = parameters.tags[tagsKey];
        tagsDictionary[tagsKey] = tagsValue;
      }
      loadBalancerJsonFormatValue['tags'] = tagsDictionary;
    }
    
    requestContent = JSON.stringify(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200 && statusCode !== 201) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200 || statusCode === 201) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var loadBalancerInstance = { backendAddressPools: [], frontendIpConfigurations: [], inboundNatPools: [], inboundNatRules: [], loadBalancingRules: [], outboundNatRules: [], probes: [], tags: {} };
          result.loadBalancer = loadBalancerInstance;
          
          var propertiesValue9 = responseDoc['properties'];
          if (propertiesValue9 !== null && propertiesValue9 !== undefined) {
            var frontendIPConfigurationsArray3 = propertiesValue9['frontendIPConfigurations'];
            if (frontendIPConfigurationsArray3 !== null && frontendIPConfigurationsArray3 !== undefined) {
              for (var loweredIndex21 = 0; loweredIndex21 < frontendIPConfigurationsArray3.length; loweredIndex21 = loweredIndex21 + 1) {
                var frontendIPConfigurationsValue = frontendIPConfigurationsArray3[loweredIndex21];
                var frontendIpConfigurationJsonFormatInstance = { inboundNatPools: [], inboundNatRules: [], loadBalancingRules: [], outboundNatRules: [] };
                loadBalancerInstance.frontendIpConfigurations.push(frontendIpConfigurationJsonFormatInstance);
                
                var propertiesValue10 = frontendIPConfigurationsValue['properties'];
                if (propertiesValue10 !== null && propertiesValue10 !== undefined) {
                  var privateIPAddressValue = propertiesValue10['privateIPAddress'];
                  if (privateIPAddressValue !== null && privateIPAddressValue !== undefined) {
                    var privateIPAddressInstance = privateIPAddressValue;
                    frontendIpConfigurationJsonFormatInstance.privateIpAddress = privateIPAddressInstance;
                  }
                  
                  var privateIPAllocationMethodValue = propertiesValue10['privateIPAllocationMethod'];
                  if (privateIPAllocationMethodValue !== null && privateIPAllocationMethodValue !== undefined) {
                    var privateIPAllocationMethodInstance = privateIPAllocationMethodValue;
                    frontendIpConfigurationJsonFormatInstance.privateIpAllocationMethod = privateIPAllocationMethodInstance;
                  }
                  
                  var subnetValue2 = propertiesValue10['subnet'];
                  if (subnetValue2 !== null && subnetValue2 !== undefined) {
                    var subnetInstance = {};
                    frontendIpConfigurationJsonFormatInstance.subnet = subnetInstance;
                    
                    var idValue = subnetValue2['id'];
                    if (idValue !== null && idValue !== undefined) {
                      var idInstance = idValue;
                      subnetInstance.id = idInstance;
                    }
                  }
                  
                  var publicIPAddressValue2 = propertiesValue10['publicIPAddress'];
                  if (publicIPAddressValue2 !== null && publicIPAddressValue2 !== undefined) {
                    var publicIPAddressInstance = {};
                    frontendIpConfigurationJsonFormatInstance.publicIpAddress = publicIPAddressInstance;
                    
                    var idValue2 = publicIPAddressValue2['id'];
                    if (idValue2 !== null && idValue2 !== undefined) {
                      var idInstance2 = idValue2;
                      publicIPAddressInstance.id = idInstance2;
                    }
                  }
                  
                  var inboundNatRulesArray3 = propertiesValue10['inboundNatRules'];
                  if (inboundNatRulesArray3 !== null && inboundNatRulesArray3 !== undefined) {
                    for (var loweredIndex22 = 0; loweredIndex22 < inboundNatRulesArray3.length; loweredIndex22 = loweredIndex22 + 1) {
                      var inboundNatRulesValue = inboundNatRulesArray3[loweredIndex22];
                      var resourceIdInstance = {};
                      frontendIpConfigurationJsonFormatInstance.inboundNatRules.push(resourceIdInstance);
                      
                      var idValue3 = inboundNatRulesValue['id'];
                      if (idValue3 !== null && idValue3 !== undefined) {
                        var idInstance3 = idValue3;
                        resourceIdInstance.id = idInstance3;
                      }
                    }
                  }
                  
                  var inboundNatPoolsArray3 = propertiesValue10['inboundNatPools'];
                  if (inboundNatPoolsArray3 !== null && inboundNatPoolsArray3 !== undefined) {
                    for (var loweredIndex23 = 0; loweredIndex23 < inboundNatPoolsArray3.length; loweredIndex23 = loweredIndex23 + 1) {
                      var inboundNatPoolsValue = inboundNatPoolsArray3[loweredIndex23];
                      var resourceIdInstance2 = {};
                      frontendIpConfigurationJsonFormatInstance.inboundNatPools.push(resourceIdInstance2);
                      
                      var idValue4 = inboundNatPoolsValue['id'];
                      if (idValue4 !== null && idValue4 !== undefined) {
                        var idInstance4 = idValue4;
                        resourceIdInstance2.id = idInstance4;
                      }
                    }
                  }
                  
                  var outboundNatRulesArray3 = propertiesValue10['outboundNatRules'];
                  if (outboundNatRulesArray3 !== null && outboundNatRulesArray3 !== undefined) {
                    for (var loweredIndex24 = 0; loweredIndex24 < outboundNatRulesArray3.length; loweredIndex24 = loweredIndex24 + 1) {
                      var outboundNatRulesValue = outboundNatRulesArray3[loweredIndex24];
                      var resourceIdInstance3 = {};
                      frontendIpConfigurationJsonFormatInstance.outboundNatRules.push(resourceIdInstance3);
                      
                      var idValue5 = outboundNatRulesValue['id'];
                      if (idValue5 !== null && idValue5 !== undefined) {
                        var idInstance5 = idValue5;
                        resourceIdInstance3.id = idInstance5;
                      }
                    }
                  }
                  
                  var loadBalancingRulesArray5 = propertiesValue10['loadBalancingRules'];
                  if (loadBalancingRulesArray5 !== null && loadBalancingRulesArray5 !== undefined) {
                    for (var loweredIndex25 = 0; loweredIndex25 < loadBalancingRulesArray5.length; loweredIndex25 = loweredIndex25 + 1) {
                      var loadBalancingRulesValue = loadBalancingRulesArray5[loweredIndex25];
                      var resourceIdInstance4 = {};
                      frontendIpConfigurationJsonFormatInstance.loadBalancingRules.push(resourceIdInstance4);
                      
                      var idValue6 = loadBalancingRulesValue['id'];
                      if (idValue6 !== null && idValue6 !== undefined) {
                        var idInstance6 = idValue6;
                        resourceIdInstance4.id = idInstance6;
                      }
                    }
                  }
                  
                  var provisioningStateValue = propertiesValue10['provisioningState'];
                  if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
                    var provisioningStateInstance = provisioningStateValue;
                    frontendIpConfigurationJsonFormatInstance.provisioningState = provisioningStateInstance;
                  }
                }
                
                var nameValue = frontendIPConfigurationsValue['name'];
                if (nameValue !== null && nameValue !== undefined) {
                  var nameInstance = nameValue;
                  frontendIpConfigurationJsonFormatInstance.name = nameInstance;
                }
                
                var etagValue = frontendIPConfigurationsValue['etag'];
                if (etagValue !== null && etagValue !== undefined) {
                  var etagInstance = etagValue;
                  frontendIpConfigurationJsonFormatInstance.etag = etagInstance;
                }
                
                var idValue7 = frontendIPConfigurationsValue['id'];
                if (idValue7 !== null && idValue7 !== undefined) {
                  var idInstance7 = idValue7;
                  frontendIpConfigurationJsonFormatInstance.id = idInstance7;
                }
              }
            }
            
            var backendAddressPoolsArray2 = propertiesValue9['backendAddressPools'];
            if (backendAddressPoolsArray2 !== null && backendAddressPoolsArray2 !== undefined) {
              for (var loweredIndex26 = 0; loweredIndex26 < backendAddressPoolsArray2.length; loweredIndex26 = loweredIndex26 + 1) {
                var backendAddressPoolsValue = backendAddressPoolsArray2[loweredIndex26];
                var backendAddressPoolJsonFormatInstance = { backendIpConfigurations: [], loadBalancingRules: [] };
                loadBalancerInstance.backendAddressPools.push(backendAddressPoolJsonFormatInstance);
                
                var propertiesValue11 = backendAddressPoolsValue['properties'];
                if (propertiesValue11 !== null && propertiesValue11 !== undefined) {
                  var backendIPConfigurationsArray2 = propertiesValue11['backendIPConfigurations'];
                  if (backendIPConfigurationsArray2 !== null && backendIPConfigurationsArray2 !== undefined) {
                    for (var loweredIndex27 = 0; loweredIndex27 < backendIPConfigurationsArray2.length; loweredIndex27 = loweredIndex27 + 1) {
                      var backendIPConfigurationsValue = backendIPConfigurationsArray2[loweredIndex27];
                      var resourceIdInstance5 = {};
                      backendAddressPoolJsonFormatInstance.backendIpConfigurations.push(resourceIdInstance5);
                      
                      var idValue8 = backendIPConfigurationsValue['id'];
                      if (idValue8 !== null && idValue8 !== undefined) {
                        var idInstance8 = idValue8;
                        resourceIdInstance5.id = idInstance8;
                      }
                    }
                  }
                  
                  var loadBalancingRulesArray6 = propertiesValue11['loadBalancingRules'];
                  if (loadBalancingRulesArray6 !== null && loadBalancingRulesArray6 !== undefined) {
                    for (var loweredIndex28 = 0; loweredIndex28 < loadBalancingRulesArray6.length; loweredIndex28 = loweredIndex28 + 1) {
                      var loadBalancingRulesValue2 = loadBalancingRulesArray6[loweredIndex28];
                      var resourceIdInstance6 = {};
                      backendAddressPoolJsonFormatInstance.loadBalancingRules.push(resourceIdInstance6);
                      
                      var idValue9 = loadBalancingRulesValue2['id'];
                      if (idValue9 !== null && idValue9 !== undefined) {
                        var idInstance9 = idValue9;
                        resourceIdInstance6.id = idInstance9;
                      }
                    }
                  }
                  
                  var outboundNatRuleValue2 = propertiesValue11['outboundNatRule'];
                  if (outboundNatRuleValue2 !== null && outboundNatRuleValue2 !== undefined) {
                    var outboundNatRuleInstance = {};
                    backendAddressPoolJsonFormatInstance.outboundNatRule = outboundNatRuleInstance;
                    
                    var idValue10 = outboundNatRuleValue2['id'];
                    if (idValue10 !== null && idValue10 !== undefined) {
                      var idInstance10 = idValue10;
                      outboundNatRuleInstance.id = idInstance10;
                    }
                  }
                  
                  var provisioningStateValue2 = propertiesValue11['provisioningState'];
                  if (provisioningStateValue2 !== null && provisioningStateValue2 !== undefined) {
                    var provisioningStateInstance2 = provisioningStateValue2;
                    backendAddressPoolJsonFormatInstance.provisioningState = provisioningStateInstance2;
                  }
                }
                
                var nameValue2 = backendAddressPoolsValue['name'];
                if (nameValue2 !== null && nameValue2 !== undefined) {
                  var nameInstance2 = nameValue2;
                  backendAddressPoolJsonFormatInstance.name = nameInstance2;
                }
                
                var etagValue2 = backendAddressPoolsValue['etag'];
                if (etagValue2 !== null && etagValue2 !== undefined) {
                  var etagInstance2 = etagValue2;
                  backendAddressPoolJsonFormatInstance.etag = etagInstance2;
                }
                
                var idValue11 = backendAddressPoolsValue['id'];
                if (idValue11 !== null && idValue11 !== undefined) {
                  var idInstance11 = idValue11;
                  backendAddressPoolJsonFormatInstance.id = idInstance11;
                }
              }
            }
            
            var loadBalancingRulesArray7 = propertiesValue9['loadBalancingRules'];
            if (loadBalancingRulesArray7 !== null && loadBalancingRulesArray7 !== undefined) {
              for (var loweredIndex29 = 0; loweredIndex29 < loadBalancingRulesArray7.length; loweredIndex29 = loweredIndex29 + 1) {
                var loadBalancingRulesValue3 = loadBalancingRulesArray7[loweredIndex29];
                var loadBalancingRuleJsonFormatInstance = {};
                loadBalancerInstance.loadBalancingRules.push(loadBalancingRuleJsonFormatInstance);
                
                var propertiesValue12 = loadBalancingRulesValue3['properties'];
                if (propertiesValue12 !== null && propertiesValue12 !== undefined) {
                  var frontendIPConfigurationValue4 = propertiesValue12['frontendIPConfiguration'];
                  if (frontendIPConfigurationValue4 !== null && frontendIPConfigurationValue4 !== undefined) {
                    var frontendIPConfigurationInstance = {};
                    loadBalancingRuleJsonFormatInstance.frontendIPConfiguration = frontendIPConfigurationInstance;
                    
                    var idValue12 = frontendIPConfigurationValue4['id'];
                    if (idValue12 !== null && idValue12 !== undefined) {
                      var idInstance12 = idValue12;
                      frontendIPConfigurationInstance.id = idInstance12;
                    }
                  }
                  
                  var backendAddressPoolValue3 = propertiesValue12['backendAddressPool'];
                  if (backendAddressPoolValue3 !== null && backendAddressPoolValue3 !== undefined) {
                    var backendAddressPoolInstance = {};
                    loadBalancingRuleJsonFormatInstance.backendAddressPool = backendAddressPoolInstance;
                    
                    var idValue13 = backendAddressPoolValue3['id'];
                    if (idValue13 !== null && idValue13 !== undefined) {
                      var idInstance13 = idValue13;
                      backendAddressPoolInstance.id = idInstance13;
                    }
                  }
                  
                  var probeValue2 = propertiesValue12['probe'];
                  if (probeValue2 !== null && probeValue2 !== undefined) {
                    var probeInstance = {};
                    loadBalancingRuleJsonFormatInstance.probe = probeInstance;
                    
                    var idValue14 = probeValue2['id'];
                    if (idValue14 !== null && idValue14 !== undefined) {
                      var idInstance14 = idValue14;
                      probeInstance.id = idInstance14;
                    }
                  }
                  
                  var protocolValue = propertiesValue12['protocol'];
                  if (protocolValue !== null && protocolValue !== undefined) {
                    var protocolInstance = protocolValue;
                    loadBalancingRuleJsonFormatInstance.protocol = protocolInstance;
                  }
                  
                  var loadDistributionValue = propertiesValue12['loadDistribution'];
                  if (loadDistributionValue !== null && loadDistributionValue !== undefined) {
                    var loadDistributionInstance = loadDistributionValue;
                    loadBalancingRuleJsonFormatInstance.loadDistribution = loadDistributionInstance;
                  }
                  
                  var frontendPortValue = propertiesValue12['frontendPort'];
                  if (frontendPortValue !== null && frontendPortValue !== undefined) {
                    var frontendPortInstance = frontendPortValue;
                    loadBalancingRuleJsonFormatInstance.frontendPort = frontendPortInstance;
                  }
                  
                  var backendPortValue = propertiesValue12['backendPort'];
                  if (backendPortValue !== null && backendPortValue !== undefined) {
                    var backendPortInstance = backendPortValue;
                    loadBalancingRuleJsonFormatInstance.backendPort = backendPortInstance;
                  }
                  
                  var idleTimeoutInMinutesValue = propertiesValue12['idleTimeoutInMinutes'];
                  if (idleTimeoutInMinutesValue !== null && idleTimeoutInMinutesValue !== undefined) {
                    var idleTimeoutInMinutesInstance = idleTimeoutInMinutesValue;
                    loadBalancingRuleJsonFormatInstance.idleTimeoutInMinutes = idleTimeoutInMinutesInstance;
                  }
                  
                  var enableFloatingIPValue = propertiesValue12['enableFloatingIP'];
                  if (enableFloatingIPValue !== null && enableFloatingIPValue !== undefined) {
                    var enableFloatingIPInstance = enableFloatingIPValue;
                    loadBalancingRuleJsonFormatInstance.enableFloatingIP = enableFloatingIPInstance;
                  }
                  
                  var provisioningStateValue3 = propertiesValue12['provisioningState'];
                  if (provisioningStateValue3 !== null && provisioningStateValue3 !== undefined) {
                    var provisioningStateInstance3 = provisioningStateValue3;
                    loadBalancingRuleJsonFormatInstance.provisioningState = provisioningStateInstance3;
                  }
                }
                
                var nameValue3 = loadBalancingRulesValue3['name'];
                if (nameValue3 !== null && nameValue3 !== undefined) {
                  var nameInstance3 = nameValue3;
                  loadBalancingRuleJsonFormatInstance.name = nameInstance3;
                }
                
                var etagValue3 = loadBalancingRulesValue3['etag'];
                if (etagValue3 !== null && etagValue3 !== undefined) {
                  var etagInstance3 = etagValue3;
                  loadBalancingRuleJsonFormatInstance.etag = etagInstance3;
                }
                
                var idValue15 = loadBalancingRulesValue3['id'];
                if (idValue15 !== null && idValue15 !== undefined) {
                  var idInstance15 = idValue15;
                  loadBalancingRuleJsonFormatInstance.id = idInstance15;
                }
              }
            }
            
            var probesArray2 = propertiesValue9['probes'];
            if (probesArray2 !== null && probesArray2 !== undefined) {
              for (var loweredIndex30 = 0; loweredIndex30 < probesArray2.length; loweredIndex30 = loweredIndex30 + 1) {
                var probesValue = probesArray2[loweredIndex30];
                var probeJsonFormatInstance = { loadBalancingRules: [] };
                loadBalancerInstance.probes.push(probeJsonFormatInstance);
                
                var propertiesValue13 = probesValue['properties'];
                if (propertiesValue13 !== null && propertiesValue13 !== undefined) {
                  var loadBalancingRulesArray8 = propertiesValue13['loadBalancingRules'];
                  if (loadBalancingRulesArray8 !== null && loadBalancingRulesArray8 !== undefined) {
                    for (var loweredIndex31 = 0; loweredIndex31 < loadBalancingRulesArray8.length; loweredIndex31 = loweredIndex31 + 1) {
                      var loadBalancingRulesValue4 = loadBalancingRulesArray8[loweredIndex31];
                      var resourceIdInstance7 = {};
                      probeJsonFormatInstance.loadBalancingRules.push(resourceIdInstance7);
                      
                      var idValue16 = loadBalancingRulesValue4['id'];
                      if (idValue16 !== null && idValue16 !== undefined) {
                        var idInstance16 = idValue16;
                        resourceIdInstance7.id = idInstance16;
                      }
                    }
                  }
                  
                  var protocolValue2 = propertiesValue13['protocol'];
                  if (protocolValue2 !== null && protocolValue2 !== undefined) {
                    var protocolInstance2 = protocolValue2;
                    probeJsonFormatInstance.protocol = protocolInstance2;
                  }
                  
                  var portValue = propertiesValue13['port'];
                  if (portValue !== null && portValue !== undefined) {
                    var portInstance = portValue;
                    probeJsonFormatInstance.port = portInstance;
                  }
                  
                  var intervalInSecondsValue = propertiesValue13['intervalInSeconds'];
                  if (intervalInSecondsValue !== null && intervalInSecondsValue !== undefined) {
                    var intervalInSecondsInstance = intervalInSecondsValue;
                    probeJsonFormatInstance.intervalInSeconds = intervalInSecondsInstance;
                  }
                  
                  var numberOfProbesValue = propertiesValue13['numberOfProbes'];
                  if (numberOfProbesValue !== null && numberOfProbesValue !== undefined) {
                    var numberOfProbesInstance = numberOfProbesValue;
                    probeJsonFormatInstance.numberOfProbes = numberOfProbesInstance;
                  }
                  
                  var requestPathValue = propertiesValue13['requestPath'];
                  if (requestPathValue !== null && requestPathValue !== undefined) {
                    var requestPathInstance = requestPathValue;
                    probeJsonFormatInstance.requestPath = requestPathInstance;
                  }
                  
                  var provisioningStateValue4 = propertiesValue13['provisioningState'];
                  if (provisioningStateValue4 !== null && provisioningStateValue4 !== undefined) {
                    var provisioningStateInstance4 = provisioningStateValue4;
                    probeJsonFormatInstance.provisioningState = provisioningStateInstance4;
                  }
                }
                
                var nameValue4 = probesValue['name'];
                if (nameValue4 !== null && nameValue4 !== undefined) {
                  var nameInstance4 = nameValue4;
                  probeJsonFormatInstance.name = nameInstance4;
                }
                
                var etagValue4 = probesValue['etag'];
                if (etagValue4 !== null && etagValue4 !== undefined) {
                  var etagInstance4 = etagValue4;
                  probeJsonFormatInstance.etag = etagInstance4;
                }
                
                var idValue17 = probesValue['id'];
                if (idValue17 !== null && idValue17 !== undefined) {
                  var idInstance17 = idValue17;
                  probeJsonFormatInstance.id = idInstance17;
                }
              }
            }
            
            var inboundNatRulesArray4 = propertiesValue9['inboundNatRules'];
            if (inboundNatRulesArray4 !== null && inboundNatRulesArray4 !== undefined) {
              for (var loweredIndex32 = 0; loweredIndex32 < inboundNatRulesArray4.length; loweredIndex32 = loweredIndex32 + 1) {
                var inboundNatRulesValue2 = inboundNatRulesArray4[loweredIndex32];
                var inboundNatRuleJsonFormatInstance = {};
                loadBalancerInstance.inboundNatRules.push(inboundNatRuleJsonFormatInstance);
                
                var propertiesValue14 = inboundNatRulesValue2['properties'];
                if (propertiesValue14 !== null && propertiesValue14 !== undefined) {
                  var frontendIPConfigurationValue5 = propertiesValue14['frontendIPConfiguration'];
                  if (frontendIPConfigurationValue5 !== null && frontendIPConfigurationValue5 !== undefined) {
                    var frontendIPConfigurationInstance2 = {};
                    inboundNatRuleJsonFormatInstance.frontendIPConfiguration = frontendIPConfigurationInstance2;
                    
                    var idValue18 = frontendIPConfigurationValue5['id'];
                    if (idValue18 !== null && idValue18 !== undefined) {
                      var idInstance18 = idValue18;
                      frontendIPConfigurationInstance2.id = idInstance18;
                    }
                  }
                  
                  var backendIPConfigurationValue2 = propertiesValue14['backendIPConfiguration'];
                  if (backendIPConfigurationValue2 !== null && backendIPConfigurationValue2 !== undefined) {
                    var backendIPConfigurationInstance = {};
                    inboundNatRuleJsonFormatInstance.backendIPConfiguration = backendIPConfigurationInstance;
                    
                    var idValue19 = backendIPConfigurationValue2['id'];
                    if (idValue19 !== null && idValue19 !== undefined) {
                      var idInstance19 = idValue19;
                      backendIPConfigurationInstance.id = idInstance19;
                    }
                  }
                  
                  var protocolValue3 = propertiesValue14['protocol'];
                  if (protocolValue3 !== null && protocolValue3 !== undefined) {
                    var protocolInstance3 = protocolValue3;
                    inboundNatRuleJsonFormatInstance.protocol = protocolInstance3;
                  }
                  
                  var frontendPortValue2 = propertiesValue14['frontendPort'];
                  if (frontendPortValue2 !== null && frontendPortValue2 !== undefined) {
                    var frontendPortInstance2 = frontendPortValue2;
                    inboundNatRuleJsonFormatInstance.frontendPort = frontendPortInstance2;
                  }
                  
                  var backendPortValue2 = propertiesValue14['backendPort'];
                  if (backendPortValue2 !== null && backendPortValue2 !== undefined) {
                    var backendPortInstance2 = backendPortValue2;
                    inboundNatRuleJsonFormatInstance.backendPort = backendPortInstance2;
                  }
                  
                  var idleTimeoutInMinutesValue2 = propertiesValue14['idleTimeoutInMinutes'];
                  if (idleTimeoutInMinutesValue2 !== null && idleTimeoutInMinutesValue2 !== undefined) {
                    var idleTimeoutInMinutesInstance2 = idleTimeoutInMinutesValue2;
                    inboundNatRuleJsonFormatInstance.idleTimeoutInMinutes = idleTimeoutInMinutesInstance2;
                  }
                  
                  var enableFloatingIPValue2 = propertiesValue14['enableFloatingIP'];
                  if (enableFloatingIPValue2 !== null && enableFloatingIPValue2 !== undefined) {
                    var enableFloatingIPInstance2 = enableFloatingIPValue2;
                    inboundNatRuleJsonFormatInstance.enableFloatingIP = enableFloatingIPInstance2;
                  }
                  
                  var provisioningStateValue5 = propertiesValue14['provisioningState'];
                  if (provisioningStateValue5 !== null && provisioningStateValue5 !== undefined) {
                    var provisioningStateInstance5 = provisioningStateValue5;
                    inboundNatRuleJsonFormatInstance.provisioningState = provisioningStateInstance5;
                  }
                }
                
                var nameValue5 = inboundNatRulesValue2['name'];
                if (nameValue5 !== null && nameValue5 !== undefined) {
                  var nameInstance5 = nameValue5;
                  inboundNatRuleJsonFormatInstance.name = nameInstance5;
                }
                
                var etagValue5 = inboundNatRulesValue2['etag'];
                if (etagValue5 !== null && etagValue5 !== undefined) {
                  var etagInstance5 = etagValue5;
                  inboundNatRuleJsonFormatInstance.etag = etagInstance5;
                }
                
                var idValue20 = inboundNatRulesValue2['id'];
                if (idValue20 !== null && idValue20 !== undefined) {
                  var idInstance20 = idValue20;
                  inboundNatRuleJsonFormatInstance.id = idInstance20;
                }
              }
            }
            
            var inboundNatPoolsArray4 = propertiesValue9['inboundNatPools'];
            if (inboundNatPoolsArray4 !== null && inboundNatPoolsArray4 !== undefined) {
              for (var loweredIndex33 = 0; loweredIndex33 < inboundNatPoolsArray4.length; loweredIndex33 = loweredIndex33 + 1) {
                var inboundNatPoolsValue2 = inboundNatPoolsArray4[loweredIndex33];
                var inboundNatPoolJsonFormatInstance = {};
                loadBalancerInstance.inboundNatPools.push(inboundNatPoolJsonFormatInstance);
                
                var propertiesValue15 = inboundNatPoolsValue2['properties'];
                if (propertiesValue15 !== null && propertiesValue15 !== undefined) {
                  var frontendIPConfigurationValue6 = propertiesValue15['frontendIPConfiguration'];
                  if (frontendIPConfigurationValue6 !== null && frontendIPConfigurationValue6 !== undefined) {
                    var frontendIPConfigurationInstance3 = {};
                    inboundNatPoolJsonFormatInstance.frontendIPConfiguration = frontendIPConfigurationInstance3;
                    
                    var idValue21 = frontendIPConfigurationValue6['id'];
                    if (idValue21 !== null && idValue21 !== undefined) {
                      var idInstance21 = idValue21;
                      frontendIPConfigurationInstance3.id = idInstance21;
                    }
                  }
                  
                  var protocolValue4 = propertiesValue15['protocol'];
                  if (protocolValue4 !== null && protocolValue4 !== undefined) {
                    var protocolInstance4 = protocolValue4;
                    inboundNatPoolJsonFormatInstance.protocol = protocolInstance4;
                  }
                  
                  var frontendPortRangeStartValue = propertiesValue15['frontendPortRangeStart'];
                  if (frontendPortRangeStartValue !== null && frontendPortRangeStartValue !== undefined) {
                    var frontendPortRangeStartInstance = frontendPortRangeStartValue;
                    inboundNatPoolJsonFormatInstance.frontendPortRangeStart = frontendPortRangeStartInstance;
                  }
                  
                  var frontendPortRangeEndValue = propertiesValue15['frontendPortRangeEnd'];
                  if (frontendPortRangeEndValue !== null && frontendPortRangeEndValue !== undefined) {
                    var frontendPortRangeEndInstance = frontendPortRangeEndValue;
                    inboundNatPoolJsonFormatInstance.frontendPortRangeEnd = frontendPortRangeEndInstance;
                  }
                  
                  var backendPortValue3 = propertiesValue15['backendPort'];
                  if (backendPortValue3 !== null && backendPortValue3 !== undefined) {
                    var backendPortInstance3 = backendPortValue3;
                    inboundNatPoolJsonFormatInstance.backendPort = backendPortInstance3;
                  }
                  
                  var provisioningStateValue6 = propertiesValue15['provisioningState'];
                  if (provisioningStateValue6 !== null && provisioningStateValue6 !== undefined) {
                    var provisioningStateInstance6 = provisioningStateValue6;
                    inboundNatPoolJsonFormatInstance.provisioningState = provisioningStateInstance6;
                  }
                }
                
                var nameValue6 = inboundNatPoolsValue2['name'];
                if (nameValue6 !== null && nameValue6 !== undefined) {
                  var nameInstance6 = nameValue6;
                  inboundNatPoolJsonFormatInstance.name = nameInstance6;
                }
                
                var etagValue6 = inboundNatPoolsValue2['etag'];
                if (etagValue6 !== null && etagValue6 !== undefined) {
                  var etagInstance6 = etagValue6;
                  inboundNatPoolJsonFormatInstance.etag = etagInstance6;
                }
                
                var idValue22 = inboundNatPoolsValue2['id'];
                if (idValue22 !== null && idValue22 !== undefined) {
                  var idInstance22 = idValue22;
                  inboundNatPoolJsonFormatInstance.id = idInstance22;
                }
              }
            }
            
            var outboundNatRulesArray4 = propertiesValue9['outboundNatRules'];
            if (outboundNatRulesArray4 !== null && outboundNatRulesArray4 !== undefined) {
              for (var loweredIndex34 = 0; loweredIndex34 < outboundNatRulesArray4.length; loweredIndex34 = loweredIndex34 + 1) {
                var outboundNatRulesValue2 = outboundNatRulesArray4[loweredIndex34];
                var outboundNatRuleJsonFormatInstance = { frontendIpConfigurations: [] };
                loadBalancerInstance.outboundNatRules.push(outboundNatRuleJsonFormatInstance);
                
                var propertiesValue16 = outboundNatRulesValue2['properties'];
                if (propertiesValue16 !== null && propertiesValue16 !== undefined) {
                  var allocatedOutboundPortsValue = propertiesValue16['allocatedOutboundPorts'];
                  if (allocatedOutboundPortsValue !== null && allocatedOutboundPortsValue !== undefined) {
                    var allocatedOutboundPortsInstance = allocatedOutboundPortsValue;
                    outboundNatRuleJsonFormatInstance.allocatedOutboundPorts = allocatedOutboundPortsInstance;
                  }
                  
                  var frontendIPConfigurationsArray4 = propertiesValue16['frontendIPConfigurations'];
                  if (frontendIPConfigurationsArray4 !== null && frontendIPConfigurationsArray4 !== undefined) {
                    for (var loweredIndex35 = 0; loweredIndex35 < frontendIPConfigurationsArray4.length; loweredIndex35 = loweredIndex35 + 1) {
                      var frontendIPConfigurationsValue2 = frontendIPConfigurationsArray4[loweredIndex35];
                      var resourceIdInstance8 = {};
                      outboundNatRuleJsonFormatInstance.frontendIpConfigurations.push(resourceIdInstance8);
                      
                      var idValue23 = frontendIPConfigurationsValue2['id'];
                      if (idValue23 !== null && idValue23 !== undefined) {
                        var idInstance23 = idValue23;
                        resourceIdInstance8.id = idInstance23;
                      }
                    }
                  }
                  
                  var backendAddressPoolValue4 = propertiesValue16['backendAddressPool'];
                  if (backendAddressPoolValue4 !== null && backendAddressPoolValue4 !== undefined) {
                    var backendAddressPoolInstance2 = {};
                    outboundNatRuleJsonFormatInstance.backendAddressPool = backendAddressPoolInstance2;
                    
                    var idValue24 = backendAddressPoolValue4['id'];
                    if (idValue24 !== null && idValue24 !== undefined) {
                      var idInstance24 = idValue24;
                      backendAddressPoolInstance2.id = idInstance24;
                    }
                  }
                  
                  var provisioningStateValue7 = propertiesValue16['provisioningState'];
                  if (provisioningStateValue7 !== null && provisioningStateValue7 !== undefined) {
                    var provisioningStateInstance7 = provisioningStateValue7;
                    outboundNatRuleJsonFormatInstance.provisioningState = provisioningStateInstance7;
                  }
                }
                
                var nameValue7 = outboundNatRulesValue2['name'];
                if (nameValue7 !== null && nameValue7 !== undefined) {
                  var nameInstance7 = nameValue7;
                  outboundNatRuleJsonFormatInstance.name = nameInstance7;
                }
                
                var etagValue7 = outboundNatRulesValue2['etag'];
                if (etagValue7 !== null && etagValue7 !== undefined) {
                  var etagInstance7 = etagValue7;
                  outboundNatRuleJsonFormatInstance.etag = etagInstance7;
                }
                
                var idValue25 = outboundNatRulesValue2['id'];
                if (idValue25 !== null && idValue25 !== undefined) {
                  var idInstance25 = idValue25;
                  outboundNatRuleJsonFormatInstance.id = idInstance25;
                }
              }
            }
            
            var resourceGuidValue = propertiesValue9['resourceGuid'];
            if (resourceGuidValue !== null && resourceGuidValue !== undefined) {
              var resourceGuidInstance = resourceGuidValue;
              loadBalancerInstance.resourceGuid = resourceGuidInstance;
            }
            
            var provisioningStateValue8 = propertiesValue9['provisioningState'];
            if (provisioningStateValue8 !== null && provisioningStateValue8 !== undefined) {
              var provisioningStateInstance8 = provisioningStateValue8;
              loadBalancerInstance.provisioningState = provisioningStateInstance8;
            }
          }
          
          var etagValue8 = responseDoc['etag'];
          if (etagValue8 !== null && etagValue8 !== undefined) {
            var etagInstance8 = etagValue8;
            loadBalancerInstance.etag = etagInstance8;
          }
          
          var idValue26 = responseDoc['id'];
          if (idValue26 !== null && idValue26 !== undefined) {
            var idInstance26 = idValue26;
            loadBalancerInstance.id = idInstance26;
          }
          
          var nameValue8 = responseDoc['name'];
          if (nameValue8 !== null && nameValue8 !== undefined) {
            var nameInstance8 = nameValue8;
            loadBalancerInstance.name = nameInstance8;
          }
          
          var typeValue = responseDoc['type'];
          if (typeValue !== null && typeValue !== undefined) {
            var typeInstance = typeValue;
            loadBalancerInstance.type = typeInstance;
          }
          
          var locationValue = responseDoc['location'];
          if (locationValue !== null && locationValue !== undefined) {
            var locationInstance = locationValue;
            loadBalancerInstance.location = locationInstance;
          }
          
          var tagsSequenceElement = responseDoc['tags'];
          if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
            for (var property in tagsSequenceElement) {
              var tagsKey2 = property;
              var tagsValue2 = tagsSequenceElement[property];
              loadBalancerInstance.tags[tagsKey2] = tagsValue2;
            }
          }
          
          var errorValue = responseDoc['error'];
          if (errorValue !== null && errorValue !== undefined) {
            var errorInstance = { details: [] };
            result.error = errorInstance;
            
            var codeValue = errorValue['code'];
            if (codeValue !== null && codeValue !== undefined) {
              var codeInstance = codeValue;
              errorInstance.code = codeInstance;
            }
            
            var messageValue = errorValue['message'];
            if (messageValue !== null && messageValue !== undefined) {
              var messageInstance = messageValue;
              errorInstance.message = messageInstance;
            }
            
            var targetValue = errorValue['target'];
            if (targetValue !== null && targetValue !== undefined) {
              var targetInstance = targetValue;
              errorInstance.target = targetInstance;
            }
            
            var detailsArray = errorValue['details'];
            if (detailsArray !== null && detailsArray !== undefined) {
              for (var loweredIndex36 = 0; loweredIndex36 < detailsArray.length; loweredIndex36 = loweredIndex36 + 1) {
                var detailsValue = detailsArray[loweredIndex36];
                var errorDetailsInstance = {};
                errorInstance.details.push(errorDetailsInstance);
                
                var codeValue2 = detailsValue['code'];
                if (codeValue2 !== null && codeValue2 !== undefined) {
                  var codeInstance2 = codeValue2;
                  errorDetailsInstance.code = codeInstance2;
                }
                
                var targetValue2 = detailsValue['target'];
                if (targetValue2 !== null && targetValue2 !== undefined) {
                  var targetInstance2 = targetValue2;
                  errorDetailsInstance.target = targetInstance2;
                }
                
                var messageValue2 = detailsValue['message'];
                if (messageValue2 !== null && messageValue2 !== undefined) {
                  var messageInstance2 = messageValue2;
                  errorDetailsInstance.message = messageInstance2;
                }
              }
            }
            
            var innerErrorValue = errorValue['innerError'];
            if (innerErrorValue !== null && innerErrorValue !== undefined) {
              var innerErrorInstance = innerErrorValue;
              errorInstance.innerError = innerErrorInstance;
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      result.azureAsyncOperation = response.headers['azure-asyncoperation'];
      result.retryAfter = parseInt(response.headers['retry-after'], 10);
      
      return callback(null, result);
    });
  };
  
  /**
   * The delete loadbalancer operation deletes the specified loadbalancer.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} loadBalancerName The name of the loadBalancer.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  LoadBalancerOperations.prototype.beginDeleting = function(resourceGroupName, loadBalancerName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (loadBalancerName === null || loadBalancerName === undefined) {
      return callback(new Error('loadBalancerName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Network';
    url2 = url2 + '/loadBalancers/';
    url2 = url2 + encodeURIComponent(loadBalancerName);
    var queryParameters = [];
    queryParameters.push('api-version=2015-05-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'DELETE';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200 && statusCode !== 202 && statusCode !== 204) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      result = {};
      result.statusCode = statusCode;
      result.azureAsyncOperation = response.headers['azure-asyncoperation'];
      result.retryAfter = parseInt(response.headers['retry-after'], 10);
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The Put LoadBalancer operation creates/updates a LoadBalancer
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} loadBalancerName The name of the loadBalancer.
   * 
   * @param {LoadBalancer} parameters Parameters supplied to the create/update
   * LoadBalancer operation
   * 
   * @param {IEnumerable} [parameters.frontendIpConfigurations] Gets or sets
   * frontend IP addresses of the load balancer
   * 
   * @param {IEnumerable} [parameters.backendAddressPools] Gets or sets Pools
   * of backend IP addresseses
   * 
   * @param {IEnumerable} [parameters.loadBalancingRules] Gets or sets
   * loadbalancing rules
   * 
   * @param {IEnumerable} [parameters.probes] Gets or sets list of Load
   * balancer probes
   * 
   * @param {IEnumerable} [parameters.inboundNatRules] Gets or sets list of
   * inbound rules
   * 
   * @param {IEnumerable} [parameters.inboundNatPools] Gets or sets inbound NAT
   * pools
   * 
   * @param {IEnumerable} [parameters.outboundNatRules] Gets or sets outbound
   * NAT rules
   * 
   * @param {string} [parameters.provisioningState] Gets or sets Provisioning
   * state of the PublicIP resource Updating/Deleting/Failed
   * 
   * @param {string} [parameters.resourceGuid] Gets or sets resource guid
   * property of the Load balancer resource
   * 
   * @param {string} [parameters.etag] Gets a unique read-only string that
   * changes whenever the resource is updated
   * 
   * @param {string} [parameters.id] Gets or sets the ID of the resource.
   * 
   * @param {string} [parameters.name] Gets or sets the name of the resource.
   * 
   * @param {string} [parameters.type] Gets or sets the type of the resource.
   * 
   * @param {string} [parameters.location] Gets or sets the location of the
   * resource.
   * 
   * @param {object} [parameters.tags] Gets or sets the tags attached to the
   * resource.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  LoadBalancerOperations.prototype.createOrUpdate = function(resourceGroupName, loadBalancerName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.loadBalancers.beginCreateOrUpdating(resourceGroupName, loadBalancerName, parameters, function (err, result) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var delayInSeconds = result.retryAfter;
      if (delayInSeconds === 0) {
        delayInSeconds = 30;
      }
      if (client2.longRunningOperationInitialTimeout >= 0) {
        delayInSeconds = client2.longRunningOperationInitialTimeout;
      }
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.getLongRunningOperationStatus(result.azureAsyncOperation, function (err2, result2) {
            if (err2 !== null && err2 !== undefined) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                return callback(null, result2);
              } else {
                delayInSeconds = result2.retryAfter;
                if (delayInSeconds === 0) {
                  delayInSeconds = 15;
                }
                if (client2.longRunningOperationRetryTimeout >= 0) {
                  delayInSeconds = client2.longRunningOperationRetryTimeout;
                }
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  /**
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} loadBalancerName The name of the loadBalancer.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  LoadBalancerOperations.prototype.deleteMethod = function(resourceGroupName, loadBalancerName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.loadBalancers.beginDeleting(resourceGroupName, loadBalancerName, function (err, result) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var delayInSeconds = result.retryAfter;
      if (delayInSeconds === 0) {
        delayInSeconds = 30;
      }
      if (client2.longRunningOperationInitialTimeout >= 0) {
        delayInSeconds = client2.longRunningOperationInitialTimeout;
      }
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.getLongRunningOperationStatus(result.azureAsyncOperation, function (err2, result2) {
            if (err2 !== null && err2 !== undefined) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                return callback(null, result2);
              } else {
                delayInSeconds = result2.retryAfter;
                if (delayInSeconds === 0) {
                  delayInSeconds = 15;
                }
                if (client2.longRunningOperationRetryTimeout >= 0) {
                  delayInSeconds = client2.longRunningOperationRetryTimeout;
                }
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  /**
   * The Get ntework interface operation retreives information about the
   * specified network interface.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} loadBalancerName The name of the loadBalancer.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  LoadBalancerOperations.prototype.get = function(resourceGroupName, loadBalancerName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (loadBalancerName === null || loadBalancerName === undefined) {
      return callback(new Error('loadBalancerName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Network';
    url2 = url2 + '/loadBalancers/';
    url2 = url2 + encodeURIComponent(loadBalancerName);
    var queryParameters = [];
    queryParameters.push('api-version=2015-05-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var loadBalancerInstance = { backendAddressPools: [], frontendIpConfigurations: [], inboundNatPools: [], inboundNatRules: [], loadBalancingRules: [], outboundNatRules: [], probes: [], tags: {} };
          result.loadBalancer = loadBalancerInstance;
          
          var propertiesValue = responseDoc['properties'];
          if (propertiesValue !== null && propertiesValue !== undefined) {
            var frontendIPConfigurationsArray = propertiesValue['frontendIPConfigurations'];
            if (frontendIPConfigurationsArray !== null && frontendIPConfigurationsArray !== undefined) {
              for (var loweredIndex1 = 0; loweredIndex1 < frontendIPConfigurationsArray.length; loweredIndex1 = loweredIndex1 + 1) {
                var frontendIPConfigurationsValue = frontendIPConfigurationsArray[loweredIndex1];
                var frontendIpConfigurationJsonFormatInstance = { inboundNatPools: [], inboundNatRules: [], loadBalancingRules: [], outboundNatRules: [] };
                loadBalancerInstance.frontendIpConfigurations.push(frontendIpConfigurationJsonFormatInstance);
                
                var propertiesValue2 = frontendIPConfigurationsValue['properties'];
                if (propertiesValue2 !== null && propertiesValue2 !== undefined) {
                  var privateIPAddressValue = propertiesValue2['privateIPAddress'];
                  if (privateIPAddressValue !== null && privateIPAddressValue !== undefined) {
                    var privateIPAddressInstance = privateIPAddressValue;
                    frontendIpConfigurationJsonFormatInstance.privateIpAddress = privateIPAddressInstance;
                  }
                  
                  var privateIPAllocationMethodValue = propertiesValue2['privateIPAllocationMethod'];
                  if (privateIPAllocationMethodValue !== null && privateIPAllocationMethodValue !== undefined) {
                    var privateIPAllocationMethodInstance = privateIPAllocationMethodValue;
                    frontendIpConfigurationJsonFormatInstance.privateIpAllocationMethod = privateIPAllocationMethodInstance;
                  }
                  
                  var subnetValue = propertiesValue2['subnet'];
                  if (subnetValue !== null && subnetValue !== undefined) {
                    var subnetInstance = {};
                    frontendIpConfigurationJsonFormatInstance.subnet = subnetInstance;
                    
                    var idValue = subnetValue['id'];
                    if (idValue !== null && idValue !== undefined) {
                      var idInstance = idValue;
                      subnetInstance.id = idInstance;
                    }
                  }
                  
                  var publicIPAddressValue = propertiesValue2['publicIPAddress'];
                  if (publicIPAddressValue !== null && publicIPAddressValue !== undefined) {
                    var publicIPAddressInstance = {};
                    frontendIpConfigurationJsonFormatInstance.publicIpAddress = publicIPAddressInstance;
                    
                    var idValue2 = publicIPAddressValue['id'];
                    if (idValue2 !== null && idValue2 !== undefined) {
                      var idInstance2 = idValue2;
                      publicIPAddressInstance.id = idInstance2;
                    }
                  }
                  
                  var inboundNatRulesArray = propertiesValue2['inboundNatRules'];
                  if (inboundNatRulesArray !== null && inboundNatRulesArray !== undefined) {
                    for (var loweredIndex2 = 0; loweredIndex2 < inboundNatRulesArray.length; loweredIndex2 = loweredIndex2 + 1) {
                      var inboundNatRulesValue = inboundNatRulesArray[loweredIndex2];
                      var resourceIdInstance = {};
                      frontendIpConfigurationJsonFormatInstance.inboundNatRules.push(resourceIdInstance);
                      
                      var idValue3 = inboundNatRulesValue['id'];
                      if (idValue3 !== null && idValue3 !== undefined) {
                        var idInstance3 = idValue3;
                        resourceIdInstance.id = idInstance3;
                      }
                    }
                  }
                  
                  var inboundNatPoolsArray = propertiesValue2['inboundNatPools'];
                  if (inboundNatPoolsArray !== null && inboundNatPoolsArray !== undefined) {
                    for (var loweredIndex3 = 0; loweredIndex3 < inboundNatPoolsArray.length; loweredIndex3 = loweredIndex3 + 1) {
                      var inboundNatPoolsValue = inboundNatPoolsArray[loweredIndex3];
                      var resourceIdInstance2 = {};
                      frontendIpConfigurationJsonFormatInstance.inboundNatPools.push(resourceIdInstance2);
                      
                      var idValue4 = inboundNatPoolsValue['id'];
                      if (idValue4 !== null && idValue4 !== undefined) {
                        var idInstance4 = idValue4;
                        resourceIdInstance2.id = idInstance4;
                      }
                    }
                  }
                  
                  var outboundNatRulesArray = propertiesValue2['outboundNatRules'];
                  if (outboundNatRulesArray !== null && outboundNatRulesArray !== undefined) {
                    for (var loweredIndex4 = 0; loweredIndex4 < outboundNatRulesArray.length; loweredIndex4 = loweredIndex4 + 1) {
                      var outboundNatRulesValue = outboundNatRulesArray[loweredIndex4];
                      var resourceIdInstance3 = {};
                      frontendIpConfigurationJsonFormatInstance.outboundNatRules.push(resourceIdInstance3);
                      
                      var idValue5 = outboundNatRulesValue['id'];
                      if (idValue5 !== null && idValue5 !== undefined) {
                        var idInstance5 = idValue5;
                        resourceIdInstance3.id = idInstance5;
                      }
                    }
                  }
                  
                  var loadBalancingRulesArray = propertiesValue2['loadBalancingRules'];
                  if (loadBalancingRulesArray !== null && loadBalancingRulesArray !== undefined) {
                    for (var loweredIndex5 = 0; loweredIndex5 < loadBalancingRulesArray.length; loweredIndex5 = loweredIndex5 + 1) {
                      var loadBalancingRulesValue = loadBalancingRulesArray[loweredIndex5];
                      var resourceIdInstance4 = {};
                      frontendIpConfigurationJsonFormatInstance.loadBalancingRules.push(resourceIdInstance4);
                      
                      var idValue6 = loadBalancingRulesValue['id'];
                      if (idValue6 !== null && idValue6 !== undefined) {
                        var idInstance6 = idValue6;
                        resourceIdInstance4.id = idInstance6;
                      }
                    }
                  }
                  
                  var provisioningStateValue = propertiesValue2['provisioningState'];
                  if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
                    var provisioningStateInstance = provisioningStateValue;
                    frontendIpConfigurationJsonFormatInstance.provisioningState = provisioningStateInstance;
                  }
                }
                
                var nameValue = frontendIPConfigurationsValue['name'];
                if (nameValue !== null && nameValue !== undefined) {
                  var nameInstance = nameValue;
                  frontendIpConfigurationJsonFormatInstance.name = nameInstance;
                }
                
                var etagValue = frontendIPConfigurationsValue['etag'];
                if (etagValue !== null && etagValue !== undefined) {
                  var etagInstance = etagValue;
                  frontendIpConfigurationJsonFormatInstance.etag = etagInstance;
                }
                
                var idValue7 = frontendIPConfigurationsValue['id'];
                if (idValue7 !== null && idValue7 !== undefined) {
                  var idInstance7 = idValue7;
                  frontendIpConfigurationJsonFormatInstance.id = idInstance7;
                }
              }
            }
            
            var backendAddressPoolsArray = propertiesValue['backendAddressPools'];
            if (backendAddressPoolsArray !== null && backendAddressPoolsArray !== undefined) {
              for (var loweredIndex6 = 0; loweredIndex6 < backendAddressPoolsArray.length; loweredIndex6 = loweredIndex6 + 1) {
                var backendAddressPoolsValue = backendAddressPoolsArray[loweredIndex6];
                var backendAddressPoolJsonFormatInstance = { backendIpConfigurations: [], loadBalancingRules: [] };
                loadBalancerInstance.backendAddressPools.push(backendAddressPoolJsonFormatInstance);
                
                var propertiesValue3 = backendAddressPoolsValue['properties'];
                if (propertiesValue3 !== null && propertiesValue3 !== undefined) {
                  var backendIPConfigurationsArray = propertiesValue3['backendIPConfigurations'];
                  if (backendIPConfigurationsArray !== null && backendIPConfigurationsArray !== undefined) {
                    for (var loweredIndex7 = 0; loweredIndex7 < backendIPConfigurationsArray.length; loweredIndex7 = loweredIndex7 + 1) {
                      var backendIPConfigurationsValue = backendIPConfigurationsArray[loweredIndex7];
                      var resourceIdInstance5 = {};
                      backendAddressPoolJsonFormatInstance.backendIpConfigurations.push(resourceIdInstance5);
                      
                      var idValue8 = backendIPConfigurationsValue['id'];
                      if (idValue8 !== null && idValue8 !== undefined) {
                        var idInstance8 = idValue8;
                        resourceIdInstance5.id = idInstance8;
                      }
                    }
                  }
                  
                  var loadBalancingRulesArray2 = propertiesValue3['loadBalancingRules'];
                  if (loadBalancingRulesArray2 !== null && loadBalancingRulesArray2 !== undefined) {
                    for (var loweredIndex8 = 0; loweredIndex8 < loadBalancingRulesArray2.length; loweredIndex8 = loweredIndex8 + 1) {
                      var loadBalancingRulesValue2 = loadBalancingRulesArray2[loweredIndex8];
                      var resourceIdInstance6 = {};
                      backendAddressPoolJsonFormatInstance.loadBalancingRules.push(resourceIdInstance6);
                      
                      var idValue9 = loadBalancingRulesValue2['id'];
                      if (idValue9 !== null && idValue9 !== undefined) {
                        var idInstance9 = idValue9;
                        resourceIdInstance6.id = idInstance9;
                      }
                    }
                  }
                  
                  var outboundNatRuleValue = propertiesValue3['outboundNatRule'];
                  if (outboundNatRuleValue !== null && outboundNatRuleValue !== undefined) {
                    var outboundNatRuleInstance = {};
                    backendAddressPoolJsonFormatInstance.outboundNatRule = outboundNatRuleInstance;
                    
                    var idValue10 = outboundNatRuleValue['id'];
                    if (idValue10 !== null && idValue10 !== undefined) {
                      var idInstance10 = idValue10;
                      outboundNatRuleInstance.id = idInstance10;
                    }
                  }
                  
                  var provisioningStateValue2 = propertiesValue3['provisioningState'];
                  if (provisioningStateValue2 !== null && provisioningStateValue2 !== undefined) {
                    var provisioningStateInstance2 = provisioningStateValue2;
                    backendAddressPoolJsonFormatInstance.provisioningState = provisioningStateInstance2;
                  }
                }
                
                var nameValue2 = backendAddressPoolsValue['name'];
                if (nameValue2 !== null && nameValue2 !== undefined) {
                  var nameInstance2 = nameValue2;
                  backendAddressPoolJsonFormatInstance.name = nameInstance2;
                }
                
                var etagValue2 = backendAddressPoolsValue['etag'];
                if (etagValue2 !== null && etagValue2 !== undefined) {
                  var etagInstance2 = etagValue2;
                  backendAddressPoolJsonFormatInstance.etag = etagInstance2;
                }
                
                var idValue11 = backendAddressPoolsValue['id'];
                if (idValue11 !== null && idValue11 !== undefined) {
                  var idInstance11 = idValue11;
                  backendAddressPoolJsonFormatInstance.id = idInstance11;
                }
              }
            }
            
            var loadBalancingRulesArray3 = propertiesValue['loadBalancingRules'];
            if (loadBalancingRulesArray3 !== null && loadBalancingRulesArray3 !== undefined) {
              for (var loweredIndex9 = 0; loweredIndex9 < loadBalancingRulesArray3.length; loweredIndex9 = loweredIndex9 + 1) {
                var loadBalancingRulesValue3 = loadBalancingRulesArray3[loweredIndex9];
                var loadBalancingRuleJsonFormatInstance = {};
                loadBalancerInstance.loadBalancingRules.push(loadBalancingRuleJsonFormatInstance);
                
                var propertiesValue4 = loadBalancingRulesValue3['properties'];
                if (propertiesValue4 !== null && propertiesValue4 !== undefined) {
                  var frontendIPConfigurationValue = propertiesValue4['frontendIPConfiguration'];
                  if (frontendIPConfigurationValue !== null && frontendIPConfigurationValue !== undefined) {
                    var frontendIPConfigurationInstance = {};
                    loadBalancingRuleJsonFormatInstance.frontendIPConfiguration = frontendIPConfigurationInstance;
                    
                    var idValue12 = frontendIPConfigurationValue['id'];
                    if (idValue12 !== null && idValue12 !== undefined) {
                      var idInstance12 = idValue12;
                      frontendIPConfigurationInstance.id = idInstance12;
                    }
                  }
                  
                  var backendAddressPoolValue = propertiesValue4['backendAddressPool'];
                  if (backendAddressPoolValue !== null && backendAddressPoolValue !== undefined) {
                    var backendAddressPoolInstance = {};
                    loadBalancingRuleJsonFormatInstance.backendAddressPool = backendAddressPoolInstance;
                    
                    var idValue13 = backendAddressPoolValue['id'];
                    if (idValue13 !== null && idValue13 !== undefined) {
                      var idInstance13 = idValue13;
                      backendAddressPoolInstance.id = idInstance13;
                    }
                  }
                  
                  var probeValue = propertiesValue4['probe'];
                  if (probeValue !== null && probeValue !== undefined) {
                    var probeInstance = {};
                    loadBalancingRuleJsonFormatInstance.probe = probeInstance;
                    
                    var idValue14 = probeValue['id'];
                    if (idValue14 !== null && idValue14 !== undefined) {
                      var idInstance14 = idValue14;
                      probeInstance.id = idInstance14;
                    }
                  }
                  
                  var protocolValue = propertiesValue4['protocol'];
                  if (protocolValue !== null && protocolValue !== undefined) {
                    var protocolInstance = protocolValue;
                    loadBalancingRuleJsonFormatInstance.protocol = protocolInstance;
                  }
                  
                  var loadDistributionValue = propertiesValue4['loadDistribution'];
                  if (loadDistributionValue !== null && loadDistributionValue !== undefined) {
                    var loadDistributionInstance = loadDistributionValue;
                    loadBalancingRuleJsonFormatInstance.loadDistribution = loadDistributionInstance;
                  }
                  
                  var frontendPortValue = propertiesValue4['frontendPort'];
                  if (frontendPortValue !== null && frontendPortValue !== undefined) {
                    var frontendPortInstance = frontendPortValue;
                    loadBalancingRuleJsonFormatInstance.frontendPort = frontendPortInstance;
                  }
                  
                  var backendPortValue = propertiesValue4['backendPort'];
                  if (backendPortValue !== null && backendPortValue !== undefined) {
                    var backendPortInstance = backendPortValue;
                    loadBalancingRuleJsonFormatInstance.backendPort = backendPortInstance;
                  }
                  
                  var idleTimeoutInMinutesValue = propertiesValue4['idleTimeoutInMinutes'];
                  if (idleTimeoutInMinutesValue !== null && idleTimeoutInMinutesValue !== undefined) {
                    var idleTimeoutInMinutesInstance = idleTimeoutInMinutesValue;
                    loadBalancingRuleJsonFormatInstance.idleTimeoutInMinutes = idleTimeoutInMinutesInstance;
                  }
                  
                  var enableFloatingIPValue = propertiesValue4['enableFloatingIP'];
                  if (enableFloatingIPValue !== null && enableFloatingIPValue !== undefined) {
                    var enableFloatingIPInstance = enableFloatingIPValue;
                    loadBalancingRuleJsonFormatInstance.enableFloatingIP = enableFloatingIPInstance;
                  }
                  
                  var provisioningStateValue3 = propertiesValue4['provisioningState'];
                  if (provisioningStateValue3 !== null && provisioningStateValue3 !== undefined) {
                    var provisioningStateInstance3 = provisioningStateValue3;
                    loadBalancingRuleJsonFormatInstance.provisioningState = provisioningStateInstance3;
                  }
                }
                
                var nameValue3 = loadBalancingRulesValue3['name'];
                if (nameValue3 !== null && nameValue3 !== undefined) {
                  var nameInstance3 = nameValue3;
                  loadBalancingRuleJsonFormatInstance.name = nameInstance3;
                }
                
                var etagValue3 = loadBalancingRulesValue3['etag'];
                if (etagValue3 !== null && etagValue3 !== undefined) {
                  var etagInstance3 = etagValue3;
                  loadBalancingRuleJsonFormatInstance.etag = etagInstance3;
                }
                
                var idValue15 = loadBalancingRulesValue3['id'];
                if (idValue15 !== null && idValue15 !== undefined) {
                  var idInstance15 = idValue15;
                  loadBalancingRuleJsonFormatInstance.id = idInstance15;
                }
              }
            }
            
            var probesArray = propertiesValue['probes'];
            if (probesArray !== null && probesArray !== undefined) {
              for (var loweredIndex10 = 0; loweredIndex10 < probesArray.length; loweredIndex10 = loweredIndex10 + 1) {
                var probesValue = probesArray[loweredIndex10];
                var probeJsonFormatInstance = { loadBalancingRules: [] };
                loadBalancerInstance.probes.push(probeJsonFormatInstance);
                
                var propertiesValue5 = probesValue['properties'];
                if (propertiesValue5 !== null && propertiesValue5 !== undefined) {
                  var loadBalancingRulesArray4 = propertiesValue5['loadBalancingRules'];
                  if (loadBalancingRulesArray4 !== null && loadBalancingRulesArray4 !== undefined) {
                    for (var loweredIndex11 = 0; loweredIndex11 < loadBalancingRulesArray4.length; loweredIndex11 = loweredIndex11 + 1) {
                      var loadBalancingRulesValue4 = loadBalancingRulesArray4[loweredIndex11];
                      var resourceIdInstance7 = {};
                      probeJsonFormatInstance.loadBalancingRules.push(resourceIdInstance7);
                      
                      var idValue16 = loadBalancingRulesValue4['id'];
                      if (idValue16 !== null && idValue16 !== undefined) {
                        var idInstance16 = idValue16;
                        resourceIdInstance7.id = idInstance16;
                      }
                    }
                  }
                  
                  var protocolValue2 = propertiesValue5['protocol'];
                  if (protocolValue2 !== null && protocolValue2 !== undefined) {
                    var protocolInstance2 = protocolValue2;
                    probeJsonFormatInstance.protocol = protocolInstance2;
                  }
                  
                  var portValue = propertiesValue5['port'];
                  if (portValue !== null && portValue !== undefined) {
                    var portInstance = portValue;
                    probeJsonFormatInstance.port = portInstance;
                  }
                  
                  var intervalInSecondsValue = propertiesValue5['intervalInSeconds'];
                  if (intervalInSecondsValue !== null && intervalInSecondsValue !== undefined) {
                    var intervalInSecondsInstance = intervalInSecondsValue;
                    probeJsonFormatInstance.intervalInSeconds = intervalInSecondsInstance;
                  }
                  
                  var numberOfProbesValue = propertiesValue5['numberOfProbes'];
                  if (numberOfProbesValue !== null && numberOfProbesValue !== undefined) {
                    var numberOfProbesInstance = numberOfProbesValue;
                    probeJsonFormatInstance.numberOfProbes = numberOfProbesInstance;
                  }
                  
                  var requestPathValue = propertiesValue5['requestPath'];
                  if (requestPathValue !== null && requestPathValue !== undefined) {
                    var requestPathInstance = requestPathValue;
                    probeJsonFormatInstance.requestPath = requestPathInstance;
                  }
                  
                  var provisioningStateValue4 = propertiesValue5['provisioningState'];
                  if (provisioningStateValue4 !== null && provisioningStateValue4 !== undefined) {
                    var provisioningStateInstance4 = provisioningStateValue4;
                    probeJsonFormatInstance.provisioningState = provisioningStateInstance4;
                  }
                }
                
                var nameValue4 = probesValue['name'];
                if (nameValue4 !== null && nameValue4 !== undefined) {
                  var nameInstance4 = nameValue4;
                  probeJsonFormatInstance.name = nameInstance4;
                }
                
                var etagValue4 = probesValue['etag'];
                if (etagValue4 !== null && etagValue4 !== undefined) {
                  var etagInstance4 = etagValue4;
                  probeJsonFormatInstance.etag = etagInstance4;
                }
                
                var idValue17 = probesValue['id'];
                if (idValue17 !== null && idValue17 !== undefined) {
                  var idInstance17 = idValue17;
                  probeJsonFormatInstance.id = idInstance17;
                }
              }
            }
            
            var inboundNatRulesArray2 = propertiesValue['inboundNatRules'];
            if (inboundNatRulesArray2 !== null && inboundNatRulesArray2 !== undefined) {
              for (var loweredIndex12 = 0; loweredIndex12 < inboundNatRulesArray2.length; loweredIndex12 = loweredIndex12 + 1) {
                var inboundNatRulesValue2 = inboundNatRulesArray2[loweredIndex12];
                var inboundNatRuleJsonFormatInstance = {};
                loadBalancerInstance.inboundNatRules.push(inboundNatRuleJsonFormatInstance);
                
                var propertiesValue6 = inboundNatRulesValue2['properties'];
                if (propertiesValue6 !== null && propertiesValue6 !== undefined) {
                  var frontendIPConfigurationValue2 = propertiesValue6['frontendIPConfiguration'];
                  if (frontendIPConfigurationValue2 !== null && frontendIPConfigurationValue2 !== undefined) {
                    var frontendIPConfigurationInstance2 = {};
                    inboundNatRuleJsonFormatInstance.frontendIPConfiguration = frontendIPConfigurationInstance2;
                    
                    var idValue18 = frontendIPConfigurationValue2['id'];
                    if (idValue18 !== null && idValue18 !== undefined) {
                      var idInstance18 = idValue18;
                      frontendIPConfigurationInstance2.id = idInstance18;
                    }
                  }
                  
                  var backendIPConfigurationValue = propertiesValue6['backendIPConfiguration'];
                  if (backendIPConfigurationValue !== null && backendIPConfigurationValue !== undefined) {
                    var backendIPConfigurationInstance = {};
                    inboundNatRuleJsonFormatInstance.backendIPConfiguration = backendIPConfigurationInstance;
                    
                    var idValue19 = backendIPConfigurationValue['id'];
                    if (idValue19 !== null && idValue19 !== undefined) {
                      var idInstance19 = idValue19;
                      backendIPConfigurationInstance.id = idInstance19;
                    }
                  }
                  
                  var protocolValue3 = propertiesValue6['protocol'];
                  if (protocolValue3 !== null && protocolValue3 !== undefined) {
                    var protocolInstance3 = protocolValue3;
                    inboundNatRuleJsonFormatInstance.protocol = protocolInstance3;
                  }
                  
                  var frontendPortValue2 = propertiesValue6['frontendPort'];
                  if (frontendPortValue2 !== null && frontendPortValue2 !== undefined) {
                    var frontendPortInstance2 = frontendPortValue2;
                    inboundNatRuleJsonFormatInstance.frontendPort = frontendPortInstance2;
                  }
                  
                  var backendPortValue2 = propertiesValue6['backendPort'];
                  if (backendPortValue2 !== null && backendPortValue2 !== undefined) {
                    var backendPortInstance2 = backendPortValue2;
                    inboundNatRuleJsonFormatInstance.backendPort = backendPortInstance2;
                  }
                  
                  var idleTimeoutInMinutesValue2 = propertiesValue6['idleTimeoutInMinutes'];
                  if (idleTimeoutInMinutesValue2 !== null && idleTimeoutInMinutesValue2 !== undefined) {
                    var idleTimeoutInMinutesInstance2 = idleTimeoutInMinutesValue2;
                    inboundNatRuleJsonFormatInstance.idleTimeoutInMinutes = idleTimeoutInMinutesInstance2;
                  }
                  
                  var enableFloatingIPValue2 = propertiesValue6['enableFloatingIP'];
                  if (enableFloatingIPValue2 !== null && enableFloatingIPValue2 !== undefined) {
                    var enableFloatingIPInstance2 = enableFloatingIPValue2;
                    inboundNatRuleJsonFormatInstance.enableFloatingIP = enableFloatingIPInstance2;
                  }
                  
                  var provisioningStateValue5 = propertiesValue6['provisioningState'];
                  if (provisioningStateValue5 !== null && provisioningStateValue5 !== undefined) {
                    var provisioningStateInstance5 = provisioningStateValue5;
                    inboundNatRuleJsonFormatInstance.provisioningState = provisioningStateInstance5;
                  }
                }
                
                var nameValue5 = inboundNatRulesValue2['name'];
                if (nameValue5 !== null && nameValue5 !== undefined) {
                  var nameInstance5 = nameValue5;
                  inboundNatRuleJsonFormatInstance.name = nameInstance5;
                }
                
                var etagValue5 = inboundNatRulesValue2['etag'];
                if (etagValue5 !== null && etagValue5 !== undefined) {
                  var etagInstance5 = etagValue5;
                  inboundNatRuleJsonFormatInstance.etag = etagInstance5;
                }
                
                var idValue20 = inboundNatRulesValue2['id'];
                if (idValue20 !== null && idValue20 !== undefined) {
                  var idInstance20 = idValue20;
                  inboundNatRuleJsonFormatInstance.id = idInstance20;
                }
              }
            }
            
            var inboundNatPoolsArray2 = propertiesValue['inboundNatPools'];
            if (inboundNatPoolsArray2 !== null && inboundNatPoolsArray2 !== undefined) {
              for (var loweredIndex13 = 0; loweredIndex13 < inboundNatPoolsArray2.length; loweredIndex13 = loweredIndex13 + 1) {
                var inboundNatPoolsValue2 = inboundNatPoolsArray2[loweredIndex13];
                var inboundNatPoolJsonFormatInstance = {};
                loadBalancerInstance.inboundNatPools.push(inboundNatPoolJsonFormatInstance);
                
                var propertiesValue7 = inboundNatPoolsValue2['properties'];
                if (propertiesValue7 !== null && propertiesValue7 !== undefined) {
                  var frontendIPConfigurationValue3 = propertiesValue7['frontendIPConfiguration'];
                  if (frontendIPConfigurationValue3 !== null && frontendIPConfigurationValue3 !== undefined) {
                    var frontendIPConfigurationInstance3 = {};
                    inboundNatPoolJsonFormatInstance.frontendIPConfiguration = frontendIPConfigurationInstance3;
                    
                    var idValue21 = frontendIPConfigurationValue3['id'];
                    if (idValue21 !== null && idValue21 !== undefined) {
                      var idInstance21 = idValue21;
                      frontendIPConfigurationInstance3.id = idInstance21;
                    }
                  }
                  
                  var protocolValue4 = propertiesValue7['protocol'];
                  if (protocolValue4 !== null && protocolValue4 !== undefined) {
                    var protocolInstance4 = protocolValue4;
                    inboundNatPoolJsonFormatInstance.protocol = protocolInstance4;
                  }
                  
                  var frontendPortRangeStartValue = propertiesValue7['frontendPortRangeStart'];
                  if (frontendPortRangeStartValue !== null && frontendPortRangeStartValue !== undefined) {
                    var frontendPortRangeStartInstance = frontendPortRangeStartValue;
                    inboundNatPoolJsonFormatInstance.frontendPortRangeStart = frontendPortRangeStartInstance;
                  }
                  
                  var frontendPortRangeEndValue = propertiesValue7['frontendPortRangeEnd'];
                  if (frontendPortRangeEndValue !== null && frontendPortRangeEndValue !== undefined) {
                    var frontendPortRangeEndInstance = frontendPortRangeEndValue;
                    inboundNatPoolJsonFormatInstance.frontendPortRangeEnd = frontendPortRangeEndInstance;
                  }
                  
                  var backendPortValue3 = propertiesValue7['backendPort'];
                  if (backendPortValue3 !== null && backendPortValue3 !== undefined) {
                    var backendPortInstance3 = backendPortValue3;
                    inboundNatPoolJsonFormatInstance.backendPort = backendPortInstance3;
                  }
                  
                  var provisioningStateValue6 = propertiesValue7['provisioningState'];
                  if (provisioningStateValue6 !== null && provisioningStateValue6 !== undefined) {
                    var provisioningStateInstance6 = provisioningStateValue6;
                    inboundNatPoolJsonFormatInstance.provisioningState = provisioningStateInstance6;
                  }
                }
                
                var nameValue6 = inboundNatPoolsValue2['name'];
                if (nameValue6 !== null && nameValue6 !== undefined) {
                  var nameInstance6 = nameValue6;
                  inboundNatPoolJsonFormatInstance.name = nameInstance6;
                }
                
                var etagValue6 = inboundNatPoolsValue2['etag'];
                if (etagValue6 !== null && etagValue6 !== undefined) {
                  var etagInstance6 = etagValue6;
                  inboundNatPoolJsonFormatInstance.etag = etagInstance6;
                }
                
                var idValue22 = inboundNatPoolsValue2['id'];
                if (idValue22 !== null && idValue22 !== undefined) {
                  var idInstance22 = idValue22;
                  inboundNatPoolJsonFormatInstance.id = idInstance22;
                }
              }
            }
            
            var outboundNatRulesArray2 = propertiesValue['outboundNatRules'];
            if (outboundNatRulesArray2 !== null && outboundNatRulesArray2 !== undefined) {
              for (var loweredIndex14 = 0; loweredIndex14 < outboundNatRulesArray2.length; loweredIndex14 = loweredIndex14 + 1) {
                var outboundNatRulesValue2 = outboundNatRulesArray2[loweredIndex14];
                var outboundNatRuleJsonFormatInstance = { frontendIpConfigurations: [] };
                loadBalancerInstance.outboundNatRules.push(outboundNatRuleJsonFormatInstance);
                
                var propertiesValue8 = outboundNatRulesValue2['properties'];
                if (propertiesValue8 !== null && propertiesValue8 !== undefined) {
                  var allocatedOutboundPortsValue = propertiesValue8['allocatedOutboundPorts'];
                  if (allocatedOutboundPortsValue !== null && allocatedOutboundPortsValue !== undefined) {
                    var allocatedOutboundPortsInstance = allocatedOutboundPortsValue;
                    outboundNatRuleJsonFormatInstance.allocatedOutboundPorts = allocatedOutboundPortsInstance;
                  }
                  
                  var frontendIPConfigurationsArray2 = propertiesValue8['frontendIPConfigurations'];
                  if (frontendIPConfigurationsArray2 !== null && frontendIPConfigurationsArray2 !== undefined) {
                    for (var loweredIndex15 = 0; loweredIndex15 < frontendIPConfigurationsArray2.length; loweredIndex15 = loweredIndex15 + 1) {
                      var frontendIPConfigurationsValue2 = frontendIPConfigurationsArray2[loweredIndex15];
                      var resourceIdInstance8 = {};
                      outboundNatRuleJsonFormatInstance.frontendIpConfigurations.push(resourceIdInstance8);
                      
                      var idValue23 = frontendIPConfigurationsValue2['id'];
                      if (idValue23 !== null && idValue23 !== undefined) {
                        var idInstance23 = idValue23;
                        resourceIdInstance8.id = idInstance23;
                      }
                    }
                  }
                  
                  var backendAddressPoolValue2 = propertiesValue8['backendAddressPool'];
                  if (backendAddressPoolValue2 !== null && backendAddressPoolValue2 !== undefined) {
                    var backendAddressPoolInstance2 = {};
                    outboundNatRuleJsonFormatInstance.backendAddressPool = backendAddressPoolInstance2;
                    
                    var idValue24 = backendAddressPoolValue2['id'];
                    if (idValue24 !== null && idValue24 !== undefined) {
                      var idInstance24 = idValue24;
                      backendAddressPoolInstance2.id = idInstance24;
                    }
                  }
                  
                  var provisioningStateValue7 = propertiesValue8['provisioningState'];
                  if (provisioningStateValue7 !== null && provisioningStateValue7 !== undefined) {
                    var provisioningStateInstance7 = provisioningStateValue7;
                    outboundNatRuleJsonFormatInstance.provisioningState = provisioningStateInstance7;
                  }
                }
                
                var nameValue7 = outboundNatRulesValue2['name'];
                if (nameValue7 !== null && nameValue7 !== undefined) {
                  var nameInstance7 = nameValue7;
                  outboundNatRuleJsonFormatInstance.name = nameInstance7;
                }
                
                var etagValue7 = outboundNatRulesValue2['etag'];
                if (etagValue7 !== null && etagValue7 !== undefined) {
                  var etagInstance7 = etagValue7;
                  outboundNatRuleJsonFormatInstance.etag = etagInstance7;
                }
                
                var idValue25 = outboundNatRulesValue2['id'];
                if (idValue25 !== null && idValue25 !== undefined) {
                  var idInstance25 = idValue25;
                  outboundNatRuleJsonFormatInstance.id = idInstance25;
                }
              }
            }
            
            var resourceGuidValue = propertiesValue['resourceGuid'];
            if (resourceGuidValue !== null && resourceGuidValue !== undefined) {
              var resourceGuidInstance = resourceGuidValue;
              loadBalancerInstance.resourceGuid = resourceGuidInstance;
            }
            
            var provisioningStateValue8 = propertiesValue['provisioningState'];
            if (provisioningStateValue8 !== null && provisioningStateValue8 !== undefined) {
              var provisioningStateInstance8 = provisioningStateValue8;
              loadBalancerInstance.provisioningState = provisioningStateInstance8;
            }
          }
          
          var etagValue8 = responseDoc['etag'];
          if (etagValue8 !== null && etagValue8 !== undefined) {
            var etagInstance8 = etagValue8;
            loadBalancerInstance.etag = etagInstance8;
          }
          
          var idValue26 = responseDoc['id'];
          if (idValue26 !== null && idValue26 !== undefined) {
            var idInstance26 = idValue26;
            loadBalancerInstance.id = idInstance26;
          }
          
          var nameValue8 = responseDoc['name'];
          if (nameValue8 !== null && nameValue8 !== undefined) {
            var nameInstance8 = nameValue8;
            loadBalancerInstance.name = nameInstance8;
          }
          
          var typeValue = responseDoc['type'];
          if (typeValue !== null && typeValue !== undefined) {
            var typeInstance = typeValue;
            loadBalancerInstance.type = typeInstance;
          }
          
          var locationValue = responseDoc['location'];
          if (locationValue !== null && locationValue !== undefined) {
            var locationInstance = locationValue;
            loadBalancerInstance.location = locationInstance;
          }
          
          var tagsSequenceElement = responseDoc['tags'];
          if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
            for (var property in tagsSequenceElement) {
              var tagsKey = property;
              var tagsValue = tagsSequenceElement[property];
              loadBalancerInstance.tags[tagsKey] = tagsValue;
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The List loadBalancer opertion retrieves all the loadbalancers in a
   * resource group.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  LoadBalancerOperations.prototype.list = function(resourceGroupName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Network';
    url2 = url2 + '/loadBalancers';
    var queryParameters = [];
    queryParameters.push('api-version=2015-05-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = { loadBalancers: [] };
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var valueArray = responseDoc['value'];
          if (valueArray !== null && valueArray !== undefined) {
            for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var valueValue = valueArray[loweredIndex1];
              var loadBalancerJsonFormatInstance = { backendAddressPools: [], frontendIpConfigurations: [], inboundNatPools: [], inboundNatRules: [], loadBalancingRules: [], outboundNatRules: [], probes: [], tags: {} };
              result.loadBalancers.push(loadBalancerJsonFormatInstance);
              
              var propertiesValue = valueValue['properties'];
              if (propertiesValue !== null && propertiesValue !== undefined) {
                var frontendIPConfigurationsArray = propertiesValue['frontendIPConfigurations'];
                if (frontendIPConfigurationsArray !== null && frontendIPConfigurationsArray !== undefined) {
                  for (var loweredIndex2 = 0; loweredIndex2 < frontendIPConfigurationsArray.length; loweredIndex2 = loweredIndex2 + 1) {
                    var frontendIPConfigurationsValue = frontendIPConfigurationsArray[loweredIndex2];
                    var frontendIpConfigurationJsonFormatInstance = { inboundNatPools: [], inboundNatRules: [], loadBalancingRules: [], outboundNatRules: [] };
                    loadBalancerJsonFormatInstance.frontendIpConfigurations.push(frontendIpConfigurationJsonFormatInstance);
                    
                    var propertiesValue2 = frontendIPConfigurationsValue['properties'];
                    if (propertiesValue2 !== null && propertiesValue2 !== undefined) {
                      var privateIPAddressValue = propertiesValue2['privateIPAddress'];
                      if (privateIPAddressValue !== null && privateIPAddressValue !== undefined) {
                        var privateIPAddressInstance = privateIPAddressValue;
                        frontendIpConfigurationJsonFormatInstance.privateIpAddress = privateIPAddressInstance;
                      }
                      
                      var privateIPAllocationMethodValue = propertiesValue2['privateIPAllocationMethod'];
                      if (privateIPAllocationMethodValue !== null && privateIPAllocationMethodValue !== undefined) {
                        var privateIPAllocationMethodInstance = privateIPAllocationMethodValue;
                        frontendIpConfigurationJsonFormatInstance.privateIpAllocationMethod = privateIPAllocationMethodInstance;
                      }
                      
                      var subnetValue = propertiesValue2['subnet'];
                      if (subnetValue !== null && subnetValue !== undefined) {
                        var subnetInstance = {};
                        frontendIpConfigurationJsonFormatInstance.subnet = subnetInstance;
                        
                        var idValue = subnetValue['id'];
                        if (idValue !== null && idValue !== undefined) {
                          var idInstance = idValue;
                          subnetInstance.id = idInstance;
                        }
                      }
                      
                      var publicIPAddressValue = propertiesValue2['publicIPAddress'];
                      if (publicIPAddressValue !== null && publicIPAddressValue !== undefined) {
                        var publicIPAddressInstance = {};
                        frontendIpConfigurationJsonFormatInstance.publicIpAddress = publicIPAddressInstance;
                        
                        var idValue2 = publicIPAddressValue['id'];
                        if (idValue2 !== null && idValue2 !== undefined) {
                          var idInstance2 = idValue2;
                          publicIPAddressInstance.id = idInstance2;
                        }
                      }
                      
                      var inboundNatRulesArray = propertiesValue2['inboundNatRules'];
                      if (inboundNatRulesArray !== null && inboundNatRulesArray !== undefined) {
                        for (var loweredIndex3 = 0; loweredIndex3 < inboundNatRulesArray.length; loweredIndex3 = loweredIndex3 + 1) {
                          var inboundNatRulesValue = inboundNatRulesArray[loweredIndex3];
                          var resourceIdInstance = {};
                          frontendIpConfigurationJsonFormatInstance.inboundNatRules.push(resourceIdInstance);
                          
                          var idValue3 = inboundNatRulesValue['id'];
                          if (idValue3 !== null && idValue3 !== undefined) {
                            var idInstance3 = idValue3;
                            resourceIdInstance.id = idInstance3;
                          }
                        }
                      }
                      
                      var inboundNatPoolsArray = propertiesValue2['inboundNatPools'];
                      if (inboundNatPoolsArray !== null && inboundNatPoolsArray !== undefined) {
                        for (var loweredIndex4 = 0; loweredIndex4 < inboundNatPoolsArray.length; loweredIndex4 = loweredIndex4 + 1) {
                          var inboundNatPoolsValue = inboundNatPoolsArray[loweredIndex4];
                          var resourceIdInstance2 = {};
                          frontendIpConfigurationJsonFormatInstance.inboundNatPools.push(resourceIdInstance2);
                          
                          var idValue4 = inboundNatPoolsValue['id'];
                          if (idValue4 !== null && idValue4 !== undefined) {
                            var idInstance4 = idValue4;
                            resourceIdInstance2.id = idInstance4;
                          }
                        }
                      }
                      
                      var outboundNatRulesArray = propertiesValue2['outboundNatRules'];
                      if (outboundNatRulesArray !== null && outboundNatRulesArray !== undefined) {
                        for (var loweredIndex5 = 0; loweredIndex5 < outboundNatRulesArray.length; loweredIndex5 = loweredIndex5 + 1) {
                          var outboundNatRulesValue = outboundNatRulesArray[loweredIndex5];
                          var resourceIdInstance3 = {};
                          frontendIpConfigurationJsonFormatInstance.outboundNatRules.push(resourceIdInstance3);
                          
                          var idValue5 = outboundNatRulesValue['id'];
                          if (idValue5 !== null && idValue5 !== undefined) {
                            var idInstance5 = idValue5;
                            resourceIdInstance3.id = idInstance5;
                          }
                        }
                      }
                      
                      var loadBalancingRulesArray = propertiesValue2['loadBalancingRules'];
                      if (loadBalancingRulesArray !== null && loadBalancingRulesArray !== undefined) {
                        for (var loweredIndex6 = 0; loweredIndex6 < loadBalancingRulesArray.length; loweredIndex6 = loweredIndex6 + 1) {
                          var loadBalancingRulesValue = loadBalancingRulesArray[loweredIndex6];
                          var resourceIdInstance4 = {};
                          frontendIpConfigurationJsonFormatInstance.loadBalancingRules.push(resourceIdInstance4);
                          
                          var idValue6 = loadBalancingRulesValue['id'];
                          if (idValue6 !== null && idValue6 !== undefined) {
                            var idInstance6 = idValue6;
                            resourceIdInstance4.id = idInstance6;
                          }
                        }
                      }
                      
                      var provisioningStateValue = propertiesValue2['provisioningState'];
                      if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
                        var provisioningStateInstance = provisioningStateValue;
                        frontendIpConfigurationJsonFormatInstance.provisioningState = provisioningStateInstance;
                      }
                    }
                    
                    var nameValue = frontendIPConfigurationsValue['name'];
                    if (nameValue !== null && nameValue !== undefined) {
                      var nameInstance = nameValue;
                      frontendIpConfigurationJsonFormatInstance.name = nameInstance;
                    }
                    
                    var etagValue = frontendIPConfigurationsValue['etag'];
                    if (etagValue !== null && etagValue !== undefined) {
                      var etagInstance = etagValue;
                      frontendIpConfigurationJsonFormatInstance.etag = etagInstance;
                    }
                    
                    var idValue7 = frontendIPConfigurationsValue['id'];
                    if (idValue7 !== null && idValue7 !== undefined) {
                      var idInstance7 = idValue7;
                      frontendIpConfigurationJsonFormatInstance.id = idInstance7;
                    }
                  }
                }
                
                var backendAddressPoolsArray = propertiesValue['backendAddressPools'];
                if (backendAddressPoolsArray !== null && backendAddressPoolsArray !== undefined) {
                  for (var loweredIndex7 = 0; loweredIndex7 < backendAddressPoolsArray.length; loweredIndex7 = loweredIndex7 + 1) {
                    var backendAddressPoolsValue = backendAddressPoolsArray[loweredIndex7];
                    var backendAddressPoolJsonFormatInstance = { backendIpConfigurations: [], loadBalancingRules: [] };
                    loadBalancerJsonFormatInstance.backendAddressPools.push(backendAddressPoolJsonFormatInstance);
                    
                    var propertiesValue3 = backendAddressPoolsValue['properties'];
                    if (propertiesValue3 !== null && propertiesValue3 !== undefined) {
                      var backendIPConfigurationsArray = propertiesValue3['backendIPConfigurations'];
                      if (backendIPConfigurationsArray !== null && backendIPConfigurationsArray !== undefined) {
                        for (var loweredIndex8 = 0; loweredIndex8 < backendIPConfigurationsArray.length; loweredIndex8 = loweredIndex8 + 1) {
                          var backendIPConfigurationsValue = backendIPConfigurationsArray[loweredIndex8];
                          var resourceIdInstance5 = {};
                          backendAddressPoolJsonFormatInstance.backendIpConfigurations.push(resourceIdInstance5);
                          
                          var idValue8 = backendIPConfigurationsValue['id'];
                          if (idValue8 !== null && idValue8 !== undefined) {
                            var idInstance8 = idValue8;
                            resourceIdInstance5.id = idInstance8;
                          }
                        }
                      }
                      
                      var loadBalancingRulesArray2 = propertiesValue3['loadBalancingRules'];
                      if (loadBalancingRulesArray2 !== null && loadBalancingRulesArray2 !== undefined) {
                        for (var loweredIndex9 = 0; loweredIndex9 < loadBalancingRulesArray2.length; loweredIndex9 = loweredIndex9 + 1) {
                          var loadBalancingRulesValue2 = loadBalancingRulesArray2[loweredIndex9];
                          var resourceIdInstance6 = {};
                          backendAddressPoolJsonFormatInstance.loadBalancingRules.push(resourceIdInstance6);
                          
                          var idValue9 = loadBalancingRulesValue2['id'];
                          if (idValue9 !== null && idValue9 !== undefined) {
                            var idInstance9 = idValue9;
                            resourceIdInstance6.id = idInstance9;
                          }
                        }
                      }
                      
                      var outboundNatRuleValue = propertiesValue3['outboundNatRule'];
                      if (outboundNatRuleValue !== null && outboundNatRuleValue !== undefined) {
                        var outboundNatRuleInstance = {};
                        backendAddressPoolJsonFormatInstance.outboundNatRule = outboundNatRuleInstance;
                        
                        var idValue10 = outboundNatRuleValue['id'];
                        if (idValue10 !== null && idValue10 !== undefined) {
                          var idInstance10 = idValue10;
                          outboundNatRuleInstance.id = idInstance10;
                        }
                      }
                      
                      var provisioningStateValue2 = propertiesValue3['provisioningState'];
                      if (provisioningStateValue2 !== null && provisioningStateValue2 !== undefined) {
                        var provisioningStateInstance2 = provisioningStateValue2;
                        backendAddressPoolJsonFormatInstance.provisioningState = provisioningStateInstance2;
                      }
                    }
                    
                    var nameValue2 = backendAddressPoolsValue['name'];
                    if (nameValue2 !== null && nameValue2 !== undefined) {
                      var nameInstance2 = nameValue2;
                      backendAddressPoolJsonFormatInstance.name = nameInstance2;
                    }
                    
                    var etagValue2 = backendAddressPoolsValue['etag'];
                    if (etagValue2 !== null && etagValue2 !== undefined) {
                      var etagInstance2 = etagValue2;
                      backendAddressPoolJsonFormatInstance.etag = etagInstance2;
                    }
                    
                    var idValue11 = backendAddressPoolsValue['id'];
                    if (idValue11 !== null && idValue11 !== undefined) {
                      var idInstance11 = idValue11;
                      backendAddressPoolJsonFormatInstance.id = idInstance11;
                    }
                  }
                }
                
                var loadBalancingRulesArray3 = propertiesValue['loadBalancingRules'];
                if (loadBalancingRulesArray3 !== null && loadBalancingRulesArray3 !== undefined) {
                  for (var loweredIndex10 = 0; loweredIndex10 < loadBalancingRulesArray3.length; loweredIndex10 = loweredIndex10 + 1) {
                    var loadBalancingRulesValue3 = loadBalancingRulesArray3[loweredIndex10];
                    var loadBalancingRuleJsonFormatInstance = {};
                    loadBalancerJsonFormatInstance.loadBalancingRules.push(loadBalancingRuleJsonFormatInstance);
                    
                    var propertiesValue4 = loadBalancingRulesValue3['properties'];
                    if (propertiesValue4 !== null && propertiesValue4 !== undefined) {
                      var frontendIPConfigurationValue = propertiesValue4['frontendIPConfiguration'];
                      if (frontendIPConfigurationValue !== null && frontendIPConfigurationValue !== undefined) {
                        var frontendIPConfigurationInstance = {};
                        loadBalancingRuleJsonFormatInstance.frontendIPConfiguration = frontendIPConfigurationInstance;
                        
                        var idValue12 = frontendIPConfigurationValue['id'];
                        if (idValue12 !== null && idValue12 !== undefined) {
                          var idInstance12 = idValue12;
                          frontendIPConfigurationInstance.id = idInstance12;
                        }
                      }
                      
                      var backendAddressPoolValue = propertiesValue4['backendAddressPool'];
                      if (backendAddressPoolValue !== null && backendAddressPoolValue !== undefined) {
                        var backendAddressPoolInstance = {};
                        loadBalancingRuleJsonFormatInstance.backendAddressPool = backendAddressPoolInstance;
                        
                        var idValue13 = backendAddressPoolValue['id'];
                        if (idValue13 !== null && idValue13 !== undefined) {
                          var idInstance13 = idValue13;
                          backendAddressPoolInstance.id = idInstance13;
                        }
                      }
                      
                      var probeValue = propertiesValue4['probe'];
                      if (probeValue !== null && probeValue !== undefined) {
                        var probeInstance = {};
                        loadBalancingRuleJsonFormatInstance.probe = probeInstance;
                        
                        var idValue14 = probeValue['id'];
                        if (idValue14 !== null && idValue14 !== undefined) {
                          var idInstance14 = idValue14;
                          probeInstance.id = idInstance14;
                        }
                      }
                      
                      var protocolValue = propertiesValue4['protocol'];
                      if (protocolValue !== null && protocolValue !== undefined) {
                        var protocolInstance = protocolValue;
                        loadBalancingRuleJsonFormatInstance.protocol = protocolInstance;
                      }
                      
                      var loadDistributionValue = propertiesValue4['loadDistribution'];
                      if (loadDistributionValue !== null && loadDistributionValue !== undefined) {
                        var loadDistributionInstance = loadDistributionValue;
                        loadBalancingRuleJsonFormatInstance.loadDistribution = loadDistributionInstance;
                      }
                      
                      var frontendPortValue = propertiesValue4['frontendPort'];
                      if (frontendPortValue !== null && frontendPortValue !== undefined) {
                        var frontendPortInstance = frontendPortValue;
                        loadBalancingRuleJsonFormatInstance.frontendPort = frontendPortInstance;
                      }
                      
                      var backendPortValue = propertiesValue4['backendPort'];
                      if (backendPortValue !== null && backendPortValue !== undefined) {
                        var backendPortInstance = backendPortValue;
                        loadBalancingRuleJsonFormatInstance.backendPort = backendPortInstance;
                      }
                      
                      var idleTimeoutInMinutesValue = propertiesValue4['idleTimeoutInMinutes'];
                      if (idleTimeoutInMinutesValue !== null && idleTimeoutInMinutesValue !== undefined) {
                        var idleTimeoutInMinutesInstance = idleTimeoutInMinutesValue;
                        loadBalancingRuleJsonFormatInstance.idleTimeoutInMinutes = idleTimeoutInMinutesInstance;
                      }
                      
                      var enableFloatingIPValue = propertiesValue4['enableFloatingIP'];
                      if (enableFloatingIPValue !== null && enableFloatingIPValue !== undefined) {
                        var enableFloatingIPInstance = enableFloatingIPValue;
                        loadBalancingRuleJsonFormatInstance.enableFloatingIP = enableFloatingIPInstance;
                      }
                      
                      var provisioningStateValue3 = propertiesValue4['provisioningState'];
                      if (provisioningStateValue3 !== null && provisioningStateValue3 !== undefined) {
                        var provisioningStateInstance3 = provisioningStateValue3;
                        loadBalancingRuleJsonFormatInstance.provisioningState = provisioningStateInstance3;
                      }
                    }
                    
                    var nameValue3 = loadBalancingRulesValue3['name'];
                    if (nameValue3 !== null && nameValue3 !== undefined) {
                      var nameInstance3 = nameValue3;
                      loadBalancingRuleJsonFormatInstance.name = nameInstance3;
                    }
                    
                    var etagValue3 = loadBalancingRulesValue3['etag'];
                    if (etagValue3 !== null && etagValue3 !== undefined) {
                      var etagInstance3 = etagValue3;
                      loadBalancingRuleJsonFormatInstance.etag = etagInstance3;
                    }
                    
                    var idValue15 = loadBalancingRulesValue3['id'];
                    if (idValue15 !== null && idValue15 !== undefined) {
                      var idInstance15 = idValue15;
                      loadBalancingRuleJsonFormatInstance.id = idInstance15;
                    }
                  }
                }
                
                var probesArray = propertiesValue['probes'];
                if (probesArray !== null && probesArray !== undefined) {
                  for (var loweredIndex11 = 0; loweredIndex11 < probesArray.length; loweredIndex11 = loweredIndex11 + 1) {
                    var probesValue = probesArray[loweredIndex11];
                    var probeJsonFormatInstance = { loadBalancingRules: [] };
                    loadBalancerJsonFormatInstance.probes.push(probeJsonFormatInstance);
                    
                    var propertiesValue5 = probesValue['properties'];
                    if (propertiesValue5 !== null && propertiesValue5 !== undefined) {
                      var loadBalancingRulesArray4 = propertiesValue5['loadBalancingRules'];
                      if (loadBalancingRulesArray4 !== null && loadBalancingRulesArray4 !== undefined) {
                        for (var loweredIndex12 = 0; loweredIndex12 < loadBalancingRulesArray4.length; loweredIndex12 = loweredIndex12 + 1) {
                          var loadBalancingRulesValue4 = loadBalancingRulesArray4[loweredIndex12];
                          var resourceIdInstance7 = {};
                          probeJsonFormatInstance.loadBalancingRules.push(resourceIdInstance7);
                          
                          var idValue16 = loadBalancingRulesValue4['id'];
                          if (idValue16 !== null && idValue16 !== undefined) {
                            var idInstance16 = idValue16;
                            resourceIdInstance7.id = idInstance16;
                          }
                        }
                      }
                      
                      var protocolValue2 = propertiesValue5['protocol'];
                      if (protocolValue2 !== null && protocolValue2 !== undefined) {
                        var protocolInstance2 = protocolValue2;
                        probeJsonFormatInstance.protocol = protocolInstance2;
                      }
                      
                      var portValue = propertiesValue5['port'];
                      if (portValue !== null && portValue !== undefined) {
                        var portInstance = portValue;
                        probeJsonFormatInstance.port = portInstance;
                      }
                      
                      var intervalInSecondsValue = propertiesValue5['intervalInSeconds'];
                      if (intervalInSecondsValue !== null && intervalInSecondsValue !== undefined) {
                        var intervalInSecondsInstance = intervalInSecondsValue;
                        probeJsonFormatInstance.intervalInSeconds = intervalInSecondsInstance;
                      }
                      
                      var numberOfProbesValue = propertiesValue5['numberOfProbes'];
                      if (numberOfProbesValue !== null && numberOfProbesValue !== undefined) {
                        var numberOfProbesInstance = numberOfProbesValue;
                        probeJsonFormatInstance.numberOfProbes = numberOfProbesInstance;
                      }
                      
                      var requestPathValue = propertiesValue5['requestPath'];
                      if (requestPathValue !== null && requestPathValue !== undefined) {
                        var requestPathInstance = requestPathValue;
                        probeJsonFormatInstance.requestPath = requestPathInstance;
                      }
                      
                      var provisioningStateValue4 = propertiesValue5['provisioningState'];
                      if (provisioningStateValue4 !== null && provisioningStateValue4 !== undefined) {
                        var provisioningStateInstance4 = provisioningStateValue4;
                        probeJsonFormatInstance.provisioningState = provisioningStateInstance4;
                      }
                    }
                    
                    var nameValue4 = probesValue['name'];
                    if (nameValue4 !== null && nameValue4 !== undefined) {
                      var nameInstance4 = nameValue4;
                      probeJsonFormatInstance.name = nameInstance4;
                    }
                    
                    var etagValue4 = probesValue['etag'];
                    if (etagValue4 !== null && etagValue4 !== undefined) {
                      var etagInstance4 = etagValue4;
                      probeJsonFormatInstance.etag = etagInstance4;
                    }
                    
                    var idValue17 = probesValue['id'];
                    if (idValue17 !== null && idValue17 !== undefined) {
                      var idInstance17 = idValue17;
                      probeJsonFormatInstance.id = idInstance17;
                    }
                  }
                }
                
                var inboundNatRulesArray2 = propertiesValue['inboundNatRules'];
                if (inboundNatRulesArray2 !== null && inboundNatRulesArray2 !== undefined) {
                  for (var loweredIndex13 = 0; loweredIndex13 < inboundNatRulesArray2.length; loweredIndex13 = loweredIndex13 + 1) {
                    var inboundNatRulesValue2 = inboundNatRulesArray2[loweredIndex13];
                    var inboundNatRuleJsonFormatInstance = {};
                    loadBalancerJsonFormatInstance.inboundNatRules.push(inboundNatRuleJsonFormatInstance);
                    
                    var propertiesValue6 = inboundNatRulesValue2['properties'];
                    if (propertiesValue6 !== null && propertiesValue6 !== undefined) {
                      var frontendIPConfigurationValue2 = propertiesValue6['frontendIPConfiguration'];
                      if (frontendIPConfigurationValue2 !== null && frontendIPConfigurationValue2 !== undefined) {
                        var frontendIPConfigurationInstance2 = {};
                        inboundNatRuleJsonFormatInstance.frontendIPConfiguration = frontendIPConfigurationInstance2;
                        
                        var idValue18 = frontendIPConfigurationValue2['id'];
                        if (idValue18 !== null && idValue18 !== undefined) {
                          var idInstance18 = idValue18;
                          frontendIPConfigurationInstance2.id = idInstance18;
                        }
                      }
                      
                      var backendIPConfigurationValue = propertiesValue6['backendIPConfiguration'];
                      if (backendIPConfigurationValue !== null && backendIPConfigurationValue !== undefined) {
                        var backendIPConfigurationInstance = {};
                        inboundNatRuleJsonFormatInstance.backendIPConfiguration = backendIPConfigurationInstance;
                        
                        var idValue19 = backendIPConfigurationValue['id'];
                        if (idValue19 !== null && idValue19 !== undefined) {
                          var idInstance19 = idValue19;
                          backendIPConfigurationInstance.id = idInstance19;
                        }
                      }
                      
                      var protocolValue3 = propertiesValue6['protocol'];
                      if (protocolValue3 !== null && protocolValue3 !== undefined) {
                        var protocolInstance3 = protocolValue3;
                        inboundNatRuleJsonFormatInstance.protocol = protocolInstance3;
                      }
                      
                      var frontendPortValue2 = propertiesValue6['frontendPort'];
                      if (frontendPortValue2 !== null && frontendPortValue2 !== undefined) {
                        var frontendPortInstance2 = frontendPortValue2;
                        inboundNatRuleJsonFormatInstance.frontendPort = frontendPortInstance2;
                      }
                      
                      var backendPortValue2 = propertiesValue6['backendPort'];
                      if (backendPortValue2 !== null && backendPortValue2 !== undefined) {
                        var backendPortInstance2 = backendPortValue2;
                        inboundNatRuleJsonFormatInstance.backendPort = backendPortInstance2;
                      }
                      
                      var idleTimeoutInMinutesValue2 = propertiesValue6['idleTimeoutInMinutes'];
                      if (idleTimeoutInMinutesValue2 !== null && idleTimeoutInMinutesValue2 !== undefined) {
                        var idleTimeoutInMinutesInstance2 = idleTimeoutInMinutesValue2;
                        inboundNatRuleJsonFormatInstance.idleTimeoutInMinutes = idleTimeoutInMinutesInstance2;
                      }
                      
                      var enableFloatingIPValue2 = propertiesValue6['enableFloatingIP'];
                      if (enableFloatingIPValue2 !== null && enableFloatingIPValue2 !== undefined) {
                        var enableFloatingIPInstance2 = enableFloatingIPValue2;
                        inboundNatRuleJsonFormatInstance.enableFloatingIP = enableFloatingIPInstance2;
                      }
                      
                      var provisioningStateValue5 = propertiesValue6['provisioningState'];
                      if (provisioningStateValue5 !== null && provisioningStateValue5 !== undefined) {
                        var provisioningStateInstance5 = provisioningStateValue5;
                        inboundNatRuleJsonFormatInstance.provisioningState = provisioningStateInstance5;
                      }
                    }
                    
                    var nameValue5 = inboundNatRulesValue2['name'];
                    if (nameValue5 !== null && nameValue5 !== undefined) {
                      var nameInstance5 = nameValue5;
                      inboundNatRuleJsonFormatInstance.name = nameInstance5;
                    }
                    
                    var etagValue5 = inboundNatRulesValue2['etag'];
                    if (etagValue5 !== null && etagValue5 !== undefined) {
                      var etagInstance5 = etagValue5;
                      inboundNatRuleJsonFormatInstance.etag = etagInstance5;
                    }
                    
                    var idValue20 = inboundNatRulesValue2['id'];
                    if (idValue20 !== null && idValue20 !== undefined) {
                      var idInstance20 = idValue20;
                      inboundNatRuleJsonFormatInstance.id = idInstance20;
                    }
                  }
                }
                
                var inboundNatPoolsArray2 = propertiesValue['inboundNatPools'];
                if (inboundNatPoolsArray2 !== null && inboundNatPoolsArray2 !== undefined) {
                  for (var loweredIndex14 = 0; loweredIndex14 < inboundNatPoolsArray2.length; loweredIndex14 = loweredIndex14 + 1) {
                    var inboundNatPoolsValue2 = inboundNatPoolsArray2[loweredIndex14];
                    var inboundNatPoolJsonFormatInstance = {};
                    loadBalancerJsonFormatInstance.inboundNatPools.push(inboundNatPoolJsonFormatInstance);
                    
                    var propertiesValue7 = inboundNatPoolsValue2['properties'];
                    if (propertiesValue7 !== null && propertiesValue7 !== undefined) {
                      var frontendIPConfigurationValue3 = propertiesValue7['frontendIPConfiguration'];
                      if (frontendIPConfigurationValue3 !== null && frontendIPConfigurationValue3 !== undefined) {
                        var frontendIPConfigurationInstance3 = {};
                        inboundNatPoolJsonFormatInstance.frontendIPConfiguration = frontendIPConfigurationInstance3;
                        
                        var idValue21 = frontendIPConfigurationValue3['id'];
                        if (idValue21 !== null && idValue21 !== undefined) {
                          var idInstance21 = idValue21;
                          frontendIPConfigurationInstance3.id = idInstance21;
                        }
                      }
                      
                      var protocolValue4 = propertiesValue7['protocol'];
                      if (protocolValue4 !== null && protocolValue4 !== undefined) {
                        var protocolInstance4 = protocolValue4;
                        inboundNatPoolJsonFormatInstance.protocol = protocolInstance4;
                      }
                      
                      var frontendPortRangeStartValue = propertiesValue7['frontendPortRangeStart'];
                      if (frontendPortRangeStartValue !== null && frontendPortRangeStartValue !== undefined) {
                        var frontendPortRangeStartInstance = frontendPortRangeStartValue;
                        inboundNatPoolJsonFormatInstance.frontendPortRangeStart = frontendPortRangeStartInstance;
                      }
                      
                      var frontendPortRangeEndValue = propertiesValue7['frontendPortRangeEnd'];
                      if (frontendPortRangeEndValue !== null && frontendPortRangeEndValue !== undefined) {
                        var frontendPortRangeEndInstance = frontendPortRangeEndValue;
                        inboundNatPoolJsonFormatInstance.frontendPortRangeEnd = frontendPortRangeEndInstance;
                      }
                      
                      var backendPortValue3 = propertiesValue7['backendPort'];
                      if (backendPortValue3 !== null && backendPortValue3 !== undefined) {
                        var backendPortInstance3 = backendPortValue3;
                        inboundNatPoolJsonFormatInstance.backendPort = backendPortInstance3;
                      }
                      
                      var provisioningStateValue6 = propertiesValue7['provisioningState'];
                      if (provisioningStateValue6 !== null && provisioningStateValue6 !== undefined) {
                        var provisioningStateInstance6 = provisioningStateValue6;
                        inboundNatPoolJsonFormatInstance.provisioningState = provisioningStateInstance6;
                      }
                    }
                    
                    var nameValue6 = inboundNatPoolsValue2['name'];
                    if (nameValue6 !== null && nameValue6 !== undefined) {
                      var nameInstance6 = nameValue6;
                      inboundNatPoolJsonFormatInstance.name = nameInstance6;
                    }
                    
                    var etagValue6 = inboundNatPoolsValue2['etag'];
                    if (etagValue6 !== null && etagValue6 !== undefined) {
                      var etagInstance6 = etagValue6;
                      inboundNatPoolJsonFormatInstance.etag = etagInstance6;
                    }
                    
                    var idValue22 = inboundNatPoolsValue2['id'];
                    if (idValue22 !== null && idValue22 !== undefined) {
                      var idInstance22 = idValue22;
                      inboundNatPoolJsonFormatInstance.id = idInstance22;
                    }
                  }
                }
                
                var outboundNatRulesArray2 = propertiesValue['outboundNatRules'];
                if (outboundNatRulesArray2 !== null && outboundNatRulesArray2 !== undefined) {
                  for (var loweredIndex15 = 0; loweredIndex15 < outboundNatRulesArray2.length; loweredIndex15 = loweredIndex15 + 1) {
                    var outboundNatRulesValue2 = outboundNatRulesArray2[loweredIndex15];
                    var outboundNatRuleJsonFormatInstance = { frontendIpConfigurations: [] };
                    loadBalancerJsonFormatInstance.outboundNatRules.push(outboundNatRuleJsonFormatInstance);
                    
                    var propertiesValue8 = outboundNatRulesValue2['properties'];
                    if (propertiesValue8 !== null && propertiesValue8 !== undefined) {
                      var allocatedOutboundPortsValue = propertiesValue8['allocatedOutboundPorts'];
                      if (allocatedOutboundPortsValue !== null && allocatedOutboundPortsValue !== undefined) {
                        var allocatedOutboundPortsInstance = allocatedOutboundPortsValue;
                        outboundNatRuleJsonFormatInstance.allocatedOutboundPorts = allocatedOutboundPortsInstance;
                      }
                      
                      var frontendIPConfigurationsArray2 = propertiesValue8['frontendIPConfigurations'];
                      if (frontendIPConfigurationsArray2 !== null && frontendIPConfigurationsArray2 !== undefined) {
                        for (var loweredIndex16 = 0; loweredIndex16 < frontendIPConfigurationsArray2.length; loweredIndex16 = loweredIndex16 + 1) {
                          var frontendIPConfigurationsValue2 = frontendIPConfigurationsArray2[loweredIndex16];
                          var resourceIdInstance8 = {};
                          outboundNatRuleJsonFormatInstance.frontendIpConfigurations.push(resourceIdInstance8);
                          
                          var idValue23 = frontendIPConfigurationsValue2['id'];
                          if (idValue23 !== null && idValue23 !== undefined) {
                            var idInstance23 = idValue23;
                            resourceIdInstance8.id = idInstance23;
                          }
                        }
                      }
                      
                      var backendAddressPoolValue2 = propertiesValue8['backendAddressPool'];
                      if (backendAddressPoolValue2 !== null && backendAddressPoolValue2 !== undefined) {
                        var backendAddressPoolInstance2 = {};
                        outboundNatRuleJsonFormatInstance.backendAddressPool = backendAddressPoolInstance2;
                        
                        var idValue24 = backendAddressPoolValue2['id'];
                        if (idValue24 !== null && idValue24 !== undefined) {
                          var idInstance24 = idValue24;
                          backendAddressPoolInstance2.id = idInstance24;
                        }
                      }
                      
                      var provisioningStateValue7 = propertiesValue8['provisioningState'];
                      if (provisioningStateValue7 !== null && provisioningStateValue7 !== undefined) {
                        var provisioningStateInstance7 = provisioningStateValue7;
                        outboundNatRuleJsonFormatInstance.provisioningState = provisioningStateInstance7;
                      }
                    }
                    
                    var nameValue7 = outboundNatRulesValue2['name'];
                    if (nameValue7 !== null && nameValue7 !== undefined) {
                      var nameInstance7 = nameValue7;
                      outboundNatRuleJsonFormatInstance.name = nameInstance7;
                    }
                    
                    var etagValue7 = outboundNatRulesValue2['etag'];
                    if (etagValue7 !== null && etagValue7 !== undefined) {
                      var etagInstance7 = etagValue7;
                      outboundNatRuleJsonFormatInstance.etag = etagInstance7;
                    }
                    
                    var idValue25 = outboundNatRulesValue2['id'];
                    if (idValue25 !== null && idValue25 !== undefined) {
                      var idInstance25 = idValue25;
                      outboundNatRuleJsonFormatInstance.id = idInstance25;
                    }
                  }
                }
                
                var resourceGuidValue = propertiesValue['resourceGuid'];
                if (resourceGuidValue !== null && resourceGuidValue !== undefined) {
                  var resourceGuidInstance = resourceGuidValue;
                  loadBalancerJsonFormatInstance.resourceGuid = resourceGuidInstance;
                }
                
                var provisioningStateValue8 = propertiesValue['provisioningState'];
                if (provisioningStateValue8 !== null && provisioningStateValue8 !== undefined) {
                  var provisioningStateInstance8 = provisioningStateValue8;
                  loadBalancerJsonFormatInstance.provisioningState = provisioningStateInstance8;
                }
              }
              
              var etagValue8 = valueValue['etag'];
              if (etagValue8 !== null && etagValue8 !== undefined) {
                var etagInstance8 = etagValue8;
                loadBalancerJsonFormatInstance.etag = etagInstance8;
              }
              
              var idValue26 = valueValue['id'];
              if (idValue26 !== null && idValue26 !== undefined) {
                var idInstance26 = idValue26;
                loadBalancerJsonFormatInstance.id = idInstance26;
              }
              
              var nameValue8 = valueValue['name'];
              if (nameValue8 !== null && nameValue8 !== undefined) {
                var nameInstance8 = nameValue8;
                loadBalancerJsonFormatInstance.name = nameInstance8;
              }
              
              var typeValue = valueValue['type'];
              if (typeValue !== null && typeValue !== undefined) {
                var typeInstance = typeValue;
                loadBalancerJsonFormatInstance.type = typeInstance;
              }
              
              var locationValue = valueValue['location'];
              if (locationValue !== null && locationValue !== undefined) {
                var locationInstance = locationValue;
                loadBalancerJsonFormatInstance.location = locationInstance;
              }
              
              var tagsSequenceElement = valueValue['tags'];
              if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
                for (var property in tagsSequenceElement) {
                  var tagsKey = property;
                  var tagsValue = tagsSequenceElement[property];
                  loadBalancerJsonFormatInstance.tags[tagsKey] = tagsValue;
                }
              }
            }
          }
          
          var nextLinkValue = responseDoc['nextLink'];
          if (nextLinkValue !== null && nextLinkValue !== undefined) {
            var nextLinkInstance = nextLinkValue;
            result.nextLink = nextLinkInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The List loadBalancer opertion retrieves all the loadbalancers in a
   * subscription.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  LoadBalancerOperations.prototype.listAll = function(callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Network';
    url2 = url2 + '/loadBalancers';
    var queryParameters = [];
    queryParameters.push('api-version=2015-05-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = { loadBalancers: [] };
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var valueArray = responseDoc['value'];
          if (valueArray !== null && valueArray !== undefined) {
            for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var valueValue = valueArray[loweredIndex1];
              var loadBalancerJsonFormatInstance = { backendAddressPools: [], frontendIpConfigurations: [], inboundNatPools: [], inboundNatRules: [], loadBalancingRules: [], outboundNatRules: [], probes: [], tags: {} };
              result.loadBalancers.push(loadBalancerJsonFormatInstance);
              
              var propertiesValue = valueValue['properties'];
              if (propertiesValue !== null && propertiesValue !== undefined) {
                var frontendIPConfigurationsArray = propertiesValue['frontendIPConfigurations'];
                if (frontendIPConfigurationsArray !== null && frontendIPConfigurationsArray !== undefined) {
                  for (var loweredIndex2 = 0; loweredIndex2 < frontendIPConfigurationsArray.length; loweredIndex2 = loweredIndex2 + 1) {
                    var frontendIPConfigurationsValue = frontendIPConfigurationsArray[loweredIndex2];
                    var frontendIpConfigurationJsonFormatInstance = { inboundNatPools: [], inboundNatRules: [], loadBalancingRules: [], outboundNatRules: [] };
                    loadBalancerJsonFormatInstance.frontendIpConfigurations.push(frontendIpConfigurationJsonFormatInstance);
                    
                    var propertiesValue2 = frontendIPConfigurationsValue['properties'];
                    if (propertiesValue2 !== null && propertiesValue2 !== undefined) {
                      var privateIPAddressValue = propertiesValue2['privateIPAddress'];
                      if (privateIPAddressValue !== null && privateIPAddressValue !== undefined) {
                        var privateIPAddressInstance = privateIPAddressValue;
                        frontendIpConfigurationJsonFormatInstance.privateIpAddress = privateIPAddressInstance;
                      }
                      
                      var privateIPAllocationMethodValue = propertiesValue2['privateIPAllocationMethod'];
                      if (privateIPAllocationMethodValue !== null && privateIPAllocationMethodValue !== undefined) {
                        var privateIPAllocationMethodInstance = privateIPAllocationMethodValue;
                        frontendIpConfigurationJsonFormatInstance.privateIpAllocationMethod = privateIPAllocationMethodInstance;
                      }
                      
                      var subnetValue = propertiesValue2['subnet'];
                      if (subnetValue !== null && subnetValue !== undefined) {
                        var subnetInstance = {};
                        frontendIpConfigurationJsonFormatInstance.subnet = subnetInstance;
                        
                        var idValue = subnetValue['id'];
                        if (idValue !== null && idValue !== undefined) {
                          var idInstance = idValue;
                          subnetInstance.id = idInstance;
                        }
                      }
                      
                      var publicIPAddressValue = propertiesValue2['publicIPAddress'];
                      if (publicIPAddressValue !== null && publicIPAddressValue !== undefined) {
                        var publicIPAddressInstance = {};
                        frontendIpConfigurationJsonFormatInstance.publicIpAddress = publicIPAddressInstance;
                        
                        var idValue2 = publicIPAddressValue['id'];
                        if (idValue2 !== null && idValue2 !== undefined) {
                          var idInstance2 = idValue2;
                          publicIPAddressInstance.id = idInstance2;
                        }
                      }
                      
                      var inboundNatRulesArray = propertiesValue2['inboundNatRules'];
                      if (inboundNatRulesArray !== null && inboundNatRulesArray !== undefined) {
                        for (var loweredIndex3 = 0; loweredIndex3 < inboundNatRulesArray.length; loweredIndex3 = loweredIndex3 + 1) {
                          var inboundNatRulesValue = inboundNatRulesArray[loweredIndex3];
                          var resourceIdInstance = {};
                          frontendIpConfigurationJsonFormatInstance.inboundNatRules.push(resourceIdInstance);
                          
                          var idValue3 = inboundNatRulesValue['id'];
                          if (idValue3 !== null && idValue3 !== undefined) {
                            var idInstance3 = idValue3;
                            resourceIdInstance.id = idInstance3;
                          }
                        }
                      }
                      
                      var inboundNatPoolsArray = propertiesValue2['inboundNatPools'];
                      if (inboundNatPoolsArray !== null && inboundNatPoolsArray !== undefined) {
                        for (var loweredIndex4 = 0; loweredIndex4 < inboundNatPoolsArray.length; loweredIndex4 = loweredIndex4 + 1) {
                          var inboundNatPoolsValue = inboundNatPoolsArray[loweredIndex4];
                          var resourceIdInstance2 = {};
                          frontendIpConfigurationJsonFormatInstance.inboundNatPools.push(resourceIdInstance2);
                          
                          var idValue4 = inboundNatPoolsValue['id'];
                          if (idValue4 !== null && idValue4 !== undefined) {
                            var idInstance4 = idValue4;
                            resourceIdInstance2.id = idInstance4;
                          }
                        }
                      }
                      
                      var outboundNatRulesArray = propertiesValue2['outboundNatRules'];
                      if (outboundNatRulesArray !== null && outboundNatRulesArray !== undefined) {
                        for (var loweredIndex5 = 0; loweredIndex5 < outboundNatRulesArray.length; loweredIndex5 = loweredIndex5 + 1) {
                          var outboundNatRulesValue = outboundNatRulesArray[loweredIndex5];
                          var resourceIdInstance3 = {};
                          frontendIpConfigurationJsonFormatInstance.outboundNatRules.push(resourceIdInstance3);
                          
                          var idValue5 = outboundNatRulesValue['id'];
                          if (idValue5 !== null && idValue5 !== undefined) {
                            var idInstance5 = idValue5;
                            resourceIdInstance3.id = idInstance5;
                          }
                        }
                      }
                      
                      var loadBalancingRulesArray = propertiesValue2['loadBalancingRules'];
                      if (loadBalancingRulesArray !== null && loadBalancingRulesArray !== undefined) {
                        for (var loweredIndex6 = 0; loweredIndex6 < loadBalancingRulesArray.length; loweredIndex6 = loweredIndex6 + 1) {
                          var loadBalancingRulesValue = loadBalancingRulesArray[loweredIndex6];
                          var resourceIdInstance4 = {};
                          frontendIpConfigurationJsonFormatInstance.loadBalancingRules.push(resourceIdInstance4);
                          
                          var idValue6 = loadBalancingRulesValue['id'];
                          if (idValue6 !== null && idValue6 !== undefined) {
                            var idInstance6 = idValue6;
                            resourceIdInstance4.id = idInstance6;
                          }
                        }
                      }
                      
                      var provisioningStateValue = propertiesValue2['provisioningState'];
                      if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
                        var provisioningStateInstance = provisioningStateValue;
                        frontendIpConfigurationJsonFormatInstance.provisioningState = provisioningStateInstance;
                      }
                    }
                    
                    var nameValue = frontendIPConfigurationsValue['name'];
                    if (nameValue !== null && nameValue !== undefined) {
                      var nameInstance = nameValue;
                      frontendIpConfigurationJsonFormatInstance.name = nameInstance;
                    }
                    
                    var etagValue = frontendIPConfigurationsValue['etag'];
                    if (etagValue !== null && etagValue !== undefined) {
                      var etagInstance = etagValue;
                      frontendIpConfigurationJsonFormatInstance.etag = etagInstance;
                    }
                    
                    var idValue7 = frontendIPConfigurationsValue['id'];
                    if (idValue7 !== null && idValue7 !== undefined) {
                      var idInstance7 = idValue7;
                      frontendIpConfigurationJsonFormatInstance.id = idInstance7;
                    }
                  }
                }
                
                var backendAddressPoolsArray = propertiesValue['backendAddressPools'];
                if (backendAddressPoolsArray !== null && backendAddressPoolsArray !== undefined) {
                  for (var loweredIndex7 = 0; loweredIndex7 < backendAddressPoolsArray.length; loweredIndex7 = loweredIndex7 + 1) {
                    var backendAddressPoolsValue = backendAddressPoolsArray[loweredIndex7];
                    var backendAddressPoolJsonFormatInstance = { backendIpConfigurations: [], loadBalancingRules: [] };
                    loadBalancerJsonFormatInstance.backendAddressPools.push(backendAddressPoolJsonFormatInstance);
                    
                    var propertiesValue3 = backendAddressPoolsValue['properties'];
                    if (propertiesValue3 !== null && propertiesValue3 !== undefined) {
                      var backendIPConfigurationsArray = propertiesValue3['backendIPConfigurations'];
                      if (backendIPConfigurationsArray !== null && backendIPConfigurationsArray !== undefined) {
                        for (var loweredIndex8 = 0; loweredIndex8 < backendIPConfigurationsArray.length; loweredIndex8 = loweredIndex8 + 1) {
                          var backendIPConfigurationsValue = backendIPConfigurationsArray[loweredIndex8];
                          var resourceIdInstance5 = {};
                          backendAddressPoolJsonFormatInstance.backendIpConfigurations.push(resourceIdInstance5);
                          
                          var idValue8 = backendIPConfigurationsValue['id'];
                          if (idValue8 !== null && idValue8 !== undefined) {
                            var idInstance8 = idValue8;
                            resourceIdInstance5.id = idInstance8;
                          }
                        }
                      }
                      
                      var loadBalancingRulesArray2 = propertiesValue3['loadBalancingRules'];
                      if (loadBalancingRulesArray2 !== null && loadBalancingRulesArray2 !== undefined) {
                        for (var loweredIndex9 = 0; loweredIndex9 < loadBalancingRulesArray2.length; loweredIndex9 = loweredIndex9 + 1) {
                          var loadBalancingRulesValue2 = loadBalancingRulesArray2[loweredIndex9];
                          var resourceIdInstance6 = {};
                          backendAddressPoolJsonFormatInstance.loadBalancingRules.push(resourceIdInstance6);
                          
                          var idValue9 = loadBalancingRulesValue2['id'];
                          if (idValue9 !== null && idValue9 !== undefined) {
                            var idInstance9 = idValue9;
                            resourceIdInstance6.id = idInstance9;
                          }
                        }
                      }
                      
                      var outboundNatRuleValue = propertiesValue3['outboundNatRule'];
                      if (outboundNatRuleValue !== null && outboundNatRuleValue !== undefined) {
                        var outboundNatRuleInstance = {};
                        backendAddressPoolJsonFormatInstance.outboundNatRule = outboundNatRuleInstance;
                        
                        var idValue10 = outboundNatRuleValue['id'];
                        if (idValue10 !== null && idValue10 !== undefined) {
                          var idInstance10 = idValue10;
                          outboundNatRuleInstance.id = idInstance10;
                        }
                      }
                      
                      var provisioningStateValue2 = propertiesValue3['provisioningState'];
                      if (provisioningStateValue2 !== null && provisioningStateValue2 !== undefined) {
                        var provisioningStateInstance2 = provisioningStateValue2;
                        backendAddressPoolJsonFormatInstance.provisioningState = provisioningStateInstance2;
                      }
                    }
                    
                    var nameValue2 = backendAddressPoolsValue['name'];
                    if (nameValue2 !== null && nameValue2 !== undefined) {
                      var nameInstance2 = nameValue2;
                      backendAddressPoolJsonFormatInstance.name = nameInstance2;
                    }
                    
                    var etagValue2 = backendAddressPoolsValue['etag'];
                    if (etagValue2 !== null && etagValue2 !== undefined) {
                      var etagInstance2 = etagValue2;
                      backendAddressPoolJsonFormatInstance.etag = etagInstance2;
                    }
                    
                    var idValue11 = backendAddressPoolsValue['id'];
                    if (idValue11 !== null && idValue11 !== undefined) {
                      var idInstance11 = idValue11;
                      backendAddressPoolJsonFormatInstance.id = idInstance11;
                    }
                  }
                }
                
                var loadBalancingRulesArray3 = propertiesValue['loadBalancingRules'];
                if (loadBalancingRulesArray3 !== null && loadBalancingRulesArray3 !== undefined) {
                  for (var loweredIndex10 = 0; loweredIndex10 < loadBalancingRulesArray3.length; loweredIndex10 = loweredIndex10 + 1) {
                    var loadBalancingRulesValue3 = loadBalancingRulesArray3[loweredIndex10];
                    var loadBalancingRuleJsonFormatInstance = {};
                    loadBalancerJsonFormatInstance.loadBalancingRules.push(loadBalancingRuleJsonFormatInstance);
                    
                    var propertiesValue4 = loadBalancingRulesValue3['properties'];
                    if (propertiesValue4 !== null && propertiesValue4 !== undefined) {
                      var frontendIPConfigurationValue = propertiesValue4['frontendIPConfiguration'];
                      if (frontendIPConfigurationValue !== null && frontendIPConfigurationValue !== undefined) {
                        var frontendIPConfigurationInstance = {};
                        loadBalancingRuleJsonFormatInstance.frontendIPConfiguration = frontendIPConfigurationInstance;
                        
                        var idValue12 = frontendIPConfigurationValue['id'];
                        if (idValue12 !== null && idValue12 !== undefined) {
                          var idInstance12 = idValue12;
                          frontendIPConfigurationInstance.id = idInstance12;
                        }
                      }
                      
                      var backendAddressPoolValue = propertiesValue4['backendAddressPool'];
                      if (backendAddressPoolValue !== null && backendAddressPoolValue !== undefined) {
                        var backendAddressPoolInstance = {};
                        loadBalancingRuleJsonFormatInstance.backendAddressPool = backendAddressPoolInstance;
                        
                        var idValue13 = backendAddressPoolValue['id'];
                        if (idValue13 !== null && idValue13 !== undefined) {
                          var idInstance13 = idValue13;
                          backendAddressPoolInstance.id = idInstance13;
                        }
                      }
                      
                      var probeValue = propertiesValue4['probe'];
                      if (probeValue !== null && probeValue !== undefined) {
                        var probeInstance = {};
                        loadBalancingRuleJsonFormatInstance.probe = probeInstance;
                        
                        var idValue14 = probeValue['id'];
                        if (idValue14 !== null && idValue14 !== undefined) {
                          var idInstance14 = idValue14;
                          probeInstance.id = idInstance14;
                        }
                      }
                      
                      var protocolValue = propertiesValue4['protocol'];
                      if (protocolValue !== null && protocolValue !== undefined) {
                        var protocolInstance = protocolValue;
                        loadBalancingRuleJsonFormatInstance.protocol = protocolInstance;
                      }
                      
                      var loadDistributionValue = propertiesValue4['loadDistribution'];
                      if (loadDistributionValue !== null && loadDistributionValue !== undefined) {
                        var loadDistributionInstance = loadDistributionValue;
                        loadBalancingRuleJsonFormatInstance.loadDistribution = loadDistributionInstance;
                      }
                      
                      var frontendPortValue = propertiesValue4['frontendPort'];
                      if (frontendPortValue !== null && frontendPortValue !== undefined) {
                        var frontendPortInstance = frontendPortValue;
                        loadBalancingRuleJsonFormatInstance.frontendPort = frontendPortInstance;
                      }
                      
                      var backendPortValue = propertiesValue4['backendPort'];
                      if (backendPortValue !== null && backendPortValue !== undefined) {
                        var backendPortInstance = backendPortValue;
                        loadBalancingRuleJsonFormatInstance.backendPort = backendPortInstance;
                      }
                      
                      var idleTimeoutInMinutesValue = propertiesValue4['idleTimeoutInMinutes'];
                      if (idleTimeoutInMinutesValue !== null && idleTimeoutInMinutesValue !== undefined) {
                        var idleTimeoutInMinutesInstance = idleTimeoutInMinutesValue;
                        loadBalancingRuleJsonFormatInstance.idleTimeoutInMinutes = idleTimeoutInMinutesInstance;
                      }
                      
                      var enableFloatingIPValue = propertiesValue4['enableFloatingIP'];
                      if (enableFloatingIPValue !== null && enableFloatingIPValue !== undefined) {
                        var enableFloatingIPInstance = enableFloatingIPValue;
                        loadBalancingRuleJsonFormatInstance.enableFloatingIP = enableFloatingIPInstance;
                      }
                      
                      var provisioningStateValue3 = propertiesValue4['provisioningState'];
                      if (provisioningStateValue3 !== null && provisioningStateValue3 !== undefined) {
                        var provisioningStateInstance3 = provisioningStateValue3;
                        loadBalancingRuleJsonFormatInstance.provisioningState = provisioningStateInstance3;
                      }
                    }
                    
                    var nameValue3 = loadBalancingRulesValue3['name'];
                    if (nameValue3 !== null && nameValue3 !== undefined) {
                      var nameInstance3 = nameValue3;
                      loadBalancingRuleJsonFormatInstance.name = nameInstance3;
                    }
                    
                    var etagValue3 = loadBalancingRulesValue3['etag'];
                    if (etagValue3 !== null && etagValue3 !== undefined) {
                      var etagInstance3 = etagValue3;
                      loadBalancingRuleJsonFormatInstance.etag = etagInstance3;
                    }
                    
                    var idValue15 = loadBalancingRulesValue3['id'];
                    if (idValue15 !== null && idValue15 !== undefined) {
                      var idInstance15 = idValue15;
                      loadBalancingRuleJsonFormatInstance.id = idInstance15;
                    }
                  }
                }
                
                var probesArray = propertiesValue['probes'];
                if (probesArray !== null && probesArray !== undefined) {
                  for (var loweredIndex11 = 0; loweredIndex11 < probesArray.length; loweredIndex11 = loweredIndex11 + 1) {
                    var probesValue = probesArray[loweredIndex11];
                    var probeJsonFormatInstance = { loadBalancingRules: [] };
                    loadBalancerJsonFormatInstance.probes.push(probeJsonFormatInstance);
                    
                    var propertiesValue5 = probesValue['properties'];
                    if (propertiesValue5 !== null && propertiesValue5 !== undefined) {
                      var loadBalancingRulesArray4 = propertiesValue5['loadBalancingRules'];
                      if (loadBalancingRulesArray4 !== null && loadBalancingRulesArray4 !== undefined) {
                        for (var loweredIndex12 = 0; loweredIndex12 < loadBalancingRulesArray4.length; loweredIndex12 = loweredIndex12 + 1) {
                          var loadBalancingRulesValue4 = loadBalancingRulesArray4[loweredIndex12];
                          var resourceIdInstance7 = {};
                          probeJsonFormatInstance.loadBalancingRules.push(resourceIdInstance7);
                          
                          var idValue16 = loadBalancingRulesValue4['id'];
                          if (idValue16 !== null && idValue16 !== undefined) {
                            var idInstance16 = idValue16;
                            resourceIdInstance7.id = idInstance16;
                          }
                        }
                      }
                      
                      var protocolValue2 = propertiesValue5['protocol'];
                      if (protocolValue2 !== null && protocolValue2 !== undefined) {
                        var protocolInstance2 = protocolValue2;
                        probeJsonFormatInstance.protocol = protocolInstance2;
                      }
                      
                      var portValue = propertiesValue5['port'];
                      if (portValue !== null && portValue !== undefined) {
                        var portInstance = portValue;
                        probeJsonFormatInstance.port = portInstance;
                      }
                      
                      var intervalInSecondsValue = propertiesValue5['intervalInSeconds'];
                      if (intervalInSecondsValue !== null && intervalInSecondsValue !== undefined) {
                        var intervalInSecondsInstance = intervalInSecondsValue;
                        probeJsonFormatInstance.intervalInSeconds = intervalInSecondsInstance;
                      }
                      
                      var numberOfProbesValue = propertiesValue5['numberOfProbes'];
                      if (numberOfProbesValue !== null && numberOfProbesValue !== undefined) {
                        var numberOfProbesInstance = numberOfProbesValue;
                        probeJsonFormatInstance.numberOfProbes = numberOfProbesInstance;
                      }
                      
                      var requestPathValue = propertiesValue5['requestPath'];
                      if (requestPathValue !== null && requestPathValue !== undefined) {
                        var requestPathInstance = requestPathValue;
                        probeJsonFormatInstance.requestPath = requestPathInstance;
                      }
                      
                      var provisioningStateValue4 = propertiesValue5['provisioningState'];
                      if (provisioningStateValue4 !== null && provisioningStateValue4 !== undefined) {
                        var provisioningStateInstance4 = provisioningStateValue4;
                        probeJsonFormatInstance.provisioningState = provisioningStateInstance4;
                      }
                    }
                    
                    var nameValue4 = probesValue['name'];
                    if (nameValue4 !== null && nameValue4 !== undefined) {
                      var nameInstance4 = nameValue4;
                      probeJsonFormatInstance.name = nameInstance4;
                    }
                    
                    var etagValue4 = probesValue['etag'];
                    if (etagValue4 !== null && etagValue4 !== undefined) {
                      var etagInstance4 = etagValue4;
                      probeJsonFormatInstance.etag = etagInstance4;
                    }
                    
                    var idValue17 = probesValue['id'];
                    if (idValue17 !== null && idValue17 !== undefined) {
                      var idInstance17 = idValue17;
                      probeJsonFormatInstance.id = idInstance17;
                    }
                  }
                }
                
                var inboundNatRulesArray2 = propertiesValue['inboundNatRules'];
                if (inboundNatRulesArray2 !== null && inboundNatRulesArray2 !== undefined) {
                  for (var loweredIndex13 = 0; loweredIndex13 < inboundNatRulesArray2.length; loweredIndex13 = loweredIndex13 + 1) {
                    var inboundNatRulesValue2 = inboundNatRulesArray2[loweredIndex13];
                    var inboundNatRuleJsonFormatInstance = {};
                    loadBalancerJsonFormatInstance.inboundNatRules.push(inboundNatRuleJsonFormatInstance);
                    
                    var propertiesValue6 = inboundNatRulesValue2['properties'];
                    if (propertiesValue6 !== null && propertiesValue6 !== undefined) {
                      var frontendIPConfigurationValue2 = propertiesValue6['frontendIPConfiguration'];
                      if (frontendIPConfigurationValue2 !== null && frontendIPConfigurationValue2 !== undefined) {
                        var frontendIPConfigurationInstance2 = {};
                        inboundNatRuleJsonFormatInstance.frontendIPConfiguration = frontendIPConfigurationInstance2;
                        
                        var idValue18 = frontendIPConfigurationValue2['id'];
                        if (idValue18 !== null && idValue18 !== undefined) {
                          var idInstance18 = idValue18;
                          frontendIPConfigurationInstance2.id = idInstance18;
                        }
                      }
                      
                      var backendIPConfigurationValue = propertiesValue6['backendIPConfiguration'];
                      if (backendIPConfigurationValue !== null && backendIPConfigurationValue !== undefined) {
                        var backendIPConfigurationInstance = {};
                        inboundNatRuleJsonFormatInstance.backendIPConfiguration = backendIPConfigurationInstance;
                        
                        var idValue19 = backendIPConfigurationValue['id'];
                        if (idValue19 !== null && idValue19 !== undefined) {
                          var idInstance19 = idValue19;
                          backendIPConfigurationInstance.id = idInstance19;
                        }
                      }
                      
                      var protocolValue3 = propertiesValue6['protocol'];
                      if (protocolValue3 !== null && protocolValue3 !== undefined) {
                        var protocolInstance3 = protocolValue3;
                        inboundNatRuleJsonFormatInstance.protocol = protocolInstance3;
                      }
                      
                      var frontendPortValue2 = propertiesValue6['frontendPort'];
                      if (frontendPortValue2 !== null && frontendPortValue2 !== undefined) {
                        var frontendPortInstance2 = frontendPortValue2;
                        inboundNatRuleJsonFormatInstance.frontendPort = frontendPortInstance2;
                      }
                      
                      var backendPortValue2 = propertiesValue6['backendPort'];
                      if (backendPortValue2 !== null && backendPortValue2 !== undefined) {
                        var backendPortInstance2 = backendPortValue2;
                        inboundNatRuleJsonFormatInstance.backendPort = backendPortInstance2;
                      }
                      
                      var idleTimeoutInMinutesValue2 = propertiesValue6['idleTimeoutInMinutes'];
                      if (idleTimeoutInMinutesValue2 !== null && idleTimeoutInMinutesValue2 !== undefined) {
                        var idleTimeoutInMinutesInstance2 = idleTimeoutInMinutesValue2;
                        inboundNatRuleJsonFormatInstance.idleTimeoutInMinutes = idleTimeoutInMinutesInstance2;
                      }
                      
                      var enableFloatingIPValue2 = propertiesValue6['enableFloatingIP'];
                      if (enableFloatingIPValue2 !== null && enableFloatingIPValue2 !== undefined) {
                        var enableFloatingIPInstance2 = enableFloatingIPValue2;
                        inboundNatRuleJsonFormatInstance.enableFloatingIP = enableFloatingIPInstance2;
                      }
                      
                      var provisioningStateValue5 = propertiesValue6['provisioningState'];
                      if (provisioningStateValue5 !== null && provisioningStateValue5 !== undefined) {
                        var provisioningStateInstance5 = provisioningStateValue5;
                        inboundNatRuleJsonFormatInstance.provisioningState = provisioningStateInstance5;
                      }
                    }
                    
                    var nameValue5 = inboundNatRulesValue2['name'];
                    if (nameValue5 !== null && nameValue5 !== undefined) {
                      var nameInstance5 = nameValue5;
                      inboundNatRuleJsonFormatInstance.name = nameInstance5;
                    }
                    
                    var etagValue5 = inboundNatRulesValue2['etag'];
                    if (etagValue5 !== null && etagValue5 !== undefined) {
                      var etagInstance5 = etagValue5;
                      inboundNatRuleJsonFormatInstance.etag = etagInstance5;
                    }
                    
                    var idValue20 = inboundNatRulesValue2['id'];
                    if (idValue20 !== null && idValue20 !== undefined) {
                      var idInstance20 = idValue20;
                      inboundNatRuleJsonFormatInstance.id = idInstance20;
                    }
                  }
                }
                
                var inboundNatPoolsArray2 = propertiesValue['inboundNatPools'];
                if (inboundNatPoolsArray2 !== null && inboundNatPoolsArray2 !== undefined) {
                  for (var loweredIndex14 = 0; loweredIndex14 < inboundNatPoolsArray2.length; loweredIndex14 = loweredIndex14 + 1) {
                    var inboundNatPoolsValue2 = inboundNatPoolsArray2[loweredIndex14];
                    var inboundNatPoolJsonFormatInstance = {};
                    loadBalancerJsonFormatInstance.inboundNatPools.push(inboundNatPoolJsonFormatInstance);
                    
                    var propertiesValue7 = inboundNatPoolsValue2['properties'];
                    if (propertiesValue7 !== null && propertiesValue7 !== undefined) {
                      var frontendIPConfigurationValue3 = propertiesValue7['frontendIPConfiguration'];
                      if (frontendIPConfigurationValue3 !== null && frontendIPConfigurationValue3 !== undefined) {
                        var frontendIPConfigurationInstance3 = {};
                        inboundNatPoolJsonFormatInstance.frontendIPConfiguration = frontendIPConfigurationInstance3;
                        
                        var idValue21 = frontendIPConfigurationValue3['id'];
                        if (idValue21 !== null && idValue21 !== undefined) {
                          var idInstance21 = idValue21;
                          frontendIPConfigurationInstance3.id = idInstance21;
                        }
                      }
                      
                      var protocolValue4 = propertiesValue7['protocol'];
                      if (protocolValue4 !== null && protocolValue4 !== undefined) {
                        var protocolInstance4 = protocolValue4;
                        inboundNatPoolJsonFormatInstance.protocol = protocolInstance4;
                      }
                      
                      var frontendPortRangeStartValue = propertiesValue7['frontendPortRangeStart'];
                      if (frontendPortRangeStartValue !== null && frontendPortRangeStartValue !== undefined) {
                        var frontendPortRangeStartInstance = frontendPortRangeStartValue;
                        inboundNatPoolJsonFormatInstance.frontendPortRangeStart = frontendPortRangeStartInstance;
                      }
                      
                      var frontendPortRangeEndValue = propertiesValue7['frontendPortRangeEnd'];
                      if (frontendPortRangeEndValue !== null && frontendPortRangeEndValue !== undefined) {
                        var frontendPortRangeEndInstance = frontendPortRangeEndValue;
                        inboundNatPoolJsonFormatInstance.frontendPortRangeEnd = frontendPortRangeEndInstance;
                      }
                      
                      var backendPortValue3 = propertiesValue7['backendPort'];
                      if (backendPortValue3 !== null && backendPortValue3 !== undefined) {
                        var backendPortInstance3 = backendPortValue3;
                        inboundNatPoolJsonFormatInstance.backendPort = backendPortInstance3;
                      }
                      
                      var provisioningStateValue6 = propertiesValue7['provisioningState'];
                      if (provisioningStateValue6 !== null && provisioningStateValue6 !== undefined) {
                        var provisioningStateInstance6 = provisioningStateValue6;
                        inboundNatPoolJsonFormatInstance.provisioningState = provisioningStateInstance6;
                      }
                    }
                    
                    var nameValue6 = inboundNatPoolsValue2['name'];
                    if (nameValue6 !== null && nameValue6 !== undefined) {
                      var nameInstance6 = nameValue6;
                      inboundNatPoolJsonFormatInstance.name = nameInstance6;
                    }
                    
                    var etagValue6 = inboundNatPoolsValue2['etag'];
                    if (etagValue6 !== null && etagValue6 !== undefined) {
                      var etagInstance6 = etagValue6;
                      inboundNatPoolJsonFormatInstance.etag = etagInstance6;
                    }
                    
                    var idValue22 = inboundNatPoolsValue2['id'];
                    if (idValue22 !== null && idValue22 !== undefined) {
                      var idInstance22 = idValue22;
                      inboundNatPoolJsonFormatInstance.id = idInstance22;
                    }
                  }
                }
                
                var outboundNatRulesArray2 = propertiesValue['outboundNatRules'];
                if (outboundNatRulesArray2 !== null && outboundNatRulesArray2 !== undefined) {
                  for (var loweredIndex15 = 0; loweredIndex15 < outboundNatRulesArray2.length; loweredIndex15 = loweredIndex15 + 1) {
                    var outboundNatRulesValue2 = outboundNatRulesArray2[loweredIndex15];
                    var outboundNatRuleJsonFormatInstance = { frontendIpConfigurations: [] };
                    loadBalancerJsonFormatInstance.outboundNatRules.push(outboundNatRuleJsonFormatInstance);
                    
                    var propertiesValue8 = outboundNatRulesValue2['properties'];
                    if (propertiesValue8 !== null && propertiesValue8 !== undefined) {
                      var allocatedOutboundPortsValue = propertiesValue8['allocatedOutboundPorts'];
                      if (allocatedOutboundPortsValue !== null && allocatedOutboundPortsValue !== undefined) {
                        var allocatedOutboundPortsInstance = allocatedOutboundPortsValue;
                        outboundNatRuleJsonFormatInstance.allocatedOutboundPorts = allocatedOutboundPortsInstance;
                      }
                      
                      var frontendIPConfigurationsArray2 = propertiesValue8['frontendIPConfigurations'];
                      if (frontendIPConfigurationsArray2 !== null && frontendIPConfigurationsArray2 !== undefined) {
                        for (var loweredIndex16 = 0; loweredIndex16 < frontendIPConfigurationsArray2.length; loweredIndex16 = loweredIndex16 + 1) {
                          var frontendIPConfigurationsValue2 = frontendIPConfigurationsArray2[loweredIndex16];
                          var resourceIdInstance8 = {};
                          outboundNatRuleJsonFormatInstance.frontendIpConfigurations.push(resourceIdInstance8);
                          
                          var idValue23 = frontendIPConfigurationsValue2['id'];
                          if (idValue23 !== null && idValue23 !== undefined) {
                            var idInstance23 = idValue23;
                            resourceIdInstance8.id = idInstance23;
                          }
                        }
                      }
                      
                      var backendAddressPoolValue2 = propertiesValue8['backendAddressPool'];
                      if (backendAddressPoolValue2 !== null && backendAddressPoolValue2 !== undefined) {
                        var backendAddressPoolInstance2 = {};
                        outboundNatRuleJsonFormatInstance.backendAddressPool = backendAddressPoolInstance2;
                        
                        var idValue24 = backendAddressPoolValue2['id'];
                        if (idValue24 !== null && idValue24 !== undefined) {
                          var idInstance24 = idValue24;
                          backendAddressPoolInstance2.id = idInstance24;
                        }
                      }
                      
                      var provisioningStateValue7 = propertiesValue8['provisioningState'];
                      if (provisioningStateValue7 !== null && provisioningStateValue7 !== undefined) {
                        var provisioningStateInstance7 = provisioningStateValue7;
                        outboundNatRuleJsonFormatInstance.provisioningState = provisioningStateInstance7;
                      }
                    }
                    
                    var nameValue7 = outboundNatRulesValue2['name'];
                    if (nameValue7 !== null && nameValue7 !== undefined) {
                      var nameInstance7 = nameValue7;
                      outboundNatRuleJsonFormatInstance.name = nameInstance7;
                    }
                    
                    var etagValue7 = outboundNatRulesValue2['etag'];
                    if (etagValue7 !== null && etagValue7 !== undefined) {
                      var etagInstance7 = etagValue7;
                      outboundNatRuleJsonFormatInstance.etag = etagInstance7;
                    }
                    
                    var idValue25 = outboundNatRulesValue2['id'];
                    if (idValue25 !== null && idValue25 !== undefined) {
                      var idInstance25 = idValue25;
                      outboundNatRuleJsonFormatInstance.id = idInstance25;
                    }
                  }
                }
                
                var resourceGuidValue = propertiesValue['resourceGuid'];
                if (resourceGuidValue !== null && resourceGuidValue !== undefined) {
                  var resourceGuidInstance = resourceGuidValue;
                  loadBalancerJsonFormatInstance.resourceGuid = resourceGuidInstance;
                }
                
                var provisioningStateValue8 = propertiesValue['provisioningState'];
                if (provisioningStateValue8 !== null && provisioningStateValue8 !== undefined) {
                  var provisioningStateInstance8 = provisioningStateValue8;
                  loadBalancerJsonFormatInstance.provisioningState = provisioningStateInstance8;
                }
              }
              
              var etagValue8 = valueValue['etag'];
              if (etagValue8 !== null && etagValue8 !== undefined) {
                var etagInstance8 = etagValue8;
                loadBalancerJsonFormatInstance.etag = etagInstance8;
              }
              
              var idValue26 = valueValue['id'];
              if (idValue26 !== null && idValue26 !== undefined) {
                var idInstance26 = idValue26;
                loadBalancerJsonFormatInstance.id = idInstance26;
              }
              
              var nameValue8 = valueValue['name'];
              if (nameValue8 !== null && nameValue8 !== undefined) {
                var nameInstance8 = nameValue8;
                loadBalancerJsonFormatInstance.name = nameInstance8;
              }
              
              var typeValue = valueValue['type'];
              if (typeValue !== null && typeValue !== undefined) {
                var typeInstance = typeValue;
                loadBalancerJsonFormatInstance.type = typeInstance;
              }
              
              var locationValue = valueValue['location'];
              if (locationValue !== null && locationValue !== undefined) {
                var locationInstance = locationValue;
                loadBalancerJsonFormatInstance.location = locationInstance;
              }
              
              var tagsSequenceElement = valueValue['tags'];
              if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
                for (var property in tagsSequenceElement) {
                  var tagsKey = property;
                  var tagsValue = tagsSequenceElement[property];
                  loadBalancerJsonFormatInstance.tags[tagsKey] = tagsValue;
                }
              }
            }
          }
          
          var nextLinkValue = responseDoc['nextLink'];
          if (nextLinkValue !== null && nextLinkValue !== undefined) {
            var nextLinkInstance = nextLinkValue;
            result.nextLink = nextLinkInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  return LoadBalancerOperations;
})();

var LocalNetworkGatewayOperations = ( /** @lends LocalNetworkGatewayOperations */ function() {
  /**
   * @class
   * The Network Resource Provider API includes operations for managing the
   * Virtual network Gateway for your subscription.
   * __NOTE__: An instance of this class is automatically created for an
   * instance of the [NetworkResourceProviderClient] {@link
   * NetworkResourceProviderClient~NetworkResourceProviderClient}.
   * See [localNetworkGateways] {@link
   * NetworkResourceProviderClient~NetworkResourceProviderClient#localNetworkGateways}.
   * Initializes a new instance of the LocalNetworkGatewayOperations class.
   * @constructor
   * 
   * @param {NetworkResourceProviderClient} client Reference to the service
   * client.
   */
  function LocalNetworkGatewayOperations(client) {
    this.client = client;
  }
  
  /**
   * The Put LocalNetworkGateway operation creates/updates a local network
   * gateway in the specified resource group through Network resource provider.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} localNetworkGatewayName The name of the local network
   * gateway.
   * 
   * @param {LocalNetworkGateway} parameters Parameters supplied to the Begin
   * Create or update Local Network Gateway operation through Network resource
   * provider.
   * 
   * @param {AddressSpace} [parameters.localNetworkAddressSpace] Local network
   * site Address space
   * 
   * @param {IEnumerable} [parameters.localNetworkAddressSpace.addressPrefixes]
   * Gets or sets List of address blocks reserved for this virtual network in
   * CIDR notation
   * 
   * @param {string} [parameters.gatewayIpAddress] IP address of local network
   * gateway.
   * 
   * @param {BgpSettings} [parameters.bgpSettings] Local network gateway BGP
   * speaker's settings
   * 
   * @param {number} [parameters.bgpSettings.asn] Autonomous System Number
   * 
   * @param {string} [parameters.bgpSettings.bgpPeeringAddress] BGP speaker's
   * IP/BGP identifier
   * 
   * @param {number} [parameters.bgpSettings.peerWeight] Weight given to routes
   * learned from this BGP speaker
   * 
   * @param {string} [parameters.provisioningState] Gets or sets Provisioning
   * state of the LocalNetworkGateway resource Updating/Deleting/Failed
   * 
   * @param {string} [parameters.resourceGuid] Gets or sets resource guid
   * property of the LocalNetworkGateway resource
   * 
   * @param {string} [parameters.etag] Gets a unique read-only string that
   * changes whenever the resource is updated
   * 
   * @param {string} [parameters.id] Gets or sets the ID of the resource.
   * 
   * @param {string} [parameters.name] Gets or sets the name of the resource.
   * 
   * @param {string} [parameters.type] Gets or sets the type of the resource.
   * 
   * @param {string} [parameters.location] Gets or sets the location of the
   * resource.
   * 
   * @param {object} [parameters.tags] Gets or sets the tags attached to the
   * resource.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  LocalNetworkGatewayOperations.prototype.beginCreateOrUpdating = function(resourceGroupName, localNetworkGatewayName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (localNetworkGatewayName === null || localNetworkGatewayName === undefined) {
      return callback(new Error('localNetworkGatewayName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Network';
    url2 = url2 + '/localNetworkGateways/';
    url2 = url2 + encodeURIComponent(localNetworkGatewayName);
    var queryParameters = [];
    queryParameters.push('api-version=2015-05-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = null;
    
    var localNetworkGatewayJsonFormatValue = {};
    requestDoc = localNetworkGatewayJsonFormatValue;
    
    var propertiesValue = {};
    localNetworkGatewayJsonFormatValue['properties'] = propertiesValue;
    
    if (parameters.localNetworkAddressSpace !== null && parameters.localNetworkAddressSpace !== undefined) {
      var localNetworkAddressSpaceValue = {};
      propertiesValue['localNetworkAddressSpace'] = localNetworkAddressSpaceValue;
      
      if (parameters.localNetworkAddressSpace.addressPrefixes !== null && parameters.localNetworkAddressSpace.addressPrefixes !== undefined) {
        var addressPrefixesArray = [];
        for (var loweredIndex1 = 0; loweredIndex1 < parameters.localNetworkAddressSpace.addressPrefixes.length; loweredIndex1 = loweredIndex1 + 1) {
          var addressPrefixesItem = parameters.localNetworkAddressSpace.addressPrefixes[loweredIndex1];
          addressPrefixesArray.push(addressPrefixesItem);
        }
        localNetworkAddressSpaceValue['addressPrefixes'] = addressPrefixesArray;
      }
    }
    
    if (parameters.gatewayIpAddress !== null && parameters.gatewayIpAddress !== undefined) {
      propertiesValue['gatewayIpAddress'] = parameters.gatewayIpAddress;
    }
    
    if (parameters.resourceGuid !== null && parameters.resourceGuid !== undefined) {
      propertiesValue['resourceGuid'] = parameters.resourceGuid;
    }
    
    if (parameters.provisioningState !== null && parameters.provisioningState !== undefined) {
      propertiesValue['provisioningState'] = parameters.provisioningState;
    }
    
    if (parameters.etag !== null && parameters.etag !== undefined) {
      localNetworkGatewayJsonFormatValue['etag'] = parameters.etag;
    }
    
    if (parameters.id !== null && parameters.id !== undefined) {
      localNetworkGatewayJsonFormatValue['id'] = parameters.id;
    }
    
    if (parameters.name !== null && parameters.name !== undefined) {
      localNetworkGatewayJsonFormatValue['name'] = parameters.name;
    }
    
    if (parameters.type !== null && parameters.type !== undefined) {
      localNetworkGatewayJsonFormatValue['type'] = parameters.type;
    }
    
    if (parameters.location !== null && parameters.location !== undefined) {
      localNetworkGatewayJsonFormatValue['location'] = parameters.location;
    }
    
    if (parameters.tags !== null && parameters.tags !== undefined) {
      var tagsDictionary = {};
      for (var tagsKey in parameters.tags) {
        var tagsValue = parameters.tags[tagsKey];
        tagsDictionary[tagsKey] = tagsValue;
      }
      localNetworkGatewayJsonFormatValue['tags'] = tagsDictionary;
    }
    
    requestContent = JSON.stringify(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200 && statusCode !== 201) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200 || statusCode === 201) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var localNetworkGatewayInstance = { tags: {} };
          result.localNetworkGateway = localNetworkGatewayInstance;
          
          var propertiesValue2 = responseDoc['properties'];
          if (propertiesValue2 !== null && propertiesValue2 !== undefined) {
            var localNetworkAddressSpaceValue2 = propertiesValue2['localNetworkAddressSpace'];
            if (localNetworkAddressSpaceValue2 !== null && localNetworkAddressSpaceValue2 !== undefined) {
              var localNetworkAddressSpaceInstance = { addressPrefixes: [] };
              localNetworkGatewayInstance.localNetworkAddressSpace = localNetworkAddressSpaceInstance;
              
              var addressPrefixesArray2 = localNetworkAddressSpaceValue2['addressPrefixes'];
              if (addressPrefixesArray2 !== null && addressPrefixesArray2 !== undefined) {
                for (var loweredIndex2 = 0; loweredIndex2 < addressPrefixesArray2.length; loweredIndex2 = loweredIndex2 + 1) {
                  var addressPrefixesValue = addressPrefixesArray2[loweredIndex2];
                  localNetworkAddressSpaceInstance.addressPrefixes.push(addressPrefixesValue);
                }
              }
            }
            
            var gatewayIpAddressValue = propertiesValue2['gatewayIpAddress'];
            if (gatewayIpAddressValue !== null && gatewayIpAddressValue !== undefined) {
              var gatewayIpAddressInstance = gatewayIpAddressValue;
              localNetworkGatewayInstance.gatewayIpAddress = gatewayIpAddressInstance;
            }
            
            var resourceGuidValue = propertiesValue2['resourceGuid'];
            if (resourceGuidValue !== null && resourceGuidValue !== undefined) {
              var resourceGuidInstance = resourceGuidValue;
              localNetworkGatewayInstance.resourceGuid = resourceGuidInstance;
            }
            
            var provisioningStateValue = propertiesValue2['provisioningState'];
            if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
              var provisioningStateInstance = provisioningStateValue;
              localNetworkGatewayInstance.provisioningState = provisioningStateInstance;
            }
          }
          
          var etagValue = responseDoc['etag'];
          if (etagValue !== null && etagValue !== undefined) {
            var etagInstance = etagValue;
            localNetworkGatewayInstance.etag = etagInstance;
          }
          
          var idValue = responseDoc['id'];
          if (idValue !== null && idValue !== undefined) {
            var idInstance = idValue;
            localNetworkGatewayInstance.id = idInstance;
          }
          
          var nameValue = responseDoc['name'];
          if (nameValue !== null && nameValue !== undefined) {
            var nameInstance = nameValue;
            localNetworkGatewayInstance.name = nameInstance;
          }
          
          var typeValue = responseDoc['type'];
          if (typeValue !== null && typeValue !== undefined) {
            var typeInstance = typeValue;
            localNetworkGatewayInstance.type = typeInstance;
          }
          
          var locationValue = responseDoc['location'];
          if (locationValue !== null && locationValue !== undefined) {
            var locationInstance = locationValue;
            localNetworkGatewayInstance.location = locationInstance;
          }
          
          var tagsSequenceElement = responseDoc['tags'];
          if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
            for (var property in tagsSequenceElement) {
              var tagsKey2 = property;
              var tagsValue2 = tagsSequenceElement[property];
              localNetworkGatewayInstance.tags[tagsKey2] = tagsValue2;
            }
          }
          
          var errorValue = responseDoc['error'];
          if (errorValue !== null && errorValue !== undefined) {
            var errorInstance = { details: [] };
            result.error = errorInstance;
            
            var codeValue = errorValue['code'];
            if (codeValue !== null && codeValue !== undefined) {
              var codeInstance = codeValue;
              errorInstance.code = codeInstance;
            }
            
            var messageValue = errorValue['message'];
            if (messageValue !== null && messageValue !== undefined) {
              var messageInstance = messageValue;
              errorInstance.message = messageInstance;
            }
            
            var targetValue = errorValue['target'];
            if (targetValue !== null && targetValue !== undefined) {
              var targetInstance = targetValue;
              errorInstance.target = targetInstance;
            }
            
            var detailsArray = errorValue['details'];
            if (detailsArray !== null && detailsArray !== undefined) {
              for (var loweredIndex3 = 0; loweredIndex3 < detailsArray.length; loweredIndex3 = loweredIndex3 + 1) {
                var detailsValue = detailsArray[loweredIndex3];
                var errorDetailsInstance = {};
                errorInstance.details.push(errorDetailsInstance);
                
                var codeValue2 = detailsValue['code'];
                if (codeValue2 !== null && codeValue2 !== undefined) {
                  var codeInstance2 = codeValue2;
                  errorDetailsInstance.code = codeInstance2;
                }
                
                var targetValue2 = detailsValue['target'];
                if (targetValue2 !== null && targetValue2 !== undefined) {
                  var targetInstance2 = targetValue2;
                  errorDetailsInstance.target = targetInstance2;
                }
                
                var messageValue2 = detailsValue['message'];
                if (messageValue2 !== null && messageValue2 !== undefined) {
                  var messageInstance2 = messageValue2;
                  errorDetailsInstance.message = messageInstance2;
                }
              }
            }
            
            var innerErrorValue = errorValue['innerError'];
            if (innerErrorValue !== null && innerErrorValue !== undefined) {
              var innerErrorInstance = innerErrorValue;
              errorInstance.innerError = innerErrorInstance;
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      result.azureAsyncOperation = response.headers['azure-asyncoperation'];
      result.retryAfter = parseInt(response.headers['retry-after'], 10);
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The Delete LocalNetworkGateway operation deletes the specifed local
   * network Gateway through Network resource provider.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} localNetworkGatewayName The name of the local network
   * gateway.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  LocalNetworkGatewayOperations.prototype.beginDeleting = function(resourceGroupName, localNetworkGatewayName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (localNetworkGatewayName === null || localNetworkGatewayName === undefined) {
      return callback(new Error('localNetworkGatewayName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Network';
    url2 = url2 + '/localNetworkGateways/';
    url2 = url2 + encodeURIComponent(localNetworkGatewayName);
    url2 = url2 + '/';
    var queryParameters = [];
    queryParameters.push('api-version=2015-05-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'DELETE';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200 && statusCode !== 202 && statusCode !== 204) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      result = {};
      result.statusCode = statusCode;
      result.azureAsyncOperation = response.headers['azure-asyncoperation'];
      result.retryAfter = parseInt(response.headers['retry-after'], 10);
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The Put LocalNetworkGateway operation creates/updates a local network
   * gateway in the specified resource group through Network resource provider.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} localNetworkGatewayName The name of the local network
   * gateway.
   * 
   * @param {LocalNetworkGateway} parameters Parameters supplied to the Begin
   * Create or update Local Network Gateway operation through Network resource
   * provider.
   * 
   * @param {AddressSpace} [parameters.localNetworkAddressSpace] Local network
   * site Address space
   * 
   * @param {IEnumerable} [parameters.localNetworkAddressSpace.addressPrefixes]
   * Gets or sets List of address blocks reserved for this virtual network in
   * CIDR notation
   * 
   * @param {string} [parameters.gatewayIpAddress] IP address of local network
   * gateway.
   * 
   * @param {BgpSettings} [parameters.bgpSettings] Local network gateway BGP
   * speaker's settings
   * 
   * @param {number} [parameters.bgpSettings.asn] Autonomous System Number
   * 
   * @param {string} [parameters.bgpSettings.bgpPeeringAddress] BGP speaker's
   * IP/BGP identifier
   * 
   * @param {number} [parameters.bgpSettings.peerWeight] Weight given to routes
   * learned from this BGP speaker
   * 
   * @param {string} [parameters.provisioningState] Gets or sets Provisioning
   * state of the LocalNetworkGateway resource Updating/Deleting/Failed
   * 
   * @param {string} [parameters.resourceGuid] Gets or sets resource guid
   * property of the LocalNetworkGateway resource
   * 
   * @param {string} [parameters.etag] Gets a unique read-only string that
   * changes whenever the resource is updated
   * 
   * @param {string} [parameters.id] Gets or sets the ID of the resource.
   * 
   * @param {string} [parameters.name] Gets or sets the name of the resource.
   * 
   * @param {string} [parameters.type] Gets or sets the type of the resource.
   * 
   * @param {string} [parameters.location] Gets or sets the location of the
   * resource.
   * 
   * @param {object} [parameters.tags] Gets or sets the tags attached to the
   * resource.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  LocalNetworkGatewayOperations.prototype.createOrUpdate = function(resourceGroupName, localNetworkGatewayName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.localNetworkGateways.beginCreateOrUpdating(resourceGroupName, localNetworkGatewayName, parameters, function (err, result) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var delayInSeconds = result.retryAfter;
      if (delayInSeconds === 0) {
        delayInSeconds = 30;
      }
      if (client2.longRunningOperationInitialTimeout >= 0) {
        delayInSeconds = client2.longRunningOperationInitialTimeout;
      }
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.getLongRunningOperationStatus(result.azureAsyncOperation, function (err2, result2) {
            if (err2 !== null && err2 !== undefined) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                return callback(null, result2);
              } else {
                delayInSeconds = result2.retryAfter;
                if (delayInSeconds === 0) {
                  delayInSeconds = 30;
                }
                if (client2.longRunningOperationRetryTimeout >= 0) {
                  delayInSeconds = client2.longRunningOperationRetryTimeout;
                }
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  /**
   * The Delete LocalNetworkGateway operation deletes the specifed local
   * network Gateway through Network resource provider.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} localNetworkGatewayName The name of the local network
   * gateway.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  LocalNetworkGatewayOperations.prototype.deleteMethod = function(resourceGroupName, localNetworkGatewayName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.localNetworkGateways.beginDeleting(resourceGroupName, localNetworkGatewayName, function (err, result) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var delayInSeconds = result.retryAfter;
      if (delayInSeconds === 0) {
        delayInSeconds = 30;
      }
      if (client2.longRunningOperationInitialTimeout >= 0) {
        delayInSeconds = client2.longRunningOperationInitialTimeout;
      }
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.getLongRunningOperationStatus(result.azureAsyncOperation, function (err2, result2) {
            if (err2 !== null && err2 !== undefined) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                return callback(null, result2);
              } else {
                delayInSeconds = result2.retryAfter;
                if (delayInSeconds === 0) {
                  delayInSeconds = 30;
                }
                if (client2.longRunningOperationRetryTimeout >= 0) {
                  delayInSeconds = client2.longRunningOperationRetryTimeout;
                }
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  /**
   * The Get LocalNetworkGateway operation retrieves information about the
   * specified local network gateway through Network resource provider.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} localNetworkGatewayName The name of the local network
   * gateway.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  LocalNetworkGatewayOperations.prototype.get = function(resourceGroupName, localNetworkGatewayName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (localNetworkGatewayName === null || localNetworkGatewayName === undefined) {
      return callback(new Error('localNetworkGatewayName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Network';
    url2 = url2 + '/localNetworkGateways/';
    url2 = url2 + encodeURIComponent(localNetworkGatewayName);
    var queryParameters = [];
    queryParameters.push('api-version=2015-05-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var localNetworkGatewayInstance = { tags: {} };
          result.localNetworkGateway = localNetworkGatewayInstance;
          
          var propertiesValue = responseDoc['properties'];
          if (propertiesValue !== null && propertiesValue !== undefined) {
            var localNetworkAddressSpaceValue = propertiesValue['localNetworkAddressSpace'];
            if (localNetworkAddressSpaceValue !== null && localNetworkAddressSpaceValue !== undefined) {
              var localNetworkAddressSpaceInstance = { addressPrefixes: [] };
              localNetworkGatewayInstance.localNetworkAddressSpace = localNetworkAddressSpaceInstance;
              
              var addressPrefixesArray = localNetworkAddressSpaceValue['addressPrefixes'];
              if (addressPrefixesArray !== null && addressPrefixesArray !== undefined) {
                for (var loweredIndex1 = 0; loweredIndex1 < addressPrefixesArray.length; loweredIndex1 = loweredIndex1 + 1) {
                  var addressPrefixesValue = addressPrefixesArray[loweredIndex1];
                  localNetworkAddressSpaceInstance.addressPrefixes.push(addressPrefixesValue);
                }
              }
            }
            
            var gatewayIpAddressValue = propertiesValue['gatewayIpAddress'];
            if (gatewayIpAddressValue !== null && gatewayIpAddressValue !== undefined) {
              var gatewayIpAddressInstance = gatewayIpAddressValue;
              localNetworkGatewayInstance.gatewayIpAddress = gatewayIpAddressInstance;
            }
            
            var resourceGuidValue = propertiesValue['resourceGuid'];
            if (resourceGuidValue !== null && resourceGuidValue !== undefined) {
              var resourceGuidInstance = resourceGuidValue;
              localNetworkGatewayInstance.resourceGuid = resourceGuidInstance;
            }
            
            var provisioningStateValue = propertiesValue['provisioningState'];
            if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
              var provisioningStateInstance = provisioningStateValue;
              localNetworkGatewayInstance.provisioningState = provisioningStateInstance;
            }
          }
          
          var etagValue = responseDoc['etag'];
          if (etagValue !== null && etagValue !== undefined) {
            var etagInstance = etagValue;
            localNetworkGatewayInstance.etag = etagInstance;
          }
          
          var idValue = responseDoc['id'];
          if (idValue !== null && idValue !== undefined) {
            var idInstance = idValue;
            localNetworkGatewayInstance.id = idInstance;
          }
          
          var nameValue = responseDoc['name'];
          if (nameValue !== null && nameValue !== undefined) {
            var nameInstance = nameValue;
            localNetworkGatewayInstance.name = nameInstance;
          }
          
          var typeValue = responseDoc['type'];
          if (typeValue !== null && typeValue !== undefined) {
            var typeInstance = typeValue;
            localNetworkGatewayInstance.type = typeInstance;
          }
          
          var locationValue = responseDoc['location'];
          if (locationValue !== null && locationValue !== undefined) {
            var locationInstance = locationValue;
            localNetworkGatewayInstance.location = locationInstance;
          }
          
          var tagsSequenceElement = responseDoc['tags'];
          if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
            for (var property in tagsSequenceElement) {
              var tagsKey = property;
              var tagsValue = tagsSequenceElement[property];
              localNetworkGatewayInstance.tags[tagsKey] = tagsValue;
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The List LocalNetworkGateways opertion retrieves all the local network
   * gateways stored.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  LocalNetworkGatewayOperations.prototype.list = function(resourceGroupName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Network';
    url2 = url2 + '/localNetworkGateways';
    var queryParameters = [];
    queryParameters.push('api-version=2015-05-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = { localNetworkGateways: [] };
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var valueArray = responseDoc['value'];
          if (valueArray !== null && valueArray !== undefined) {
            for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var valueValue = valueArray[loweredIndex1];
              var localNetworkGatewayJsonFormatInstance = { tags: {} };
              result.localNetworkGateways.push(localNetworkGatewayJsonFormatInstance);
              
              var propertiesValue = valueValue['properties'];
              if (propertiesValue !== null && propertiesValue !== undefined) {
                var localNetworkAddressSpaceValue = propertiesValue['localNetworkAddressSpace'];
                if (localNetworkAddressSpaceValue !== null && localNetworkAddressSpaceValue !== undefined) {
                  var localNetworkAddressSpaceInstance = { addressPrefixes: [] };
                  localNetworkGatewayJsonFormatInstance.localNetworkAddressSpace = localNetworkAddressSpaceInstance;
                  
                  var addressPrefixesArray = localNetworkAddressSpaceValue['addressPrefixes'];
                  if (addressPrefixesArray !== null && addressPrefixesArray !== undefined) {
                    for (var loweredIndex2 = 0; loweredIndex2 < addressPrefixesArray.length; loweredIndex2 = loweredIndex2 + 1) {
                      var addressPrefixesValue = addressPrefixesArray[loweredIndex2];
                      localNetworkAddressSpaceInstance.addressPrefixes.push(addressPrefixesValue);
                    }
                  }
                }
                
                var gatewayIpAddressValue = propertiesValue['gatewayIpAddress'];
                if (gatewayIpAddressValue !== null && gatewayIpAddressValue !== undefined) {
                  var gatewayIpAddressInstance = gatewayIpAddressValue;
                  localNetworkGatewayJsonFormatInstance.gatewayIpAddress = gatewayIpAddressInstance;
                }
                
                var resourceGuidValue = propertiesValue['resourceGuid'];
                if (resourceGuidValue !== null && resourceGuidValue !== undefined) {
                  var resourceGuidInstance = resourceGuidValue;
                  localNetworkGatewayJsonFormatInstance.resourceGuid = resourceGuidInstance;
                }
                
                var provisioningStateValue = propertiesValue['provisioningState'];
                if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
                  var provisioningStateInstance = provisioningStateValue;
                  localNetworkGatewayJsonFormatInstance.provisioningState = provisioningStateInstance;
                }
              }
              
              var etagValue = valueValue['etag'];
              if (etagValue !== null && etagValue !== undefined) {
                var etagInstance = etagValue;
                localNetworkGatewayJsonFormatInstance.etag = etagInstance;
              }
              
              var idValue = valueValue['id'];
              if (idValue !== null && idValue !== undefined) {
                var idInstance = idValue;
                localNetworkGatewayJsonFormatInstance.id = idInstance;
              }
              
              var nameValue = valueValue['name'];
              if (nameValue !== null && nameValue !== undefined) {
                var nameInstance = nameValue;
                localNetworkGatewayJsonFormatInstance.name = nameInstance;
              }
              
              var typeValue = valueValue['type'];
              if (typeValue !== null && typeValue !== undefined) {
                var typeInstance = typeValue;
                localNetworkGatewayJsonFormatInstance.type = typeInstance;
              }
              
              var locationValue = valueValue['location'];
              if (locationValue !== null && locationValue !== undefined) {
                var locationInstance = locationValue;
                localNetworkGatewayJsonFormatInstance.location = locationInstance;
              }
              
              var tagsSequenceElement = valueValue['tags'];
              if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
                for (var property in tagsSequenceElement) {
                  var tagsKey = property;
                  var tagsValue = tagsSequenceElement[property];
                  localNetworkGatewayJsonFormatInstance.tags[tagsKey] = tagsValue;
                }
              }
            }
          }
          
          var nextLinkValue = responseDoc['nextLink'];
          if (nextLinkValue !== null && nextLinkValue !== undefined) {
            var nextLinkInstance = nextLinkValue;
            result.nextLink = nextLinkInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  return LocalNetworkGatewayOperations;
})();

var NetworkInterfaceOperations = ( /** @lends NetworkInterfaceOperations */ function() {
  /**
   * @class
   * The Network Resource Provider API includes operations for managing the
   * subnets for your subscription.
   * __NOTE__: An instance of this class is automatically created for an
   * instance of the [NetworkResourceProviderClient] {@link
   * NetworkResourceProviderClient~NetworkResourceProviderClient}.
   * See [networkInterfaces] {@link
   * NetworkResourceProviderClient~NetworkResourceProviderClient#networkInterfaces}.
   * Initializes a new instance of the NetworkInterfaceOperations class.
   * @constructor
   * 
   * @param {NetworkResourceProviderClient} client Reference to the service
   * client.
   */
  function NetworkInterfaceOperations(client) {
    this.client = client;
  }
  
  /**
   * The Put NetworkInterface operation creates/updates a networkInterface
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} networkInterfaceName The name of the network interface.
   * 
   * @param {NetworkInterface} parameters Parameters supplied to the
   * create/update NetworkInterface operation
   * 
   * @param {ResourceId} [parameters.virtualMachine] Gets or sets the reference
   * of a VirtualMachine
   * 
   * @param {string} [parameters.virtualMachine.id] Id of the resource
   * 
   * @param {ResourceId} [parameters.networkSecurityGroup] Gets or sets the
   * reference of the NetworkSecurityGroup resource
   * 
   * @param {string} [parameters.networkSecurityGroup.id] Id of the resource
   * 
   * @param {IEnumerable} [parameters.ipConfigurations] Gets or sets list of
   * IPConfigurations of the NetworkInterface
   * 
   * @param {NetworkInterfaceDnsSettings} [parameters.dnsSettings] Gets or sets
   * DNS Settings in  NetworkInterface
   * 
   * @param {IEnumerable} [parameters.dnsSettings.dnsServers] Gets or sets list
   * of DNS servers IP addresses
   * 
   * @param {IEnumerable} [parameters.dnsSettings.appliedDnsServers] Gets or
   * sets list of Applied DNS servers IP addresses
   * 
   * @param {string} [parameters.dnsSettings.internalDnsNameLabel] Gets or sets
   * the Internal DNS name
   * 
   * @param {string} [parameters.dnsSettings.internalFqdn] Gets or sets full
   * IDNS name in the form, DnsName.VnetId.ZoneId.TopleveSuffix. This is set
   * when the NIC is associated to a VM
   * 
   * @param {string} [parameters.macAddress] Gets the MAC Address of the
   * network interface
   * 
   * @param {boolean} [parameters.primary] Gets whether this is a primary NIC
   * on a virtual machine
   * 
   * @param {boolean} [parameters.enableIPForwarding] Gets or sets whether
   * IPForwarding is enabled on the NIC
   * 
   * @param {string} [parameters.provisioningState] Gets or sets Provisioning
   * state of the PublicIP resource Updating/Deleting/Failed
   * 
   * @param {string} [parameters.resourceGuid] Gets or sets resource guid
   * property of the network interface resource
   * 
   * @param {string} [parameters.etag] Gets a unique read-only string that
   * changes whenever the resource is updated
   * 
   * @param {string} [parameters.id] Gets or sets the ID of the resource.
   * 
   * @param {string} [parameters.name] Gets or sets the name of the resource.
   * 
   * @param {string} [parameters.type] Gets or sets the type of the resource.
   * 
   * @param {string} [parameters.location] Gets or sets the location of the
   * resource.
   * 
   * @param {object} [parameters.tags] Gets or sets the tags attached to the
   * resource.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  NetworkInterfaceOperations.prototype.beginCreateOrUpdating = function(resourceGroupName, networkInterfaceName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (networkInterfaceName === null || networkInterfaceName === undefined) {
      return callback(new Error('networkInterfaceName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Network';
    url2 = url2 + '/networkInterfaces/';
    url2 = url2 + encodeURIComponent(networkInterfaceName);
    var queryParameters = [];
    queryParameters.push('api-version=2015-05-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = null;
    
    var networkInterfaceJsonFormatValue = {};
    requestDoc = networkInterfaceJsonFormatValue;
    
    var propertiesValue = {};
    networkInterfaceJsonFormatValue['properties'] = propertiesValue;
    
    if (parameters.virtualMachine !== null && parameters.virtualMachine !== undefined) {
      var virtualMachineValue = {};
      propertiesValue['virtualMachine'] = virtualMachineValue;
      
      if (parameters.virtualMachine.id !== null && parameters.virtualMachine.id !== undefined) {
        virtualMachineValue['id'] = parameters.virtualMachine.id;
      }
    }
    
    if (parameters.networkSecurityGroup !== null && parameters.networkSecurityGroup !== undefined) {
      var networkSecurityGroupValue = {};
      propertiesValue['networkSecurityGroup'] = networkSecurityGroupValue;
      
      if (parameters.networkSecurityGroup.id !== null && parameters.networkSecurityGroup.id !== undefined) {
        networkSecurityGroupValue['id'] = parameters.networkSecurityGroup.id;
      }
    }
    
    if (parameters.ipConfigurations !== null && parameters.ipConfigurations !== undefined) {
      var ipConfigurationsArray = [];
      for (var loweredIndex1 = 0; loweredIndex1 < parameters.ipConfigurations.length; loweredIndex1 = loweredIndex1 + 1) {
        var ipConfigurationsItem = parameters.ipConfigurations[loweredIndex1];
        var networkInterfaceIpConfigurationJsonFormatValue = {};
        ipConfigurationsArray.push(networkInterfaceIpConfigurationJsonFormatValue);
        
        var propertiesValue2 = {};
        networkInterfaceIpConfigurationJsonFormatValue['properties'] = propertiesValue2;
        
        if (ipConfigurationsItem.privateIpAddress !== null && ipConfigurationsItem.privateIpAddress !== undefined) {
          propertiesValue2['privateIPAddress'] = ipConfigurationsItem.privateIpAddress;
        }
        
        if (ipConfigurationsItem.privateIpAllocationMethod !== null && ipConfigurationsItem.privateIpAllocationMethod !== undefined) {
          propertiesValue2['privateIPAllocationMethod'] = ipConfigurationsItem.privateIpAllocationMethod;
        }
        
        if (ipConfigurationsItem.subnet !== null && ipConfigurationsItem.subnet !== undefined) {
          var subnetValue = {};
          propertiesValue2['subnet'] = subnetValue;
          
          if (ipConfigurationsItem.subnet.id !== null && ipConfigurationsItem.subnet.id !== undefined) {
            subnetValue['id'] = ipConfigurationsItem.subnet.id;
          }
        }
        
        if (ipConfigurationsItem.publicIpAddress !== null && ipConfigurationsItem.publicIpAddress !== undefined) {
          var publicIPAddressValue = {};
          propertiesValue2['publicIPAddress'] = publicIPAddressValue;
          
          if (ipConfigurationsItem.publicIpAddress.id !== null && ipConfigurationsItem.publicIpAddress.id !== undefined) {
            publicIPAddressValue['id'] = ipConfigurationsItem.publicIpAddress.id;
          }
        }
        
        if (ipConfigurationsItem.loadBalancerBackendAddressPools !== null && ipConfigurationsItem.loadBalancerBackendAddressPools !== undefined) {
          var loadBalancerBackendAddressPoolsArray = [];
          for (var loweredIndex2 = 0; loweredIndex2 < ipConfigurationsItem.loadBalancerBackendAddressPools.length; loweredIndex2 = loweredIndex2 + 1) {
            var loadBalancerBackendAddressPoolsItem = ipConfigurationsItem.loadBalancerBackendAddressPools[loweredIndex2];
            var resourceIdValue = {};
            loadBalancerBackendAddressPoolsArray.push(resourceIdValue);
            
            if (loadBalancerBackendAddressPoolsItem.id !== null && loadBalancerBackendAddressPoolsItem.id !== undefined) {
              resourceIdValue['id'] = loadBalancerBackendAddressPoolsItem.id;
            }
          }
          propertiesValue2['loadBalancerBackendAddressPools'] = loadBalancerBackendAddressPoolsArray;
        }
        
        if (ipConfigurationsItem.loadBalancerInboundNatRules !== null && ipConfigurationsItem.loadBalancerInboundNatRules !== undefined) {
          var loadBalancerInboundNatRulesArray = [];
          for (var loweredIndex3 = 0; loweredIndex3 < ipConfigurationsItem.loadBalancerInboundNatRules.length; loweredIndex3 = loweredIndex3 + 1) {
            var loadBalancerInboundNatRulesItem = ipConfigurationsItem.loadBalancerInboundNatRules[loweredIndex3];
            var resourceIdValue2 = {};
            loadBalancerInboundNatRulesArray.push(resourceIdValue2);
            
            if (loadBalancerInboundNatRulesItem.id !== null && loadBalancerInboundNatRulesItem.id !== undefined) {
              resourceIdValue2['id'] = loadBalancerInboundNatRulesItem.id;
            }
          }
          propertiesValue2['loadBalancerInboundNatRules'] = loadBalancerInboundNatRulesArray;
        }
        
        if (ipConfigurationsItem.provisioningState !== null && ipConfigurationsItem.provisioningState !== undefined) {
          propertiesValue2['provisioningState'] = ipConfigurationsItem.provisioningState;
        }
        
        if (ipConfigurationsItem.name !== null && ipConfigurationsItem.name !== undefined) {
          networkInterfaceIpConfigurationJsonFormatValue['name'] = ipConfigurationsItem.name;
        }
        
        if (ipConfigurationsItem.etag !== null && ipConfigurationsItem.etag !== undefined) {
          networkInterfaceIpConfigurationJsonFormatValue['etag'] = ipConfigurationsItem.etag;
        }
        
        if (ipConfigurationsItem.id !== null && ipConfigurationsItem.id !== undefined) {
          networkInterfaceIpConfigurationJsonFormatValue['id'] = ipConfigurationsItem.id;
        }
      }
      propertiesValue['ipConfigurations'] = ipConfigurationsArray;
    }
    
    if (parameters.dnsSettings !== null && parameters.dnsSettings !== undefined) {
      var dnsSettingsValue = {};
      propertiesValue['dnsSettings'] = dnsSettingsValue;
      
      if (parameters.dnsSettings.dnsServers !== null && parameters.dnsSettings.dnsServers !== undefined) {
        var dnsServersArray = [];
        for (var loweredIndex4 = 0; loweredIndex4 < parameters.dnsSettings.dnsServers.length; loweredIndex4 = loweredIndex4 + 1) {
          var dnsServersItem = parameters.dnsSettings.dnsServers[loweredIndex4];
          dnsServersArray.push(dnsServersItem);
        }
        dnsSettingsValue['dnsServers'] = dnsServersArray;
      }
      
      if (parameters.dnsSettings.appliedDnsServers !== null && parameters.dnsSettings.appliedDnsServers !== undefined) {
        var appliedDnsServersArray = [];
        for (var loweredIndex5 = 0; loweredIndex5 < parameters.dnsSettings.appliedDnsServers.length; loweredIndex5 = loweredIndex5 + 1) {
          var appliedDnsServersItem = parameters.dnsSettings.appliedDnsServers[loweredIndex5];
          appliedDnsServersArray.push(appliedDnsServersItem);
        }
        dnsSettingsValue['appliedDnsServers'] = appliedDnsServersArray;
      }
      
      if (parameters.dnsSettings.internalDnsNameLabel !== null && parameters.dnsSettings.internalDnsNameLabel !== undefined) {
        dnsSettingsValue['internalDnsNameLabel'] = parameters.dnsSettings.internalDnsNameLabel;
      }
      
      if (parameters.dnsSettings.internalFqdn !== null && parameters.dnsSettings.internalFqdn !== undefined) {
        dnsSettingsValue['internalFqdn'] = parameters.dnsSettings.internalFqdn;
      }
    }
    
    if (parameters.macAddress !== null && parameters.macAddress !== undefined) {
      propertiesValue['macAddress'] = parameters.macAddress;
    }
    
    if (parameters.primary !== null && parameters.primary !== undefined) {
      propertiesValue['primary'] = parameters.primary;
    }
    
    if (parameters.enableIPForwarding !== null && parameters.enableIPForwarding !== undefined) {
      propertiesValue['enableIPForwarding'] = parameters.enableIPForwarding;
    }
    
    if (parameters.resourceGuid !== null && parameters.resourceGuid !== undefined) {
      propertiesValue['resourceGuid'] = parameters.resourceGuid;
    }
    
    if (parameters.provisioningState !== null && parameters.provisioningState !== undefined) {
      propertiesValue['provisioningState'] = parameters.provisioningState;
    }
    
    if (parameters.etag !== null && parameters.etag !== undefined) {
      networkInterfaceJsonFormatValue['etag'] = parameters.etag;
    }
    
    if (parameters.id !== null && parameters.id !== undefined) {
      networkInterfaceJsonFormatValue['id'] = parameters.id;
    }
    
    if (parameters.name !== null && parameters.name !== undefined) {
      networkInterfaceJsonFormatValue['name'] = parameters.name;
    }
    
    if (parameters.type !== null && parameters.type !== undefined) {
      networkInterfaceJsonFormatValue['type'] = parameters.type;
    }
    
    if (parameters.location !== null && parameters.location !== undefined) {
      networkInterfaceJsonFormatValue['location'] = parameters.location;
    }
    
    if (parameters.tags !== null && parameters.tags !== undefined) {
      var tagsDictionary = {};
      for (var tagsKey in parameters.tags) {
        var tagsValue = parameters.tags[tagsKey];
        tagsDictionary[tagsKey] = tagsValue;
      }
      networkInterfaceJsonFormatValue['tags'] = tagsDictionary;
    }
    
    requestContent = JSON.stringify(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200 && statusCode !== 201) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200 || statusCode === 201) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var networkInterfaceInstance = { ipConfigurations: [], tags: {} };
          result.networkInterface = networkInterfaceInstance;
          
          var propertiesValue3 = responseDoc['properties'];
          if (propertiesValue3 !== null && propertiesValue3 !== undefined) {
            var virtualMachineValue2 = propertiesValue3['virtualMachine'];
            if (virtualMachineValue2 !== null && virtualMachineValue2 !== undefined) {
              var virtualMachineInstance = {};
              networkInterfaceInstance.virtualMachine = virtualMachineInstance;
              
              var idValue = virtualMachineValue2['id'];
              if (idValue !== null && idValue !== undefined) {
                var idInstance = idValue;
                virtualMachineInstance.id = idInstance;
              }
            }
            
            var networkSecurityGroupValue2 = propertiesValue3['networkSecurityGroup'];
            if (networkSecurityGroupValue2 !== null && networkSecurityGroupValue2 !== undefined) {
              var networkSecurityGroupInstance = {};
              networkInterfaceInstance.networkSecurityGroup = networkSecurityGroupInstance;
              
              var idValue2 = networkSecurityGroupValue2['id'];
              if (idValue2 !== null && idValue2 !== undefined) {
                var idInstance2 = idValue2;
                networkSecurityGroupInstance.id = idInstance2;
              }
            }
            
            var ipConfigurationsArray2 = propertiesValue3['ipConfigurations'];
            if (ipConfigurationsArray2 !== null && ipConfigurationsArray2 !== undefined) {
              for (var loweredIndex6 = 0; loweredIndex6 < ipConfigurationsArray2.length; loweredIndex6 = loweredIndex6 + 1) {
                var ipConfigurationsValue = ipConfigurationsArray2[loweredIndex6];
                var networkInterfaceIpConfigurationJsonFormatInstance = { loadBalancerBackendAddressPools: [], loadBalancerInboundNatRules: [] };
                networkInterfaceInstance.ipConfigurations.push(networkInterfaceIpConfigurationJsonFormatInstance);
                
                var propertiesValue4 = ipConfigurationsValue['properties'];
                if (propertiesValue4 !== null && propertiesValue4 !== undefined) {
                  var privateIPAddressValue = propertiesValue4['privateIPAddress'];
                  if (privateIPAddressValue !== null && privateIPAddressValue !== undefined) {
                    var privateIPAddressInstance = privateIPAddressValue;
                    networkInterfaceIpConfigurationJsonFormatInstance.privateIpAddress = privateIPAddressInstance;
                  }
                  
                  var privateIPAllocationMethodValue = propertiesValue4['privateIPAllocationMethod'];
                  if (privateIPAllocationMethodValue !== null && privateIPAllocationMethodValue !== undefined) {
                    var privateIPAllocationMethodInstance = privateIPAllocationMethodValue;
                    networkInterfaceIpConfigurationJsonFormatInstance.privateIpAllocationMethod = privateIPAllocationMethodInstance;
                  }
                  
                  var subnetValue2 = propertiesValue4['subnet'];
                  if (subnetValue2 !== null && subnetValue2 !== undefined) {
                    var subnetInstance = {};
                    networkInterfaceIpConfigurationJsonFormatInstance.subnet = subnetInstance;
                    
                    var idValue3 = subnetValue2['id'];
                    if (idValue3 !== null && idValue3 !== undefined) {
                      var idInstance3 = idValue3;
                      subnetInstance.id = idInstance3;
                    }
                  }
                  
                  var publicIPAddressValue2 = propertiesValue4['publicIPAddress'];
                  if (publicIPAddressValue2 !== null && publicIPAddressValue2 !== undefined) {
                    var publicIPAddressInstance = {};
                    networkInterfaceIpConfigurationJsonFormatInstance.publicIpAddress = publicIPAddressInstance;
                    
                    var idValue4 = publicIPAddressValue2['id'];
                    if (idValue4 !== null && idValue4 !== undefined) {
                      var idInstance4 = idValue4;
                      publicIPAddressInstance.id = idInstance4;
                    }
                  }
                  
                  var loadBalancerBackendAddressPoolsArray2 = propertiesValue4['loadBalancerBackendAddressPools'];
                  if (loadBalancerBackendAddressPoolsArray2 !== null && loadBalancerBackendAddressPoolsArray2 !== undefined) {
                    for (var loweredIndex7 = 0; loweredIndex7 < loadBalancerBackendAddressPoolsArray2.length; loweredIndex7 = loweredIndex7 + 1) {
                      var loadBalancerBackendAddressPoolsValue = loadBalancerBackendAddressPoolsArray2[loweredIndex7];
                      var resourceIdInstance = {};
                      networkInterfaceIpConfigurationJsonFormatInstance.loadBalancerBackendAddressPools.push(resourceIdInstance);
                      
                      var idValue5 = loadBalancerBackendAddressPoolsValue['id'];
                      if (idValue5 !== null && idValue5 !== undefined) {
                        var idInstance5 = idValue5;
                        resourceIdInstance.id = idInstance5;
                      }
                    }
                  }
                  
                  var loadBalancerInboundNatRulesArray2 = propertiesValue4['loadBalancerInboundNatRules'];
                  if (loadBalancerInboundNatRulesArray2 !== null && loadBalancerInboundNatRulesArray2 !== undefined) {
                    for (var loweredIndex8 = 0; loweredIndex8 < loadBalancerInboundNatRulesArray2.length; loweredIndex8 = loweredIndex8 + 1) {
                      var loadBalancerInboundNatRulesValue = loadBalancerInboundNatRulesArray2[loweredIndex8];
                      var resourceIdInstance2 = {};
                      networkInterfaceIpConfigurationJsonFormatInstance.loadBalancerInboundNatRules.push(resourceIdInstance2);
                      
                      var idValue6 = loadBalancerInboundNatRulesValue['id'];
                      if (idValue6 !== null && idValue6 !== undefined) {
                        var idInstance6 = idValue6;
                        resourceIdInstance2.id = idInstance6;
                      }
                    }
                  }
                  
                  var provisioningStateValue = propertiesValue4['provisioningState'];
                  if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
                    var provisioningStateInstance = provisioningStateValue;
                    networkInterfaceIpConfigurationJsonFormatInstance.provisioningState = provisioningStateInstance;
                  }
                }
                
                var nameValue = ipConfigurationsValue['name'];
                if (nameValue !== null && nameValue !== undefined) {
                  var nameInstance = nameValue;
                  networkInterfaceIpConfigurationJsonFormatInstance.name = nameInstance;
                }
                
                var etagValue = ipConfigurationsValue['etag'];
                if (etagValue !== null && etagValue !== undefined) {
                  var etagInstance = etagValue;
                  networkInterfaceIpConfigurationJsonFormatInstance.etag = etagInstance;
                }
                
                var idValue7 = ipConfigurationsValue['id'];
                if (idValue7 !== null && idValue7 !== undefined) {
                  var idInstance7 = idValue7;
                  networkInterfaceIpConfigurationJsonFormatInstance.id = idInstance7;
                }
              }
            }
            
            var dnsSettingsValue2 = propertiesValue3['dnsSettings'];
            if (dnsSettingsValue2 !== null && dnsSettingsValue2 !== undefined) {
              var dnsSettingsInstance = { appliedDnsServers: [], dnsServers: [] };
              networkInterfaceInstance.dnsSettings = dnsSettingsInstance;
              
              var dnsServersArray2 = dnsSettingsValue2['dnsServers'];
              if (dnsServersArray2 !== null && dnsServersArray2 !== undefined) {
                for (var loweredIndex9 = 0; loweredIndex9 < dnsServersArray2.length; loweredIndex9 = loweredIndex9 + 1) {
                  var dnsServersValue = dnsServersArray2[loweredIndex9];
                  dnsSettingsInstance.dnsServers.push(dnsServersValue);
                }
              }
              
              var appliedDnsServersArray2 = dnsSettingsValue2['appliedDnsServers'];
              if (appliedDnsServersArray2 !== null && appliedDnsServersArray2 !== undefined) {
                for (var loweredIndex10 = 0; loweredIndex10 < appliedDnsServersArray2.length; loweredIndex10 = loweredIndex10 + 1) {
                  var appliedDnsServersValue = appliedDnsServersArray2[loweredIndex10];
                  dnsSettingsInstance.appliedDnsServers.push(appliedDnsServersValue);
                }
              }
              
              var internalDnsNameLabelValue = dnsSettingsValue2['internalDnsNameLabel'];
              if (internalDnsNameLabelValue !== null && internalDnsNameLabelValue !== undefined) {
                var internalDnsNameLabelInstance = internalDnsNameLabelValue;
                dnsSettingsInstance.internalDnsNameLabel = internalDnsNameLabelInstance;
              }
              
              var internalFqdnValue = dnsSettingsValue2['internalFqdn'];
              if (internalFqdnValue !== null && internalFqdnValue !== undefined) {
                var internalFqdnInstance = internalFqdnValue;
                dnsSettingsInstance.internalFqdn = internalFqdnInstance;
              }
            }
            
            var macAddressValue = propertiesValue3['macAddress'];
            if (macAddressValue !== null && macAddressValue !== undefined) {
              var macAddressInstance = macAddressValue;
              networkInterfaceInstance.macAddress = macAddressInstance;
            }
            
            var primaryValue = propertiesValue3['primary'];
            if (primaryValue !== null && primaryValue !== undefined) {
              var primaryInstance = primaryValue;
              networkInterfaceInstance.primary = primaryInstance;
            }
            
            var enableIPForwardingValue = propertiesValue3['enableIPForwarding'];
            if (enableIPForwardingValue !== null && enableIPForwardingValue !== undefined) {
              var enableIPForwardingInstance = enableIPForwardingValue;
              networkInterfaceInstance.enableIPForwarding = enableIPForwardingInstance;
            }
            
            var resourceGuidValue = propertiesValue3['resourceGuid'];
            if (resourceGuidValue !== null && resourceGuidValue !== undefined) {
              var resourceGuidInstance = resourceGuidValue;
              networkInterfaceInstance.resourceGuid = resourceGuidInstance;
            }
            
            var provisioningStateValue2 = propertiesValue3['provisioningState'];
            if (provisioningStateValue2 !== null && provisioningStateValue2 !== undefined) {
              var provisioningStateInstance2 = provisioningStateValue2;
              networkInterfaceInstance.provisioningState = provisioningStateInstance2;
            }
          }
          
          var etagValue2 = responseDoc['etag'];
          if (etagValue2 !== null && etagValue2 !== undefined) {
            var etagInstance2 = etagValue2;
            networkInterfaceInstance.etag = etagInstance2;
          }
          
          var idValue8 = responseDoc['id'];
          if (idValue8 !== null && idValue8 !== undefined) {
            var idInstance8 = idValue8;
            networkInterfaceInstance.id = idInstance8;
          }
          
          var nameValue2 = responseDoc['name'];
          if (nameValue2 !== null && nameValue2 !== undefined) {
            var nameInstance2 = nameValue2;
            networkInterfaceInstance.name = nameInstance2;
          }
          
          var typeValue = responseDoc['type'];
          if (typeValue !== null && typeValue !== undefined) {
            var typeInstance = typeValue;
            networkInterfaceInstance.type = typeInstance;
          }
          
          var locationValue = responseDoc['location'];
          if (locationValue !== null && locationValue !== undefined) {
            var locationInstance = locationValue;
            networkInterfaceInstance.location = locationInstance;
          }
          
          var tagsSequenceElement = responseDoc['tags'];
          if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
            for (var property in tagsSequenceElement) {
              var tagsKey2 = property;
              var tagsValue2 = tagsSequenceElement[property];
              networkInterfaceInstance.tags[tagsKey2] = tagsValue2;
            }
          }
          
          var errorValue = responseDoc['error'];
          if (errorValue !== null && errorValue !== undefined) {
            var errorInstance = { details: [] };
            result.error = errorInstance;
            
            var codeValue = errorValue['code'];
            if (codeValue !== null && codeValue !== undefined) {
              var codeInstance = codeValue;
              errorInstance.code = codeInstance;
            }
            
            var messageValue = errorValue['message'];
            if (messageValue !== null && messageValue !== undefined) {
              var messageInstance = messageValue;
              errorInstance.message = messageInstance;
            }
            
            var targetValue = errorValue['target'];
            if (targetValue !== null && targetValue !== undefined) {
              var targetInstance = targetValue;
              errorInstance.target = targetInstance;
            }
            
            var detailsArray = errorValue['details'];
            if (detailsArray !== null && detailsArray !== undefined) {
              for (var loweredIndex11 = 0; loweredIndex11 < detailsArray.length; loweredIndex11 = loweredIndex11 + 1) {
                var detailsValue = detailsArray[loweredIndex11];
                var errorDetailsInstance = {};
                errorInstance.details.push(errorDetailsInstance);
                
                var codeValue2 = detailsValue['code'];
                if (codeValue2 !== null && codeValue2 !== undefined) {
                  var codeInstance2 = codeValue2;
                  errorDetailsInstance.code = codeInstance2;
                }
                
                var targetValue2 = detailsValue['target'];
                if (targetValue2 !== null && targetValue2 !== undefined) {
                  var targetInstance2 = targetValue2;
                  errorDetailsInstance.target = targetInstance2;
                }
                
                var messageValue2 = detailsValue['message'];
                if (messageValue2 !== null && messageValue2 !== undefined) {
                  var messageInstance2 = messageValue2;
                  errorDetailsInstance.message = messageInstance2;
                }
              }
            }
            
            var innerErrorValue = errorValue['innerError'];
            if (innerErrorValue !== null && innerErrorValue !== undefined) {
              var innerErrorInstance = innerErrorValue;
              errorInstance.innerError = innerErrorInstance;
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      result.azureAsyncOperation = response.headers['azure-asyncoperation'];
      result.retryAfter = parseInt(response.headers['retry-after'], 10);
      
      return callback(null, result);
    });
  };
  
  /**
   * The delete netwokInterface operation deletes the specified netwokInterface.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} networkInterfaceName The name of the network interface.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  NetworkInterfaceOperations.prototype.beginDeleting = function(resourceGroupName, networkInterfaceName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (networkInterfaceName === null || networkInterfaceName === undefined) {
      return callback(new Error('networkInterfaceName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Network';
    url2 = url2 + '/networkInterfaces/';
    url2 = url2 + encodeURIComponent(networkInterfaceName);
    var queryParameters = [];
    queryParameters.push('api-version=2015-05-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'DELETE';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200 && statusCode !== 202 && statusCode !== 204) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      result = {};
      result.statusCode = statusCode;
      result.azureAsyncOperation = response.headers['azure-asyncoperation'];
      result.retryAfter = parseInt(response.headers['retry-after'], 10);
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The Put NetworkInterface operation creates/updates a networkInterface
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} networkInterfaceName The name of the network interface.
   * 
   * @param {NetworkInterface} parameters Parameters supplied to the
   * create/update NetworkInterface operation
   * 
   * @param {ResourceId} [parameters.virtualMachine] Gets or sets the reference
   * of a VirtualMachine
   * 
   * @param {string} [parameters.virtualMachine.id] Id of the resource
   * 
   * @param {ResourceId} [parameters.networkSecurityGroup] Gets or sets the
   * reference of the NetworkSecurityGroup resource
   * 
   * @param {string} [parameters.networkSecurityGroup.id] Id of the resource
   * 
   * @param {IEnumerable} [parameters.ipConfigurations] Gets or sets list of
   * IPConfigurations of the NetworkInterface
   * 
   * @param {NetworkInterfaceDnsSettings} [parameters.dnsSettings] Gets or sets
   * DNS Settings in  NetworkInterface
   * 
   * @param {IEnumerable} [parameters.dnsSettings.dnsServers] Gets or sets list
   * of DNS servers IP addresses
   * 
   * @param {IEnumerable} [parameters.dnsSettings.appliedDnsServers] Gets or
   * sets list of Applied DNS servers IP addresses
   * 
   * @param {string} [parameters.dnsSettings.internalDnsNameLabel] Gets or sets
   * the Internal DNS name
   * 
   * @param {string} [parameters.dnsSettings.internalFqdn] Gets or sets full
   * IDNS name in the form, DnsName.VnetId.ZoneId.TopleveSuffix. This is set
   * when the NIC is associated to a VM
   * 
   * @param {string} [parameters.macAddress] Gets the MAC Address of the
   * network interface
   * 
   * @param {boolean} [parameters.primary] Gets whether this is a primary NIC
   * on a virtual machine
   * 
   * @param {boolean} [parameters.enableIPForwarding] Gets or sets whether
   * IPForwarding is enabled on the NIC
   * 
   * @param {string} [parameters.provisioningState] Gets or sets Provisioning
   * state of the PublicIP resource Updating/Deleting/Failed
   * 
   * @param {string} [parameters.resourceGuid] Gets or sets resource guid
   * property of the network interface resource
   * 
   * @param {string} [parameters.etag] Gets a unique read-only string that
   * changes whenever the resource is updated
   * 
   * @param {string} [parameters.id] Gets or sets the ID of the resource.
   * 
   * @param {string} [parameters.name] Gets or sets the name of the resource.
   * 
   * @param {string} [parameters.type] Gets or sets the type of the resource.
   * 
   * @param {string} [parameters.location] Gets or sets the location of the
   * resource.
   * 
   * @param {object} [parameters.tags] Gets or sets the tags attached to the
   * resource.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  NetworkInterfaceOperations.prototype.createOrUpdate = function(resourceGroupName, networkInterfaceName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.networkInterfaces.beginCreateOrUpdating(resourceGroupName, networkInterfaceName, parameters, function (err, result) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var delayInSeconds = result.retryAfter;
      if (delayInSeconds === 0) {
        delayInSeconds = 30;
      }
      if (client2.longRunningOperationInitialTimeout >= 0) {
        delayInSeconds = client2.longRunningOperationInitialTimeout;
      }
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.getLongRunningOperationStatus(result.azureAsyncOperation, function (err2, result2) {
            if (err2 !== null && err2 !== undefined) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                return callback(null, result2);
              } else {
                delayInSeconds = result2.retryAfter;
                if (delayInSeconds === 0) {
                  delayInSeconds = 15;
                }
                if (client2.longRunningOperationRetryTimeout >= 0) {
                  delayInSeconds = client2.longRunningOperationRetryTimeout;
                }
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  /**
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} networkInterfaceName The name of the network interface.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  NetworkInterfaceOperations.prototype.deleteMethod = function(resourceGroupName, networkInterfaceName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.networkInterfaces.beginDeleting(resourceGroupName, networkInterfaceName, function (err, result) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var delayInSeconds = result.retryAfter;
      if (delayInSeconds === 0) {
        delayInSeconds = 30;
      }
      if (client2.longRunningOperationInitialTimeout >= 0) {
        delayInSeconds = client2.longRunningOperationInitialTimeout;
      }
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.getLongRunningOperationStatus(result.azureAsyncOperation, function (err2, result2) {
            if (err2 !== null && err2 !== undefined) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                return callback(null, result2);
              } else {
                delayInSeconds = result2.retryAfter;
                if (delayInSeconds === 0) {
                  delayInSeconds = 15;
                }
                if (client2.longRunningOperationRetryTimeout >= 0) {
                  delayInSeconds = client2.longRunningOperationRetryTimeout;
                }
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  /**
   * The Get ntework interface operation retreives information about the
   * specified network interface.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} networkInterfaceName The name of the network interface.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  NetworkInterfaceOperations.prototype.get = function(resourceGroupName, networkInterfaceName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (networkInterfaceName === null || networkInterfaceName === undefined) {
      return callback(new Error('networkInterfaceName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Network';
    url2 = url2 + '/networkInterfaces/';
    url2 = url2 + encodeURIComponent(networkInterfaceName);
    var queryParameters = [];
    queryParameters.push('api-version=2015-05-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var networkInterfaceInstance = { ipConfigurations: [], tags: {} };
          result.networkInterface = networkInterfaceInstance;
          
          var propertiesValue = responseDoc['properties'];
          if (propertiesValue !== null && propertiesValue !== undefined) {
            var virtualMachineValue = propertiesValue['virtualMachine'];
            if (virtualMachineValue !== null && virtualMachineValue !== undefined) {
              var virtualMachineInstance = {};
              networkInterfaceInstance.virtualMachine = virtualMachineInstance;
              
              var idValue = virtualMachineValue['id'];
              if (idValue !== null && idValue !== undefined) {
                var idInstance = idValue;
                virtualMachineInstance.id = idInstance;
              }
            }
            
            var networkSecurityGroupValue = propertiesValue['networkSecurityGroup'];
            if (networkSecurityGroupValue !== null && networkSecurityGroupValue !== undefined) {
              var networkSecurityGroupInstance = {};
              networkInterfaceInstance.networkSecurityGroup = networkSecurityGroupInstance;
              
              var idValue2 = networkSecurityGroupValue['id'];
              if (idValue2 !== null && idValue2 !== undefined) {
                var idInstance2 = idValue2;
                networkSecurityGroupInstance.id = idInstance2;
              }
            }
            
            var ipConfigurationsArray = propertiesValue['ipConfigurations'];
            if (ipConfigurationsArray !== null && ipConfigurationsArray !== undefined) {
              for (var loweredIndex1 = 0; loweredIndex1 < ipConfigurationsArray.length; loweredIndex1 = loweredIndex1 + 1) {
                var ipConfigurationsValue = ipConfigurationsArray[loweredIndex1];
                var networkInterfaceIpConfigurationJsonFormatInstance = { loadBalancerBackendAddressPools: [], loadBalancerInboundNatRules: [] };
                networkInterfaceInstance.ipConfigurations.push(networkInterfaceIpConfigurationJsonFormatInstance);
                
                var propertiesValue2 = ipConfigurationsValue['properties'];
                if (propertiesValue2 !== null && propertiesValue2 !== undefined) {
                  var privateIPAddressValue = propertiesValue2['privateIPAddress'];
                  if (privateIPAddressValue !== null && privateIPAddressValue !== undefined) {
                    var privateIPAddressInstance = privateIPAddressValue;
                    networkInterfaceIpConfigurationJsonFormatInstance.privateIpAddress = privateIPAddressInstance;
                  }
                  
                  var privateIPAllocationMethodValue = propertiesValue2['privateIPAllocationMethod'];
                  if (privateIPAllocationMethodValue !== null && privateIPAllocationMethodValue !== undefined) {
                    var privateIPAllocationMethodInstance = privateIPAllocationMethodValue;
                    networkInterfaceIpConfigurationJsonFormatInstance.privateIpAllocationMethod = privateIPAllocationMethodInstance;
                  }
                  
                  var subnetValue = propertiesValue2['subnet'];
                  if (subnetValue !== null && subnetValue !== undefined) {
                    var subnetInstance = {};
                    networkInterfaceIpConfigurationJsonFormatInstance.subnet = subnetInstance;
                    
                    var idValue3 = subnetValue['id'];
                    if (idValue3 !== null && idValue3 !== undefined) {
                      var idInstance3 = idValue3;
                      subnetInstance.id = idInstance3;
                    }
                  }
                  
                  var publicIPAddressValue = propertiesValue2['publicIPAddress'];
                  if (publicIPAddressValue !== null && publicIPAddressValue !== undefined) {
                    var publicIPAddressInstance = {};
                    networkInterfaceIpConfigurationJsonFormatInstance.publicIpAddress = publicIPAddressInstance;
                    
                    var idValue4 = publicIPAddressValue['id'];
                    if (idValue4 !== null && idValue4 !== undefined) {
                      var idInstance4 = idValue4;
                      publicIPAddressInstance.id = idInstance4;
                    }
                  }
                  
                  var loadBalancerBackendAddressPoolsArray = propertiesValue2['loadBalancerBackendAddressPools'];
                  if (loadBalancerBackendAddressPoolsArray !== null && loadBalancerBackendAddressPoolsArray !== undefined) {
                    for (var loweredIndex2 = 0; loweredIndex2 < loadBalancerBackendAddressPoolsArray.length; loweredIndex2 = loweredIndex2 + 1) {
                      var loadBalancerBackendAddressPoolsValue = loadBalancerBackendAddressPoolsArray[loweredIndex2];
                      var resourceIdInstance = {};
                      networkInterfaceIpConfigurationJsonFormatInstance.loadBalancerBackendAddressPools.push(resourceIdInstance);
                      
                      var idValue5 = loadBalancerBackendAddressPoolsValue['id'];
                      if (idValue5 !== null && idValue5 !== undefined) {
                        var idInstance5 = idValue5;
                        resourceIdInstance.id = idInstance5;
                      }
                    }
                  }
                  
                  var loadBalancerInboundNatRulesArray = propertiesValue2['loadBalancerInboundNatRules'];
                  if (loadBalancerInboundNatRulesArray !== null && loadBalancerInboundNatRulesArray !== undefined) {
                    for (var loweredIndex3 = 0; loweredIndex3 < loadBalancerInboundNatRulesArray.length; loweredIndex3 = loweredIndex3 + 1) {
                      var loadBalancerInboundNatRulesValue = loadBalancerInboundNatRulesArray[loweredIndex3];
                      var resourceIdInstance2 = {};
                      networkInterfaceIpConfigurationJsonFormatInstance.loadBalancerInboundNatRules.push(resourceIdInstance2);
                      
                      var idValue6 = loadBalancerInboundNatRulesValue['id'];
                      if (idValue6 !== null && idValue6 !== undefined) {
                        var idInstance6 = idValue6;
                        resourceIdInstance2.id = idInstance6;
                      }
                    }
                  }
                  
                  var provisioningStateValue = propertiesValue2['provisioningState'];
                  if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
                    var provisioningStateInstance = provisioningStateValue;
                    networkInterfaceIpConfigurationJsonFormatInstance.provisioningState = provisioningStateInstance;
                  }
                }
                
                var nameValue = ipConfigurationsValue['name'];
                if (nameValue !== null && nameValue !== undefined) {
                  var nameInstance = nameValue;
                  networkInterfaceIpConfigurationJsonFormatInstance.name = nameInstance;
                }
                
                var etagValue = ipConfigurationsValue['etag'];
                if (etagValue !== null && etagValue !== undefined) {
                  var etagInstance = etagValue;
                  networkInterfaceIpConfigurationJsonFormatInstance.etag = etagInstance;
                }
                
                var idValue7 = ipConfigurationsValue['id'];
                if (idValue7 !== null && idValue7 !== undefined) {
                  var idInstance7 = idValue7;
                  networkInterfaceIpConfigurationJsonFormatInstance.id = idInstance7;
                }
              }
            }
            
            var dnsSettingsValue = propertiesValue['dnsSettings'];
            if (dnsSettingsValue !== null && dnsSettingsValue !== undefined) {
              var dnsSettingsInstance = { appliedDnsServers: [], dnsServers: [] };
              networkInterfaceInstance.dnsSettings = dnsSettingsInstance;
              
              var dnsServersArray = dnsSettingsValue['dnsServers'];
              if (dnsServersArray !== null && dnsServersArray !== undefined) {
                for (var loweredIndex4 = 0; loweredIndex4 < dnsServersArray.length; loweredIndex4 = loweredIndex4 + 1) {
                  var dnsServersValue = dnsServersArray[loweredIndex4];
                  dnsSettingsInstance.dnsServers.push(dnsServersValue);
                }
              }
              
              var appliedDnsServersArray = dnsSettingsValue['appliedDnsServers'];
              if (appliedDnsServersArray !== null && appliedDnsServersArray !== undefined) {
                for (var loweredIndex5 = 0; loweredIndex5 < appliedDnsServersArray.length; loweredIndex5 = loweredIndex5 + 1) {
                  var appliedDnsServersValue = appliedDnsServersArray[loweredIndex5];
                  dnsSettingsInstance.appliedDnsServers.push(appliedDnsServersValue);
                }
              }
              
              var internalDnsNameLabelValue = dnsSettingsValue['internalDnsNameLabel'];
              if (internalDnsNameLabelValue !== null && internalDnsNameLabelValue !== undefined) {
                var internalDnsNameLabelInstance = internalDnsNameLabelValue;
                dnsSettingsInstance.internalDnsNameLabel = internalDnsNameLabelInstance;
              }
              
              var internalFqdnValue = dnsSettingsValue['internalFqdn'];
              if (internalFqdnValue !== null && internalFqdnValue !== undefined) {
                var internalFqdnInstance = internalFqdnValue;
                dnsSettingsInstance.internalFqdn = internalFqdnInstance;
              }
            }
            
            var macAddressValue = propertiesValue['macAddress'];
            if (macAddressValue !== null && macAddressValue !== undefined) {
              var macAddressInstance = macAddressValue;
              networkInterfaceInstance.macAddress = macAddressInstance;
            }
            
            var primaryValue = propertiesValue['primary'];
            if (primaryValue !== null && primaryValue !== undefined) {
              var primaryInstance = primaryValue;
              networkInterfaceInstance.primary = primaryInstance;
            }
            
            var enableIPForwardingValue = propertiesValue['enableIPForwarding'];
            if (enableIPForwardingValue !== null && enableIPForwardingValue !== undefined) {
              var enableIPForwardingInstance = enableIPForwardingValue;
              networkInterfaceInstance.enableIPForwarding = enableIPForwardingInstance;
            }
            
            var resourceGuidValue = propertiesValue['resourceGuid'];
            if (resourceGuidValue !== null && resourceGuidValue !== undefined) {
              var resourceGuidInstance = resourceGuidValue;
              networkInterfaceInstance.resourceGuid = resourceGuidInstance;
            }
            
            var provisioningStateValue2 = propertiesValue['provisioningState'];
            if (provisioningStateValue2 !== null && provisioningStateValue2 !== undefined) {
              var provisioningStateInstance2 = provisioningStateValue2;
              networkInterfaceInstance.provisioningState = provisioningStateInstance2;
            }
          }
          
          var etagValue2 = responseDoc['etag'];
          if (etagValue2 !== null && etagValue2 !== undefined) {
            var etagInstance2 = etagValue2;
            networkInterfaceInstance.etag = etagInstance2;
          }
          
          var idValue8 = responseDoc['id'];
          if (idValue8 !== null && idValue8 !== undefined) {
            var idInstance8 = idValue8;
            networkInterfaceInstance.id = idInstance8;
          }
          
          var nameValue2 = responseDoc['name'];
          if (nameValue2 !== null && nameValue2 !== undefined) {
            var nameInstance2 = nameValue2;
            networkInterfaceInstance.name = nameInstance2;
          }
          
          var typeValue = responseDoc['type'];
          if (typeValue !== null && typeValue !== undefined) {
            var typeInstance = typeValue;
            networkInterfaceInstance.type = typeInstance;
          }
          
          var locationValue = responseDoc['location'];
          if (locationValue !== null && locationValue !== undefined) {
            var locationInstance = locationValue;
            networkInterfaceInstance.location = locationInstance;
          }
          
          var tagsSequenceElement = responseDoc['tags'];
          if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
            for (var property in tagsSequenceElement) {
              var tagsKey = property;
              var tagsValue = tagsSequenceElement[property];
              networkInterfaceInstance.tags[tagsKey] = tagsValue;
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The Get ntework interface operation retreives information about the
   * specified network interface in a virtual machine scale set.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} virtualMachineScaleSetName The name of the virtual machine
   * scale set.
   * 
   * @param {string} virtualmachineIndex The virtual machine index.
   * 
   * @param {string} networkInterfaceName The name of the network interface.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  NetworkInterfaceOperations.prototype.getVirtualMachineScaleSetNetworkInterface = function(resourceGroupName, virtualMachineScaleSetName, virtualmachineIndex, networkInterfaceName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (virtualMachineScaleSetName === null || virtualMachineScaleSetName === undefined) {
      return callback(new Error('virtualMachineScaleSetName cannot be null.'));
    }
    if (virtualmachineIndex === null || virtualmachineIndex === undefined) {
      return callback(new Error('virtualmachineIndex cannot be null.'));
    }
    if (networkInterfaceName === null || networkInterfaceName === undefined) {
      return callback(new Error('networkInterfaceName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/microsoft.compute/virtualMachineScaleSets/';
    url2 = url2 + encodeURIComponent(virtualMachineScaleSetName);
    url2 = url2 + '/virtualMachines/';
    url2 = url2 + encodeURIComponent(virtualmachineIndex);
    url2 = url2 + '/networkInterfaces/';
    url2 = url2 + encodeURIComponent(networkInterfaceName);
    var queryParameters = [];
    queryParameters.push('api-version=2015-05-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var networkInterfaceInstance = { ipConfigurations: [], tags: {} };
          result.networkInterface = networkInterfaceInstance;
          
          var propertiesValue = responseDoc['properties'];
          if (propertiesValue !== null && propertiesValue !== undefined) {
            var virtualMachineValue = propertiesValue['virtualMachine'];
            if (virtualMachineValue !== null && virtualMachineValue !== undefined) {
              var virtualMachineInstance = {};
              networkInterfaceInstance.virtualMachine = virtualMachineInstance;
              
              var idValue = virtualMachineValue['id'];
              if (idValue !== null && idValue !== undefined) {
                var idInstance = idValue;
                virtualMachineInstance.id = idInstance;
              }
            }
            
            var networkSecurityGroupValue = propertiesValue['networkSecurityGroup'];
            if (networkSecurityGroupValue !== null && networkSecurityGroupValue !== undefined) {
              var networkSecurityGroupInstance = {};
              networkInterfaceInstance.networkSecurityGroup = networkSecurityGroupInstance;
              
              var idValue2 = networkSecurityGroupValue['id'];
              if (idValue2 !== null && idValue2 !== undefined) {
                var idInstance2 = idValue2;
                networkSecurityGroupInstance.id = idInstance2;
              }
            }
            
            var ipConfigurationsArray = propertiesValue['ipConfigurations'];
            if (ipConfigurationsArray !== null && ipConfigurationsArray !== undefined) {
              for (var loweredIndex1 = 0; loweredIndex1 < ipConfigurationsArray.length; loweredIndex1 = loweredIndex1 + 1) {
                var ipConfigurationsValue = ipConfigurationsArray[loweredIndex1];
                var networkInterfaceIpConfigurationJsonFormatInstance = { loadBalancerBackendAddressPools: [], loadBalancerInboundNatRules: [] };
                networkInterfaceInstance.ipConfigurations.push(networkInterfaceIpConfigurationJsonFormatInstance);
                
                var propertiesValue2 = ipConfigurationsValue['properties'];
                if (propertiesValue2 !== null && propertiesValue2 !== undefined) {
                  var privateIPAddressValue = propertiesValue2['privateIPAddress'];
                  if (privateIPAddressValue !== null && privateIPAddressValue !== undefined) {
                    var privateIPAddressInstance = privateIPAddressValue;
                    networkInterfaceIpConfigurationJsonFormatInstance.privateIpAddress = privateIPAddressInstance;
                  }
                  
                  var privateIPAllocationMethodValue = propertiesValue2['privateIPAllocationMethod'];
                  if (privateIPAllocationMethodValue !== null && privateIPAllocationMethodValue !== undefined) {
                    var privateIPAllocationMethodInstance = privateIPAllocationMethodValue;
                    networkInterfaceIpConfigurationJsonFormatInstance.privateIpAllocationMethod = privateIPAllocationMethodInstance;
                  }
                  
                  var subnetValue = propertiesValue2['subnet'];
                  if (subnetValue !== null && subnetValue !== undefined) {
                    var subnetInstance = {};
                    networkInterfaceIpConfigurationJsonFormatInstance.subnet = subnetInstance;
                    
                    var idValue3 = subnetValue['id'];
                    if (idValue3 !== null && idValue3 !== undefined) {
                      var idInstance3 = idValue3;
                      subnetInstance.id = idInstance3;
                    }
                  }
                  
                  var publicIPAddressValue = propertiesValue2['publicIPAddress'];
                  if (publicIPAddressValue !== null && publicIPAddressValue !== undefined) {
                    var publicIPAddressInstance = {};
                    networkInterfaceIpConfigurationJsonFormatInstance.publicIpAddress = publicIPAddressInstance;
                    
                    var idValue4 = publicIPAddressValue['id'];
                    if (idValue4 !== null && idValue4 !== undefined) {
                      var idInstance4 = idValue4;
                      publicIPAddressInstance.id = idInstance4;
                    }
                  }
                  
                  var loadBalancerBackendAddressPoolsArray = propertiesValue2['loadBalancerBackendAddressPools'];
                  if (loadBalancerBackendAddressPoolsArray !== null && loadBalancerBackendAddressPoolsArray !== undefined) {
                    for (var loweredIndex2 = 0; loweredIndex2 < loadBalancerBackendAddressPoolsArray.length; loweredIndex2 = loweredIndex2 + 1) {
                      var loadBalancerBackendAddressPoolsValue = loadBalancerBackendAddressPoolsArray[loweredIndex2];
                      var resourceIdInstance = {};
                      networkInterfaceIpConfigurationJsonFormatInstance.loadBalancerBackendAddressPools.push(resourceIdInstance);
                      
                      var idValue5 = loadBalancerBackendAddressPoolsValue['id'];
                      if (idValue5 !== null && idValue5 !== undefined) {
                        var idInstance5 = idValue5;
                        resourceIdInstance.id = idInstance5;
                      }
                    }
                  }
                  
                  var loadBalancerInboundNatRulesArray = propertiesValue2['loadBalancerInboundNatRules'];
                  if (loadBalancerInboundNatRulesArray !== null && loadBalancerInboundNatRulesArray !== undefined) {
                    for (var loweredIndex3 = 0; loweredIndex3 < loadBalancerInboundNatRulesArray.length; loweredIndex3 = loweredIndex3 + 1) {
                      var loadBalancerInboundNatRulesValue = loadBalancerInboundNatRulesArray[loweredIndex3];
                      var resourceIdInstance2 = {};
                      networkInterfaceIpConfigurationJsonFormatInstance.loadBalancerInboundNatRules.push(resourceIdInstance2);
                      
                      var idValue6 = loadBalancerInboundNatRulesValue['id'];
                      if (idValue6 !== null && idValue6 !== undefined) {
                        var idInstance6 = idValue6;
                        resourceIdInstance2.id = idInstance6;
                      }
                    }
                  }
                  
                  var provisioningStateValue = propertiesValue2['provisioningState'];
                  if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
                    var provisioningStateInstance = provisioningStateValue;
                    networkInterfaceIpConfigurationJsonFormatInstance.provisioningState = provisioningStateInstance;
                  }
                }
                
                var nameValue = ipConfigurationsValue['name'];
                if (nameValue !== null && nameValue !== undefined) {
                  var nameInstance = nameValue;
                  networkInterfaceIpConfigurationJsonFormatInstance.name = nameInstance;
                }
                
                var etagValue = ipConfigurationsValue['etag'];
                if (etagValue !== null && etagValue !== undefined) {
                  var etagInstance = etagValue;
                  networkInterfaceIpConfigurationJsonFormatInstance.etag = etagInstance;
                }
                
                var idValue7 = ipConfigurationsValue['id'];
                if (idValue7 !== null && idValue7 !== undefined) {
                  var idInstance7 = idValue7;
                  networkInterfaceIpConfigurationJsonFormatInstance.id = idInstance7;
                }
              }
            }
            
            var dnsSettingsValue = propertiesValue['dnsSettings'];
            if (dnsSettingsValue !== null && dnsSettingsValue !== undefined) {
              var dnsSettingsInstance = { appliedDnsServers: [], dnsServers: [] };
              networkInterfaceInstance.dnsSettings = dnsSettingsInstance;
              
              var dnsServersArray = dnsSettingsValue['dnsServers'];
              if (dnsServersArray !== null && dnsServersArray !== undefined) {
                for (var loweredIndex4 = 0; loweredIndex4 < dnsServersArray.length; loweredIndex4 = loweredIndex4 + 1) {
                  var dnsServersValue = dnsServersArray[loweredIndex4];
                  dnsSettingsInstance.dnsServers.push(dnsServersValue);
                }
              }
              
              var appliedDnsServersArray = dnsSettingsValue['appliedDnsServers'];
              if (appliedDnsServersArray !== null && appliedDnsServersArray !== undefined) {
                for (var loweredIndex5 = 0; loweredIndex5 < appliedDnsServersArray.length; loweredIndex5 = loweredIndex5 + 1) {
                  var appliedDnsServersValue = appliedDnsServersArray[loweredIndex5];
                  dnsSettingsInstance.appliedDnsServers.push(appliedDnsServersValue);
                }
              }
              
              var internalDnsNameLabelValue = dnsSettingsValue['internalDnsNameLabel'];
              if (internalDnsNameLabelValue !== null && internalDnsNameLabelValue !== undefined) {
                var internalDnsNameLabelInstance = internalDnsNameLabelValue;
                dnsSettingsInstance.internalDnsNameLabel = internalDnsNameLabelInstance;
              }
              
              var internalFqdnValue = dnsSettingsValue['internalFqdn'];
              if (internalFqdnValue !== null && internalFqdnValue !== undefined) {
                var internalFqdnInstance = internalFqdnValue;
                dnsSettingsInstance.internalFqdn = internalFqdnInstance;
              }
            }
            
            var macAddressValue = propertiesValue['macAddress'];
            if (macAddressValue !== null && macAddressValue !== undefined) {
              var macAddressInstance = macAddressValue;
              networkInterfaceInstance.macAddress = macAddressInstance;
            }
            
            var primaryValue = propertiesValue['primary'];
            if (primaryValue !== null && primaryValue !== undefined) {
              var primaryInstance = primaryValue;
              networkInterfaceInstance.primary = primaryInstance;
            }
            
            var enableIPForwardingValue = propertiesValue['enableIPForwarding'];
            if (enableIPForwardingValue !== null && enableIPForwardingValue !== undefined) {
              var enableIPForwardingInstance = enableIPForwardingValue;
              networkInterfaceInstance.enableIPForwarding = enableIPForwardingInstance;
            }
            
            var resourceGuidValue = propertiesValue['resourceGuid'];
            if (resourceGuidValue !== null && resourceGuidValue !== undefined) {
              var resourceGuidInstance = resourceGuidValue;
              networkInterfaceInstance.resourceGuid = resourceGuidInstance;
            }
            
            var provisioningStateValue2 = propertiesValue['provisioningState'];
            if (provisioningStateValue2 !== null && provisioningStateValue2 !== undefined) {
              var provisioningStateInstance2 = provisioningStateValue2;
              networkInterfaceInstance.provisioningState = provisioningStateInstance2;
            }
          }
          
          var etagValue2 = responseDoc['etag'];
          if (etagValue2 !== null && etagValue2 !== undefined) {
            var etagInstance2 = etagValue2;
            networkInterfaceInstance.etag = etagInstance2;
          }
          
          var idValue8 = responseDoc['id'];
          if (idValue8 !== null && idValue8 !== undefined) {
            var idInstance8 = idValue8;
            networkInterfaceInstance.id = idInstance8;
          }
          
          var nameValue2 = responseDoc['name'];
          if (nameValue2 !== null && nameValue2 !== undefined) {
            var nameInstance2 = nameValue2;
            networkInterfaceInstance.name = nameInstance2;
          }
          
          var typeValue = responseDoc['type'];
          if (typeValue !== null && typeValue !== undefined) {
            var typeInstance = typeValue;
            networkInterfaceInstance.type = typeInstance;
          }
          
          var locationValue = responseDoc['location'];
          if (locationValue !== null && locationValue !== undefined) {
            var locationInstance = locationValue;
            networkInterfaceInstance.location = locationInstance;
          }
          
          var tagsSequenceElement = responseDoc['tags'];
          if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
            for (var property in tagsSequenceElement) {
              var tagsKey = property;
              var tagsValue = tagsSequenceElement[property];
              networkInterfaceInstance.tags[tagsKey] = tagsValue;
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The List networkInterfaces opertion retrieves all the networkInterfaces in
   * a resource group.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  NetworkInterfaceOperations.prototype.list = function(resourceGroupName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Network';
    url2 = url2 + '/networkInterfaces';
    var queryParameters = [];
    queryParameters.push('api-version=2015-05-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = { networkInterfaces: [] };
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var valueArray = responseDoc['value'];
          if (valueArray !== null && valueArray !== undefined) {
            for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var valueValue = valueArray[loweredIndex1];
              var networkInterfaceJsonFormatInstance = { ipConfigurations: [], tags: {} };
              result.networkInterfaces.push(networkInterfaceJsonFormatInstance);
              
              var propertiesValue = valueValue['properties'];
              if (propertiesValue !== null && propertiesValue !== undefined) {
                var virtualMachineValue = propertiesValue['virtualMachine'];
                if (virtualMachineValue !== null && virtualMachineValue !== undefined) {
                  var virtualMachineInstance = {};
                  networkInterfaceJsonFormatInstance.virtualMachine = virtualMachineInstance;
                  
                  var idValue = virtualMachineValue['id'];
                  if (idValue !== null && idValue !== undefined) {
                    var idInstance = idValue;
                    virtualMachineInstance.id = idInstance;
                  }
                }
                
                var networkSecurityGroupValue = propertiesValue['networkSecurityGroup'];
                if (networkSecurityGroupValue !== null && networkSecurityGroupValue !== undefined) {
                  var networkSecurityGroupInstance = {};
                  networkInterfaceJsonFormatInstance.networkSecurityGroup = networkSecurityGroupInstance;
                  
                  var idValue2 = networkSecurityGroupValue['id'];
                  if (idValue2 !== null && idValue2 !== undefined) {
                    var idInstance2 = idValue2;
                    networkSecurityGroupInstance.id = idInstance2;
                  }
                }
                
                var ipConfigurationsArray = propertiesValue['ipConfigurations'];
                if (ipConfigurationsArray !== null && ipConfigurationsArray !== undefined) {
                  for (var loweredIndex2 = 0; loweredIndex2 < ipConfigurationsArray.length; loweredIndex2 = loweredIndex2 + 1) {
                    var ipConfigurationsValue = ipConfigurationsArray[loweredIndex2];
                    var networkInterfaceIpConfigurationJsonFormatInstance = { loadBalancerBackendAddressPools: [], loadBalancerInboundNatRules: [] };
                    networkInterfaceJsonFormatInstance.ipConfigurations.push(networkInterfaceIpConfigurationJsonFormatInstance);
                    
                    var propertiesValue2 = ipConfigurationsValue['properties'];
                    if (propertiesValue2 !== null && propertiesValue2 !== undefined) {
                      var privateIPAddressValue = propertiesValue2['privateIPAddress'];
                      if (privateIPAddressValue !== null && privateIPAddressValue !== undefined) {
                        var privateIPAddressInstance = privateIPAddressValue;
                        networkInterfaceIpConfigurationJsonFormatInstance.privateIpAddress = privateIPAddressInstance;
                      }
                      
                      var privateIPAllocationMethodValue = propertiesValue2['privateIPAllocationMethod'];
                      if (privateIPAllocationMethodValue !== null && privateIPAllocationMethodValue !== undefined) {
                        var privateIPAllocationMethodInstance = privateIPAllocationMethodValue;
                        networkInterfaceIpConfigurationJsonFormatInstance.privateIpAllocationMethod = privateIPAllocationMethodInstance;
                      }
                      
                      var subnetValue = propertiesValue2['subnet'];
                      if (subnetValue !== null && subnetValue !== undefined) {
                        var subnetInstance = {};
                        networkInterfaceIpConfigurationJsonFormatInstance.subnet = subnetInstance;
                        
                        var idValue3 = subnetValue['id'];
                        if (idValue3 !== null && idValue3 !== undefined) {
                          var idInstance3 = idValue3;
                          subnetInstance.id = idInstance3;
                        }
                      }
                      
                      var publicIPAddressValue = propertiesValue2['publicIPAddress'];
                      if (publicIPAddressValue !== null && publicIPAddressValue !== undefined) {
                        var publicIPAddressInstance = {};
                        networkInterfaceIpConfigurationJsonFormatInstance.publicIpAddress = publicIPAddressInstance;
                        
                        var idValue4 = publicIPAddressValue['id'];
                        if (idValue4 !== null && idValue4 !== undefined) {
                          var idInstance4 = idValue4;
                          publicIPAddressInstance.id = idInstance4;
                        }
                      }
                      
                      var loadBalancerBackendAddressPoolsArray = propertiesValue2['loadBalancerBackendAddressPools'];
                      if (loadBalancerBackendAddressPoolsArray !== null && loadBalancerBackendAddressPoolsArray !== undefined) {
                        for (var loweredIndex3 = 0; loweredIndex3 < loadBalancerBackendAddressPoolsArray.length; loweredIndex3 = loweredIndex3 + 1) {
                          var loadBalancerBackendAddressPoolsValue = loadBalancerBackendAddressPoolsArray[loweredIndex3];
                          var resourceIdInstance = {};
                          networkInterfaceIpConfigurationJsonFormatInstance.loadBalancerBackendAddressPools.push(resourceIdInstance);
                          
                          var idValue5 = loadBalancerBackendAddressPoolsValue['id'];
                          if (idValue5 !== null && idValue5 !== undefined) {
                            var idInstance5 = idValue5;
                            resourceIdInstance.id = idInstance5;
                          }
                        }
                      }
                      
                      var loadBalancerInboundNatRulesArray = propertiesValue2['loadBalancerInboundNatRules'];
                      if (loadBalancerInboundNatRulesArray !== null && loadBalancerInboundNatRulesArray !== undefined) {
                        for (var loweredIndex4 = 0; loweredIndex4 < loadBalancerInboundNatRulesArray.length; loweredIndex4 = loweredIndex4 + 1) {
                          var loadBalancerInboundNatRulesValue = loadBalancerInboundNatRulesArray[loweredIndex4];
                          var resourceIdInstance2 = {};
                          networkInterfaceIpConfigurationJsonFormatInstance.loadBalancerInboundNatRules.push(resourceIdInstance2);
                          
                          var idValue6 = loadBalancerInboundNatRulesValue['id'];
                          if (idValue6 !== null && idValue6 !== undefined) {
                            var idInstance6 = idValue6;
                            resourceIdInstance2.id = idInstance6;
                          }
                        }
                      }
                      
                      var provisioningStateValue = propertiesValue2['provisioningState'];
                      if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
                        var provisioningStateInstance = provisioningStateValue;
                        networkInterfaceIpConfigurationJsonFormatInstance.provisioningState = provisioningStateInstance;
                      }
                    }
                    
                    var nameValue = ipConfigurationsValue['name'];
                    if (nameValue !== null && nameValue !== undefined) {
                      var nameInstance = nameValue;
                      networkInterfaceIpConfigurationJsonFormatInstance.name = nameInstance;
                    }
                    
                    var etagValue = ipConfigurationsValue['etag'];
                    if (etagValue !== null && etagValue !== undefined) {
                      var etagInstance = etagValue;
                      networkInterfaceIpConfigurationJsonFormatInstance.etag = etagInstance;
                    }
                    
                    var idValue7 = ipConfigurationsValue['id'];
                    if (idValue7 !== null && idValue7 !== undefined) {
                      var idInstance7 = idValue7;
                      networkInterfaceIpConfigurationJsonFormatInstance.id = idInstance7;
                    }
                  }
                }
                
                var dnsSettingsValue = propertiesValue['dnsSettings'];
                if (dnsSettingsValue !== null && dnsSettingsValue !== undefined) {
                  var dnsSettingsInstance = { appliedDnsServers: [], dnsServers: [] };
                  networkInterfaceJsonFormatInstance.dnsSettings = dnsSettingsInstance;
                  
                  var dnsServersArray = dnsSettingsValue['dnsServers'];
                  if (dnsServersArray !== null && dnsServersArray !== undefined) {
                    for (var loweredIndex5 = 0; loweredIndex5 < dnsServersArray.length; loweredIndex5 = loweredIndex5 + 1) {
                      var dnsServersValue = dnsServersArray[loweredIndex5];
                      dnsSettingsInstance.dnsServers.push(dnsServersValue);
                    }
                  }
                  
                  var appliedDnsServersArray = dnsSettingsValue['appliedDnsServers'];
                  if (appliedDnsServersArray !== null && appliedDnsServersArray !== undefined) {
                    for (var loweredIndex6 = 0; loweredIndex6 < appliedDnsServersArray.length; loweredIndex6 = loweredIndex6 + 1) {
                      var appliedDnsServersValue = appliedDnsServersArray[loweredIndex6];
                      dnsSettingsInstance.appliedDnsServers.push(appliedDnsServersValue);
                    }
                  }
                  
                  var internalDnsNameLabelValue = dnsSettingsValue['internalDnsNameLabel'];
                  if (internalDnsNameLabelValue !== null && internalDnsNameLabelValue !== undefined) {
                    var internalDnsNameLabelInstance = internalDnsNameLabelValue;
                    dnsSettingsInstance.internalDnsNameLabel = internalDnsNameLabelInstance;
                  }
                  
                  var internalFqdnValue = dnsSettingsValue['internalFqdn'];
                  if (internalFqdnValue !== null && internalFqdnValue !== undefined) {
                    var internalFqdnInstance = internalFqdnValue;
                    dnsSettingsInstance.internalFqdn = internalFqdnInstance;
                  }
                }
                
                var macAddressValue = propertiesValue['macAddress'];
                if (macAddressValue !== null && macAddressValue !== undefined) {
                  var macAddressInstance = macAddressValue;
                  networkInterfaceJsonFormatInstance.macAddress = macAddressInstance;
                }
                
                var primaryValue = propertiesValue['primary'];
                if (primaryValue !== null && primaryValue !== undefined) {
                  var primaryInstance = primaryValue;
                  networkInterfaceJsonFormatInstance.primary = primaryInstance;
                }
                
                var enableIPForwardingValue = propertiesValue['enableIPForwarding'];
                if (enableIPForwardingValue !== null && enableIPForwardingValue !== undefined) {
                  var enableIPForwardingInstance = enableIPForwardingValue;
                  networkInterfaceJsonFormatInstance.enableIPForwarding = enableIPForwardingInstance;
                }
                
                var resourceGuidValue = propertiesValue['resourceGuid'];
                if (resourceGuidValue !== null && resourceGuidValue !== undefined) {
                  var resourceGuidInstance = resourceGuidValue;
                  networkInterfaceJsonFormatInstance.resourceGuid = resourceGuidInstance;
                }
                
                var provisioningStateValue2 = propertiesValue['provisioningState'];
                if (provisioningStateValue2 !== null && provisioningStateValue2 !== undefined) {
                  var provisioningStateInstance2 = provisioningStateValue2;
                  networkInterfaceJsonFormatInstance.provisioningState = provisioningStateInstance2;
                }
              }
              
              var etagValue2 = valueValue['etag'];
              if (etagValue2 !== null && etagValue2 !== undefined) {
                var etagInstance2 = etagValue2;
                networkInterfaceJsonFormatInstance.etag = etagInstance2;
              }
              
              var idValue8 = valueValue['id'];
              if (idValue8 !== null && idValue8 !== undefined) {
                var idInstance8 = idValue8;
                networkInterfaceJsonFormatInstance.id = idInstance8;
              }
              
              var nameValue2 = valueValue['name'];
              if (nameValue2 !== null && nameValue2 !== undefined) {
                var nameInstance2 = nameValue2;
                networkInterfaceJsonFormatInstance.name = nameInstance2;
              }
              
              var typeValue = valueValue['type'];
              if (typeValue !== null && typeValue !== undefined) {
                var typeInstance = typeValue;
                networkInterfaceJsonFormatInstance.type = typeInstance;
              }
              
              var locationValue = valueValue['location'];
              if (locationValue !== null && locationValue !== undefined) {
                var locationInstance = locationValue;
                networkInterfaceJsonFormatInstance.location = locationInstance;
              }
              
              var tagsSequenceElement = valueValue['tags'];
              if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
                for (var property in tagsSequenceElement) {
                  var tagsKey = property;
                  var tagsValue = tagsSequenceElement[property];
                  networkInterfaceJsonFormatInstance.tags[tagsKey] = tagsValue;
                }
              }
            }
          }
          
          var nextLinkValue = responseDoc['nextLink'];
          if (nextLinkValue !== null && nextLinkValue !== undefined) {
            var nextLinkInstance = nextLinkValue;
            result.nextLink = nextLinkInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The List networkInterfaces opertion retrieves all the networkInterfaces in
   * a subscription.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  NetworkInterfaceOperations.prototype.listAll = function(callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Network';
    url2 = url2 + '/networkInterfaces';
    var queryParameters = [];
    queryParameters.push('api-version=2015-05-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = { networkInterfaces: [] };
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var valueArray = responseDoc['value'];
          if (valueArray !== null && valueArray !== undefined) {
            for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var valueValue = valueArray[loweredIndex1];
              var networkInterfaceJsonFormatInstance = { ipConfigurations: [], tags: {} };
              result.networkInterfaces.push(networkInterfaceJsonFormatInstance);
              
              var propertiesValue = valueValue['properties'];
              if (propertiesValue !== null && propertiesValue !== undefined) {
                var virtualMachineValue = propertiesValue['virtualMachine'];
                if (virtualMachineValue !== null && virtualMachineValue !== undefined) {
                  var virtualMachineInstance = {};
                  networkInterfaceJsonFormatInstance.virtualMachine = virtualMachineInstance;
                  
                  var idValue = virtualMachineValue['id'];
                  if (idValue !== null && idValue !== undefined) {
                    var idInstance = idValue;
                    virtualMachineInstance.id = idInstance;
                  }
                }
                
                var networkSecurityGroupValue = propertiesValue['networkSecurityGroup'];
                if (networkSecurityGroupValue !== null && networkSecurityGroupValue !== undefined) {
                  var networkSecurityGroupInstance = {};
                  networkInterfaceJsonFormatInstance.networkSecurityGroup = networkSecurityGroupInstance;
                  
                  var idValue2 = networkSecurityGroupValue['id'];
                  if (idValue2 !== null && idValue2 !== undefined) {
                    var idInstance2 = idValue2;
                    networkSecurityGroupInstance.id = idInstance2;
                  }
                }
                
                var ipConfigurationsArray = propertiesValue['ipConfigurations'];
                if (ipConfigurationsArray !== null && ipConfigurationsArray !== undefined) {
                  for (var loweredIndex2 = 0; loweredIndex2 < ipConfigurationsArray.length; loweredIndex2 = loweredIndex2 + 1) {
                    var ipConfigurationsValue = ipConfigurationsArray[loweredIndex2];
                    var networkInterfaceIpConfigurationJsonFormatInstance = { loadBalancerBackendAddressPools: [], loadBalancerInboundNatRules: [] };
                    networkInterfaceJsonFormatInstance.ipConfigurations.push(networkInterfaceIpConfigurationJsonFormatInstance);
                    
                    var propertiesValue2 = ipConfigurationsValue['properties'];
                    if (propertiesValue2 !== null && propertiesValue2 !== undefined) {
                      var privateIPAddressValue = propertiesValue2['privateIPAddress'];
                      if (privateIPAddressValue !== null && privateIPAddressValue !== undefined) {
                        var privateIPAddressInstance = privateIPAddressValue;
                        networkInterfaceIpConfigurationJsonFormatInstance.privateIpAddress = privateIPAddressInstance;
                      }
                      
                      var privateIPAllocationMethodValue = propertiesValue2['privateIPAllocationMethod'];
                      if (privateIPAllocationMethodValue !== null && privateIPAllocationMethodValue !== undefined) {
                        var privateIPAllocationMethodInstance = privateIPAllocationMethodValue;
                        networkInterfaceIpConfigurationJsonFormatInstance.privateIpAllocationMethod = privateIPAllocationMethodInstance;
                      }
                      
                      var subnetValue = propertiesValue2['subnet'];
                      if (subnetValue !== null && subnetValue !== undefined) {
                        var subnetInstance = {};
                        networkInterfaceIpConfigurationJsonFormatInstance.subnet = subnetInstance;
                        
                        var idValue3 = subnetValue['id'];
                        if (idValue3 !== null && idValue3 !== undefined) {
                          var idInstance3 = idValue3;
                          subnetInstance.id = idInstance3;
                        }
                      }
                      
                      var publicIPAddressValue = propertiesValue2['publicIPAddress'];
                      if (publicIPAddressValue !== null && publicIPAddressValue !== undefined) {
                        var publicIPAddressInstance = {};
                        networkInterfaceIpConfigurationJsonFormatInstance.publicIpAddress = publicIPAddressInstance;
                        
                        var idValue4 = publicIPAddressValue['id'];
                        if (idValue4 !== null && idValue4 !== undefined) {
                          var idInstance4 = idValue4;
                          publicIPAddressInstance.id = idInstance4;
                        }
                      }
                      
                      var loadBalancerBackendAddressPoolsArray = propertiesValue2['loadBalancerBackendAddressPools'];
                      if (loadBalancerBackendAddressPoolsArray !== null && loadBalancerBackendAddressPoolsArray !== undefined) {
                        for (var loweredIndex3 = 0; loweredIndex3 < loadBalancerBackendAddressPoolsArray.length; loweredIndex3 = loweredIndex3 + 1) {
                          var loadBalancerBackendAddressPoolsValue = loadBalancerBackendAddressPoolsArray[loweredIndex3];
                          var resourceIdInstance = {};
                          networkInterfaceIpConfigurationJsonFormatInstance.loadBalancerBackendAddressPools.push(resourceIdInstance);
                          
                          var idValue5 = loadBalancerBackendAddressPoolsValue['id'];
                          if (idValue5 !== null && idValue5 !== undefined) {
                            var idInstance5 = idValue5;
                            resourceIdInstance.id = idInstance5;
                          }
                        }
                      }
                      
                      var loadBalancerInboundNatRulesArray = propertiesValue2['loadBalancerInboundNatRules'];
                      if (loadBalancerInboundNatRulesArray !== null && loadBalancerInboundNatRulesArray !== undefined) {
                        for (var loweredIndex4 = 0; loweredIndex4 < loadBalancerInboundNatRulesArray.length; loweredIndex4 = loweredIndex4 + 1) {
                          var loadBalancerInboundNatRulesValue = loadBalancerInboundNatRulesArray[loweredIndex4];
                          var resourceIdInstance2 = {};
                          networkInterfaceIpConfigurationJsonFormatInstance.loadBalancerInboundNatRules.push(resourceIdInstance2);
                          
                          var idValue6 = loadBalancerInboundNatRulesValue['id'];
                          if (idValue6 !== null && idValue6 !== undefined) {
                            var idInstance6 = idValue6;
                            resourceIdInstance2.id = idInstance6;
                          }
                        }
                      }
                      
                      var provisioningStateValue = propertiesValue2['provisioningState'];
                      if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
                        var provisioningStateInstance = provisioningStateValue;
                        networkInterfaceIpConfigurationJsonFormatInstance.provisioningState = provisioningStateInstance;
                      }
                    }
                    
                    var nameValue = ipConfigurationsValue['name'];
                    if (nameValue !== null && nameValue !== undefined) {
                      var nameInstance = nameValue;
                      networkInterfaceIpConfigurationJsonFormatInstance.name = nameInstance;
                    }
                    
                    var etagValue = ipConfigurationsValue['etag'];
                    if (etagValue !== null && etagValue !== undefined) {
                      var etagInstance = etagValue;
                      networkInterfaceIpConfigurationJsonFormatInstance.etag = etagInstance;
                    }
                    
                    var idValue7 = ipConfigurationsValue['id'];
                    if (idValue7 !== null && idValue7 !== undefined) {
                      var idInstance7 = idValue7;
                      networkInterfaceIpConfigurationJsonFormatInstance.id = idInstance7;
                    }
                  }
                }
                
                var dnsSettingsValue = propertiesValue['dnsSettings'];
                if (dnsSettingsValue !== null && dnsSettingsValue !== undefined) {
                  var dnsSettingsInstance = { appliedDnsServers: [], dnsServers: [] };
                  networkInterfaceJsonFormatInstance.dnsSettings = dnsSettingsInstance;
                  
                  var dnsServersArray = dnsSettingsValue['dnsServers'];
                  if (dnsServersArray !== null && dnsServersArray !== undefined) {
                    for (var loweredIndex5 = 0; loweredIndex5 < dnsServersArray.length; loweredIndex5 = loweredIndex5 + 1) {
                      var dnsServersValue = dnsServersArray[loweredIndex5];
                      dnsSettingsInstance.dnsServers.push(dnsServersValue);
                    }
                  }
                  
                  var appliedDnsServersArray = dnsSettingsValue['appliedDnsServers'];
                  if (appliedDnsServersArray !== null && appliedDnsServersArray !== undefined) {
                    for (var loweredIndex6 = 0; loweredIndex6 < appliedDnsServersArray.length; loweredIndex6 = loweredIndex6 + 1) {
                      var appliedDnsServersValue = appliedDnsServersArray[loweredIndex6];
                      dnsSettingsInstance.appliedDnsServers.push(appliedDnsServersValue);
                    }
                  }
                  
                  var internalDnsNameLabelValue = dnsSettingsValue['internalDnsNameLabel'];
                  if (internalDnsNameLabelValue !== null && internalDnsNameLabelValue !== undefined) {
                    var internalDnsNameLabelInstance = internalDnsNameLabelValue;
                    dnsSettingsInstance.internalDnsNameLabel = internalDnsNameLabelInstance;
                  }
                  
                  var internalFqdnValue = dnsSettingsValue['internalFqdn'];
                  if (internalFqdnValue !== null && internalFqdnValue !== undefined) {
                    var internalFqdnInstance = internalFqdnValue;
                    dnsSettingsInstance.internalFqdn = internalFqdnInstance;
                  }
                }
                
                var macAddressValue = propertiesValue['macAddress'];
                if (macAddressValue !== null && macAddressValue !== undefined) {
                  var macAddressInstance = macAddressValue;
                  networkInterfaceJsonFormatInstance.macAddress = macAddressInstance;
                }
                
                var primaryValue = propertiesValue['primary'];
                if (primaryValue !== null && primaryValue !== undefined) {
                  var primaryInstance = primaryValue;
                  networkInterfaceJsonFormatInstance.primary = primaryInstance;
                }
                
                var enableIPForwardingValue = propertiesValue['enableIPForwarding'];
                if (enableIPForwardingValue !== null && enableIPForwardingValue !== undefined) {
                  var enableIPForwardingInstance = enableIPForwardingValue;
                  networkInterfaceJsonFormatInstance.enableIPForwarding = enableIPForwardingInstance;
                }
                
                var resourceGuidValue = propertiesValue['resourceGuid'];
                if (resourceGuidValue !== null && resourceGuidValue !== undefined) {
                  var resourceGuidInstance = resourceGuidValue;
                  networkInterfaceJsonFormatInstance.resourceGuid = resourceGuidInstance;
                }
                
                var provisioningStateValue2 = propertiesValue['provisioningState'];
                if (provisioningStateValue2 !== null && provisioningStateValue2 !== undefined) {
                  var provisioningStateInstance2 = provisioningStateValue2;
                  networkInterfaceJsonFormatInstance.provisioningState = provisioningStateInstance2;
                }
              }
              
              var etagValue2 = valueValue['etag'];
              if (etagValue2 !== null && etagValue2 !== undefined) {
                var etagInstance2 = etagValue2;
                networkInterfaceJsonFormatInstance.etag = etagInstance2;
              }
              
              var idValue8 = valueValue['id'];
              if (idValue8 !== null && idValue8 !== undefined) {
                var idInstance8 = idValue8;
                networkInterfaceJsonFormatInstance.id = idInstance8;
              }
              
              var nameValue2 = valueValue['name'];
              if (nameValue2 !== null && nameValue2 !== undefined) {
                var nameInstance2 = nameValue2;
                networkInterfaceJsonFormatInstance.name = nameInstance2;
              }
              
              var typeValue = valueValue['type'];
              if (typeValue !== null && typeValue !== undefined) {
                var typeInstance = typeValue;
                networkInterfaceJsonFormatInstance.type = typeInstance;
              }
              
              var locationValue = valueValue['location'];
              if (locationValue !== null && locationValue !== undefined) {
                var locationInstance = locationValue;
                networkInterfaceJsonFormatInstance.location = locationInstance;
              }
              
              var tagsSequenceElement = valueValue['tags'];
              if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
                for (var property in tagsSequenceElement) {
                  var tagsKey = property;
                  var tagsValue = tagsSequenceElement[property];
                  networkInterfaceJsonFormatInstance.tags[tagsKey] = tagsValue;
                }
              }
            }
          }
          
          var nextLinkValue = responseDoc['nextLink'];
          if (nextLinkValue !== null && nextLinkValue !== undefined) {
            var nextLinkInstance = nextLinkValue;
            result.nextLink = nextLinkInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The list network interface operation retrieves information about all
   * network interfaces in a virtual machine scale set.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} virtualMachineScaleSetName The name of the virtual machine
   * scale set.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  NetworkInterfaceOperations.prototype.listVirtualMachineScaleSetNetworkInterfaces = function(resourceGroupName, virtualMachineScaleSetName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (virtualMachineScaleSetName === null || virtualMachineScaleSetName === undefined) {
      return callback(new Error('virtualMachineScaleSetName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/microsoft.compute/virtualMachineScaleSets/';
    url2 = url2 + encodeURIComponent(virtualMachineScaleSetName);
    url2 = url2 + '/networkInterfaces';
    var queryParameters = [];
    queryParameters.push('api-version=2015-05-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = { networkInterfaces: [] };
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var valueArray = responseDoc['value'];
          if (valueArray !== null && valueArray !== undefined) {
            for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var valueValue = valueArray[loweredIndex1];
              var networkInterfaceJsonFormatInstance = { ipConfigurations: [], tags: {} };
              result.networkInterfaces.push(networkInterfaceJsonFormatInstance);
              
              var propertiesValue = valueValue['properties'];
              if (propertiesValue !== null && propertiesValue !== undefined) {
                var virtualMachineValue = propertiesValue['virtualMachine'];
                if (virtualMachineValue !== null && virtualMachineValue !== undefined) {
                  var virtualMachineInstance = {};
                  networkInterfaceJsonFormatInstance.virtualMachine = virtualMachineInstance;
                  
                  var idValue = virtualMachineValue['id'];
                  if (idValue !== null && idValue !== undefined) {
                    var idInstance = idValue;
                    virtualMachineInstance.id = idInstance;
                  }
                }
                
                var networkSecurityGroupValue = propertiesValue['networkSecurityGroup'];
                if (networkSecurityGroupValue !== null && networkSecurityGroupValue !== undefined) {
                  var networkSecurityGroupInstance = {};
                  networkInterfaceJsonFormatInstance.networkSecurityGroup = networkSecurityGroupInstance;
                  
                  var idValue2 = networkSecurityGroupValue['id'];
                  if (idValue2 !== null && idValue2 !== undefined) {
                    var idInstance2 = idValue2;
                    networkSecurityGroupInstance.id = idInstance2;
                  }
                }
                
                var ipConfigurationsArray = propertiesValue['ipConfigurations'];
                if (ipConfigurationsArray !== null && ipConfigurationsArray !== undefined) {
                  for (var loweredIndex2 = 0; loweredIndex2 < ipConfigurationsArray.length; loweredIndex2 = loweredIndex2 + 1) {
                    var ipConfigurationsValue = ipConfigurationsArray[loweredIndex2];
                    var networkInterfaceIpConfigurationJsonFormatInstance = { loadBalancerBackendAddressPools: [], loadBalancerInboundNatRules: [] };
                    networkInterfaceJsonFormatInstance.ipConfigurations.push(networkInterfaceIpConfigurationJsonFormatInstance);
                    
                    var propertiesValue2 = ipConfigurationsValue['properties'];
                    if (propertiesValue2 !== null && propertiesValue2 !== undefined) {
                      var privateIPAddressValue = propertiesValue2['privateIPAddress'];
                      if (privateIPAddressValue !== null && privateIPAddressValue !== undefined) {
                        var privateIPAddressInstance = privateIPAddressValue;
                        networkInterfaceIpConfigurationJsonFormatInstance.privateIpAddress = privateIPAddressInstance;
                      }
                      
                      var privateIPAllocationMethodValue = propertiesValue2['privateIPAllocationMethod'];
                      if (privateIPAllocationMethodValue !== null && privateIPAllocationMethodValue !== undefined) {
                        var privateIPAllocationMethodInstance = privateIPAllocationMethodValue;
                        networkInterfaceIpConfigurationJsonFormatInstance.privateIpAllocationMethod = privateIPAllocationMethodInstance;
                      }
                      
                      var subnetValue = propertiesValue2['subnet'];
                      if (subnetValue !== null && subnetValue !== undefined) {
                        var subnetInstance = {};
                        networkInterfaceIpConfigurationJsonFormatInstance.subnet = subnetInstance;
                        
                        var idValue3 = subnetValue['id'];
                        if (idValue3 !== null && idValue3 !== undefined) {
                          var idInstance3 = idValue3;
                          subnetInstance.id = idInstance3;
                        }
                      }
                      
                      var publicIPAddressValue = propertiesValue2['publicIPAddress'];
                      if (publicIPAddressValue !== null && publicIPAddressValue !== undefined) {
                        var publicIPAddressInstance = {};
                        networkInterfaceIpConfigurationJsonFormatInstance.publicIpAddress = publicIPAddressInstance;
                        
                        var idValue4 = publicIPAddressValue['id'];
                        if (idValue4 !== null && idValue4 !== undefined) {
                          var idInstance4 = idValue4;
                          publicIPAddressInstance.id = idInstance4;
                        }
                      }
                      
                      var loadBalancerBackendAddressPoolsArray = propertiesValue2['loadBalancerBackendAddressPools'];
                      if (loadBalancerBackendAddressPoolsArray !== null && loadBalancerBackendAddressPoolsArray !== undefined) {
                        for (var loweredIndex3 = 0; loweredIndex3 < loadBalancerBackendAddressPoolsArray.length; loweredIndex3 = loweredIndex3 + 1) {
                          var loadBalancerBackendAddressPoolsValue = loadBalancerBackendAddressPoolsArray[loweredIndex3];
                          var resourceIdInstance = {};
                          networkInterfaceIpConfigurationJsonFormatInstance.loadBalancerBackendAddressPools.push(resourceIdInstance);
                          
                          var idValue5 = loadBalancerBackendAddressPoolsValue['id'];
                          if (idValue5 !== null && idValue5 !== undefined) {
                            var idInstance5 = idValue5;
                            resourceIdInstance.id = idInstance5;
                          }
                        }
                      }
                      
                      var loadBalancerInboundNatRulesArray = propertiesValue2['loadBalancerInboundNatRules'];
                      if (loadBalancerInboundNatRulesArray !== null && loadBalancerInboundNatRulesArray !== undefined) {
                        for (var loweredIndex4 = 0; loweredIndex4 < loadBalancerInboundNatRulesArray.length; loweredIndex4 = loweredIndex4 + 1) {
                          var loadBalancerInboundNatRulesValue = loadBalancerInboundNatRulesArray[loweredIndex4];
                          var resourceIdInstance2 = {};
                          networkInterfaceIpConfigurationJsonFormatInstance.loadBalancerInboundNatRules.push(resourceIdInstance2);
                          
                          var idValue6 = loadBalancerInboundNatRulesValue['id'];
                          if (idValue6 !== null && idValue6 !== undefined) {
                            var idInstance6 = idValue6;
                            resourceIdInstance2.id = idInstance6;
                          }
                        }
                      }
                      
                      var provisioningStateValue = propertiesValue2['provisioningState'];
                      if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
                        var provisioningStateInstance = provisioningStateValue;
                        networkInterfaceIpConfigurationJsonFormatInstance.provisioningState = provisioningStateInstance;
                      }
                    }
                    
                    var nameValue = ipConfigurationsValue['name'];
                    if (nameValue !== null && nameValue !== undefined) {
                      var nameInstance = nameValue;
                      networkInterfaceIpConfigurationJsonFormatInstance.name = nameInstance;
                    }
                    
                    var etagValue = ipConfigurationsValue['etag'];
                    if (etagValue !== null && etagValue !== undefined) {
                      var etagInstance = etagValue;
                      networkInterfaceIpConfigurationJsonFormatInstance.etag = etagInstance;
                    }
                    
                    var idValue7 = ipConfigurationsValue['id'];
                    if (idValue7 !== null && idValue7 !== undefined) {
                      var idInstance7 = idValue7;
                      networkInterfaceIpConfigurationJsonFormatInstance.id = idInstance7;
                    }
                  }
                }
                
                var dnsSettingsValue = propertiesValue['dnsSettings'];
                if (dnsSettingsValue !== null && dnsSettingsValue !== undefined) {
                  var dnsSettingsInstance = { appliedDnsServers: [], dnsServers: [] };
                  networkInterfaceJsonFormatInstance.dnsSettings = dnsSettingsInstance;
                  
                  var dnsServersArray = dnsSettingsValue['dnsServers'];
                  if (dnsServersArray !== null && dnsServersArray !== undefined) {
                    for (var loweredIndex5 = 0; loweredIndex5 < dnsServersArray.length; loweredIndex5 = loweredIndex5 + 1) {
                      var dnsServersValue = dnsServersArray[loweredIndex5];
                      dnsSettingsInstance.dnsServers.push(dnsServersValue);
                    }
                  }
                  
                  var appliedDnsServersArray = dnsSettingsValue['appliedDnsServers'];
                  if (appliedDnsServersArray !== null && appliedDnsServersArray !== undefined) {
                    for (var loweredIndex6 = 0; loweredIndex6 < appliedDnsServersArray.length; loweredIndex6 = loweredIndex6 + 1) {
                      var appliedDnsServersValue = appliedDnsServersArray[loweredIndex6];
                      dnsSettingsInstance.appliedDnsServers.push(appliedDnsServersValue);
                    }
                  }
                  
                  var internalDnsNameLabelValue = dnsSettingsValue['internalDnsNameLabel'];
                  if (internalDnsNameLabelValue !== null && internalDnsNameLabelValue !== undefined) {
                    var internalDnsNameLabelInstance = internalDnsNameLabelValue;
                    dnsSettingsInstance.internalDnsNameLabel = internalDnsNameLabelInstance;
                  }
                  
                  var internalFqdnValue = dnsSettingsValue['internalFqdn'];
                  if (internalFqdnValue !== null && internalFqdnValue !== undefined) {
                    var internalFqdnInstance = internalFqdnValue;
                    dnsSettingsInstance.internalFqdn = internalFqdnInstance;
                  }
                }
                
                var macAddressValue = propertiesValue['macAddress'];
                if (macAddressValue !== null && macAddressValue !== undefined) {
                  var macAddressInstance = macAddressValue;
                  networkInterfaceJsonFormatInstance.macAddress = macAddressInstance;
                }
                
                var primaryValue = propertiesValue['primary'];
                if (primaryValue !== null && primaryValue !== undefined) {
                  var primaryInstance = primaryValue;
                  networkInterfaceJsonFormatInstance.primary = primaryInstance;
                }
                
                var enableIPForwardingValue = propertiesValue['enableIPForwarding'];
                if (enableIPForwardingValue !== null && enableIPForwardingValue !== undefined) {
                  var enableIPForwardingInstance = enableIPForwardingValue;
                  networkInterfaceJsonFormatInstance.enableIPForwarding = enableIPForwardingInstance;
                }
                
                var resourceGuidValue = propertiesValue['resourceGuid'];
                if (resourceGuidValue !== null && resourceGuidValue !== undefined) {
                  var resourceGuidInstance = resourceGuidValue;
                  networkInterfaceJsonFormatInstance.resourceGuid = resourceGuidInstance;
                }
                
                var provisioningStateValue2 = propertiesValue['provisioningState'];
                if (provisioningStateValue2 !== null && provisioningStateValue2 !== undefined) {
                  var provisioningStateInstance2 = provisioningStateValue2;
                  networkInterfaceJsonFormatInstance.provisioningState = provisioningStateInstance2;
                }
              }
              
              var etagValue2 = valueValue['etag'];
              if (etagValue2 !== null && etagValue2 !== undefined) {
                var etagInstance2 = etagValue2;
                networkInterfaceJsonFormatInstance.etag = etagInstance2;
              }
              
              var idValue8 = valueValue['id'];
              if (idValue8 !== null && idValue8 !== undefined) {
                var idInstance8 = idValue8;
                networkInterfaceJsonFormatInstance.id = idInstance8;
              }
              
              var nameValue2 = valueValue['name'];
              if (nameValue2 !== null && nameValue2 !== undefined) {
                var nameInstance2 = nameValue2;
                networkInterfaceJsonFormatInstance.name = nameInstance2;
              }
              
              var typeValue = valueValue['type'];
              if (typeValue !== null && typeValue !== undefined) {
                var typeInstance = typeValue;
                networkInterfaceJsonFormatInstance.type = typeInstance;
              }
              
              var locationValue = valueValue['location'];
              if (locationValue !== null && locationValue !== undefined) {
                var locationInstance = locationValue;
                networkInterfaceJsonFormatInstance.location = locationInstance;
              }
              
              var tagsSequenceElement = valueValue['tags'];
              if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
                for (var property in tagsSequenceElement) {
                  var tagsKey = property;
                  var tagsValue = tagsSequenceElement[property];
                  networkInterfaceJsonFormatInstance.tags[tagsKey] = tagsValue;
                }
              }
            }
          }
          
          var nextLinkValue = responseDoc['nextLink'];
          if (nextLinkValue !== null && nextLinkValue !== undefined) {
            var nextLinkInstance = nextLinkValue;
            result.nextLink = nextLinkInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The list network interface operation retrieves information about all
   * network interfaces in a virtual machine from a virtual machine scale set.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} virtualMachineScaleSetName The name of the virtual machine
   * scale set.
   * 
   * @param {string} virtualmachineIndex The virtual machine index.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  NetworkInterfaceOperations.prototype.listVirtualMachineScaleSetVMNetworkInterfaces = function(resourceGroupName, virtualMachineScaleSetName, virtualmachineIndex, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (virtualMachineScaleSetName === null || virtualMachineScaleSetName === undefined) {
      return callback(new Error('virtualMachineScaleSetName cannot be null.'));
    }
    if (virtualmachineIndex === null || virtualmachineIndex === undefined) {
      return callback(new Error('virtualmachineIndex cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/microsoft.compute/virtualMachineScaleSets/';
    url2 = url2 + encodeURIComponent(virtualMachineScaleSetName);
    url2 = url2 + '/virtualMachines/';
    url2 = url2 + encodeURIComponent(virtualmachineIndex);
    url2 = url2 + '/networkInterfaces';
    var queryParameters = [];
    queryParameters.push('api-version=2015-05-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = { networkInterfaces: [] };
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var valueArray = responseDoc['value'];
          if (valueArray !== null && valueArray !== undefined) {
            for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var valueValue = valueArray[loweredIndex1];
              var networkInterfaceJsonFormatInstance = { ipConfigurations: [], tags: {} };
              result.networkInterfaces.push(networkInterfaceJsonFormatInstance);
              
              var propertiesValue = valueValue['properties'];
              if (propertiesValue !== null && propertiesValue !== undefined) {
                var virtualMachineValue = propertiesValue['virtualMachine'];
                if (virtualMachineValue !== null && virtualMachineValue !== undefined) {
                  var virtualMachineInstance = {};
                  networkInterfaceJsonFormatInstance.virtualMachine = virtualMachineInstance;
                  
                  var idValue = virtualMachineValue['id'];
                  if (idValue !== null && idValue !== undefined) {
                    var idInstance = idValue;
                    virtualMachineInstance.id = idInstance;
                  }
                }
                
                var networkSecurityGroupValue = propertiesValue['networkSecurityGroup'];
                if (networkSecurityGroupValue !== null && networkSecurityGroupValue !== undefined) {
                  var networkSecurityGroupInstance = {};
                  networkInterfaceJsonFormatInstance.networkSecurityGroup = networkSecurityGroupInstance;
                  
                  var idValue2 = networkSecurityGroupValue['id'];
                  if (idValue2 !== null && idValue2 !== undefined) {
                    var idInstance2 = idValue2;
                    networkSecurityGroupInstance.id = idInstance2;
                  }
                }
                
                var ipConfigurationsArray = propertiesValue['ipConfigurations'];
                if (ipConfigurationsArray !== null && ipConfigurationsArray !== undefined) {
                  for (var loweredIndex2 = 0; loweredIndex2 < ipConfigurationsArray.length; loweredIndex2 = loweredIndex2 + 1) {
                    var ipConfigurationsValue = ipConfigurationsArray[loweredIndex2];
                    var networkInterfaceIpConfigurationJsonFormatInstance = { loadBalancerBackendAddressPools: [], loadBalancerInboundNatRules: [] };
                    networkInterfaceJsonFormatInstance.ipConfigurations.push(networkInterfaceIpConfigurationJsonFormatInstance);
                    
                    var propertiesValue2 = ipConfigurationsValue['properties'];
                    if (propertiesValue2 !== null && propertiesValue2 !== undefined) {
                      var privateIPAddressValue = propertiesValue2['privateIPAddress'];
                      if (privateIPAddressValue !== null && privateIPAddressValue !== undefined) {
                        var privateIPAddressInstance = privateIPAddressValue;
                        networkInterfaceIpConfigurationJsonFormatInstance.privateIpAddress = privateIPAddressInstance;
                      }
                      
                      var privateIPAllocationMethodValue = propertiesValue2['privateIPAllocationMethod'];
                      if (privateIPAllocationMethodValue !== null && privateIPAllocationMethodValue !== undefined) {
                        var privateIPAllocationMethodInstance = privateIPAllocationMethodValue;
                        networkInterfaceIpConfigurationJsonFormatInstance.privateIpAllocationMethod = privateIPAllocationMethodInstance;
                      }
                      
                      var subnetValue = propertiesValue2['subnet'];
                      if (subnetValue !== null && subnetValue !== undefined) {
                        var subnetInstance = {};
                        networkInterfaceIpConfigurationJsonFormatInstance.subnet = subnetInstance;
                        
                        var idValue3 = subnetValue['id'];
                        if (idValue3 !== null && idValue3 !== undefined) {
                          var idInstance3 = idValue3;
                          subnetInstance.id = idInstance3;
                        }
                      }
                      
                      var publicIPAddressValue = propertiesValue2['publicIPAddress'];
                      if (publicIPAddressValue !== null && publicIPAddressValue !== undefined) {
                        var publicIPAddressInstance = {};
                        networkInterfaceIpConfigurationJsonFormatInstance.publicIpAddress = publicIPAddressInstance;
                        
                        var idValue4 = publicIPAddressValue['id'];
                        if (idValue4 !== null && idValue4 !== undefined) {
                          var idInstance4 = idValue4;
                          publicIPAddressInstance.id = idInstance4;
                        }
                      }
                      
                      var loadBalancerBackendAddressPoolsArray = propertiesValue2['loadBalancerBackendAddressPools'];
                      if (loadBalancerBackendAddressPoolsArray !== null && loadBalancerBackendAddressPoolsArray !== undefined) {
                        for (var loweredIndex3 = 0; loweredIndex3 < loadBalancerBackendAddressPoolsArray.length; loweredIndex3 = loweredIndex3 + 1) {
                          var loadBalancerBackendAddressPoolsValue = loadBalancerBackendAddressPoolsArray[loweredIndex3];
                          var resourceIdInstance = {};
                          networkInterfaceIpConfigurationJsonFormatInstance.loadBalancerBackendAddressPools.push(resourceIdInstance);
                          
                          var idValue5 = loadBalancerBackendAddressPoolsValue['id'];
                          if (idValue5 !== null && idValue5 !== undefined) {
                            var idInstance5 = idValue5;
                            resourceIdInstance.id = idInstance5;
                          }
                        }
                      }
                      
                      var loadBalancerInboundNatRulesArray = propertiesValue2['loadBalancerInboundNatRules'];
                      if (loadBalancerInboundNatRulesArray !== null && loadBalancerInboundNatRulesArray !== undefined) {
                        for (var loweredIndex4 = 0; loweredIndex4 < loadBalancerInboundNatRulesArray.length; loweredIndex4 = loweredIndex4 + 1) {
                          var loadBalancerInboundNatRulesValue = loadBalancerInboundNatRulesArray[loweredIndex4];
                          var resourceIdInstance2 = {};
                          networkInterfaceIpConfigurationJsonFormatInstance.loadBalancerInboundNatRules.push(resourceIdInstance2);
                          
                          var idValue6 = loadBalancerInboundNatRulesValue['id'];
                          if (idValue6 !== null && idValue6 !== undefined) {
                            var idInstance6 = idValue6;
                            resourceIdInstance2.id = idInstance6;
                          }
                        }
                      }
                      
                      var provisioningStateValue = propertiesValue2['provisioningState'];
                      if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
                        var provisioningStateInstance = provisioningStateValue;
                        networkInterfaceIpConfigurationJsonFormatInstance.provisioningState = provisioningStateInstance;
                      }
                    }
                    
                    var nameValue = ipConfigurationsValue['name'];
                    if (nameValue !== null && nameValue !== undefined) {
                      var nameInstance = nameValue;
                      networkInterfaceIpConfigurationJsonFormatInstance.name = nameInstance;
                    }
                    
                    var etagValue = ipConfigurationsValue['etag'];
                    if (etagValue !== null && etagValue !== undefined) {
                      var etagInstance = etagValue;
                      networkInterfaceIpConfigurationJsonFormatInstance.etag = etagInstance;
                    }
                    
                    var idValue7 = ipConfigurationsValue['id'];
                    if (idValue7 !== null && idValue7 !== undefined) {
                      var idInstance7 = idValue7;
                      networkInterfaceIpConfigurationJsonFormatInstance.id = idInstance7;
                    }
                  }
                }
                
                var dnsSettingsValue = propertiesValue['dnsSettings'];
                if (dnsSettingsValue !== null && dnsSettingsValue !== undefined) {
                  var dnsSettingsInstance = { appliedDnsServers: [], dnsServers: [] };
                  networkInterfaceJsonFormatInstance.dnsSettings = dnsSettingsInstance;
                  
                  var dnsServersArray = dnsSettingsValue['dnsServers'];
                  if (dnsServersArray !== null && dnsServersArray !== undefined) {
                    for (var loweredIndex5 = 0; loweredIndex5 < dnsServersArray.length; loweredIndex5 = loweredIndex5 + 1) {
                      var dnsServersValue = dnsServersArray[loweredIndex5];
                      dnsSettingsInstance.dnsServers.push(dnsServersValue);
                    }
                  }
                  
                  var appliedDnsServersArray = dnsSettingsValue['appliedDnsServers'];
                  if (appliedDnsServersArray !== null && appliedDnsServersArray !== undefined) {
                    for (var loweredIndex6 = 0; loweredIndex6 < appliedDnsServersArray.length; loweredIndex6 = loweredIndex6 + 1) {
                      var appliedDnsServersValue = appliedDnsServersArray[loweredIndex6];
                      dnsSettingsInstance.appliedDnsServers.push(appliedDnsServersValue);
                    }
                  }
                  
                  var internalDnsNameLabelValue = dnsSettingsValue['internalDnsNameLabel'];
                  if (internalDnsNameLabelValue !== null && internalDnsNameLabelValue !== undefined) {
                    var internalDnsNameLabelInstance = internalDnsNameLabelValue;
                    dnsSettingsInstance.internalDnsNameLabel = internalDnsNameLabelInstance;
                  }
                  
                  var internalFqdnValue = dnsSettingsValue['internalFqdn'];
                  if (internalFqdnValue !== null && internalFqdnValue !== undefined) {
                    var internalFqdnInstance = internalFqdnValue;
                    dnsSettingsInstance.internalFqdn = internalFqdnInstance;
                  }
                }
                
                var macAddressValue = propertiesValue['macAddress'];
                if (macAddressValue !== null && macAddressValue !== undefined) {
                  var macAddressInstance = macAddressValue;
                  networkInterfaceJsonFormatInstance.macAddress = macAddressInstance;
                }
                
                var primaryValue = propertiesValue['primary'];
                if (primaryValue !== null && primaryValue !== undefined) {
                  var primaryInstance = primaryValue;
                  networkInterfaceJsonFormatInstance.primary = primaryInstance;
                }
                
                var enableIPForwardingValue = propertiesValue['enableIPForwarding'];
                if (enableIPForwardingValue !== null && enableIPForwardingValue !== undefined) {
                  var enableIPForwardingInstance = enableIPForwardingValue;
                  networkInterfaceJsonFormatInstance.enableIPForwarding = enableIPForwardingInstance;
                }
                
                var resourceGuidValue = propertiesValue['resourceGuid'];
                if (resourceGuidValue !== null && resourceGuidValue !== undefined) {
                  var resourceGuidInstance = resourceGuidValue;
                  networkInterfaceJsonFormatInstance.resourceGuid = resourceGuidInstance;
                }
                
                var provisioningStateValue2 = propertiesValue['provisioningState'];
                if (provisioningStateValue2 !== null && provisioningStateValue2 !== undefined) {
                  var provisioningStateInstance2 = provisioningStateValue2;
                  networkInterfaceJsonFormatInstance.provisioningState = provisioningStateInstance2;
                }
              }
              
              var etagValue2 = valueValue['etag'];
              if (etagValue2 !== null && etagValue2 !== undefined) {
                var etagInstance2 = etagValue2;
                networkInterfaceJsonFormatInstance.etag = etagInstance2;
              }
              
              var idValue8 = valueValue['id'];
              if (idValue8 !== null && idValue8 !== undefined) {
                var idInstance8 = idValue8;
                networkInterfaceJsonFormatInstance.id = idInstance8;
              }
              
              var nameValue2 = valueValue['name'];
              if (nameValue2 !== null && nameValue2 !== undefined) {
                var nameInstance2 = nameValue2;
                networkInterfaceJsonFormatInstance.name = nameInstance2;
              }
              
              var typeValue = valueValue['type'];
              if (typeValue !== null && typeValue !== undefined) {
                var typeInstance = typeValue;
                networkInterfaceJsonFormatInstance.type = typeInstance;
              }
              
              var locationValue = valueValue['location'];
              if (locationValue !== null && locationValue !== undefined) {
                var locationInstance = locationValue;
                networkInterfaceJsonFormatInstance.location = locationInstance;
              }
              
              var tagsSequenceElement = valueValue['tags'];
              if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
                for (var property in tagsSequenceElement) {
                  var tagsKey = property;
                  var tagsValue = tagsSequenceElement[property];
                  networkInterfaceJsonFormatInstance.tags[tagsKey] = tagsValue;
                }
              }
            }
          }
          
          var nextLinkValue = responseDoc['nextLink'];
          if (nextLinkValue !== null && nextLinkValue !== undefined) {
            var nextLinkInstance = nextLinkValue;
            result.nextLink = nextLinkInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  return NetworkInterfaceOperations;
})();

var NetworkSecurityGroupOperations = ( /** @lends NetworkSecurityGroupOperations */ function() {
  /**
   * @class
   * The Network Resource Provider API includes operations for managing the
   * NetworkSecurityGroups for your subscription.
   * __NOTE__: An instance of this class is automatically created for an
   * instance of the [NetworkResourceProviderClient] {@link
   * NetworkResourceProviderClient~NetworkResourceProviderClient}.
   * See [networkSecurityGroups] {@link
   * NetworkResourceProviderClient~NetworkResourceProviderClient#networkSecurityGroups}.
   * Initializes a new instance of the NetworkSecurityGroupOperations class.
   * @constructor
   * 
   * @param {NetworkResourceProviderClient} client Reference to the service
   * client.
   */
  function NetworkSecurityGroupOperations(client) {
    this.client = client;
  }
  
  /**
   * The Put NetworkSecurityGroup operation creates/updates a network security
   * groupin the specified resource group.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} networkSecurityGroupName The name of the network security
   * group.
   * 
   * @param {NetworkSecurityGroup} parameters Parameters supplied to the
   * create/update Network Security Group operation
   * 
   * @param {IEnumerable} [parameters.securityRules] Gets or sets Security
   * rules of network security group
   * 
   * @param {IEnumerable} [parameters.defaultSecurityRules] Gets or sets
   * Default security rules of network security group
   * 
   * @param {IEnumerable} [parameters.networkInterfaces] Gets collection of
   * references to Network Interfaces
   * 
   * @param {IEnumerable} [parameters.subnets] Gets collection of references to
   * subnets
   * 
   * @param {string} [parameters.provisioningState] Gets or sets Provisioning
   * state of the PublicIP resource Updating/Deleting/Failed
   * 
   * @param {string} [parameters.resourceGuid] Gets or sets resource guid
   * property of the network security group resource
   * 
   * @param {string} [parameters.etag] Gets a unique read-only string that
   * changes whenever the resource is updated
   * 
   * @param {string} [parameters.id] Gets or sets the ID of the resource.
   * 
   * @param {string} [parameters.name] Gets or sets the name of the resource.
   * 
   * @param {string} [parameters.type] Gets or sets the type of the resource.
   * 
   * @param {string} [parameters.location] Gets or sets the location of the
   * resource.
   * 
   * @param {object} [parameters.tags] Gets or sets the tags attached to the
   * resource.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  NetworkSecurityGroupOperations.prototype.beginCreateOrUpdating = function(resourceGroupName, networkSecurityGroupName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (networkSecurityGroupName === null || networkSecurityGroupName === undefined) {
      return callback(new Error('networkSecurityGroupName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.defaultSecurityRules !== null && parameters.defaultSecurityRules !== undefined) {
      for (var loweredIndex1 = 0; loweredIndex1 < parameters.defaultSecurityRules.length; loweredIndex1 = loweredIndex1 + 1) {
        var defaultSecurityRulesParameterItem = parameters.defaultSecurityRules[loweredIndex1];
        if (defaultSecurityRulesParameterItem.access === null || defaultSecurityRulesParameterItem.access === undefined) {
          return callback(new Error('parameters.defaultSecurityRules.access cannot be null.'));
        }
        if (defaultSecurityRulesParameterItem.destinationAddressPrefix === null || defaultSecurityRulesParameterItem.destinationAddressPrefix === undefined) {
          return callback(new Error('parameters.defaultSecurityRules.destinationAddressPrefix cannot be null.'));
        }
        if (defaultSecurityRulesParameterItem.direction === null || defaultSecurityRulesParameterItem.direction === undefined) {
          return callback(new Error('parameters.defaultSecurityRules.direction cannot be null.'));
        }
        if (defaultSecurityRulesParameterItem.protocol === null || defaultSecurityRulesParameterItem.protocol === undefined) {
          return callback(new Error('parameters.defaultSecurityRules.protocol cannot be null.'));
        }
        if (defaultSecurityRulesParameterItem.sourceAddressPrefix === null || defaultSecurityRulesParameterItem.sourceAddressPrefix === undefined) {
          return callback(new Error('parameters.defaultSecurityRules.sourceAddressPrefix cannot be null.'));
        }
      }
    }
    if (parameters.securityRules !== null && parameters.securityRules !== undefined) {
      for (var loweredIndex2 = 0; loweredIndex2 < parameters.securityRules.length; loweredIndex2 = loweredIndex2 + 1) {
        var securityRulesParameterItem = parameters.securityRules[loweredIndex2];
        if (securityRulesParameterItem.access === null || securityRulesParameterItem.access === undefined) {
          return callback(new Error('parameters.securityRules.access cannot be null.'));
        }
        if (securityRulesParameterItem.destinationAddressPrefix === null || securityRulesParameterItem.destinationAddressPrefix === undefined) {
          return callback(new Error('parameters.securityRules.destinationAddressPrefix cannot be null.'));
        }
        if (securityRulesParameterItem.direction === null || securityRulesParameterItem.direction === undefined) {
          return callback(new Error('parameters.securityRules.direction cannot be null.'));
        }
        if (securityRulesParameterItem.protocol === null || securityRulesParameterItem.protocol === undefined) {
          return callback(new Error('parameters.securityRules.protocol cannot be null.'));
        }
        if (securityRulesParameterItem.sourceAddressPrefix === null || securityRulesParameterItem.sourceAddressPrefix === undefined) {
          return callback(new Error('parameters.securityRules.sourceAddressPrefix cannot be null.'));
        }
      }
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Network';
    url2 = url2 + '/networkSecurityGroups/';
    url2 = url2 + encodeURIComponent(networkSecurityGroupName);
    var queryParameters = [];
    queryParameters.push('api-version=2015-05-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = null;
    
    var networkSecurityGroupJsonFormatValue = {};
    requestDoc = networkSecurityGroupJsonFormatValue;
    
    var propertiesValue = {};
    networkSecurityGroupJsonFormatValue['properties'] = propertiesValue;
    
    if (parameters.securityRules !== null && parameters.securityRules !== undefined) {
      var securityRulesArray = [];
      for (var loweredIndex3 = 0; loweredIndex3 < parameters.securityRules.length; loweredIndex3 = loweredIndex3 + 1) {
        var securityRulesItem = parameters.securityRules[loweredIndex3];
        var securityRuleJsonFormatValue = {};
        securityRulesArray.push(securityRuleJsonFormatValue);
        
        var propertiesValue2 = {};
        securityRuleJsonFormatValue['properties'] = propertiesValue2;
        
        if (securityRulesItem.description !== null && securityRulesItem.description !== undefined) {
          propertiesValue2['description'] = securityRulesItem.description;
        }
        
        propertiesValue2['protocol'] = securityRulesItem.protocol;
        
        if (securityRulesItem.sourcePortRange !== null && securityRulesItem.sourcePortRange !== undefined) {
          propertiesValue2['sourcePortRange'] = securityRulesItem.sourcePortRange;
        }
        
        if (securityRulesItem.destinationPortRange !== null && securityRulesItem.destinationPortRange !== undefined) {
          propertiesValue2['destinationPortRange'] = securityRulesItem.destinationPortRange;
        }
        
        propertiesValue2['sourceAddressPrefix'] = securityRulesItem.sourceAddressPrefix;
        
        propertiesValue2['destinationAddressPrefix'] = securityRulesItem.destinationAddressPrefix;
        
        propertiesValue2['access'] = securityRulesItem.access;
        
        if (securityRulesItem.priority !== null && securityRulesItem.priority !== undefined) {
          propertiesValue2['priority'] = securityRulesItem.priority;
        }
        
        propertiesValue2['direction'] = securityRulesItem.direction;
        
        if (securityRulesItem.provisioningState !== null && securityRulesItem.provisioningState !== undefined) {
          propertiesValue2['provisioningState'] = securityRulesItem.provisioningState;
        }
        
        if (securityRulesItem.name !== null && securityRulesItem.name !== undefined) {
          securityRuleJsonFormatValue['name'] = securityRulesItem.name;
        }
        
        if (securityRulesItem.etag !== null && securityRulesItem.etag !== undefined) {
          securityRuleJsonFormatValue['etag'] = securityRulesItem.etag;
        }
        
        if (securityRulesItem.id !== null && securityRulesItem.id !== undefined) {
          securityRuleJsonFormatValue['id'] = securityRulesItem.id;
        }
      }
      propertiesValue['securityRules'] = securityRulesArray;
    }
    
    if (parameters.defaultSecurityRules !== null && parameters.defaultSecurityRules !== undefined) {
      var defaultSecurityRulesArray = [];
      for (var loweredIndex4 = 0; loweredIndex4 < parameters.defaultSecurityRules.length; loweredIndex4 = loweredIndex4 + 1) {
        var defaultSecurityRulesItem = parameters.defaultSecurityRules[loweredIndex4];
        var securityRuleJsonFormatValue2 = {};
        defaultSecurityRulesArray.push(securityRuleJsonFormatValue2);
        
        var propertiesValue3 = {};
        securityRuleJsonFormatValue2['properties'] = propertiesValue3;
        
        if (defaultSecurityRulesItem.description !== null && defaultSecurityRulesItem.description !== undefined) {
          propertiesValue3['description'] = defaultSecurityRulesItem.description;
        }
        
        propertiesValue3['protocol'] = defaultSecurityRulesItem.protocol;
        
        if (defaultSecurityRulesItem.sourcePortRange !== null && defaultSecurityRulesItem.sourcePortRange !== undefined) {
          propertiesValue3['sourcePortRange'] = defaultSecurityRulesItem.sourcePortRange;
        }
        
        if (defaultSecurityRulesItem.destinationPortRange !== null && defaultSecurityRulesItem.destinationPortRange !== undefined) {
          propertiesValue3['destinationPortRange'] = defaultSecurityRulesItem.destinationPortRange;
        }
        
        propertiesValue3['sourceAddressPrefix'] = defaultSecurityRulesItem.sourceAddressPrefix;
        
        propertiesValue3['destinationAddressPrefix'] = defaultSecurityRulesItem.destinationAddressPrefix;
        
        propertiesValue3['access'] = defaultSecurityRulesItem.access;
        
        if (defaultSecurityRulesItem.priority !== null && defaultSecurityRulesItem.priority !== undefined) {
          propertiesValue3['priority'] = defaultSecurityRulesItem.priority;
        }
        
        propertiesValue3['direction'] = defaultSecurityRulesItem.direction;
        
        if (defaultSecurityRulesItem.provisioningState !== null && defaultSecurityRulesItem.provisioningState !== undefined) {
          propertiesValue3['provisioningState'] = defaultSecurityRulesItem.provisioningState;
        }
        
        if (defaultSecurityRulesItem.name !== null && defaultSecurityRulesItem.name !== undefined) {
          securityRuleJsonFormatValue2['name'] = defaultSecurityRulesItem.name;
        }
        
        if (defaultSecurityRulesItem.etag !== null && defaultSecurityRulesItem.etag !== undefined) {
          securityRuleJsonFormatValue2['etag'] = defaultSecurityRulesItem.etag;
        }
        
        if (defaultSecurityRulesItem.id !== null && defaultSecurityRulesItem.id !== undefined) {
          securityRuleJsonFormatValue2['id'] = defaultSecurityRulesItem.id;
        }
      }
      propertiesValue['defaultSecurityRules'] = defaultSecurityRulesArray;
    }
    
    if (parameters.networkInterfaces !== null && parameters.networkInterfaces !== undefined) {
      var networkInterfacesArray = [];
      for (var loweredIndex5 = 0; loweredIndex5 < parameters.networkInterfaces.length; loweredIndex5 = loweredIndex5 + 1) {
        var networkInterfacesItem = parameters.networkInterfaces[loweredIndex5];
        var resourceIdValue = {};
        networkInterfacesArray.push(resourceIdValue);
        
        if (networkInterfacesItem.id !== null && networkInterfacesItem.id !== undefined) {
          resourceIdValue['id'] = networkInterfacesItem.id;
        }
      }
      propertiesValue['networkInterfaces'] = networkInterfacesArray;
    }
    
    if (parameters.subnets !== null && parameters.subnets !== undefined) {
      var subnetsArray = [];
      for (var loweredIndex6 = 0; loweredIndex6 < parameters.subnets.length; loweredIndex6 = loweredIndex6 + 1) {
        var subnetsItem = parameters.subnets[loweredIndex6];
        var resourceIdValue2 = {};
        subnetsArray.push(resourceIdValue2);
        
        if (subnetsItem.id !== null && subnetsItem.id !== undefined) {
          resourceIdValue2['id'] = subnetsItem.id;
        }
      }
      propertiesValue['subnets'] = subnetsArray;
    }
    
    if (parameters.resourceGuid !== null && parameters.resourceGuid !== undefined) {
      propertiesValue['resourceGuid'] = parameters.resourceGuid;
    }
    
    if (parameters.provisioningState !== null && parameters.provisioningState !== undefined) {
      propertiesValue['provisioningState'] = parameters.provisioningState;
    }
    
    if (parameters.etag !== null && parameters.etag !== undefined) {
      networkSecurityGroupJsonFormatValue['etag'] = parameters.etag;
    }
    
    if (parameters.id !== null && parameters.id !== undefined) {
      networkSecurityGroupJsonFormatValue['id'] = parameters.id;
    }
    
    if (parameters.name !== null && parameters.name !== undefined) {
      networkSecurityGroupJsonFormatValue['name'] = parameters.name;
    }
    
    if (parameters.type !== null && parameters.type !== undefined) {
      networkSecurityGroupJsonFormatValue['type'] = parameters.type;
    }
    
    if (parameters.location !== null && parameters.location !== undefined) {
      networkSecurityGroupJsonFormatValue['location'] = parameters.location;
    }
    
    if (parameters.tags !== null && parameters.tags !== undefined) {
      var tagsDictionary = {};
      for (var tagsKey in parameters.tags) {
        var tagsValue = parameters.tags[tagsKey];
        tagsDictionary[tagsKey] = tagsValue;
      }
      networkSecurityGroupJsonFormatValue['tags'] = tagsDictionary;
    }
    
    requestContent = JSON.stringify(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200 && statusCode !== 201) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200 || statusCode === 201) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var networkSecurityGroupInstance = { defaultSecurityRules: [], networkInterfaces: [], securityRules: [], subnets: [], tags: {} };
          result.networkSecurityGroup = networkSecurityGroupInstance;
          
          var propertiesValue4 = responseDoc['properties'];
          if (propertiesValue4 !== null && propertiesValue4 !== undefined) {
            var securityRulesArray2 = propertiesValue4['securityRules'];
            if (securityRulesArray2 !== null && securityRulesArray2 !== undefined) {
              for (var loweredIndex7 = 0; loweredIndex7 < securityRulesArray2.length; loweredIndex7 = loweredIndex7 + 1) {
                var securityRulesValue = securityRulesArray2[loweredIndex7];
                var securityRuleJsonFormatInstance = {};
                networkSecurityGroupInstance.securityRules.push(securityRuleJsonFormatInstance);
                
                var propertiesValue5 = securityRulesValue['properties'];
                if (propertiesValue5 !== null && propertiesValue5 !== undefined) {
                  var descriptionValue = propertiesValue5['description'];
                  if (descriptionValue !== null && descriptionValue !== undefined) {
                    var descriptionInstance = descriptionValue;
                    securityRuleJsonFormatInstance.description = descriptionInstance;
                  }
                  
                  var protocolValue = propertiesValue5['protocol'];
                  if (protocolValue !== null && protocolValue !== undefined) {
                    var protocolInstance = protocolValue;
                    securityRuleJsonFormatInstance.protocol = protocolInstance;
                  }
                  
                  var sourcePortRangeValue = propertiesValue5['sourcePortRange'];
                  if (sourcePortRangeValue !== null && sourcePortRangeValue !== undefined) {
                    var sourcePortRangeInstance = sourcePortRangeValue;
                    securityRuleJsonFormatInstance.sourcePortRange = sourcePortRangeInstance;
                  }
                  
                  var destinationPortRangeValue = propertiesValue5['destinationPortRange'];
                  if (destinationPortRangeValue !== null && destinationPortRangeValue !== undefined) {
                    var destinationPortRangeInstance = destinationPortRangeValue;
                    securityRuleJsonFormatInstance.destinationPortRange = destinationPortRangeInstance;
                  }
                  
                  var sourceAddressPrefixValue = propertiesValue5['sourceAddressPrefix'];
                  if (sourceAddressPrefixValue !== null && sourceAddressPrefixValue !== undefined) {
                    var sourceAddressPrefixInstance = sourceAddressPrefixValue;
                    securityRuleJsonFormatInstance.sourceAddressPrefix = sourceAddressPrefixInstance;
                  }
                  
                  var destinationAddressPrefixValue = propertiesValue5['destinationAddressPrefix'];
                  if (destinationAddressPrefixValue !== null && destinationAddressPrefixValue !== undefined) {
                    var destinationAddressPrefixInstance = destinationAddressPrefixValue;
                    securityRuleJsonFormatInstance.destinationAddressPrefix = destinationAddressPrefixInstance;
                  }
                  
                  var accessValue = propertiesValue5['access'];
                  if (accessValue !== null && accessValue !== undefined) {
                    var accessInstance = accessValue;
                    securityRuleJsonFormatInstance.access = accessInstance;
                  }
                  
                  var priorityValue = propertiesValue5['priority'];
                  if (priorityValue !== null && priorityValue !== undefined) {
                    var priorityInstance = priorityValue;
                    securityRuleJsonFormatInstance.priority = priorityInstance;
                  }
                  
                  var directionValue = propertiesValue5['direction'];
                  if (directionValue !== null && directionValue !== undefined) {
                    var directionInstance = directionValue;
                    securityRuleJsonFormatInstance.direction = directionInstance;
                  }
                  
                  var provisioningStateValue = propertiesValue5['provisioningState'];
                  if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
                    var provisioningStateInstance = provisioningStateValue;
                    securityRuleJsonFormatInstance.provisioningState = provisioningStateInstance;
                  }
                }
                
                var nameValue = securityRulesValue['name'];
                if (nameValue !== null && nameValue !== undefined) {
                  var nameInstance = nameValue;
                  securityRuleJsonFormatInstance.name = nameInstance;
                }
                
                var etagValue = securityRulesValue['etag'];
                if (etagValue !== null && etagValue !== undefined) {
                  var etagInstance = etagValue;
                  securityRuleJsonFormatInstance.etag = etagInstance;
                }
                
                var idValue = securityRulesValue['id'];
                if (idValue !== null && idValue !== undefined) {
                  var idInstance = idValue;
                  securityRuleJsonFormatInstance.id = idInstance;
                }
              }
            }
            
            var defaultSecurityRulesArray2 = propertiesValue4['defaultSecurityRules'];
            if (defaultSecurityRulesArray2 !== null && defaultSecurityRulesArray2 !== undefined) {
              for (var loweredIndex8 = 0; loweredIndex8 < defaultSecurityRulesArray2.length; loweredIndex8 = loweredIndex8 + 1) {
                var defaultSecurityRulesValue = defaultSecurityRulesArray2[loweredIndex8];
                var securityRuleJsonFormatInstance2 = {};
                networkSecurityGroupInstance.defaultSecurityRules.push(securityRuleJsonFormatInstance2);
                
                var propertiesValue6 = defaultSecurityRulesValue['properties'];
                if (propertiesValue6 !== null && propertiesValue6 !== undefined) {
                  var descriptionValue2 = propertiesValue6['description'];
                  if (descriptionValue2 !== null && descriptionValue2 !== undefined) {
                    var descriptionInstance2 = descriptionValue2;
                    securityRuleJsonFormatInstance2.description = descriptionInstance2;
                  }
                  
                  var protocolValue2 = propertiesValue6['protocol'];
                  if (protocolValue2 !== null && protocolValue2 !== undefined) {
                    var protocolInstance2 = protocolValue2;
                    securityRuleJsonFormatInstance2.protocol = protocolInstance2;
                  }
                  
                  var sourcePortRangeValue2 = propertiesValue6['sourcePortRange'];
                  if (sourcePortRangeValue2 !== null && sourcePortRangeValue2 !== undefined) {
                    var sourcePortRangeInstance2 = sourcePortRangeValue2;
                    securityRuleJsonFormatInstance2.sourcePortRange = sourcePortRangeInstance2;
                  }
                  
                  var destinationPortRangeValue2 = propertiesValue6['destinationPortRange'];
                  if (destinationPortRangeValue2 !== null && destinationPortRangeValue2 !== undefined) {
                    var destinationPortRangeInstance2 = destinationPortRangeValue2;
                    securityRuleJsonFormatInstance2.destinationPortRange = destinationPortRangeInstance2;
                  }
                  
                  var sourceAddressPrefixValue2 = propertiesValue6['sourceAddressPrefix'];
                  if (sourceAddressPrefixValue2 !== null && sourceAddressPrefixValue2 !== undefined) {
                    var sourceAddressPrefixInstance2 = sourceAddressPrefixValue2;
                    securityRuleJsonFormatInstance2.sourceAddressPrefix = sourceAddressPrefixInstance2;
                  }
                  
                  var destinationAddressPrefixValue2 = propertiesValue6['destinationAddressPrefix'];
                  if (destinationAddressPrefixValue2 !== null && destinationAddressPrefixValue2 !== undefined) {
                    var destinationAddressPrefixInstance2 = destinationAddressPrefixValue2;
                    securityRuleJsonFormatInstance2.destinationAddressPrefix = destinationAddressPrefixInstance2;
                  }
                  
                  var accessValue2 = propertiesValue6['access'];
                  if (accessValue2 !== null && accessValue2 !== undefined) {
                    var accessInstance2 = accessValue2;
                    securityRuleJsonFormatInstance2.access = accessInstance2;
                  }
                  
                  var priorityValue2 = propertiesValue6['priority'];
                  if (priorityValue2 !== null && priorityValue2 !== undefined) {
                    var priorityInstance2 = priorityValue2;
                    securityRuleJsonFormatInstance2.priority = priorityInstance2;
                  }
                  
                  var directionValue2 = propertiesValue6['direction'];
                  if (directionValue2 !== null && directionValue2 !== undefined) {
                    var directionInstance2 = directionValue2;
                    securityRuleJsonFormatInstance2.direction = directionInstance2;
                  }
                  
                  var provisioningStateValue2 = propertiesValue6['provisioningState'];
                  if (provisioningStateValue2 !== null && provisioningStateValue2 !== undefined) {
                    var provisioningStateInstance2 = provisioningStateValue2;
                    securityRuleJsonFormatInstance2.provisioningState = provisioningStateInstance2;
                  }
                }
                
                var nameValue2 = defaultSecurityRulesValue['name'];
                if (nameValue2 !== null && nameValue2 !== undefined) {
                  var nameInstance2 = nameValue2;
                  securityRuleJsonFormatInstance2.name = nameInstance2;
                }
                
                var etagValue2 = defaultSecurityRulesValue['etag'];
                if (etagValue2 !== null && etagValue2 !== undefined) {
                  var etagInstance2 = etagValue2;
                  securityRuleJsonFormatInstance2.etag = etagInstance2;
                }
                
                var idValue2 = defaultSecurityRulesValue['id'];
                if (idValue2 !== null && idValue2 !== undefined) {
                  var idInstance2 = idValue2;
                  securityRuleJsonFormatInstance2.id = idInstance2;
                }
              }
            }
            
            var networkInterfacesArray2 = propertiesValue4['networkInterfaces'];
            if (networkInterfacesArray2 !== null && networkInterfacesArray2 !== undefined) {
              for (var loweredIndex9 = 0; loweredIndex9 < networkInterfacesArray2.length; loweredIndex9 = loweredIndex9 + 1) {
                var networkInterfacesValue = networkInterfacesArray2[loweredIndex9];
                var resourceIdInstance = {};
                networkSecurityGroupInstance.networkInterfaces.push(resourceIdInstance);
                
                var idValue3 = networkInterfacesValue['id'];
                if (idValue3 !== null && idValue3 !== undefined) {
                  var idInstance3 = idValue3;
                  resourceIdInstance.id = idInstance3;
                }
              }
            }
            
            var subnetsArray2 = propertiesValue4['subnets'];
            if (subnetsArray2 !== null && subnetsArray2 !== undefined) {
              for (var loweredIndex10 = 0; loweredIndex10 < subnetsArray2.length; loweredIndex10 = loweredIndex10 + 1) {
                var subnetsValue = subnetsArray2[loweredIndex10];
                var resourceIdInstance2 = {};
                networkSecurityGroupInstance.subnets.push(resourceIdInstance2);
                
                var idValue4 = subnetsValue['id'];
                if (idValue4 !== null && idValue4 !== undefined) {
                  var idInstance4 = idValue4;
                  resourceIdInstance2.id = idInstance4;
                }
              }
            }
            
            var resourceGuidValue = propertiesValue4['resourceGuid'];
            if (resourceGuidValue !== null && resourceGuidValue !== undefined) {
              var resourceGuidInstance = resourceGuidValue;
              networkSecurityGroupInstance.resourceGuid = resourceGuidInstance;
            }
            
            var provisioningStateValue3 = propertiesValue4['provisioningState'];
            if (provisioningStateValue3 !== null && provisioningStateValue3 !== undefined) {
              var provisioningStateInstance3 = provisioningStateValue3;
              networkSecurityGroupInstance.provisioningState = provisioningStateInstance3;
            }
          }
          
          var etagValue3 = responseDoc['etag'];
          if (etagValue3 !== null && etagValue3 !== undefined) {
            var etagInstance3 = etagValue3;
            networkSecurityGroupInstance.etag = etagInstance3;
          }
          
          var idValue5 = responseDoc['id'];
          if (idValue5 !== null && idValue5 !== undefined) {
            var idInstance5 = idValue5;
            networkSecurityGroupInstance.id = idInstance5;
          }
          
          var nameValue3 = responseDoc['name'];
          if (nameValue3 !== null && nameValue3 !== undefined) {
            var nameInstance3 = nameValue3;
            networkSecurityGroupInstance.name = nameInstance3;
          }
          
          var typeValue = responseDoc['type'];
          if (typeValue !== null && typeValue !== undefined) {
            var typeInstance = typeValue;
            networkSecurityGroupInstance.type = typeInstance;
          }
          
          var locationValue = responseDoc['location'];
          if (locationValue !== null && locationValue !== undefined) {
            var locationInstance = locationValue;
            networkSecurityGroupInstance.location = locationInstance;
          }
          
          var tagsSequenceElement = responseDoc['tags'];
          if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
            for (var property in tagsSequenceElement) {
              var tagsKey2 = property;
              var tagsValue2 = tagsSequenceElement[property];
              networkSecurityGroupInstance.tags[tagsKey2] = tagsValue2;
            }
          }
          
          var errorValue = responseDoc['error'];
          if (errorValue !== null && errorValue !== undefined) {
            var errorInstance = { details: [] };
            result.error = errorInstance;
            
            var codeValue = errorValue['code'];
            if (codeValue !== null && codeValue !== undefined) {
              var codeInstance = codeValue;
              errorInstance.code = codeInstance;
            }
            
            var messageValue = errorValue['message'];
            if (messageValue !== null && messageValue !== undefined) {
              var messageInstance = messageValue;
              errorInstance.message = messageInstance;
            }
            
            var targetValue = errorValue['target'];
            if (targetValue !== null && targetValue !== undefined) {
              var targetInstance = targetValue;
              errorInstance.target = targetInstance;
            }
            
            var detailsArray = errorValue['details'];
            if (detailsArray !== null && detailsArray !== undefined) {
              for (var loweredIndex11 = 0; loweredIndex11 < detailsArray.length; loweredIndex11 = loweredIndex11 + 1) {
                var detailsValue = detailsArray[loweredIndex11];
                var errorDetailsInstance = {};
                errorInstance.details.push(errorDetailsInstance);
                
                var codeValue2 = detailsValue['code'];
                if (codeValue2 !== null && codeValue2 !== undefined) {
                  var codeInstance2 = codeValue2;
                  errorDetailsInstance.code = codeInstance2;
                }
                
                var targetValue2 = detailsValue['target'];
                if (targetValue2 !== null && targetValue2 !== undefined) {
                  var targetInstance2 = targetValue2;
                  errorDetailsInstance.target = targetInstance2;
                }
                
                var messageValue2 = detailsValue['message'];
                if (messageValue2 !== null && messageValue2 !== undefined) {
                  var messageInstance2 = messageValue2;
                  errorDetailsInstance.message = messageInstance2;
                }
              }
            }
            
            var innerErrorValue = errorValue['innerError'];
            if (innerErrorValue !== null && innerErrorValue !== undefined) {
              var innerErrorInstance = innerErrorValue;
              errorInstance.innerError = innerErrorInstance;
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      result.azureAsyncOperation = response.headers['azure-asyncoperation'];
      result.retryAfter = parseInt(response.headers['retry-after'], 10);
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The Delete NetworkSecurityGroup operation deletes the specifed network
   * security group
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} networkSecurityGroupName The name of the network security
   * group.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  NetworkSecurityGroupOperations.prototype.beginDeleting = function(resourceGroupName, networkSecurityGroupName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (networkSecurityGroupName === null || networkSecurityGroupName === undefined) {
      return callback(new Error('networkSecurityGroupName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Network';
    url2 = url2 + '/networkSecurityGroups/';
    url2 = url2 + encodeURIComponent(networkSecurityGroupName);
    var queryParameters = [];
    queryParameters.push('api-version=2015-05-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'DELETE';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200 && statusCode !== 202 && statusCode !== 204) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      result = {};
      result.statusCode = statusCode;
      result.azureAsyncOperation = response.headers['azure-asyncoperation'];
      result.retryAfter = parseInt(response.headers['retry-after'], 10);
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The Put NetworkSecurityGroup operation creates/updates a network security
   * groupin the specified resource group.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} networkSecurityGroupName The name of the network security
   * group.
   * 
   * @param {NetworkSecurityGroup} parameters Parameters supplied to the
   * create/update Network Security Group operation
   * 
   * @param {IEnumerable} [parameters.securityRules] Gets or sets Security
   * rules of network security group
   * 
   * @param {IEnumerable} [parameters.defaultSecurityRules] Gets or sets
   * Default security rules of network security group
   * 
   * @param {IEnumerable} [parameters.networkInterfaces] Gets collection of
   * references to Network Interfaces
   * 
   * @param {IEnumerable} [parameters.subnets] Gets collection of references to
   * subnets
   * 
   * @param {string} [parameters.provisioningState] Gets or sets Provisioning
   * state of the PublicIP resource Updating/Deleting/Failed
   * 
   * @param {string} [parameters.resourceGuid] Gets or sets resource guid
   * property of the network security group resource
   * 
   * @param {string} [parameters.etag] Gets a unique read-only string that
   * changes whenever the resource is updated
   * 
   * @param {string} [parameters.id] Gets or sets the ID of the resource.
   * 
   * @param {string} [parameters.name] Gets or sets the name of the resource.
   * 
   * @param {string} [parameters.type] Gets or sets the type of the resource.
   * 
   * @param {string} [parameters.location] Gets or sets the location of the
   * resource.
   * 
   * @param {object} [parameters.tags] Gets or sets the tags attached to the
   * resource.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  NetworkSecurityGroupOperations.prototype.createOrUpdate = function(resourceGroupName, networkSecurityGroupName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.networkSecurityGroups.beginCreateOrUpdating(resourceGroupName, networkSecurityGroupName, parameters, function (err, result) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var delayInSeconds = result.retryAfter;
      if (delayInSeconds === 0) {
        delayInSeconds = 30;
      }
      if (client2.longRunningOperationInitialTimeout >= 0) {
        delayInSeconds = client2.longRunningOperationInitialTimeout;
      }
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.getLongRunningOperationStatus(result.azureAsyncOperation, function (err2, result2) {
            if (err2 !== null && err2 !== undefined) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                return callback(null, result2);
              } else {
                delayInSeconds = result2.retryAfter;
                if (delayInSeconds === 0) {
                  delayInSeconds = 15;
                }
                if (client2.longRunningOperationRetryTimeout >= 0) {
                  delayInSeconds = client2.longRunningOperationRetryTimeout;
                }
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  /**
   * The Delete NetworkSecurityGroup operation deletes the specifed network
   * security group
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} networkSecurityGroupName The name of the network security
   * group.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  NetworkSecurityGroupOperations.prototype.deleteMethod = function(resourceGroupName, networkSecurityGroupName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.networkSecurityGroups.beginDeleting(resourceGroupName, networkSecurityGroupName, function (err, result) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var delayInSeconds = result.retryAfter;
      if (delayInSeconds === 0) {
        delayInSeconds = 30;
      }
      if (client2.longRunningOperationInitialTimeout >= 0) {
        delayInSeconds = client2.longRunningOperationInitialTimeout;
      }
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.getLongRunningOperationStatus(result.azureAsyncOperation, function (err2, result2) {
            if (err2 !== null && err2 !== undefined) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                return callback(null, result2);
              } else {
                delayInSeconds = result2.retryAfter;
                if (delayInSeconds === 0) {
                  delayInSeconds = 15;
                }
                if (client2.longRunningOperationRetryTimeout >= 0) {
                  delayInSeconds = client2.longRunningOperationRetryTimeout;
                }
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  /**
   * The Get NetworkSecurityGroups operation retrieves information about the
   * specified network security group.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} networkSecurityGroupName The name of the network security
   * group.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  NetworkSecurityGroupOperations.prototype.get = function(resourceGroupName, networkSecurityGroupName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (networkSecurityGroupName === null || networkSecurityGroupName === undefined) {
      return callback(new Error('networkSecurityGroupName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Network';
    url2 = url2 + '/networkSecurityGroups/';
    url2 = url2 + encodeURIComponent(networkSecurityGroupName);
    var queryParameters = [];
    queryParameters.push('api-version=2015-05-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var networkSecurityGroupInstance = { defaultSecurityRules: [], networkInterfaces: [], securityRules: [], subnets: [], tags: {} };
          result.networkSecurityGroup = networkSecurityGroupInstance;
          
          var propertiesValue = responseDoc['properties'];
          if (propertiesValue !== null && propertiesValue !== undefined) {
            var securityRulesArray = propertiesValue['securityRules'];
            if (securityRulesArray !== null && securityRulesArray !== undefined) {
              for (var loweredIndex1 = 0; loweredIndex1 < securityRulesArray.length; loweredIndex1 = loweredIndex1 + 1) {
                var securityRulesValue = securityRulesArray[loweredIndex1];
                var securityRuleJsonFormatInstance = {};
                networkSecurityGroupInstance.securityRules.push(securityRuleJsonFormatInstance);
                
                var propertiesValue2 = securityRulesValue['properties'];
                if (propertiesValue2 !== null && propertiesValue2 !== undefined) {
                  var descriptionValue = propertiesValue2['description'];
                  if (descriptionValue !== null && descriptionValue !== undefined) {
                    var descriptionInstance = descriptionValue;
                    securityRuleJsonFormatInstance.description = descriptionInstance;
                  }
                  
                  var protocolValue = propertiesValue2['protocol'];
                  if (protocolValue !== null && protocolValue !== undefined) {
                    var protocolInstance = protocolValue;
                    securityRuleJsonFormatInstance.protocol = protocolInstance;
                  }
                  
                  var sourcePortRangeValue = propertiesValue2['sourcePortRange'];
                  if (sourcePortRangeValue !== null && sourcePortRangeValue !== undefined) {
                    var sourcePortRangeInstance = sourcePortRangeValue;
                    securityRuleJsonFormatInstance.sourcePortRange = sourcePortRangeInstance;
                  }
                  
                  var destinationPortRangeValue = propertiesValue2['destinationPortRange'];
                  if (destinationPortRangeValue !== null && destinationPortRangeValue !== undefined) {
                    var destinationPortRangeInstance = destinationPortRangeValue;
                    securityRuleJsonFormatInstance.destinationPortRange = destinationPortRangeInstance;
                  }
                  
                  var sourceAddressPrefixValue = propertiesValue2['sourceAddressPrefix'];
                  if (sourceAddressPrefixValue !== null && sourceAddressPrefixValue !== undefined) {
                    var sourceAddressPrefixInstance = sourceAddressPrefixValue;
                    securityRuleJsonFormatInstance.sourceAddressPrefix = sourceAddressPrefixInstance;
                  }
                  
                  var destinationAddressPrefixValue = propertiesValue2['destinationAddressPrefix'];
                  if (destinationAddressPrefixValue !== null && destinationAddressPrefixValue !== undefined) {
                    var destinationAddressPrefixInstance = destinationAddressPrefixValue;
                    securityRuleJsonFormatInstance.destinationAddressPrefix = destinationAddressPrefixInstance;
                  }
                  
                  var accessValue = propertiesValue2['access'];
                  if (accessValue !== null && accessValue !== undefined) {
                    var accessInstance = accessValue;
                    securityRuleJsonFormatInstance.access = accessInstance;
                  }
                  
                  var priorityValue = propertiesValue2['priority'];
                  if (priorityValue !== null && priorityValue !== undefined) {
                    var priorityInstance = priorityValue;
                    securityRuleJsonFormatInstance.priority = priorityInstance;
                  }
                  
                  var directionValue = propertiesValue2['direction'];
                  if (directionValue !== null && directionValue !== undefined) {
                    var directionInstance = directionValue;
                    securityRuleJsonFormatInstance.direction = directionInstance;
                  }
                  
                  var provisioningStateValue = propertiesValue2['provisioningState'];
                  if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
                    var provisioningStateInstance = provisioningStateValue;
                    securityRuleJsonFormatInstance.provisioningState = provisioningStateInstance;
                  }
                }
                
                var nameValue = securityRulesValue['name'];
                if (nameValue !== null && nameValue !== undefined) {
                  var nameInstance = nameValue;
                  securityRuleJsonFormatInstance.name = nameInstance;
                }
                
                var etagValue = securityRulesValue['etag'];
                if (etagValue !== null && etagValue !== undefined) {
                  var etagInstance = etagValue;
                  securityRuleJsonFormatInstance.etag = etagInstance;
                }
                
                var idValue = securityRulesValue['id'];
                if (idValue !== null && idValue !== undefined) {
                  var idInstance = idValue;
                  securityRuleJsonFormatInstance.id = idInstance;
                }
              }
            }
            
            var defaultSecurityRulesArray = propertiesValue['defaultSecurityRules'];
            if (defaultSecurityRulesArray !== null && defaultSecurityRulesArray !== undefined) {
              for (var loweredIndex2 = 0; loweredIndex2 < defaultSecurityRulesArray.length; loweredIndex2 = loweredIndex2 + 1) {
                var defaultSecurityRulesValue = defaultSecurityRulesArray[loweredIndex2];
                var securityRuleJsonFormatInstance2 = {};
                networkSecurityGroupInstance.defaultSecurityRules.push(securityRuleJsonFormatInstance2);
                
                var propertiesValue3 = defaultSecurityRulesValue['properties'];
                if (propertiesValue3 !== null && propertiesValue3 !== undefined) {
                  var descriptionValue2 = propertiesValue3['description'];
                  if (descriptionValue2 !== null && descriptionValue2 !== undefined) {
                    var descriptionInstance2 = descriptionValue2;
                    securityRuleJsonFormatInstance2.description = descriptionInstance2;
                  }
                  
                  var protocolValue2 = propertiesValue3['protocol'];
                  if (protocolValue2 !== null && protocolValue2 !== undefined) {
                    var protocolInstance2 = protocolValue2;
                    securityRuleJsonFormatInstance2.protocol = protocolInstance2;
                  }
                  
                  var sourcePortRangeValue2 = propertiesValue3['sourcePortRange'];
                  if (sourcePortRangeValue2 !== null && sourcePortRangeValue2 !== undefined) {
                    var sourcePortRangeInstance2 = sourcePortRangeValue2;
                    securityRuleJsonFormatInstance2.sourcePortRange = sourcePortRangeInstance2;
                  }
                  
                  var destinationPortRangeValue2 = propertiesValue3['destinationPortRange'];
                  if (destinationPortRangeValue2 !== null && destinationPortRangeValue2 !== undefined) {
                    var destinationPortRangeInstance2 = destinationPortRangeValue2;
                    securityRuleJsonFormatInstance2.destinationPortRange = destinationPortRangeInstance2;
                  }
                  
                  var sourceAddressPrefixValue2 = propertiesValue3['sourceAddressPrefix'];
                  if (sourceAddressPrefixValue2 !== null && sourceAddressPrefixValue2 !== undefined) {
                    var sourceAddressPrefixInstance2 = sourceAddressPrefixValue2;
                    securityRuleJsonFormatInstance2.sourceAddressPrefix = sourceAddressPrefixInstance2;
                  }
                  
                  var destinationAddressPrefixValue2 = propertiesValue3['destinationAddressPrefix'];
                  if (destinationAddressPrefixValue2 !== null && destinationAddressPrefixValue2 !== undefined) {
                    var destinationAddressPrefixInstance2 = destinationAddressPrefixValue2;
                    securityRuleJsonFormatInstance2.destinationAddressPrefix = destinationAddressPrefixInstance2;
                  }
                  
                  var accessValue2 = propertiesValue3['access'];
                  if (accessValue2 !== null && accessValue2 !== undefined) {
                    var accessInstance2 = accessValue2;
                    securityRuleJsonFormatInstance2.access = accessInstance2;
                  }
                  
                  var priorityValue2 = propertiesValue3['priority'];
                  if (priorityValue2 !== null && priorityValue2 !== undefined) {
                    var priorityInstance2 = priorityValue2;
                    securityRuleJsonFormatInstance2.priority = priorityInstance2;
                  }
                  
                  var directionValue2 = propertiesValue3['direction'];
                  if (directionValue2 !== null && directionValue2 !== undefined) {
                    var directionInstance2 = directionValue2;
                    securityRuleJsonFormatInstance2.direction = directionInstance2;
                  }
                  
                  var provisioningStateValue2 = propertiesValue3['provisioningState'];
                  if (provisioningStateValue2 !== null && provisioningStateValue2 !== undefined) {
                    var provisioningStateInstance2 = provisioningStateValue2;
                    securityRuleJsonFormatInstance2.provisioningState = provisioningStateInstance2;
                  }
                }
                
                var nameValue2 = defaultSecurityRulesValue['name'];
                if (nameValue2 !== null && nameValue2 !== undefined) {
                  var nameInstance2 = nameValue2;
                  securityRuleJsonFormatInstance2.name = nameInstance2;
                }
                
                var etagValue2 = defaultSecurityRulesValue['etag'];
                if (etagValue2 !== null && etagValue2 !== undefined) {
                  var etagInstance2 = etagValue2;
                  securityRuleJsonFormatInstance2.etag = etagInstance2;
                }
                
                var idValue2 = defaultSecurityRulesValue['id'];
                if (idValue2 !== null && idValue2 !== undefined) {
                  var idInstance2 = idValue2;
                  securityRuleJsonFormatInstance2.id = idInstance2;
                }
              }
            }
            
            var networkInterfacesArray = propertiesValue['networkInterfaces'];
            if (networkInterfacesArray !== null && networkInterfacesArray !== undefined) {
              for (var loweredIndex3 = 0; loweredIndex3 < networkInterfacesArray.length; loweredIndex3 = loweredIndex3 + 1) {
                var networkInterfacesValue = networkInterfacesArray[loweredIndex3];
                var resourceIdInstance = {};
                networkSecurityGroupInstance.networkInterfaces.push(resourceIdInstance);
                
                var idValue3 = networkInterfacesValue['id'];
                if (idValue3 !== null && idValue3 !== undefined) {
                  var idInstance3 = idValue3;
                  resourceIdInstance.id = idInstance3;
                }
              }
            }
            
            var subnetsArray = propertiesValue['subnets'];
            if (subnetsArray !== null && subnetsArray !== undefined) {
              for (var loweredIndex4 = 0; loweredIndex4 < subnetsArray.length; loweredIndex4 = loweredIndex4 + 1) {
                var subnetsValue = subnetsArray[loweredIndex4];
                var resourceIdInstance2 = {};
                networkSecurityGroupInstance.subnets.push(resourceIdInstance2);
                
                var idValue4 = subnetsValue['id'];
                if (idValue4 !== null && idValue4 !== undefined) {
                  var idInstance4 = idValue4;
                  resourceIdInstance2.id = idInstance4;
                }
              }
            }
            
            var resourceGuidValue = propertiesValue['resourceGuid'];
            if (resourceGuidValue !== null && resourceGuidValue !== undefined) {
              var resourceGuidInstance = resourceGuidValue;
              networkSecurityGroupInstance.resourceGuid = resourceGuidInstance;
            }
            
            var provisioningStateValue3 = propertiesValue['provisioningState'];
            if (provisioningStateValue3 !== null && provisioningStateValue3 !== undefined) {
              var provisioningStateInstance3 = provisioningStateValue3;
              networkSecurityGroupInstance.provisioningState = provisioningStateInstance3;
            }
          }
          
          var etagValue3 = responseDoc['etag'];
          if (etagValue3 !== null && etagValue3 !== undefined) {
            var etagInstance3 = etagValue3;
            networkSecurityGroupInstance.etag = etagInstance3;
          }
          
          var idValue5 = responseDoc['id'];
          if (idValue5 !== null && idValue5 !== undefined) {
            var idInstance5 = idValue5;
            networkSecurityGroupInstance.id = idInstance5;
          }
          
          var nameValue3 = responseDoc['name'];
          if (nameValue3 !== null && nameValue3 !== undefined) {
            var nameInstance3 = nameValue3;
            networkSecurityGroupInstance.name = nameInstance3;
          }
          
          var typeValue = responseDoc['type'];
          if (typeValue !== null && typeValue !== undefined) {
            var typeInstance = typeValue;
            networkSecurityGroupInstance.type = typeInstance;
          }
          
          var locationValue = responseDoc['location'];
          if (locationValue !== null && locationValue !== undefined) {
            var locationInstance = locationValue;
            networkSecurityGroupInstance.location = locationInstance;
          }
          
          var tagsSequenceElement = responseDoc['tags'];
          if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
            for (var property in tagsSequenceElement) {
              var tagsKey = property;
              var tagsValue = tagsSequenceElement[property];
              networkSecurityGroupInstance.tags[tagsKey] = tagsValue;
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The list NetworkSecurityGroups returns all network security groups in a
   * resource group
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  NetworkSecurityGroupOperations.prototype.list = function(resourceGroupName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Network';
    url2 = url2 + '/networkSecurityGroups';
    var queryParameters = [];
    queryParameters.push('api-version=2015-05-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = { networkSecurityGroups: [] };
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var valueArray = responseDoc['value'];
          if (valueArray !== null && valueArray !== undefined) {
            for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var valueValue = valueArray[loweredIndex1];
              var networkSecurityGroupJsonFormatInstance = { defaultSecurityRules: [], networkInterfaces: [], securityRules: [], subnets: [], tags: {} };
              result.networkSecurityGroups.push(networkSecurityGroupJsonFormatInstance);
              
              var propertiesValue = valueValue['properties'];
              if (propertiesValue !== null && propertiesValue !== undefined) {
                var securityRulesArray = propertiesValue['securityRules'];
                if (securityRulesArray !== null && securityRulesArray !== undefined) {
                  for (var loweredIndex2 = 0; loweredIndex2 < securityRulesArray.length; loweredIndex2 = loweredIndex2 + 1) {
                    var securityRulesValue = securityRulesArray[loweredIndex2];
                    var securityRuleJsonFormatInstance = {};
                    networkSecurityGroupJsonFormatInstance.securityRules.push(securityRuleJsonFormatInstance);
                    
                    var propertiesValue2 = securityRulesValue['properties'];
                    if (propertiesValue2 !== null && propertiesValue2 !== undefined) {
                      var descriptionValue = propertiesValue2['description'];
                      if (descriptionValue !== null && descriptionValue !== undefined) {
                        var descriptionInstance = descriptionValue;
                        securityRuleJsonFormatInstance.description = descriptionInstance;
                      }
                      
                      var protocolValue = propertiesValue2['protocol'];
                      if (protocolValue !== null && protocolValue !== undefined) {
                        var protocolInstance = protocolValue;
                        securityRuleJsonFormatInstance.protocol = protocolInstance;
                      }
                      
                      var sourcePortRangeValue = propertiesValue2['sourcePortRange'];
                      if (sourcePortRangeValue !== null && sourcePortRangeValue !== undefined) {
                        var sourcePortRangeInstance = sourcePortRangeValue;
                        securityRuleJsonFormatInstance.sourcePortRange = sourcePortRangeInstance;
                      }
                      
                      var destinationPortRangeValue = propertiesValue2['destinationPortRange'];
                      if (destinationPortRangeValue !== null && destinationPortRangeValue !== undefined) {
                        var destinationPortRangeInstance = destinationPortRangeValue;
                        securityRuleJsonFormatInstance.destinationPortRange = destinationPortRangeInstance;
                      }
                      
                      var sourceAddressPrefixValue = propertiesValue2['sourceAddressPrefix'];
                      if (sourceAddressPrefixValue !== null && sourceAddressPrefixValue !== undefined) {
                        var sourceAddressPrefixInstance = sourceAddressPrefixValue;
                        securityRuleJsonFormatInstance.sourceAddressPrefix = sourceAddressPrefixInstance;
                      }
                      
                      var destinationAddressPrefixValue = propertiesValue2['destinationAddressPrefix'];
                      if (destinationAddressPrefixValue !== null && destinationAddressPrefixValue !== undefined) {
                        var destinationAddressPrefixInstance = destinationAddressPrefixValue;
                        securityRuleJsonFormatInstance.destinationAddressPrefix = destinationAddressPrefixInstance;
                      }
                      
                      var accessValue = propertiesValue2['access'];
                      if (accessValue !== null && accessValue !== undefined) {
                        var accessInstance = accessValue;
                        securityRuleJsonFormatInstance.access = accessInstance;
                      }
                      
                      var priorityValue = propertiesValue2['priority'];
                      if (priorityValue !== null && priorityValue !== undefined) {
                        var priorityInstance = priorityValue;
                        securityRuleJsonFormatInstance.priority = priorityInstance;
                      }
                      
                      var directionValue = propertiesValue2['direction'];
                      if (directionValue !== null && directionValue !== undefined) {
                        var directionInstance = directionValue;
                        securityRuleJsonFormatInstance.direction = directionInstance;
                      }
                      
                      var provisioningStateValue = propertiesValue2['provisioningState'];
                      if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
                        var provisioningStateInstance = provisioningStateValue;
                        securityRuleJsonFormatInstance.provisioningState = provisioningStateInstance;
                      }
                    }
                    
                    var nameValue = securityRulesValue['name'];
                    if (nameValue !== null && nameValue !== undefined) {
                      var nameInstance = nameValue;
                      securityRuleJsonFormatInstance.name = nameInstance;
                    }
                    
                    var etagValue = securityRulesValue['etag'];
                    if (etagValue !== null && etagValue !== undefined) {
                      var etagInstance = etagValue;
                      securityRuleJsonFormatInstance.etag = etagInstance;
                    }
                    
                    var idValue = securityRulesValue['id'];
                    if (idValue !== null && idValue !== undefined) {
                      var idInstance = idValue;
                      securityRuleJsonFormatInstance.id = idInstance;
                    }
                  }
                }
                
                var defaultSecurityRulesArray = propertiesValue['defaultSecurityRules'];
                if (defaultSecurityRulesArray !== null && defaultSecurityRulesArray !== undefined) {
                  for (var loweredIndex3 = 0; loweredIndex3 < defaultSecurityRulesArray.length; loweredIndex3 = loweredIndex3 + 1) {
                    var defaultSecurityRulesValue = defaultSecurityRulesArray[loweredIndex3];
                    var securityRuleJsonFormatInstance2 = {};
                    networkSecurityGroupJsonFormatInstance.defaultSecurityRules.push(securityRuleJsonFormatInstance2);
                    
                    var propertiesValue3 = defaultSecurityRulesValue['properties'];
                    if (propertiesValue3 !== null && propertiesValue3 !== undefined) {
                      var descriptionValue2 = propertiesValue3['description'];
                      if (descriptionValue2 !== null && descriptionValue2 !== undefined) {
                        var descriptionInstance2 = descriptionValue2;
                        securityRuleJsonFormatInstance2.description = descriptionInstance2;
                      }
                      
                      var protocolValue2 = propertiesValue3['protocol'];
                      if (protocolValue2 !== null && protocolValue2 !== undefined) {
                        var protocolInstance2 = protocolValue2;
                        securityRuleJsonFormatInstance2.protocol = protocolInstance2;
                      }
                      
                      var sourcePortRangeValue2 = propertiesValue3['sourcePortRange'];
                      if (sourcePortRangeValue2 !== null && sourcePortRangeValue2 !== undefined) {
                        var sourcePortRangeInstance2 = sourcePortRangeValue2;
                        securityRuleJsonFormatInstance2.sourcePortRange = sourcePortRangeInstance2;
                      }
                      
                      var destinationPortRangeValue2 = propertiesValue3['destinationPortRange'];
                      if (destinationPortRangeValue2 !== null && destinationPortRangeValue2 !== undefined) {
                        var destinationPortRangeInstance2 = destinationPortRangeValue2;
                        securityRuleJsonFormatInstance2.destinationPortRange = destinationPortRangeInstance2;
                      }
                      
                      var sourceAddressPrefixValue2 = propertiesValue3['sourceAddressPrefix'];
                      if (sourceAddressPrefixValue2 !== null && sourceAddressPrefixValue2 !== undefined) {
                        var sourceAddressPrefixInstance2 = sourceAddressPrefixValue2;
                        securityRuleJsonFormatInstance2.sourceAddressPrefix = sourceAddressPrefixInstance2;
                      }
                      
                      var destinationAddressPrefixValue2 = propertiesValue3['destinationAddressPrefix'];
                      if (destinationAddressPrefixValue2 !== null && destinationAddressPrefixValue2 !== undefined) {
                        var destinationAddressPrefixInstance2 = destinationAddressPrefixValue2;
                        securityRuleJsonFormatInstance2.destinationAddressPrefix = destinationAddressPrefixInstance2;
                      }
                      
                      var accessValue2 = propertiesValue3['access'];
                      if (accessValue2 !== null && accessValue2 !== undefined) {
                        var accessInstance2 = accessValue2;
                        securityRuleJsonFormatInstance2.access = accessInstance2;
                      }
                      
                      var priorityValue2 = propertiesValue3['priority'];
                      if (priorityValue2 !== null && priorityValue2 !== undefined) {
                        var priorityInstance2 = priorityValue2;
                        securityRuleJsonFormatInstance2.priority = priorityInstance2;
                      }
                      
                      var directionValue2 = propertiesValue3['direction'];
                      if (directionValue2 !== null && directionValue2 !== undefined) {
                        var directionInstance2 = directionValue2;
                        securityRuleJsonFormatInstance2.direction = directionInstance2;
                      }
                      
                      var provisioningStateValue2 = propertiesValue3['provisioningState'];
                      if (provisioningStateValue2 !== null && provisioningStateValue2 !== undefined) {
                        var provisioningStateInstance2 = provisioningStateValue2;
                        securityRuleJsonFormatInstance2.provisioningState = provisioningStateInstance2;
                      }
                    }
                    
                    var nameValue2 = defaultSecurityRulesValue['name'];
                    if (nameValue2 !== null && nameValue2 !== undefined) {
                      var nameInstance2 = nameValue2;
                      securityRuleJsonFormatInstance2.name = nameInstance2;
                    }
                    
                    var etagValue2 = defaultSecurityRulesValue['etag'];
                    if (etagValue2 !== null && etagValue2 !== undefined) {
                      var etagInstance2 = etagValue2;
                      securityRuleJsonFormatInstance2.etag = etagInstance2;
                    }
                    
                    var idValue2 = defaultSecurityRulesValue['id'];
                    if (idValue2 !== null && idValue2 !== undefined) {
                      var idInstance2 = idValue2;
                      securityRuleJsonFormatInstance2.id = idInstance2;
                    }
                  }
                }
                
                var networkInterfacesArray = propertiesValue['networkInterfaces'];
                if (networkInterfacesArray !== null && networkInterfacesArray !== undefined) {
                  for (var loweredIndex4 = 0; loweredIndex4 < networkInterfacesArray.length; loweredIndex4 = loweredIndex4 + 1) {
                    var networkInterfacesValue = networkInterfacesArray[loweredIndex4];
                    var resourceIdInstance = {};
                    networkSecurityGroupJsonFormatInstance.networkInterfaces.push(resourceIdInstance);
                    
                    var idValue3 = networkInterfacesValue['id'];
                    if (idValue3 !== null && idValue3 !== undefined) {
                      var idInstance3 = idValue3;
                      resourceIdInstance.id = idInstance3;
                    }
                  }
                }
                
                var subnetsArray = propertiesValue['subnets'];
                if (subnetsArray !== null && subnetsArray !== undefined) {
                  for (var loweredIndex5 = 0; loweredIndex5 < subnetsArray.length; loweredIndex5 = loweredIndex5 + 1) {
                    var subnetsValue = subnetsArray[loweredIndex5];
                    var resourceIdInstance2 = {};
                    networkSecurityGroupJsonFormatInstance.subnets.push(resourceIdInstance2);
                    
                    var idValue4 = subnetsValue['id'];
                    if (idValue4 !== null && idValue4 !== undefined) {
                      var idInstance4 = idValue4;
                      resourceIdInstance2.id = idInstance4;
                    }
                  }
                }
                
                var resourceGuidValue = propertiesValue['resourceGuid'];
                if (resourceGuidValue !== null && resourceGuidValue !== undefined) {
                  var resourceGuidInstance = resourceGuidValue;
                  networkSecurityGroupJsonFormatInstance.resourceGuid = resourceGuidInstance;
                }
                
                var provisioningStateValue3 = propertiesValue['provisioningState'];
                if (provisioningStateValue3 !== null && provisioningStateValue3 !== undefined) {
                  var provisioningStateInstance3 = provisioningStateValue3;
                  networkSecurityGroupJsonFormatInstance.provisioningState = provisioningStateInstance3;
                }
              }
              
              var etagValue3 = valueValue['etag'];
              if (etagValue3 !== null && etagValue3 !== undefined) {
                var etagInstance3 = etagValue3;
                networkSecurityGroupJsonFormatInstance.etag = etagInstance3;
              }
              
              var idValue5 = valueValue['id'];
              if (idValue5 !== null && idValue5 !== undefined) {
                var idInstance5 = idValue5;
                networkSecurityGroupJsonFormatInstance.id = idInstance5;
              }
              
              var nameValue3 = valueValue['name'];
              if (nameValue3 !== null && nameValue3 !== undefined) {
                var nameInstance3 = nameValue3;
                networkSecurityGroupJsonFormatInstance.name = nameInstance3;
              }
              
              var typeValue = valueValue['type'];
              if (typeValue !== null && typeValue !== undefined) {
                var typeInstance = typeValue;
                networkSecurityGroupJsonFormatInstance.type = typeInstance;
              }
              
              var locationValue = valueValue['location'];
              if (locationValue !== null && locationValue !== undefined) {
                var locationInstance = locationValue;
                networkSecurityGroupJsonFormatInstance.location = locationInstance;
              }
              
              var tagsSequenceElement = valueValue['tags'];
              if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
                for (var property in tagsSequenceElement) {
                  var tagsKey = property;
                  var tagsValue = tagsSequenceElement[property];
                  networkSecurityGroupJsonFormatInstance.tags[tagsKey] = tagsValue;
                }
              }
            }
          }
          
          var nextLinkValue = responseDoc['nextLink'];
          if (nextLinkValue !== null && nextLinkValue !== undefined) {
            var nextLinkInstance = nextLinkValue;
            result.nextLink = nextLinkInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The list NetworkSecurityGroups returns all network security groups in a
   * subscription
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  NetworkSecurityGroupOperations.prototype.listAll = function(callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Network';
    url2 = url2 + '/networkSecurityGroups';
    var queryParameters = [];
    queryParameters.push('api-version=2015-05-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = { networkSecurityGroups: [] };
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var valueArray = responseDoc['value'];
          if (valueArray !== null && valueArray !== undefined) {
            for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var valueValue = valueArray[loweredIndex1];
              var networkSecurityGroupJsonFormatInstance = { defaultSecurityRules: [], networkInterfaces: [], securityRules: [], subnets: [], tags: {} };
              result.networkSecurityGroups.push(networkSecurityGroupJsonFormatInstance);
              
              var propertiesValue = valueValue['properties'];
              if (propertiesValue !== null && propertiesValue !== undefined) {
                var securityRulesArray = propertiesValue['securityRules'];
                if (securityRulesArray !== null && securityRulesArray !== undefined) {
                  for (var loweredIndex2 = 0; loweredIndex2 < securityRulesArray.length; loweredIndex2 = loweredIndex2 + 1) {
                    var securityRulesValue = securityRulesArray[loweredIndex2];
                    var securityRuleJsonFormatInstance = {};
                    networkSecurityGroupJsonFormatInstance.securityRules.push(securityRuleJsonFormatInstance);
                    
                    var propertiesValue2 = securityRulesValue['properties'];
                    if (propertiesValue2 !== null && propertiesValue2 !== undefined) {
                      var descriptionValue = propertiesValue2['description'];
                      if (descriptionValue !== null && descriptionValue !== undefined) {
                        var descriptionInstance = descriptionValue;
                        securityRuleJsonFormatInstance.description = descriptionInstance;
                      }
                      
                      var protocolValue = propertiesValue2['protocol'];
                      if (protocolValue !== null && protocolValue !== undefined) {
                        var protocolInstance = protocolValue;
                        securityRuleJsonFormatInstance.protocol = protocolInstance;
                      }
                      
                      var sourcePortRangeValue = propertiesValue2['sourcePortRange'];
                      if (sourcePortRangeValue !== null && sourcePortRangeValue !== undefined) {
                        var sourcePortRangeInstance = sourcePortRangeValue;
                        securityRuleJsonFormatInstance.sourcePortRange = sourcePortRangeInstance;
                      }
                      
                      var destinationPortRangeValue = propertiesValue2['destinationPortRange'];
                      if (destinationPortRangeValue !== null && destinationPortRangeValue !== undefined) {
                        var destinationPortRangeInstance = destinationPortRangeValue;
                        securityRuleJsonFormatInstance.destinationPortRange = destinationPortRangeInstance;
                      }
                      
                      var sourceAddressPrefixValue = propertiesValue2['sourceAddressPrefix'];
                      if (sourceAddressPrefixValue !== null && sourceAddressPrefixValue !== undefined) {
                        var sourceAddressPrefixInstance = sourceAddressPrefixValue;
                        securityRuleJsonFormatInstance.sourceAddressPrefix = sourceAddressPrefixInstance;
                      }
                      
                      var destinationAddressPrefixValue = propertiesValue2['destinationAddressPrefix'];
                      if (destinationAddressPrefixValue !== null && destinationAddressPrefixValue !== undefined) {
                        var destinationAddressPrefixInstance = destinationAddressPrefixValue;
                        securityRuleJsonFormatInstance.destinationAddressPrefix = destinationAddressPrefixInstance;
                      }
                      
                      var accessValue = propertiesValue2['access'];
                      if (accessValue !== null && accessValue !== undefined) {
                        var accessInstance = accessValue;
                        securityRuleJsonFormatInstance.access = accessInstance;
                      }
                      
                      var priorityValue = propertiesValue2['priority'];
                      if (priorityValue !== null && priorityValue !== undefined) {
                        var priorityInstance = priorityValue;
                        securityRuleJsonFormatInstance.priority = priorityInstance;
                      }
                      
                      var directionValue = propertiesValue2['direction'];
                      if (directionValue !== null && directionValue !== undefined) {
                        var directionInstance = directionValue;
                        securityRuleJsonFormatInstance.direction = directionInstance;
                      }
                      
                      var provisioningStateValue = propertiesValue2['provisioningState'];
                      if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
                        var provisioningStateInstance = provisioningStateValue;
                        securityRuleJsonFormatInstance.provisioningState = provisioningStateInstance;
                      }
                    }
                    
                    var nameValue = securityRulesValue['name'];
                    if (nameValue !== null && nameValue !== undefined) {
                      var nameInstance = nameValue;
                      securityRuleJsonFormatInstance.name = nameInstance;
                    }
                    
                    var etagValue = securityRulesValue['etag'];
                    if (etagValue !== null && etagValue !== undefined) {
                      var etagInstance = etagValue;
                      securityRuleJsonFormatInstance.etag = etagInstance;
                    }
                    
                    var idValue = securityRulesValue['id'];
                    if (idValue !== null && idValue !== undefined) {
                      var idInstance = idValue;
                      securityRuleJsonFormatInstance.id = idInstance;
                    }
                  }
                }
                
                var defaultSecurityRulesArray = propertiesValue['defaultSecurityRules'];
                if (defaultSecurityRulesArray !== null && defaultSecurityRulesArray !== undefined) {
                  for (var loweredIndex3 = 0; loweredIndex3 < defaultSecurityRulesArray.length; loweredIndex3 = loweredIndex3 + 1) {
                    var defaultSecurityRulesValue = defaultSecurityRulesArray[loweredIndex3];
                    var securityRuleJsonFormatInstance2 = {};
                    networkSecurityGroupJsonFormatInstance.defaultSecurityRules.push(securityRuleJsonFormatInstance2);
                    
                    var propertiesValue3 = defaultSecurityRulesValue['properties'];
                    if (propertiesValue3 !== null && propertiesValue3 !== undefined) {
                      var descriptionValue2 = propertiesValue3['description'];
                      if (descriptionValue2 !== null && descriptionValue2 !== undefined) {
                        var descriptionInstance2 = descriptionValue2;
                        securityRuleJsonFormatInstance2.description = descriptionInstance2;
                      }
                      
                      var protocolValue2 = propertiesValue3['protocol'];
                      if (protocolValue2 !== null && protocolValue2 !== undefined) {
                        var protocolInstance2 = protocolValue2;
                        securityRuleJsonFormatInstance2.protocol = protocolInstance2;
                      }
                      
                      var sourcePortRangeValue2 = propertiesValue3['sourcePortRange'];
                      if (sourcePortRangeValue2 !== null && sourcePortRangeValue2 !== undefined) {
                        var sourcePortRangeInstance2 = sourcePortRangeValue2;
                        securityRuleJsonFormatInstance2.sourcePortRange = sourcePortRangeInstance2;
                      }
                      
                      var destinationPortRangeValue2 = propertiesValue3['destinationPortRange'];
                      if (destinationPortRangeValue2 !== null && destinationPortRangeValue2 !== undefined) {
                        var destinationPortRangeInstance2 = destinationPortRangeValue2;
                        securityRuleJsonFormatInstance2.destinationPortRange = destinationPortRangeInstance2;
                      }
                      
                      var sourceAddressPrefixValue2 = propertiesValue3['sourceAddressPrefix'];
                      if (sourceAddressPrefixValue2 !== null && sourceAddressPrefixValue2 !== undefined) {
                        var sourceAddressPrefixInstance2 = sourceAddressPrefixValue2;
                        securityRuleJsonFormatInstance2.sourceAddressPrefix = sourceAddressPrefixInstance2;
                      }
                      
                      var destinationAddressPrefixValue2 = propertiesValue3['destinationAddressPrefix'];
                      if (destinationAddressPrefixValue2 !== null && destinationAddressPrefixValue2 !== undefined) {
                        var destinationAddressPrefixInstance2 = destinationAddressPrefixValue2;
                        securityRuleJsonFormatInstance2.destinationAddressPrefix = destinationAddressPrefixInstance2;
                      }
                      
                      var accessValue2 = propertiesValue3['access'];
                      if (accessValue2 !== null && accessValue2 !== undefined) {
                        var accessInstance2 = accessValue2;
                        securityRuleJsonFormatInstance2.access = accessInstance2;
                      }
                      
                      var priorityValue2 = propertiesValue3['priority'];
                      if (priorityValue2 !== null && priorityValue2 !== undefined) {
                        var priorityInstance2 = priorityValue2;
                        securityRuleJsonFormatInstance2.priority = priorityInstance2;
                      }
                      
                      var directionValue2 = propertiesValue3['direction'];
                      if (directionValue2 !== null && directionValue2 !== undefined) {
                        var directionInstance2 = directionValue2;
                        securityRuleJsonFormatInstance2.direction = directionInstance2;
                      }
                      
                      var provisioningStateValue2 = propertiesValue3['provisioningState'];
                      if (provisioningStateValue2 !== null && provisioningStateValue2 !== undefined) {
                        var provisioningStateInstance2 = provisioningStateValue2;
                        securityRuleJsonFormatInstance2.provisioningState = provisioningStateInstance2;
                      }
                    }
                    
                    var nameValue2 = defaultSecurityRulesValue['name'];
                    if (nameValue2 !== null && nameValue2 !== undefined) {
                      var nameInstance2 = nameValue2;
                      securityRuleJsonFormatInstance2.name = nameInstance2;
                    }
                    
                    var etagValue2 = defaultSecurityRulesValue['etag'];
                    if (etagValue2 !== null && etagValue2 !== undefined) {
                      var etagInstance2 = etagValue2;
                      securityRuleJsonFormatInstance2.etag = etagInstance2;
                    }
                    
                    var idValue2 = defaultSecurityRulesValue['id'];
                    if (idValue2 !== null && idValue2 !== undefined) {
                      var idInstance2 = idValue2;
                      securityRuleJsonFormatInstance2.id = idInstance2;
                    }
                  }
                }
                
                var networkInterfacesArray = propertiesValue['networkInterfaces'];
                if (networkInterfacesArray !== null && networkInterfacesArray !== undefined) {
                  for (var loweredIndex4 = 0; loweredIndex4 < networkInterfacesArray.length; loweredIndex4 = loweredIndex4 + 1) {
                    var networkInterfacesValue = networkInterfacesArray[loweredIndex4];
                    var resourceIdInstance = {};
                    networkSecurityGroupJsonFormatInstance.networkInterfaces.push(resourceIdInstance);
                    
                    var idValue3 = networkInterfacesValue['id'];
                    if (idValue3 !== null && idValue3 !== undefined) {
                      var idInstance3 = idValue3;
                      resourceIdInstance.id = idInstance3;
                    }
                  }
                }
                
                var subnetsArray = propertiesValue['subnets'];
                if (subnetsArray !== null && subnetsArray !== undefined) {
                  for (var loweredIndex5 = 0; loweredIndex5 < subnetsArray.length; loweredIndex5 = loweredIndex5 + 1) {
                    var subnetsValue = subnetsArray[loweredIndex5];
                    var resourceIdInstance2 = {};
                    networkSecurityGroupJsonFormatInstance.subnets.push(resourceIdInstance2);
                    
                    var idValue4 = subnetsValue['id'];
                    if (idValue4 !== null && idValue4 !== undefined) {
                      var idInstance4 = idValue4;
                      resourceIdInstance2.id = idInstance4;
                    }
                  }
                }
                
                var resourceGuidValue = propertiesValue['resourceGuid'];
                if (resourceGuidValue !== null && resourceGuidValue !== undefined) {
                  var resourceGuidInstance = resourceGuidValue;
                  networkSecurityGroupJsonFormatInstance.resourceGuid = resourceGuidInstance;
                }
                
                var provisioningStateValue3 = propertiesValue['provisioningState'];
                if (provisioningStateValue3 !== null && provisioningStateValue3 !== undefined) {
                  var provisioningStateInstance3 = provisioningStateValue3;
                  networkSecurityGroupJsonFormatInstance.provisioningState = provisioningStateInstance3;
                }
              }
              
              var etagValue3 = valueValue['etag'];
              if (etagValue3 !== null && etagValue3 !== undefined) {
                var etagInstance3 = etagValue3;
                networkSecurityGroupJsonFormatInstance.etag = etagInstance3;
              }
              
              var idValue5 = valueValue['id'];
              if (idValue5 !== null && idValue5 !== undefined) {
                var idInstance5 = idValue5;
                networkSecurityGroupJsonFormatInstance.id = idInstance5;
              }
              
              var nameValue3 = valueValue['name'];
              if (nameValue3 !== null && nameValue3 !== undefined) {
                var nameInstance3 = nameValue3;
                networkSecurityGroupJsonFormatInstance.name = nameInstance3;
              }
              
              var typeValue = valueValue['type'];
              if (typeValue !== null && typeValue !== undefined) {
                var typeInstance = typeValue;
                networkSecurityGroupJsonFormatInstance.type = typeInstance;
              }
              
              var locationValue = valueValue['location'];
              if (locationValue !== null && locationValue !== undefined) {
                var locationInstance = locationValue;
                networkSecurityGroupJsonFormatInstance.location = locationInstance;
              }
              
              var tagsSequenceElement = valueValue['tags'];
              if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
                for (var property in tagsSequenceElement) {
                  var tagsKey = property;
                  var tagsValue = tagsSequenceElement[property];
                  networkSecurityGroupJsonFormatInstance.tags[tagsKey] = tagsValue;
                }
              }
            }
          }
          
          var nextLinkValue = responseDoc['nextLink'];
          if (nextLinkValue !== null && nextLinkValue !== undefined) {
            var nextLinkInstance = nextLinkValue;
            result.nextLink = nextLinkInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  return NetworkSecurityGroupOperations;
})();

var PublicIpAddressOperations = ( /** @lends PublicIpAddressOperations */ function() {
  /**
   * @class
   * The Network Resource Provider API includes operations for managing the
   * PublicIPAddress for your subscription.
   * __NOTE__: An instance of this class is automatically created for an
   * instance of the [NetworkResourceProviderClient] {@link
   * NetworkResourceProviderClient~NetworkResourceProviderClient}.
   * See [publicIpAddresses] {@link
   * NetworkResourceProviderClient~NetworkResourceProviderClient#publicIpAddresses}.
   * Initializes a new instance of the PublicIpAddressOperations class.
   * @constructor
   * 
   * @param {NetworkResourceProviderClient} client Reference to the service
   * client.
   */
  function PublicIpAddressOperations(client) {
    this.client = client;
  }
  
  /**
   * The Put PublicIPAddress operation creates/updates a stable/dynamic
   * PublicIP address
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} publicIpAddressName The name of the publicIpAddress.
   * 
   * @param {PublicIpAddress} parameters Parameters supplied to the
   * create/update PublicIPAddress operation
   * 
   * @param {string} parameters.publicIpAllocationMethod Gets or sets PublicIP
   * allocation method (Static/Dynamic)
   * 
   * @param {ResourceId} [parameters.ipConfiguration] Gets a reference to the
   * network interface IP configurations using this public IP address
   * 
   * @param {string} [parameters.ipConfiguration.id] Id of the resource
   * 
   * @param {PublicIpAddressDnsSettings} [parameters.dnsSettings] Gets or sets
   * FQDN of the DNS record associated with the public IP address
   * 
   * @param {string} [parameters.dnsSettings.domainNameLabel] Gets or sets the
   * Domain name label.The concatenation of the domain name label and the
   * regionalized DNS zone make up the fully qualified domain name associated
   * with the public IP address. If a domain name label is specified, an A DNS
   * record is created for the public IP in the Microsoft Azure DNS system.
   * 
   * @param {string} [parameters.dnsSettings.fqdn] Gets the FQDN, Fully
   * qualified domain name of the A DNS record associated with the public IP.
   * This is the concatenation of the domainNameLabel and the regionalized DNS
   * zone.
   * 
   * @param {string} [parameters.dnsSettings.reverseFqdn] Gets or Sests the
   * Reverse FQDN. A user-visible, fully qualified domain name that resolves
   * to this public IP address. If the reverseFqdn is specified, then a PTR
   * DNS record is created pointing from the IP address in the in-addr.arpa
   * domain to the reverse FQDN.
   * 
   * @param {string} [parameters.ipAddress] Gets the assigned public IP address
   * 
   * @param {number} [parameters.idleTimeoutInMinutes] Gets or sets the
   * Idletimeout of the public IP address
   * 
   * @param {string} [parameters.provisioningState] Gets or sets Provisioning
   * state of the PublicIP resource Updating/Deleting/Failed
   * 
   * @param {string} [parameters.resourceGuid] Gets or sets resource guid
   * property of the PublicIP resource
   * 
   * @param {string} [parameters.etag] Gets a unique read-only string that
   * changes whenever the resource is updated
   * 
   * @param {string} [parameters.id] Gets or sets the ID of the resource.
   * 
   * @param {string} [parameters.name] Gets or sets the name of the resource.
   * 
   * @param {string} [parameters.type] Gets or sets the type of the resource.
   * 
   * @param {string} [parameters.location] Gets or sets the location of the
   * resource.
   * 
   * @param {object} [parameters.tags] Gets or sets the tags attached to the
   * resource.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  PublicIpAddressOperations.prototype.beginCreateOrUpdating = function(resourceGroupName, publicIpAddressName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (publicIpAddressName === null || publicIpAddressName === undefined) {
      return callback(new Error('publicIpAddressName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.publicIpAllocationMethod === null || parameters.publicIpAllocationMethod === undefined) {
      return callback(new Error('parameters.publicIpAllocationMethod cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Network';
    url2 = url2 + '/publicIPAddresses/';
    url2 = url2 + encodeURIComponent(publicIpAddressName);
    url2 = url2 + '/';
    var queryParameters = [];
    queryParameters.push('api-version=2015-05-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = null;
    
    var publicIpAddressJsonFormatValue = {};
    requestDoc = publicIpAddressJsonFormatValue;
    
    var propertiesValue = {};
    publicIpAddressJsonFormatValue['properties'] = propertiesValue;
    
    propertiesValue['publicIPAllocationMethod'] = parameters.publicIpAllocationMethod;
    
    if (parameters.ipConfiguration !== null && parameters.ipConfiguration !== undefined) {
      var ipConfigurationValue = {};
      propertiesValue['ipConfiguration'] = ipConfigurationValue;
      
      if (parameters.ipConfiguration.id !== null && parameters.ipConfiguration.id !== undefined) {
        ipConfigurationValue['id'] = parameters.ipConfiguration.id;
      }
    }
    
    if (parameters.dnsSettings !== null && parameters.dnsSettings !== undefined) {
      var dnsSettingsValue = {};
      propertiesValue['dnsSettings'] = dnsSettingsValue;
      
      if (parameters.dnsSettings.domainNameLabel !== null && parameters.dnsSettings.domainNameLabel !== undefined) {
        dnsSettingsValue['domainNameLabel'] = parameters.dnsSettings.domainNameLabel;
      }
      
      if (parameters.dnsSettings.fqdn !== null && parameters.dnsSettings.fqdn !== undefined) {
        dnsSettingsValue['fqdn'] = parameters.dnsSettings.fqdn;
      }
      
      if (parameters.dnsSettings.reverseFqdn !== null && parameters.dnsSettings.reverseFqdn !== undefined) {
        dnsSettingsValue['reverseFqdn'] = parameters.dnsSettings.reverseFqdn;
      }
    }
    
    if (parameters.ipAddress !== null && parameters.ipAddress !== undefined) {
      propertiesValue['ipAddress'] = parameters.ipAddress;
    }
    
    if (parameters.idleTimeoutInMinutes !== null && parameters.idleTimeoutInMinutes !== undefined) {
      propertiesValue['idleTimeoutInMinutes'] = parameters.idleTimeoutInMinutes;
    }
    
    if (parameters.resourceGuid !== null && parameters.resourceGuid !== undefined) {
      propertiesValue['resourceGuid'] = parameters.resourceGuid;
    }
    
    if (parameters.provisioningState !== null && parameters.provisioningState !== undefined) {
      propertiesValue['provisioningState'] = parameters.provisioningState;
    }
    
    if (parameters.etag !== null && parameters.etag !== undefined) {
      publicIpAddressJsonFormatValue['etag'] = parameters.etag;
    }
    
    if (parameters.id !== null && parameters.id !== undefined) {
      publicIpAddressJsonFormatValue['id'] = parameters.id;
    }
    
    if (parameters.name !== null && parameters.name !== undefined) {
      publicIpAddressJsonFormatValue['name'] = parameters.name;
    }
    
    if (parameters.type !== null && parameters.type !== undefined) {
      publicIpAddressJsonFormatValue['type'] = parameters.type;
    }
    
    if (parameters.location !== null && parameters.location !== undefined) {
      publicIpAddressJsonFormatValue['location'] = parameters.location;
    }
    
    if (parameters.tags !== null && parameters.tags !== undefined) {
      var tagsDictionary = {};
      for (var tagsKey in parameters.tags) {
        var tagsValue = parameters.tags[tagsKey];
        tagsDictionary[tagsKey] = tagsValue;
      }
      publicIpAddressJsonFormatValue['tags'] = tagsDictionary;
    }
    
    requestContent = JSON.stringify(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200 && statusCode !== 201) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200 || statusCode === 201) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var publicIpAddressInstance = { tags: {} };
          result.publicIpAddress = publicIpAddressInstance;
          
          var propertiesValue2 = responseDoc['properties'];
          if (propertiesValue2 !== null && propertiesValue2 !== undefined) {
            var publicIPAllocationMethodValue = propertiesValue2['publicIPAllocationMethod'];
            if (publicIPAllocationMethodValue !== null && publicIPAllocationMethodValue !== undefined) {
              var publicIPAllocationMethodInstance = publicIPAllocationMethodValue;
              publicIpAddressInstance.publicIpAllocationMethod = publicIPAllocationMethodInstance;
            }
            
            var ipConfigurationValue2 = propertiesValue2['ipConfiguration'];
            if (ipConfigurationValue2 !== null && ipConfigurationValue2 !== undefined) {
              var ipConfigurationInstance = {};
              publicIpAddressInstance.ipConfiguration = ipConfigurationInstance;
              
              var idValue = ipConfigurationValue2['id'];
              if (idValue !== null && idValue !== undefined) {
                var idInstance = idValue;
                ipConfigurationInstance.id = idInstance;
              }
            }
            
            var dnsSettingsValue2 = propertiesValue2['dnsSettings'];
            if (dnsSettingsValue2 !== null && dnsSettingsValue2 !== undefined) {
              var dnsSettingsInstance = {};
              publicIpAddressInstance.dnsSettings = dnsSettingsInstance;
              
              var domainNameLabelValue = dnsSettingsValue2['domainNameLabel'];
              if (domainNameLabelValue !== null && domainNameLabelValue !== undefined) {
                var domainNameLabelInstance = domainNameLabelValue;
                dnsSettingsInstance.domainNameLabel = domainNameLabelInstance;
              }
              
              var fqdnValue = dnsSettingsValue2['fqdn'];
              if (fqdnValue !== null && fqdnValue !== undefined) {
                var fqdnInstance = fqdnValue;
                dnsSettingsInstance.fqdn = fqdnInstance;
              }
              
              var reverseFqdnValue = dnsSettingsValue2['reverseFqdn'];
              if (reverseFqdnValue !== null && reverseFqdnValue !== undefined) {
                var reverseFqdnInstance = reverseFqdnValue;
                dnsSettingsInstance.reverseFqdn = reverseFqdnInstance;
              }
            }
            
            var ipAddressValue = propertiesValue2['ipAddress'];
            if (ipAddressValue !== null && ipAddressValue !== undefined) {
              var ipAddressInstance = ipAddressValue;
              publicIpAddressInstance.ipAddress = ipAddressInstance;
            }
            
            var idleTimeoutInMinutesValue = propertiesValue2['idleTimeoutInMinutes'];
            if (idleTimeoutInMinutesValue !== null && idleTimeoutInMinutesValue !== undefined) {
              var idleTimeoutInMinutesInstance = idleTimeoutInMinutesValue;
              publicIpAddressInstance.idleTimeoutInMinutes = idleTimeoutInMinutesInstance;
            }
            
            var resourceGuidValue = propertiesValue2['resourceGuid'];
            if (resourceGuidValue !== null && resourceGuidValue !== undefined) {
              var resourceGuidInstance = resourceGuidValue;
              publicIpAddressInstance.resourceGuid = resourceGuidInstance;
            }
            
            var provisioningStateValue = propertiesValue2['provisioningState'];
            if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
              var provisioningStateInstance = provisioningStateValue;
              publicIpAddressInstance.provisioningState = provisioningStateInstance;
            }
          }
          
          var etagValue = responseDoc['etag'];
          if (etagValue !== null && etagValue !== undefined) {
            var etagInstance = etagValue;
            publicIpAddressInstance.etag = etagInstance;
          }
          
          var idValue2 = responseDoc['id'];
          if (idValue2 !== null && idValue2 !== undefined) {
            var idInstance2 = idValue2;
            publicIpAddressInstance.id = idInstance2;
          }
          
          var nameValue = responseDoc['name'];
          if (nameValue !== null && nameValue !== undefined) {
            var nameInstance = nameValue;
            publicIpAddressInstance.name = nameInstance;
          }
          
          var typeValue = responseDoc['type'];
          if (typeValue !== null && typeValue !== undefined) {
            var typeInstance = typeValue;
            publicIpAddressInstance.type = typeInstance;
          }
          
          var locationValue = responseDoc['location'];
          if (locationValue !== null && locationValue !== undefined) {
            var locationInstance = locationValue;
            publicIpAddressInstance.location = locationInstance;
          }
          
          var tagsSequenceElement = responseDoc['tags'];
          if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
            for (var property in tagsSequenceElement) {
              var tagsKey2 = property;
              var tagsValue2 = tagsSequenceElement[property];
              publicIpAddressInstance.tags[tagsKey2] = tagsValue2;
            }
          }
          
          var errorValue = responseDoc['error'];
          if (errorValue !== null && errorValue !== undefined) {
            var errorInstance = { details: [] };
            result.error = errorInstance;
            
            var codeValue = errorValue['code'];
            if (codeValue !== null && codeValue !== undefined) {
              var codeInstance = codeValue;
              errorInstance.code = codeInstance;
            }
            
            var messageValue = errorValue['message'];
            if (messageValue !== null && messageValue !== undefined) {
              var messageInstance = messageValue;
              errorInstance.message = messageInstance;
            }
            
            var targetValue = errorValue['target'];
            if (targetValue !== null && targetValue !== undefined) {
              var targetInstance = targetValue;
              errorInstance.target = targetInstance;
            }
            
            var detailsArray = errorValue['details'];
            if (detailsArray !== null && detailsArray !== undefined) {
              for (var loweredIndex1 = 0; loweredIndex1 < detailsArray.length; loweredIndex1 = loweredIndex1 + 1) {
                var detailsValue = detailsArray[loweredIndex1];
                var errorDetailsInstance = {};
                errorInstance.details.push(errorDetailsInstance);
                
                var codeValue2 = detailsValue['code'];
                if (codeValue2 !== null && codeValue2 !== undefined) {
                  var codeInstance2 = codeValue2;
                  errorDetailsInstance.code = codeInstance2;
                }
                
                var targetValue2 = detailsValue['target'];
                if (targetValue2 !== null && targetValue2 !== undefined) {
                  var targetInstance2 = targetValue2;
                  errorDetailsInstance.target = targetInstance2;
                }
                
                var messageValue2 = detailsValue['message'];
                if (messageValue2 !== null && messageValue2 !== undefined) {
                  var messageInstance2 = messageValue2;
                  errorDetailsInstance.message = messageInstance2;
                }
              }
            }
            
            var innerErrorValue = errorValue['innerError'];
            if (innerErrorValue !== null && innerErrorValue !== undefined) {
              var innerErrorInstance = innerErrorValue;
              errorInstance.innerError = innerErrorInstance;
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      result.azureAsyncOperation = response.headers['azure-asyncoperation'];
      result.retryAfter = parseInt(response.headers['retry-after'], 10);
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The delete publicIpAddress operation deletes the specified publicIpAddress.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} publicIpAddressName The name of the subnet.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  PublicIpAddressOperations.prototype.beginDeleting = function(resourceGroupName, publicIpAddressName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (publicIpAddressName === null || publicIpAddressName === undefined) {
      return callback(new Error('publicIpAddressName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Network';
    url2 = url2 + '/publicIPAddresses/';
    url2 = url2 + encodeURIComponent(publicIpAddressName);
    url2 = url2 + '/';
    var queryParameters = [];
    queryParameters.push('api-version=2015-05-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'DELETE';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200 && statusCode !== 202 && statusCode !== 204) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      result = {};
      result.statusCode = statusCode;
      result.azureAsyncOperation = response.headers['azure-asyncoperation'];
      result.retryAfter = parseInt(response.headers['retry-after'], 10);
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The Put PublicIPAddress operation creates/updates a stable/dynamic
   * PublicIP address
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} publicIpAddressName The name of the publicIpAddress.
   * 
   * @param {PublicIpAddress} parameters Parameters supplied to the create
   * PublicIPAddress operation
   * 
   * @param {string} parameters.publicIpAllocationMethod Gets or sets PublicIP
   * allocation method (Static/Dynamic)
   * 
   * @param {ResourceId} [parameters.ipConfiguration] Gets a reference to the
   * network interface IP configurations using this public IP address
   * 
   * @param {string} [parameters.ipConfiguration.id] Id of the resource
   * 
   * @param {PublicIpAddressDnsSettings} [parameters.dnsSettings] Gets or sets
   * FQDN of the DNS record associated with the public IP address
   * 
   * @param {string} [parameters.dnsSettings.domainNameLabel] Gets or sets the
   * Domain name label.The concatenation of the domain name label and the
   * regionalized DNS zone make up the fully qualified domain name associated
   * with the public IP address. If a domain name label is specified, an A DNS
   * record is created for the public IP in the Microsoft Azure DNS system.
   * 
   * @param {string} [parameters.dnsSettings.fqdn] Gets the FQDN, Fully
   * qualified domain name of the A DNS record associated with the public IP.
   * This is the concatenation of the domainNameLabel and the regionalized DNS
   * zone.
   * 
   * @param {string} [parameters.dnsSettings.reverseFqdn] Gets or Sests the
   * Reverse FQDN. A user-visible, fully qualified domain name that resolves
   * to this public IP address. If the reverseFqdn is specified, then a PTR
   * DNS record is created pointing from the IP address in the in-addr.arpa
   * domain to the reverse FQDN.
   * 
   * @param {string} [parameters.ipAddress] Gets the assigned public IP address
   * 
   * @param {number} [parameters.idleTimeoutInMinutes] Gets or sets the
   * Idletimeout of the public IP address
   * 
   * @param {string} [parameters.provisioningState] Gets or sets Provisioning
   * state of the PublicIP resource Updating/Deleting/Failed
   * 
   * @param {string} [parameters.resourceGuid] Gets or sets resource guid
   * property of the PublicIP resource
   * 
   * @param {string} [parameters.etag] Gets a unique read-only string that
   * changes whenever the resource is updated
   * 
   * @param {string} [parameters.id] Gets or sets the ID of the resource.
   * 
   * @param {string} [parameters.name] Gets or sets the name of the resource.
   * 
   * @param {string} [parameters.type] Gets or sets the type of the resource.
   * 
   * @param {string} [parameters.location] Gets or sets the location of the
   * resource.
   * 
   * @param {object} [parameters.tags] Gets or sets the tags attached to the
   * resource.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  PublicIpAddressOperations.prototype.createOrUpdate = function(resourceGroupName, publicIpAddressName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.publicIpAddresses.beginCreateOrUpdating(resourceGroupName, publicIpAddressName, parameters, function (err, result) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var delayInSeconds = result.retryAfter;
      if (delayInSeconds === 0) {
        delayInSeconds = 30;
      }
      if (client2.longRunningOperationInitialTimeout >= 0) {
        delayInSeconds = client2.longRunningOperationInitialTimeout;
      }
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.getLongRunningOperationStatus(result.azureAsyncOperation, function (err2, result2) {
            if (err2 !== null && err2 !== undefined) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                return callback(null, result2);
              } else {
                delayInSeconds = result2.retryAfter;
                if (delayInSeconds === 0) {
                  delayInSeconds = 15;
                }
                if (client2.longRunningOperationRetryTimeout >= 0) {
                  delayInSeconds = client2.longRunningOperationRetryTimeout;
                }
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  /**
   * The Get Role operation retrieves information about the specified virtual
   * machine.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} publicIpAddressName The name of the subnet.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  PublicIpAddressOperations.prototype.deleteMethod = function(resourceGroupName, publicIpAddressName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.publicIpAddresses.beginDeleting(resourceGroupName, publicIpAddressName, function (err, result) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var delayInSeconds = result.retryAfter;
      if (delayInSeconds === 0) {
        delayInSeconds = 30;
      }
      if (client2.longRunningOperationInitialTimeout >= 0) {
        delayInSeconds = client2.longRunningOperationInitialTimeout;
      }
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.getLongRunningOperationStatus(result.azureAsyncOperation, function (err2, result2) {
            if (err2 !== null && err2 !== undefined) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                return callback(null, result2);
              } else {
                delayInSeconds = result2.retryAfter;
                if (delayInSeconds === 0) {
                  delayInSeconds = 15;
                }
                if (client2.longRunningOperationRetryTimeout >= 0) {
                  delayInSeconds = client2.longRunningOperationRetryTimeout;
                }
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  /**
   * The Get publicIpAddress operation retreives information about the
   * specified pubicIpAddress
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} publicIpAddressName The name of the subnet.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  PublicIpAddressOperations.prototype.get = function(resourceGroupName, publicIpAddressName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (publicIpAddressName === null || publicIpAddressName === undefined) {
      return callback(new Error('publicIpAddressName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Network';
    url2 = url2 + '/publicIPAddresses/';
    url2 = url2 + encodeURIComponent(publicIpAddressName);
    url2 = url2 + '/';
    var queryParameters = [];
    queryParameters.push('api-version=2015-05-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var publicIpAddressInstance = { tags: {} };
          result.publicIpAddress = publicIpAddressInstance;
          
          var propertiesValue = responseDoc['properties'];
          if (propertiesValue !== null && propertiesValue !== undefined) {
            var publicIPAllocationMethodValue = propertiesValue['publicIPAllocationMethod'];
            if (publicIPAllocationMethodValue !== null && publicIPAllocationMethodValue !== undefined) {
              var publicIPAllocationMethodInstance = publicIPAllocationMethodValue;
              publicIpAddressInstance.publicIpAllocationMethod = publicIPAllocationMethodInstance;
            }
            
            var ipConfigurationValue = propertiesValue['ipConfiguration'];
            if (ipConfigurationValue !== null && ipConfigurationValue !== undefined) {
              var ipConfigurationInstance = {};
              publicIpAddressInstance.ipConfiguration = ipConfigurationInstance;
              
              var idValue = ipConfigurationValue['id'];
              if (idValue !== null && idValue !== undefined) {
                var idInstance = idValue;
                ipConfigurationInstance.id = idInstance;
              }
            }
            
            var dnsSettingsValue = propertiesValue['dnsSettings'];
            if (dnsSettingsValue !== null && dnsSettingsValue !== undefined) {
              var dnsSettingsInstance = {};
              publicIpAddressInstance.dnsSettings = dnsSettingsInstance;
              
              var domainNameLabelValue = dnsSettingsValue['domainNameLabel'];
              if (domainNameLabelValue !== null && domainNameLabelValue !== undefined) {
                var domainNameLabelInstance = domainNameLabelValue;
                dnsSettingsInstance.domainNameLabel = domainNameLabelInstance;
              }
              
              var fqdnValue = dnsSettingsValue['fqdn'];
              if (fqdnValue !== null && fqdnValue !== undefined) {
                var fqdnInstance = fqdnValue;
                dnsSettingsInstance.fqdn = fqdnInstance;
              }
              
              var reverseFqdnValue = dnsSettingsValue['reverseFqdn'];
              if (reverseFqdnValue !== null && reverseFqdnValue !== undefined) {
                var reverseFqdnInstance = reverseFqdnValue;
                dnsSettingsInstance.reverseFqdn = reverseFqdnInstance;
              }
            }
            
            var ipAddressValue = propertiesValue['ipAddress'];
            if (ipAddressValue !== null && ipAddressValue !== undefined) {
              var ipAddressInstance = ipAddressValue;
              publicIpAddressInstance.ipAddress = ipAddressInstance;
            }
            
            var idleTimeoutInMinutesValue = propertiesValue['idleTimeoutInMinutes'];
            if (idleTimeoutInMinutesValue !== null && idleTimeoutInMinutesValue !== undefined) {
              var idleTimeoutInMinutesInstance = idleTimeoutInMinutesValue;
              publicIpAddressInstance.idleTimeoutInMinutes = idleTimeoutInMinutesInstance;
            }
            
            var resourceGuidValue = propertiesValue['resourceGuid'];
            if (resourceGuidValue !== null && resourceGuidValue !== undefined) {
              var resourceGuidInstance = resourceGuidValue;
              publicIpAddressInstance.resourceGuid = resourceGuidInstance;
            }
            
            var provisioningStateValue = propertiesValue['provisioningState'];
            if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
              var provisioningStateInstance = provisioningStateValue;
              publicIpAddressInstance.provisioningState = provisioningStateInstance;
            }
          }
          
          var etagValue = responseDoc['etag'];
          if (etagValue !== null && etagValue !== undefined) {
            var etagInstance = etagValue;
            publicIpAddressInstance.etag = etagInstance;
          }
          
          var idValue2 = responseDoc['id'];
          if (idValue2 !== null && idValue2 !== undefined) {
            var idInstance2 = idValue2;
            publicIpAddressInstance.id = idInstance2;
          }
          
          var nameValue = responseDoc['name'];
          if (nameValue !== null && nameValue !== undefined) {
            var nameInstance = nameValue;
            publicIpAddressInstance.name = nameInstance;
          }
          
          var typeValue = responseDoc['type'];
          if (typeValue !== null && typeValue !== undefined) {
            var typeInstance = typeValue;
            publicIpAddressInstance.type = typeInstance;
          }
          
          var locationValue = responseDoc['location'];
          if (locationValue !== null && locationValue !== undefined) {
            var locationInstance = locationValue;
            publicIpAddressInstance.location = locationInstance;
          }
          
          var tagsSequenceElement = responseDoc['tags'];
          if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
            for (var property in tagsSequenceElement) {
              var tagsKey = property;
              var tagsValue = tagsSequenceElement[property];
              publicIpAddressInstance.tags[tagsKey] = tagsValue;
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The List publicIpAddress opertion retrieves all the publicIpAddresses in a
   * resource group.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  PublicIpAddressOperations.prototype.list = function(resourceGroupName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Network';
    url2 = url2 + '/publicIPAddresses';
    var queryParameters = [];
    queryParameters.push('api-version=2015-05-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = { publicIpAddresses: [] };
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var valueArray = responseDoc['value'];
          if (valueArray !== null && valueArray !== undefined) {
            for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var valueValue = valueArray[loweredIndex1];
              var publicIpAddressJsonFormatInstance = { tags: {} };
              result.publicIpAddresses.push(publicIpAddressJsonFormatInstance);
              
              var propertiesValue = valueValue['properties'];
              if (propertiesValue !== null && propertiesValue !== undefined) {
                var publicIPAllocationMethodValue = propertiesValue['publicIPAllocationMethod'];
                if (publicIPAllocationMethodValue !== null && publicIPAllocationMethodValue !== undefined) {
                  var publicIPAllocationMethodInstance = publicIPAllocationMethodValue;
                  publicIpAddressJsonFormatInstance.publicIpAllocationMethod = publicIPAllocationMethodInstance;
                }
                
                var ipConfigurationValue = propertiesValue['ipConfiguration'];
                if (ipConfigurationValue !== null && ipConfigurationValue !== undefined) {
                  var ipConfigurationInstance = {};
                  publicIpAddressJsonFormatInstance.ipConfiguration = ipConfigurationInstance;
                  
                  var idValue = ipConfigurationValue['id'];
                  if (idValue !== null && idValue !== undefined) {
                    var idInstance = idValue;
                    ipConfigurationInstance.id = idInstance;
                  }
                }
                
                var dnsSettingsValue = propertiesValue['dnsSettings'];
                if (dnsSettingsValue !== null && dnsSettingsValue !== undefined) {
                  var dnsSettingsInstance = {};
                  publicIpAddressJsonFormatInstance.dnsSettings = dnsSettingsInstance;
                  
                  var domainNameLabelValue = dnsSettingsValue['domainNameLabel'];
                  if (domainNameLabelValue !== null && domainNameLabelValue !== undefined) {
                    var domainNameLabelInstance = domainNameLabelValue;
                    dnsSettingsInstance.domainNameLabel = domainNameLabelInstance;
                  }
                  
                  var fqdnValue = dnsSettingsValue['fqdn'];
                  if (fqdnValue !== null && fqdnValue !== undefined) {
                    var fqdnInstance = fqdnValue;
                    dnsSettingsInstance.fqdn = fqdnInstance;
                  }
                  
                  var reverseFqdnValue = dnsSettingsValue['reverseFqdn'];
                  if (reverseFqdnValue !== null && reverseFqdnValue !== undefined) {
                    var reverseFqdnInstance = reverseFqdnValue;
                    dnsSettingsInstance.reverseFqdn = reverseFqdnInstance;
                  }
                }
                
                var ipAddressValue = propertiesValue['ipAddress'];
                if (ipAddressValue !== null && ipAddressValue !== undefined) {
                  var ipAddressInstance = ipAddressValue;
                  publicIpAddressJsonFormatInstance.ipAddress = ipAddressInstance;
                }
                
                var idleTimeoutInMinutesValue = propertiesValue['idleTimeoutInMinutes'];
                if (idleTimeoutInMinutesValue !== null && idleTimeoutInMinutesValue !== undefined) {
                  var idleTimeoutInMinutesInstance = idleTimeoutInMinutesValue;
                  publicIpAddressJsonFormatInstance.idleTimeoutInMinutes = idleTimeoutInMinutesInstance;
                }
                
                var resourceGuidValue = propertiesValue['resourceGuid'];
                if (resourceGuidValue !== null && resourceGuidValue !== undefined) {
                  var resourceGuidInstance = resourceGuidValue;
                  publicIpAddressJsonFormatInstance.resourceGuid = resourceGuidInstance;
                }
                
                var provisioningStateValue = propertiesValue['provisioningState'];
                if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
                  var provisioningStateInstance = provisioningStateValue;
                  publicIpAddressJsonFormatInstance.provisioningState = provisioningStateInstance;
                }
              }
              
              var etagValue = valueValue['etag'];
              if (etagValue !== null && etagValue !== undefined) {
                var etagInstance = etagValue;
                publicIpAddressJsonFormatInstance.etag = etagInstance;
              }
              
              var idValue2 = valueValue['id'];
              if (idValue2 !== null && idValue2 !== undefined) {
                var idInstance2 = idValue2;
                publicIpAddressJsonFormatInstance.id = idInstance2;
              }
              
              var nameValue = valueValue['name'];
              if (nameValue !== null && nameValue !== undefined) {
                var nameInstance = nameValue;
                publicIpAddressJsonFormatInstance.name = nameInstance;
              }
              
              var typeValue = valueValue['type'];
              if (typeValue !== null && typeValue !== undefined) {
                var typeInstance = typeValue;
                publicIpAddressJsonFormatInstance.type = typeInstance;
              }
              
              var locationValue = valueValue['location'];
              if (locationValue !== null && locationValue !== undefined) {
                var locationInstance = locationValue;
                publicIpAddressJsonFormatInstance.location = locationInstance;
              }
              
              var tagsSequenceElement = valueValue['tags'];
              if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
                for (var property in tagsSequenceElement) {
                  var tagsKey = property;
                  var tagsValue = tagsSequenceElement[property];
                  publicIpAddressJsonFormatInstance.tags[tagsKey] = tagsValue;
                }
              }
            }
          }
          
          var nextLinkValue = responseDoc['nextLink'];
          if (nextLinkValue !== null && nextLinkValue !== undefined) {
            var nextLinkInstance = nextLinkValue;
            result.nextLink = nextLinkInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The List publicIpAddress opertion retrieves all the publicIpAddresses in a
   * subscription.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  PublicIpAddressOperations.prototype.listAll = function(callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Network';
    url2 = url2 + '/publicIPAddresses';
    var queryParameters = [];
    queryParameters.push('api-version=2015-05-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = { publicIpAddresses: [] };
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var valueArray = responseDoc['value'];
          if (valueArray !== null && valueArray !== undefined) {
            for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var valueValue = valueArray[loweredIndex1];
              var publicIpAddressJsonFormatInstance = { tags: {} };
              result.publicIpAddresses.push(publicIpAddressJsonFormatInstance);
              
              var propertiesValue = valueValue['properties'];
              if (propertiesValue !== null && propertiesValue !== undefined) {
                var publicIPAllocationMethodValue = propertiesValue['publicIPAllocationMethod'];
                if (publicIPAllocationMethodValue !== null && publicIPAllocationMethodValue !== undefined) {
                  var publicIPAllocationMethodInstance = publicIPAllocationMethodValue;
                  publicIpAddressJsonFormatInstance.publicIpAllocationMethod = publicIPAllocationMethodInstance;
                }
                
                var ipConfigurationValue = propertiesValue['ipConfiguration'];
                if (ipConfigurationValue !== null && ipConfigurationValue !== undefined) {
                  var ipConfigurationInstance = {};
                  publicIpAddressJsonFormatInstance.ipConfiguration = ipConfigurationInstance;
                  
                  var idValue = ipConfigurationValue['id'];
                  if (idValue !== null && idValue !== undefined) {
                    var idInstance = idValue;
                    ipConfigurationInstance.id = idInstance;
                  }
                }
                
                var dnsSettingsValue = propertiesValue['dnsSettings'];
                if (dnsSettingsValue !== null && dnsSettingsValue !== undefined) {
                  var dnsSettingsInstance = {};
                  publicIpAddressJsonFormatInstance.dnsSettings = dnsSettingsInstance;
                  
                  var domainNameLabelValue = dnsSettingsValue['domainNameLabel'];
                  if (domainNameLabelValue !== null && domainNameLabelValue !== undefined) {
                    var domainNameLabelInstance = domainNameLabelValue;
                    dnsSettingsInstance.domainNameLabel = domainNameLabelInstance;
                  }
                  
                  var fqdnValue = dnsSettingsValue['fqdn'];
                  if (fqdnValue !== null && fqdnValue !== undefined) {
                    var fqdnInstance = fqdnValue;
                    dnsSettingsInstance.fqdn = fqdnInstance;
                  }
                  
                  var reverseFqdnValue = dnsSettingsValue['reverseFqdn'];
                  if (reverseFqdnValue !== null && reverseFqdnValue !== undefined) {
                    var reverseFqdnInstance = reverseFqdnValue;
                    dnsSettingsInstance.reverseFqdn = reverseFqdnInstance;
                  }
                }
                
                var ipAddressValue = propertiesValue['ipAddress'];
                if (ipAddressValue !== null && ipAddressValue !== undefined) {
                  var ipAddressInstance = ipAddressValue;
                  publicIpAddressJsonFormatInstance.ipAddress = ipAddressInstance;
                }
                
                var idleTimeoutInMinutesValue = propertiesValue['idleTimeoutInMinutes'];
                if (idleTimeoutInMinutesValue !== null && idleTimeoutInMinutesValue !== undefined) {
                  var idleTimeoutInMinutesInstance = idleTimeoutInMinutesValue;
                  publicIpAddressJsonFormatInstance.idleTimeoutInMinutes = idleTimeoutInMinutesInstance;
                }
                
                var resourceGuidValue = propertiesValue['resourceGuid'];
                if (resourceGuidValue !== null && resourceGuidValue !== undefined) {
                  var resourceGuidInstance = resourceGuidValue;
                  publicIpAddressJsonFormatInstance.resourceGuid = resourceGuidInstance;
                }
                
                var provisioningStateValue = propertiesValue['provisioningState'];
                if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
                  var provisioningStateInstance = provisioningStateValue;
                  publicIpAddressJsonFormatInstance.provisioningState = provisioningStateInstance;
                }
              }
              
              var etagValue = valueValue['etag'];
              if (etagValue !== null && etagValue !== undefined) {
                var etagInstance = etagValue;
                publicIpAddressJsonFormatInstance.etag = etagInstance;
              }
              
              var idValue2 = valueValue['id'];
              if (idValue2 !== null && idValue2 !== undefined) {
                var idInstance2 = idValue2;
                publicIpAddressJsonFormatInstance.id = idInstance2;
              }
              
              var nameValue = valueValue['name'];
              if (nameValue !== null && nameValue !== undefined) {
                var nameInstance = nameValue;
                publicIpAddressJsonFormatInstance.name = nameInstance;
              }
              
              var typeValue = valueValue['type'];
              if (typeValue !== null && typeValue !== undefined) {
                var typeInstance = typeValue;
                publicIpAddressJsonFormatInstance.type = typeInstance;
              }
              
              var locationValue = valueValue['location'];
              if (locationValue !== null && locationValue !== undefined) {
                var locationInstance = locationValue;
                publicIpAddressJsonFormatInstance.location = locationInstance;
              }
              
              var tagsSequenceElement = valueValue['tags'];
              if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
                for (var property in tagsSequenceElement) {
                  var tagsKey = property;
                  var tagsValue = tagsSequenceElement[property];
                  publicIpAddressJsonFormatInstance.tags[tagsKey] = tagsValue;
                }
              }
            }
          }
          
          var nextLinkValue = responseDoc['nextLink'];
          if (nextLinkValue !== null && nextLinkValue !== undefined) {
            var nextLinkInstance = nextLinkValue;
            result.nextLink = nextLinkInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  return PublicIpAddressOperations;
})();

var RouteOperations = ( /** @lends RouteOperations */ function() {
  /**
   * @class
   * The Network Resource Provider API includes operations for managing the
   * Routes for your subscription.
   * __NOTE__: An instance of this class is automatically created for an
   * instance of the [NetworkResourceProviderClient] {@link
   * NetworkResourceProviderClient~NetworkResourceProviderClient}.
   * See [routes] {@link
   * NetworkResourceProviderClient~NetworkResourceProviderClient#routes}.
   * Initializes a new instance of the RouteOperations class.
   * @constructor
   * 
   * @param {NetworkResourceProviderClient} client Reference to the service
   * client.
   */
  function RouteOperations(client) {
    this.client = client;
  }
  
  /**
   * The Put route operation creates/updates a route in the specified route
   * table
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} routeTableName The name of the route table.
   * 
   * @param {string} routeName The name of the route.
   * 
   * @param {Route} routeParameters Parameters supplied to the create/update
   * routeoperation
   * 
   * @param {string} [routeParameters.addressPrefix] Gets or sets the
   * destination CIDR to which the route applies.
   * 
   * @param {string} routeParameters.nextHopType Gets or sets the type of Azure
   * hop the packet should be sent to.
   * 
   * @param {string} [routeParameters.nextHopIpAddress] Gets or sets the IP
   * address packets should be forwarded to. Next hop values are only allowed
   * in routes where the next hop type is VirtualAppliance.
   * 
   * @param {string} [routeParameters.provisioningState] Gets or sets
   * Provisioning state of the resource Updating/Deleting/Failed
   * 
   * @param {string} [routeParameters.name] Gets name of the resource that is
   * unique within a resource group. This name can be used to access the
   * resource
   * 
   * @param {string} [routeParameters.etag] A unique read-only string that
   * changes whenever the resource is updated
   * 
   * @param {string} [routeParameters.id] Id of the resource
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  RouteOperations.prototype.beginCreateOrUpdating = function(resourceGroupName, routeTableName, routeName, routeParameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (routeTableName === null || routeTableName === undefined) {
      return callback(new Error('routeTableName cannot be null.'));
    }
    if (routeName === null || routeName === undefined) {
      return callback(new Error('routeName cannot be null.'));
    }
    if (routeParameters === null || routeParameters === undefined) {
      return callback(new Error('routeParameters cannot be null.'));
    }
    if (routeParameters.nextHopType === null || routeParameters.nextHopType === undefined) {
      return callback(new Error('routeParameters.nextHopType cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Network';
    url2 = url2 + '/routeTables/';
    url2 = url2 + encodeURIComponent(routeTableName);
    url2 = url2 + '/routes/';
    url2 = url2 + encodeURIComponent(routeName);
    var queryParameters = [];
    queryParameters.push('api-version=2015-05-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = null;
    
    var routeJsonFormatValue = {};
    requestDoc = routeJsonFormatValue;
    
    var propertiesValue = {};
    routeJsonFormatValue['properties'] = propertiesValue;
    
    if (routeParameters.addressPrefix !== null && routeParameters.addressPrefix !== undefined) {
      propertiesValue['addressPrefix'] = routeParameters.addressPrefix;
    }
    
    propertiesValue['nextHopType'] = routeParameters.nextHopType;
    
    if (routeParameters.nextHopIpAddress !== null && routeParameters.nextHopIpAddress !== undefined) {
      propertiesValue['nextHopIpAddress'] = routeParameters.nextHopIpAddress;
    }
    
    if (routeParameters.provisioningState !== null && routeParameters.provisioningState !== undefined) {
      propertiesValue['provisioningState'] = routeParameters.provisioningState;
    }
    
    if (routeParameters.name !== null && routeParameters.name !== undefined) {
      routeJsonFormatValue['name'] = routeParameters.name;
    }
    
    if (routeParameters.etag !== null && routeParameters.etag !== undefined) {
      routeJsonFormatValue['etag'] = routeParameters.etag;
    }
    
    if (routeParameters.id !== null && routeParameters.id !== undefined) {
      routeJsonFormatValue['id'] = routeParameters.id;
    }
    
    requestContent = JSON.stringify(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200 && statusCode !== 201) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200 || statusCode === 201) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var routeInstance = {};
          result.route = routeInstance;
          
          var propertiesValue2 = responseDoc['properties'];
          if (propertiesValue2 !== null && propertiesValue2 !== undefined) {
            var addressPrefixValue = propertiesValue2['addressPrefix'];
            if (addressPrefixValue !== null && addressPrefixValue !== undefined) {
              var addressPrefixInstance = addressPrefixValue;
              routeInstance.addressPrefix = addressPrefixInstance;
            }
            
            var nextHopTypeValue = propertiesValue2['nextHopType'];
            if (nextHopTypeValue !== null && nextHopTypeValue !== undefined) {
              var nextHopTypeInstance = nextHopTypeValue;
              routeInstance.nextHopType = nextHopTypeInstance;
            }
            
            var nextHopIpAddressValue = propertiesValue2['nextHopIpAddress'];
            if (nextHopIpAddressValue !== null && nextHopIpAddressValue !== undefined) {
              var nextHopIpAddressInstance = nextHopIpAddressValue;
              routeInstance.nextHopIpAddress = nextHopIpAddressInstance;
            }
            
            var provisioningStateValue = propertiesValue2['provisioningState'];
            if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
              var provisioningStateInstance = provisioningStateValue;
              routeInstance.provisioningState = provisioningStateInstance;
            }
          }
          
          var nameValue = responseDoc['name'];
          if (nameValue !== null && nameValue !== undefined) {
            var nameInstance = nameValue;
            routeInstance.name = nameInstance;
          }
          
          var etagValue = responseDoc['etag'];
          if (etagValue !== null && etagValue !== undefined) {
            var etagInstance = etagValue;
            routeInstance.etag = etagInstance;
          }
          
          var idValue = responseDoc['id'];
          if (idValue !== null && idValue !== undefined) {
            var idInstance = idValue;
            routeInstance.id = idInstance;
          }
          
          var errorValue = responseDoc['error'];
          if (errorValue !== null && errorValue !== undefined) {
            var errorInstance = { details: [] };
            result.error = errorInstance;
            
            var codeValue = errorValue['code'];
            if (codeValue !== null && codeValue !== undefined) {
              var codeInstance = codeValue;
              errorInstance.code = codeInstance;
            }
            
            var messageValue = errorValue['message'];
            if (messageValue !== null && messageValue !== undefined) {
              var messageInstance = messageValue;
              errorInstance.message = messageInstance;
            }
            
            var targetValue = errorValue['target'];
            if (targetValue !== null && targetValue !== undefined) {
              var targetInstance = targetValue;
              errorInstance.target = targetInstance;
            }
            
            var detailsArray = errorValue['details'];
            if (detailsArray !== null && detailsArray !== undefined) {
              for (var loweredIndex1 = 0; loweredIndex1 < detailsArray.length; loweredIndex1 = loweredIndex1 + 1) {
                var detailsValue = detailsArray[loweredIndex1];
                var errorDetailsInstance = {};
                errorInstance.details.push(errorDetailsInstance);
                
                var codeValue2 = detailsValue['code'];
                if (codeValue2 !== null && codeValue2 !== undefined) {
                  var codeInstance2 = codeValue2;
                  errorDetailsInstance.code = codeInstance2;
                }
                
                var targetValue2 = detailsValue['target'];
                if (targetValue2 !== null && targetValue2 !== undefined) {
                  var targetInstance2 = targetValue2;
                  errorDetailsInstance.target = targetInstance2;
                }
                
                var messageValue2 = detailsValue['message'];
                if (messageValue2 !== null && messageValue2 !== undefined) {
                  var messageInstance2 = messageValue2;
                  errorDetailsInstance.message = messageInstance2;
                }
              }
            }
            
            var innerErrorValue = errorValue['innerError'];
            if (innerErrorValue !== null && innerErrorValue !== undefined) {
              var innerErrorInstance = innerErrorValue;
              errorInstance.innerError = innerErrorInstance;
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      result.azureAsyncOperation = response.headers['azure-asyncoperation'];
      result.retryAfter = parseInt(response.headers['retry-after'], 10);
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The delete route operation deletes the specified route from a route table.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} routeTableName The name of the route table.
   * 
   * @param {string} routeName The name of the route.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  RouteOperations.prototype.beginDeleting = function(resourceGroupName, routeTableName, routeName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (routeTableName === null || routeTableName === undefined) {
      return callback(new Error('routeTableName cannot be null.'));
    }
    if (routeName === null || routeName === undefined) {
      return callback(new Error('routeName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Network';
    url2 = url2 + '/routeTables/';
    url2 = url2 + encodeURIComponent(routeTableName);
    url2 = url2 + '/routes/';
    url2 = url2 + encodeURIComponent(routeName);
    var queryParameters = [];
    queryParameters.push('api-version=2015-05-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'DELETE';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200 && statusCode !== 202 && statusCode !== 204) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      result = {};
      result.statusCode = statusCode;
      result.azureAsyncOperation = response.headers['azure-asyncoperation'];
      result.retryAfter = parseInt(response.headers['retry-after'], 10);
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The Put route operation creates/updates a route in the specified route
   * table
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} routeTableName The name of the route table.
   * 
   * @param {string} routeName The name of the route.
   * 
   * @param {Route} routeParameters Parameters supplied to the create/update
   * route operation
   * 
   * @param {string} [routeParameters.addressPrefix] Gets or sets the
   * destination CIDR to which the route applies.
   * 
   * @param {string} routeParameters.nextHopType Gets or sets the type of Azure
   * hop the packet should be sent to.
   * 
   * @param {string} [routeParameters.nextHopIpAddress] Gets or sets the IP
   * address packets should be forwarded to. Next hop values are only allowed
   * in routes where the next hop type is VirtualAppliance.
   * 
   * @param {string} [routeParameters.provisioningState] Gets or sets
   * Provisioning state of the resource Updating/Deleting/Failed
   * 
   * @param {string} [routeParameters.name] Gets name of the resource that is
   * unique within a resource group. This name can be used to access the
   * resource
   * 
   * @param {string} [routeParameters.etag] A unique read-only string that
   * changes whenever the resource is updated
   * 
   * @param {string} [routeParameters.id] Id of the resource
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  RouteOperations.prototype.createOrUpdate = function(resourceGroupName, routeTableName, routeName, routeParameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.routes.beginCreateOrUpdating(resourceGroupName, routeTableName, routeName, routeParameters, function (err, result) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var delayInSeconds = result.retryAfter;
      if (delayInSeconds === 0) {
        delayInSeconds = 30;
      }
      if (client2.longRunningOperationInitialTimeout >= 0) {
        delayInSeconds = client2.longRunningOperationInitialTimeout;
      }
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.getLongRunningOperationStatus(result.azureAsyncOperation, function (err2, result2) {
            if (err2 !== null && err2 !== undefined) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                return callback(null, result2);
              } else {
                delayInSeconds = result2.retryAfter;
                if (delayInSeconds === 0) {
                  delayInSeconds = 15;
                }
                if (client2.longRunningOperationRetryTimeout >= 0) {
                  delayInSeconds = client2.longRunningOperationRetryTimeout;
                }
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  /**
   * The delete route operation deletes the specified route from a route table.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} routeTableName The name of the route table.
   * 
   * @param {string} routeName The name of the route.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  RouteOperations.prototype.deleteMethod = function(resourceGroupName, routeTableName, routeName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.routes.beginDeleting(resourceGroupName, routeTableName, routeName, function (err, result) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var delayInSeconds = result.retryAfter;
      if (delayInSeconds === 0) {
        delayInSeconds = 30;
      }
      if (client2.longRunningOperationInitialTimeout >= 0) {
        delayInSeconds = client2.longRunningOperationInitialTimeout;
      }
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.getLongRunningOperationStatus(result.azureAsyncOperation, function (err2, result2) {
            if (err2 !== null && err2 !== undefined) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                return callback(null, result2);
              } else {
                delayInSeconds = result2.retryAfter;
                if (delayInSeconds === 0) {
                  delayInSeconds = 15;
                }
                if (client2.longRunningOperationRetryTimeout >= 0) {
                  delayInSeconds = client2.longRunningOperationRetryTimeout;
                }
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  /**
   * The Get route operation retreives information about the specified route
   * from the route table.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} routeTableName The name of the route table.
   * 
   * @param {string} routeName The name of the route.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  RouteOperations.prototype.get = function(resourceGroupName, routeTableName, routeName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (routeTableName === null || routeTableName === undefined) {
      return callback(new Error('routeTableName cannot be null.'));
    }
    if (routeName === null || routeName === undefined) {
      return callback(new Error('routeName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Network';
    url2 = url2 + '/routeTables/';
    url2 = url2 + encodeURIComponent(routeTableName);
    url2 = url2 + '/routes/';
    url2 = url2 + encodeURIComponent(routeName);
    var queryParameters = [];
    queryParameters.push('api-version=2015-05-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var routeInstance = {};
          result.route = routeInstance;
          
          var propertiesValue = responseDoc['properties'];
          if (propertiesValue !== null && propertiesValue !== undefined) {
            var addressPrefixValue = propertiesValue['addressPrefix'];
            if (addressPrefixValue !== null && addressPrefixValue !== undefined) {
              var addressPrefixInstance = addressPrefixValue;
              routeInstance.addressPrefix = addressPrefixInstance;
            }
            
            var nextHopTypeValue = propertiesValue['nextHopType'];
            if (nextHopTypeValue !== null && nextHopTypeValue !== undefined) {
              var nextHopTypeInstance = nextHopTypeValue;
              routeInstance.nextHopType = nextHopTypeInstance;
            }
            
            var nextHopIpAddressValue = propertiesValue['nextHopIpAddress'];
            if (nextHopIpAddressValue !== null && nextHopIpAddressValue !== undefined) {
              var nextHopIpAddressInstance = nextHopIpAddressValue;
              routeInstance.nextHopIpAddress = nextHopIpAddressInstance;
            }
            
            var provisioningStateValue = propertiesValue['provisioningState'];
            if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
              var provisioningStateInstance = provisioningStateValue;
              routeInstance.provisioningState = provisioningStateInstance;
            }
          }
          
          var nameValue = responseDoc['name'];
          if (nameValue !== null && nameValue !== undefined) {
            var nameInstance = nameValue;
            routeInstance.name = nameInstance;
          }
          
          var etagValue = responseDoc['etag'];
          if (etagValue !== null && etagValue !== undefined) {
            var etagInstance = etagValue;
            routeInstance.etag = etagInstance;
          }
          
          var idValue = responseDoc['id'];
          if (idValue !== null && idValue !== undefined) {
            var idInstance = idValue;
            routeInstance.id = idInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The List network security rule opertion retrieves all the routes in a
   * route table.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} routeTableName The name of the route table.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  RouteOperations.prototype.list = function(resourceGroupName, routeTableName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (routeTableName === null || routeTableName === undefined) {
      return callback(new Error('routeTableName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Network';
    url2 = url2 + '/routeTables/';
    url2 = url2 + encodeURIComponent(routeTableName);
    url2 = url2 + '/routes';
    var queryParameters = [];
    queryParameters.push('api-version=2015-05-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = { routes: [] };
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var valueArray = responseDoc['value'];
          if (valueArray !== null && valueArray !== undefined) {
            for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var valueValue = valueArray[loweredIndex1];
              var routeJsonFormatInstance = {};
              result.routes.push(routeJsonFormatInstance);
              
              var propertiesValue = valueValue['properties'];
              if (propertiesValue !== null && propertiesValue !== undefined) {
                var addressPrefixValue = propertiesValue['addressPrefix'];
                if (addressPrefixValue !== null && addressPrefixValue !== undefined) {
                  var addressPrefixInstance = addressPrefixValue;
                  routeJsonFormatInstance.addressPrefix = addressPrefixInstance;
                }
                
                var nextHopTypeValue = propertiesValue['nextHopType'];
                if (nextHopTypeValue !== null && nextHopTypeValue !== undefined) {
                  var nextHopTypeInstance = nextHopTypeValue;
                  routeJsonFormatInstance.nextHopType = nextHopTypeInstance;
                }
                
                var nextHopIpAddressValue = propertiesValue['nextHopIpAddress'];
                if (nextHopIpAddressValue !== null && nextHopIpAddressValue !== undefined) {
                  var nextHopIpAddressInstance = nextHopIpAddressValue;
                  routeJsonFormatInstance.nextHopIpAddress = nextHopIpAddressInstance;
                }
                
                var provisioningStateValue = propertiesValue['provisioningState'];
                if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
                  var provisioningStateInstance = provisioningStateValue;
                  routeJsonFormatInstance.provisioningState = provisioningStateInstance;
                }
              }
              
              var nameValue = valueValue['name'];
              if (nameValue !== null && nameValue !== undefined) {
                var nameInstance = nameValue;
                routeJsonFormatInstance.name = nameInstance;
              }
              
              var etagValue = valueValue['etag'];
              if (etagValue !== null && etagValue !== undefined) {
                var etagInstance = etagValue;
                routeJsonFormatInstance.etag = etagInstance;
              }
              
              var idValue = valueValue['id'];
              if (idValue !== null && idValue !== undefined) {
                var idInstance = idValue;
                routeJsonFormatInstance.id = idInstance;
              }
            }
          }
          
          var nextLinkValue = responseDoc['nextLink'];
          if (nextLinkValue !== null && nextLinkValue !== undefined) {
            var nextLinkInstance = nextLinkValue;
            result.nextLink = nextLinkInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  return RouteOperations;
})();

var RouteTableOperations = ( /** @lends RouteTableOperations */ function() {
  /**
   * @class
   * The Network Resource Provider API includes operations for managing the
   * RouteTables for your subscription.
   * __NOTE__: An instance of this class is automatically created for an
   * instance of the [NetworkResourceProviderClient] {@link
   * NetworkResourceProviderClient~NetworkResourceProviderClient}.
   * See [routeTables] {@link
   * NetworkResourceProviderClient~NetworkResourceProviderClient#routeTables}.
   * Initializes a new instance of the RouteTableOperations class.
   * @constructor
   * 
   * @param {NetworkResourceProviderClient} client Reference to the service
   * client.
   */
  function RouteTableOperations(client) {
    this.client = client;
  }
  
  /**
   * The Put RouteTable operation creates/updates a route tablein the specified
   * resource group.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} routeTableName The name of the route table.
   * 
   * @param {RouteTable} parameters Parameters supplied to the create/update
   * Route Table operation
   * 
   * @param {IEnumerable} [parameters.routes] Gets or sets Routes in a Route
   * Table
   * 
   * @param {IEnumerable} [parameters.subnets] Gets collection of references to
   * subnets
   * 
   * @param {string} [parameters.provisioningState] Gets or sets Provisioning
   * state of the resource Updating/Deleting/Failed
   * 
   * @param {string} [parameters.etag] Gets a unique read-only string that
   * changes whenever the resource is updated
   * 
   * @param {string} [parameters.id] Gets or sets the ID of the resource.
   * 
   * @param {string} [parameters.name] Gets or sets the name of the resource.
   * 
   * @param {string} [parameters.type] Gets or sets the type of the resource.
   * 
   * @param {string} [parameters.location] Gets or sets the location of the
   * resource.
   * 
   * @param {object} [parameters.tags] Gets or sets the tags attached to the
   * resource.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  RouteTableOperations.prototype.beginCreateOrUpdating = function(resourceGroupName, routeTableName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (routeTableName === null || routeTableName === undefined) {
      return callback(new Error('routeTableName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.routes !== null && parameters.routes !== undefined) {
      for (var loweredIndex1 = 0; loweredIndex1 < parameters.routes.length; loweredIndex1 = loweredIndex1 + 1) {
        var routesParameterItem = parameters.routes[loweredIndex1];
        if (routesParameterItem.nextHopType === null || routesParameterItem.nextHopType === undefined) {
          return callback(new Error('parameters.routes.nextHopType cannot be null.'));
        }
      }
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Network';
    url2 = url2 + '/routeTables/';
    url2 = url2 + encodeURIComponent(routeTableName);
    var queryParameters = [];
    queryParameters.push('api-version=2015-05-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = null;
    
    var routeTableJsonFormatValue = {};
    requestDoc = routeTableJsonFormatValue;
    
    var propertiesValue = {};
    routeTableJsonFormatValue['properties'] = propertiesValue;
    
    if (parameters.routes !== null && parameters.routes !== undefined) {
      var routesArray = [];
      for (var loweredIndex2 = 0; loweredIndex2 < parameters.routes.length; loweredIndex2 = loweredIndex2 + 1) {
        var routesItem = parameters.routes[loweredIndex2];
        var routeJsonFormatValue = {};
        routesArray.push(routeJsonFormatValue);
        
        var propertiesValue2 = {};
        routeJsonFormatValue['properties'] = propertiesValue2;
        
        if (routesItem.addressPrefix !== null && routesItem.addressPrefix !== undefined) {
          propertiesValue2['addressPrefix'] = routesItem.addressPrefix;
        }
        
        propertiesValue2['nextHopType'] = routesItem.nextHopType;
        
        if (routesItem.nextHopIpAddress !== null && routesItem.nextHopIpAddress !== undefined) {
          propertiesValue2['nextHopIpAddress'] = routesItem.nextHopIpAddress;
        }
        
        if (routesItem.provisioningState !== null && routesItem.provisioningState !== undefined) {
          propertiesValue2['provisioningState'] = routesItem.provisioningState;
        }
        
        if (routesItem.name !== null && routesItem.name !== undefined) {
          routeJsonFormatValue['name'] = routesItem.name;
        }
        
        if (routesItem.etag !== null && routesItem.etag !== undefined) {
          routeJsonFormatValue['etag'] = routesItem.etag;
        }
        
        if (routesItem.id !== null && routesItem.id !== undefined) {
          routeJsonFormatValue['id'] = routesItem.id;
        }
      }
      propertiesValue['routes'] = routesArray;
    }
    
    if (parameters.subnets !== null && parameters.subnets !== undefined) {
      var subnetsArray = [];
      for (var loweredIndex3 = 0; loweredIndex3 < parameters.subnets.length; loweredIndex3 = loweredIndex3 + 1) {
        var subnetsItem = parameters.subnets[loweredIndex3];
        var resourceIdValue = {};
        subnetsArray.push(resourceIdValue);
        
        if (subnetsItem.id !== null && subnetsItem.id !== undefined) {
          resourceIdValue['id'] = subnetsItem.id;
        }
      }
      propertiesValue['subnets'] = subnetsArray;
    }
    
    if (parameters.provisioningState !== null && parameters.provisioningState !== undefined) {
      propertiesValue['provisioningState'] = parameters.provisioningState;
    }
    
    if (parameters.etag !== null && parameters.etag !== undefined) {
      routeTableJsonFormatValue['etag'] = parameters.etag;
    }
    
    if (parameters.id !== null && parameters.id !== undefined) {
      routeTableJsonFormatValue['id'] = parameters.id;
    }
    
    if (parameters.name !== null && parameters.name !== undefined) {
      routeTableJsonFormatValue['name'] = parameters.name;
    }
    
    if (parameters.type !== null && parameters.type !== undefined) {
      routeTableJsonFormatValue['type'] = parameters.type;
    }
    
    if (parameters.location !== null && parameters.location !== undefined) {
      routeTableJsonFormatValue['location'] = parameters.location;
    }
    
    if (parameters.tags !== null && parameters.tags !== undefined) {
      var tagsDictionary = {};
      for (var tagsKey in parameters.tags) {
        var tagsValue = parameters.tags[tagsKey];
        tagsDictionary[tagsKey] = tagsValue;
      }
      routeTableJsonFormatValue['tags'] = tagsDictionary;
    }
    
    requestContent = JSON.stringify(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200 && statusCode !== 201) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200 || statusCode === 201) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var routeTableInstance = { routes: [], subnets: [], tags: {} };
          result.routeTable = routeTableInstance;
          
          var propertiesValue3 = responseDoc['properties'];
          if (propertiesValue3 !== null && propertiesValue3 !== undefined) {
            var routesArray2 = propertiesValue3['routes'];
            if (routesArray2 !== null && routesArray2 !== undefined) {
              for (var loweredIndex4 = 0; loweredIndex4 < routesArray2.length; loweredIndex4 = loweredIndex4 + 1) {
                var routesValue = routesArray2[loweredIndex4];
                var routeJsonFormatInstance = {};
                routeTableInstance.routes.push(routeJsonFormatInstance);
                
                var propertiesValue4 = routesValue['properties'];
                if (propertiesValue4 !== null && propertiesValue4 !== undefined) {
                  var addressPrefixValue = propertiesValue4['addressPrefix'];
                  if (addressPrefixValue !== null && addressPrefixValue !== undefined) {
                    var addressPrefixInstance = addressPrefixValue;
                    routeJsonFormatInstance.addressPrefix = addressPrefixInstance;
                  }
                  
                  var nextHopTypeValue = propertiesValue4['nextHopType'];
                  if (nextHopTypeValue !== null && nextHopTypeValue !== undefined) {
                    var nextHopTypeInstance = nextHopTypeValue;
                    routeJsonFormatInstance.nextHopType = nextHopTypeInstance;
                  }
                  
                  var nextHopIpAddressValue = propertiesValue4['nextHopIpAddress'];
                  if (nextHopIpAddressValue !== null && nextHopIpAddressValue !== undefined) {
                    var nextHopIpAddressInstance = nextHopIpAddressValue;
                    routeJsonFormatInstance.nextHopIpAddress = nextHopIpAddressInstance;
                  }
                  
                  var provisioningStateValue = propertiesValue4['provisioningState'];
                  if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
                    var provisioningStateInstance = provisioningStateValue;
                    routeJsonFormatInstance.provisioningState = provisioningStateInstance;
                  }
                }
                
                var nameValue = routesValue['name'];
                if (nameValue !== null && nameValue !== undefined) {
                  var nameInstance = nameValue;
                  routeJsonFormatInstance.name = nameInstance;
                }
                
                var etagValue = routesValue['etag'];
                if (etagValue !== null && etagValue !== undefined) {
                  var etagInstance = etagValue;
                  routeJsonFormatInstance.etag = etagInstance;
                }
                
                var idValue = routesValue['id'];
                if (idValue !== null && idValue !== undefined) {
                  var idInstance = idValue;
                  routeJsonFormatInstance.id = idInstance;
                }
              }
            }
            
            var subnetsArray2 = propertiesValue3['subnets'];
            if (subnetsArray2 !== null && subnetsArray2 !== undefined) {
              for (var loweredIndex5 = 0; loweredIndex5 < subnetsArray2.length; loweredIndex5 = loweredIndex5 + 1) {
                var subnetsValue = subnetsArray2[loweredIndex5];
                var resourceIdInstance = {};
                routeTableInstance.subnets.push(resourceIdInstance);
                
                var idValue2 = subnetsValue['id'];
                if (idValue2 !== null && idValue2 !== undefined) {
                  var idInstance2 = idValue2;
                  resourceIdInstance.id = idInstance2;
                }
              }
            }
            
            var provisioningStateValue2 = propertiesValue3['provisioningState'];
            if (provisioningStateValue2 !== null && provisioningStateValue2 !== undefined) {
              var provisioningStateInstance2 = provisioningStateValue2;
              routeTableInstance.provisioningState = provisioningStateInstance2;
            }
          }
          
          var etagValue2 = responseDoc['etag'];
          if (etagValue2 !== null && etagValue2 !== undefined) {
            var etagInstance2 = etagValue2;
            routeTableInstance.etag = etagInstance2;
          }
          
          var idValue3 = responseDoc['id'];
          if (idValue3 !== null && idValue3 !== undefined) {
            var idInstance3 = idValue3;
            routeTableInstance.id = idInstance3;
          }
          
          var nameValue2 = responseDoc['name'];
          if (nameValue2 !== null && nameValue2 !== undefined) {
            var nameInstance2 = nameValue2;
            routeTableInstance.name = nameInstance2;
          }
          
          var typeValue = responseDoc['type'];
          if (typeValue !== null && typeValue !== undefined) {
            var typeInstance = typeValue;
            routeTableInstance.type = typeInstance;
          }
          
          var locationValue = responseDoc['location'];
          if (locationValue !== null && locationValue !== undefined) {
            var locationInstance = locationValue;
            routeTableInstance.location = locationInstance;
          }
          
          var tagsSequenceElement = responseDoc['tags'];
          if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
            for (var property in tagsSequenceElement) {
              var tagsKey2 = property;
              var tagsValue2 = tagsSequenceElement[property];
              routeTableInstance.tags[tagsKey2] = tagsValue2;
            }
          }
          
          var errorValue = responseDoc['error'];
          if (errorValue !== null && errorValue !== undefined) {
            var errorInstance = { details: [] };
            result.error = errorInstance;
            
            var codeValue = errorValue['code'];
            if (codeValue !== null && codeValue !== undefined) {
              var codeInstance = codeValue;
              errorInstance.code = codeInstance;
            }
            
            var messageValue = errorValue['message'];
            if (messageValue !== null && messageValue !== undefined) {
              var messageInstance = messageValue;
              errorInstance.message = messageInstance;
            }
            
            var targetValue = errorValue['target'];
            if (targetValue !== null && targetValue !== undefined) {
              var targetInstance = targetValue;
              errorInstance.target = targetInstance;
            }
            
            var detailsArray = errorValue['details'];
            if (detailsArray !== null && detailsArray !== undefined) {
              for (var loweredIndex6 = 0; loweredIndex6 < detailsArray.length; loweredIndex6 = loweredIndex6 + 1) {
                var detailsValue = detailsArray[loweredIndex6];
                var errorDetailsInstance = {};
                errorInstance.details.push(errorDetailsInstance);
                
                var codeValue2 = detailsValue['code'];
                if (codeValue2 !== null && codeValue2 !== undefined) {
                  var codeInstance2 = codeValue2;
                  errorDetailsInstance.code = codeInstance2;
                }
                
                var targetValue2 = detailsValue['target'];
                if (targetValue2 !== null && targetValue2 !== undefined) {
                  var targetInstance2 = targetValue2;
                  errorDetailsInstance.target = targetInstance2;
                }
                
                var messageValue2 = detailsValue['message'];
                if (messageValue2 !== null && messageValue2 !== undefined) {
                  var messageInstance2 = messageValue2;
                  errorDetailsInstance.message = messageInstance2;
                }
              }
            }
            
            var innerErrorValue = errorValue['innerError'];
            if (innerErrorValue !== null && innerErrorValue !== undefined) {
              var innerErrorInstance = innerErrorValue;
              errorInstance.innerError = innerErrorInstance;
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      result.azureAsyncOperation = response.headers['azure-asyncoperation'];
      result.retryAfter = parseInt(response.headers['retry-after'], 10);
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The Delete RouteTable operation deletes the specifed Route Table
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} routeTableName The name of the route table.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  RouteTableOperations.prototype.beginDeleting = function(resourceGroupName, routeTableName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (routeTableName === null || routeTableName === undefined) {
      return callback(new Error('routeTableName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Network';
    url2 = url2 + '/routeTables/';
    url2 = url2 + encodeURIComponent(routeTableName);
    var queryParameters = [];
    queryParameters.push('api-version=2015-05-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'DELETE';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200 && statusCode !== 202 && statusCode !== 204) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      result = {};
      result.statusCode = statusCode;
      result.azureAsyncOperation = response.headers['azure-asyncoperation'];
      result.retryAfter = parseInt(response.headers['retry-after'], 10);
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The Put RouteTable operation creates/updates a route tablein the specified
   * resource group.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} routeTableName The name of the route table.
   * 
   * @param {RouteTable} parameters Parameters supplied to the create/update
   * Route Table operation
   * 
   * @param {IEnumerable} [parameters.routes] Gets or sets Routes in a Route
   * Table
   * 
   * @param {IEnumerable} [parameters.subnets] Gets collection of references to
   * subnets
   * 
   * @param {string} [parameters.provisioningState] Gets or sets Provisioning
   * state of the resource Updating/Deleting/Failed
   * 
   * @param {string} [parameters.etag] Gets a unique read-only string that
   * changes whenever the resource is updated
   * 
   * @param {string} [parameters.id] Gets or sets the ID of the resource.
   * 
   * @param {string} [parameters.name] Gets or sets the name of the resource.
   * 
   * @param {string} [parameters.type] Gets or sets the type of the resource.
   * 
   * @param {string} [parameters.location] Gets or sets the location of the
   * resource.
   * 
   * @param {object} [parameters.tags] Gets or sets the tags attached to the
   * resource.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  RouteTableOperations.prototype.createOrUpdate = function(resourceGroupName, routeTableName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.routeTables.beginCreateOrUpdating(resourceGroupName, routeTableName, parameters, function (err, result) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var delayInSeconds = result.retryAfter;
      if (delayInSeconds === 0) {
        delayInSeconds = 30;
      }
      if (client2.longRunningOperationInitialTimeout >= 0) {
        delayInSeconds = client2.longRunningOperationInitialTimeout;
      }
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.getLongRunningOperationStatus(result.azureAsyncOperation, function (err2, result2) {
            if (err2 !== null && err2 !== undefined) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                return callback(null, result2);
              } else {
                delayInSeconds = result2.retryAfter;
                if (delayInSeconds === 0) {
                  delayInSeconds = 15;
                }
                if (client2.longRunningOperationRetryTimeout >= 0) {
                  delayInSeconds = client2.longRunningOperationRetryTimeout;
                }
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  /**
   * The Delete RouteTable operation deletes the specifed Route Table
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} routeTableName The name of the route table.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  RouteTableOperations.prototype.deleteMethod = function(resourceGroupName, routeTableName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.routeTables.beginDeleting(resourceGroupName, routeTableName, function (err, result) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var delayInSeconds = result.retryAfter;
      if (delayInSeconds === 0) {
        delayInSeconds = 30;
      }
      if (client2.longRunningOperationInitialTimeout >= 0) {
        delayInSeconds = client2.longRunningOperationInitialTimeout;
      }
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.getLongRunningOperationStatus(result.azureAsyncOperation, function (err2, result2) {
            if (err2 !== null && err2 !== undefined) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                return callback(null, result2);
              } else {
                delayInSeconds = result2.retryAfter;
                if (delayInSeconds === 0) {
                  delayInSeconds = 15;
                }
                if (client2.longRunningOperationRetryTimeout >= 0) {
                  delayInSeconds = client2.longRunningOperationRetryTimeout;
                }
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  /**
   * The Get RouteTables operation retrieves information about the specified
   * route table.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} routeTableName The name of the route table.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  RouteTableOperations.prototype.get = function(resourceGroupName, routeTableName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (routeTableName === null || routeTableName === undefined) {
      return callback(new Error('routeTableName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Network';
    url2 = url2 + '/routeTables/';
    url2 = url2 + encodeURIComponent(routeTableName);
    var queryParameters = [];
    queryParameters.push('api-version=2015-05-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var routeTableInstance = { routes: [], subnets: [], tags: {} };
          result.routeTable = routeTableInstance;
          
          var propertiesValue = responseDoc['properties'];
          if (propertiesValue !== null && propertiesValue !== undefined) {
            var routesArray = propertiesValue['routes'];
            if (routesArray !== null && routesArray !== undefined) {
              for (var loweredIndex1 = 0; loweredIndex1 < routesArray.length; loweredIndex1 = loweredIndex1 + 1) {
                var routesValue = routesArray[loweredIndex1];
                var routeJsonFormatInstance = {};
                routeTableInstance.routes.push(routeJsonFormatInstance);
                
                var propertiesValue2 = routesValue['properties'];
                if (propertiesValue2 !== null && propertiesValue2 !== undefined) {
                  var addressPrefixValue = propertiesValue2['addressPrefix'];
                  if (addressPrefixValue !== null && addressPrefixValue !== undefined) {
                    var addressPrefixInstance = addressPrefixValue;
                    routeJsonFormatInstance.addressPrefix = addressPrefixInstance;
                  }
                  
                  var nextHopTypeValue = propertiesValue2['nextHopType'];
                  if (nextHopTypeValue !== null && nextHopTypeValue !== undefined) {
                    var nextHopTypeInstance = nextHopTypeValue;
                    routeJsonFormatInstance.nextHopType = nextHopTypeInstance;
                  }
                  
                  var nextHopIpAddressValue = propertiesValue2['nextHopIpAddress'];
                  if (nextHopIpAddressValue !== null && nextHopIpAddressValue !== undefined) {
                    var nextHopIpAddressInstance = nextHopIpAddressValue;
                    routeJsonFormatInstance.nextHopIpAddress = nextHopIpAddressInstance;
                  }
                  
                  var provisioningStateValue = propertiesValue2['provisioningState'];
                  if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
                    var provisioningStateInstance = provisioningStateValue;
                    routeJsonFormatInstance.provisioningState = provisioningStateInstance;
                  }
                }
                
                var nameValue = routesValue['name'];
                if (nameValue !== null && nameValue !== undefined) {
                  var nameInstance = nameValue;
                  routeJsonFormatInstance.name = nameInstance;
                }
                
                var etagValue = routesValue['etag'];
                if (etagValue !== null && etagValue !== undefined) {
                  var etagInstance = etagValue;
                  routeJsonFormatInstance.etag = etagInstance;
                }
                
                var idValue = routesValue['id'];
                if (idValue !== null && idValue !== undefined) {
                  var idInstance = idValue;
                  routeJsonFormatInstance.id = idInstance;
                }
              }
            }
            
            var subnetsArray = propertiesValue['subnets'];
            if (subnetsArray !== null && subnetsArray !== undefined) {
              for (var loweredIndex2 = 0; loweredIndex2 < subnetsArray.length; loweredIndex2 = loweredIndex2 + 1) {
                var subnetsValue = subnetsArray[loweredIndex2];
                var resourceIdInstance = {};
                routeTableInstance.subnets.push(resourceIdInstance);
                
                var idValue2 = subnetsValue['id'];
                if (idValue2 !== null && idValue2 !== undefined) {
                  var idInstance2 = idValue2;
                  resourceIdInstance.id = idInstance2;
                }
              }
            }
            
            var provisioningStateValue2 = propertiesValue['provisioningState'];
            if (provisioningStateValue2 !== null && provisioningStateValue2 !== undefined) {
              var provisioningStateInstance2 = provisioningStateValue2;
              routeTableInstance.provisioningState = provisioningStateInstance2;
            }
          }
          
          var etagValue2 = responseDoc['etag'];
          if (etagValue2 !== null && etagValue2 !== undefined) {
            var etagInstance2 = etagValue2;
            routeTableInstance.etag = etagInstance2;
          }
          
          var idValue3 = responseDoc['id'];
          if (idValue3 !== null && idValue3 !== undefined) {
            var idInstance3 = idValue3;
            routeTableInstance.id = idInstance3;
          }
          
          var nameValue2 = responseDoc['name'];
          if (nameValue2 !== null && nameValue2 !== undefined) {
            var nameInstance2 = nameValue2;
            routeTableInstance.name = nameInstance2;
          }
          
          var typeValue = responseDoc['type'];
          if (typeValue !== null && typeValue !== undefined) {
            var typeInstance = typeValue;
            routeTableInstance.type = typeInstance;
          }
          
          var locationValue = responseDoc['location'];
          if (locationValue !== null && locationValue !== undefined) {
            var locationInstance = locationValue;
            routeTableInstance.location = locationInstance;
          }
          
          var tagsSequenceElement = responseDoc['tags'];
          if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
            for (var property in tagsSequenceElement) {
              var tagsKey = property;
              var tagsValue = tagsSequenceElement[property];
              routeTableInstance.tags[tagsKey] = tagsValue;
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The list RouteTables returns all route tables in a resource group
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  RouteTableOperations.prototype.list = function(resourceGroupName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Network';
    url2 = url2 + '/routeTables';
    var queryParameters = [];
    queryParameters.push('api-version=2015-05-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = { routeTables: [] };
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var valueArray = responseDoc['value'];
          if (valueArray !== null && valueArray !== undefined) {
            for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var valueValue = valueArray[loweredIndex1];
              var routeTableJsonFormatInstance = { routes: [], subnets: [], tags: {} };
              result.routeTables.push(routeTableJsonFormatInstance);
              
              var propertiesValue = valueValue['properties'];
              if (propertiesValue !== null && propertiesValue !== undefined) {
                var routesArray = propertiesValue['routes'];
                if (routesArray !== null && routesArray !== undefined) {
                  for (var loweredIndex2 = 0; loweredIndex2 < routesArray.length; loweredIndex2 = loweredIndex2 + 1) {
                    var routesValue = routesArray[loweredIndex2];
                    var routeJsonFormatInstance = {};
                    routeTableJsonFormatInstance.routes.push(routeJsonFormatInstance);
                    
                    var propertiesValue2 = routesValue['properties'];
                    if (propertiesValue2 !== null && propertiesValue2 !== undefined) {
                      var addressPrefixValue = propertiesValue2['addressPrefix'];
                      if (addressPrefixValue !== null && addressPrefixValue !== undefined) {
                        var addressPrefixInstance = addressPrefixValue;
                        routeJsonFormatInstance.addressPrefix = addressPrefixInstance;
                      }
                      
                      var nextHopTypeValue = propertiesValue2['nextHopType'];
                      if (nextHopTypeValue !== null && nextHopTypeValue !== undefined) {
                        var nextHopTypeInstance = nextHopTypeValue;
                        routeJsonFormatInstance.nextHopType = nextHopTypeInstance;
                      }
                      
                      var nextHopIpAddressValue = propertiesValue2['nextHopIpAddress'];
                      if (nextHopIpAddressValue !== null && nextHopIpAddressValue !== undefined) {
                        var nextHopIpAddressInstance = nextHopIpAddressValue;
                        routeJsonFormatInstance.nextHopIpAddress = nextHopIpAddressInstance;
                      }
                      
                      var provisioningStateValue = propertiesValue2['provisioningState'];
                      if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
                        var provisioningStateInstance = provisioningStateValue;
                        routeJsonFormatInstance.provisioningState = provisioningStateInstance;
                      }
                    }
                    
                    var nameValue = routesValue['name'];
                    if (nameValue !== null && nameValue !== undefined) {
                      var nameInstance = nameValue;
                      routeJsonFormatInstance.name = nameInstance;
                    }
                    
                    var etagValue = routesValue['etag'];
                    if (etagValue !== null && etagValue !== undefined) {
                      var etagInstance = etagValue;
                      routeJsonFormatInstance.etag = etagInstance;
                    }
                    
                    var idValue = routesValue['id'];
                    if (idValue !== null && idValue !== undefined) {
                      var idInstance = idValue;
                      routeJsonFormatInstance.id = idInstance;
                    }
                  }
                }
                
                var subnetsArray = propertiesValue['subnets'];
                if (subnetsArray !== null && subnetsArray !== undefined) {
                  for (var loweredIndex3 = 0; loweredIndex3 < subnetsArray.length; loweredIndex3 = loweredIndex3 + 1) {
                    var subnetsValue = subnetsArray[loweredIndex3];
                    var resourceIdInstance = {};
                    routeTableJsonFormatInstance.subnets.push(resourceIdInstance);
                    
                    var idValue2 = subnetsValue['id'];
                    if (idValue2 !== null && idValue2 !== undefined) {
                      var idInstance2 = idValue2;
                      resourceIdInstance.id = idInstance2;
                    }
                  }
                }
                
                var provisioningStateValue2 = propertiesValue['provisioningState'];
                if (provisioningStateValue2 !== null && provisioningStateValue2 !== undefined) {
                  var provisioningStateInstance2 = provisioningStateValue2;
                  routeTableJsonFormatInstance.provisioningState = provisioningStateInstance2;
                }
              }
              
              var etagValue2 = valueValue['etag'];
              if (etagValue2 !== null && etagValue2 !== undefined) {
                var etagInstance2 = etagValue2;
                routeTableJsonFormatInstance.etag = etagInstance2;
              }
              
              var idValue3 = valueValue['id'];
              if (idValue3 !== null && idValue3 !== undefined) {
                var idInstance3 = idValue3;
                routeTableJsonFormatInstance.id = idInstance3;
              }
              
              var nameValue2 = valueValue['name'];
              if (nameValue2 !== null && nameValue2 !== undefined) {
                var nameInstance2 = nameValue2;
                routeTableJsonFormatInstance.name = nameInstance2;
              }
              
              var typeValue = valueValue['type'];
              if (typeValue !== null && typeValue !== undefined) {
                var typeInstance = typeValue;
                routeTableJsonFormatInstance.type = typeInstance;
              }
              
              var locationValue = valueValue['location'];
              if (locationValue !== null && locationValue !== undefined) {
                var locationInstance = locationValue;
                routeTableJsonFormatInstance.location = locationInstance;
              }
              
              var tagsSequenceElement = valueValue['tags'];
              if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
                for (var property in tagsSequenceElement) {
                  var tagsKey = property;
                  var tagsValue = tagsSequenceElement[property];
                  routeTableJsonFormatInstance.tags[tagsKey] = tagsValue;
                }
              }
            }
          }
          
          var nextLinkValue = responseDoc['nextLink'];
          if (nextLinkValue !== null && nextLinkValue !== undefined) {
            var nextLinkInstance = nextLinkValue;
            result.nextLink = nextLinkInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The list RouteTables returns all route tables in a subscription
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  RouteTableOperations.prototype.listAll = function(callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Network';
    url2 = url2 + '/routeTables';
    var queryParameters = [];
    queryParameters.push('api-version=2015-05-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = { routeTables: [] };
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var valueArray = responseDoc['value'];
          if (valueArray !== null && valueArray !== undefined) {
            for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var valueValue = valueArray[loweredIndex1];
              var routeTableJsonFormatInstance = { routes: [], subnets: [], tags: {} };
              result.routeTables.push(routeTableJsonFormatInstance);
              
              var propertiesValue = valueValue['properties'];
              if (propertiesValue !== null && propertiesValue !== undefined) {
                var routesArray = propertiesValue['routes'];
                if (routesArray !== null && routesArray !== undefined) {
                  for (var loweredIndex2 = 0; loweredIndex2 < routesArray.length; loweredIndex2 = loweredIndex2 + 1) {
                    var routesValue = routesArray[loweredIndex2];
                    var routeJsonFormatInstance = {};
                    routeTableJsonFormatInstance.routes.push(routeJsonFormatInstance);
                    
                    var propertiesValue2 = routesValue['properties'];
                    if (propertiesValue2 !== null && propertiesValue2 !== undefined) {
                      var addressPrefixValue = propertiesValue2['addressPrefix'];
                      if (addressPrefixValue !== null && addressPrefixValue !== undefined) {
                        var addressPrefixInstance = addressPrefixValue;
                        routeJsonFormatInstance.addressPrefix = addressPrefixInstance;
                      }
                      
                      var nextHopTypeValue = propertiesValue2['nextHopType'];
                      if (nextHopTypeValue !== null && nextHopTypeValue !== undefined) {
                        var nextHopTypeInstance = nextHopTypeValue;
                        routeJsonFormatInstance.nextHopType = nextHopTypeInstance;
                      }
                      
                      var nextHopIpAddressValue = propertiesValue2['nextHopIpAddress'];
                      if (nextHopIpAddressValue !== null && nextHopIpAddressValue !== undefined) {
                        var nextHopIpAddressInstance = nextHopIpAddressValue;
                        routeJsonFormatInstance.nextHopIpAddress = nextHopIpAddressInstance;
                      }
                      
                      var provisioningStateValue = propertiesValue2['provisioningState'];
                      if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
                        var provisioningStateInstance = provisioningStateValue;
                        routeJsonFormatInstance.provisioningState = provisioningStateInstance;
                      }
                    }
                    
                    var nameValue = routesValue['name'];
                    if (nameValue !== null && nameValue !== undefined) {
                      var nameInstance = nameValue;
                      routeJsonFormatInstance.name = nameInstance;
                    }
                    
                    var etagValue = routesValue['etag'];
                    if (etagValue !== null && etagValue !== undefined) {
                      var etagInstance = etagValue;
                      routeJsonFormatInstance.etag = etagInstance;
                    }
                    
                    var idValue = routesValue['id'];
                    if (idValue !== null && idValue !== undefined) {
                      var idInstance = idValue;
                      routeJsonFormatInstance.id = idInstance;
                    }
                  }
                }
                
                var subnetsArray = propertiesValue['subnets'];
                if (subnetsArray !== null && subnetsArray !== undefined) {
                  for (var loweredIndex3 = 0; loweredIndex3 < subnetsArray.length; loweredIndex3 = loweredIndex3 + 1) {
                    var subnetsValue = subnetsArray[loweredIndex3];
                    var resourceIdInstance = {};
                    routeTableJsonFormatInstance.subnets.push(resourceIdInstance);
                    
                    var idValue2 = subnetsValue['id'];
                    if (idValue2 !== null && idValue2 !== undefined) {
                      var idInstance2 = idValue2;
                      resourceIdInstance.id = idInstance2;
                    }
                  }
                }
                
                var provisioningStateValue2 = propertiesValue['provisioningState'];
                if (provisioningStateValue2 !== null && provisioningStateValue2 !== undefined) {
                  var provisioningStateInstance2 = provisioningStateValue2;
                  routeTableJsonFormatInstance.provisioningState = provisioningStateInstance2;
                }
              }
              
              var etagValue2 = valueValue['etag'];
              if (etagValue2 !== null && etagValue2 !== undefined) {
                var etagInstance2 = etagValue2;
                routeTableJsonFormatInstance.etag = etagInstance2;
              }
              
              var idValue3 = valueValue['id'];
              if (idValue3 !== null && idValue3 !== undefined) {
                var idInstance3 = idValue3;
                routeTableJsonFormatInstance.id = idInstance3;
              }
              
              var nameValue2 = valueValue['name'];
              if (nameValue2 !== null && nameValue2 !== undefined) {
                var nameInstance2 = nameValue2;
                routeTableJsonFormatInstance.name = nameInstance2;
              }
              
              var typeValue = valueValue['type'];
              if (typeValue !== null && typeValue !== undefined) {
                var typeInstance = typeValue;
                routeTableJsonFormatInstance.type = typeInstance;
              }
              
              var locationValue = valueValue['location'];
              if (locationValue !== null && locationValue !== undefined) {
                var locationInstance = locationValue;
                routeTableJsonFormatInstance.location = locationInstance;
              }
              
              var tagsSequenceElement = valueValue['tags'];
              if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
                for (var property in tagsSequenceElement) {
                  var tagsKey = property;
                  var tagsValue = tagsSequenceElement[property];
                  routeTableJsonFormatInstance.tags[tagsKey] = tagsValue;
                }
              }
            }
          }
          
          var nextLinkValue = responseDoc['nextLink'];
          if (nextLinkValue !== null && nextLinkValue !== undefined) {
            var nextLinkInstance = nextLinkValue;
            result.nextLink = nextLinkInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  return RouteTableOperations;
})();

var SecurityRuleOperations = ( /** @lends SecurityRuleOperations */ function() {
  /**
   * @class
   * The Network Resource Provider API includes operations for managing the
   * SecurityRules for your subscription.
   * __NOTE__: An instance of this class is automatically created for an
   * instance of the [NetworkResourceProviderClient] {@link
   * NetworkResourceProviderClient~NetworkResourceProviderClient}.
   * See [securityRules] {@link
   * NetworkResourceProviderClient~NetworkResourceProviderClient#securityRules}.
   * Initializes a new instance of the SecurityRuleOperations class.
   * @constructor
   * 
   * @param {NetworkResourceProviderClient} client Reference to the service
   * client.
   */
  function SecurityRuleOperations(client) {
    this.client = client;
  }
  
  /**
   * The Put network security rule operation creates/updates a security rule in
   * the specified network security group
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} networkSecurityGroupName The name of the network security
   * group.
   * 
   * @param {string} securityRuleName The name of the security rule.
   * 
   * @param {SecurityRule} securityRuleParameters Parameters supplied to the
   * create/update network security rule operation
   * 
   * @param {string} [securityRuleParameters.description] Gets or sets a
   * description for this rule. Restricted to 140 chars.
   * 
   * @param {string} securityRuleParameters.protocol Gets or sets Network
   * protocol this rule applies to. Can be Tcp, Udp or All(*).
   * 
   * @param {string} [securityRuleParameters.sourcePortRange] Gets or sets
   * Source Port or Range. Integer or range between 0 and 65535. Asterix “*”
   * can also be used to match all ports.
   * 
   * @param {string} [securityRuleParameters.destinationPortRange] Gets or sets
   * Destination Port or Range. Integer or range between 0 and 65535. Asterix
   * “*” can also be used to match all ports.
   * 
   * @param {string} securityRuleParameters.sourceAddressPrefix Gets or sets
   * source address prefix. CIDR or source IP range. Asterix “*” can also be
   * used to match all source IPs. Default tags such as ‘VirtualNetwork’,
   * ‘AzureLoadBalancer’ and ‘Internet’ can also be used. If this is an
   * ingress rule, specifies where network traffic originates from.
   * 
   * @param {string} securityRuleParameters.destinationAddressPrefix Gets or
   * sets destination address prefix. CIDR or source IP range. Asterix “*” can
   * also be used to match all source IPs. Default tags such as
   * ‘VirtualNetwork’, ‘AzureLoadBalancer’ and ‘Internet’ can also be used.
   * 
   * @param {string} securityRuleParameters.access Gets or sets network traffic
   * is allowed or denied. Possible values are “Allow” and “Deny”
   * 
   * @param {number} [securityRuleParameters.priority] Gets or sets the
   * priority of the rule. The value can be between 100 and 4096. The priority
   * number must be unique for each rule in the collection. The lower the
   * priority number, the higher the priority of the rule.
   * 
   * @param {string} securityRuleParameters.direction Gets or sets the
   * direction of the rule.InBound or Outbound. The direction specifies if
   * rule will be evaluated on incoming or outcoming traffic.
   * 
   * @param {string} [securityRuleParameters.provisioningState] Gets or sets
   * Provisioning state of the PublicIP resource Updating/Deleting/Failed
   * 
   * @param {string} [securityRuleParameters.name] Gets name of the resource
   * that is unique within a resource group. This name can be used to access
   * the resource
   * 
   * @param {string} [securityRuleParameters.etag] A unique read-only string
   * that changes whenever the resource is updated
   * 
   * @param {string} [securityRuleParameters.id] Id of the resource
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  SecurityRuleOperations.prototype.beginCreateOrUpdating = function(resourceGroupName, networkSecurityGroupName, securityRuleName, securityRuleParameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (networkSecurityGroupName === null || networkSecurityGroupName === undefined) {
      return callback(new Error('networkSecurityGroupName cannot be null.'));
    }
    if (securityRuleName === null || securityRuleName === undefined) {
      return callback(new Error('securityRuleName cannot be null.'));
    }
    if (securityRuleParameters === null || securityRuleParameters === undefined) {
      return callback(new Error('securityRuleParameters cannot be null.'));
    }
    if (securityRuleParameters.access === null || securityRuleParameters.access === undefined) {
      return callback(new Error('securityRuleParameters.access cannot be null.'));
    }
    if (securityRuleParameters.destinationAddressPrefix === null || securityRuleParameters.destinationAddressPrefix === undefined) {
      return callback(new Error('securityRuleParameters.destinationAddressPrefix cannot be null.'));
    }
    if (securityRuleParameters.direction === null || securityRuleParameters.direction === undefined) {
      return callback(new Error('securityRuleParameters.direction cannot be null.'));
    }
    if (securityRuleParameters.protocol === null || securityRuleParameters.protocol === undefined) {
      return callback(new Error('securityRuleParameters.protocol cannot be null.'));
    }
    if (securityRuleParameters.sourceAddressPrefix === null || securityRuleParameters.sourceAddressPrefix === undefined) {
      return callback(new Error('securityRuleParameters.sourceAddressPrefix cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Network';
    url2 = url2 + '/networkSecurityGroups/';
    url2 = url2 + encodeURIComponent(networkSecurityGroupName);
    url2 = url2 + '/securityRules/';
    url2 = url2 + encodeURIComponent(securityRuleName);
    var queryParameters = [];
    queryParameters.push('api-version=2015-05-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = null;
    
    var securityRuleJsonFormatValue = {};
    requestDoc = securityRuleJsonFormatValue;
    
    var propertiesValue = {};
    securityRuleJsonFormatValue['properties'] = propertiesValue;
    
    if (securityRuleParameters.description !== null && securityRuleParameters.description !== undefined) {
      propertiesValue['description'] = securityRuleParameters.description;
    }
    
    propertiesValue['protocol'] = securityRuleParameters.protocol;
    
    if (securityRuleParameters.sourcePortRange !== null && securityRuleParameters.sourcePortRange !== undefined) {
      propertiesValue['sourcePortRange'] = securityRuleParameters.sourcePortRange;
    }
    
    if (securityRuleParameters.destinationPortRange !== null && securityRuleParameters.destinationPortRange !== undefined) {
      propertiesValue['destinationPortRange'] = securityRuleParameters.destinationPortRange;
    }
    
    propertiesValue['sourceAddressPrefix'] = securityRuleParameters.sourceAddressPrefix;
    
    propertiesValue['destinationAddressPrefix'] = securityRuleParameters.destinationAddressPrefix;
    
    propertiesValue['access'] = securityRuleParameters.access;
    
    if (securityRuleParameters.priority !== null && securityRuleParameters.priority !== undefined) {
      propertiesValue['priority'] = securityRuleParameters.priority;
    }
    
    propertiesValue['direction'] = securityRuleParameters.direction;
    
    if (securityRuleParameters.provisioningState !== null && securityRuleParameters.provisioningState !== undefined) {
      propertiesValue['provisioningState'] = securityRuleParameters.provisioningState;
    }
    
    if (securityRuleParameters.name !== null && securityRuleParameters.name !== undefined) {
      securityRuleJsonFormatValue['name'] = securityRuleParameters.name;
    }
    
    if (securityRuleParameters.etag !== null && securityRuleParameters.etag !== undefined) {
      securityRuleJsonFormatValue['etag'] = securityRuleParameters.etag;
    }
    
    if (securityRuleParameters.id !== null && securityRuleParameters.id !== undefined) {
      securityRuleJsonFormatValue['id'] = securityRuleParameters.id;
    }
    
    requestContent = JSON.stringify(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200 && statusCode !== 201) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200 || statusCode === 201) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var securityRuleInstance = {};
          result.securityRule = securityRuleInstance;
          
          var propertiesValue2 = responseDoc['properties'];
          if (propertiesValue2 !== null && propertiesValue2 !== undefined) {
            var descriptionValue = propertiesValue2['description'];
            if (descriptionValue !== null && descriptionValue !== undefined) {
              var descriptionInstance = descriptionValue;
              securityRuleInstance.description = descriptionInstance;
            }
            
            var protocolValue = propertiesValue2['protocol'];
            if (protocolValue !== null && protocolValue !== undefined) {
              var protocolInstance = protocolValue;
              securityRuleInstance.protocol = protocolInstance;
            }
            
            var sourcePortRangeValue = propertiesValue2['sourcePortRange'];
            if (sourcePortRangeValue !== null && sourcePortRangeValue !== undefined) {
              var sourcePortRangeInstance = sourcePortRangeValue;
              securityRuleInstance.sourcePortRange = sourcePortRangeInstance;
            }
            
            var destinationPortRangeValue = propertiesValue2['destinationPortRange'];
            if (destinationPortRangeValue !== null && destinationPortRangeValue !== undefined) {
              var destinationPortRangeInstance = destinationPortRangeValue;
              securityRuleInstance.destinationPortRange = destinationPortRangeInstance;
            }
            
            var sourceAddressPrefixValue = propertiesValue2['sourceAddressPrefix'];
            if (sourceAddressPrefixValue !== null && sourceAddressPrefixValue !== undefined) {
              var sourceAddressPrefixInstance = sourceAddressPrefixValue;
              securityRuleInstance.sourceAddressPrefix = sourceAddressPrefixInstance;
            }
            
            var destinationAddressPrefixValue = propertiesValue2['destinationAddressPrefix'];
            if (destinationAddressPrefixValue !== null && destinationAddressPrefixValue !== undefined) {
              var destinationAddressPrefixInstance = destinationAddressPrefixValue;
              securityRuleInstance.destinationAddressPrefix = destinationAddressPrefixInstance;
            }
            
            var accessValue = propertiesValue2['access'];
            if (accessValue !== null && accessValue !== undefined) {
              var accessInstance = accessValue;
              securityRuleInstance.access = accessInstance;
            }
            
            var priorityValue = propertiesValue2['priority'];
            if (priorityValue !== null && priorityValue !== undefined) {
              var priorityInstance = priorityValue;
              securityRuleInstance.priority = priorityInstance;
            }
            
            var directionValue = propertiesValue2['direction'];
            if (directionValue !== null && directionValue !== undefined) {
              var directionInstance = directionValue;
              securityRuleInstance.direction = directionInstance;
            }
            
            var provisioningStateValue = propertiesValue2['provisioningState'];
            if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
              var provisioningStateInstance = provisioningStateValue;
              securityRuleInstance.provisioningState = provisioningStateInstance;
            }
          }
          
          var nameValue = responseDoc['name'];
          if (nameValue !== null && nameValue !== undefined) {
            var nameInstance = nameValue;
            securityRuleInstance.name = nameInstance;
          }
          
          var etagValue = responseDoc['etag'];
          if (etagValue !== null && etagValue !== undefined) {
            var etagInstance = etagValue;
            securityRuleInstance.etag = etagInstance;
          }
          
          var idValue = responseDoc['id'];
          if (idValue !== null && idValue !== undefined) {
            var idInstance = idValue;
            securityRuleInstance.id = idInstance;
          }
          
          var errorValue = responseDoc['error'];
          if (errorValue !== null && errorValue !== undefined) {
            var errorInstance = { details: [] };
            result.error = errorInstance;
            
            var codeValue = errorValue['code'];
            if (codeValue !== null && codeValue !== undefined) {
              var codeInstance = codeValue;
              errorInstance.code = codeInstance;
            }
            
            var messageValue = errorValue['message'];
            if (messageValue !== null && messageValue !== undefined) {
              var messageInstance = messageValue;
              errorInstance.message = messageInstance;
            }
            
            var targetValue = errorValue['target'];
            if (targetValue !== null && targetValue !== undefined) {
              var targetInstance = targetValue;
              errorInstance.target = targetInstance;
            }
            
            var detailsArray = errorValue['details'];
            if (detailsArray !== null && detailsArray !== undefined) {
              for (var loweredIndex1 = 0; loweredIndex1 < detailsArray.length; loweredIndex1 = loweredIndex1 + 1) {
                var detailsValue = detailsArray[loweredIndex1];
                var errorDetailsInstance = {};
                errorInstance.details.push(errorDetailsInstance);
                
                var codeValue2 = detailsValue['code'];
                if (codeValue2 !== null && codeValue2 !== undefined) {
                  var codeInstance2 = codeValue2;
                  errorDetailsInstance.code = codeInstance2;
                }
                
                var targetValue2 = detailsValue['target'];
                if (targetValue2 !== null && targetValue2 !== undefined) {
                  var targetInstance2 = targetValue2;
                  errorDetailsInstance.target = targetInstance2;
                }
                
                var messageValue2 = detailsValue['message'];
                if (messageValue2 !== null && messageValue2 !== undefined) {
                  var messageInstance2 = messageValue2;
                  errorDetailsInstance.message = messageInstance2;
                }
              }
            }
            
            var innerErrorValue = errorValue['innerError'];
            if (innerErrorValue !== null && innerErrorValue !== undefined) {
              var innerErrorInstance = innerErrorValue;
              errorInstance.innerError = innerErrorInstance;
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      result.azureAsyncOperation = response.headers['azure-asyncoperation'];
      result.retryAfter = parseInt(response.headers['retry-after'], 10);
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The delete network security rule operation deletes the specified network
   * security rule.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} networkSecurityGroupName The name of the network security
   * group.
   * 
   * @param {string} securityRuleName The name of the security rule.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  SecurityRuleOperations.prototype.beginDeleting = function(resourceGroupName, networkSecurityGroupName, securityRuleName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (networkSecurityGroupName === null || networkSecurityGroupName === undefined) {
      return callback(new Error('networkSecurityGroupName cannot be null.'));
    }
    if (securityRuleName === null || securityRuleName === undefined) {
      return callback(new Error('securityRuleName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Network';
    url2 = url2 + '/networkSecurityGroups/';
    url2 = url2 + encodeURIComponent(networkSecurityGroupName);
    url2 = url2 + '/securityRules/';
    url2 = url2 + encodeURIComponent(securityRuleName);
    var queryParameters = [];
    queryParameters.push('api-version=2015-05-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'DELETE';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200 && statusCode !== 202 && statusCode !== 204) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      result = {};
      result.statusCode = statusCode;
      result.azureAsyncOperation = response.headers['azure-asyncoperation'];
      result.retryAfter = parseInt(response.headers['retry-after'], 10);
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The Put network security rule operation creates/updates a security rule in
   * the specified network security group
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} networkSecurityGroupName The name of the network security
   * group.
   * 
   * @param {string} securityRuleName The name of the security rule.
   * 
   * @param {SecurityRule} securityRuleParameters Parameters supplied to the
   * create/update network security rule operation
   * 
   * @param {string} [securityRuleParameters.description] Gets or sets a
   * description for this rule. Restricted to 140 chars.
   * 
   * @param {string} securityRuleParameters.protocol Gets or sets Network
   * protocol this rule applies to. Can be Tcp, Udp or All(*).
   * 
   * @param {string} [securityRuleParameters.sourcePortRange] Gets or sets
   * Source Port or Range. Integer or range between 0 and 65535. Asterix “*”
   * can also be used to match all ports.
   * 
   * @param {string} [securityRuleParameters.destinationPortRange] Gets or sets
   * Destination Port or Range. Integer or range between 0 and 65535. Asterix
   * “*” can also be used to match all ports.
   * 
   * @param {string} securityRuleParameters.sourceAddressPrefix Gets or sets
   * source address prefix. CIDR or source IP range. Asterix “*” can also be
   * used to match all source IPs. Default tags such as ‘VirtualNetwork’,
   * ‘AzureLoadBalancer’ and ‘Internet’ can also be used. If this is an
   * ingress rule, specifies where network traffic originates from.
   * 
   * @param {string} securityRuleParameters.destinationAddressPrefix Gets or
   * sets destination address prefix. CIDR or source IP range. Asterix “*” can
   * also be used to match all source IPs. Default tags such as
   * ‘VirtualNetwork’, ‘AzureLoadBalancer’ and ‘Internet’ can also be used.
   * 
   * @param {string} securityRuleParameters.access Gets or sets network traffic
   * is allowed or denied. Possible values are “Allow” and “Deny”
   * 
   * @param {number} [securityRuleParameters.priority] Gets or sets the
   * priority of the rule. The value can be between 100 and 4096. The priority
   * number must be unique for each rule in the collection. The lower the
   * priority number, the higher the priority of the rule.
   * 
   * @param {string} securityRuleParameters.direction Gets or sets the
   * direction of the rule.InBound or Outbound. The direction specifies if
   * rule will be evaluated on incoming or outcoming traffic.
   * 
   * @param {string} [securityRuleParameters.provisioningState] Gets or sets
   * Provisioning state of the PublicIP resource Updating/Deleting/Failed
   * 
   * @param {string} [securityRuleParameters.name] Gets name of the resource
   * that is unique within a resource group. This name can be used to access
   * the resource
   * 
   * @param {string} [securityRuleParameters.etag] A unique read-only string
   * that changes whenever the resource is updated
   * 
   * @param {string} [securityRuleParameters.id] Id of the resource
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  SecurityRuleOperations.prototype.createOrUpdate = function(resourceGroupName, networkSecurityGroupName, securityRuleName, securityRuleParameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.securityRules.beginCreateOrUpdating(resourceGroupName, networkSecurityGroupName, securityRuleName, securityRuleParameters, function (err, result) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var delayInSeconds = result.retryAfter;
      if (delayInSeconds === 0) {
        delayInSeconds = 30;
      }
      if (client2.longRunningOperationInitialTimeout >= 0) {
        delayInSeconds = client2.longRunningOperationInitialTimeout;
      }
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.getLongRunningOperationStatus(result.azureAsyncOperation, function (err2, result2) {
            if (err2 !== null && err2 !== undefined) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                return callback(null, result2);
              } else {
                delayInSeconds = result2.retryAfter;
                if (delayInSeconds === 0) {
                  delayInSeconds = 15;
                }
                if (client2.longRunningOperationRetryTimeout >= 0) {
                  delayInSeconds = client2.longRunningOperationRetryTimeout;
                }
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  /**
   * The delete network security rule operation deletes the specified network
   * security rule.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} networkSecurityGroupName The name of the network security
   * group.
   * 
   * @param {string} securityRuleName The name of the security rule.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  SecurityRuleOperations.prototype.deleteMethod = function(resourceGroupName, networkSecurityGroupName, securityRuleName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.securityRules.beginDeleting(resourceGroupName, networkSecurityGroupName, securityRuleName, function (err, result) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var delayInSeconds = result.retryAfter;
      if (delayInSeconds === 0) {
        delayInSeconds = 30;
      }
      if (client2.longRunningOperationInitialTimeout >= 0) {
        delayInSeconds = client2.longRunningOperationInitialTimeout;
      }
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.getLongRunningOperationStatus(result.azureAsyncOperation, function (err2, result2) {
            if (err2 !== null && err2 !== undefined) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                return callback(null, result2);
              } else {
                delayInSeconds = result2.retryAfter;
                if (delayInSeconds === 0) {
                  delayInSeconds = 15;
                }
                if (client2.longRunningOperationRetryTimeout >= 0) {
                  delayInSeconds = client2.longRunningOperationRetryTimeout;
                }
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  /**
   * The Get NetworkSecurityRule operation retreives information about the
   * specified network security rule.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} networkSecurityGroupName The name of the network security
   * group.
   * 
   * @param {string} securityRuleName The name of the security rule.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  SecurityRuleOperations.prototype.get = function(resourceGroupName, networkSecurityGroupName, securityRuleName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (networkSecurityGroupName === null || networkSecurityGroupName === undefined) {
      return callback(new Error('networkSecurityGroupName cannot be null.'));
    }
    if (securityRuleName === null || securityRuleName === undefined) {
      return callback(new Error('securityRuleName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Network';
    url2 = url2 + '/networkSecurityGroups/';
    url2 = url2 + encodeURIComponent(networkSecurityGroupName);
    url2 = url2 + '/securityRules/';
    url2 = url2 + encodeURIComponent(securityRuleName);
    var queryParameters = [];
    queryParameters.push('api-version=2015-05-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var securityRuleInstance = {};
          result.securityRule = securityRuleInstance;
          
          var propertiesValue = responseDoc['properties'];
          if (propertiesValue !== null && propertiesValue !== undefined) {
            var descriptionValue = propertiesValue['description'];
            if (descriptionValue !== null && descriptionValue !== undefined) {
              var descriptionInstance = descriptionValue;
              securityRuleInstance.description = descriptionInstance;
            }
            
            var protocolValue = propertiesValue['protocol'];
            if (protocolValue !== null && protocolValue !== undefined) {
              var protocolInstance = protocolValue;
              securityRuleInstance.protocol = protocolInstance;
            }
            
            var sourcePortRangeValue = propertiesValue['sourcePortRange'];
            if (sourcePortRangeValue !== null && sourcePortRangeValue !== undefined) {
              var sourcePortRangeInstance = sourcePortRangeValue;
              securityRuleInstance.sourcePortRange = sourcePortRangeInstance;
            }
            
            var destinationPortRangeValue = propertiesValue['destinationPortRange'];
            if (destinationPortRangeValue !== null && destinationPortRangeValue !== undefined) {
              var destinationPortRangeInstance = destinationPortRangeValue;
              securityRuleInstance.destinationPortRange = destinationPortRangeInstance;
            }
            
            var sourceAddressPrefixValue = propertiesValue['sourceAddressPrefix'];
            if (sourceAddressPrefixValue !== null && sourceAddressPrefixValue !== undefined) {
              var sourceAddressPrefixInstance = sourceAddressPrefixValue;
              securityRuleInstance.sourceAddressPrefix = sourceAddressPrefixInstance;
            }
            
            var destinationAddressPrefixValue = propertiesValue['destinationAddressPrefix'];
            if (destinationAddressPrefixValue !== null && destinationAddressPrefixValue !== undefined) {
              var destinationAddressPrefixInstance = destinationAddressPrefixValue;
              securityRuleInstance.destinationAddressPrefix = destinationAddressPrefixInstance;
            }
            
            var accessValue = propertiesValue['access'];
            if (accessValue !== null && accessValue !== undefined) {
              var accessInstance = accessValue;
              securityRuleInstance.access = accessInstance;
            }
            
            var priorityValue = propertiesValue['priority'];
            if (priorityValue !== null && priorityValue !== undefined) {
              var priorityInstance = priorityValue;
              securityRuleInstance.priority = priorityInstance;
            }
            
            var directionValue = propertiesValue['direction'];
            if (directionValue !== null && directionValue !== undefined) {
              var directionInstance = directionValue;
              securityRuleInstance.direction = directionInstance;
            }
            
            var provisioningStateValue = propertiesValue['provisioningState'];
            if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
              var provisioningStateInstance = provisioningStateValue;
              securityRuleInstance.provisioningState = provisioningStateInstance;
            }
          }
          
          var nameValue = responseDoc['name'];
          if (nameValue !== null && nameValue !== undefined) {
            var nameInstance = nameValue;
            securityRuleInstance.name = nameInstance;
          }
          
          var etagValue = responseDoc['etag'];
          if (etagValue !== null && etagValue !== undefined) {
            var etagInstance = etagValue;
            securityRuleInstance.etag = etagInstance;
          }
          
          var idValue = responseDoc['id'];
          if (idValue !== null && idValue !== undefined) {
            var idInstance = idValue;
            securityRuleInstance.id = idInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The List network security rule opertion retrieves all the security rules
   * in a network security group.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} networkSecurityGroupName The name of the network security
   * group.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  SecurityRuleOperations.prototype.list = function(resourceGroupName, networkSecurityGroupName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (networkSecurityGroupName === null || networkSecurityGroupName === undefined) {
      return callback(new Error('networkSecurityGroupName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Network';
    url2 = url2 + '/networkSecurityGroups/';
    url2 = url2 + encodeURIComponent(networkSecurityGroupName);
    url2 = url2 + '/securityRules';
    var queryParameters = [];
    queryParameters.push('api-version=2015-05-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = { securityRules: [] };
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var valueArray = responseDoc['value'];
          if (valueArray !== null && valueArray !== undefined) {
            for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var valueValue = valueArray[loweredIndex1];
              var securityRuleJsonFormatInstance = {};
              result.securityRules.push(securityRuleJsonFormatInstance);
              
              var propertiesValue = valueValue['properties'];
              if (propertiesValue !== null && propertiesValue !== undefined) {
                var descriptionValue = propertiesValue['description'];
                if (descriptionValue !== null && descriptionValue !== undefined) {
                  var descriptionInstance = descriptionValue;
                  securityRuleJsonFormatInstance.description = descriptionInstance;
                }
                
                var protocolValue = propertiesValue['protocol'];
                if (protocolValue !== null && protocolValue !== undefined) {
                  var protocolInstance = protocolValue;
                  securityRuleJsonFormatInstance.protocol = protocolInstance;
                }
                
                var sourcePortRangeValue = propertiesValue['sourcePortRange'];
                if (sourcePortRangeValue !== null && sourcePortRangeValue !== undefined) {
                  var sourcePortRangeInstance = sourcePortRangeValue;
                  securityRuleJsonFormatInstance.sourcePortRange = sourcePortRangeInstance;
                }
                
                var destinationPortRangeValue = propertiesValue['destinationPortRange'];
                if (destinationPortRangeValue !== null && destinationPortRangeValue !== undefined) {
                  var destinationPortRangeInstance = destinationPortRangeValue;
                  securityRuleJsonFormatInstance.destinationPortRange = destinationPortRangeInstance;
                }
                
                var sourceAddressPrefixValue = propertiesValue['sourceAddressPrefix'];
                if (sourceAddressPrefixValue !== null && sourceAddressPrefixValue !== undefined) {
                  var sourceAddressPrefixInstance = sourceAddressPrefixValue;
                  securityRuleJsonFormatInstance.sourceAddressPrefix = sourceAddressPrefixInstance;
                }
                
                var destinationAddressPrefixValue = propertiesValue['destinationAddressPrefix'];
                if (destinationAddressPrefixValue !== null && destinationAddressPrefixValue !== undefined) {
                  var destinationAddressPrefixInstance = destinationAddressPrefixValue;
                  securityRuleJsonFormatInstance.destinationAddressPrefix = destinationAddressPrefixInstance;
                }
                
                var accessValue = propertiesValue['access'];
                if (accessValue !== null && accessValue !== undefined) {
                  var accessInstance = accessValue;
                  securityRuleJsonFormatInstance.access = accessInstance;
                }
                
                var priorityValue = propertiesValue['priority'];
                if (priorityValue !== null && priorityValue !== undefined) {
                  var priorityInstance = priorityValue;
                  securityRuleJsonFormatInstance.priority = priorityInstance;
                }
                
                var directionValue = propertiesValue['direction'];
                if (directionValue !== null && directionValue !== undefined) {
                  var directionInstance = directionValue;
                  securityRuleJsonFormatInstance.direction = directionInstance;
                }
                
                var provisioningStateValue = propertiesValue['provisioningState'];
                if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
                  var provisioningStateInstance = provisioningStateValue;
                  securityRuleJsonFormatInstance.provisioningState = provisioningStateInstance;
                }
              }
              
              var nameValue = valueValue['name'];
              if (nameValue !== null && nameValue !== undefined) {
                var nameInstance = nameValue;
                securityRuleJsonFormatInstance.name = nameInstance;
              }
              
              var etagValue = valueValue['etag'];
              if (etagValue !== null && etagValue !== undefined) {
                var etagInstance = etagValue;
                securityRuleJsonFormatInstance.etag = etagInstance;
              }
              
              var idValue = valueValue['id'];
              if (idValue !== null && idValue !== undefined) {
                var idInstance = idValue;
                securityRuleJsonFormatInstance.id = idInstance;
              }
            }
          }
          
          var nextLinkValue = responseDoc['nextLink'];
          if (nextLinkValue !== null && nextLinkValue !== undefined) {
            var nextLinkInstance = nextLinkValue;
            result.nextLink = nextLinkInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  return SecurityRuleOperations;
})();

var SubnetOperations = ( /** @lends SubnetOperations */ function() {
  /**
   * @class
   * The Network Resource Provider API includes operations for managing the
   * subnets for your subscription.
   * __NOTE__: An instance of this class is automatically created for an
   * instance of the [NetworkResourceProviderClient] {@link
   * NetworkResourceProviderClient~NetworkResourceProviderClient}.
   * See [subnets] {@link
   * NetworkResourceProviderClient~NetworkResourceProviderClient#subnets}.
   * Initializes a new instance of the SubnetOperations class.
   * @constructor
   * 
   * @param {NetworkResourceProviderClient} client Reference to the service
   * client.
   */
  function SubnetOperations(client) {
    this.client = client;
  }
  
  /**
   * The Put Subnet operation creates/updates a subnet in thespecified virtual
   * network
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} virtualNetworkName The name of the virtual network.
   * 
   * @param {string} subnetName The name of the subnet.
   * 
   * @param {Subnet} subnetParameters Parameters supplied to the create/update
   * Subnet operation
   * 
   * @param {string} subnetParameters.addressPrefix Gets or sets Address prefix
   * for the subnet.
   * 
   * @param {ResourceId} [subnetParameters.networkSecurityGroup] Gets or sets
   * the reference of the NetworkSecurityGroup resource
   * 
   * @param {string} [subnetParameters.networkSecurityGroup.id] Id of the
   * resource
   * 
   * @param {IEnumerable} [subnetParameters.ipConfigurations] Gets array of
   * references to the network interface IP configurations using subnet
   * 
   * @param {ResourceId} [subnetParameters.routeTable] Gets or sets the
   * reference of the RouteTable resource
   * 
   * @param {string} [subnetParameters.routeTable.id] Id of the resource
   * 
   * @param {string} [subnetParameters.provisioningState] Gets or sets
   * Provisioning state of the PublicIP resource Updating/Deleting/Failed
   * 
   * @param {string} [subnetParameters.name] Gets name of the resource that is
   * unique within a resource group. This name can be used to access the
   * resource
   * 
   * @param {string} [subnetParameters.etag] A unique read-only string that
   * changes whenever the resource is updated
   * 
   * @param {string} [subnetParameters.id] Id of the resource
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  SubnetOperations.prototype.beginCreateOrUpdating = function(resourceGroupName, virtualNetworkName, subnetName, subnetParameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (virtualNetworkName === null || virtualNetworkName === undefined) {
      return callback(new Error('virtualNetworkName cannot be null.'));
    }
    if (subnetName === null || subnetName === undefined) {
      return callback(new Error('subnetName cannot be null.'));
    }
    if (subnetParameters === null || subnetParameters === undefined) {
      return callback(new Error('subnetParameters cannot be null.'));
    }
    if (subnetParameters.addressPrefix === null || subnetParameters.addressPrefix === undefined) {
      return callback(new Error('subnetParameters.addressPrefix cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Network';
    url2 = url2 + '/virtualnetworks/';
    url2 = url2 + encodeURIComponent(virtualNetworkName);
    url2 = url2 + '/subnets/';
    url2 = url2 + encodeURIComponent(subnetName);
    var queryParameters = [];
    queryParameters.push('api-version=2015-05-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = null;
    
    var subnetJsonFormatValue = {};
    requestDoc = subnetJsonFormatValue;
    
    var propertiesValue = {};
    subnetJsonFormatValue['properties'] = propertiesValue;
    
    propertiesValue['addressPrefix'] = subnetParameters.addressPrefix;
    
    if (subnetParameters.networkSecurityGroup !== null && subnetParameters.networkSecurityGroup !== undefined) {
      var networkSecurityGroupValue = {};
      propertiesValue['networkSecurityGroup'] = networkSecurityGroupValue;
      
      if (subnetParameters.networkSecurityGroup.id !== null && subnetParameters.networkSecurityGroup.id !== undefined) {
        networkSecurityGroupValue['id'] = subnetParameters.networkSecurityGroup.id;
      }
    }
    
    if (subnetParameters.routeTable !== null && subnetParameters.routeTable !== undefined) {
      var routeTableValue = {};
      propertiesValue['routeTable'] = routeTableValue;
      
      if (subnetParameters.routeTable.id !== null && subnetParameters.routeTable.id !== undefined) {
        routeTableValue['id'] = subnetParameters.routeTable.id;
      }
    }
    
    if (subnetParameters.ipConfigurations !== null && subnetParameters.ipConfigurations !== undefined) {
      var ipConfigurationsArray = [];
      for (var loweredIndex1 = 0; loweredIndex1 < subnetParameters.ipConfigurations.length; loweredIndex1 = loweredIndex1 + 1) {
        var ipConfigurationsItem = subnetParameters.ipConfigurations[loweredIndex1];
        var resourceIdValue = {};
        ipConfigurationsArray.push(resourceIdValue);
        
        if (ipConfigurationsItem.id !== null && ipConfigurationsItem.id !== undefined) {
          resourceIdValue['id'] = ipConfigurationsItem.id;
        }
      }
      propertiesValue['ipConfigurations'] = ipConfigurationsArray;
    }
    
    if (subnetParameters.provisioningState !== null && subnetParameters.provisioningState !== undefined) {
      propertiesValue['provisioningState'] = subnetParameters.provisioningState;
    }
    
    if (subnetParameters.name !== null && subnetParameters.name !== undefined) {
      subnetJsonFormatValue['name'] = subnetParameters.name;
    }
    
    if (subnetParameters.etag !== null && subnetParameters.etag !== undefined) {
      subnetJsonFormatValue['etag'] = subnetParameters.etag;
    }
    
    if (subnetParameters.id !== null && subnetParameters.id !== undefined) {
      subnetJsonFormatValue['id'] = subnetParameters.id;
    }
    
    requestContent = JSON.stringify(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200 && statusCode !== 201) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200 || statusCode === 201) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var subnetInstance = { ipConfigurations: [] };
          result.subnet = subnetInstance;
          
          var propertiesValue2 = responseDoc['properties'];
          if (propertiesValue2 !== null && propertiesValue2 !== undefined) {
            var addressPrefixValue = propertiesValue2['addressPrefix'];
            if (addressPrefixValue !== null && addressPrefixValue !== undefined) {
              var addressPrefixInstance = addressPrefixValue;
              subnetInstance.addressPrefix = addressPrefixInstance;
            }
            
            var networkSecurityGroupValue2 = propertiesValue2['networkSecurityGroup'];
            if (networkSecurityGroupValue2 !== null && networkSecurityGroupValue2 !== undefined) {
              var networkSecurityGroupInstance = {};
              subnetInstance.networkSecurityGroup = networkSecurityGroupInstance;
              
              var idValue = networkSecurityGroupValue2['id'];
              if (idValue !== null && idValue !== undefined) {
                var idInstance = idValue;
                networkSecurityGroupInstance.id = idInstance;
              }
            }
            
            var routeTableValue2 = propertiesValue2['routeTable'];
            if (routeTableValue2 !== null && routeTableValue2 !== undefined) {
              var routeTableInstance = {};
              subnetInstance.routeTable = routeTableInstance;
              
              var idValue2 = routeTableValue2['id'];
              if (idValue2 !== null && idValue2 !== undefined) {
                var idInstance2 = idValue2;
                routeTableInstance.id = idInstance2;
              }
            }
            
            var ipConfigurationsArray2 = propertiesValue2['ipConfigurations'];
            if (ipConfigurationsArray2 !== null && ipConfigurationsArray2 !== undefined) {
              for (var loweredIndex2 = 0; loweredIndex2 < ipConfigurationsArray2.length; loweredIndex2 = loweredIndex2 + 1) {
                var ipConfigurationsValue = ipConfigurationsArray2[loweredIndex2];
                var resourceIdInstance = {};
                subnetInstance.ipConfigurations.push(resourceIdInstance);
                
                var idValue3 = ipConfigurationsValue['id'];
                if (idValue3 !== null && idValue3 !== undefined) {
                  var idInstance3 = idValue3;
                  resourceIdInstance.id = idInstance3;
                }
              }
            }
            
            var provisioningStateValue = propertiesValue2['provisioningState'];
            if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
              var provisioningStateInstance = provisioningStateValue;
              subnetInstance.provisioningState = provisioningStateInstance;
            }
          }
          
          var nameValue = responseDoc['name'];
          if (nameValue !== null && nameValue !== undefined) {
            var nameInstance = nameValue;
            subnetInstance.name = nameInstance;
          }
          
          var etagValue = responseDoc['etag'];
          if (etagValue !== null && etagValue !== undefined) {
            var etagInstance = etagValue;
            subnetInstance.etag = etagInstance;
          }
          
          var idValue4 = responseDoc['id'];
          if (idValue4 !== null && idValue4 !== undefined) {
            var idInstance4 = idValue4;
            subnetInstance.id = idInstance4;
          }
          
          var errorValue = responseDoc['error'];
          if (errorValue !== null && errorValue !== undefined) {
            var errorInstance = { details: [] };
            result.error = errorInstance;
            
            var codeValue = errorValue['code'];
            if (codeValue !== null && codeValue !== undefined) {
              var codeInstance = codeValue;
              errorInstance.code = codeInstance;
            }
            
            var messageValue = errorValue['message'];
            if (messageValue !== null && messageValue !== undefined) {
              var messageInstance = messageValue;
              errorInstance.message = messageInstance;
            }
            
            var targetValue = errorValue['target'];
            if (targetValue !== null && targetValue !== undefined) {
              var targetInstance = targetValue;
              errorInstance.target = targetInstance;
            }
            
            var detailsArray = errorValue['details'];
            if (detailsArray !== null && detailsArray !== undefined) {
              for (var loweredIndex3 = 0; loweredIndex3 < detailsArray.length; loweredIndex3 = loweredIndex3 + 1) {
                var detailsValue = detailsArray[loweredIndex3];
                var errorDetailsInstance = {};
                errorInstance.details.push(errorDetailsInstance);
                
                var codeValue2 = detailsValue['code'];
                if (codeValue2 !== null && codeValue2 !== undefined) {
                  var codeInstance2 = codeValue2;
                  errorDetailsInstance.code = codeInstance2;
                }
                
                var targetValue2 = detailsValue['target'];
                if (targetValue2 !== null && targetValue2 !== undefined) {
                  var targetInstance2 = targetValue2;
                  errorDetailsInstance.target = targetInstance2;
                }
                
                var messageValue2 = detailsValue['message'];
                if (messageValue2 !== null && messageValue2 !== undefined) {
                  var messageInstance2 = messageValue2;
                  errorDetailsInstance.message = messageInstance2;
                }
              }
            }
            
            var innerErrorValue = errorValue['innerError'];
            if (innerErrorValue !== null && innerErrorValue !== undefined) {
              var innerErrorInstance = innerErrorValue;
              errorInstance.innerError = innerErrorInstance;
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      result.azureAsyncOperation = response.headers['azure-asyncoperation'];
      result.retryAfter = parseInt(response.headers['retry-after'], 10);
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The delete subnet operation deletes the specified subnet.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} virtualNetworkName The name of the virtual network.
   * 
   * @param {string} subnetName The name of the subnet.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  SubnetOperations.prototype.beginDeleting = function(resourceGroupName, virtualNetworkName, subnetName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (virtualNetworkName === null || virtualNetworkName === undefined) {
      return callback(new Error('virtualNetworkName cannot be null.'));
    }
    if (subnetName === null || subnetName === undefined) {
      return callback(new Error('subnetName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Network';
    url2 = url2 + '/virtualnetworks/';
    url2 = url2 + encodeURIComponent(virtualNetworkName);
    url2 = url2 + '/subnets/';
    url2 = url2 + encodeURIComponent(subnetName);
    var queryParameters = [];
    queryParameters.push('api-version=2015-05-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'DELETE';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200 && statusCode !== 202 && statusCode !== 204) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      result = {};
      result.statusCode = statusCode;
      result.azureAsyncOperation = response.headers['azure-asyncoperation'];
      result.retryAfter = parseInt(response.headers['retry-after'], 10);
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The Put Subnet operation creates/updates a subnet in thespecified virtual
   * network
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} virtualNetworkName The name of the virtual network.
   * 
   * @param {string} subnetName The name of the subnet.
   * 
   * @param {Subnet} subnetParameters Parameters supplied to the create/update
   * Subnet operation
   * 
   * @param {string} subnetParameters.addressPrefix Gets or sets Address prefix
   * for the subnet.
   * 
   * @param {ResourceId} [subnetParameters.networkSecurityGroup] Gets or sets
   * the reference of the NetworkSecurityGroup resource
   * 
   * @param {string} [subnetParameters.networkSecurityGroup.id] Id of the
   * resource
   * 
   * @param {IEnumerable} [subnetParameters.ipConfigurations] Gets array of
   * references to the network interface IP configurations using subnet
   * 
   * @param {ResourceId} [subnetParameters.routeTable] Gets or sets the
   * reference of the RouteTable resource
   * 
   * @param {string} [subnetParameters.routeTable.id] Id of the resource
   * 
   * @param {string} [subnetParameters.provisioningState] Gets or sets
   * Provisioning state of the PublicIP resource Updating/Deleting/Failed
   * 
   * @param {string} [subnetParameters.name] Gets name of the resource that is
   * unique within a resource group. This name can be used to access the
   * resource
   * 
   * @param {string} [subnetParameters.etag] A unique read-only string that
   * changes whenever the resource is updated
   * 
   * @param {string} [subnetParameters.id] Id of the resource
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  SubnetOperations.prototype.createOrUpdate = function(resourceGroupName, virtualNetworkName, subnetName, subnetParameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.subnets.beginCreateOrUpdating(resourceGroupName, virtualNetworkName, subnetName, subnetParameters, function (err, result) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var delayInSeconds = result.retryAfter;
      if (delayInSeconds === 0) {
        delayInSeconds = 30;
      }
      if (client2.longRunningOperationInitialTimeout >= 0) {
        delayInSeconds = client2.longRunningOperationInitialTimeout;
      }
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.getLongRunningOperationStatus(result.azureAsyncOperation, function (err2, result2) {
            if (err2 !== null && err2 !== undefined) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                return callback(null, result2);
              } else {
                delayInSeconds = result2.retryAfter;
                if (delayInSeconds === 0) {
                  delayInSeconds = 15;
                }
                if (client2.longRunningOperationRetryTimeout >= 0) {
                  delayInSeconds = client2.longRunningOperationRetryTimeout;
                }
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  /**
   * The delete subnet operation deletes the specified subnet.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} virtualNetworkName The name of the virtual network.
   * 
   * @param {string} subnetName The name of the subnet.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  SubnetOperations.prototype.deleteMethod = function(resourceGroupName, virtualNetworkName, subnetName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.subnets.beginDeleting(resourceGroupName, virtualNetworkName, subnetName, function (err, result) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var delayInSeconds = result.retryAfter;
      if (delayInSeconds === 0) {
        delayInSeconds = 30;
      }
      if (client2.longRunningOperationInitialTimeout >= 0) {
        delayInSeconds = client2.longRunningOperationInitialTimeout;
      }
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.getLongRunningOperationStatus(result.azureAsyncOperation, function (err2, result2) {
            if (err2 !== null && err2 !== undefined) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                return callback(null, result2);
              } else {
                delayInSeconds = result2.retryAfter;
                if (delayInSeconds === 0) {
                  delayInSeconds = 15;
                }
                if (client2.longRunningOperationRetryTimeout >= 0) {
                  delayInSeconds = client2.longRunningOperationRetryTimeout;
                }
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  /**
   * The Get subnet operation retreives information about the specified subnet.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} virtualNetworkName The name of the virtual network.
   * 
   * @param {string} subnetName The name of the subnet.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  SubnetOperations.prototype.get = function(resourceGroupName, virtualNetworkName, subnetName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (virtualNetworkName === null || virtualNetworkName === undefined) {
      return callback(new Error('virtualNetworkName cannot be null.'));
    }
    if (subnetName === null || subnetName === undefined) {
      return callback(new Error('subnetName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Network';
    url2 = url2 + '/virtualnetworks/';
    url2 = url2 + encodeURIComponent(virtualNetworkName);
    url2 = url2 + '/subnets/';
    url2 = url2 + encodeURIComponent(subnetName);
    var queryParameters = [];
    queryParameters.push('api-version=2015-05-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var subnetInstance = { ipConfigurations: [] };
          result.subnet = subnetInstance;
          
          var propertiesValue = responseDoc['properties'];
          if (propertiesValue !== null && propertiesValue !== undefined) {
            var addressPrefixValue = propertiesValue['addressPrefix'];
            if (addressPrefixValue !== null && addressPrefixValue !== undefined) {
              var addressPrefixInstance = addressPrefixValue;
              subnetInstance.addressPrefix = addressPrefixInstance;
            }
            
            var networkSecurityGroupValue = propertiesValue['networkSecurityGroup'];
            if (networkSecurityGroupValue !== null && networkSecurityGroupValue !== undefined) {
              var networkSecurityGroupInstance = {};
              subnetInstance.networkSecurityGroup = networkSecurityGroupInstance;
              
              var idValue = networkSecurityGroupValue['id'];
              if (idValue !== null && idValue !== undefined) {
                var idInstance = idValue;
                networkSecurityGroupInstance.id = idInstance;
              }
            }
            
            var routeTableValue = propertiesValue['routeTable'];
            if (routeTableValue !== null && routeTableValue !== undefined) {
              var routeTableInstance = {};
              subnetInstance.routeTable = routeTableInstance;
              
              var idValue2 = routeTableValue['id'];
              if (idValue2 !== null && idValue2 !== undefined) {
                var idInstance2 = idValue2;
                routeTableInstance.id = idInstance2;
              }
            }
            
            var ipConfigurationsArray = propertiesValue['ipConfigurations'];
            if (ipConfigurationsArray !== null && ipConfigurationsArray !== undefined) {
              for (var loweredIndex1 = 0; loweredIndex1 < ipConfigurationsArray.length; loweredIndex1 = loweredIndex1 + 1) {
                var ipConfigurationsValue = ipConfigurationsArray[loweredIndex1];
                var resourceIdInstance = {};
                subnetInstance.ipConfigurations.push(resourceIdInstance);
                
                var idValue3 = ipConfigurationsValue['id'];
                if (idValue3 !== null && idValue3 !== undefined) {
                  var idInstance3 = idValue3;
                  resourceIdInstance.id = idInstance3;
                }
              }
            }
            
            var provisioningStateValue = propertiesValue['provisioningState'];
            if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
              var provisioningStateInstance = provisioningStateValue;
              subnetInstance.provisioningState = provisioningStateInstance;
            }
          }
          
          var nameValue = responseDoc['name'];
          if (nameValue !== null && nameValue !== undefined) {
            var nameInstance = nameValue;
            subnetInstance.name = nameInstance;
          }
          
          var etagValue = responseDoc['etag'];
          if (etagValue !== null && etagValue !== undefined) {
            var etagInstance = etagValue;
            subnetInstance.etag = etagInstance;
          }
          
          var idValue4 = responseDoc['id'];
          if (idValue4 !== null && idValue4 !== undefined) {
            var idInstance4 = idValue4;
            subnetInstance.id = idInstance4;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The List subnets opertion retrieves all the subnets in a virtual network.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} virtualNetworkName The name of the virtual network.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  SubnetOperations.prototype.list = function(resourceGroupName, virtualNetworkName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (virtualNetworkName === null || virtualNetworkName === undefined) {
      return callback(new Error('virtualNetworkName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Network';
    url2 = url2 + '/virtualnetworks/';
    url2 = url2 + encodeURIComponent(virtualNetworkName);
    url2 = url2 + '/subnets';
    var queryParameters = [];
    queryParameters.push('api-version=2015-05-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = { subnets: [] };
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var valueArray = responseDoc['value'];
          if (valueArray !== null && valueArray !== undefined) {
            for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var valueValue = valueArray[loweredIndex1];
              var subnetJsonFormatInstance = { ipConfigurations: [] };
              result.subnets.push(subnetJsonFormatInstance);
              
              var propertiesValue = valueValue['properties'];
              if (propertiesValue !== null && propertiesValue !== undefined) {
                var addressPrefixValue = propertiesValue['addressPrefix'];
                if (addressPrefixValue !== null && addressPrefixValue !== undefined) {
                  var addressPrefixInstance = addressPrefixValue;
                  subnetJsonFormatInstance.addressPrefix = addressPrefixInstance;
                }
                
                var networkSecurityGroupValue = propertiesValue['networkSecurityGroup'];
                if (networkSecurityGroupValue !== null && networkSecurityGroupValue !== undefined) {
                  var networkSecurityGroupInstance = {};
                  subnetJsonFormatInstance.networkSecurityGroup = networkSecurityGroupInstance;
                  
                  var idValue = networkSecurityGroupValue['id'];
                  if (idValue !== null && idValue !== undefined) {
                    var idInstance = idValue;
                    networkSecurityGroupInstance.id = idInstance;
                  }
                }
                
                var routeTableValue = propertiesValue['routeTable'];
                if (routeTableValue !== null && routeTableValue !== undefined) {
                  var routeTableInstance = {};
                  subnetJsonFormatInstance.routeTable = routeTableInstance;
                  
                  var idValue2 = routeTableValue['id'];
                  if (idValue2 !== null && idValue2 !== undefined) {
                    var idInstance2 = idValue2;
                    routeTableInstance.id = idInstance2;
                  }
                }
                
                var ipConfigurationsArray = propertiesValue['ipConfigurations'];
                if (ipConfigurationsArray !== null && ipConfigurationsArray !== undefined) {
                  for (var loweredIndex2 = 0; loweredIndex2 < ipConfigurationsArray.length; loweredIndex2 = loweredIndex2 + 1) {
                    var ipConfigurationsValue = ipConfigurationsArray[loweredIndex2];
                    var resourceIdInstance = {};
                    subnetJsonFormatInstance.ipConfigurations.push(resourceIdInstance);
                    
                    var idValue3 = ipConfigurationsValue['id'];
                    if (idValue3 !== null && idValue3 !== undefined) {
                      var idInstance3 = idValue3;
                      resourceIdInstance.id = idInstance3;
                    }
                  }
                }
                
                var provisioningStateValue = propertiesValue['provisioningState'];
                if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
                  var provisioningStateInstance = provisioningStateValue;
                  subnetJsonFormatInstance.provisioningState = provisioningStateInstance;
                }
              }
              
              var nameValue = valueValue['name'];
              if (nameValue !== null && nameValue !== undefined) {
                var nameInstance = nameValue;
                subnetJsonFormatInstance.name = nameInstance;
              }
              
              var etagValue = valueValue['etag'];
              if (etagValue !== null && etagValue !== undefined) {
                var etagInstance = etagValue;
                subnetJsonFormatInstance.etag = etagInstance;
              }
              
              var idValue4 = valueValue['id'];
              if (idValue4 !== null && idValue4 !== undefined) {
                var idInstance4 = idValue4;
                subnetJsonFormatInstance.id = idInstance4;
              }
            }
          }
          
          var nextLinkValue = responseDoc['nextLink'];
          if (nextLinkValue !== null && nextLinkValue !== undefined) {
            var nextLinkInstance = nextLinkValue;
            result.nextLink = nextLinkInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  return SubnetOperations;
})();

var UsageOperations = ( /** @lends UsageOperations */ function() {
  /**
   * @class
   * Operations for listing usage.
   * __NOTE__: An instance of this class is automatically created for an
   * instance of the [NetworkResourceProviderClient] {@link
   * NetworkResourceProviderClient~NetworkResourceProviderClient}.
   * See [usages] {@link
   * NetworkResourceProviderClient~NetworkResourceProviderClient#usages}.
   * Initializes a new instance of the UsageOperations class.
   * @constructor
   * 
   * @param {NetworkResourceProviderClient} client Reference to the service
   * client.
   */
  function UsageOperations(client) {
    this.client = client;
  }
  
  /**
   * Lists compute usages for a subscription.
   * 
   * @param {string} location The location upon which resource usage is queried.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  UsageOperations.prototype.list = function(location, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (location === null || location === undefined) {
      return callback(new Error('location cannot be null.'));
    }
    if (location !== null && location !== undefined && location.length > 1000) {
      return callback(new Error('location is outside the valid range.'));
    }
    if (/^[-\w\._]+$/.test(location) === false) {
      return callback(new Error('location is outside the valid range.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Network';
    url2 = url2 + '/locations/';
    url2 = url2 + encodeURIComponent(location);
    url2 = url2 + '/usages';
    var queryParameters = [];
    queryParameters.push('api-version=2015-05-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = { usages: [] };
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var valueArray = responseDoc['value'];
          if (valueArray !== null && valueArray !== undefined) {
            for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var valueValue = valueArray[loweredIndex1];
              var usageInstance = {};
              result.usages.push(usageInstance);
              
              var unitValue = valueValue['unit'];
              if (unitValue !== null && unitValue !== undefined) {
                var unitInstance = unitValue;
                usageInstance.unit = unitInstance;
              }
              
              var currentValueValue = valueValue['currentValue'];
              if (currentValueValue !== null && currentValueValue !== undefined) {
                var currentValueInstance = currentValueValue;
                usageInstance.currentValue = currentValueInstance;
              }
              
              var limitValue = valueValue['limit'];
              if (limitValue !== null && limitValue !== undefined) {
                var limitInstance = limitValue;
                usageInstance.limit = limitInstance;
              }
              
              var nameValue = valueValue['name'];
              if (nameValue !== null && nameValue !== undefined) {
                var nameInstance = {};
                usageInstance.name = nameInstance;
                
                var valueValue2 = nameValue['value'];
                if (valueValue2 !== null && valueValue2 !== undefined) {
                  var valueInstance = valueValue2;
                  nameInstance.value = valueInstance;
                }
                
                var localizedValueValue = nameValue['localizedValue'];
                if (localizedValueValue !== null && localizedValueValue !== undefined) {
                  var localizedValueInstance = localizedValueValue;
                  nameInstance.localizedValue = localizedValueInstance;
                }
              }
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  return UsageOperations;
})();

var VirtualNetworkGatewayConnectionOperations = ( /** @lends VirtualNetworkGatewayConnectionOperations */ function() {
  /**
   * @class
   * The Network Resource Provider API includes operations for managing the
   * Virtual network Gateway for your subscription.
   * __NOTE__: An instance of this class is automatically created for an
   * instance of the [NetworkResourceProviderClient] {@link
   * NetworkResourceProviderClient~NetworkResourceProviderClient}.
   * See [virtualNetworkGatewayConnections] {@link
   * NetworkResourceProviderClient~NetworkResourceProviderClient#virtualNetworkGatewayConnections}.
   * Initializes a new instance of the
   * VirtualNetworkGatewayConnectionOperations class.
   * @constructor
   * 
   * @param {NetworkResourceProviderClient} client Reference to the service
   * client.
   */
  function VirtualNetworkGatewayConnectionOperations(client) {
    this.client = client;
  }
  
  /**
   * The Put VirtualNetworkGatewayConnection operation creates/updates a
   * virtual network gateway connection in the specified resource group
   * through Network resource provider.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} virtualNetworkGatewayConnectionName The name of the
   * virtual network gateway conenction.
   * 
   * @param {VirtualNetworkGatewayConnection} parameters Parameters supplied to
   * the Begin Create or update Virtual Network Gateway connection operation
   * through Network resource provider.
   * 
   * @param {string} [parameters.authorizationKey] Gets or sets the
   * authorization key
   * 
   * @param {VirtualNetworkGateway} [parameters.virtualNetworkGateway1]
   * 
   * @param {IEnumerable} [parameters.virtualNetworkGateway1.ipConfigurations]
   * IpConfigurations for Virtual network gateway.
   * 
   * @param {string} [parameters.virtualNetworkGateway1.gatewayType] The type
   * of this virtual network gateway.
   * 
   * @param {string} [parameters.virtualNetworkGateway1.vpnType] The type of
   * this virtual network gateway.
   * 
   * @param {boolean} [parameters.virtualNetworkGateway1.enableBgp] EnableBgp
   * Flag
   * 
   * @param {BgpSettings} [parameters.virtualNetworkGateway1.bgpSettings]
   * Settings for this virtual network gateway's BGP speaker
   * 
   * @param {number} [parameters.virtualNetworkGateway1.bgpSettings.asn]
   * Autonomous System Number
   * 
   * @param {string}
   * [parameters.virtualNetworkGateway1.bgpSettings.bgpPeeringAddress] BGP
   * speaker's IP/BGP identifier
   * 
   * @param {number} [parameters.virtualNetworkGateway1.bgpSettings.peerWeight]
   * Weight given to routes learned from this BGP speaker
   * 
   * @param {ResourceId} [parameters.virtualNetworkGateway1.gatewayDefaultSite]
   * Gets or sets the reference of the LocalNetworkGateway resource which
   * represents Local network site having default routes. Assign Null value in
   * case of removing existing default site setting.
   * 
   * @param {string} [parameters.virtualNetworkGateway1.gatewayDefaultSite.id]
   * Id of the resource
   * 
   * @param {string} [parameters.virtualNetworkGateway1.provisioningState] Gets
   * or sets Provisioning state of the VirtualNetworkGateway resource
   * Updating/Deleting/Failed
   * 
   * @param {string} [parameters.virtualNetworkGateway1.resourceGuid] Gets or
   * sets resource guid property of the VirtualNetworkGateway resource
   * 
   * @param {string} [parameters.virtualNetworkGateway1.etag] Gets a unique
   * read-only string that changes whenever the resource is updated
   * 
   * @param {string} [parameters.virtualNetworkGateway1.id] Gets or sets the ID
   * of the resource.
   * 
   * @param {string} [parameters.virtualNetworkGateway1.name] Gets or sets the
   * name of the resource.
   * 
   * @param {string} [parameters.virtualNetworkGateway1.type] Gets or sets the
   * type of the resource.
   * 
   * @param {string} [parameters.virtualNetworkGateway1.location] Gets or sets
   * the location of the resource.
   * 
   * @param {object} [parameters.virtualNetworkGateway1.tags] Gets or sets the
   * tags attached to the resource.
   * 
   * @param {VirtualNetworkGateway} [parameters.virtualNetworkGateway2]
   * 
   * @param {IEnumerable} [parameters.virtualNetworkGateway2.ipConfigurations]
   * IpConfigurations for Virtual network gateway.
   * 
   * @param {string} [parameters.virtualNetworkGateway2.gatewayType] The type
   * of this virtual network gateway.
   * 
   * @param {string} [parameters.virtualNetworkGateway2.vpnType] The type of
   * this virtual network gateway.
   * 
   * @param {boolean} [parameters.virtualNetworkGateway2.enableBgp] EnableBgp
   * Flag
   * 
   * @param {BgpSettings} [parameters.virtualNetworkGateway2.bgpSettings]
   * Settings for this virtual network gateway's BGP speaker
   * 
   * @param {number} [parameters.virtualNetworkGateway2.bgpSettings.asn]
   * Autonomous System Number
   * 
   * @param {string}
   * [parameters.virtualNetworkGateway2.bgpSettings.bgpPeeringAddress] BGP
   * speaker's IP/BGP identifier
   * 
   * @param {number} [parameters.virtualNetworkGateway2.bgpSettings.peerWeight]
   * Weight given to routes learned from this BGP speaker
   * 
   * @param {ResourceId} [parameters.virtualNetworkGateway2.gatewayDefaultSite]
   * Gets or sets the reference of the LocalNetworkGateway resource which
   * represents Local network site having default routes. Assign Null value in
   * case of removing existing default site setting.
   * 
   * @param {string} [parameters.virtualNetworkGateway2.gatewayDefaultSite.id]
   * Id of the resource
   * 
   * @param {string} [parameters.virtualNetworkGateway2.provisioningState] Gets
   * or sets Provisioning state of the VirtualNetworkGateway resource
   * Updating/Deleting/Failed
   * 
   * @param {string} [parameters.virtualNetworkGateway2.resourceGuid] Gets or
   * sets resource guid property of the VirtualNetworkGateway resource
   * 
   * @param {string} [parameters.virtualNetworkGateway2.etag] Gets a unique
   * read-only string that changes whenever the resource is updated
   * 
   * @param {string} [parameters.virtualNetworkGateway2.id] Gets or sets the ID
   * of the resource.
   * 
   * @param {string} [parameters.virtualNetworkGateway2.name] Gets or sets the
   * name of the resource.
   * 
   * @param {string} [parameters.virtualNetworkGateway2.type] Gets or sets the
   * type of the resource.
   * 
   * @param {string} [parameters.virtualNetworkGateway2.location] Gets or sets
   * the location of the resource.
   * 
   * @param {object} [parameters.virtualNetworkGateway2.tags] Gets or sets the
   * tags attached to the resource.
   * 
   * @param {LocalNetworkGateway} [parameters.localNetworkGateway2]
   * 
   * @param {AddressSpace}
   * [parameters.localNetworkGateway2.localNetworkAddressSpace] Local network
   * site Address space
   * 
   * @param {IEnumerable}
   * [parameters.localNetworkGateway2.localNetworkAddressSpace.addressPrefixes]
   * Gets or sets List of address blocks reserved for this virtual network in
   * CIDR notation
   * 
   * @param {string} [parameters.localNetworkGateway2.gatewayIpAddress] IP
   * address of local network gateway.
   * 
   * @param {BgpSettings} [parameters.localNetworkGateway2.bgpSettings] Local
   * network gateway BGP speaker's settings
   * 
   * @param {number} [parameters.localNetworkGateway2.bgpSettings.asn]
   * Autonomous System Number
   * 
   * @param {string}
   * [parameters.localNetworkGateway2.bgpSettings.bgpPeeringAddress] BGP
   * speaker's IP/BGP identifier
   * 
   * @param {number} [parameters.localNetworkGateway2.bgpSettings.peerWeight]
   * Weight given to routes learned from this BGP speaker
   * 
   * @param {string} [parameters.localNetworkGateway2.provisioningState] Gets
   * or sets Provisioning state of the LocalNetworkGateway resource
   * Updating/Deleting/Failed
   * 
   * @param {string} [parameters.localNetworkGateway2.resourceGuid] Gets or
   * sets resource guid property of the LocalNetworkGateway resource
   * 
   * @param {string} [parameters.localNetworkGateway2.etag] Gets a unique
   * read-only string that changes whenever the resource is updated
   * 
   * @param {string} [parameters.localNetworkGateway2.id] Gets or sets the ID
   * of the resource.
   * 
   * @param {string} [parameters.localNetworkGateway2.name] Gets or sets the
   * name of the resource.
   * 
   * @param {string} [parameters.localNetworkGateway2.type] Gets or sets the
   * type of the resource.
   * 
   * @param {string} [parameters.localNetworkGateway2.location] Gets or sets
   * the location of the resource.
   * 
   * @param {object} [parameters.localNetworkGateway2.tags] Gets or sets the
   * tags attached to the resource.
   * 
   * @param {string} [parameters.connectionType] Gateway connection type
   * -Ipsec/Dedicated/VpnClient/Vnet2Vnet
   * 
   * @param {number} [parameters.routingWeight] The Routing weight.
   * 
   * @param {string} [parameters.sharedKey] The Ipsec share key.
   * 
   * @param {boolean} [parameters.enableBgp] Whether to establish a BGP session
   * over this connection
   * 
   * @param {string} [parameters.connectionStatus] Virtual network Gateway
   * connection status
   * 
   * @param {number} [parameters.egressBytesTransferred] The Egress Bytes
   * Transferred in this connection
   * 
   * @param {number} [parameters.ingressBytesTransferred] The Ingress Bytes
   * Transferred in this connection
   * 
   * @param {ResourceId} [parameters.peer] The reference to peerings resource.
   * 
   * @param {string} [parameters.peer.id] Id of the resource
   * 
   * @param {string} [parameters.provisioningState] Gets or sets Provisioning
   * state of the VirtualNetworkGatewayConnection resource
   * Updating/Deleting/Failed
   * 
   * @param {string} [parameters.resourceGuid] Gets or sets resource guid
   * property of the VirtualNetworkGatewayConnection resource
   * 
   * @param {string} [parameters.etag] Gets a unique read-only string that
   * changes whenever the resource is updated
   * 
   * @param {string} [parameters.id] Gets or sets the ID of the resource.
   * 
   * @param {string} [parameters.name] Gets or sets the name of the resource.
   * 
   * @param {string} [parameters.type] Gets or sets the type of the resource.
   * 
   * @param {string} [parameters.location] Gets or sets the location of the
   * resource.
   * 
   * @param {object} [parameters.tags] Gets or sets the tags attached to the
   * resource.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  VirtualNetworkGatewayConnectionOperations.prototype.beginCreateOrUpdating = function(resourceGroupName, virtualNetworkGatewayConnectionName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (virtualNetworkGatewayConnectionName === null || virtualNetworkGatewayConnectionName === undefined) {
      return callback(new Error('virtualNetworkGatewayConnectionName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Network';
    url2 = url2 + '/connections/';
    url2 = url2 + encodeURIComponent(virtualNetworkGatewayConnectionName);
    var queryParameters = [];
    queryParameters.push('api-version=2015-05-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = null;
    
    var virtualNetworkGatewayConnectionJsonFormatValue = {};
    requestDoc = virtualNetworkGatewayConnectionJsonFormatValue;
    
    var propertiesValue = {};
    virtualNetworkGatewayConnectionJsonFormatValue['properties'] = propertiesValue;
    
    if (parameters.virtualNetworkGateway1 !== null && parameters.virtualNetworkGateway1 !== undefined) {
      var virtualNetworkGateway1Value = {};
      propertiesValue['virtualNetworkGateway1'] = virtualNetworkGateway1Value;
      
      var propertiesValue2 = {};
      virtualNetworkGateway1Value['properties'] = propertiesValue2;
      
      if (parameters.virtualNetworkGateway1.ipConfigurations !== null && parameters.virtualNetworkGateway1.ipConfigurations !== undefined) {
        var ipConfigurationsArray = [];
        for (var loweredIndex1 = 0; loweredIndex1 < parameters.virtualNetworkGateway1.ipConfigurations.length; loweredIndex1 = loweredIndex1 + 1) {
          var ipConfigurationsItem = parameters.virtualNetworkGateway1.ipConfigurations[loweredIndex1];
          var virtualNetworkGatewayIpConfigurationJsonFormatValue = {};
          ipConfigurationsArray.push(virtualNetworkGatewayIpConfigurationJsonFormatValue);
          
          var propertiesValue3 = {};
          virtualNetworkGatewayIpConfigurationJsonFormatValue['properties'] = propertiesValue3;
          
          if (ipConfigurationsItem.privateIpAddress !== null && ipConfigurationsItem.privateIpAddress !== undefined) {
            propertiesValue3['privateIPAddress'] = ipConfigurationsItem.privateIpAddress;
          }
          
          if (ipConfigurationsItem.privateIpAllocationMethod !== null && ipConfigurationsItem.privateIpAllocationMethod !== undefined) {
            propertiesValue3['privateIPAllocationMethod'] = ipConfigurationsItem.privateIpAllocationMethod;
          }
          
          if (ipConfigurationsItem.subnet !== null && ipConfigurationsItem.subnet !== undefined) {
            var subnetValue = {};
            propertiesValue3['subnet'] = subnetValue;
            
            if (ipConfigurationsItem.subnet.id !== null && ipConfigurationsItem.subnet.id !== undefined) {
              subnetValue['id'] = ipConfigurationsItem.subnet.id;
            }
          }
          
          if (ipConfigurationsItem.publicIpAddress !== null && ipConfigurationsItem.publicIpAddress !== undefined) {
            var publicIPAddressValue = {};
            propertiesValue3['publicIPAddress'] = publicIPAddressValue;
            
            if (ipConfigurationsItem.publicIpAddress.id !== null && ipConfigurationsItem.publicIpAddress.id !== undefined) {
              publicIPAddressValue['id'] = ipConfigurationsItem.publicIpAddress.id;
            }
          }
          
          if (ipConfigurationsItem.provisioningState !== null && ipConfigurationsItem.provisioningState !== undefined) {
            propertiesValue3['provisioningState'] = ipConfigurationsItem.provisioningState;
          }
          
          if (ipConfigurationsItem.name !== null && ipConfigurationsItem.name !== undefined) {
            virtualNetworkGatewayIpConfigurationJsonFormatValue['name'] = ipConfigurationsItem.name;
          }
          
          if (ipConfigurationsItem.etag !== null && ipConfigurationsItem.etag !== undefined) {
            virtualNetworkGatewayIpConfigurationJsonFormatValue['etag'] = ipConfigurationsItem.etag;
          }
          
          if (ipConfigurationsItem.id !== null && ipConfigurationsItem.id !== undefined) {
            virtualNetworkGatewayIpConfigurationJsonFormatValue['id'] = ipConfigurationsItem.id;
          }
        }
        propertiesValue2['ipConfigurations'] = ipConfigurationsArray;
      }
      
      if (parameters.virtualNetworkGateway1.gatewayType !== null && parameters.virtualNetworkGateway1.gatewayType !== undefined) {
        propertiesValue2['gatewayType'] = parameters.virtualNetworkGateway1.gatewayType;
      }
      
      if (parameters.virtualNetworkGateway1.vpnType !== null && parameters.virtualNetworkGateway1.vpnType !== undefined) {
        propertiesValue2['vpnType'] = parameters.virtualNetworkGateway1.vpnType;
      }
      
      if (parameters.virtualNetworkGateway1.enableBgp !== null && parameters.virtualNetworkGateway1.enableBgp !== undefined) {
        propertiesValue2['enableBgp'] = parameters.virtualNetworkGateway1.enableBgp;
      }
      
      if (parameters.virtualNetworkGateway1.gatewayDefaultSite !== null && parameters.virtualNetworkGateway1.gatewayDefaultSite !== undefined) {
        var gatewayDefaultSiteValue = {};
        propertiesValue2['gatewayDefaultSite'] = gatewayDefaultSiteValue;
        
        if (parameters.virtualNetworkGateway1.gatewayDefaultSite.id !== null && parameters.virtualNetworkGateway1.gatewayDefaultSite.id !== undefined) {
          gatewayDefaultSiteValue['id'] = parameters.virtualNetworkGateway1.gatewayDefaultSite.id;
        }
      }
      
      if (parameters.virtualNetworkGateway1.resourceGuid !== null && parameters.virtualNetworkGateway1.resourceGuid !== undefined) {
        propertiesValue2['resourceGuid'] = parameters.virtualNetworkGateway1.resourceGuid;
      }
      
      if (parameters.virtualNetworkGateway1.provisioningState !== null && parameters.virtualNetworkGateway1.provisioningState !== undefined) {
        propertiesValue2['provisioningState'] = parameters.virtualNetworkGateway1.provisioningState;
      }
      
      if (parameters.virtualNetworkGateway1.etag !== null && parameters.virtualNetworkGateway1.etag !== undefined) {
        virtualNetworkGateway1Value['etag'] = parameters.virtualNetworkGateway1.etag;
      }
      
      if (parameters.virtualNetworkGateway1.id !== null && parameters.virtualNetworkGateway1.id !== undefined) {
        virtualNetworkGateway1Value['id'] = parameters.virtualNetworkGateway1.id;
      }
      
      if (parameters.virtualNetworkGateway1.name !== null && parameters.virtualNetworkGateway1.name !== undefined) {
        virtualNetworkGateway1Value['name'] = parameters.virtualNetworkGateway1.name;
      }
      
      if (parameters.virtualNetworkGateway1.type !== null && parameters.virtualNetworkGateway1.type !== undefined) {
        virtualNetworkGateway1Value['type'] = parameters.virtualNetworkGateway1.type;
      }
      
      if (parameters.virtualNetworkGateway1.location !== null && parameters.virtualNetworkGateway1.location !== undefined) {
        virtualNetworkGateway1Value['location'] = parameters.virtualNetworkGateway1.location;
      }
      
      if (parameters.virtualNetworkGateway1.tags !== null && parameters.virtualNetworkGateway1.tags !== undefined) {
        var tagsDictionary = {};
        for (var tagsKey in parameters.virtualNetworkGateway1.tags) {
          var tagsValue = parameters.virtualNetworkGateway1.tags[tagsKey];
          tagsDictionary[tagsKey] = tagsValue;
        }
        virtualNetworkGateway1Value['tags'] = tagsDictionary;
      }
    }
    
    if (parameters.virtualNetworkGateway2 !== null && parameters.virtualNetworkGateway2 !== undefined) {
      var virtualNetworkGateway2Value = {};
      propertiesValue['virtualNetworkGateway2'] = virtualNetworkGateway2Value;
      
      var propertiesValue4 = {};
      virtualNetworkGateway2Value['properties'] = propertiesValue4;
      
      if (parameters.virtualNetworkGateway2.ipConfigurations !== null && parameters.virtualNetworkGateway2.ipConfigurations !== undefined) {
        var ipConfigurationsArray2 = [];
        for (var loweredIndex2 = 0; loweredIndex2 < parameters.virtualNetworkGateway2.ipConfigurations.length; loweredIndex2 = loweredIndex2 + 1) {
          var ipConfigurationsItem2 = parameters.virtualNetworkGateway2.ipConfigurations[loweredIndex2];
          var virtualNetworkGatewayIpConfigurationJsonFormatValue2 = {};
          ipConfigurationsArray2.push(virtualNetworkGatewayIpConfigurationJsonFormatValue2);
          
          var propertiesValue5 = {};
          virtualNetworkGatewayIpConfigurationJsonFormatValue2['properties'] = propertiesValue5;
          
          if (ipConfigurationsItem2.privateIpAddress !== null && ipConfigurationsItem2.privateIpAddress !== undefined) {
            propertiesValue5['privateIPAddress'] = ipConfigurationsItem2.privateIpAddress;
          }
          
          if (ipConfigurationsItem2.privateIpAllocationMethod !== null && ipConfigurationsItem2.privateIpAllocationMethod !== undefined) {
            propertiesValue5['privateIPAllocationMethod'] = ipConfigurationsItem2.privateIpAllocationMethod;
          }
          
          if (ipConfigurationsItem2.subnet !== null && ipConfigurationsItem2.subnet !== undefined) {
            var subnetValue2 = {};
            propertiesValue5['subnet'] = subnetValue2;
            
            if (ipConfigurationsItem2.subnet.id !== null && ipConfigurationsItem2.subnet.id !== undefined) {
              subnetValue2['id'] = ipConfigurationsItem2.subnet.id;
            }
          }
          
          if (ipConfigurationsItem2.publicIpAddress !== null && ipConfigurationsItem2.publicIpAddress !== undefined) {
            var publicIPAddressValue2 = {};
            propertiesValue5['publicIPAddress'] = publicIPAddressValue2;
            
            if (ipConfigurationsItem2.publicIpAddress.id !== null && ipConfigurationsItem2.publicIpAddress.id !== undefined) {
              publicIPAddressValue2['id'] = ipConfigurationsItem2.publicIpAddress.id;
            }
          }
          
          if (ipConfigurationsItem2.provisioningState !== null && ipConfigurationsItem2.provisioningState !== undefined) {
            propertiesValue5['provisioningState'] = ipConfigurationsItem2.provisioningState;
          }
          
          if (ipConfigurationsItem2.name !== null && ipConfigurationsItem2.name !== undefined) {
            virtualNetworkGatewayIpConfigurationJsonFormatValue2['name'] = ipConfigurationsItem2.name;
          }
          
          if (ipConfigurationsItem2.etag !== null && ipConfigurationsItem2.etag !== undefined) {
            virtualNetworkGatewayIpConfigurationJsonFormatValue2['etag'] = ipConfigurationsItem2.etag;
          }
          
          if (ipConfigurationsItem2.id !== null && ipConfigurationsItem2.id !== undefined) {
            virtualNetworkGatewayIpConfigurationJsonFormatValue2['id'] = ipConfigurationsItem2.id;
          }
        }
        propertiesValue4['ipConfigurations'] = ipConfigurationsArray2;
      }
      
      if (parameters.virtualNetworkGateway2.gatewayType !== null && parameters.virtualNetworkGateway2.gatewayType !== undefined) {
        propertiesValue4['gatewayType'] = parameters.virtualNetworkGateway2.gatewayType;
      }
      
      if (parameters.virtualNetworkGateway2.vpnType !== null && parameters.virtualNetworkGateway2.vpnType !== undefined) {
        propertiesValue4['vpnType'] = parameters.virtualNetworkGateway2.vpnType;
      }
      
      if (parameters.virtualNetworkGateway2.enableBgp !== null && parameters.virtualNetworkGateway2.enableBgp !== undefined) {
        propertiesValue4['enableBgp'] = parameters.virtualNetworkGateway2.enableBgp;
      }
      
      if (parameters.virtualNetworkGateway2.gatewayDefaultSite !== null && parameters.virtualNetworkGateway2.gatewayDefaultSite !== undefined) {
        var gatewayDefaultSiteValue2 = {};
        propertiesValue4['gatewayDefaultSite'] = gatewayDefaultSiteValue2;
        
        if (parameters.virtualNetworkGateway2.gatewayDefaultSite.id !== null && parameters.virtualNetworkGateway2.gatewayDefaultSite.id !== undefined) {
          gatewayDefaultSiteValue2['id'] = parameters.virtualNetworkGateway2.gatewayDefaultSite.id;
        }
      }
      
      if (parameters.virtualNetworkGateway2.resourceGuid !== null && parameters.virtualNetworkGateway2.resourceGuid !== undefined) {
        propertiesValue4['resourceGuid'] = parameters.virtualNetworkGateway2.resourceGuid;
      }
      
      if (parameters.virtualNetworkGateway2.provisioningState !== null && parameters.virtualNetworkGateway2.provisioningState !== undefined) {
        propertiesValue4['provisioningState'] = parameters.virtualNetworkGateway2.provisioningState;
      }
      
      if (parameters.virtualNetworkGateway2.etag !== null && parameters.virtualNetworkGateway2.etag !== undefined) {
        virtualNetworkGateway2Value['etag'] = parameters.virtualNetworkGateway2.etag;
      }
      
      if (parameters.virtualNetworkGateway2.id !== null && parameters.virtualNetworkGateway2.id !== undefined) {
        virtualNetworkGateway2Value['id'] = parameters.virtualNetworkGateway2.id;
      }
      
      if (parameters.virtualNetworkGateway2.name !== null && parameters.virtualNetworkGateway2.name !== undefined) {
        virtualNetworkGateway2Value['name'] = parameters.virtualNetworkGateway2.name;
      }
      
      if (parameters.virtualNetworkGateway2.type !== null && parameters.virtualNetworkGateway2.type !== undefined) {
        virtualNetworkGateway2Value['type'] = parameters.virtualNetworkGateway2.type;
      }
      
      if (parameters.virtualNetworkGateway2.location !== null && parameters.virtualNetworkGateway2.location !== undefined) {
        virtualNetworkGateway2Value['location'] = parameters.virtualNetworkGateway2.location;
      }
      
      if (parameters.virtualNetworkGateway2.tags !== null && parameters.virtualNetworkGateway2.tags !== undefined) {
        var tagsDictionary2 = {};
        for (var tagsKey2 in parameters.virtualNetworkGateway2.tags) {
          var tagsValue2 = parameters.virtualNetworkGateway2.tags[tagsKey2];
          tagsDictionary2[tagsKey2] = tagsValue2;
        }
        virtualNetworkGateway2Value['tags'] = tagsDictionary2;
      }
    }
    
    if (parameters.localNetworkGateway2 !== null && parameters.localNetworkGateway2 !== undefined) {
      var localNetworkGateway2Value = {};
      propertiesValue['localNetworkGateway2'] = localNetworkGateway2Value;
      
      var propertiesValue6 = {};
      localNetworkGateway2Value['properties'] = propertiesValue6;
      
      if (parameters.localNetworkGateway2.localNetworkAddressSpace !== null && parameters.localNetworkGateway2.localNetworkAddressSpace !== undefined) {
        var localNetworkAddressSpaceValue = {};
        propertiesValue6['localNetworkAddressSpace'] = localNetworkAddressSpaceValue;
        
        if (parameters.localNetworkGateway2.localNetworkAddressSpace.addressPrefixes !== null && parameters.localNetworkGateway2.localNetworkAddressSpace.addressPrefixes !== undefined) {
          var addressPrefixesArray = [];
          for (var loweredIndex3 = 0; loweredIndex3 < parameters.localNetworkGateway2.localNetworkAddressSpace.addressPrefixes.length; loweredIndex3 = loweredIndex3 + 1) {
            var addressPrefixesItem = parameters.localNetworkGateway2.localNetworkAddressSpace.addressPrefixes[loweredIndex3];
            addressPrefixesArray.push(addressPrefixesItem);
          }
          localNetworkAddressSpaceValue['addressPrefixes'] = addressPrefixesArray;
        }
      }
      
      if (parameters.localNetworkGateway2.gatewayIpAddress !== null && parameters.localNetworkGateway2.gatewayIpAddress !== undefined) {
        propertiesValue6['gatewayIpAddress'] = parameters.localNetworkGateway2.gatewayIpAddress;
      }
      
      if (parameters.localNetworkGateway2.resourceGuid !== null && parameters.localNetworkGateway2.resourceGuid !== undefined) {
        propertiesValue6['resourceGuid'] = parameters.localNetworkGateway2.resourceGuid;
      }
      
      if (parameters.localNetworkGateway2.provisioningState !== null && parameters.localNetworkGateway2.provisioningState !== undefined) {
        propertiesValue6['provisioningState'] = parameters.localNetworkGateway2.provisioningState;
      }
      
      if (parameters.localNetworkGateway2.etag !== null && parameters.localNetworkGateway2.etag !== undefined) {
        localNetworkGateway2Value['etag'] = parameters.localNetworkGateway2.etag;
      }
      
      if (parameters.localNetworkGateway2.id !== null && parameters.localNetworkGateway2.id !== undefined) {
        localNetworkGateway2Value['id'] = parameters.localNetworkGateway2.id;
      }
      
      if (parameters.localNetworkGateway2.name !== null && parameters.localNetworkGateway2.name !== undefined) {
        localNetworkGateway2Value['name'] = parameters.localNetworkGateway2.name;
      }
      
      if (parameters.localNetworkGateway2.type !== null && parameters.localNetworkGateway2.type !== undefined) {
        localNetworkGateway2Value['type'] = parameters.localNetworkGateway2.type;
      }
      
      if (parameters.localNetworkGateway2.location !== null && parameters.localNetworkGateway2.location !== undefined) {
        localNetworkGateway2Value['location'] = parameters.localNetworkGateway2.location;
      }
      
      if (parameters.localNetworkGateway2.tags !== null && parameters.localNetworkGateway2.tags !== undefined) {
        var tagsDictionary3 = {};
        for (var tagsKey3 in parameters.localNetworkGateway2.tags) {
          var tagsValue3 = parameters.localNetworkGateway2.tags[tagsKey3];
          tagsDictionary3[tagsKey3] = tagsValue3;
        }
        localNetworkGateway2Value['tags'] = tagsDictionary3;
      }
    }
    
    if (parameters.connectionType !== null && parameters.connectionType !== undefined) {
      propertiesValue['connectionType'] = parameters.connectionType;
    }
    
    if (parameters.routingWeight !== null && parameters.routingWeight !== undefined) {
      propertiesValue['routingWeight'] = parameters.routingWeight;
    }
    
    if (parameters.sharedKey !== null && parameters.sharedKey !== undefined) {
      propertiesValue['sharedKey'] = parameters.sharedKey;
    }
    
    if (parameters.connectionStatus !== null && parameters.connectionStatus !== undefined) {
      propertiesValue['connectionStatus'] = parameters.connectionStatus;
    }
    
    if (parameters.egressBytesTransferred !== null && parameters.egressBytesTransferred !== undefined) {
      propertiesValue['egressBytesTransferred'] = parameters.egressBytesTransferred;
    }
    
    if (parameters.ingressBytesTransferred !== null && parameters.ingressBytesTransferred !== undefined) {
      propertiesValue['ingressBytesTransferred'] = parameters.ingressBytesTransferred;
    }
    
    if (parameters.peer !== null && parameters.peer !== undefined) {
      var peerValue = {};
      propertiesValue['peer'] = peerValue;
      
      if (parameters.peer.id !== null && parameters.peer.id !== undefined) {
        peerValue['id'] = parameters.peer.id;
      }
    }
    
    if (parameters.resourceGuid !== null && parameters.resourceGuid !== undefined) {
      propertiesValue['resourceGuid'] = parameters.resourceGuid;
    }
    
    if (parameters.provisioningState !== null && parameters.provisioningState !== undefined) {
      propertiesValue['provisioningState'] = parameters.provisioningState;
    }
    
    if (parameters.etag !== null && parameters.etag !== undefined) {
      virtualNetworkGatewayConnectionJsonFormatValue['etag'] = parameters.etag;
    }
    
    if (parameters.id !== null && parameters.id !== undefined) {
      virtualNetworkGatewayConnectionJsonFormatValue['id'] = parameters.id;
    }
    
    if (parameters.name !== null && parameters.name !== undefined) {
      virtualNetworkGatewayConnectionJsonFormatValue['name'] = parameters.name;
    }
    
    if (parameters.type !== null && parameters.type !== undefined) {
      virtualNetworkGatewayConnectionJsonFormatValue['type'] = parameters.type;
    }
    
    if (parameters.location !== null && parameters.location !== undefined) {
      virtualNetworkGatewayConnectionJsonFormatValue['location'] = parameters.location;
    }
    
    if (parameters.tags !== null && parameters.tags !== undefined) {
      var tagsDictionary4 = {};
      for (var tagsKey4 in parameters.tags) {
        var tagsValue4 = parameters.tags[tagsKey4];
        tagsDictionary4[tagsKey4] = tagsValue4;
      }
      virtualNetworkGatewayConnectionJsonFormatValue['tags'] = tagsDictionary4;
    }
    
    requestContent = JSON.stringify(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200 && statusCode !== 201) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200 || statusCode === 201) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var virtualNetworkGatewayConnectionInstance = { tags: {} };
          result.virtualNetworkGatewayConnection = virtualNetworkGatewayConnectionInstance;
          
          var propertiesValue7 = responseDoc['properties'];
          if (propertiesValue7 !== null && propertiesValue7 !== undefined) {
            var virtualNetworkGateway1Value2 = propertiesValue7['virtualNetworkGateway1'];
            if (virtualNetworkGateway1Value2 !== null && virtualNetworkGateway1Value2 !== undefined) {
              var virtualNetworkGateway1Instance = { ipConfigurations: [], tags: {} };
              virtualNetworkGatewayConnectionInstance.virtualNetworkGateway1 = virtualNetworkGateway1Instance;
              
              var propertiesValue8 = virtualNetworkGateway1Value2['properties'];
              if (propertiesValue8 !== null && propertiesValue8 !== undefined) {
                var ipConfigurationsArray3 = propertiesValue8['ipConfigurations'];
                if (ipConfigurationsArray3 !== null && ipConfigurationsArray3 !== undefined) {
                  for (var loweredIndex4 = 0; loweredIndex4 < ipConfigurationsArray3.length; loweredIndex4 = loweredIndex4 + 1) {
                    var ipConfigurationsValue = ipConfigurationsArray3[loweredIndex4];
                    var virtualNetworkGatewayIpConfigurationJsonFormatInstance = {};
                    virtualNetworkGateway1Instance.ipConfigurations.push(virtualNetworkGatewayIpConfigurationJsonFormatInstance);
                    
                    var propertiesValue9 = ipConfigurationsValue['properties'];
                    if (propertiesValue9 !== null && propertiesValue9 !== undefined) {
                      var privateIPAddressValue = propertiesValue9['privateIPAddress'];
                      if (privateIPAddressValue !== null && privateIPAddressValue !== undefined) {
                        var privateIPAddressInstance = privateIPAddressValue;
                        virtualNetworkGatewayIpConfigurationJsonFormatInstance.privateIpAddress = privateIPAddressInstance;
                      }
                      
                      var privateIPAllocationMethodValue = propertiesValue9['privateIPAllocationMethod'];
                      if (privateIPAllocationMethodValue !== null && privateIPAllocationMethodValue !== undefined) {
                        var privateIPAllocationMethodInstance = privateIPAllocationMethodValue;
                        virtualNetworkGatewayIpConfigurationJsonFormatInstance.privateIpAllocationMethod = privateIPAllocationMethodInstance;
                      }
                      
                      var subnetValue3 = propertiesValue9['subnet'];
                      if (subnetValue3 !== null && subnetValue3 !== undefined) {
                        var subnetInstance = {};
                        virtualNetworkGatewayIpConfigurationJsonFormatInstance.subnet = subnetInstance;
                        
                        var idValue = subnetValue3['id'];
                        if (idValue !== null && idValue !== undefined) {
                          var idInstance = idValue;
                          subnetInstance.id = idInstance;
                        }
                      }
                      
                      var publicIPAddressValue3 = propertiesValue9['publicIPAddress'];
                      if (publicIPAddressValue3 !== null && publicIPAddressValue3 !== undefined) {
                        var publicIPAddressInstance = {};
                        virtualNetworkGatewayIpConfigurationJsonFormatInstance.publicIpAddress = publicIPAddressInstance;
                        
                        var idValue2 = publicIPAddressValue3['id'];
                        if (idValue2 !== null && idValue2 !== undefined) {
                          var idInstance2 = idValue2;
                          publicIPAddressInstance.id = idInstance2;
                        }
                      }
                      
                      var provisioningStateValue = propertiesValue9['provisioningState'];
                      if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
                        var provisioningStateInstance = provisioningStateValue;
                        virtualNetworkGatewayIpConfigurationJsonFormatInstance.provisioningState = provisioningStateInstance;
                      }
                    }
                    
                    var nameValue = ipConfigurationsValue['name'];
                    if (nameValue !== null && nameValue !== undefined) {
                      var nameInstance = nameValue;
                      virtualNetworkGatewayIpConfigurationJsonFormatInstance.name = nameInstance;
                    }
                    
                    var etagValue = ipConfigurationsValue['etag'];
                    if (etagValue !== null && etagValue !== undefined) {
                      var etagInstance = etagValue;
                      virtualNetworkGatewayIpConfigurationJsonFormatInstance.etag = etagInstance;
                    }
                    
                    var idValue3 = ipConfigurationsValue['id'];
                    if (idValue3 !== null && idValue3 !== undefined) {
                      var idInstance3 = idValue3;
                      virtualNetworkGatewayIpConfigurationJsonFormatInstance.id = idInstance3;
                    }
                  }
                }
                
                var gatewayTypeValue = propertiesValue8['gatewayType'];
                if (gatewayTypeValue !== null && gatewayTypeValue !== undefined) {
                  var gatewayTypeInstance = gatewayTypeValue;
                  virtualNetworkGateway1Instance.gatewayType = gatewayTypeInstance;
                }
                
                var vpnTypeValue = propertiesValue8['vpnType'];
                if (vpnTypeValue !== null && vpnTypeValue !== undefined) {
                  var vpnTypeInstance = vpnTypeValue;
                  virtualNetworkGateway1Instance.vpnType = vpnTypeInstance;
                }
                
                var enableBgpValue = propertiesValue8['enableBgp'];
                if (enableBgpValue !== null && enableBgpValue !== undefined) {
                  var enableBgpInstance = enableBgpValue;
                  virtualNetworkGateway1Instance.enableBgp = enableBgpInstance;
                }
                
                var gatewayDefaultSiteValue3 = propertiesValue8['gatewayDefaultSite'];
                if (gatewayDefaultSiteValue3 !== null && gatewayDefaultSiteValue3 !== undefined) {
                  var gatewayDefaultSiteInstance = {};
                  virtualNetworkGateway1Instance.gatewayDefaultSite = gatewayDefaultSiteInstance;
                  
                  var idValue4 = gatewayDefaultSiteValue3['id'];
                  if (idValue4 !== null && idValue4 !== undefined) {
                    var idInstance4 = idValue4;
                    gatewayDefaultSiteInstance.id = idInstance4;
                  }
                }
                
                var resourceGuidValue = propertiesValue8['resourceGuid'];
                if (resourceGuidValue !== null && resourceGuidValue !== undefined) {
                  var resourceGuidInstance = resourceGuidValue;
                  virtualNetworkGateway1Instance.resourceGuid = resourceGuidInstance;
                }
                
                var provisioningStateValue2 = propertiesValue8['provisioningState'];
                if (provisioningStateValue2 !== null && provisioningStateValue2 !== undefined) {
                  var provisioningStateInstance2 = provisioningStateValue2;
                  virtualNetworkGateway1Instance.provisioningState = provisioningStateInstance2;
                }
              }
              
              var etagValue2 = virtualNetworkGateway1Value2['etag'];
              if (etagValue2 !== null && etagValue2 !== undefined) {
                var etagInstance2 = etagValue2;
                virtualNetworkGateway1Instance.etag = etagInstance2;
              }
              
              var idValue5 = virtualNetworkGateway1Value2['id'];
              if (idValue5 !== null && idValue5 !== undefined) {
                var idInstance5 = idValue5;
                virtualNetworkGateway1Instance.id = idInstance5;
              }
              
              var nameValue2 = virtualNetworkGateway1Value2['name'];
              if (nameValue2 !== null && nameValue2 !== undefined) {
                var nameInstance2 = nameValue2;
                virtualNetworkGateway1Instance.name = nameInstance2;
              }
              
              var typeValue = virtualNetworkGateway1Value2['type'];
              if (typeValue !== null && typeValue !== undefined) {
                var typeInstance = typeValue;
                virtualNetworkGateway1Instance.type = typeInstance;
              }
              
              var locationValue = virtualNetworkGateway1Value2['location'];
              if (locationValue !== null && locationValue !== undefined) {
                var locationInstance = locationValue;
                virtualNetworkGateway1Instance.location = locationInstance;
              }
              
              var tagsSequenceElement = virtualNetworkGateway1Value2['tags'];
              if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
                for (var property in tagsSequenceElement) {
                  var tagsKey5 = property;
                  var tagsValue5 = tagsSequenceElement[property];
                  virtualNetworkGateway1Instance.tags[tagsKey5] = tagsValue5;
                }
              }
            }
            
            var virtualNetworkGateway2Value2 = propertiesValue7['virtualNetworkGateway2'];
            if (virtualNetworkGateway2Value2 !== null && virtualNetworkGateway2Value2 !== undefined) {
              var virtualNetworkGateway2Instance = { ipConfigurations: [], tags: {} };
              virtualNetworkGatewayConnectionInstance.virtualNetworkGateway2 = virtualNetworkGateway2Instance;
              
              var propertiesValue10 = virtualNetworkGateway2Value2['properties'];
              if (propertiesValue10 !== null && propertiesValue10 !== undefined) {
                var ipConfigurationsArray4 = propertiesValue10['ipConfigurations'];
                if (ipConfigurationsArray4 !== null && ipConfigurationsArray4 !== undefined) {
                  for (var loweredIndex5 = 0; loweredIndex5 < ipConfigurationsArray4.length; loweredIndex5 = loweredIndex5 + 1) {
                    var ipConfigurationsValue2 = ipConfigurationsArray4[loweredIndex5];
                    var virtualNetworkGatewayIpConfigurationJsonFormatInstance2 = {};
                    virtualNetworkGateway2Instance.ipConfigurations.push(virtualNetworkGatewayIpConfigurationJsonFormatInstance2);
                    
                    var propertiesValue11 = ipConfigurationsValue2['properties'];
                    if (propertiesValue11 !== null && propertiesValue11 !== undefined) {
                      var privateIPAddressValue2 = propertiesValue11['privateIPAddress'];
                      if (privateIPAddressValue2 !== null && privateIPAddressValue2 !== undefined) {
                        var privateIPAddressInstance2 = privateIPAddressValue2;
                        virtualNetworkGatewayIpConfigurationJsonFormatInstance2.privateIpAddress = privateIPAddressInstance2;
                      }
                      
                      var privateIPAllocationMethodValue2 = propertiesValue11['privateIPAllocationMethod'];
                      if (privateIPAllocationMethodValue2 !== null && privateIPAllocationMethodValue2 !== undefined) {
                        var privateIPAllocationMethodInstance2 = privateIPAllocationMethodValue2;
                        virtualNetworkGatewayIpConfigurationJsonFormatInstance2.privateIpAllocationMethod = privateIPAllocationMethodInstance2;
                      }
                      
                      var subnetValue4 = propertiesValue11['subnet'];
                      if (subnetValue4 !== null && subnetValue4 !== undefined) {
                        var subnetInstance2 = {};
                        virtualNetworkGatewayIpConfigurationJsonFormatInstance2.subnet = subnetInstance2;
                        
                        var idValue6 = subnetValue4['id'];
                        if (idValue6 !== null && idValue6 !== undefined) {
                          var idInstance6 = idValue6;
                          subnetInstance2.id = idInstance6;
                        }
                      }
                      
                      var publicIPAddressValue4 = propertiesValue11['publicIPAddress'];
                      if (publicIPAddressValue4 !== null && publicIPAddressValue4 !== undefined) {
                        var publicIPAddressInstance2 = {};
                        virtualNetworkGatewayIpConfigurationJsonFormatInstance2.publicIpAddress = publicIPAddressInstance2;
                        
                        var idValue7 = publicIPAddressValue4['id'];
                        if (idValue7 !== null && idValue7 !== undefined) {
                          var idInstance7 = idValue7;
                          publicIPAddressInstance2.id = idInstance7;
                        }
                      }
                      
                      var provisioningStateValue3 = propertiesValue11['provisioningState'];
                      if (provisioningStateValue3 !== null && provisioningStateValue3 !== undefined) {
                        var provisioningStateInstance3 = provisioningStateValue3;
                        virtualNetworkGatewayIpConfigurationJsonFormatInstance2.provisioningState = provisioningStateInstance3;
                      }
                    }
                    
                    var nameValue3 = ipConfigurationsValue2['name'];
                    if (nameValue3 !== null && nameValue3 !== undefined) {
                      var nameInstance3 = nameValue3;
                      virtualNetworkGatewayIpConfigurationJsonFormatInstance2.name = nameInstance3;
                    }
                    
                    var etagValue3 = ipConfigurationsValue2['etag'];
                    if (etagValue3 !== null && etagValue3 !== undefined) {
                      var etagInstance3 = etagValue3;
                      virtualNetworkGatewayIpConfigurationJsonFormatInstance2.etag = etagInstance3;
                    }
                    
                    var idValue8 = ipConfigurationsValue2['id'];
                    if (idValue8 !== null && idValue8 !== undefined) {
                      var idInstance8 = idValue8;
                      virtualNetworkGatewayIpConfigurationJsonFormatInstance2.id = idInstance8;
                    }
                  }
                }
                
                var gatewayTypeValue2 = propertiesValue10['gatewayType'];
                if (gatewayTypeValue2 !== null && gatewayTypeValue2 !== undefined) {
                  var gatewayTypeInstance2 = gatewayTypeValue2;
                  virtualNetworkGateway2Instance.gatewayType = gatewayTypeInstance2;
                }
                
                var vpnTypeValue2 = propertiesValue10['vpnType'];
                if (vpnTypeValue2 !== null && vpnTypeValue2 !== undefined) {
                  var vpnTypeInstance2 = vpnTypeValue2;
                  virtualNetworkGateway2Instance.vpnType = vpnTypeInstance2;
                }
                
                var enableBgpValue2 = propertiesValue10['enableBgp'];
                if (enableBgpValue2 !== null && enableBgpValue2 !== undefined) {
                  var enableBgpInstance2 = enableBgpValue2;
                  virtualNetworkGateway2Instance.enableBgp = enableBgpInstance2;
                }
                
                var gatewayDefaultSiteValue4 = propertiesValue10['gatewayDefaultSite'];
                if (gatewayDefaultSiteValue4 !== null && gatewayDefaultSiteValue4 !== undefined) {
                  var gatewayDefaultSiteInstance2 = {};
                  virtualNetworkGateway2Instance.gatewayDefaultSite = gatewayDefaultSiteInstance2;
                  
                  var idValue9 = gatewayDefaultSiteValue4['id'];
                  if (idValue9 !== null && idValue9 !== undefined) {
                    var idInstance9 = idValue9;
                    gatewayDefaultSiteInstance2.id = idInstance9;
                  }
                }
                
                var resourceGuidValue2 = propertiesValue10['resourceGuid'];
                if (resourceGuidValue2 !== null && resourceGuidValue2 !== undefined) {
                  var resourceGuidInstance2 = resourceGuidValue2;
                  virtualNetworkGateway2Instance.resourceGuid = resourceGuidInstance2;
                }
                
                var provisioningStateValue4 = propertiesValue10['provisioningState'];
                if (provisioningStateValue4 !== null && provisioningStateValue4 !== undefined) {
                  var provisioningStateInstance4 = provisioningStateValue4;
                  virtualNetworkGateway2Instance.provisioningState = provisioningStateInstance4;
                }
              }
              
              var etagValue4 = virtualNetworkGateway2Value2['etag'];
              if (etagValue4 !== null && etagValue4 !== undefined) {
                var etagInstance4 = etagValue4;
                virtualNetworkGateway2Instance.etag = etagInstance4;
              }
              
              var idValue10 = virtualNetworkGateway2Value2['id'];
              if (idValue10 !== null && idValue10 !== undefined) {
                var idInstance10 = idValue10;
                virtualNetworkGateway2Instance.id = idInstance10;
              }
              
              var nameValue4 = virtualNetworkGateway2Value2['name'];
              if (nameValue4 !== null && nameValue4 !== undefined) {
                var nameInstance4 = nameValue4;
                virtualNetworkGateway2Instance.name = nameInstance4;
              }
              
              var typeValue2 = virtualNetworkGateway2Value2['type'];
              if (typeValue2 !== null && typeValue2 !== undefined) {
                var typeInstance2 = typeValue2;
                virtualNetworkGateway2Instance.type = typeInstance2;
              }
              
              var locationValue2 = virtualNetworkGateway2Value2['location'];
              if (locationValue2 !== null && locationValue2 !== undefined) {
                var locationInstance2 = locationValue2;
                virtualNetworkGateway2Instance.location = locationInstance2;
              }
              
              var tagsSequenceElement2 = virtualNetworkGateway2Value2['tags'];
              if (tagsSequenceElement2 !== null && tagsSequenceElement2 !== undefined) {
                for (var property2 in tagsSequenceElement2) {
                  var tagsKey6 = property2;
                  var tagsValue6 = tagsSequenceElement2[property2];
                  virtualNetworkGateway2Instance.tags[tagsKey6] = tagsValue6;
                }
              }
            }
            
            var localNetworkGateway2Value2 = propertiesValue7['localNetworkGateway2'];
            if (localNetworkGateway2Value2 !== null && localNetworkGateway2Value2 !== undefined) {
              var localNetworkGateway2Instance = { tags: {} };
              virtualNetworkGatewayConnectionInstance.localNetworkGateway2 = localNetworkGateway2Instance;
              
              var propertiesValue12 = localNetworkGateway2Value2['properties'];
              if (propertiesValue12 !== null && propertiesValue12 !== undefined) {
                var localNetworkAddressSpaceValue2 = propertiesValue12['localNetworkAddressSpace'];
                if (localNetworkAddressSpaceValue2 !== null && localNetworkAddressSpaceValue2 !== undefined) {
                  var localNetworkAddressSpaceInstance = { addressPrefixes: [] };
                  localNetworkGateway2Instance.localNetworkAddressSpace = localNetworkAddressSpaceInstance;
                  
                  var addressPrefixesArray2 = localNetworkAddressSpaceValue2['addressPrefixes'];
                  if (addressPrefixesArray2 !== null && addressPrefixesArray2 !== undefined) {
                    for (var loweredIndex6 = 0; loweredIndex6 < addressPrefixesArray2.length; loweredIndex6 = loweredIndex6 + 1) {
                      var addressPrefixesValue = addressPrefixesArray2[loweredIndex6];
                      localNetworkAddressSpaceInstance.addressPrefixes.push(addressPrefixesValue);
                    }
                  }
                }
                
                var gatewayIpAddressValue = propertiesValue12['gatewayIpAddress'];
                if (gatewayIpAddressValue !== null && gatewayIpAddressValue !== undefined) {
                  var gatewayIpAddressInstance = gatewayIpAddressValue;
                  localNetworkGateway2Instance.gatewayIpAddress = gatewayIpAddressInstance;
                }
                
                var resourceGuidValue3 = propertiesValue12['resourceGuid'];
                if (resourceGuidValue3 !== null && resourceGuidValue3 !== undefined) {
                  var resourceGuidInstance3 = resourceGuidValue3;
                  localNetworkGateway2Instance.resourceGuid = resourceGuidInstance3;
                }
                
                var provisioningStateValue5 = propertiesValue12['provisioningState'];
                if (provisioningStateValue5 !== null && provisioningStateValue5 !== undefined) {
                  var provisioningStateInstance5 = provisioningStateValue5;
                  localNetworkGateway2Instance.provisioningState = provisioningStateInstance5;
                }
              }
              
              var etagValue5 = localNetworkGateway2Value2['etag'];
              if (etagValue5 !== null && etagValue5 !== undefined) {
                var etagInstance5 = etagValue5;
                localNetworkGateway2Instance.etag = etagInstance5;
              }
              
              var idValue11 = localNetworkGateway2Value2['id'];
              if (idValue11 !== null && idValue11 !== undefined) {
                var idInstance11 = idValue11;
                localNetworkGateway2Instance.id = idInstance11;
              }
              
              var nameValue5 = localNetworkGateway2Value2['name'];
              if (nameValue5 !== null && nameValue5 !== undefined) {
                var nameInstance5 = nameValue5;
                localNetworkGateway2Instance.name = nameInstance5;
              }
              
              var typeValue3 = localNetworkGateway2Value2['type'];
              if (typeValue3 !== null && typeValue3 !== undefined) {
                var typeInstance3 = typeValue3;
                localNetworkGateway2Instance.type = typeInstance3;
              }
              
              var locationValue3 = localNetworkGateway2Value2['location'];
              if (locationValue3 !== null && locationValue3 !== undefined) {
                var locationInstance3 = locationValue3;
                localNetworkGateway2Instance.location = locationInstance3;
              }
              
              var tagsSequenceElement3 = localNetworkGateway2Value2['tags'];
              if (tagsSequenceElement3 !== null && tagsSequenceElement3 !== undefined) {
                for (var property3 in tagsSequenceElement3) {
                  var tagsKey7 = property3;
                  var tagsValue7 = tagsSequenceElement3[property3];
                  localNetworkGateway2Instance.tags[tagsKey7] = tagsValue7;
                }
              }
            }
            
            var connectionTypeValue = propertiesValue7['connectionType'];
            if (connectionTypeValue !== null && connectionTypeValue !== undefined) {
              var connectionTypeInstance = connectionTypeValue;
              virtualNetworkGatewayConnectionInstance.connectionType = connectionTypeInstance;
            }
            
            var routingWeightValue = propertiesValue7['routingWeight'];
            if (routingWeightValue !== null && routingWeightValue !== undefined) {
              var routingWeightInstance = routingWeightValue;
              virtualNetworkGatewayConnectionInstance.routingWeight = routingWeightInstance;
            }
            
            var sharedKeyValue = propertiesValue7['sharedKey'];
            if (sharedKeyValue !== null && sharedKeyValue !== undefined) {
              var sharedKeyInstance = sharedKeyValue;
              virtualNetworkGatewayConnectionInstance.sharedKey = sharedKeyInstance;
            }
            
            var connectionStatusValue = propertiesValue7['connectionStatus'];
            if (connectionStatusValue !== null && connectionStatusValue !== undefined) {
              var connectionStatusInstance = connectionStatusValue;
              virtualNetworkGatewayConnectionInstance.connectionStatus = connectionStatusInstance;
            }
            
            var egressBytesTransferredValue = propertiesValue7['egressBytesTransferred'];
            if (egressBytesTransferredValue !== null && egressBytesTransferredValue !== undefined) {
              var egressBytesTransferredInstance = egressBytesTransferredValue;
              virtualNetworkGatewayConnectionInstance.egressBytesTransferred = egressBytesTransferredInstance;
            }
            
            var ingressBytesTransferredValue = propertiesValue7['ingressBytesTransferred'];
            if (ingressBytesTransferredValue !== null && ingressBytesTransferredValue !== undefined) {
              var ingressBytesTransferredInstance = ingressBytesTransferredValue;
              virtualNetworkGatewayConnectionInstance.ingressBytesTransferred = ingressBytesTransferredInstance;
            }
            
            var peerValue2 = propertiesValue7['peer'];
            if (peerValue2 !== null && peerValue2 !== undefined) {
              var peerInstance = {};
              virtualNetworkGatewayConnectionInstance.peer = peerInstance;
              
              var idValue12 = peerValue2['id'];
              if (idValue12 !== null && idValue12 !== undefined) {
                var idInstance12 = idValue12;
                peerInstance.id = idInstance12;
              }
            }
            
            var resourceGuidValue4 = propertiesValue7['resourceGuid'];
            if (resourceGuidValue4 !== null && resourceGuidValue4 !== undefined) {
              var resourceGuidInstance4 = resourceGuidValue4;
              virtualNetworkGatewayConnectionInstance.resourceGuid = resourceGuidInstance4;
            }
            
            var provisioningStateValue6 = propertiesValue7['provisioningState'];
            if (provisioningStateValue6 !== null && provisioningStateValue6 !== undefined) {
              var provisioningStateInstance6 = provisioningStateValue6;
              virtualNetworkGatewayConnectionInstance.provisioningState = provisioningStateInstance6;
            }
          }
          
          var etagValue6 = responseDoc['etag'];
          if (etagValue6 !== null && etagValue6 !== undefined) {
            var etagInstance6 = etagValue6;
            virtualNetworkGatewayConnectionInstance.etag = etagInstance6;
          }
          
          var idValue13 = responseDoc['id'];
          if (idValue13 !== null && idValue13 !== undefined) {
            var idInstance13 = idValue13;
            virtualNetworkGatewayConnectionInstance.id = idInstance13;
          }
          
          var nameValue6 = responseDoc['name'];
          if (nameValue6 !== null && nameValue6 !== undefined) {
            var nameInstance6 = nameValue6;
            virtualNetworkGatewayConnectionInstance.name = nameInstance6;
          }
          
          var typeValue4 = responseDoc['type'];
          if (typeValue4 !== null && typeValue4 !== undefined) {
            var typeInstance4 = typeValue4;
            virtualNetworkGatewayConnectionInstance.type = typeInstance4;
          }
          
          var locationValue4 = responseDoc['location'];
          if (locationValue4 !== null && locationValue4 !== undefined) {
            var locationInstance4 = locationValue4;
            virtualNetworkGatewayConnectionInstance.location = locationInstance4;
          }
          
          var tagsSequenceElement4 = responseDoc['tags'];
          if (tagsSequenceElement4 !== null && tagsSequenceElement4 !== undefined) {
            for (var property4 in tagsSequenceElement4) {
              var tagsKey8 = property4;
              var tagsValue8 = tagsSequenceElement4[property4];
              virtualNetworkGatewayConnectionInstance.tags[tagsKey8] = tagsValue8;
            }
          }
          
          var errorValue = responseDoc['error'];
          if (errorValue !== null && errorValue !== undefined) {
            var errorInstance = { details: [] };
            result.error = errorInstance;
            
            var codeValue = errorValue['code'];
            if (codeValue !== null && codeValue !== undefined) {
              var codeInstance = codeValue;
              errorInstance.code = codeInstance;
            }
            
            var messageValue = errorValue['message'];
            if (messageValue !== null && messageValue !== undefined) {
              var messageInstance = messageValue;
              errorInstance.message = messageInstance;
            }
            
            var targetValue = errorValue['target'];
            if (targetValue !== null && targetValue !== undefined) {
              var targetInstance = targetValue;
              errorInstance.target = targetInstance;
            }
            
            var detailsArray = errorValue['details'];
            if (detailsArray !== null && detailsArray !== undefined) {
              for (var loweredIndex7 = 0; loweredIndex7 < detailsArray.length; loweredIndex7 = loweredIndex7 + 1) {
                var detailsValue = detailsArray[loweredIndex7];
                var errorDetailsInstance = {};
                errorInstance.details.push(errorDetailsInstance);
                
                var codeValue2 = detailsValue['code'];
                if (codeValue2 !== null && codeValue2 !== undefined) {
                  var codeInstance2 = codeValue2;
                  errorDetailsInstance.code = codeInstance2;
                }
                
                var targetValue2 = detailsValue['target'];
                if (targetValue2 !== null && targetValue2 !== undefined) {
                  var targetInstance2 = targetValue2;
                  errorDetailsInstance.target = targetInstance2;
                }
                
                var messageValue2 = detailsValue['message'];
                if (messageValue2 !== null && messageValue2 !== undefined) {
                  var messageInstance2 = messageValue2;
                  errorDetailsInstance.message = messageInstance2;
                }
              }
            }
            
            var innerErrorValue = errorValue['innerError'];
            if (innerErrorValue !== null && innerErrorValue !== undefined) {
              var innerErrorInstance = innerErrorValue;
              errorInstance.innerError = innerErrorInstance;
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      result.azureAsyncOperation = response.headers['azure-asyncoperation'];
      result.retryAfter = parseInt(response.headers['retry-after'], 10);
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The Delete VirtualNetworkGatewayConnection operation deletes the specifed
   * virtual network Gateway connection through Network resource provider.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} virtualNetworkGatewayConnectionName The name of the
   * virtual network gateway connection.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  VirtualNetworkGatewayConnectionOperations.prototype.beginDeleting = function(resourceGroupName, virtualNetworkGatewayConnectionName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (virtualNetworkGatewayConnectionName === null || virtualNetworkGatewayConnectionName === undefined) {
      return callback(new Error('virtualNetworkGatewayConnectionName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Network';
    url2 = url2 + '/connections/';
    url2 = url2 + encodeURIComponent(virtualNetworkGatewayConnectionName);
    url2 = url2 + '/';
    var queryParameters = [];
    queryParameters.push('api-version=2015-05-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'DELETE';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200 && statusCode !== 202 && statusCode !== 204) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      result = {};
      result.statusCode = statusCode;
      result.azureAsyncOperation = response.headers['azure-asyncoperation'];
      result.retryAfter = parseInt(response.headers['retry-after'], 10);
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The VirtualNetworkGatewayConnectionResetSharedKey operation resets the
   * virtual network gateway connection shared key for passed virtual network
   * gateway connection in the specified resource group through Network
   * resource provider.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} virtualNetworkGatewayConnectionName The virtual network
   * gateway connection reset shared key Name.
   * 
   * @param {ConnectionResetSharedKey} parameters Parameters supplied to the
   * Begin Reset Virtual Network Gateway connection shared key operation
   * through Network resource provider.
   * 
   * @param {number} [parameters.keyLength] The virtual network connection
   * reset shared key length
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  VirtualNetworkGatewayConnectionOperations.prototype.beginResetSharedKey = function(resourceGroupName, virtualNetworkGatewayConnectionName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (virtualNetworkGatewayConnectionName === null || virtualNetworkGatewayConnectionName === undefined) {
      return callback(new Error('virtualNetworkGatewayConnectionName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Network';
    url2 = url2 + '/connections/';
    url2 = url2 + encodeURIComponent(virtualNetworkGatewayConnectionName);
    url2 = url2 + '/sharedkey/reset';
    var queryParameters = [];
    queryParameters.push('api-version=2015-05-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = null;
    
    var connectionResetSharedKeyJsonFormatValue = {};
    requestDoc = connectionResetSharedKeyJsonFormatValue;
    
    if (parameters.keyLength !== null && parameters.keyLength !== undefined) {
      connectionResetSharedKeyJsonFormatValue['keyLength'] = parameters.keyLength;
    }
    
    requestContent = JSON.stringify(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200 && statusCode !== 202) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200 || statusCode === 202) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var connectionResetSharedKeyInstance = {};
          result.connectionResetSharedKey = connectionResetSharedKeyInstance;
          
          var keyLengthValue = responseDoc['keyLength'];
          if (keyLengthValue !== null && keyLengthValue !== undefined) {
            var keyLengthInstance = keyLengthValue;
            connectionResetSharedKeyInstance.keyLength = keyLengthInstance;
          }
          
          var errorValue = responseDoc['error'];
          if (errorValue !== null && errorValue !== undefined) {
            var errorInstance = { details: [] };
            result.error = errorInstance;
            
            var codeValue = errorValue['code'];
            if (codeValue !== null && codeValue !== undefined) {
              var codeInstance = codeValue;
              errorInstance.code = codeInstance;
            }
            
            var messageValue = errorValue['message'];
            if (messageValue !== null && messageValue !== undefined) {
              var messageInstance = messageValue;
              errorInstance.message = messageInstance;
            }
            
            var targetValue = errorValue['target'];
            if (targetValue !== null && targetValue !== undefined) {
              var targetInstance = targetValue;
              errorInstance.target = targetInstance;
            }
            
            var detailsArray = errorValue['details'];
            if (detailsArray !== null && detailsArray !== undefined) {
              for (var loweredIndex1 = 0; loweredIndex1 < detailsArray.length; loweredIndex1 = loweredIndex1 + 1) {
                var detailsValue = detailsArray[loweredIndex1];
                var errorDetailsInstance = {};
                errorInstance.details.push(errorDetailsInstance);
                
                var codeValue2 = detailsValue['code'];
                if (codeValue2 !== null && codeValue2 !== undefined) {
                  var codeInstance2 = codeValue2;
                  errorDetailsInstance.code = codeInstance2;
                }
                
                var targetValue2 = detailsValue['target'];
                if (targetValue2 !== null && targetValue2 !== undefined) {
                  var targetInstance2 = targetValue2;
                  errorDetailsInstance.target = targetInstance2;
                }
                
                var messageValue2 = detailsValue['message'];
                if (messageValue2 !== null && messageValue2 !== undefined) {
                  var messageInstance2 = messageValue2;
                  errorDetailsInstance.message = messageInstance2;
                }
              }
            }
            
            var innerErrorValue = errorValue['innerError'];
            if (innerErrorValue !== null && innerErrorValue !== undefined) {
              var innerErrorInstance = innerErrorValue;
              errorInstance.innerError = innerErrorInstance;
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      result.azureAsyncOperation = response.headers['azure-asyncoperation'];
      result.retryAfter = parseInt(response.headers['retry-after'], 10);
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The Put VirtualNetworkGatewayConnectionSharedKey operation sets the
   * virtual network gateway connection shared key for passed virtual network
   * gateway connection in the specified resource group through Network
   * resource provider.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} virtualNetworkGatewayConnectionName The virtual network
   * gateway connection name.
   * 
   * @param {ConnectionSharedKey} parameters Parameters supplied to the Begin
   * Set Virtual Network Gateway conection Shared key operation throughNetwork
   * resource provider.
   * 
   * @param {string} [parameters.value] The virtual network connection shared
   * key value
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  VirtualNetworkGatewayConnectionOperations.prototype.beginSetSharedKey = function(resourceGroupName, virtualNetworkGatewayConnectionName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (virtualNetworkGatewayConnectionName === null || virtualNetworkGatewayConnectionName === undefined) {
      return callback(new Error('virtualNetworkGatewayConnectionName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Network';
    url2 = url2 + '/connections/';
    url2 = url2 + encodeURIComponent(virtualNetworkGatewayConnectionName);
    url2 = url2 + '/sharedkey';
    var queryParameters = [];
    queryParameters.push('api-version=2015-05-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = null;
    
    var connectionSharedKeyJsonFormatValue = {};
    requestDoc = connectionSharedKeyJsonFormatValue;
    
    if (parameters.value !== null && parameters.value !== undefined) {
      connectionSharedKeyJsonFormatValue['value'] = parameters.value;
    }
    
    requestContent = JSON.stringify(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200 && statusCode !== 201) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200 || statusCode === 201) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var connectionSharedKeyInstance = {};
          result.connectionSharedKey = connectionSharedKeyInstance;
          
          var valueValue = responseDoc['value'];
          if (valueValue !== null && valueValue !== undefined) {
            var valueInstance = valueValue;
            connectionSharedKeyInstance.value = valueInstance;
          }
          
          var errorValue = responseDoc['error'];
          if (errorValue !== null && errorValue !== undefined) {
            var errorInstance = { details: [] };
            result.error = errorInstance;
            
            var codeValue = errorValue['code'];
            if (codeValue !== null && codeValue !== undefined) {
              var codeInstance = codeValue;
              errorInstance.code = codeInstance;
            }
            
            var messageValue = errorValue['message'];
            if (messageValue !== null && messageValue !== undefined) {
              var messageInstance = messageValue;
              errorInstance.message = messageInstance;
            }
            
            var targetValue = errorValue['target'];
            if (targetValue !== null && targetValue !== undefined) {
              var targetInstance = targetValue;
              errorInstance.target = targetInstance;
            }
            
            var detailsArray = errorValue['details'];
            if (detailsArray !== null && detailsArray !== undefined) {
              for (var loweredIndex1 = 0; loweredIndex1 < detailsArray.length; loweredIndex1 = loweredIndex1 + 1) {
                var detailsValue = detailsArray[loweredIndex1];
                var errorDetailsInstance = {};
                errorInstance.details.push(errorDetailsInstance);
                
                var codeValue2 = detailsValue['code'];
                if (codeValue2 !== null && codeValue2 !== undefined) {
                  var codeInstance2 = codeValue2;
                  errorDetailsInstance.code = codeInstance2;
                }
                
                var targetValue2 = detailsValue['target'];
                if (targetValue2 !== null && targetValue2 !== undefined) {
                  var targetInstance2 = targetValue2;
                  errorDetailsInstance.target = targetInstance2;
                }
                
                var messageValue2 = detailsValue['message'];
                if (messageValue2 !== null && messageValue2 !== undefined) {
                  var messageInstance2 = messageValue2;
                  errorDetailsInstance.message = messageInstance2;
                }
              }
            }
            
            var innerErrorValue = errorValue['innerError'];
            if (innerErrorValue !== null && innerErrorValue !== undefined) {
              var innerErrorInstance = innerErrorValue;
              errorInstance.innerError = innerErrorInstance;
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      result.azureAsyncOperation = response.headers['azure-asyncoperation'];
      result.retryAfter = parseInt(response.headers['retry-after'], 10);
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The CreateOrUpdate Virtual network Gateway connection creates a new or
   * updates an existing virtualnetwork gateway connection through Network
   * resource provider.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} virtualNetworkGatewayConnectionName The name of the
   * virtual network gateway conenction.
   * 
   * @param {VirtualNetworkGatewayConnection} parameters Parameters supplied to
   * the Begin Create or update Virtual Network Gateway connection operation
   * through Network resource provider.
   * 
   * @param {string} [parameters.authorizationKey] Gets or sets the
   * authorization key
   * 
   * @param {VirtualNetworkGateway} [parameters.virtualNetworkGateway1]
   * 
   * @param {IEnumerable} [parameters.virtualNetworkGateway1.ipConfigurations]
   * IpConfigurations for Virtual network gateway.
   * 
   * @param {string} [parameters.virtualNetworkGateway1.gatewayType] The type
   * of this virtual network gateway.
   * 
   * @param {string} [parameters.virtualNetworkGateway1.vpnType] The type of
   * this virtual network gateway.
   * 
   * @param {boolean} [parameters.virtualNetworkGateway1.enableBgp] EnableBgp
   * Flag
   * 
   * @param {BgpSettings} [parameters.virtualNetworkGateway1.bgpSettings]
   * Settings for this virtual network gateway's BGP speaker
   * 
   * @param {number} [parameters.virtualNetworkGateway1.bgpSettings.asn]
   * Autonomous System Number
   * 
   * @param {string}
   * [parameters.virtualNetworkGateway1.bgpSettings.bgpPeeringAddress] BGP
   * speaker's IP/BGP identifier
   * 
   * @param {number} [parameters.virtualNetworkGateway1.bgpSettings.peerWeight]
   * Weight given to routes learned from this BGP speaker
   * 
   * @param {ResourceId} [parameters.virtualNetworkGateway1.gatewayDefaultSite]
   * Gets or sets the reference of the LocalNetworkGateway resource which
   * represents Local network site having default routes. Assign Null value in
   * case of removing existing default site setting.
   * 
   * @param {string} [parameters.virtualNetworkGateway1.gatewayDefaultSite.id]
   * Id of the resource
   * 
   * @param {string} [parameters.virtualNetworkGateway1.provisioningState] Gets
   * or sets Provisioning state of the VirtualNetworkGateway resource
   * Updating/Deleting/Failed
   * 
   * @param {string} [parameters.virtualNetworkGateway1.resourceGuid] Gets or
   * sets resource guid property of the VirtualNetworkGateway resource
   * 
   * @param {string} [parameters.virtualNetworkGateway1.etag] Gets a unique
   * read-only string that changes whenever the resource is updated
   * 
   * @param {string} [parameters.virtualNetworkGateway1.id] Gets or sets the ID
   * of the resource.
   * 
   * @param {string} [parameters.virtualNetworkGateway1.name] Gets or sets the
   * name of the resource.
   * 
   * @param {string} [parameters.virtualNetworkGateway1.type] Gets or sets the
   * type of the resource.
   * 
   * @param {string} [parameters.virtualNetworkGateway1.location] Gets or sets
   * the location of the resource.
   * 
   * @param {object} [parameters.virtualNetworkGateway1.tags] Gets or sets the
   * tags attached to the resource.
   * 
   * @param {VirtualNetworkGateway} [parameters.virtualNetworkGateway2]
   * 
   * @param {IEnumerable} [parameters.virtualNetworkGateway2.ipConfigurations]
   * IpConfigurations for Virtual network gateway.
   * 
   * @param {string} [parameters.virtualNetworkGateway2.gatewayType] The type
   * of this virtual network gateway.
   * 
   * @param {string} [parameters.virtualNetworkGateway2.vpnType] The type of
   * this virtual network gateway.
   * 
   * @param {boolean} [parameters.virtualNetworkGateway2.enableBgp] EnableBgp
   * Flag
   * 
   * @param {BgpSettings} [parameters.virtualNetworkGateway2.bgpSettings]
   * Settings for this virtual network gateway's BGP speaker
   * 
   * @param {number} [parameters.virtualNetworkGateway2.bgpSettings.asn]
   * Autonomous System Number
   * 
   * @param {string}
   * [parameters.virtualNetworkGateway2.bgpSettings.bgpPeeringAddress] BGP
   * speaker's IP/BGP identifier
   * 
   * @param {number} [parameters.virtualNetworkGateway2.bgpSettings.peerWeight]
   * Weight given to routes learned from this BGP speaker
   * 
   * @param {ResourceId} [parameters.virtualNetworkGateway2.gatewayDefaultSite]
   * Gets or sets the reference of the LocalNetworkGateway resource which
   * represents Local network site having default routes. Assign Null value in
   * case of removing existing default site setting.
   * 
   * @param {string} [parameters.virtualNetworkGateway2.gatewayDefaultSite.id]
   * Id of the resource
   * 
   * @param {string} [parameters.virtualNetworkGateway2.provisioningState] Gets
   * or sets Provisioning state of the VirtualNetworkGateway resource
   * Updating/Deleting/Failed
   * 
   * @param {string} [parameters.virtualNetworkGateway2.resourceGuid] Gets or
   * sets resource guid property of the VirtualNetworkGateway resource
   * 
   * @param {string} [parameters.virtualNetworkGateway2.etag] Gets a unique
   * read-only string that changes whenever the resource is updated
   * 
   * @param {string} [parameters.virtualNetworkGateway2.id] Gets or sets the ID
   * of the resource.
   * 
   * @param {string} [parameters.virtualNetworkGateway2.name] Gets or sets the
   * name of the resource.
   * 
   * @param {string} [parameters.virtualNetworkGateway2.type] Gets or sets the
   * type of the resource.
   * 
   * @param {string} [parameters.virtualNetworkGateway2.location] Gets or sets
   * the location of the resource.
   * 
   * @param {object} [parameters.virtualNetworkGateway2.tags] Gets or sets the
   * tags attached to the resource.
   * 
   * @param {LocalNetworkGateway} [parameters.localNetworkGateway2]
   * 
   * @param {AddressSpace}
   * [parameters.localNetworkGateway2.localNetworkAddressSpace] Local network
   * site Address space
   * 
   * @param {IEnumerable}
   * [parameters.localNetworkGateway2.localNetworkAddressSpace.addressPrefixes]
   * Gets or sets List of address blocks reserved for this virtual network in
   * CIDR notation
   * 
   * @param {string} [parameters.localNetworkGateway2.gatewayIpAddress] IP
   * address of local network gateway.
   * 
   * @param {BgpSettings} [parameters.localNetworkGateway2.bgpSettings] Local
   * network gateway BGP speaker's settings
   * 
   * @param {number} [parameters.localNetworkGateway2.bgpSettings.asn]
   * Autonomous System Number
   * 
   * @param {string}
   * [parameters.localNetworkGateway2.bgpSettings.bgpPeeringAddress] BGP
   * speaker's IP/BGP identifier
   * 
   * @param {number} [parameters.localNetworkGateway2.bgpSettings.peerWeight]
   * Weight given to routes learned from this BGP speaker
   * 
   * @param {string} [parameters.localNetworkGateway2.provisioningState] Gets
   * or sets Provisioning state of the LocalNetworkGateway resource
   * Updating/Deleting/Failed
   * 
   * @param {string} [parameters.localNetworkGateway2.resourceGuid] Gets or
   * sets resource guid property of the LocalNetworkGateway resource
   * 
   * @param {string} [parameters.localNetworkGateway2.etag] Gets a unique
   * read-only string that changes whenever the resource is updated
   * 
   * @param {string} [parameters.localNetworkGateway2.id] Gets or sets the ID
   * of the resource.
   * 
   * @param {string} [parameters.localNetworkGateway2.name] Gets or sets the
   * name of the resource.
   * 
   * @param {string} [parameters.localNetworkGateway2.type] Gets or sets the
   * type of the resource.
   * 
   * @param {string} [parameters.localNetworkGateway2.location] Gets or sets
   * the location of the resource.
   * 
   * @param {object} [parameters.localNetworkGateway2.tags] Gets or sets the
   * tags attached to the resource.
   * 
   * @param {string} [parameters.connectionType] Gateway connection type
   * -Ipsec/Dedicated/VpnClient/Vnet2Vnet
   * 
   * @param {number} [parameters.routingWeight] The Routing weight.
   * 
   * @param {string} [parameters.sharedKey] The Ipsec share key.
   * 
   * @param {boolean} [parameters.enableBgp] Whether to establish a BGP session
   * over this connection
   * 
   * @param {string} [parameters.connectionStatus] Virtual network Gateway
   * connection status
   * 
   * @param {number} [parameters.egressBytesTransferred] The Egress Bytes
   * Transferred in this connection
   * 
   * @param {number} [parameters.ingressBytesTransferred] The Ingress Bytes
   * Transferred in this connection
   * 
   * @param {ResourceId} [parameters.peer] The reference to peerings resource.
   * 
   * @param {string} [parameters.peer.id] Id of the resource
   * 
   * @param {string} [parameters.provisioningState] Gets or sets Provisioning
   * state of the VirtualNetworkGatewayConnection resource
   * Updating/Deleting/Failed
   * 
   * @param {string} [parameters.resourceGuid] Gets or sets resource guid
   * property of the VirtualNetworkGatewayConnection resource
   * 
   * @param {string} [parameters.etag] Gets a unique read-only string that
   * changes whenever the resource is updated
   * 
   * @param {string} [parameters.id] Gets or sets the ID of the resource.
   * 
   * @param {string} [parameters.name] Gets or sets the name of the resource.
   * 
   * @param {string} [parameters.type] Gets or sets the type of the resource.
   * 
   * @param {string} [parameters.location] Gets or sets the location of the
   * resource.
   * 
   * @param {object} [parameters.tags] Gets or sets the tags attached to the
   * resource.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  VirtualNetworkGatewayConnectionOperations.prototype.createOrUpdate = function(resourceGroupName, virtualNetworkGatewayConnectionName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.virtualNetworkGatewayConnections.beginCreateOrUpdating(resourceGroupName, virtualNetworkGatewayConnectionName, parameters, function (err, result) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var delayInSeconds = result.retryAfter;
      if (delayInSeconds === 0) {
        delayInSeconds = 30;
      }
      if (client2.longRunningOperationInitialTimeout >= 0) {
        delayInSeconds = client2.longRunningOperationInitialTimeout;
      }
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.getLongRunningOperationStatus(result.azureAsyncOperation, function (err2, result2) {
            if (err2 !== null && err2 !== undefined) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                return callback(null, result2);
              } else {
                delayInSeconds = result2.retryAfter;
                if (delayInSeconds === 0) {
                  delayInSeconds = 30;
                }
                if (client2.longRunningOperationRetryTimeout >= 0) {
                  delayInSeconds = client2.longRunningOperationRetryTimeout;
                }
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  /**
   * The Delete VirtualNetworkGatewayConnection operation deletes the specifed
   * virtual network Gateway connection through Network resource provider.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} virtualNetworkGatewayConnectionName The name of the
   * virtual network gateway connection.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  VirtualNetworkGatewayConnectionOperations.prototype.deleteMethod = function(resourceGroupName, virtualNetworkGatewayConnectionName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.virtualNetworkGatewayConnections.beginDeleting(resourceGroupName, virtualNetworkGatewayConnectionName, function (err, result) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var delayInSeconds = result.retryAfter;
      if (delayInSeconds === 0) {
        delayInSeconds = 30;
      }
      if (client2.longRunningOperationInitialTimeout >= 0) {
        delayInSeconds = client2.longRunningOperationInitialTimeout;
      }
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.getLongRunningOperationStatus(result.azureAsyncOperation, function (err2, result2) {
            if (err2 !== null && err2 !== undefined) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                return callback(null, result2);
              } else {
                delayInSeconds = result2.retryAfter;
                if (delayInSeconds === 0) {
                  delayInSeconds = 30;
                }
                if (client2.longRunningOperationRetryTimeout >= 0) {
                  delayInSeconds = client2.longRunningOperationRetryTimeout;
                }
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  /**
   * The Get VirtualNetworkGatewayConnection operation retrieves information
   * about the specified virtual network gateway connection through Network
   * resource provider.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} virtualNetworkGatewayConnectionName The name of the
   * virtual network gateway connection.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  VirtualNetworkGatewayConnectionOperations.prototype.get = function(resourceGroupName, virtualNetworkGatewayConnectionName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (virtualNetworkGatewayConnectionName === null || virtualNetworkGatewayConnectionName === undefined) {
      return callback(new Error('virtualNetworkGatewayConnectionName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Network';
    url2 = url2 + '/connections/';
    url2 = url2 + encodeURIComponent(virtualNetworkGatewayConnectionName);
    var queryParameters = [];
    queryParameters.push('api-version=2015-05-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var virtualNetworkGatewayConnectionInstance = { tags: {} };
          result.virtualNetworkGatewayConnection = virtualNetworkGatewayConnectionInstance;
          
          var propertiesValue = responseDoc['properties'];
          if (propertiesValue !== null && propertiesValue !== undefined) {
            var virtualNetworkGateway1Value = propertiesValue['virtualNetworkGateway1'];
            if (virtualNetworkGateway1Value !== null && virtualNetworkGateway1Value !== undefined) {
              var virtualNetworkGateway1Instance = { ipConfigurations: [], tags: {} };
              virtualNetworkGatewayConnectionInstance.virtualNetworkGateway1 = virtualNetworkGateway1Instance;
              
              var propertiesValue2 = virtualNetworkGateway1Value['properties'];
              if (propertiesValue2 !== null && propertiesValue2 !== undefined) {
                var ipConfigurationsArray = propertiesValue2['ipConfigurations'];
                if (ipConfigurationsArray !== null && ipConfigurationsArray !== undefined) {
                  for (var loweredIndex1 = 0; loweredIndex1 < ipConfigurationsArray.length; loweredIndex1 = loweredIndex1 + 1) {
                    var ipConfigurationsValue = ipConfigurationsArray[loweredIndex1];
                    var virtualNetworkGatewayIpConfigurationJsonFormatInstance = {};
                    virtualNetworkGateway1Instance.ipConfigurations.push(virtualNetworkGatewayIpConfigurationJsonFormatInstance);
                    
                    var propertiesValue3 = ipConfigurationsValue['properties'];
                    if (propertiesValue3 !== null && propertiesValue3 !== undefined) {
                      var privateIPAddressValue = propertiesValue3['privateIPAddress'];
                      if (privateIPAddressValue !== null && privateIPAddressValue !== undefined) {
                        var privateIPAddressInstance = privateIPAddressValue;
                        virtualNetworkGatewayIpConfigurationJsonFormatInstance.privateIpAddress = privateIPAddressInstance;
                      }
                      
                      var privateIPAllocationMethodValue = propertiesValue3['privateIPAllocationMethod'];
                      if (privateIPAllocationMethodValue !== null && privateIPAllocationMethodValue !== undefined) {
                        var privateIPAllocationMethodInstance = privateIPAllocationMethodValue;
                        virtualNetworkGatewayIpConfigurationJsonFormatInstance.privateIpAllocationMethod = privateIPAllocationMethodInstance;
                      }
                      
                      var subnetValue = propertiesValue3['subnet'];
                      if (subnetValue !== null && subnetValue !== undefined) {
                        var subnetInstance = {};
                        virtualNetworkGatewayIpConfigurationJsonFormatInstance.subnet = subnetInstance;
                        
                        var idValue = subnetValue['id'];
                        if (idValue !== null && idValue !== undefined) {
                          var idInstance = idValue;
                          subnetInstance.id = idInstance;
                        }
                      }
                      
                      var publicIPAddressValue = propertiesValue3['publicIPAddress'];
                      if (publicIPAddressValue !== null && publicIPAddressValue !== undefined) {
                        var publicIPAddressInstance = {};
                        virtualNetworkGatewayIpConfigurationJsonFormatInstance.publicIpAddress = publicIPAddressInstance;
                        
                        var idValue2 = publicIPAddressValue['id'];
                        if (idValue2 !== null && idValue2 !== undefined) {
                          var idInstance2 = idValue2;
                          publicIPAddressInstance.id = idInstance2;
                        }
                      }
                      
                      var provisioningStateValue = propertiesValue3['provisioningState'];
                      if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
                        var provisioningStateInstance = provisioningStateValue;
                        virtualNetworkGatewayIpConfigurationJsonFormatInstance.provisioningState = provisioningStateInstance;
                      }
                    }
                    
                    var nameValue = ipConfigurationsValue['name'];
                    if (nameValue !== null && nameValue !== undefined) {
                      var nameInstance = nameValue;
                      virtualNetworkGatewayIpConfigurationJsonFormatInstance.name = nameInstance;
                    }
                    
                    var etagValue = ipConfigurationsValue['etag'];
                    if (etagValue !== null && etagValue !== undefined) {
                      var etagInstance = etagValue;
                      virtualNetworkGatewayIpConfigurationJsonFormatInstance.etag = etagInstance;
                    }
                    
                    var idValue3 = ipConfigurationsValue['id'];
                    if (idValue3 !== null && idValue3 !== undefined) {
                      var idInstance3 = idValue3;
                      virtualNetworkGatewayIpConfigurationJsonFormatInstance.id = idInstance3;
                    }
                  }
                }
                
                var gatewayTypeValue = propertiesValue2['gatewayType'];
                if (gatewayTypeValue !== null && gatewayTypeValue !== undefined) {
                  var gatewayTypeInstance = gatewayTypeValue;
                  virtualNetworkGateway1Instance.gatewayType = gatewayTypeInstance;
                }
                
                var vpnTypeValue = propertiesValue2['vpnType'];
                if (vpnTypeValue !== null && vpnTypeValue !== undefined) {
                  var vpnTypeInstance = vpnTypeValue;
                  virtualNetworkGateway1Instance.vpnType = vpnTypeInstance;
                }
                
                var enableBgpValue = propertiesValue2['enableBgp'];
                if (enableBgpValue !== null && enableBgpValue !== undefined) {
                  var enableBgpInstance = enableBgpValue;
                  virtualNetworkGateway1Instance.enableBgp = enableBgpInstance;
                }
                
                var gatewayDefaultSiteValue = propertiesValue2['gatewayDefaultSite'];
                if (gatewayDefaultSiteValue !== null && gatewayDefaultSiteValue !== undefined) {
                  var gatewayDefaultSiteInstance = {};
                  virtualNetworkGateway1Instance.gatewayDefaultSite = gatewayDefaultSiteInstance;
                  
                  var idValue4 = gatewayDefaultSiteValue['id'];
                  if (idValue4 !== null && idValue4 !== undefined) {
                    var idInstance4 = idValue4;
                    gatewayDefaultSiteInstance.id = idInstance4;
                  }
                }
                
                var resourceGuidValue = propertiesValue2['resourceGuid'];
                if (resourceGuidValue !== null && resourceGuidValue !== undefined) {
                  var resourceGuidInstance = resourceGuidValue;
                  virtualNetworkGateway1Instance.resourceGuid = resourceGuidInstance;
                }
                
                var provisioningStateValue2 = propertiesValue2['provisioningState'];
                if (provisioningStateValue2 !== null && provisioningStateValue2 !== undefined) {
                  var provisioningStateInstance2 = provisioningStateValue2;
                  virtualNetworkGateway1Instance.provisioningState = provisioningStateInstance2;
                }
              }
              
              var etagValue2 = virtualNetworkGateway1Value['etag'];
              if (etagValue2 !== null && etagValue2 !== undefined) {
                var etagInstance2 = etagValue2;
                virtualNetworkGateway1Instance.etag = etagInstance2;
              }
              
              var idValue5 = virtualNetworkGateway1Value['id'];
              if (idValue5 !== null && idValue5 !== undefined) {
                var idInstance5 = idValue5;
                virtualNetworkGateway1Instance.id = idInstance5;
              }
              
              var nameValue2 = virtualNetworkGateway1Value['name'];
              if (nameValue2 !== null && nameValue2 !== undefined) {
                var nameInstance2 = nameValue2;
                virtualNetworkGateway1Instance.name = nameInstance2;
              }
              
              var typeValue = virtualNetworkGateway1Value['type'];
              if (typeValue !== null && typeValue !== undefined) {
                var typeInstance = typeValue;
                virtualNetworkGateway1Instance.type = typeInstance;
              }
              
              var locationValue = virtualNetworkGateway1Value['location'];
              if (locationValue !== null && locationValue !== undefined) {
                var locationInstance = locationValue;
                virtualNetworkGateway1Instance.location = locationInstance;
              }
              
              var tagsSequenceElement = virtualNetworkGateway1Value['tags'];
              if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
                for (var property in tagsSequenceElement) {
                  var tagsKey = property;
                  var tagsValue = tagsSequenceElement[property];
                  virtualNetworkGateway1Instance.tags[tagsKey] = tagsValue;
                }
              }
            }
            
            var virtualNetworkGateway2Value = propertiesValue['virtualNetworkGateway2'];
            if (virtualNetworkGateway2Value !== null && virtualNetworkGateway2Value !== undefined) {
              var virtualNetworkGateway2Instance = { ipConfigurations: [], tags: {} };
              virtualNetworkGatewayConnectionInstance.virtualNetworkGateway2 = virtualNetworkGateway2Instance;
              
              var propertiesValue4 = virtualNetworkGateway2Value['properties'];
              if (propertiesValue4 !== null && propertiesValue4 !== undefined) {
                var ipConfigurationsArray2 = propertiesValue4['ipConfigurations'];
                if (ipConfigurationsArray2 !== null && ipConfigurationsArray2 !== undefined) {
                  for (var loweredIndex2 = 0; loweredIndex2 < ipConfigurationsArray2.length; loweredIndex2 = loweredIndex2 + 1) {
                    var ipConfigurationsValue2 = ipConfigurationsArray2[loweredIndex2];
                    var virtualNetworkGatewayIpConfigurationJsonFormatInstance2 = {};
                    virtualNetworkGateway2Instance.ipConfigurations.push(virtualNetworkGatewayIpConfigurationJsonFormatInstance2);
                    
                    var propertiesValue5 = ipConfigurationsValue2['properties'];
                    if (propertiesValue5 !== null && propertiesValue5 !== undefined) {
                      var privateIPAddressValue2 = propertiesValue5['privateIPAddress'];
                      if (privateIPAddressValue2 !== null && privateIPAddressValue2 !== undefined) {
                        var privateIPAddressInstance2 = privateIPAddressValue2;
                        virtualNetworkGatewayIpConfigurationJsonFormatInstance2.privateIpAddress = privateIPAddressInstance2;
                      }
                      
                      var privateIPAllocationMethodValue2 = propertiesValue5['privateIPAllocationMethod'];
                      if (privateIPAllocationMethodValue2 !== null && privateIPAllocationMethodValue2 !== undefined) {
                        var privateIPAllocationMethodInstance2 = privateIPAllocationMethodValue2;
                        virtualNetworkGatewayIpConfigurationJsonFormatInstance2.privateIpAllocationMethod = privateIPAllocationMethodInstance2;
                      }
                      
                      var subnetValue2 = propertiesValue5['subnet'];
                      if (subnetValue2 !== null && subnetValue2 !== undefined) {
                        var subnetInstance2 = {};
                        virtualNetworkGatewayIpConfigurationJsonFormatInstance2.subnet = subnetInstance2;
                        
                        var idValue6 = subnetValue2['id'];
                        if (idValue6 !== null && idValue6 !== undefined) {
                          var idInstance6 = idValue6;
                          subnetInstance2.id = idInstance6;
                        }
                      }
                      
                      var publicIPAddressValue2 = propertiesValue5['publicIPAddress'];
                      if (publicIPAddressValue2 !== null && publicIPAddressValue2 !== undefined) {
                        var publicIPAddressInstance2 = {};
                        virtualNetworkGatewayIpConfigurationJsonFormatInstance2.publicIpAddress = publicIPAddressInstance2;
                        
                        var idValue7 = publicIPAddressValue2['id'];
                        if (idValue7 !== null && idValue7 !== undefined) {
                          var idInstance7 = idValue7;
                          publicIPAddressInstance2.id = idInstance7;
                        }
                      }
                      
                      var provisioningStateValue3 = propertiesValue5['provisioningState'];
                      if (provisioningStateValue3 !== null && provisioningStateValue3 !== undefined) {
                        var provisioningStateInstance3 = provisioningStateValue3;
                        virtualNetworkGatewayIpConfigurationJsonFormatInstance2.provisioningState = provisioningStateInstance3;
                      }
                    }
                    
                    var nameValue3 = ipConfigurationsValue2['name'];
                    if (nameValue3 !== null && nameValue3 !== undefined) {
                      var nameInstance3 = nameValue3;
                      virtualNetworkGatewayIpConfigurationJsonFormatInstance2.name = nameInstance3;
                    }
                    
                    var etagValue3 = ipConfigurationsValue2['etag'];
                    if (etagValue3 !== null && etagValue3 !== undefined) {
                      var etagInstance3 = etagValue3;
                      virtualNetworkGatewayIpConfigurationJsonFormatInstance2.etag = etagInstance3;
                    }
                    
                    var idValue8 = ipConfigurationsValue2['id'];
                    if (idValue8 !== null && idValue8 !== undefined) {
                      var idInstance8 = idValue8;
                      virtualNetworkGatewayIpConfigurationJsonFormatInstance2.id = idInstance8;
                    }
                  }
                }
                
                var gatewayTypeValue2 = propertiesValue4['gatewayType'];
                if (gatewayTypeValue2 !== null && gatewayTypeValue2 !== undefined) {
                  var gatewayTypeInstance2 = gatewayTypeValue2;
                  virtualNetworkGateway2Instance.gatewayType = gatewayTypeInstance2;
                }
                
                var vpnTypeValue2 = propertiesValue4['vpnType'];
                if (vpnTypeValue2 !== null && vpnTypeValue2 !== undefined) {
                  var vpnTypeInstance2 = vpnTypeValue2;
                  virtualNetworkGateway2Instance.vpnType = vpnTypeInstance2;
                }
                
                var enableBgpValue2 = propertiesValue4['enableBgp'];
                if (enableBgpValue2 !== null && enableBgpValue2 !== undefined) {
                  var enableBgpInstance2 = enableBgpValue2;
                  virtualNetworkGateway2Instance.enableBgp = enableBgpInstance2;
                }
                
                var gatewayDefaultSiteValue2 = propertiesValue4['gatewayDefaultSite'];
                if (gatewayDefaultSiteValue2 !== null && gatewayDefaultSiteValue2 !== undefined) {
                  var gatewayDefaultSiteInstance2 = {};
                  virtualNetworkGateway2Instance.gatewayDefaultSite = gatewayDefaultSiteInstance2;
                  
                  var idValue9 = gatewayDefaultSiteValue2['id'];
                  if (idValue9 !== null && idValue9 !== undefined) {
                    var idInstance9 = idValue9;
                    gatewayDefaultSiteInstance2.id = idInstance9;
                  }
                }
                
                var resourceGuidValue2 = propertiesValue4['resourceGuid'];
                if (resourceGuidValue2 !== null && resourceGuidValue2 !== undefined) {
                  var resourceGuidInstance2 = resourceGuidValue2;
                  virtualNetworkGateway2Instance.resourceGuid = resourceGuidInstance2;
                }
                
                var provisioningStateValue4 = propertiesValue4['provisioningState'];
                if (provisioningStateValue4 !== null && provisioningStateValue4 !== undefined) {
                  var provisioningStateInstance4 = provisioningStateValue4;
                  virtualNetworkGateway2Instance.provisioningState = provisioningStateInstance4;
                }
              }
              
              var etagValue4 = virtualNetworkGateway2Value['etag'];
              if (etagValue4 !== null && etagValue4 !== undefined) {
                var etagInstance4 = etagValue4;
                virtualNetworkGateway2Instance.etag = etagInstance4;
              }
              
              var idValue10 = virtualNetworkGateway2Value['id'];
              if (idValue10 !== null && idValue10 !== undefined) {
                var idInstance10 = idValue10;
                virtualNetworkGateway2Instance.id = idInstance10;
              }
              
              var nameValue4 = virtualNetworkGateway2Value['name'];
              if (nameValue4 !== null && nameValue4 !== undefined) {
                var nameInstance4 = nameValue4;
                virtualNetworkGateway2Instance.name = nameInstance4;
              }
              
              var typeValue2 = virtualNetworkGateway2Value['type'];
              if (typeValue2 !== null && typeValue2 !== undefined) {
                var typeInstance2 = typeValue2;
                virtualNetworkGateway2Instance.type = typeInstance2;
              }
              
              var locationValue2 = virtualNetworkGateway2Value['location'];
              if (locationValue2 !== null && locationValue2 !== undefined) {
                var locationInstance2 = locationValue2;
                virtualNetworkGateway2Instance.location = locationInstance2;
              }
              
              var tagsSequenceElement2 = virtualNetworkGateway2Value['tags'];
              if (tagsSequenceElement2 !== null && tagsSequenceElement2 !== undefined) {
                for (var property2 in tagsSequenceElement2) {
                  var tagsKey2 = property2;
                  var tagsValue2 = tagsSequenceElement2[property2];
                  virtualNetworkGateway2Instance.tags[tagsKey2] = tagsValue2;
                }
              }
            }
            
            var localNetworkGateway2Value = propertiesValue['localNetworkGateway2'];
            if (localNetworkGateway2Value !== null && localNetworkGateway2Value !== undefined) {
              var localNetworkGateway2Instance = { tags: {} };
              virtualNetworkGatewayConnectionInstance.localNetworkGateway2 = localNetworkGateway2Instance;
              
              var propertiesValue6 = localNetworkGateway2Value['properties'];
              if (propertiesValue6 !== null && propertiesValue6 !== undefined) {
                var localNetworkAddressSpaceValue = propertiesValue6['localNetworkAddressSpace'];
                if (localNetworkAddressSpaceValue !== null && localNetworkAddressSpaceValue !== undefined) {
                  var localNetworkAddressSpaceInstance = { addressPrefixes: [] };
                  localNetworkGateway2Instance.localNetworkAddressSpace = localNetworkAddressSpaceInstance;
                  
                  var addressPrefixesArray = localNetworkAddressSpaceValue['addressPrefixes'];
                  if (addressPrefixesArray !== null && addressPrefixesArray !== undefined) {
                    for (var loweredIndex3 = 0; loweredIndex3 < addressPrefixesArray.length; loweredIndex3 = loweredIndex3 + 1) {
                      var addressPrefixesValue = addressPrefixesArray[loweredIndex3];
                      localNetworkAddressSpaceInstance.addressPrefixes.push(addressPrefixesValue);
                    }
                  }
                }
                
                var gatewayIpAddressValue = propertiesValue6['gatewayIpAddress'];
                if (gatewayIpAddressValue !== null && gatewayIpAddressValue !== undefined) {
                  var gatewayIpAddressInstance = gatewayIpAddressValue;
                  localNetworkGateway2Instance.gatewayIpAddress = gatewayIpAddressInstance;
                }
                
                var resourceGuidValue3 = propertiesValue6['resourceGuid'];
                if (resourceGuidValue3 !== null && resourceGuidValue3 !== undefined) {
                  var resourceGuidInstance3 = resourceGuidValue3;
                  localNetworkGateway2Instance.resourceGuid = resourceGuidInstance3;
                }
                
                var provisioningStateValue5 = propertiesValue6['provisioningState'];
                if (provisioningStateValue5 !== null && provisioningStateValue5 !== undefined) {
                  var provisioningStateInstance5 = provisioningStateValue5;
                  localNetworkGateway2Instance.provisioningState = provisioningStateInstance5;
                }
              }
              
              var etagValue5 = localNetworkGateway2Value['etag'];
              if (etagValue5 !== null && etagValue5 !== undefined) {
                var etagInstance5 = etagValue5;
                localNetworkGateway2Instance.etag = etagInstance5;
              }
              
              var idValue11 = localNetworkGateway2Value['id'];
              if (idValue11 !== null && idValue11 !== undefined) {
                var idInstance11 = idValue11;
                localNetworkGateway2Instance.id = idInstance11;
              }
              
              var nameValue5 = localNetworkGateway2Value['name'];
              if (nameValue5 !== null && nameValue5 !== undefined) {
                var nameInstance5 = nameValue5;
                localNetworkGateway2Instance.name = nameInstance5;
              }
              
              var typeValue3 = localNetworkGateway2Value['type'];
              if (typeValue3 !== null && typeValue3 !== undefined) {
                var typeInstance3 = typeValue3;
                localNetworkGateway2Instance.type = typeInstance3;
              }
              
              var locationValue3 = localNetworkGateway2Value['location'];
              if (locationValue3 !== null && locationValue3 !== undefined) {
                var locationInstance3 = locationValue3;
                localNetworkGateway2Instance.location = locationInstance3;
              }
              
              var tagsSequenceElement3 = localNetworkGateway2Value['tags'];
              if (tagsSequenceElement3 !== null && tagsSequenceElement3 !== undefined) {
                for (var property3 in tagsSequenceElement3) {
                  var tagsKey3 = property3;
                  var tagsValue3 = tagsSequenceElement3[property3];
                  localNetworkGateway2Instance.tags[tagsKey3] = tagsValue3;
                }
              }
            }
            
            var connectionTypeValue = propertiesValue['connectionType'];
            if (connectionTypeValue !== null && connectionTypeValue !== undefined) {
              var connectionTypeInstance = connectionTypeValue;
              virtualNetworkGatewayConnectionInstance.connectionType = connectionTypeInstance;
            }
            
            var routingWeightValue = propertiesValue['routingWeight'];
            if (routingWeightValue !== null && routingWeightValue !== undefined) {
              var routingWeightInstance = routingWeightValue;
              virtualNetworkGatewayConnectionInstance.routingWeight = routingWeightInstance;
            }
            
            var sharedKeyValue = propertiesValue['sharedKey'];
            if (sharedKeyValue !== null && sharedKeyValue !== undefined) {
              var sharedKeyInstance = sharedKeyValue;
              virtualNetworkGatewayConnectionInstance.sharedKey = sharedKeyInstance;
            }
            
            var connectionStatusValue = propertiesValue['connectionStatus'];
            if (connectionStatusValue !== null && connectionStatusValue !== undefined) {
              var connectionStatusInstance = connectionStatusValue;
              virtualNetworkGatewayConnectionInstance.connectionStatus = connectionStatusInstance;
            }
            
            var egressBytesTransferredValue = propertiesValue['egressBytesTransferred'];
            if (egressBytesTransferredValue !== null && egressBytesTransferredValue !== undefined) {
              var egressBytesTransferredInstance = egressBytesTransferredValue;
              virtualNetworkGatewayConnectionInstance.egressBytesTransferred = egressBytesTransferredInstance;
            }
            
            var ingressBytesTransferredValue = propertiesValue['ingressBytesTransferred'];
            if (ingressBytesTransferredValue !== null && ingressBytesTransferredValue !== undefined) {
              var ingressBytesTransferredInstance = ingressBytesTransferredValue;
              virtualNetworkGatewayConnectionInstance.ingressBytesTransferred = ingressBytesTransferredInstance;
            }
            
            var peerValue = propertiesValue['peer'];
            if (peerValue !== null && peerValue !== undefined) {
              var peerInstance = {};
              virtualNetworkGatewayConnectionInstance.peer = peerInstance;
              
              var idValue12 = peerValue['id'];
              if (idValue12 !== null && idValue12 !== undefined) {
                var idInstance12 = idValue12;
                peerInstance.id = idInstance12;
              }
            }
            
            var resourceGuidValue4 = propertiesValue['resourceGuid'];
            if (resourceGuidValue4 !== null && resourceGuidValue4 !== undefined) {
              var resourceGuidInstance4 = resourceGuidValue4;
              virtualNetworkGatewayConnectionInstance.resourceGuid = resourceGuidInstance4;
            }
            
            var provisioningStateValue6 = propertiesValue['provisioningState'];
            if (provisioningStateValue6 !== null && provisioningStateValue6 !== undefined) {
              var provisioningStateInstance6 = provisioningStateValue6;
              virtualNetworkGatewayConnectionInstance.provisioningState = provisioningStateInstance6;
            }
          }
          
          var etagValue6 = responseDoc['etag'];
          if (etagValue6 !== null && etagValue6 !== undefined) {
            var etagInstance6 = etagValue6;
            virtualNetworkGatewayConnectionInstance.etag = etagInstance6;
          }
          
          var idValue13 = responseDoc['id'];
          if (idValue13 !== null && idValue13 !== undefined) {
            var idInstance13 = idValue13;
            virtualNetworkGatewayConnectionInstance.id = idInstance13;
          }
          
          var nameValue6 = responseDoc['name'];
          if (nameValue6 !== null && nameValue6 !== undefined) {
            var nameInstance6 = nameValue6;
            virtualNetworkGatewayConnectionInstance.name = nameInstance6;
          }
          
          var typeValue4 = responseDoc['type'];
          if (typeValue4 !== null && typeValue4 !== undefined) {
            var typeInstance4 = typeValue4;
            virtualNetworkGatewayConnectionInstance.type = typeInstance4;
          }
          
          var locationValue4 = responseDoc['location'];
          if (locationValue4 !== null && locationValue4 !== undefined) {
            var locationInstance4 = locationValue4;
            virtualNetworkGatewayConnectionInstance.location = locationInstance4;
          }
          
          var tagsSequenceElement4 = responseDoc['tags'];
          if (tagsSequenceElement4 !== null && tagsSequenceElement4 !== undefined) {
            for (var property4 in tagsSequenceElement4) {
              var tagsKey4 = property4;
              var tagsValue4 = tagsSequenceElement4[property4];
              virtualNetworkGatewayConnectionInstance.tags[tagsKey4] = tagsValue4;
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The Get VirtualNetworkGatewayConnectionSharedKey operation retrieves
   * information about the specified virtual network gateway connection shared
   * key through Network resource provider.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} connectionSharedKeyName The virtual network gateway
   * connection shared key name.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  VirtualNetworkGatewayConnectionOperations.prototype.getSharedKey = function(resourceGroupName, connectionSharedKeyName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (connectionSharedKeyName === null || connectionSharedKeyName === undefined) {
      return callback(new Error('connectionSharedKeyName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Network';
    url2 = url2 + '/connections/';
    url2 = url2 + encodeURIComponent(connectionSharedKeyName);
    url2 = url2 + '/sharedkey';
    var queryParameters = [];
    queryParameters.push('api-version=2015-05-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var valueValue = responseDoc['value'];
          if (valueValue !== null && valueValue !== undefined) {
            var valueInstance = valueValue;
            result.value = valueInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The List VirtualNetworkGatewayConnections operation retrieves all the
   * virtual network gateways connections created.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  VirtualNetworkGatewayConnectionOperations.prototype.list = function(resourceGroupName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Network';
    url2 = url2 + '/connections';
    var queryParameters = [];
    queryParameters.push('api-version=2015-05-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = { virtualNetworkGatewayConnections: [] };
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var valueArray = responseDoc['value'];
          if (valueArray !== null && valueArray !== undefined) {
            for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var valueValue = valueArray[loweredIndex1];
              var virtualNetworkGatewayConnectionJsonFormatInstance = { tags: {} };
              result.virtualNetworkGatewayConnections.push(virtualNetworkGatewayConnectionJsonFormatInstance);
              
              var propertiesValue = valueValue['properties'];
              if (propertiesValue !== null && propertiesValue !== undefined) {
                var virtualNetworkGateway1Value = propertiesValue['virtualNetworkGateway1'];
                if (virtualNetworkGateway1Value !== null && virtualNetworkGateway1Value !== undefined) {
                  var virtualNetworkGateway1Instance = { ipConfigurations: [], tags: {} };
                  virtualNetworkGatewayConnectionJsonFormatInstance.virtualNetworkGateway1 = virtualNetworkGateway1Instance;
                  
                  var propertiesValue2 = virtualNetworkGateway1Value['properties'];
                  if (propertiesValue2 !== null && propertiesValue2 !== undefined) {
                    var ipConfigurationsArray = propertiesValue2['ipConfigurations'];
                    if (ipConfigurationsArray !== null && ipConfigurationsArray !== undefined) {
                      for (var loweredIndex2 = 0; loweredIndex2 < ipConfigurationsArray.length; loweredIndex2 = loweredIndex2 + 1) {
                        var ipConfigurationsValue = ipConfigurationsArray[loweredIndex2];
                        var virtualNetworkGatewayIpConfigurationJsonFormatInstance = {};
                        virtualNetworkGateway1Instance.ipConfigurations.push(virtualNetworkGatewayIpConfigurationJsonFormatInstance);
                        
                        var propertiesValue3 = ipConfigurationsValue['properties'];
                        if (propertiesValue3 !== null && propertiesValue3 !== undefined) {
                          var privateIPAddressValue = propertiesValue3['privateIPAddress'];
                          if (privateIPAddressValue !== null && privateIPAddressValue !== undefined) {
                            var privateIPAddressInstance = privateIPAddressValue;
                            virtualNetworkGatewayIpConfigurationJsonFormatInstance.privateIpAddress = privateIPAddressInstance;
                          }
                          
                          var privateIPAllocationMethodValue = propertiesValue3['privateIPAllocationMethod'];
                          if (privateIPAllocationMethodValue !== null && privateIPAllocationMethodValue !== undefined) {
                            var privateIPAllocationMethodInstance = privateIPAllocationMethodValue;
                            virtualNetworkGatewayIpConfigurationJsonFormatInstance.privateIpAllocationMethod = privateIPAllocationMethodInstance;
                          }
                          
                          var subnetValue = propertiesValue3['subnet'];
                          if (subnetValue !== null && subnetValue !== undefined) {
                            var subnetInstance = {};
                            virtualNetworkGatewayIpConfigurationJsonFormatInstance.subnet = subnetInstance;
                            
                            var idValue = subnetValue['id'];
                            if (idValue !== null && idValue !== undefined) {
                              var idInstance = idValue;
                              subnetInstance.id = idInstance;
                            }
                          }
                          
                          var publicIPAddressValue = propertiesValue3['publicIPAddress'];
                          if (publicIPAddressValue !== null && publicIPAddressValue !== undefined) {
                            var publicIPAddressInstance = {};
                            virtualNetworkGatewayIpConfigurationJsonFormatInstance.publicIpAddress = publicIPAddressInstance;
                            
                            var idValue2 = publicIPAddressValue['id'];
                            if (idValue2 !== null && idValue2 !== undefined) {
                              var idInstance2 = idValue2;
                              publicIPAddressInstance.id = idInstance2;
                            }
                          }
                          
                          var provisioningStateValue = propertiesValue3['provisioningState'];
                          if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
                            var provisioningStateInstance = provisioningStateValue;
                            virtualNetworkGatewayIpConfigurationJsonFormatInstance.provisioningState = provisioningStateInstance;
                          }
                        }
                        
                        var nameValue = ipConfigurationsValue['name'];
                        if (nameValue !== null && nameValue !== undefined) {
                          var nameInstance = nameValue;
                          virtualNetworkGatewayIpConfigurationJsonFormatInstance.name = nameInstance;
                        }
                        
                        var etagValue = ipConfigurationsValue['etag'];
                        if (etagValue !== null && etagValue !== undefined) {
                          var etagInstance = etagValue;
                          virtualNetworkGatewayIpConfigurationJsonFormatInstance.etag = etagInstance;
                        }
                        
                        var idValue3 = ipConfigurationsValue['id'];
                        if (idValue3 !== null && idValue3 !== undefined) {
                          var idInstance3 = idValue3;
                          virtualNetworkGatewayIpConfigurationJsonFormatInstance.id = idInstance3;
                        }
                      }
                    }
                    
                    var gatewayTypeValue = propertiesValue2['gatewayType'];
                    if (gatewayTypeValue !== null && gatewayTypeValue !== undefined) {
                      var gatewayTypeInstance = gatewayTypeValue;
                      virtualNetworkGateway1Instance.gatewayType = gatewayTypeInstance;
                    }
                    
                    var vpnTypeValue = propertiesValue2['vpnType'];
                    if (vpnTypeValue !== null && vpnTypeValue !== undefined) {
                      var vpnTypeInstance = vpnTypeValue;
                      virtualNetworkGateway1Instance.vpnType = vpnTypeInstance;
                    }
                    
                    var enableBgpValue = propertiesValue2['enableBgp'];
                    if (enableBgpValue !== null && enableBgpValue !== undefined) {
                      var enableBgpInstance = enableBgpValue;
                      virtualNetworkGateway1Instance.enableBgp = enableBgpInstance;
                    }
                    
                    var gatewayDefaultSiteValue = propertiesValue2['gatewayDefaultSite'];
                    if (gatewayDefaultSiteValue !== null && gatewayDefaultSiteValue !== undefined) {
                      var gatewayDefaultSiteInstance = {};
                      virtualNetworkGateway1Instance.gatewayDefaultSite = gatewayDefaultSiteInstance;
                      
                      var idValue4 = gatewayDefaultSiteValue['id'];
                      if (idValue4 !== null && idValue4 !== undefined) {
                        var idInstance4 = idValue4;
                        gatewayDefaultSiteInstance.id = idInstance4;
                      }
                    }
                    
                    var resourceGuidValue = propertiesValue2['resourceGuid'];
                    if (resourceGuidValue !== null && resourceGuidValue !== undefined) {
                      var resourceGuidInstance = resourceGuidValue;
                      virtualNetworkGateway1Instance.resourceGuid = resourceGuidInstance;
                    }
                    
                    var provisioningStateValue2 = propertiesValue2['provisioningState'];
                    if (provisioningStateValue2 !== null && provisioningStateValue2 !== undefined) {
                      var provisioningStateInstance2 = provisioningStateValue2;
                      virtualNetworkGateway1Instance.provisioningState = provisioningStateInstance2;
                    }
                  }
                  
                  var etagValue2 = virtualNetworkGateway1Value['etag'];
                  if (etagValue2 !== null && etagValue2 !== undefined) {
                    var etagInstance2 = etagValue2;
                    virtualNetworkGateway1Instance.etag = etagInstance2;
                  }
                  
                  var idValue5 = virtualNetworkGateway1Value['id'];
                  if (idValue5 !== null && idValue5 !== undefined) {
                    var idInstance5 = idValue5;
                    virtualNetworkGateway1Instance.id = idInstance5;
                  }
                  
                  var nameValue2 = virtualNetworkGateway1Value['name'];
                  if (nameValue2 !== null && nameValue2 !== undefined) {
                    var nameInstance2 = nameValue2;
                    virtualNetworkGateway1Instance.name = nameInstance2;
                  }
                  
                  var typeValue = virtualNetworkGateway1Value['type'];
                  if (typeValue !== null && typeValue !== undefined) {
                    var typeInstance = typeValue;
                    virtualNetworkGateway1Instance.type = typeInstance;
                  }
                  
                  var locationValue = virtualNetworkGateway1Value['location'];
                  if (locationValue !== null && locationValue !== undefined) {
                    var locationInstance = locationValue;
                    virtualNetworkGateway1Instance.location = locationInstance;
                  }
                  
                  var tagsSequenceElement = virtualNetworkGateway1Value['tags'];
                  if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
                    for (var property in tagsSequenceElement) {
                      var tagsKey = property;
                      var tagsValue = tagsSequenceElement[property];
                      virtualNetworkGateway1Instance.tags[tagsKey] = tagsValue;
                    }
                  }
                }
                
                var virtualNetworkGateway2Value = propertiesValue['virtualNetworkGateway2'];
                if (virtualNetworkGateway2Value !== null && virtualNetworkGateway2Value !== undefined) {
                  var virtualNetworkGateway2Instance = { ipConfigurations: [], tags: {} };
                  virtualNetworkGatewayConnectionJsonFormatInstance.virtualNetworkGateway2 = virtualNetworkGateway2Instance;
                  
                  var propertiesValue4 = virtualNetworkGateway2Value['properties'];
                  if (propertiesValue4 !== null && propertiesValue4 !== undefined) {
                    var ipConfigurationsArray2 = propertiesValue4['ipConfigurations'];
                    if (ipConfigurationsArray2 !== null && ipConfigurationsArray2 !== undefined) {
                      for (var loweredIndex3 = 0; loweredIndex3 < ipConfigurationsArray2.length; loweredIndex3 = loweredIndex3 + 1) {
                        var ipConfigurationsValue2 = ipConfigurationsArray2[loweredIndex3];
                        var virtualNetworkGatewayIpConfigurationJsonFormatInstance2 = {};
                        virtualNetworkGateway2Instance.ipConfigurations.push(virtualNetworkGatewayIpConfigurationJsonFormatInstance2);
                        
                        var propertiesValue5 = ipConfigurationsValue2['properties'];
                        if (propertiesValue5 !== null && propertiesValue5 !== undefined) {
                          var privateIPAddressValue2 = propertiesValue5['privateIPAddress'];
                          if (privateIPAddressValue2 !== null && privateIPAddressValue2 !== undefined) {
                            var privateIPAddressInstance2 = privateIPAddressValue2;
                            virtualNetworkGatewayIpConfigurationJsonFormatInstance2.privateIpAddress = privateIPAddressInstance2;
                          }
                          
                          var privateIPAllocationMethodValue2 = propertiesValue5['privateIPAllocationMethod'];
                          if (privateIPAllocationMethodValue2 !== null && privateIPAllocationMethodValue2 !== undefined) {
                            var privateIPAllocationMethodInstance2 = privateIPAllocationMethodValue2;
                            virtualNetworkGatewayIpConfigurationJsonFormatInstance2.privateIpAllocationMethod = privateIPAllocationMethodInstance2;
                          }
                          
                          var subnetValue2 = propertiesValue5['subnet'];
                          if (subnetValue2 !== null && subnetValue2 !== undefined) {
                            var subnetInstance2 = {};
                            virtualNetworkGatewayIpConfigurationJsonFormatInstance2.subnet = subnetInstance2;
                            
                            var idValue6 = subnetValue2['id'];
                            if (idValue6 !== null && idValue6 !== undefined) {
                              var idInstance6 = idValue6;
                              subnetInstance2.id = idInstance6;
                            }
                          }
                          
                          var publicIPAddressValue2 = propertiesValue5['publicIPAddress'];
                          if (publicIPAddressValue2 !== null && publicIPAddressValue2 !== undefined) {
                            var publicIPAddressInstance2 = {};
                            virtualNetworkGatewayIpConfigurationJsonFormatInstance2.publicIpAddress = publicIPAddressInstance2;
                            
                            var idValue7 = publicIPAddressValue2['id'];
                            if (idValue7 !== null && idValue7 !== undefined) {
                              var idInstance7 = idValue7;
                              publicIPAddressInstance2.id = idInstance7;
                            }
                          }
                          
                          var provisioningStateValue3 = propertiesValue5['provisioningState'];
                          if (provisioningStateValue3 !== null && provisioningStateValue3 !== undefined) {
                            var provisioningStateInstance3 = provisioningStateValue3;
                            virtualNetworkGatewayIpConfigurationJsonFormatInstance2.provisioningState = provisioningStateInstance3;
                          }
                        }
                        
                        var nameValue3 = ipConfigurationsValue2['name'];
                        if (nameValue3 !== null && nameValue3 !== undefined) {
                          var nameInstance3 = nameValue3;
                          virtualNetworkGatewayIpConfigurationJsonFormatInstance2.name = nameInstance3;
                        }
                        
                        var etagValue3 = ipConfigurationsValue2['etag'];
                        if (etagValue3 !== null && etagValue3 !== undefined) {
                          var etagInstance3 = etagValue3;
                          virtualNetworkGatewayIpConfigurationJsonFormatInstance2.etag = etagInstance3;
                        }
                        
                        var idValue8 = ipConfigurationsValue2['id'];
                        if (idValue8 !== null && idValue8 !== undefined) {
                          var idInstance8 = idValue8;
                          virtualNetworkGatewayIpConfigurationJsonFormatInstance2.id = idInstance8;
                        }
                      }
                    }
                    
                    var gatewayTypeValue2 = propertiesValue4['gatewayType'];
                    if (gatewayTypeValue2 !== null && gatewayTypeValue2 !== undefined) {
                      var gatewayTypeInstance2 = gatewayTypeValue2;
                      virtualNetworkGateway2Instance.gatewayType = gatewayTypeInstance2;
                    }
                    
                    var vpnTypeValue2 = propertiesValue4['vpnType'];
                    if (vpnTypeValue2 !== null && vpnTypeValue2 !== undefined) {
                      var vpnTypeInstance2 = vpnTypeValue2;
                      virtualNetworkGateway2Instance.vpnType = vpnTypeInstance2;
                    }
                    
                    var enableBgpValue2 = propertiesValue4['enableBgp'];
                    if (enableBgpValue2 !== null && enableBgpValue2 !== undefined) {
                      var enableBgpInstance2 = enableBgpValue2;
                      virtualNetworkGateway2Instance.enableBgp = enableBgpInstance2;
                    }
                    
                    var gatewayDefaultSiteValue2 = propertiesValue4['gatewayDefaultSite'];
                    if (gatewayDefaultSiteValue2 !== null && gatewayDefaultSiteValue2 !== undefined) {
                      var gatewayDefaultSiteInstance2 = {};
                      virtualNetworkGateway2Instance.gatewayDefaultSite = gatewayDefaultSiteInstance2;
                      
                      var idValue9 = gatewayDefaultSiteValue2['id'];
                      if (idValue9 !== null && idValue9 !== undefined) {
                        var idInstance9 = idValue9;
                        gatewayDefaultSiteInstance2.id = idInstance9;
                      }
                    }
                    
                    var resourceGuidValue2 = propertiesValue4['resourceGuid'];
                    if (resourceGuidValue2 !== null && resourceGuidValue2 !== undefined) {
                      var resourceGuidInstance2 = resourceGuidValue2;
                      virtualNetworkGateway2Instance.resourceGuid = resourceGuidInstance2;
                    }
                    
                    var provisioningStateValue4 = propertiesValue4['provisioningState'];
                    if (provisioningStateValue4 !== null && provisioningStateValue4 !== undefined) {
                      var provisioningStateInstance4 = provisioningStateValue4;
                      virtualNetworkGateway2Instance.provisioningState = provisioningStateInstance4;
                    }
                  }
                  
                  var etagValue4 = virtualNetworkGateway2Value['etag'];
                  if (etagValue4 !== null && etagValue4 !== undefined) {
                    var etagInstance4 = etagValue4;
                    virtualNetworkGateway2Instance.etag = etagInstance4;
                  }
                  
                  var idValue10 = virtualNetworkGateway2Value['id'];
                  if (idValue10 !== null && idValue10 !== undefined) {
                    var idInstance10 = idValue10;
                    virtualNetworkGateway2Instance.id = idInstance10;
                  }
                  
                  var nameValue4 = virtualNetworkGateway2Value['name'];
                  if (nameValue4 !== null && nameValue4 !== undefined) {
                    var nameInstance4 = nameValue4;
                    virtualNetworkGateway2Instance.name = nameInstance4;
                  }
                  
                  var typeValue2 = virtualNetworkGateway2Value['type'];
                  if (typeValue2 !== null && typeValue2 !== undefined) {
                    var typeInstance2 = typeValue2;
                    virtualNetworkGateway2Instance.type = typeInstance2;
                  }
                  
                  var locationValue2 = virtualNetworkGateway2Value['location'];
                  if (locationValue2 !== null && locationValue2 !== undefined) {
                    var locationInstance2 = locationValue2;
                    virtualNetworkGateway2Instance.location = locationInstance2;
                  }
                  
                  var tagsSequenceElement2 = virtualNetworkGateway2Value['tags'];
                  if (tagsSequenceElement2 !== null && tagsSequenceElement2 !== undefined) {
                    for (var property2 in tagsSequenceElement2) {
                      var tagsKey2 = property2;
                      var tagsValue2 = tagsSequenceElement2[property2];
                      virtualNetworkGateway2Instance.tags[tagsKey2] = tagsValue2;
                    }
                  }
                }
                
                var localNetworkGateway2Value = propertiesValue['localNetworkGateway2'];
                if (localNetworkGateway2Value !== null && localNetworkGateway2Value !== undefined) {
                  var localNetworkGateway2Instance = { tags: {} };
                  virtualNetworkGatewayConnectionJsonFormatInstance.localNetworkGateway2 = localNetworkGateway2Instance;
                  
                  var propertiesValue6 = localNetworkGateway2Value['properties'];
                  if (propertiesValue6 !== null && propertiesValue6 !== undefined) {
                    var localNetworkAddressSpaceValue = propertiesValue6['localNetworkAddressSpace'];
                    if (localNetworkAddressSpaceValue !== null && localNetworkAddressSpaceValue !== undefined) {
                      var localNetworkAddressSpaceInstance = { addressPrefixes: [] };
                      localNetworkGateway2Instance.localNetworkAddressSpace = localNetworkAddressSpaceInstance;
                      
                      var addressPrefixesArray = localNetworkAddressSpaceValue['addressPrefixes'];
                      if (addressPrefixesArray !== null && addressPrefixesArray !== undefined) {
                        for (var loweredIndex4 = 0; loweredIndex4 < addressPrefixesArray.length; loweredIndex4 = loweredIndex4 + 1) {
                          var addressPrefixesValue = addressPrefixesArray[loweredIndex4];
                          localNetworkAddressSpaceInstance.addressPrefixes.push(addressPrefixesValue);
                        }
                      }
                    }
                    
                    var gatewayIpAddressValue = propertiesValue6['gatewayIpAddress'];
                    if (gatewayIpAddressValue !== null && gatewayIpAddressValue !== undefined) {
                      var gatewayIpAddressInstance = gatewayIpAddressValue;
                      localNetworkGateway2Instance.gatewayIpAddress = gatewayIpAddressInstance;
                    }
                    
                    var resourceGuidValue3 = propertiesValue6['resourceGuid'];
                    if (resourceGuidValue3 !== null && resourceGuidValue3 !== undefined) {
                      var resourceGuidInstance3 = resourceGuidValue3;
                      localNetworkGateway2Instance.resourceGuid = resourceGuidInstance3;
                    }
                    
                    var provisioningStateValue5 = propertiesValue6['provisioningState'];
                    if (provisioningStateValue5 !== null && provisioningStateValue5 !== undefined) {
                      var provisioningStateInstance5 = provisioningStateValue5;
                      localNetworkGateway2Instance.provisioningState = provisioningStateInstance5;
                    }
                  }
                  
                  var etagValue5 = localNetworkGateway2Value['etag'];
                  if (etagValue5 !== null && etagValue5 !== undefined) {
                    var etagInstance5 = etagValue5;
                    localNetworkGateway2Instance.etag = etagInstance5;
                  }
                  
                  var idValue11 = localNetworkGateway2Value['id'];
                  if (idValue11 !== null && idValue11 !== undefined) {
                    var idInstance11 = idValue11;
                    localNetworkGateway2Instance.id = idInstance11;
                  }
                  
                  var nameValue5 = localNetworkGateway2Value['name'];
                  if (nameValue5 !== null && nameValue5 !== undefined) {
                    var nameInstance5 = nameValue5;
                    localNetworkGateway2Instance.name = nameInstance5;
                  }
                  
                  var typeValue3 = localNetworkGateway2Value['type'];
                  if (typeValue3 !== null && typeValue3 !== undefined) {
                    var typeInstance3 = typeValue3;
                    localNetworkGateway2Instance.type = typeInstance3;
                  }
                  
                  var locationValue3 = localNetworkGateway2Value['location'];
                  if (locationValue3 !== null && locationValue3 !== undefined) {
                    var locationInstance3 = locationValue3;
                    localNetworkGateway2Instance.location = locationInstance3;
                  }
                  
                  var tagsSequenceElement3 = localNetworkGateway2Value['tags'];
                  if (tagsSequenceElement3 !== null && tagsSequenceElement3 !== undefined) {
                    for (var property3 in tagsSequenceElement3) {
                      var tagsKey3 = property3;
                      var tagsValue3 = tagsSequenceElement3[property3];
                      localNetworkGateway2Instance.tags[tagsKey3] = tagsValue3;
                    }
                  }
                }
                
                var connectionTypeValue = propertiesValue['connectionType'];
                if (connectionTypeValue !== null && connectionTypeValue !== undefined) {
                  var connectionTypeInstance = connectionTypeValue;
                  virtualNetworkGatewayConnectionJsonFormatInstance.connectionType = connectionTypeInstance;
                }
                
                var routingWeightValue = propertiesValue['routingWeight'];
                if (routingWeightValue !== null && routingWeightValue !== undefined) {
                  var routingWeightInstance = routingWeightValue;
                  virtualNetworkGatewayConnectionJsonFormatInstance.routingWeight = routingWeightInstance;
                }
                
                var sharedKeyValue = propertiesValue['sharedKey'];
                if (sharedKeyValue !== null && sharedKeyValue !== undefined) {
                  var sharedKeyInstance = sharedKeyValue;
                  virtualNetworkGatewayConnectionJsonFormatInstance.sharedKey = sharedKeyInstance;
                }
                
                var connectionStatusValue = propertiesValue['connectionStatus'];
                if (connectionStatusValue !== null && connectionStatusValue !== undefined) {
                  var connectionStatusInstance = connectionStatusValue;
                  virtualNetworkGatewayConnectionJsonFormatInstance.connectionStatus = connectionStatusInstance;
                }
                
                var egressBytesTransferredValue = propertiesValue['egressBytesTransferred'];
                if (egressBytesTransferredValue !== null && egressBytesTransferredValue !== undefined) {
                  var egressBytesTransferredInstance = egressBytesTransferredValue;
                  virtualNetworkGatewayConnectionJsonFormatInstance.egressBytesTransferred = egressBytesTransferredInstance;
                }
                
                var ingressBytesTransferredValue = propertiesValue['ingressBytesTransferred'];
                if (ingressBytesTransferredValue !== null && ingressBytesTransferredValue !== undefined) {
                  var ingressBytesTransferredInstance = ingressBytesTransferredValue;
                  virtualNetworkGatewayConnectionJsonFormatInstance.ingressBytesTransferred = ingressBytesTransferredInstance;
                }
                
                var peerValue = propertiesValue['peer'];
                if (peerValue !== null && peerValue !== undefined) {
                  var peerInstance = {};
                  virtualNetworkGatewayConnectionJsonFormatInstance.peer = peerInstance;
                  
                  var idValue12 = peerValue['id'];
                  if (idValue12 !== null && idValue12 !== undefined) {
                    var idInstance12 = idValue12;
                    peerInstance.id = idInstance12;
                  }
                }
                
                var resourceGuidValue4 = propertiesValue['resourceGuid'];
                if (resourceGuidValue4 !== null && resourceGuidValue4 !== undefined) {
                  var resourceGuidInstance4 = resourceGuidValue4;
                  virtualNetworkGatewayConnectionJsonFormatInstance.resourceGuid = resourceGuidInstance4;
                }
                
                var provisioningStateValue6 = propertiesValue['provisioningState'];
                if (provisioningStateValue6 !== null && provisioningStateValue6 !== undefined) {
                  var provisioningStateInstance6 = provisioningStateValue6;
                  virtualNetworkGatewayConnectionJsonFormatInstance.provisioningState = provisioningStateInstance6;
                }
              }
              
              var etagValue6 = valueValue['etag'];
              if (etagValue6 !== null && etagValue6 !== undefined) {
                var etagInstance6 = etagValue6;
                virtualNetworkGatewayConnectionJsonFormatInstance.etag = etagInstance6;
              }
              
              var idValue13 = valueValue['id'];
              if (idValue13 !== null && idValue13 !== undefined) {
                var idInstance13 = idValue13;
                virtualNetworkGatewayConnectionJsonFormatInstance.id = idInstance13;
              }
              
              var nameValue6 = valueValue['name'];
              if (nameValue6 !== null && nameValue6 !== undefined) {
                var nameInstance6 = nameValue6;
                virtualNetworkGatewayConnectionJsonFormatInstance.name = nameInstance6;
              }
              
              var typeValue4 = valueValue['type'];
              if (typeValue4 !== null && typeValue4 !== undefined) {
                var typeInstance4 = typeValue4;
                virtualNetworkGatewayConnectionJsonFormatInstance.type = typeInstance4;
              }
              
              var locationValue4 = valueValue['location'];
              if (locationValue4 !== null && locationValue4 !== undefined) {
                var locationInstance4 = locationValue4;
                virtualNetworkGatewayConnectionJsonFormatInstance.location = locationInstance4;
              }
              
              var tagsSequenceElement4 = valueValue['tags'];
              if (tagsSequenceElement4 !== null && tagsSequenceElement4 !== undefined) {
                for (var property4 in tagsSequenceElement4) {
                  var tagsKey4 = property4;
                  var tagsValue4 = tagsSequenceElement4[property4];
                  virtualNetworkGatewayConnectionJsonFormatInstance.tags[tagsKey4] = tagsValue4;
                }
              }
            }
          }
          
          var nextLinkValue = responseDoc['nextLink'];
          if (nextLinkValue !== null && nextLinkValue !== undefined) {
            var nextLinkInstance = nextLinkValue;
            result.nextLink = nextLinkInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The Reset VirtualNetworkGatewayConnectionSharedKey operation resets the
   * virtual network gateway connection shared key for passed virtual network
   * gateway connection in the specified resource group through Network
   * resource provider.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} virtualNetworkGatewayConnectionName The virtual network
   * gateway connection name.
   * 
   * @param {ConnectionResetSharedKey} parameters Parameters supplied to the
   * Begin Reset Virtual Network Gateway connection shared key operation
   * through Network resource provider.
   * 
   * @param {number} [parameters.keyLength] The virtual network connection
   * reset shared key length
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  VirtualNetworkGatewayConnectionOperations.prototype.resetSharedKey = function(resourceGroupName, virtualNetworkGatewayConnectionName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.virtualNetworkGatewayConnections.beginResetSharedKey(resourceGroupName, virtualNetworkGatewayConnectionName, parameters, function (err, result) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var delayInSeconds = result.retryAfter;
      if (delayInSeconds === 0) {
        delayInSeconds = 30;
      }
      if (client2.longRunningOperationInitialTimeout >= 0) {
        delayInSeconds = client2.longRunningOperationInitialTimeout;
      }
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.getLongRunningOperationStatus(result.azureAsyncOperation, function (err2, result2) {
            if (err2 !== null && err2 !== undefined) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                return callback(null, result2);
              } else {
                delayInSeconds = result2.retryAfter;
                if (delayInSeconds === 0) {
                  delayInSeconds = 30;
                }
                if (client2.longRunningOperationRetryTimeout >= 0) {
                  delayInSeconds = client2.longRunningOperationRetryTimeout;
                }
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  /**
   * The Put VirtualNetworkGatewayConnectionSharedKey operation sets the
   * virtual network gateway connection shared key for passed virtual network
   * gateway connection in the specified resource group through Network
   * resource provider.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} virtualNetworkGatewayConnectionName The virtual network
   * gateway connection name.
   * 
   * @param {ConnectionSharedKey} parameters Parameters supplied to the Begin
   * Create or update Virtual Network Gateway connection shared key operation
   * through Network resource provider.
   * 
   * @param {string} [parameters.value] The virtual network connection shared
   * key value
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  VirtualNetworkGatewayConnectionOperations.prototype.setSharedKey = function(resourceGroupName, virtualNetworkGatewayConnectionName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.virtualNetworkGatewayConnections.beginSetSharedKey(resourceGroupName, virtualNetworkGatewayConnectionName, parameters, function (err, result) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var delayInSeconds = result.retryAfter;
      if (delayInSeconds === 0) {
        delayInSeconds = 30;
      }
      if (client2.longRunningOperationInitialTimeout >= 0) {
        delayInSeconds = client2.longRunningOperationInitialTimeout;
      }
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.getLongRunningOperationStatus(result.azureAsyncOperation, function (err2, result2) {
            if (err2 !== null && err2 !== undefined) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                return callback(null, result2);
              } else {
                delayInSeconds = result2.retryAfter;
                if (delayInSeconds === 0) {
                  delayInSeconds = 30;
                }
                if (client2.longRunningOperationRetryTimeout >= 0) {
                  delayInSeconds = client2.longRunningOperationRetryTimeout;
                }
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  return VirtualNetworkGatewayConnectionOperations;
})();

var VirtualNetworkGatewayOperations = ( /** @lends VirtualNetworkGatewayOperations */ function() {
  /**
   * @class
   * The Network Resource Provider API includes operations for managing the
   * Virtual network Gateway for your subscription.
   * __NOTE__: An instance of this class is automatically created for an
   * instance of the [NetworkResourceProviderClient] {@link
   * NetworkResourceProviderClient~NetworkResourceProviderClient}.
   * See [virtualNetworkGateways] {@link
   * NetworkResourceProviderClient~NetworkResourceProviderClient#virtualNetworkGateways}.
   * Initializes a new instance of the VirtualNetworkGatewayOperations class.
   * @constructor
   * 
   * @param {NetworkResourceProviderClient} client Reference to the service
   * client.
   */
  function VirtualNetworkGatewayOperations(client) {
    this.client = client;
  }
  
  /**
   * The Put VirtualNetworkGateway operation creates/updates a virtual network
   * gateway in the specified resource group through Network resource provider.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} virtualNetworkGatewayName The name of the virtual network
   * gateway.
   * 
   * @param {VirtualNetworkGateway} parameters Parameters supplied to the Begin
   * Create or update Virtual Network Gateway operation through Network
   * resource provider.
   * 
   * @param {IEnumerable} [parameters.ipConfigurations] IpConfigurations for
   * Virtual network gateway.
   * 
   * @param {string} [parameters.gatewayType] The type of this virtual network
   * gateway.
   * 
   * @param {string} [parameters.vpnType] The type of this virtual network
   * gateway.
   * 
   * @param {boolean} [parameters.enableBgp] EnableBgp Flag
   * 
   * @param {BgpSettings} [parameters.bgpSettings] Settings for this virtual
   * network gateway's BGP speaker
   * 
   * @param {number} [parameters.bgpSettings.asn] Autonomous System Number
   * 
   * @param {string} [parameters.bgpSettings.bgpPeeringAddress] BGP speaker's
   * IP/BGP identifier
   * 
   * @param {number} [parameters.bgpSettings.peerWeight] Weight given to routes
   * learned from this BGP speaker
   * 
   * @param {ResourceId} [parameters.gatewayDefaultSite] Gets or sets the
   * reference of the LocalNetworkGateway resource which represents Local
   * network site having default routes. Assign Null value in case of removing
   * existing default site setting.
   * 
   * @param {string} [parameters.gatewayDefaultSite.id] Id of the resource
   * 
   * @param {string} [parameters.provisioningState] Gets or sets Provisioning
   * state of the VirtualNetworkGateway resource Updating/Deleting/Failed
   * 
   * @param {string} [parameters.resourceGuid] Gets or sets resource guid
   * property of the VirtualNetworkGateway resource
   * 
   * @param {string} [parameters.etag] Gets a unique read-only string that
   * changes whenever the resource is updated
   * 
   * @param {string} [parameters.id] Gets or sets the ID of the resource.
   * 
   * @param {string} [parameters.name] Gets or sets the name of the resource.
   * 
   * @param {string} [parameters.type] Gets or sets the type of the resource.
   * 
   * @param {string} [parameters.location] Gets or sets the location of the
   * resource.
   * 
   * @param {object} [parameters.tags] Gets or sets the tags attached to the
   * resource.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  VirtualNetworkGatewayOperations.prototype.beginCreateOrUpdating = function(resourceGroupName, virtualNetworkGatewayName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (virtualNetworkGatewayName === null || virtualNetworkGatewayName === undefined) {
      return callback(new Error('virtualNetworkGatewayName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Network';
    url2 = url2 + '/virtualnetworkgateways/';
    url2 = url2 + encodeURIComponent(virtualNetworkGatewayName);
    var queryParameters = [];
    queryParameters.push('api-version=2015-05-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = null;
    
    var virtualNetworkGatewayJsonFormatValue = {};
    requestDoc = virtualNetworkGatewayJsonFormatValue;
    
    var propertiesValue = {};
    virtualNetworkGatewayJsonFormatValue['properties'] = propertiesValue;
    
    if (parameters.ipConfigurations !== null && parameters.ipConfigurations !== undefined) {
      var ipConfigurationsArray = [];
      for (var loweredIndex1 = 0; loweredIndex1 < parameters.ipConfigurations.length; loweredIndex1 = loweredIndex1 + 1) {
        var ipConfigurationsItem = parameters.ipConfigurations[loweredIndex1];
        var virtualNetworkGatewayIpConfigurationJsonFormatValue = {};
        ipConfigurationsArray.push(virtualNetworkGatewayIpConfigurationJsonFormatValue);
        
        var propertiesValue2 = {};
        virtualNetworkGatewayIpConfigurationJsonFormatValue['properties'] = propertiesValue2;
        
        if (ipConfigurationsItem.privateIpAddress !== null && ipConfigurationsItem.privateIpAddress !== undefined) {
          propertiesValue2['privateIPAddress'] = ipConfigurationsItem.privateIpAddress;
        }
        
        if (ipConfigurationsItem.privateIpAllocationMethod !== null && ipConfigurationsItem.privateIpAllocationMethod !== undefined) {
          propertiesValue2['privateIPAllocationMethod'] = ipConfigurationsItem.privateIpAllocationMethod;
        }
        
        if (ipConfigurationsItem.subnet !== null && ipConfigurationsItem.subnet !== undefined) {
          var subnetValue = {};
          propertiesValue2['subnet'] = subnetValue;
          
          if (ipConfigurationsItem.subnet.id !== null && ipConfigurationsItem.subnet.id !== undefined) {
            subnetValue['id'] = ipConfigurationsItem.subnet.id;
          }
        }
        
        if (ipConfigurationsItem.publicIpAddress !== null && ipConfigurationsItem.publicIpAddress !== undefined) {
          var publicIPAddressValue = {};
          propertiesValue2['publicIPAddress'] = publicIPAddressValue;
          
          if (ipConfigurationsItem.publicIpAddress.id !== null && ipConfigurationsItem.publicIpAddress.id !== undefined) {
            publicIPAddressValue['id'] = ipConfigurationsItem.publicIpAddress.id;
          }
        }
        
        if (ipConfigurationsItem.provisioningState !== null && ipConfigurationsItem.provisioningState !== undefined) {
          propertiesValue2['provisioningState'] = ipConfigurationsItem.provisioningState;
        }
        
        if (ipConfigurationsItem.name !== null && ipConfigurationsItem.name !== undefined) {
          virtualNetworkGatewayIpConfigurationJsonFormatValue['name'] = ipConfigurationsItem.name;
        }
        
        if (ipConfigurationsItem.etag !== null && ipConfigurationsItem.etag !== undefined) {
          virtualNetworkGatewayIpConfigurationJsonFormatValue['etag'] = ipConfigurationsItem.etag;
        }
        
        if (ipConfigurationsItem.id !== null && ipConfigurationsItem.id !== undefined) {
          virtualNetworkGatewayIpConfigurationJsonFormatValue['id'] = ipConfigurationsItem.id;
        }
      }
      propertiesValue['ipConfigurations'] = ipConfigurationsArray;
    }
    
    if (parameters.gatewayType !== null && parameters.gatewayType !== undefined) {
      propertiesValue['gatewayType'] = parameters.gatewayType;
    }
    
    if (parameters.vpnType !== null && parameters.vpnType !== undefined) {
      propertiesValue['vpnType'] = parameters.vpnType;
    }
    
    if (parameters.enableBgp !== null && parameters.enableBgp !== undefined) {
      propertiesValue['enableBgp'] = parameters.enableBgp;
    }
    
    if (parameters.gatewayDefaultSite !== null && parameters.gatewayDefaultSite !== undefined) {
      var gatewayDefaultSiteValue = {};
      propertiesValue['gatewayDefaultSite'] = gatewayDefaultSiteValue;
      
      if (parameters.gatewayDefaultSite.id !== null && parameters.gatewayDefaultSite.id !== undefined) {
        gatewayDefaultSiteValue['id'] = parameters.gatewayDefaultSite.id;
      }
    }
    
    if (parameters.resourceGuid !== null && parameters.resourceGuid !== undefined) {
      propertiesValue['resourceGuid'] = parameters.resourceGuid;
    }
    
    if (parameters.provisioningState !== null && parameters.provisioningState !== undefined) {
      propertiesValue['provisioningState'] = parameters.provisioningState;
    }
    
    if (parameters.etag !== null && parameters.etag !== undefined) {
      virtualNetworkGatewayJsonFormatValue['etag'] = parameters.etag;
    }
    
    if (parameters.id !== null && parameters.id !== undefined) {
      virtualNetworkGatewayJsonFormatValue['id'] = parameters.id;
    }
    
    if (parameters.name !== null && parameters.name !== undefined) {
      virtualNetworkGatewayJsonFormatValue['name'] = parameters.name;
    }
    
    if (parameters.type !== null && parameters.type !== undefined) {
      virtualNetworkGatewayJsonFormatValue['type'] = parameters.type;
    }
    
    if (parameters.location !== null && parameters.location !== undefined) {
      virtualNetworkGatewayJsonFormatValue['location'] = parameters.location;
    }
    
    if (parameters.tags !== null && parameters.tags !== undefined) {
      var tagsDictionary = {};
      for (var tagsKey in parameters.tags) {
        var tagsValue = parameters.tags[tagsKey];
        tagsDictionary[tagsKey] = tagsValue;
      }
      virtualNetworkGatewayJsonFormatValue['tags'] = tagsDictionary;
    }
    
    requestContent = JSON.stringify(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200 && statusCode !== 201) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200 || statusCode === 201) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var virtualNetworkGatewayInstance = { ipConfigurations: [], tags: {} };
          result.virtualNetworkGateway = virtualNetworkGatewayInstance;
          
          var propertiesValue3 = responseDoc['properties'];
          if (propertiesValue3 !== null && propertiesValue3 !== undefined) {
            var ipConfigurationsArray2 = propertiesValue3['ipConfigurations'];
            if (ipConfigurationsArray2 !== null && ipConfigurationsArray2 !== undefined) {
              for (var loweredIndex2 = 0; loweredIndex2 < ipConfigurationsArray2.length; loweredIndex2 = loweredIndex2 + 1) {
                var ipConfigurationsValue = ipConfigurationsArray2[loweredIndex2];
                var virtualNetworkGatewayIpConfigurationJsonFormatInstance = {};
                virtualNetworkGatewayInstance.ipConfigurations.push(virtualNetworkGatewayIpConfigurationJsonFormatInstance);
                
                var propertiesValue4 = ipConfigurationsValue['properties'];
                if (propertiesValue4 !== null && propertiesValue4 !== undefined) {
                  var privateIPAddressValue = propertiesValue4['privateIPAddress'];
                  if (privateIPAddressValue !== null && privateIPAddressValue !== undefined) {
                    var privateIPAddressInstance = privateIPAddressValue;
                    virtualNetworkGatewayIpConfigurationJsonFormatInstance.privateIpAddress = privateIPAddressInstance;
                  }
                  
                  var privateIPAllocationMethodValue = propertiesValue4['privateIPAllocationMethod'];
                  if (privateIPAllocationMethodValue !== null && privateIPAllocationMethodValue !== undefined) {
                    var privateIPAllocationMethodInstance = privateIPAllocationMethodValue;
                    virtualNetworkGatewayIpConfigurationJsonFormatInstance.privateIpAllocationMethod = privateIPAllocationMethodInstance;
                  }
                  
                  var subnetValue2 = propertiesValue4['subnet'];
                  if (subnetValue2 !== null && subnetValue2 !== undefined) {
                    var subnetInstance = {};
                    virtualNetworkGatewayIpConfigurationJsonFormatInstance.subnet = subnetInstance;
                    
                    var idValue = subnetValue2['id'];
                    if (idValue !== null && idValue !== undefined) {
                      var idInstance = idValue;
                      subnetInstance.id = idInstance;
                    }
                  }
                  
                  var publicIPAddressValue2 = propertiesValue4['publicIPAddress'];
                  if (publicIPAddressValue2 !== null && publicIPAddressValue2 !== undefined) {
                    var publicIPAddressInstance = {};
                    virtualNetworkGatewayIpConfigurationJsonFormatInstance.publicIpAddress = publicIPAddressInstance;
                    
                    var idValue2 = publicIPAddressValue2['id'];
                    if (idValue2 !== null && idValue2 !== undefined) {
                      var idInstance2 = idValue2;
                      publicIPAddressInstance.id = idInstance2;
                    }
                  }
                  
                  var provisioningStateValue = propertiesValue4['provisioningState'];
                  if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
                    var provisioningStateInstance = provisioningStateValue;
                    virtualNetworkGatewayIpConfigurationJsonFormatInstance.provisioningState = provisioningStateInstance;
                  }
                }
                
                var nameValue = ipConfigurationsValue['name'];
                if (nameValue !== null && nameValue !== undefined) {
                  var nameInstance = nameValue;
                  virtualNetworkGatewayIpConfigurationJsonFormatInstance.name = nameInstance;
                }
                
                var etagValue = ipConfigurationsValue['etag'];
                if (etagValue !== null && etagValue !== undefined) {
                  var etagInstance = etagValue;
                  virtualNetworkGatewayIpConfigurationJsonFormatInstance.etag = etagInstance;
                }
                
                var idValue3 = ipConfigurationsValue['id'];
                if (idValue3 !== null && idValue3 !== undefined) {
                  var idInstance3 = idValue3;
                  virtualNetworkGatewayIpConfigurationJsonFormatInstance.id = idInstance3;
                }
              }
            }
            
            var gatewayTypeValue = propertiesValue3['gatewayType'];
            if (gatewayTypeValue !== null && gatewayTypeValue !== undefined) {
              var gatewayTypeInstance = gatewayTypeValue;
              virtualNetworkGatewayInstance.gatewayType = gatewayTypeInstance;
            }
            
            var vpnTypeValue = propertiesValue3['vpnType'];
            if (vpnTypeValue !== null && vpnTypeValue !== undefined) {
              var vpnTypeInstance = vpnTypeValue;
              virtualNetworkGatewayInstance.vpnType = vpnTypeInstance;
            }
            
            var enableBgpValue = propertiesValue3['enableBgp'];
            if (enableBgpValue !== null && enableBgpValue !== undefined) {
              var enableBgpInstance = enableBgpValue;
              virtualNetworkGatewayInstance.enableBgp = enableBgpInstance;
            }
            
            var gatewayDefaultSiteValue2 = propertiesValue3['gatewayDefaultSite'];
            if (gatewayDefaultSiteValue2 !== null && gatewayDefaultSiteValue2 !== undefined) {
              var gatewayDefaultSiteInstance = {};
              virtualNetworkGatewayInstance.gatewayDefaultSite = gatewayDefaultSiteInstance;
              
              var idValue4 = gatewayDefaultSiteValue2['id'];
              if (idValue4 !== null && idValue4 !== undefined) {
                var idInstance4 = idValue4;
                gatewayDefaultSiteInstance.id = idInstance4;
              }
            }
            
            var resourceGuidValue = propertiesValue3['resourceGuid'];
            if (resourceGuidValue !== null && resourceGuidValue !== undefined) {
              var resourceGuidInstance = resourceGuidValue;
              virtualNetworkGatewayInstance.resourceGuid = resourceGuidInstance;
            }
            
            var provisioningStateValue2 = propertiesValue3['provisioningState'];
            if (provisioningStateValue2 !== null && provisioningStateValue2 !== undefined) {
              var provisioningStateInstance2 = provisioningStateValue2;
              virtualNetworkGatewayInstance.provisioningState = provisioningStateInstance2;
            }
          }
          
          var etagValue2 = responseDoc['etag'];
          if (etagValue2 !== null && etagValue2 !== undefined) {
            var etagInstance2 = etagValue2;
            virtualNetworkGatewayInstance.etag = etagInstance2;
          }
          
          var idValue5 = responseDoc['id'];
          if (idValue5 !== null && idValue5 !== undefined) {
            var idInstance5 = idValue5;
            virtualNetworkGatewayInstance.id = idInstance5;
          }
          
          var nameValue2 = responseDoc['name'];
          if (nameValue2 !== null && nameValue2 !== undefined) {
            var nameInstance2 = nameValue2;
            virtualNetworkGatewayInstance.name = nameInstance2;
          }
          
          var typeValue = responseDoc['type'];
          if (typeValue !== null && typeValue !== undefined) {
            var typeInstance = typeValue;
            virtualNetworkGatewayInstance.type = typeInstance;
          }
          
          var locationValue = responseDoc['location'];
          if (locationValue !== null && locationValue !== undefined) {
            var locationInstance = locationValue;
            virtualNetworkGatewayInstance.location = locationInstance;
          }
          
          var tagsSequenceElement = responseDoc['tags'];
          if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
            for (var property in tagsSequenceElement) {
              var tagsKey2 = property;
              var tagsValue2 = tagsSequenceElement[property];
              virtualNetworkGatewayInstance.tags[tagsKey2] = tagsValue2;
            }
          }
          
          var errorValue = responseDoc['error'];
          if (errorValue !== null && errorValue !== undefined) {
            var errorInstance = { details: [] };
            result.error = errorInstance;
            
            var codeValue = errorValue['code'];
            if (codeValue !== null && codeValue !== undefined) {
              var codeInstance = codeValue;
              errorInstance.code = codeInstance;
            }
            
            var messageValue = errorValue['message'];
            if (messageValue !== null && messageValue !== undefined) {
              var messageInstance = messageValue;
              errorInstance.message = messageInstance;
            }
            
            var targetValue = errorValue['target'];
            if (targetValue !== null && targetValue !== undefined) {
              var targetInstance = targetValue;
              errorInstance.target = targetInstance;
            }
            
            var detailsArray = errorValue['details'];
            if (detailsArray !== null && detailsArray !== undefined) {
              for (var loweredIndex3 = 0; loweredIndex3 < detailsArray.length; loweredIndex3 = loweredIndex3 + 1) {
                var detailsValue = detailsArray[loweredIndex3];
                var errorDetailsInstance = {};
                errorInstance.details.push(errorDetailsInstance);
                
                var codeValue2 = detailsValue['code'];
                if (codeValue2 !== null && codeValue2 !== undefined) {
                  var codeInstance2 = codeValue2;
                  errorDetailsInstance.code = codeInstance2;
                }
                
                var targetValue2 = detailsValue['target'];
                if (targetValue2 !== null && targetValue2 !== undefined) {
                  var targetInstance2 = targetValue2;
                  errorDetailsInstance.target = targetInstance2;
                }
                
                var messageValue2 = detailsValue['message'];
                if (messageValue2 !== null && messageValue2 !== undefined) {
                  var messageInstance2 = messageValue2;
                  errorDetailsInstance.message = messageInstance2;
                }
              }
            }
            
            var innerErrorValue = errorValue['innerError'];
            if (innerErrorValue !== null && innerErrorValue !== undefined) {
              var innerErrorInstance = innerErrorValue;
              errorInstance.innerError = innerErrorInstance;
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      result.azureAsyncOperation = response.headers['azure-asyncoperation'];
      result.retryAfter = parseInt(response.headers['retry-after'], 10);
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The Delete VirtualNetworkGateway operation deletes the specifed virtual
   * network Gateway through Network resource provider.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} virtualNetworkGatewayName The name of the virtual network
   * gateway.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  VirtualNetworkGatewayOperations.prototype.beginDeleting = function(resourceGroupName, virtualNetworkGatewayName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (virtualNetworkGatewayName === null || virtualNetworkGatewayName === undefined) {
      return callback(new Error('virtualNetworkGatewayName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Network';
    url2 = url2 + '/virtualNetworkGateways/';
    url2 = url2 + encodeURIComponent(virtualNetworkGatewayName);
    url2 = url2 + '/';
    var queryParameters = [];
    queryParameters.push('api-version=2015-05-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'DELETE';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200 && statusCode !== 202 && statusCode !== 204) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      result = {};
      result.statusCode = statusCode;
      result.azureAsyncOperation = response.headers['azure-asyncoperation'];
      result.retryAfter = parseInt(response.headers['retry-after'], 10);
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The Reset VirtualNetworkGateway operation resets the primary of the
   * virtual network gatewayin the specified resource group through Network
   * resource provider.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} virtualNetworkGatewayName The name of the virtual network
   * gateway.
   * 
   * @param {VirtualNetworkGateway} parameters Parameters supplied to the Begin
   * Reset Virtual Network Gateway operation through Network resource provider.
   * 
   * @param {IEnumerable} [parameters.ipConfigurations] IpConfigurations for
   * Virtual network gateway.
   * 
   * @param {string} [parameters.gatewayType] The type of this virtual network
   * gateway.
   * 
   * @param {string} [parameters.vpnType] The type of this virtual network
   * gateway.
   * 
   * @param {boolean} [parameters.enableBgp] EnableBgp Flag
   * 
   * @param {BgpSettings} [parameters.bgpSettings] Settings for this virtual
   * network gateway's BGP speaker
   * 
   * @param {number} [parameters.bgpSettings.asn] Autonomous System Number
   * 
   * @param {string} [parameters.bgpSettings.bgpPeeringAddress] BGP speaker's
   * IP/BGP identifier
   * 
   * @param {number} [parameters.bgpSettings.peerWeight] Weight given to routes
   * learned from this BGP speaker
   * 
   * @param {ResourceId} [parameters.gatewayDefaultSite] Gets or sets the
   * reference of the LocalNetworkGateway resource which represents Local
   * network site having default routes. Assign Null value in case of removing
   * existing default site setting.
   * 
   * @param {string} [parameters.gatewayDefaultSite.id] Id of the resource
   * 
   * @param {string} [parameters.provisioningState] Gets or sets Provisioning
   * state of the VirtualNetworkGateway resource Updating/Deleting/Failed
   * 
   * @param {string} [parameters.resourceGuid] Gets or sets resource guid
   * property of the VirtualNetworkGateway resource
   * 
   * @param {string} [parameters.etag] Gets a unique read-only string that
   * changes whenever the resource is updated
   * 
   * @param {string} [parameters.id] Gets or sets the ID of the resource.
   * 
   * @param {string} [parameters.name] Gets or sets the name of the resource.
   * 
   * @param {string} [parameters.type] Gets or sets the type of the resource.
   * 
   * @param {string} [parameters.location] Gets or sets the location of the
   * resource.
   * 
   * @param {object} [parameters.tags] Gets or sets the tags attached to the
   * resource.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  VirtualNetworkGatewayOperations.prototype.beginReset = function(resourceGroupName, virtualNetworkGatewayName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (virtualNetworkGatewayName === null || virtualNetworkGatewayName === undefined) {
      return callback(new Error('virtualNetworkGatewayName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Network';
    url2 = url2 + '/virtualnetworkgateways/';
    url2 = url2 + encodeURIComponent(virtualNetworkGatewayName);
    url2 = url2 + '/reset';
    var queryParameters = [];
    queryParameters.push('api-version=2015-05-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = null;
    
    var virtualNetworkGatewayJsonFormatValue = {};
    requestDoc = virtualNetworkGatewayJsonFormatValue;
    
    var propertiesValue = {};
    virtualNetworkGatewayJsonFormatValue['properties'] = propertiesValue;
    
    if (parameters.ipConfigurations !== null && parameters.ipConfigurations !== undefined) {
      var ipConfigurationsArray = [];
      for (var loweredIndex1 = 0; loweredIndex1 < parameters.ipConfigurations.length; loweredIndex1 = loweredIndex1 + 1) {
        var ipConfigurationsItem = parameters.ipConfigurations[loweredIndex1];
        var virtualNetworkGatewayIpConfigurationJsonFormatValue = {};
        ipConfigurationsArray.push(virtualNetworkGatewayIpConfigurationJsonFormatValue);
        
        var propertiesValue2 = {};
        virtualNetworkGatewayIpConfigurationJsonFormatValue['properties'] = propertiesValue2;
        
        if (ipConfigurationsItem.privateIpAddress !== null && ipConfigurationsItem.privateIpAddress !== undefined) {
          propertiesValue2['privateIPAddress'] = ipConfigurationsItem.privateIpAddress;
        }
        
        if (ipConfigurationsItem.privateIpAllocationMethod !== null && ipConfigurationsItem.privateIpAllocationMethod !== undefined) {
          propertiesValue2['privateIPAllocationMethod'] = ipConfigurationsItem.privateIpAllocationMethod;
        }
        
        if (ipConfigurationsItem.subnet !== null && ipConfigurationsItem.subnet !== undefined) {
          var subnetValue = {};
          propertiesValue2['subnet'] = subnetValue;
          
          if (ipConfigurationsItem.subnet.id !== null && ipConfigurationsItem.subnet.id !== undefined) {
            subnetValue['id'] = ipConfigurationsItem.subnet.id;
          }
        }
        
        if (ipConfigurationsItem.publicIpAddress !== null && ipConfigurationsItem.publicIpAddress !== undefined) {
          var publicIPAddressValue = {};
          propertiesValue2['publicIPAddress'] = publicIPAddressValue;
          
          if (ipConfigurationsItem.publicIpAddress.id !== null && ipConfigurationsItem.publicIpAddress.id !== undefined) {
            publicIPAddressValue['id'] = ipConfigurationsItem.publicIpAddress.id;
          }
        }
        
        if (ipConfigurationsItem.provisioningState !== null && ipConfigurationsItem.provisioningState !== undefined) {
          propertiesValue2['provisioningState'] = ipConfigurationsItem.provisioningState;
        }
        
        if (ipConfigurationsItem.name !== null && ipConfigurationsItem.name !== undefined) {
          virtualNetworkGatewayIpConfigurationJsonFormatValue['name'] = ipConfigurationsItem.name;
        }
        
        if (ipConfigurationsItem.etag !== null && ipConfigurationsItem.etag !== undefined) {
          virtualNetworkGatewayIpConfigurationJsonFormatValue['etag'] = ipConfigurationsItem.etag;
        }
        
        if (ipConfigurationsItem.id !== null && ipConfigurationsItem.id !== undefined) {
          virtualNetworkGatewayIpConfigurationJsonFormatValue['id'] = ipConfigurationsItem.id;
        }
      }
      propertiesValue['ipConfigurations'] = ipConfigurationsArray;
    }
    
    if (parameters.gatewayType !== null && parameters.gatewayType !== undefined) {
      propertiesValue['gatewayType'] = parameters.gatewayType;
    }
    
    if (parameters.vpnType !== null && parameters.vpnType !== undefined) {
      propertiesValue['vpnType'] = parameters.vpnType;
    }
    
    if (parameters.enableBgp !== null && parameters.enableBgp !== undefined) {
      propertiesValue['enableBgp'] = parameters.enableBgp;
    }
    
    if (parameters.gatewayDefaultSite !== null && parameters.gatewayDefaultSite !== undefined) {
      var gatewayDefaultSiteValue = {};
      propertiesValue['gatewayDefaultSite'] = gatewayDefaultSiteValue;
      
      if (parameters.gatewayDefaultSite.id !== null && parameters.gatewayDefaultSite.id !== undefined) {
        gatewayDefaultSiteValue['id'] = parameters.gatewayDefaultSite.id;
      }
    }
    
    if (parameters.resourceGuid !== null && parameters.resourceGuid !== undefined) {
      propertiesValue['resourceGuid'] = parameters.resourceGuid;
    }
    
    if (parameters.provisioningState !== null && parameters.provisioningState !== undefined) {
      propertiesValue['provisioningState'] = parameters.provisioningState;
    }
    
    if (parameters.etag !== null && parameters.etag !== undefined) {
      virtualNetworkGatewayJsonFormatValue['etag'] = parameters.etag;
    }
    
    if (parameters.id !== null && parameters.id !== undefined) {
      virtualNetworkGatewayJsonFormatValue['id'] = parameters.id;
    }
    
    if (parameters.name !== null && parameters.name !== undefined) {
      virtualNetworkGatewayJsonFormatValue['name'] = parameters.name;
    }
    
    if (parameters.type !== null && parameters.type !== undefined) {
      virtualNetworkGatewayJsonFormatValue['type'] = parameters.type;
    }
    
    if (parameters.location !== null && parameters.location !== undefined) {
      virtualNetworkGatewayJsonFormatValue['location'] = parameters.location;
    }
    
    if (parameters.tags !== null && parameters.tags !== undefined) {
      var tagsDictionary = {};
      for (var tagsKey in parameters.tags) {
        var tagsValue = parameters.tags[tagsKey];
        tagsDictionary[tagsKey] = tagsValue;
      }
      virtualNetworkGatewayJsonFormatValue['tags'] = tagsDictionary;
    }
    
    requestContent = JSON.stringify(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200 && statusCode !== 202) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200 || statusCode === 202) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var virtualNetworkGatewayInstance = { ipConfigurations: [], tags: {} };
          result.virtualNetworkGateway = virtualNetworkGatewayInstance;
          
          var propertiesValue3 = responseDoc['properties'];
          if (propertiesValue3 !== null && propertiesValue3 !== undefined) {
            var ipConfigurationsArray2 = propertiesValue3['ipConfigurations'];
            if (ipConfigurationsArray2 !== null && ipConfigurationsArray2 !== undefined) {
              for (var loweredIndex2 = 0; loweredIndex2 < ipConfigurationsArray2.length; loweredIndex2 = loweredIndex2 + 1) {
                var ipConfigurationsValue = ipConfigurationsArray2[loweredIndex2];
                var virtualNetworkGatewayIpConfigurationJsonFormatInstance = {};
                virtualNetworkGatewayInstance.ipConfigurations.push(virtualNetworkGatewayIpConfigurationJsonFormatInstance);
                
                var propertiesValue4 = ipConfigurationsValue['properties'];
                if (propertiesValue4 !== null && propertiesValue4 !== undefined) {
                  var privateIPAddressValue = propertiesValue4['privateIPAddress'];
                  if (privateIPAddressValue !== null && privateIPAddressValue !== undefined) {
                    var privateIPAddressInstance = privateIPAddressValue;
                    virtualNetworkGatewayIpConfigurationJsonFormatInstance.privateIpAddress = privateIPAddressInstance;
                  }
                  
                  var privateIPAllocationMethodValue = propertiesValue4['privateIPAllocationMethod'];
                  if (privateIPAllocationMethodValue !== null && privateIPAllocationMethodValue !== undefined) {
                    var privateIPAllocationMethodInstance = privateIPAllocationMethodValue;
                    virtualNetworkGatewayIpConfigurationJsonFormatInstance.privateIpAllocationMethod = privateIPAllocationMethodInstance;
                  }
                  
                  var subnetValue2 = propertiesValue4['subnet'];
                  if (subnetValue2 !== null && subnetValue2 !== undefined) {
                    var subnetInstance = {};
                    virtualNetworkGatewayIpConfigurationJsonFormatInstance.subnet = subnetInstance;
                    
                    var idValue = subnetValue2['id'];
                    if (idValue !== null && idValue !== undefined) {
                      var idInstance = idValue;
                      subnetInstance.id = idInstance;
                    }
                  }
                  
                  var publicIPAddressValue2 = propertiesValue4['publicIPAddress'];
                  if (publicIPAddressValue2 !== null && publicIPAddressValue2 !== undefined) {
                    var publicIPAddressInstance = {};
                    virtualNetworkGatewayIpConfigurationJsonFormatInstance.publicIpAddress = publicIPAddressInstance;
                    
                    var idValue2 = publicIPAddressValue2['id'];
                    if (idValue2 !== null && idValue2 !== undefined) {
                      var idInstance2 = idValue2;
                      publicIPAddressInstance.id = idInstance2;
                    }
                  }
                  
                  var provisioningStateValue = propertiesValue4['provisioningState'];
                  if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
                    var provisioningStateInstance = provisioningStateValue;
                    virtualNetworkGatewayIpConfigurationJsonFormatInstance.provisioningState = provisioningStateInstance;
                  }
                }
                
                var nameValue = ipConfigurationsValue['name'];
                if (nameValue !== null && nameValue !== undefined) {
                  var nameInstance = nameValue;
                  virtualNetworkGatewayIpConfigurationJsonFormatInstance.name = nameInstance;
                }
                
                var etagValue = ipConfigurationsValue['etag'];
                if (etagValue !== null && etagValue !== undefined) {
                  var etagInstance = etagValue;
                  virtualNetworkGatewayIpConfigurationJsonFormatInstance.etag = etagInstance;
                }
                
                var idValue3 = ipConfigurationsValue['id'];
                if (idValue3 !== null && idValue3 !== undefined) {
                  var idInstance3 = idValue3;
                  virtualNetworkGatewayIpConfigurationJsonFormatInstance.id = idInstance3;
                }
              }
            }
            
            var gatewayTypeValue = propertiesValue3['gatewayType'];
            if (gatewayTypeValue !== null && gatewayTypeValue !== undefined) {
              var gatewayTypeInstance = gatewayTypeValue;
              virtualNetworkGatewayInstance.gatewayType = gatewayTypeInstance;
            }
            
            var vpnTypeValue = propertiesValue3['vpnType'];
            if (vpnTypeValue !== null && vpnTypeValue !== undefined) {
              var vpnTypeInstance = vpnTypeValue;
              virtualNetworkGatewayInstance.vpnType = vpnTypeInstance;
            }
            
            var enableBgpValue = propertiesValue3['enableBgp'];
            if (enableBgpValue !== null && enableBgpValue !== undefined) {
              var enableBgpInstance = enableBgpValue;
              virtualNetworkGatewayInstance.enableBgp = enableBgpInstance;
            }
            
            var gatewayDefaultSiteValue2 = propertiesValue3['gatewayDefaultSite'];
            if (gatewayDefaultSiteValue2 !== null && gatewayDefaultSiteValue2 !== undefined) {
              var gatewayDefaultSiteInstance = {};
              virtualNetworkGatewayInstance.gatewayDefaultSite = gatewayDefaultSiteInstance;
              
              var idValue4 = gatewayDefaultSiteValue2['id'];
              if (idValue4 !== null && idValue4 !== undefined) {
                var idInstance4 = idValue4;
                gatewayDefaultSiteInstance.id = idInstance4;
              }
            }
            
            var resourceGuidValue = propertiesValue3['resourceGuid'];
            if (resourceGuidValue !== null && resourceGuidValue !== undefined) {
              var resourceGuidInstance = resourceGuidValue;
              virtualNetworkGatewayInstance.resourceGuid = resourceGuidInstance;
            }
            
            var provisioningStateValue2 = propertiesValue3['provisioningState'];
            if (provisioningStateValue2 !== null && provisioningStateValue2 !== undefined) {
              var provisioningStateInstance2 = provisioningStateValue2;
              virtualNetworkGatewayInstance.provisioningState = provisioningStateInstance2;
            }
          }
          
          var etagValue2 = responseDoc['etag'];
          if (etagValue2 !== null && etagValue2 !== undefined) {
            var etagInstance2 = etagValue2;
            virtualNetworkGatewayInstance.etag = etagInstance2;
          }
          
          var idValue5 = responseDoc['id'];
          if (idValue5 !== null && idValue5 !== undefined) {
            var idInstance5 = idValue5;
            virtualNetworkGatewayInstance.id = idInstance5;
          }
          
          var nameValue2 = responseDoc['name'];
          if (nameValue2 !== null && nameValue2 !== undefined) {
            var nameInstance2 = nameValue2;
            virtualNetworkGatewayInstance.name = nameInstance2;
          }
          
          var typeValue = responseDoc['type'];
          if (typeValue !== null && typeValue !== undefined) {
            var typeInstance = typeValue;
            virtualNetworkGatewayInstance.type = typeInstance;
          }
          
          var locationValue = responseDoc['location'];
          if (locationValue !== null && locationValue !== undefined) {
            var locationInstance = locationValue;
            virtualNetworkGatewayInstance.location = locationInstance;
          }
          
          var tagsSequenceElement = responseDoc['tags'];
          if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
            for (var property in tagsSequenceElement) {
              var tagsKey2 = property;
              var tagsValue2 = tagsSequenceElement[property];
              virtualNetworkGatewayInstance.tags[tagsKey2] = tagsValue2;
            }
          }
          
          var errorValue = responseDoc['error'];
          if (errorValue !== null && errorValue !== undefined) {
            var errorInstance = { details: [] };
            result.error = errorInstance;
            
            var codeValue = errorValue['code'];
            if (codeValue !== null && codeValue !== undefined) {
              var codeInstance = codeValue;
              errorInstance.code = codeInstance;
            }
            
            var messageValue = errorValue['message'];
            if (messageValue !== null && messageValue !== undefined) {
              var messageInstance = messageValue;
              errorInstance.message = messageInstance;
            }
            
            var targetValue = errorValue['target'];
            if (targetValue !== null && targetValue !== undefined) {
              var targetInstance = targetValue;
              errorInstance.target = targetInstance;
            }
            
            var detailsArray = errorValue['details'];
            if (detailsArray !== null && detailsArray !== undefined) {
              for (var loweredIndex3 = 0; loweredIndex3 < detailsArray.length; loweredIndex3 = loweredIndex3 + 1) {
                var detailsValue = detailsArray[loweredIndex3];
                var errorDetailsInstance = {};
                errorInstance.details.push(errorDetailsInstance);
                
                var codeValue2 = detailsValue['code'];
                if (codeValue2 !== null && codeValue2 !== undefined) {
                  var codeInstance2 = codeValue2;
                  errorDetailsInstance.code = codeInstance2;
                }
                
                var targetValue2 = detailsValue['target'];
                if (targetValue2 !== null && targetValue2 !== undefined) {
                  var targetInstance2 = targetValue2;
                  errorDetailsInstance.target = targetInstance2;
                }
                
                var messageValue2 = detailsValue['message'];
                if (messageValue2 !== null && messageValue2 !== undefined) {
                  var messageInstance2 = messageValue2;
                  errorDetailsInstance.message = messageInstance2;
                }
              }
            }
            
            var innerErrorValue = errorValue['innerError'];
            if (innerErrorValue !== null && innerErrorValue !== undefined) {
              var innerErrorInstance = innerErrorValue;
              errorInstance.innerError = innerErrorInstance;
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      result.azureAsyncOperation = response.headers['azure-asyncoperation'];
      result.retryAfter = parseInt(response.headers['retry-after'], 10);
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The Put VirtualNetworkGateway operation creates/updates a virtual network
   * gateway in the specified resource group through Network resource provider.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} virtualNetworkGatewayName The name of the virtual network
   * gateway.
   * 
   * @param {VirtualNetworkGateway} parameters Parameters supplied to the Begin
   * Create or update Virtual Network Gateway operation through Network
   * resource provider.
   * 
   * @param {IEnumerable} [parameters.ipConfigurations] IpConfigurations for
   * Virtual network gateway.
   * 
   * @param {string} [parameters.gatewayType] The type of this virtual network
   * gateway.
   * 
   * @param {string} [parameters.vpnType] The type of this virtual network
   * gateway.
   * 
   * @param {boolean} [parameters.enableBgp] EnableBgp Flag
   * 
   * @param {BgpSettings} [parameters.bgpSettings] Settings for this virtual
   * network gateway's BGP speaker
   * 
   * @param {number} [parameters.bgpSettings.asn] Autonomous System Number
   * 
   * @param {string} [parameters.bgpSettings.bgpPeeringAddress] BGP speaker's
   * IP/BGP identifier
   * 
   * @param {number} [parameters.bgpSettings.peerWeight] Weight given to routes
   * learned from this BGP speaker
   * 
   * @param {ResourceId} [parameters.gatewayDefaultSite] Gets or sets the
   * reference of the LocalNetworkGateway resource which represents Local
   * network site having default routes. Assign Null value in case of removing
   * existing default site setting.
   * 
   * @param {string} [parameters.gatewayDefaultSite.id] Id of the resource
   * 
   * @param {string} [parameters.provisioningState] Gets or sets Provisioning
   * state of the VirtualNetworkGateway resource Updating/Deleting/Failed
   * 
   * @param {string} [parameters.resourceGuid] Gets or sets resource guid
   * property of the VirtualNetworkGateway resource
   * 
   * @param {string} [parameters.etag] Gets a unique read-only string that
   * changes whenever the resource is updated
   * 
   * @param {string} [parameters.id] Gets or sets the ID of the resource.
   * 
   * @param {string} [parameters.name] Gets or sets the name of the resource.
   * 
   * @param {string} [parameters.type] Gets or sets the type of the resource.
   * 
   * @param {string} [parameters.location] Gets or sets the location of the
   * resource.
   * 
   * @param {object} [parameters.tags] Gets or sets the tags attached to the
   * resource.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  VirtualNetworkGatewayOperations.prototype.createOrUpdate = function(resourceGroupName, virtualNetworkGatewayName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.virtualNetworkGateways.beginCreateOrUpdating(resourceGroupName, virtualNetworkGatewayName, parameters, function (err, result) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var delayInSeconds = result.retryAfter;
      if (delayInSeconds === 0) {
        delayInSeconds = 30;
      }
      if (client2.longRunningOperationInitialTimeout >= 0) {
        delayInSeconds = client2.longRunningOperationInitialTimeout;
      }
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.getLongRunningOperationStatus(result.azureAsyncOperation, function (err2, result2) {
            if (err2 !== null && err2 !== undefined) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                return callback(null, result2);
              } else {
                delayInSeconds = result2.retryAfter;
                if (delayInSeconds === 0) {
                  delayInSeconds = 30;
                }
                if (client2.longRunningOperationRetryTimeout >= 0) {
                  delayInSeconds = client2.longRunningOperationRetryTimeout;
                }
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  /**
   * The Delete VirtualNetworkGateway operation deletes the specifed virtual
   * network Gateway through Network resource provider.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} virtualNetworkGatewayName The name of the virtual network
   * gateway.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  VirtualNetworkGatewayOperations.prototype.deleteMethod = function(resourceGroupName, virtualNetworkGatewayName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.virtualNetworkGateways.beginDeleting(resourceGroupName, virtualNetworkGatewayName, function (err, result) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var delayInSeconds = result.retryAfter;
      if (delayInSeconds === 0) {
        delayInSeconds = 30;
      }
      if (client2.longRunningOperationInitialTimeout >= 0) {
        delayInSeconds = client2.longRunningOperationInitialTimeout;
      }
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.getLongRunningOperationStatus(result.azureAsyncOperation, function (err2, result2) {
            if (err2 !== null && err2 !== undefined) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                return callback(null, result2);
              } else {
                delayInSeconds = result2.retryAfter;
                if (delayInSeconds === 0) {
                  delayInSeconds = 30;
                }
                if (client2.longRunningOperationRetryTimeout >= 0) {
                  delayInSeconds = client2.longRunningOperationRetryTimeout;
                }
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  /**
   * The Get VirtualNetworkGateway operation retrieves information about the
   * specified virtual network gateway through Network resource provider.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} virtualNetworkGatewayName The name of the virtual network
   * gateway.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  VirtualNetworkGatewayOperations.prototype.get = function(resourceGroupName, virtualNetworkGatewayName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (virtualNetworkGatewayName === null || virtualNetworkGatewayName === undefined) {
      return callback(new Error('virtualNetworkGatewayName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Network';
    url2 = url2 + '/virtualNetworkGateways/';
    url2 = url2 + encodeURIComponent(virtualNetworkGatewayName);
    var queryParameters = [];
    queryParameters.push('api-version=2015-05-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var virtualNetworkGatewayInstance = { ipConfigurations: [], tags: {} };
          result.virtualNetworkGateway = virtualNetworkGatewayInstance;
          
          var propertiesValue = responseDoc['properties'];
          if (propertiesValue !== null && propertiesValue !== undefined) {
            var ipConfigurationsArray = propertiesValue['ipConfigurations'];
            if (ipConfigurationsArray !== null && ipConfigurationsArray !== undefined) {
              for (var loweredIndex1 = 0; loweredIndex1 < ipConfigurationsArray.length; loweredIndex1 = loweredIndex1 + 1) {
                var ipConfigurationsValue = ipConfigurationsArray[loweredIndex1];
                var virtualNetworkGatewayIpConfigurationJsonFormatInstance = {};
                virtualNetworkGatewayInstance.ipConfigurations.push(virtualNetworkGatewayIpConfigurationJsonFormatInstance);
                
                var propertiesValue2 = ipConfigurationsValue['properties'];
                if (propertiesValue2 !== null && propertiesValue2 !== undefined) {
                  var privateIPAddressValue = propertiesValue2['privateIPAddress'];
                  if (privateIPAddressValue !== null && privateIPAddressValue !== undefined) {
                    var privateIPAddressInstance = privateIPAddressValue;
                    virtualNetworkGatewayIpConfigurationJsonFormatInstance.privateIpAddress = privateIPAddressInstance;
                  }
                  
                  var privateIPAllocationMethodValue = propertiesValue2['privateIPAllocationMethod'];
                  if (privateIPAllocationMethodValue !== null && privateIPAllocationMethodValue !== undefined) {
                    var privateIPAllocationMethodInstance = privateIPAllocationMethodValue;
                    virtualNetworkGatewayIpConfigurationJsonFormatInstance.privateIpAllocationMethod = privateIPAllocationMethodInstance;
                  }
                  
                  var subnetValue = propertiesValue2['subnet'];
                  if (subnetValue !== null && subnetValue !== undefined) {
                    var subnetInstance = {};
                    virtualNetworkGatewayIpConfigurationJsonFormatInstance.subnet = subnetInstance;
                    
                    var idValue = subnetValue['id'];
                    if (idValue !== null && idValue !== undefined) {
                      var idInstance = idValue;
                      subnetInstance.id = idInstance;
                    }
                  }
                  
                  var publicIPAddressValue = propertiesValue2['publicIPAddress'];
                  if (publicIPAddressValue !== null && publicIPAddressValue !== undefined) {
                    var publicIPAddressInstance = {};
                    virtualNetworkGatewayIpConfigurationJsonFormatInstance.publicIpAddress = publicIPAddressInstance;
                    
                    var idValue2 = publicIPAddressValue['id'];
                    if (idValue2 !== null && idValue2 !== undefined) {
                      var idInstance2 = idValue2;
                      publicIPAddressInstance.id = idInstance2;
                    }
                  }
                  
                  var provisioningStateValue = propertiesValue2['provisioningState'];
                  if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
                    var provisioningStateInstance = provisioningStateValue;
                    virtualNetworkGatewayIpConfigurationJsonFormatInstance.provisioningState = provisioningStateInstance;
                  }
                }
                
                var nameValue = ipConfigurationsValue['name'];
                if (nameValue !== null && nameValue !== undefined) {
                  var nameInstance = nameValue;
                  virtualNetworkGatewayIpConfigurationJsonFormatInstance.name = nameInstance;
                }
                
                var etagValue = ipConfigurationsValue['etag'];
                if (etagValue !== null && etagValue !== undefined) {
                  var etagInstance = etagValue;
                  virtualNetworkGatewayIpConfigurationJsonFormatInstance.etag = etagInstance;
                }
                
                var idValue3 = ipConfigurationsValue['id'];
                if (idValue3 !== null && idValue3 !== undefined) {
                  var idInstance3 = idValue3;
                  virtualNetworkGatewayIpConfigurationJsonFormatInstance.id = idInstance3;
                }
              }
            }
            
            var gatewayTypeValue = propertiesValue['gatewayType'];
            if (gatewayTypeValue !== null && gatewayTypeValue !== undefined) {
              var gatewayTypeInstance = gatewayTypeValue;
              virtualNetworkGatewayInstance.gatewayType = gatewayTypeInstance;
            }
            
            var vpnTypeValue = propertiesValue['vpnType'];
            if (vpnTypeValue !== null && vpnTypeValue !== undefined) {
              var vpnTypeInstance = vpnTypeValue;
              virtualNetworkGatewayInstance.vpnType = vpnTypeInstance;
            }
            
            var enableBgpValue = propertiesValue['enableBgp'];
            if (enableBgpValue !== null && enableBgpValue !== undefined) {
              var enableBgpInstance = enableBgpValue;
              virtualNetworkGatewayInstance.enableBgp = enableBgpInstance;
            }
            
            var gatewayDefaultSiteValue = propertiesValue['gatewayDefaultSite'];
            if (gatewayDefaultSiteValue !== null && gatewayDefaultSiteValue !== undefined) {
              var gatewayDefaultSiteInstance = {};
              virtualNetworkGatewayInstance.gatewayDefaultSite = gatewayDefaultSiteInstance;
              
              var idValue4 = gatewayDefaultSiteValue['id'];
              if (idValue4 !== null && idValue4 !== undefined) {
                var idInstance4 = idValue4;
                gatewayDefaultSiteInstance.id = idInstance4;
              }
            }
            
            var resourceGuidValue = propertiesValue['resourceGuid'];
            if (resourceGuidValue !== null && resourceGuidValue !== undefined) {
              var resourceGuidInstance = resourceGuidValue;
              virtualNetworkGatewayInstance.resourceGuid = resourceGuidInstance;
            }
            
            var provisioningStateValue2 = propertiesValue['provisioningState'];
            if (provisioningStateValue2 !== null && provisioningStateValue2 !== undefined) {
              var provisioningStateInstance2 = provisioningStateValue2;
              virtualNetworkGatewayInstance.provisioningState = provisioningStateInstance2;
            }
          }
          
          var etagValue2 = responseDoc['etag'];
          if (etagValue2 !== null && etagValue2 !== undefined) {
            var etagInstance2 = etagValue2;
            virtualNetworkGatewayInstance.etag = etagInstance2;
          }
          
          var idValue5 = responseDoc['id'];
          if (idValue5 !== null && idValue5 !== undefined) {
            var idInstance5 = idValue5;
            virtualNetworkGatewayInstance.id = idInstance5;
          }
          
          var nameValue2 = responseDoc['name'];
          if (nameValue2 !== null && nameValue2 !== undefined) {
            var nameInstance2 = nameValue2;
            virtualNetworkGatewayInstance.name = nameInstance2;
          }
          
          var typeValue = responseDoc['type'];
          if (typeValue !== null && typeValue !== undefined) {
            var typeInstance = typeValue;
            virtualNetworkGatewayInstance.type = typeInstance;
          }
          
          var locationValue = responseDoc['location'];
          if (locationValue !== null && locationValue !== undefined) {
            var locationInstance = locationValue;
            virtualNetworkGatewayInstance.location = locationInstance;
          }
          
          var tagsSequenceElement = responseDoc['tags'];
          if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
            for (var property in tagsSequenceElement) {
              var tagsKey = property;
              var tagsValue = tagsSequenceElement[property];
              virtualNetworkGatewayInstance.tags[tagsKey] = tagsValue;
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The List VirtualNetworkGateways opertion retrieves all the virtual network
   * gateways stored.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  VirtualNetworkGatewayOperations.prototype.list = function(resourceGroupName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Network';
    url2 = url2 + '/virtualNetworkGateways';
    var queryParameters = [];
    queryParameters.push('api-version=2015-05-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = { virtualNetworkGateways: [] };
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var valueArray = responseDoc['value'];
          if (valueArray !== null && valueArray !== undefined) {
            for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var valueValue = valueArray[loweredIndex1];
              var virtualNetworkGatewayJsonFormatInstance = { ipConfigurations: [], tags: {} };
              result.virtualNetworkGateways.push(virtualNetworkGatewayJsonFormatInstance);
              
              var propertiesValue = valueValue['properties'];
              if (propertiesValue !== null && propertiesValue !== undefined) {
                var ipConfigurationsArray = propertiesValue['ipConfigurations'];
                if (ipConfigurationsArray !== null && ipConfigurationsArray !== undefined) {
                  for (var loweredIndex2 = 0; loweredIndex2 < ipConfigurationsArray.length; loweredIndex2 = loweredIndex2 + 1) {
                    var ipConfigurationsValue = ipConfigurationsArray[loweredIndex2];
                    var virtualNetworkGatewayIpConfigurationJsonFormatInstance = {};
                    virtualNetworkGatewayJsonFormatInstance.ipConfigurations.push(virtualNetworkGatewayIpConfigurationJsonFormatInstance);
                    
                    var propertiesValue2 = ipConfigurationsValue['properties'];
                    if (propertiesValue2 !== null && propertiesValue2 !== undefined) {
                      var privateIPAddressValue = propertiesValue2['privateIPAddress'];
                      if (privateIPAddressValue !== null && privateIPAddressValue !== undefined) {
                        var privateIPAddressInstance = privateIPAddressValue;
                        virtualNetworkGatewayIpConfigurationJsonFormatInstance.privateIpAddress = privateIPAddressInstance;
                      }
                      
                      var privateIPAllocationMethodValue = propertiesValue2['privateIPAllocationMethod'];
                      if (privateIPAllocationMethodValue !== null && privateIPAllocationMethodValue !== undefined) {
                        var privateIPAllocationMethodInstance = privateIPAllocationMethodValue;
                        virtualNetworkGatewayIpConfigurationJsonFormatInstance.privateIpAllocationMethod = privateIPAllocationMethodInstance;
                      }
                      
                      var subnetValue = propertiesValue2['subnet'];
                      if (subnetValue !== null && subnetValue !== undefined) {
                        var subnetInstance = {};
                        virtualNetworkGatewayIpConfigurationJsonFormatInstance.subnet = subnetInstance;
                        
                        var idValue = subnetValue['id'];
                        if (idValue !== null && idValue !== undefined) {
                          var idInstance = idValue;
                          subnetInstance.id = idInstance;
                        }
                      }
                      
                      var publicIPAddressValue = propertiesValue2['publicIPAddress'];
                      if (publicIPAddressValue !== null && publicIPAddressValue !== undefined) {
                        var publicIPAddressInstance = {};
                        virtualNetworkGatewayIpConfigurationJsonFormatInstance.publicIpAddress = publicIPAddressInstance;
                        
                        var idValue2 = publicIPAddressValue['id'];
                        if (idValue2 !== null && idValue2 !== undefined) {
                          var idInstance2 = idValue2;
                          publicIPAddressInstance.id = idInstance2;
                        }
                      }
                      
                      var provisioningStateValue = propertiesValue2['provisioningState'];
                      if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
                        var provisioningStateInstance = provisioningStateValue;
                        virtualNetworkGatewayIpConfigurationJsonFormatInstance.provisioningState = provisioningStateInstance;
                      }
                    }
                    
                    var nameValue = ipConfigurationsValue['name'];
                    if (nameValue !== null && nameValue !== undefined) {
                      var nameInstance = nameValue;
                      virtualNetworkGatewayIpConfigurationJsonFormatInstance.name = nameInstance;
                    }
                    
                    var etagValue = ipConfigurationsValue['etag'];
                    if (etagValue !== null && etagValue !== undefined) {
                      var etagInstance = etagValue;
                      virtualNetworkGatewayIpConfigurationJsonFormatInstance.etag = etagInstance;
                    }
                    
                    var idValue3 = ipConfigurationsValue['id'];
                    if (idValue3 !== null && idValue3 !== undefined) {
                      var idInstance3 = idValue3;
                      virtualNetworkGatewayIpConfigurationJsonFormatInstance.id = idInstance3;
                    }
                  }
                }
                
                var gatewayTypeValue = propertiesValue['gatewayType'];
                if (gatewayTypeValue !== null && gatewayTypeValue !== undefined) {
                  var gatewayTypeInstance = gatewayTypeValue;
                  virtualNetworkGatewayJsonFormatInstance.gatewayType = gatewayTypeInstance;
                }
                
                var vpnTypeValue = propertiesValue['vpnType'];
                if (vpnTypeValue !== null && vpnTypeValue !== undefined) {
                  var vpnTypeInstance = vpnTypeValue;
                  virtualNetworkGatewayJsonFormatInstance.vpnType = vpnTypeInstance;
                }
                
                var enableBgpValue = propertiesValue['enableBgp'];
                if (enableBgpValue !== null && enableBgpValue !== undefined) {
                  var enableBgpInstance = enableBgpValue;
                  virtualNetworkGatewayJsonFormatInstance.enableBgp = enableBgpInstance;
                }
                
                var gatewayDefaultSiteValue = propertiesValue['gatewayDefaultSite'];
                if (gatewayDefaultSiteValue !== null && gatewayDefaultSiteValue !== undefined) {
                  var gatewayDefaultSiteInstance = {};
                  virtualNetworkGatewayJsonFormatInstance.gatewayDefaultSite = gatewayDefaultSiteInstance;
                  
                  var idValue4 = gatewayDefaultSiteValue['id'];
                  if (idValue4 !== null && idValue4 !== undefined) {
                    var idInstance4 = idValue4;
                    gatewayDefaultSiteInstance.id = idInstance4;
                  }
                }
                
                var resourceGuidValue = propertiesValue['resourceGuid'];
                if (resourceGuidValue !== null && resourceGuidValue !== undefined) {
                  var resourceGuidInstance = resourceGuidValue;
                  virtualNetworkGatewayJsonFormatInstance.resourceGuid = resourceGuidInstance;
                }
                
                var provisioningStateValue2 = propertiesValue['provisioningState'];
                if (provisioningStateValue2 !== null && provisioningStateValue2 !== undefined) {
                  var provisioningStateInstance2 = provisioningStateValue2;
                  virtualNetworkGatewayJsonFormatInstance.provisioningState = provisioningStateInstance2;
                }
              }
              
              var etagValue2 = valueValue['etag'];
              if (etagValue2 !== null && etagValue2 !== undefined) {
                var etagInstance2 = etagValue2;
                virtualNetworkGatewayJsonFormatInstance.etag = etagInstance2;
              }
              
              var idValue5 = valueValue['id'];
              if (idValue5 !== null && idValue5 !== undefined) {
                var idInstance5 = idValue5;
                virtualNetworkGatewayJsonFormatInstance.id = idInstance5;
              }
              
              var nameValue2 = valueValue['name'];
              if (nameValue2 !== null && nameValue2 !== undefined) {
                var nameInstance2 = nameValue2;
                virtualNetworkGatewayJsonFormatInstance.name = nameInstance2;
              }
              
              var typeValue = valueValue['type'];
              if (typeValue !== null && typeValue !== undefined) {
                var typeInstance = typeValue;
                virtualNetworkGatewayJsonFormatInstance.type = typeInstance;
              }
              
              var locationValue = valueValue['location'];
              if (locationValue !== null && locationValue !== undefined) {
                var locationInstance = locationValue;
                virtualNetworkGatewayJsonFormatInstance.location = locationInstance;
              }
              
              var tagsSequenceElement = valueValue['tags'];
              if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
                for (var property in tagsSequenceElement) {
                  var tagsKey = property;
                  var tagsValue = tagsSequenceElement[property];
                  virtualNetworkGatewayJsonFormatInstance.tags[tagsKey] = tagsValue;
                }
              }
            }
          }
          
          var nextLinkValue = responseDoc['nextLink'];
          if (nextLinkValue !== null && nextLinkValue !== undefined) {
            var nextLinkInstance = nextLinkValue;
            result.nextLink = nextLinkInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The Reset VirtualNetworkGateway operation resets the primary of the
   * virtual network gateway in the specified resource group through Network
   * resource provider.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} virtualNetworkGatewayName The name of the virtual network
   * gateway.
   * 
   * @param {VirtualNetworkGateway} parameters Parameters supplied to the Begin
   * Reset Virtual Network Gateway operation through Network resource provider.
   * 
   * @param {IEnumerable} [parameters.ipConfigurations] IpConfigurations for
   * Virtual network gateway.
   * 
   * @param {string} [parameters.gatewayType] The type of this virtual network
   * gateway.
   * 
   * @param {string} [parameters.vpnType] The type of this virtual network
   * gateway.
   * 
   * @param {boolean} [parameters.enableBgp] EnableBgp Flag
   * 
   * @param {BgpSettings} [parameters.bgpSettings] Settings for this virtual
   * network gateway's BGP speaker
   * 
   * @param {number} [parameters.bgpSettings.asn] Autonomous System Number
   * 
   * @param {string} [parameters.bgpSettings.bgpPeeringAddress] BGP speaker's
   * IP/BGP identifier
   * 
   * @param {number} [parameters.bgpSettings.peerWeight] Weight given to routes
   * learned from this BGP speaker
   * 
   * @param {ResourceId} [parameters.gatewayDefaultSite] Gets or sets the
   * reference of the LocalNetworkGateway resource which represents Local
   * network site having default routes. Assign Null value in case of removing
   * existing default site setting.
   * 
   * @param {string} [parameters.gatewayDefaultSite.id] Id of the resource
   * 
   * @param {string} [parameters.provisioningState] Gets or sets Provisioning
   * state of the VirtualNetworkGateway resource Updating/Deleting/Failed
   * 
   * @param {string} [parameters.resourceGuid] Gets or sets resource guid
   * property of the VirtualNetworkGateway resource
   * 
   * @param {string} [parameters.etag] Gets a unique read-only string that
   * changes whenever the resource is updated
   * 
   * @param {string} [parameters.id] Gets or sets the ID of the resource.
   * 
   * @param {string} [parameters.name] Gets or sets the name of the resource.
   * 
   * @param {string} [parameters.type] Gets or sets the type of the resource.
   * 
   * @param {string} [parameters.location] Gets or sets the location of the
   * resource.
   * 
   * @param {object} [parameters.tags] Gets or sets the tags attached to the
   * resource.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  VirtualNetworkGatewayOperations.prototype.reset = function(resourceGroupName, virtualNetworkGatewayName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.virtualNetworkGateways.beginReset(resourceGroupName, virtualNetworkGatewayName, parameters, function (err, result) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var delayInSeconds = result.retryAfter;
      if (delayInSeconds === 0) {
        delayInSeconds = 30;
      }
      if (client2.longRunningOperationInitialTimeout >= 0) {
        delayInSeconds = client2.longRunningOperationInitialTimeout;
      }
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.getLongRunningOperationStatus(result.azureAsyncOperation, function (err2, result2) {
            if (err2 !== null && err2 !== undefined) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                return callback(null, result2);
              } else {
                delayInSeconds = result2.retryAfter;
                if (delayInSeconds === 0) {
                  delayInSeconds = 30;
                }
                if (client2.longRunningOperationRetryTimeout >= 0) {
                  delayInSeconds = client2.longRunningOperationRetryTimeout;
                }
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  return VirtualNetworkGatewayOperations;
})();

var VirtualNetworkOperations = ( /** @lends VirtualNetworkOperations */ function() {
  /**
   * @class
   * The Network Resource Provider API includes operations for managing the
   * Virtual Networks for your subscription.
   * __NOTE__: An instance of this class is automatically created for an
   * instance of the [NetworkResourceProviderClient] {@link
   * NetworkResourceProviderClient~NetworkResourceProviderClient}.
   * See [virtualNetworks] {@link
   * NetworkResourceProviderClient~NetworkResourceProviderClient#virtualNetworks}.
   * Initializes a new instance of the VirtualNetworkOperations class.
   * @constructor
   * 
   * @param {NetworkResourceProviderClient} client Reference to the service
   * client.
   */
  function VirtualNetworkOperations(client) {
    this.client = client;
  }
  
  /**
   * The Put VirtualNetwork operation creates/updates a virtual network in the
   * specified resource group.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} virtualNetworkName The name of the virtual network.
   * 
   * @param {VirtualNetwork} parameters Parameters supplied to the
   * create/update Virtual Network operation
   * 
   * @param {AddressSpace} [parameters.addressSpace] Gets or sets AddressSpace
   * that contains an array of IP address ranges that can be used by subnets
   * 
   * @param {IEnumerable} [parameters.addressSpace.addressPrefixes] Gets or
   * sets List of address blocks reserved for this virtual network in CIDR
   * notation
   * 
   * @param {DhcpOptions} [parameters.dhcpOptions] Gets or sets DHCPOptions
   * that contains an array of DNS servers available to VMs deployed in the
   * virtual network
   * 
   * @param {IEnumerable} [parameters.dhcpOptions.dnsServers] Gets or sets list
   * of DNS servers IP addresses
   * 
   * @param {IEnumerable} [parameters.subnets] Gets or sets List of subnets in
   * a VirtualNetwork
   * 
   * @param {string} [parameters.provisioningState] Gets or sets Provisioning
   * state of the PublicIP resource Updating/Deleting/Failed
   * 
   * @param {string} [parameters.resourceGuid] Gets or sets resource guid
   * property of the VirtualNetwork resource
   * 
   * @param {string} [parameters.etag] Gets a unique read-only string that
   * changes whenever the resource is updated
   * 
   * @param {string} [parameters.id] Gets or sets the ID of the resource.
   * 
   * @param {string} [parameters.name] Gets or sets the name of the resource.
   * 
   * @param {string} [parameters.type] Gets or sets the type of the resource.
   * 
   * @param {string} [parameters.location] Gets or sets the location of the
   * resource.
   * 
   * @param {object} [parameters.tags] Gets or sets the tags attached to the
   * resource.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  VirtualNetworkOperations.prototype.beginCreateOrUpdating = function(resourceGroupName, virtualNetworkName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (virtualNetworkName === null || virtualNetworkName === undefined) {
      return callback(new Error('virtualNetworkName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.subnets !== null && parameters.subnets !== undefined) {
      for (var loweredIndex1 = 0; loweredIndex1 < parameters.subnets.length; loweredIndex1 = loweredIndex1 + 1) {
        var subnetsParameterItem = parameters.subnets[loweredIndex1];
        if (subnetsParameterItem.addressPrefix === null || subnetsParameterItem.addressPrefix === undefined) {
          return callback(new Error('parameters.subnets.addressPrefix cannot be null.'));
        }
      }
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Network';
    url2 = url2 + '/virtualnetworks/';
    url2 = url2 + encodeURIComponent(virtualNetworkName);
    var queryParameters = [];
    queryParameters.push('api-version=2015-05-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = null;
    
    var virtualNetworkJsonFormatValue = {};
    requestDoc = virtualNetworkJsonFormatValue;
    
    var propertiesValue = {};
    virtualNetworkJsonFormatValue['properties'] = propertiesValue;
    
    if (parameters.addressSpace !== null && parameters.addressSpace !== undefined) {
      var addressSpaceValue = {};
      propertiesValue['addressSpace'] = addressSpaceValue;
      
      if (parameters.addressSpace.addressPrefixes !== null && parameters.addressSpace.addressPrefixes !== undefined) {
        var addressPrefixesArray = [];
        for (var loweredIndex2 = 0; loweredIndex2 < parameters.addressSpace.addressPrefixes.length; loweredIndex2 = loweredIndex2 + 1) {
          var addressPrefixesItem = parameters.addressSpace.addressPrefixes[loweredIndex2];
          addressPrefixesArray.push(addressPrefixesItem);
        }
        addressSpaceValue['addressPrefixes'] = addressPrefixesArray;
      }
    }
    
    if (parameters.dhcpOptions !== null && parameters.dhcpOptions !== undefined) {
      var dhcpOptionsValue = {};
      propertiesValue['dhcpOptions'] = dhcpOptionsValue;
      
      if (parameters.dhcpOptions.dnsServers !== null && parameters.dhcpOptions.dnsServers !== undefined) {
        var dnsServersArray = [];
        for (var loweredIndex3 = 0; loweredIndex3 < parameters.dhcpOptions.dnsServers.length; loweredIndex3 = loweredIndex3 + 1) {
          var dnsServersItem = parameters.dhcpOptions.dnsServers[loweredIndex3];
          dnsServersArray.push(dnsServersItem);
        }
        dhcpOptionsValue['dnsServers'] = dnsServersArray;
      }
    }
    
    if (parameters.subnets !== null && parameters.subnets !== undefined) {
      var subnetsArray = [];
      for (var loweredIndex4 = 0; loweredIndex4 < parameters.subnets.length; loweredIndex4 = loweredIndex4 + 1) {
        var subnetsItem = parameters.subnets[loweredIndex4];
        var subnetJsonFormatValue = {};
        subnetsArray.push(subnetJsonFormatValue);
        
        var propertiesValue2 = {};
        subnetJsonFormatValue['properties'] = propertiesValue2;
        
        propertiesValue2['addressPrefix'] = subnetsItem.addressPrefix;
        
        if (subnetsItem.networkSecurityGroup !== null && subnetsItem.networkSecurityGroup !== undefined) {
          var networkSecurityGroupValue = {};
          propertiesValue2['networkSecurityGroup'] = networkSecurityGroupValue;
          
          if (subnetsItem.networkSecurityGroup.id !== null && subnetsItem.networkSecurityGroup.id !== undefined) {
            networkSecurityGroupValue['id'] = subnetsItem.networkSecurityGroup.id;
          }
        }
        
        if (subnetsItem.routeTable !== null && subnetsItem.routeTable !== undefined) {
          var routeTableValue = {};
          propertiesValue2['routeTable'] = routeTableValue;
          
          if (subnetsItem.routeTable.id !== null && subnetsItem.routeTable.id !== undefined) {
            routeTableValue['id'] = subnetsItem.routeTable.id;
          }
        }
        
        if (subnetsItem.ipConfigurations !== null && subnetsItem.ipConfigurations !== undefined) {
          var ipConfigurationsArray = [];
          for (var loweredIndex5 = 0; loweredIndex5 < subnetsItem.ipConfigurations.length; loweredIndex5 = loweredIndex5 + 1) {
            var ipConfigurationsItem = subnetsItem.ipConfigurations[loweredIndex5];
            var resourceIdValue = {};
            ipConfigurationsArray.push(resourceIdValue);
            
            if (ipConfigurationsItem.id !== null && ipConfigurationsItem.id !== undefined) {
              resourceIdValue['id'] = ipConfigurationsItem.id;
            }
          }
          propertiesValue2['ipConfigurations'] = ipConfigurationsArray;
        }
        
        if (subnetsItem.provisioningState !== null && subnetsItem.provisioningState !== undefined) {
          propertiesValue2['provisioningState'] = subnetsItem.provisioningState;
        }
        
        if (subnetsItem.name !== null && subnetsItem.name !== undefined) {
          subnetJsonFormatValue['name'] = subnetsItem.name;
        }
        
        if (subnetsItem.etag !== null && subnetsItem.etag !== undefined) {
          subnetJsonFormatValue['etag'] = subnetsItem.etag;
        }
        
        if (subnetsItem.id !== null && subnetsItem.id !== undefined) {
          subnetJsonFormatValue['id'] = subnetsItem.id;
        }
      }
      propertiesValue['subnets'] = subnetsArray;
    }
    
    if (parameters.resourceGuid !== null && parameters.resourceGuid !== undefined) {
      propertiesValue['resourceGuid'] = parameters.resourceGuid;
    }
    
    if (parameters.provisioningState !== null && parameters.provisioningState !== undefined) {
      propertiesValue['provisioningState'] = parameters.provisioningState;
    }
    
    if (parameters.etag !== null && parameters.etag !== undefined) {
      virtualNetworkJsonFormatValue['etag'] = parameters.etag;
    }
    
    if (parameters.id !== null && parameters.id !== undefined) {
      virtualNetworkJsonFormatValue['id'] = parameters.id;
    }
    
    if (parameters.name !== null && parameters.name !== undefined) {
      virtualNetworkJsonFormatValue['name'] = parameters.name;
    }
    
    if (parameters.type !== null && parameters.type !== undefined) {
      virtualNetworkJsonFormatValue['type'] = parameters.type;
    }
    
    if (parameters.location !== null && parameters.location !== undefined) {
      virtualNetworkJsonFormatValue['location'] = parameters.location;
    }
    
    if (parameters.tags !== null && parameters.tags !== undefined) {
      var tagsDictionary = {};
      for (var tagsKey in parameters.tags) {
        var tagsValue = parameters.tags[tagsKey];
        tagsDictionary[tagsKey] = tagsValue;
      }
      virtualNetworkJsonFormatValue['tags'] = tagsDictionary;
    }
    
    requestContent = JSON.stringify(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200 && statusCode !== 201) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200 || statusCode === 201) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var virtualNetworkInstance = { subnets: [], tags: {} };
          result.virtualNetwork = virtualNetworkInstance;
          
          var propertiesValue3 = responseDoc['properties'];
          if (propertiesValue3 !== null && propertiesValue3 !== undefined) {
            var addressSpaceValue2 = propertiesValue3['addressSpace'];
            if (addressSpaceValue2 !== null && addressSpaceValue2 !== undefined) {
              var addressSpaceInstance = { addressPrefixes: [] };
              virtualNetworkInstance.addressSpace = addressSpaceInstance;
              
              var addressPrefixesArray2 = addressSpaceValue2['addressPrefixes'];
              if (addressPrefixesArray2 !== null && addressPrefixesArray2 !== undefined) {
                for (var loweredIndex6 = 0; loweredIndex6 < addressPrefixesArray2.length; loweredIndex6 = loweredIndex6 + 1) {
                  var addressPrefixesValue = addressPrefixesArray2[loweredIndex6];
                  addressSpaceInstance.addressPrefixes.push(addressPrefixesValue);
                }
              }
            }
            
            var dhcpOptionsValue2 = propertiesValue3['dhcpOptions'];
            if (dhcpOptionsValue2 !== null && dhcpOptionsValue2 !== undefined) {
              var dhcpOptionsInstance = { dnsServers: [] };
              virtualNetworkInstance.dhcpOptions = dhcpOptionsInstance;
              
              var dnsServersArray2 = dhcpOptionsValue2['dnsServers'];
              if (dnsServersArray2 !== null && dnsServersArray2 !== undefined) {
                for (var loweredIndex7 = 0; loweredIndex7 < dnsServersArray2.length; loweredIndex7 = loweredIndex7 + 1) {
                  var dnsServersValue = dnsServersArray2[loweredIndex7];
                  dhcpOptionsInstance.dnsServers.push(dnsServersValue);
                }
              }
            }
            
            var subnetsArray2 = propertiesValue3['subnets'];
            if (subnetsArray2 !== null && subnetsArray2 !== undefined) {
              for (var loweredIndex8 = 0; loweredIndex8 < subnetsArray2.length; loweredIndex8 = loweredIndex8 + 1) {
                var subnetsValue = subnetsArray2[loweredIndex8];
                var subnetJsonFormatInstance = { ipConfigurations: [] };
                virtualNetworkInstance.subnets.push(subnetJsonFormatInstance);
                
                var propertiesValue4 = subnetsValue['properties'];
                if (propertiesValue4 !== null && propertiesValue4 !== undefined) {
                  var addressPrefixValue = propertiesValue4['addressPrefix'];
                  if (addressPrefixValue !== null && addressPrefixValue !== undefined) {
                    var addressPrefixInstance = addressPrefixValue;
                    subnetJsonFormatInstance.addressPrefix = addressPrefixInstance;
                  }
                  
                  var networkSecurityGroupValue2 = propertiesValue4['networkSecurityGroup'];
                  if (networkSecurityGroupValue2 !== null && networkSecurityGroupValue2 !== undefined) {
                    var networkSecurityGroupInstance = {};
                    subnetJsonFormatInstance.networkSecurityGroup = networkSecurityGroupInstance;
                    
                    var idValue = networkSecurityGroupValue2['id'];
                    if (idValue !== null && idValue !== undefined) {
                      var idInstance = idValue;
                      networkSecurityGroupInstance.id = idInstance;
                    }
                  }
                  
                  var routeTableValue2 = propertiesValue4['routeTable'];
                  if (routeTableValue2 !== null && routeTableValue2 !== undefined) {
                    var routeTableInstance = {};
                    subnetJsonFormatInstance.routeTable = routeTableInstance;
                    
                    var idValue2 = routeTableValue2['id'];
                    if (idValue2 !== null && idValue2 !== undefined) {
                      var idInstance2 = idValue2;
                      routeTableInstance.id = idInstance2;
                    }
                  }
                  
                  var ipConfigurationsArray2 = propertiesValue4['ipConfigurations'];
                  if (ipConfigurationsArray2 !== null && ipConfigurationsArray2 !== undefined) {
                    for (var loweredIndex9 = 0; loweredIndex9 < ipConfigurationsArray2.length; loweredIndex9 = loweredIndex9 + 1) {
                      var ipConfigurationsValue = ipConfigurationsArray2[loweredIndex9];
                      var resourceIdInstance = {};
                      subnetJsonFormatInstance.ipConfigurations.push(resourceIdInstance);
                      
                      var idValue3 = ipConfigurationsValue['id'];
                      if (idValue3 !== null && idValue3 !== undefined) {
                        var idInstance3 = idValue3;
                        resourceIdInstance.id = idInstance3;
                      }
                    }
                  }
                  
                  var provisioningStateValue = propertiesValue4['provisioningState'];
                  if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
                    var provisioningStateInstance = provisioningStateValue;
                    subnetJsonFormatInstance.provisioningState = provisioningStateInstance;
                  }
                }
                
                var nameValue = subnetsValue['name'];
                if (nameValue !== null && nameValue !== undefined) {
                  var nameInstance = nameValue;
                  subnetJsonFormatInstance.name = nameInstance;
                }
                
                var etagValue = subnetsValue['etag'];
                if (etagValue !== null && etagValue !== undefined) {
                  var etagInstance = etagValue;
                  subnetJsonFormatInstance.etag = etagInstance;
                }
                
                var idValue4 = subnetsValue['id'];
                if (idValue4 !== null && idValue4 !== undefined) {
                  var idInstance4 = idValue4;
                  subnetJsonFormatInstance.id = idInstance4;
                }
              }
            }
            
            var resourceGuidValue = propertiesValue3['resourceGuid'];
            if (resourceGuidValue !== null && resourceGuidValue !== undefined) {
              var resourceGuidInstance = resourceGuidValue;
              virtualNetworkInstance.resourceGuid = resourceGuidInstance;
            }
            
            var provisioningStateValue2 = propertiesValue3['provisioningState'];
            if (provisioningStateValue2 !== null && provisioningStateValue2 !== undefined) {
              var provisioningStateInstance2 = provisioningStateValue2;
              virtualNetworkInstance.provisioningState = provisioningStateInstance2;
            }
          }
          
          var etagValue2 = responseDoc['etag'];
          if (etagValue2 !== null && etagValue2 !== undefined) {
            var etagInstance2 = etagValue2;
            virtualNetworkInstance.etag = etagInstance2;
          }
          
          var idValue5 = responseDoc['id'];
          if (idValue5 !== null && idValue5 !== undefined) {
            var idInstance5 = idValue5;
            virtualNetworkInstance.id = idInstance5;
          }
          
          var nameValue2 = responseDoc['name'];
          if (nameValue2 !== null && nameValue2 !== undefined) {
            var nameInstance2 = nameValue2;
            virtualNetworkInstance.name = nameInstance2;
          }
          
          var typeValue = responseDoc['type'];
          if (typeValue !== null && typeValue !== undefined) {
            var typeInstance = typeValue;
            virtualNetworkInstance.type = typeInstance;
          }
          
          var locationValue = responseDoc['location'];
          if (locationValue !== null && locationValue !== undefined) {
            var locationInstance = locationValue;
            virtualNetworkInstance.location = locationInstance;
          }
          
          var tagsSequenceElement = responseDoc['tags'];
          if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
            for (var property in tagsSequenceElement) {
              var tagsKey2 = property;
              var tagsValue2 = tagsSequenceElement[property];
              virtualNetworkInstance.tags[tagsKey2] = tagsValue2;
            }
          }
          
          var errorValue = responseDoc['error'];
          if (errorValue !== null && errorValue !== undefined) {
            var errorInstance = { details: [] };
            result.error = errorInstance;
            
            var codeValue = errorValue['code'];
            if (codeValue !== null && codeValue !== undefined) {
              var codeInstance = codeValue;
              errorInstance.code = codeInstance;
            }
            
            var messageValue = errorValue['message'];
            if (messageValue !== null && messageValue !== undefined) {
              var messageInstance = messageValue;
              errorInstance.message = messageInstance;
            }
            
            var targetValue = errorValue['target'];
            if (targetValue !== null && targetValue !== undefined) {
              var targetInstance = targetValue;
              errorInstance.target = targetInstance;
            }
            
            var detailsArray = errorValue['details'];
            if (detailsArray !== null && detailsArray !== undefined) {
              for (var loweredIndex10 = 0; loweredIndex10 < detailsArray.length; loweredIndex10 = loweredIndex10 + 1) {
                var detailsValue = detailsArray[loweredIndex10];
                var errorDetailsInstance = {};
                errorInstance.details.push(errorDetailsInstance);
                
                var codeValue2 = detailsValue['code'];
                if (codeValue2 !== null && codeValue2 !== undefined) {
                  var codeInstance2 = codeValue2;
                  errorDetailsInstance.code = codeInstance2;
                }
                
                var targetValue2 = detailsValue['target'];
                if (targetValue2 !== null && targetValue2 !== undefined) {
                  var targetInstance2 = targetValue2;
                  errorDetailsInstance.target = targetInstance2;
                }
                
                var messageValue2 = detailsValue['message'];
                if (messageValue2 !== null && messageValue2 !== undefined) {
                  var messageInstance2 = messageValue2;
                  errorDetailsInstance.message = messageInstance2;
                }
              }
            }
            
            var innerErrorValue = errorValue['innerError'];
            if (innerErrorValue !== null && innerErrorValue !== undefined) {
              var innerErrorInstance = innerErrorValue;
              errorInstance.innerError = innerErrorInstance;
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      result.azureAsyncOperation = response.headers['azure-asyncoperation'];
      result.retryAfter = parseInt(response.headers['retry-after'], 10);
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The Delete VirtualNetwork operation deletes the specifed virtual network
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} virtualNetworkName The name of the virtual network.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  VirtualNetworkOperations.prototype.beginDeleting = function(resourceGroupName, virtualNetworkName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (virtualNetworkName === null || virtualNetworkName === undefined) {
      return callback(new Error('virtualNetworkName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Network';
    url2 = url2 + '/virtualnetworks/';
    url2 = url2 + encodeURIComponent(virtualNetworkName);
    var queryParameters = [];
    queryParameters.push('api-version=2015-05-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'DELETE';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200 && statusCode !== 202 && statusCode !== 204) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      result = {};
      result.statusCode = statusCode;
      result.azureAsyncOperation = response.headers['azure-asyncoperation'];
      result.retryAfter = parseInt(response.headers['retry-after'], 10);
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The Put VirtualNetwork operation creates/updates a virtual networkin the
   * specified resource group.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} virtualNetworkName The name of the virtual network.
   * 
   * @param {VirtualNetwork} parameters Parameters supplied to the
   * create/update Virtual Network operation
   * 
   * @param {AddressSpace} [parameters.addressSpace] Gets or sets AddressSpace
   * that contains an array of IP address ranges that can be used by subnets
   * 
   * @param {IEnumerable} [parameters.addressSpace.addressPrefixes] Gets or
   * sets List of address blocks reserved for this virtual network in CIDR
   * notation
   * 
   * @param {DhcpOptions} [parameters.dhcpOptions] Gets or sets DHCPOptions
   * that contains an array of DNS servers available to VMs deployed in the
   * virtual network
   * 
   * @param {IEnumerable} [parameters.dhcpOptions.dnsServers] Gets or sets list
   * of DNS servers IP addresses
   * 
   * @param {IEnumerable} [parameters.subnets] Gets or sets List of subnets in
   * a VirtualNetwork
   * 
   * @param {string} [parameters.provisioningState] Gets or sets Provisioning
   * state of the PublicIP resource Updating/Deleting/Failed
   * 
   * @param {string} [parameters.resourceGuid] Gets or sets resource guid
   * property of the VirtualNetwork resource
   * 
   * @param {string} [parameters.etag] Gets a unique read-only string that
   * changes whenever the resource is updated
   * 
   * @param {string} [parameters.id] Gets or sets the ID of the resource.
   * 
   * @param {string} [parameters.name] Gets or sets the name of the resource.
   * 
   * @param {string} [parameters.type] Gets or sets the type of the resource.
   * 
   * @param {string} [parameters.location] Gets or sets the location of the
   * resource.
   * 
   * @param {object} [parameters.tags] Gets or sets the tags attached to the
   * resource.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  VirtualNetworkOperations.prototype.createOrUpdate = function(resourceGroupName, virtualNetworkName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.virtualNetworks.beginCreateOrUpdating(resourceGroupName, virtualNetworkName, parameters, function (err, result) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var delayInSeconds = result.retryAfter;
      if (delayInSeconds === 0) {
        delayInSeconds = 30;
      }
      if (client2.longRunningOperationInitialTimeout >= 0) {
        delayInSeconds = client2.longRunningOperationInitialTimeout;
      }
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.getLongRunningOperationStatus(result.azureAsyncOperation, function (err2, result2) {
            if (err2 !== null && err2 !== undefined) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                return callback(null, result2);
              } else {
                delayInSeconds = result2.retryAfter;
                if (delayInSeconds === 0) {
                  delayInSeconds = 15;
                }
                if (client2.longRunningOperationRetryTimeout >= 0) {
                  delayInSeconds = client2.longRunningOperationRetryTimeout;
                }
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  /**
   * The Delete VirtualNetwork operation deletes the specifed virtual network
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} virtualNetworkName The name of the virtual network.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  VirtualNetworkOperations.prototype.deleteMethod = function(resourceGroupName, virtualNetworkName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.virtualNetworks.beginDeleting(resourceGroupName, virtualNetworkName, function (err, result) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var delayInSeconds = result.retryAfter;
      if (delayInSeconds === 0) {
        delayInSeconds = 30;
      }
      if (client2.longRunningOperationInitialTimeout >= 0) {
        delayInSeconds = client2.longRunningOperationInitialTimeout;
      }
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.getLongRunningOperationStatus(result.azureAsyncOperation, function (err2, result2) {
            if (err2 !== null && err2 !== undefined) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                return callback(null, result2);
              } else {
                delayInSeconds = result2.retryAfter;
                if (delayInSeconds === 0) {
                  delayInSeconds = 15;
                }
                if (client2.longRunningOperationRetryTimeout >= 0) {
                  delayInSeconds = client2.longRunningOperationRetryTimeout;
                }
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  /**
   * The Get VirtualNetwork operation retrieves information about the specified
   * virtual network.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} virtualNetworkName The name of the virtual network.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  VirtualNetworkOperations.prototype.get = function(resourceGroupName, virtualNetworkName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (virtualNetworkName === null || virtualNetworkName === undefined) {
      return callback(new Error('virtualNetworkName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Network';
    url2 = url2 + '/virtualnetworks/';
    url2 = url2 + encodeURIComponent(virtualNetworkName);
    var queryParameters = [];
    queryParameters.push('api-version=2015-05-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var virtualNetworkInstance = { subnets: [], tags: {} };
          result.virtualNetwork = virtualNetworkInstance;
          
          var propertiesValue = responseDoc['properties'];
          if (propertiesValue !== null && propertiesValue !== undefined) {
            var addressSpaceValue = propertiesValue['addressSpace'];
            if (addressSpaceValue !== null && addressSpaceValue !== undefined) {
              var addressSpaceInstance = { addressPrefixes: [] };
              virtualNetworkInstance.addressSpace = addressSpaceInstance;
              
              var addressPrefixesArray = addressSpaceValue['addressPrefixes'];
              if (addressPrefixesArray !== null && addressPrefixesArray !== undefined) {
                for (var loweredIndex1 = 0; loweredIndex1 < addressPrefixesArray.length; loweredIndex1 = loweredIndex1 + 1) {
                  var addressPrefixesValue = addressPrefixesArray[loweredIndex1];
                  addressSpaceInstance.addressPrefixes.push(addressPrefixesValue);
                }
              }
            }
            
            var dhcpOptionsValue = propertiesValue['dhcpOptions'];
            if (dhcpOptionsValue !== null && dhcpOptionsValue !== undefined) {
              var dhcpOptionsInstance = { dnsServers: [] };
              virtualNetworkInstance.dhcpOptions = dhcpOptionsInstance;
              
              var dnsServersArray = dhcpOptionsValue['dnsServers'];
              if (dnsServersArray !== null && dnsServersArray !== undefined) {
                for (var loweredIndex2 = 0; loweredIndex2 < dnsServersArray.length; loweredIndex2 = loweredIndex2 + 1) {
                  var dnsServersValue = dnsServersArray[loweredIndex2];
                  dhcpOptionsInstance.dnsServers.push(dnsServersValue);
                }
              }
            }
            
            var subnetsArray = propertiesValue['subnets'];
            if (subnetsArray !== null && subnetsArray !== undefined) {
              for (var loweredIndex3 = 0; loweredIndex3 < subnetsArray.length; loweredIndex3 = loweredIndex3 + 1) {
                var subnetsValue = subnetsArray[loweredIndex3];
                var subnetJsonFormatInstance = { ipConfigurations: [] };
                virtualNetworkInstance.subnets.push(subnetJsonFormatInstance);
                
                var propertiesValue2 = subnetsValue['properties'];
                if (propertiesValue2 !== null && propertiesValue2 !== undefined) {
                  var addressPrefixValue = propertiesValue2['addressPrefix'];
                  if (addressPrefixValue !== null && addressPrefixValue !== undefined) {
                    var addressPrefixInstance = addressPrefixValue;
                    subnetJsonFormatInstance.addressPrefix = addressPrefixInstance;
                  }
                  
                  var networkSecurityGroupValue = propertiesValue2['networkSecurityGroup'];
                  if (networkSecurityGroupValue !== null && networkSecurityGroupValue !== undefined) {
                    var networkSecurityGroupInstance = {};
                    subnetJsonFormatInstance.networkSecurityGroup = networkSecurityGroupInstance;
                    
                    var idValue = networkSecurityGroupValue['id'];
                    if (idValue !== null && idValue !== undefined) {
                      var idInstance = idValue;
                      networkSecurityGroupInstance.id = idInstance;
                    }
                  }
                  
                  var routeTableValue = propertiesValue2['routeTable'];
                  if (routeTableValue !== null && routeTableValue !== undefined) {
                    var routeTableInstance = {};
                    subnetJsonFormatInstance.routeTable = routeTableInstance;
                    
                    var idValue2 = routeTableValue['id'];
                    if (idValue2 !== null && idValue2 !== undefined) {
                      var idInstance2 = idValue2;
                      routeTableInstance.id = idInstance2;
                    }
                  }
                  
                  var ipConfigurationsArray = propertiesValue2['ipConfigurations'];
                  if (ipConfigurationsArray !== null && ipConfigurationsArray !== undefined) {
                    for (var loweredIndex4 = 0; loweredIndex4 < ipConfigurationsArray.length; loweredIndex4 = loweredIndex4 + 1) {
                      var ipConfigurationsValue = ipConfigurationsArray[loweredIndex4];
                      var resourceIdInstance = {};
                      subnetJsonFormatInstance.ipConfigurations.push(resourceIdInstance);
                      
                      var idValue3 = ipConfigurationsValue['id'];
                      if (idValue3 !== null && idValue3 !== undefined) {
                        var idInstance3 = idValue3;
                        resourceIdInstance.id = idInstance3;
                      }
                    }
                  }
                  
                  var provisioningStateValue = propertiesValue2['provisioningState'];
                  if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
                    var provisioningStateInstance = provisioningStateValue;
                    subnetJsonFormatInstance.provisioningState = provisioningStateInstance;
                  }
                }
                
                var nameValue = subnetsValue['name'];
                if (nameValue !== null && nameValue !== undefined) {
                  var nameInstance = nameValue;
                  subnetJsonFormatInstance.name = nameInstance;
                }
                
                var etagValue = subnetsValue['etag'];
                if (etagValue !== null && etagValue !== undefined) {
                  var etagInstance = etagValue;
                  subnetJsonFormatInstance.etag = etagInstance;
                }
                
                var idValue4 = subnetsValue['id'];
                if (idValue4 !== null && idValue4 !== undefined) {
                  var idInstance4 = idValue4;
                  subnetJsonFormatInstance.id = idInstance4;
                }
              }
            }
            
            var resourceGuidValue = propertiesValue['resourceGuid'];
            if (resourceGuidValue !== null && resourceGuidValue !== undefined) {
              var resourceGuidInstance = resourceGuidValue;
              virtualNetworkInstance.resourceGuid = resourceGuidInstance;
            }
            
            var provisioningStateValue2 = propertiesValue['provisioningState'];
            if (provisioningStateValue2 !== null && provisioningStateValue2 !== undefined) {
              var provisioningStateInstance2 = provisioningStateValue2;
              virtualNetworkInstance.provisioningState = provisioningStateInstance2;
            }
          }
          
          var etagValue2 = responseDoc['etag'];
          if (etagValue2 !== null && etagValue2 !== undefined) {
            var etagInstance2 = etagValue2;
            virtualNetworkInstance.etag = etagInstance2;
          }
          
          var idValue5 = responseDoc['id'];
          if (idValue5 !== null && idValue5 !== undefined) {
            var idInstance5 = idValue5;
            virtualNetworkInstance.id = idInstance5;
          }
          
          var nameValue2 = responseDoc['name'];
          if (nameValue2 !== null && nameValue2 !== undefined) {
            var nameInstance2 = nameValue2;
            virtualNetworkInstance.name = nameInstance2;
          }
          
          var typeValue = responseDoc['type'];
          if (typeValue !== null && typeValue !== undefined) {
            var typeInstance = typeValue;
            virtualNetworkInstance.type = typeInstance;
          }
          
          var locationValue = responseDoc['location'];
          if (locationValue !== null && locationValue !== undefined) {
            var locationInstance = locationValue;
            virtualNetworkInstance.location = locationInstance;
          }
          
          var tagsSequenceElement = responseDoc['tags'];
          if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
            for (var property in tagsSequenceElement) {
              var tagsKey = property;
              var tagsValue = tagsSequenceElement[property];
              virtualNetworkInstance.tags[tagsKey] = tagsValue;
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The list VirtualNetwork returns all Virtual Networks in a resource group
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  VirtualNetworkOperations.prototype.list = function(resourceGroupName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Network';
    url2 = url2 + '/virtualnetworks';
    var queryParameters = [];
    queryParameters.push('api-version=2015-05-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = { virtualNetworks: [] };
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var valueArray = responseDoc['value'];
          if (valueArray !== null && valueArray !== undefined) {
            for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var valueValue = valueArray[loweredIndex1];
              var virtualNetworkJsonFormatInstance = { subnets: [], tags: {} };
              result.virtualNetworks.push(virtualNetworkJsonFormatInstance);
              
              var propertiesValue = valueValue['properties'];
              if (propertiesValue !== null && propertiesValue !== undefined) {
                var addressSpaceValue = propertiesValue['addressSpace'];
                if (addressSpaceValue !== null && addressSpaceValue !== undefined) {
                  var addressSpaceInstance = { addressPrefixes: [] };
                  virtualNetworkJsonFormatInstance.addressSpace = addressSpaceInstance;
                  
                  var addressPrefixesArray = addressSpaceValue['addressPrefixes'];
                  if (addressPrefixesArray !== null && addressPrefixesArray !== undefined) {
                    for (var loweredIndex2 = 0; loweredIndex2 < addressPrefixesArray.length; loweredIndex2 = loweredIndex2 + 1) {
                      var addressPrefixesValue = addressPrefixesArray[loweredIndex2];
                      addressSpaceInstance.addressPrefixes.push(addressPrefixesValue);
                    }
                  }
                }
                
                var dhcpOptionsValue = propertiesValue['dhcpOptions'];
                if (dhcpOptionsValue !== null && dhcpOptionsValue !== undefined) {
                  var dhcpOptionsInstance = { dnsServers: [] };
                  virtualNetworkJsonFormatInstance.dhcpOptions = dhcpOptionsInstance;
                  
                  var dnsServersArray = dhcpOptionsValue['dnsServers'];
                  if (dnsServersArray !== null && dnsServersArray !== undefined) {
                    for (var loweredIndex3 = 0; loweredIndex3 < dnsServersArray.length; loweredIndex3 = loweredIndex3 + 1) {
                      var dnsServersValue = dnsServersArray[loweredIndex3];
                      dhcpOptionsInstance.dnsServers.push(dnsServersValue);
                    }
                  }
                }
                
                var subnetsArray = propertiesValue['subnets'];
                if (subnetsArray !== null && subnetsArray !== undefined) {
                  for (var loweredIndex4 = 0; loweredIndex4 < subnetsArray.length; loweredIndex4 = loweredIndex4 + 1) {
                    var subnetsValue = subnetsArray[loweredIndex4];
                    var subnetJsonFormatInstance = { ipConfigurations: [] };
                    virtualNetworkJsonFormatInstance.subnets.push(subnetJsonFormatInstance);
                    
                    var propertiesValue2 = subnetsValue['properties'];
                    if (propertiesValue2 !== null && propertiesValue2 !== undefined) {
                      var addressPrefixValue = propertiesValue2['addressPrefix'];
                      if (addressPrefixValue !== null && addressPrefixValue !== undefined) {
                        var addressPrefixInstance = addressPrefixValue;
                        subnetJsonFormatInstance.addressPrefix = addressPrefixInstance;
                      }
                      
                      var networkSecurityGroupValue = propertiesValue2['networkSecurityGroup'];
                      if (networkSecurityGroupValue !== null && networkSecurityGroupValue !== undefined) {
                        var networkSecurityGroupInstance = {};
                        subnetJsonFormatInstance.networkSecurityGroup = networkSecurityGroupInstance;
                        
                        var idValue = networkSecurityGroupValue['id'];
                        if (idValue !== null && idValue !== undefined) {
                          var idInstance = idValue;
                          networkSecurityGroupInstance.id = idInstance;
                        }
                      }
                      
                      var routeTableValue = propertiesValue2['routeTable'];
                      if (routeTableValue !== null && routeTableValue !== undefined) {
                        var routeTableInstance = {};
                        subnetJsonFormatInstance.routeTable = routeTableInstance;
                        
                        var idValue2 = routeTableValue['id'];
                        if (idValue2 !== null && idValue2 !== undefined) {
                          var idInstance2 = idValue2;
                          routeTableInstance.id = idInstance2;
                        }
                      }
                      
                      var ipConfigurationsArray = propertiesValue2['ipConfigurations'];
                      if (ipConfigurationsArray !== null && ipConfigurationsArray !== undefined) {
                        for (var loweredIndex5 = 0; loweredIndex5 < ipConfigurationsArray.length; loweredIndex5 = loweredIndex5 + 1) {
                          var ipConfigurationsValue = ipConfigurationsArray[loweredIndex5];
                          var resourceIdInstance = {};
                          subnetJsonFormatInstance.ipConfigurations.push(resourceIdInstance);
                          
                          var idValue3 = ipConfigurationsValue['id'];
                          if (idValue3 !== null && idValue3 !== undefined) {
                            var idInstance3 = idValue3;
                            resourceIdInstance.id = idInstance3;
                          }
                        }
                      }
                      
                      var provisioningStateValue = propertiesValue2['provisioningState'];
                      if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
                        var provisioningStateInstance = provisioningStateValue;
                        subnetJsonFormatInstance.provisioningState = provisioningStateInstance;
                      }
                    }
                    
                    var nameValue = subnetsValue['name'];
                    if (nameValue !== null && nameValue !== undefined) {
                      var nameInstance = nameValue;
                      subnetJsonFormatInstance.name = nameInstance;
                    }
                    
                    var etagValue = subnetsValue['etag'];
                    if (etagValue !== null && etagValue !== undefined) {
                      var etagInstance = etagValue;
                      subnetJsonFormatInstance.etag = etagInstance;
                    }
                    
                    var idValue4 = subnetsValue['id'];
                    if (idValue4 !== null && idValue4 !== undefined) {
                      var idInstance4 = idValue4;
                      subnetJsonFormatInstance.id = idInstance4;
                    }
                  }
                }
                
                var resourceGuidValue = propertiesValue['resourceGuid'];
                if (resourceGuidValue !== null && resourceGuidValue !== undefined) {
                  var resourceGuidInstance = resourceGuidValue;
                  virtualNetworkJsonFormatInstance.resourceGuid = resourceGuidInstance;
                }
                
                var provisioningStateValue2 = propertiesValue['provisioningState'];
                if (provisioningStateValue2 !== null && provisioningStateValue2 !== undefined) {
                  var provisioningStateInstance2 = provisioningStateValue2;
                  virtualNetworkJsonFormatInstance.provisioningState = provisioningStateInstance2;
                }
              }
              
              var etagValue2 = valueValue['etag'];
              if (etagValue2 !== null && etagValue2 !== undefined) {
                var etagInstance2 = etagValue2;
                virtualNetworkJsonFormatInstance.etag = etagInstance2;
              }
              
              var idValue5 = valueValue['id'];
              if (idValue5 !== null && idValue5 !== undefined) {
                var idInstance5 = idValue5;
                virtualNetworkJsonFormatInstance.id = idInstance5;
              }
              
              var nameValue2 = valueValue['name'];
              if (nameValue2 !== null && nameValue2 !== undefined) {
                var nameInstance2 = nameValue2;
                virtualNetworkJsonFormatInstance.name = nameInstance2;
              }
              
              var typeValue = valueValue['type'];
              if (typeValue !== null && typeValue !== undefined) {
                var typeInstance = typeValue;
                virtualNetworkJsonFormatInstance.type = typeInstance;
              }
              
              var locationValue = valueValue['location'];
              if (locationValue !== null && locationValue !== undefined) {
                var locationInstance = locationValue;
                virtualNetworkJsonFormatInstance.location = locationInstance;
              }
              
              var tagsSequenceElement = valueValue['tags'];
              if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
                for (var property in tagsSequenceElement) {
                  var tagsKey = property;
                  var tagsValue = tagsSequenceElement[property];
                  virtualNetworkJsonFormatInstance.tags[tagsKey] = tagsValue;
                }
              }
            }
          }
          
          var nextLinkValue = responseDoc['nextLink'];
          if (nextLinkValue !== null && nextLinkValue !== undefined) {
            var nextLinkInstance = nextLinkValue;
            result.nextLink = nextLinkInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The list VirtualNetwork returns all Virtual Networks in a subscription
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  VirtualNetworkOperations.prototype.listAll = function(callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Network';
    url2 = url2 + '/virtualnetworks';
    var queryParameters = [];
    queryParameters.push('api-version=2015-05-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = { virtualNetworks: [] };
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var valueArray = responseDoc['value'];
          if (valueArray !== null && valueArray !== undefined) {
            for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var valueValue = valueArray[loweredIndex1];
              var virtualNetworkJsonFormatInstance = { subnets: [], tags: {} };
              result.virtualNetworks.push(virtualNetworkJsonFormatInstance);
              
              var propertiesValue = valueValue['properties'];
              if (propertiesValue !== null && propertiesValue !== undefined) {
                var addressSpaceValue = propertiesValue['addressSpace'];
                if (addressSpaceValue !== null && addressSpaceValue !== undefined) {
                  var addressSpaceInstance = { addressPrefixes: [] };
                  virtualNetworkJsonFormatInstance.addressSpace = addressSpaceInstance;
                  
                  var addressPrefixesArray = addressSpaceValue['addressPrefixes'];
                  if (addressPrefixesArray !== null && addressPrefixesArray !== undefined) {
                    for (var loweredIndex2 = 0; loweredIndex2 < addressPrefixesArray.length; loweredIndex2 = loweredIndex2 + 1) {
                      var addressPrefixesValue = addressPrefixesArray[loweredIndex2];
                      addressSpaceInstance.addressPrefixes.push(addressPrefixesValue);
                    }
                  }
                }
                
                var dhcpOptionsValue = propertiesValue['dhcpOptions'];
                if (dhcpOptionsValue !== null && dhcpOptionsValue !== undefined) {
                  var dhcpOptionsInstance = { dnsServers: [] };
                  virtualNetworkJsonFormatInstance.dhcpOptions = dhcpOptionsInstance;
                  
                  var dnsServersArray = dhcpOptionsValue['dnsServers'];
                  if (dnsServersArray !== null && dnsServersArray !== undefined) {
                    for (var loweredIndex3 = 0; loweredIndex3 < dnsServersArray.length; loweredIndex3 = loweredIndex3 + 1) {
                      var dnsServersValue = dnsServersArray[loweredIndex3];
                      dhcpOptionsInstance.dnsServers.push(dnsServersValue);
                    }
                  }
                }
                
                var subnetsArray = propertiesValue['subnets'];
                if (subnetsArray !== null && subnetsArray !== undefined) {
                  for (var loweredIndex4 = 0; loweredIndex4 < subnetsArray.length; loweredIndex4 = loweredIndex4 + 1) {
                    var subnetsValue = subnetsArray[loweredIndex4];
                    var subnetJsonFormatInstance = { ipConfigurations: [] };
                    virtualNetworkJsonFormatInstance.subnets.push(subnetJsonFormatInstance);
                    
                    var propertiesValue2 = subnetsValue['properties'];
                    if (propertiesValue2 !== null && propertiesValue2 !== undefined) {
                      var addressPrefixValue = propertiesValue2['addressPrefix'];
                      if (addressPrefixValue !== null && addressPrefixValue !== undefined) {
                        var addressPrefixInstance = addressPrefixValue;
                        subnetJsonFormatInstance.addressPrefix = addressPrefixInstance;
                      }
                      
                      var networkSecurityGroupValue = propertiesValue2['networkSecurityGroup'];
                      if (networkSecurityGroupValue !== null && networkSecurityGroupValue !== undefined) {
                        var networkSecurityGroupInstance = {};
                        subnetJsonFormatInstance.networkSecurityGroup = networkSecurityGroupInstance;
                        
                        var idValue = networkSecurityGroupValue['id'];
                        if (idValue !== null && idValue !== undefined) {
                          var idInstance = idValue;
                          networkSecurityGroupInstance.id = idInstance;
                        }
                      }
                      
                      var routeTableValue = propertiesValue2['routeTable'];
                      if (routeTableValue !== null && routeTableValue !== undefined) {
                        var routeTableInstance = {};
                        subnetJsonFormatInstance.routeTable = routeTableInstance;
                        
                        var idValue2 = routeTableValue['id'];
                        if (idValue2 !== null && idValue2 !== undefined) {
                          var idInstance2 = idValue2;
                          routeTableInstance.id = idInstance2;
                        }
                      }
                      
                      var ipConfigurationsArray = propertiesValue2['ipConfigurations'];
                      if (ipConfigurationsArray !== null && ipConfigurationsArray !== undefined) {
                        for (var loweredIndex5 = 0; loweredIndex5 < ipConfigurationsArray.length; loweredIndex5 = loweredIndex5 + 1) {
                          var ipConfigurationsValue = ipConfigurationsArray[loweredIndex5];
                          var resourceIdInstance = {};
                          subnetJsonFormatInstance.ipConfigurations.push(resourceIdInstance);
                          
                          var idValue3 = ipConfigurationsValue['id'];
                          if (idValue3 !== null && idValue3 !== undefined) {
                            var idInstance3 = idValue3;
                            resourceIdInstance.id = idInstance3;
                          }
                        }
                      }
                      
                      var provisioningStateValue = propertiesValue2['provisioningState'];
                      if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
                        var provisioningStateInstance = provisioningStateValue;
                        subnetJsonFormatInstance.provisioningState = provisioningStateInstance;
                      }
                    }
                    
                    var nameValue = subnetsValue['name'];
                    if (nameValue !== null && nameValue !== undefined) {
                      var nameInstance = nameValue;
                      subnetJsonFormatInstance.name = nameInstance;
                    }
                    
                    var etagValue = subnetsValue['etag'];
                    if (etagValue !== null && etagValue !== undefined) {
                      var etagInstance = etagValue;
                      subnetJsonFormatInstance.etag = etagInstance;
                    }
                    
                    var idValue4 = subnetsValue['id'];
                    if (idValue4 !== null && idValue4 !== undefined) {
                      var idInstance4 = idValue4;
                      subnetJsonFormatInstance.id = idInstance4;
                    }
                  }
                }
                
                var resourceGuidValue = propertiesValue['resourceGuid'];
                if (resourceGuidValue !== null && resourceGuidValue !== undefined) {
                  var resourceGuidInstance = resourceGuidValue;
                  virtualNetworkJsonFormatInstance.resourceGuid = resourceGuidInstance;
                }
                
                var provisioningStateValue2 = propertiesValue['provisioningState'];
                if (provisioningStateValue2 !== null && provisioningStateValue2 !== undefined) {
                  var provisioningStateInstance2 = provisioningStateValue2;
                  virtualNetworkJsonFormatInstance.provisioningState = provisioningStateInstance2;
                }
              }
              
              var etagValue2 = valueValue['etag'];
              if (etagValue2 !== null && etagValue2 !== undefined) {
                var etagInstance2 = etagValue2;
                virtualNetworkJsonFormatInstance.etag = etagInstance2;
              }
              
              var idValue5 = valueValue['id'];
              if (idValue5 !== null && idValue5 !== undefined) {
                var idInstance5 = idValue5;
                virtualNetworkJsonFormatInstance.id = idInstance5;
              }
              
              var nameValue2 = valueValue['name'];
              if (nameValue2 !== null && nameValue2 !== undefined) {
                var nameInstance2 = nameValue2;
                virtualNetworkJsonFormatInstance.name = nameInstance2;
              }
              
              var typeValue = valueValue['type'];
              if (typeValue !== null && typeValue !== undefined) {
                var typeInstance = typeValue;
                virtualNetworkJsonFormatInstance.type = typeInstance;
              }
              
              var locationValue = valueValue['location'];
              if (locationValue !== null && locationValue !== undefined) {
                var locationInstance = locationValue;
                virtualNetworkJsonFormatInstance.location = locationInstance;
              }
              
              var tagsSequenceElement = valueValue['tags'];
              if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
                for (var property in tagsSequenceElement) {
                  var tagsKey = property;
                  var tagsValue = tagsSequenceElement[property];
                  virtualNetworkJsonFormatInstance.tags[tagsKey] = tagsValue;
                }
              }
            }
          }
          
          var nextLinkValue = responseDoc['nextLink'];
          if (nextLinkValue !== null && nextLinkValue !== undefined) {
            var nextLinkInstance = nextLinkValue;
            result.nextLink = nextLinkInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  return VirtualNetworkOperations;
})();
